{"code": "public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public VisualGraph(VisualTable nodes,VisualTable edges,Boolean directed,String nodeKey,String sourceKey,String targetKey){\n  super(nodes,edges,directed,nodeKey,sourceKey,targetKey);\n}\n", "nl": "Create a new VisualGraph"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]"}
{"code": "public Map<String,File> dexClassIndex(){\n  return dexClassIndex;\n}\n", "nl": "Return the dex class index that maps class names to files"}
{"code": "protected TextViewer createText(Composite parent){\n  return new TextViewer(parent,SWT.V_SCROLL | SWT.WRAP | SWT.MULTI| SWT.READ_ONLY);\n}\n", "nl": "Create the TextViewer"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void enableLabels(Collection<String> labels){\n  disabledLabels.removeAll(labels);\n}\n", "nl": "enable the named labels"}
{"code": "public boolean mustAlias(SootField field1,SootField field2){\n  return field1 == field2;\n}\n", "nl": "Gets whether the two fields must always point to the same runtime object"}
{"code": "public boolean isSource(){\n  return this.sinkSource == SinkSource.Source || this.sinkSource == SinkSource.Both;\n}\n", "nl": "Checks whether this definition models a source"}
{"code": "private boolean readyToShow(){\n  return (getFile() != null && mAccount != null && mLayout == R.layout.file_details_fragment);\n}\n", "nl": "Checks if the fragment is ready to show details of a OCFile"}
{"code": "public static void clearCommKey(AirMapFlight flight,final AirMapCallback<Void> listener){\n  String url=String.format(flightEndCommUrl,flight.getFlightId());\n  AirMap.getClient().post(url,new VoidCallback(listener));\n}\n", "nl": "Stop receiving notifications for traffic alerts"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static Drawable bitmapToDrawable(Bitmap bitmap){\n  return bitmap == null ? null : new BitmapDrawable(bitmap);\n}\n", "nl": "convert Bitmap to Drawable"}
{"code": "private boolean isChildService(Operation op){\n  String path=op.getUri().getPath();\n  return !path.equals(getParentPath(op));\n}\n", "nl": "Is the current service a child service"}
{"code": "public void mergeWith(DistributionDocument tpData,double fLearningRate){\n}\n", "nl": "TODO: Document"}
{"code": "public void onActivityResult(int requestCode,int resultCode,Intent data){\n  for (  Map.Entry<PlatformType,SSOHandler> entry : mMapSSOHandler.entrySet()) {\n    entry.getValue().onActivityResult(requestCode,resultCode,data);\n  }\n}\n", "nl": "actvitiy result"}
{"code": "String completedLedgerZNode(long firstTxId,long lastTxId,long logSegmentSeqNo){\n  return String.format(\"%s/%s\",logMetadata.getLogSegmentsPath(),completedLedgerZNodeName(firstTxId,lastTxId,logSegmentSeqNo));\n}\n", "nl": "Get the znode path for a finalize ledger"}
{"code": "public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed"}
{"code": "public static void printThread(Class<?> clazz,String msg){\n  if (IS_DEBUG_OF_THREAD) {\n    Log.w(clazz.getSimpleName(),\"### \" + msg + \" -> \"+ \" {name: \"+ Thread.currentThread().getName()+ \" , \"+ \"id:\"+ Thread.currentThread().getId()+ \"}\");\n  }\n}\n", "nl": "the print thread information <br> 2015-4-29"}
{"code": "private String toHex(byte[] data){\n  char[] chars=new char[data.length * 2];\n  for (int i=0; i < data.length; i++) {\n    chars[i * 2]=HEX_DIGITS[(data[i] >> 4) & 0xf];\n    chars[i * 2 + 1]=HEX_DIGITS[data[i] & 0xf];\n  }\n  return new String(chars);\n}\n", "nl": "Another helper function that will convert a byte array to a Hex String with leading zeros in place"}
{"code": "public OpenIntToDoubleHashMap(final double missingEntries){\n  this(DEFAULT_EXPECTED_SIZE,missingEntries);\n}\n", "nl": "Build an empty map with default size"}
{"code": "public double quadraticMean(){\n  return NumericReduceUtils.quadraticMean.reduce(this);\n}\n", "nl": "Returns the quadraticMean, aka the root-mean-square, for all values in this column"}
{"code": "public void schedule(String poolName,String serviceName,String dataId,long startTime) throws JobManagerException {\n  schedule(null,poolName,serviceName,dataId,startTime,-1,0,1,0,-1);\n}\n", "nl": "Schedule a job to start at a specific time with specific recurrence info"}
{"code": "public PollsEditQuery(VkApiClient client,UserActor actor,int ownerId,int pollId){\n  super(client,\"polls.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  pollId(pollId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void pickImage(Activity activity,int requestCode){\n  try {\n    activity.startActivityForResult(getImagePicker(),requestCode);\n  }\n catch (  ActivityNotFoundException e) {\n    showImagePickerError(activity);\n  }\n}\n", "nl": "Pick image from an Activity with a custom request code"}
{"code": "@Override public ListenableFuture<LeaseGrantResponse> grant(long ttl){\n  LeaseGrantRequest leaseGrantRequest=LeaseGrantRequest.newBuilder().setTTL(ttl).build();\n  return this.leaseFutureStub.leaseGrant(leaseGrantRequest);\n}\n", "nl": "New a lease with ttl value"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override protected void onRestoreInstanceState(Bundle savedInstanceState){\n  super.onRestoreInstanceState(savedInstanceState);\n  contentManager.onRestoreInstanceState(savedInstanceState);\n}\n", "nl": "Need for fix bug with some Samsung and Sony devices, when taking photo in landscape mode"}
{"code": "public MarketAddToAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,List<Integer> albumIds){\n  super(client,\"market.addToAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  albumIds(albumIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  ParametersDialog viewer=(ParametersDialog)getParent();\n  return viewer != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.EUCLIDEAN_NORMALIZED);\n}\n", "nl": "this is currently selected?"}
{"code": "public static void showError(Object parentIgnored,String message){\n  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,60000);\n}\n", "nl": "show an error notation"}
{"code": "public VideoSearchQuery shorter(Integer value){\n  return unsafeParam(\"shorter\",value);\n}\n", "nl": "Set shorter"}
{"code": "@ObjectiveCName(\"removeEntry:index:\") public List removeEntry(String entry,int index){\n  java.util.List entries=this.getEntries();\n  if (entries.get(index).equals(entry)) {\n    entries.remove(index);\n  }\n  this.updateList(entries);\n  return this;\n}\n", "nl": "Removes an entry from the list if it resides at a specific index"}
{"code": "public Builder longMathOp(String columnName,MathOp mathOp,long scalar){\n  return transform(new LongMathOpTransform(columnName,mathOp,scalar));\n}\n", "nl": "Perform a mathematical operation (add, subtract, scalar max etc) on the specified long column, with a scalar"}
{"code": "public boolean isSetAppkey(){\n  return this.appkey != null;\n}\n", "nl": "Returns true if field appkey is set (has been assigned a value) and false otherwise"}
{"code": "public static void onReceiveRepairPatch(Context context,String patchLocation){\n  Tinker.with(context).getPatchListener().onPatchReceived(patchLocation,false);\n}\n", "nl": "some file does not exist, repair them with :patch process Generally you will not use it"}
{"code": "public static ShoppingCart makeShoppingListCart(LocalDispatcher dispatcher,GenericValue shoppingList,Locale locale){\n  return makeShoppingListCart(null,dispatcher,shoppingList,locale);\n}\n", "nl": "Create a new shoppingCart form a shoppingList"}
{"code": "@Override public void start(){\n  impl.start();\n}\n", "nl": "Call this method to start fingerprint scanning"}
{"code": "public AppsSendRequestQuery separate(Boolean value){\n  return unsafeParam(\"separate\",value);\n}\n", "nl": "Set separate"}
{"code": "public static ToolbarTapTarget forToolbarMenuItem(Toolbar toolbar,@IdRes int menuItemId,CharSequence title,@Nullable CharSequence description){\n  return new ToolbarTapTarget(toolbar,menuItemId,title,description);\n}\n", "nl": "Return a tap target for the menu item from the given toolbar"}
{"code": "public VideoEditCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"video.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MessagesGetHistoryAttachmentsQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public NewsfeedGetQuery returnBanned(Boolean value){\n  return unsafeParam(\"return_banned\",value);\n}\n", "nl": "Return news items from banned sources"}
{"code": "private void triggerExpiredEvent(){\n  if (_listener != null)   _listener.onExpired(this);\n}\n", "nl": "Triggers the source expired event"}
{"code": "@Override public List<Map<String,String>> taskConfigs(int maxTasks){\n  ArrayList<Map<String,String>> configurations=new ArrayList<>();\n  for (int i=0; i < maxTasks; i++) {\n    configurations.add(fProperties);\n  }\n  return configurations;\n}\n", "nl": "Returns task configurations"}
{"code": "public static void e(String msg){\n  if (LOG_ENABLE) {\n    Log.e(TAG,buildMsg(msg));\n  }\n}\n", "nl": "error log"}
{"code": "public void writeSizedPrefixedBytes(byte[] bytes) throws IOException {\n  writeSizedPrefixedBytes(bytes,0,bytes.length);\n}\n", "nl": "write size-prefixed bytes"}
{"code": "public boolean add(Node n){\n  int num=n.getNumber();\n  if (!get(num)) {\n    set(num);\n    return true;\n  }\n else   return false;\n}\n", "nl": "Adds n to this"}
{"code": "public byte[] toByteArray(){\n  byte[] result=new byte[count];\n  System.arraycopy(buf,0,result,0,count);\n  return result;\n}\n", "nl": "returns inner array"}
{"code": "public void onStart(){\n  mGoogleApiClient.connect();\n}\n", "nl": "Activity lifecycle events"}
{"code": "public AddEntryTypeIndexesSpaceOperationResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public AggregateEntriesSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public void onError(int taskId,String reason){\n  this.transfers.remove(taskId);\n  textLog.info(\"taskId:\" + taskId + \"; [Error. Transfer failed] \"+ reason);\n}\n", "nl": "from login server to source, after response from target server"}
{"code": "public boolean isTrivial(){\n  return getA().size() == 1 || getB().size() == 1;\n}\n", "nl": "is split trivial?"}
{"code": "public void putGroupId(String sampleName,String id){\n  put(sampleName,HiddenAttribute.GroupId,id);\n}\n", "nl": "set the group id associated with a sample"}
{"code": "public boolean isAborted(){\n  return state == ABORTED || state == ABORTING;\n}\n", "nl": "Check if we're aborting or aborted"}
{"code": "public WallGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> posts){\n  super(client,\"wall.getById\",GetByIdExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  posts(posts);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private static byte readByte(boolean[] rawbits,int startIndex){\n  int n=rawbits.length - startIndex;\n  if (n >= 8) {\n    return (byte)readCode(rawbits,startIndex,8);\n  }\n  return (byte)(readCode(rawbits,startIndex,n) << (8 - n));\n}\n", "nl": "Reads a code of length 8 in an array of bits, padding with zeros"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.HELLINGER);\n}\n", "nl": "this is currently selected?"}
{"code": "public T remove(ServletRequest request,Map<String,Object> expandContext){\n  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);\n  return aa.remove(request);\n}\n", "nl": "Based on name remove from ServletRequest or from List in ServletRequest"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public WallGetQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"wall.get\",GetExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  return getDoc().getNumberOfReads() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isInstantRunCapableDeviceVersion(@NotNull AndroidVersion version){\n  return version.getApiLevel() >= 15;\n}\n", "nl": "Returns true if the device is capable of running Instant Run"}
{"code": "public WatchedObject addResponseWatch(SocketChannel sock,ConnectionResource client){\n  return addWatch(new ResponseWatchedObject(this,sock,client));\n}\n", "nl": "Add given socket and cpeer to the watched objects (response group)"}
{"code": "public TypeVariable typeVariable(){\n  int id=typeVariableList.size();\n  typeVariableList.add(null);\n  TypeVariable result=new TypeVariable(id,this);\n  typeVariableList.set(id,result);\n  return result;\n}\n", "nl": "Get new type variable"}
{"code": "public NotesAddQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment"}
{"code": "@Override public void onUIRefreshPrepare(PtrFrameLayout frame){\n}\n", "nl": "prepare for loading"}
{"code": "protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){\n  this.fontRendererObj.drawString(this.archive.getDisplayName().getUnformattedText(),8,6,4210752);\n  this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(),8,this.ySize - 96 + 2,4210752);\n}\n", "nl": "Draw the foreground layer for the GuiContainer (everything in front of the items)"}
{"code": "public JsonElement parse(String json) throws JsonSyntaxException {\n  return parse(new StringReader(json));\n}\n", "nl": "Parses the specified JSON string into a parse tree"}
{"code": "public boolean canFindAll(){\n  return true;\n}\n", "nl": "does this searcher support find all?"}
{"code": "public UpdateLeaseSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public ArenaRewardCursor queryArenaRewardItem(long id){\n  return mHelper.queryArenaRewardItem(id);\n}\n", "nl": "ARENA REWARD QUERIES"}
{"code": "@Override public boolean hasFixedPropertiesArray(){\n  return false;\n}\n", "nl": "true if the entry packet has an array of fixed properties"}
{"code": "public PhotosRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"photos.restoreComment\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public DocumentNGramGaussNormGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  CorrelationWindow=iCorrelationWindow;\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "@Nullable private static String guessBinaryPath(){\n  ByteArrayOutputStream stdout=new ByteArrayOutputStream();\n  int retVal=ExternalTask.builder().args(\"which\",\"bazel\").stdout(stdout).build().run();\n  if (retVal != 0) {\n    return null;\n  }\n  return stdout.toString().trim();\n}\n", "nl": "Try to guess an initial binary path"}
{"code": "public Builder addColumnsString(String... columnNames){\n  for (  String s : columnNames)   addColumnString(s);\n  return this;\n}\n", "nl": "Add String columns with no restrictions on the allowable values"}
{"code": "protected void notifyScrollingListenersAboutEnd(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingFinished(this);\n  }\n}\n", "nl": "Notifies listeners about ending scrolling"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private static final boolean hasWildcard(String s){\n  String test=s.replace(\"\\\\*\",\"\").replace(\"\\\\?\",\"\");\n  return (test.contains(\"*\") || test.contains(\"?\"));\n}\n", "nl": "Checks whether the string contains un-escaped * or ? characters"}
{"code": "private static byte charToByte(char c){\n  return (byte)\"0123456789ABCDEF\".indexOf(c);\n}\n", "nl": "Convert char to byte"}
{"code": "public boolean selectOnMouseDown(MouseEvent mouseEvent,ChartSelection chartSelection){\n  return selectOnRubberBand(new Rectangle(mouseEvent.getX() - 1,mouseEvent.getY() - 1,2,2),mouseEvent,chartSelection);\n}\n", "nl": "select series and classes that contain given location"}
{"code": "private void turnOffAllTracks(){\n  for (int i=0; i < this.tracks.length; i++) {\n    this.tracks[i].setLowAnim(TextureAnimationDrawer.trackSolid);\n  }\n}\n", "nl": "Sets all tracks back to normal"}
{"code": "private void layout(int width,int height){\n  int itemsWidth=width - 2 * PADDING;\n  itemsLayout.layout(0,0,itemsWidth,height);\n}\n", "nl": "Sets layouts width and height"}
{"code": "public boolean gotoPrevious(){\n  currentTaxonIterator=null;\n  currentTaxonId=null;\n  return isCurrentSet();\n}\n", "nl": "goto the previous object"}
{"code": "public static String formatPrice(Double price){\n  if (price == null)   return \"\";\n  return formatPrice(price.doubleValue());\n}\n", "nl": "Formats a Double representing a price into a string"}
{"code": "public static ByteBuffer createCAPTCHA(String word){\n  ByteBuffer byteBuffer=null;\n  BufferedImage bImg=createImage(word);\n  byteBuffer=DDSConverter.convertToDxt1NoTransparency(bImg);\n  return byteBuffer;\n}\n", "nl": "create CAPTCHA"}
{"code": "public TrustManagerImpl(KeyStore keyStore,CertPinManager manager){\n  this(keyStore,manager,null);\n}\n", "nl": "For testing only"}
{"code": "public AccountBanUserQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"account.banUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private boolean isSizeAvailableToLoadColumnDictionary(long requiredSize){\n  return lruCacheMemorySize >= (currentSize + requiredSize);\n}\n", "nl": "This method will check if size is available to laod dictionary into memory"}
{"code": "protected MarketReorderItemsQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item identifier"}
{"code": "public static int max(final int a,final int b){\n  return (a <= b) ? b : a;\n}\n", "nl": "Compute the maximum of two values"}
{"code": "@SuppressLint(\"NewApi\") private boolean checkIfMaximumBitmapExceed(Canvas canvas){\n  return mBitmapWidth > canvas.getMaximumBitmapWidth() || mBitmapHeight > canvas.getMaximumBitmapHeight();\n}\n", "nl": "Checks if current bitmaps exceed the maximum OpenGL texture size limit"}
{"code": "protected int indexOf(String buffer,int start,int end,char ch){\n  for (int i=start; i < end; i++) {\n    if (buffer.charAt(i) == ch) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "nl": "Computes index of given char within StringBuffer"}
{"code": "public NewsfeedDeleteListQuery deleteList(UserActor actor,int listId){\n  return new NewsfeedDeleteListQuery(getClient(),actor,listId);\n}\n", "nl": "Delete newsfeed list by id"}
{"code": "public void addTask(String name,Class<? extends Task> taskclass,TaskTimer timer) throws SchedulerException, ParseException {\n  assert timer != null : \"Cannot add scheduler task \" + name + \" as no timer is set\";\n  JobDetail job=new JobDetail(name,Scheduler.DEFAULT_GROUP,taskclass);\n  scheduler.scheduleJob(job,timer.getTrigger());\n}\n", "nl": "Add a task to the scheduler"}
{"code": "public AlreadySpawnedException(String message,Throwable cause){\n  super(message,cause);\n}\n", "nl": "Creates new error"}
{"code": "public Notifier(){\n  super(\"event-listener-notification\");\n  setDaemon(true);\n}\n", "nl": "Create a daemon thread"}
{"code": "public boolean isActive(){\n  if (getStatus() == XtnStatus.UNINITIALIZED || getStatus() == XtnStatus.BEGUN)   return true;\n  return false;\n}\n", "nl": "Returns true is new operations can still attach to this transaction, false otherwise (transaction was already committed for example)"}
{"code": "public static void reloadTime(int time){\n  ThreadPoolManager.getInstance().purge();\n  instance=new GameTime(time);\n  clockStarted=false;\n  startClock();\n  log.info(\"Game time changed by admin and clock restarted...\");\n}\n", "nl": "Clean scheduled queues, set a new GameTime, then restart the clock"}
{"code": "public static void openComposeEmailActivity(Context context,String[] addresses,String subject){\n  Intent intent=new Intent(Intent.ACTION_SENDTO);\n  intent.setData(Uri.parse(\"mailto:\"));\n  intent.putExtra(Intent.EXTRA_EMAIL,addresses);\n  intent.putExtra(Intent.EXTRA_SUBJECT,subject);\n  startIntentIfPossible(context,intent);\n}\n", "nl": "Open compose email activity"}
{"code": "public static void decorate(IDecoration decoration,IDecoratorComponent[][] format,Map bindings){\n  String[] prefixSuffix=decorate(format,bindings);\n  decoration.addPrefix(prefixSuffix[0]);\n  decoration.addSuffix(prefixSuffix[1]);\n}\n", "nl": "add a prefix and a suffix depending on format string and the bindings"}
{"code": "public Vector2f interpolate(Vector2f beginVec,Vector2f finalVec,float changeAmnt){\n  this.x=(1 - changeAmnt) * beginVec.x + changeAmnt * finalVec.x;\n  this.y=(1 - changeAmnt) * beginVec.y + changeAmnt * finalVec.y;\n  return this;\n}\n", "nl": "Sets this vector to the interpolation by changeAmnt from beginVec to finalVec this=(1-changeAmnt)*beginVec + changeAmnt * finalVec"}
{"code": "public TShortLongIterator(TShortLongHashMap map){\n  super(map);\n  this._map=map;\n}\n", "nl": "Creates an iterator over the specified map"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.ByContigs.toString() + \";zoom axis=both what=fit;\");\n}\n", "nl": "action to be performed"}
{"code": "@deprecated public String decomposition(){\n  if (this.decompBuf != null) {\n    return this.decompBuf;\n  }\n  return \"\";\n}\n", "nl": "/*    "}
{"code": "public static String upperCaseFirstChar(String input){\n  String[] temp=input.split(\" \");\n  for (int i=0; i < temp.length; i++) {\n    temp[i]=Character.toUpperCase(temp[i].charAt(0)) + temp[i].substring(1);\n  }\n  return join(temp,\" \");\n}\n", "nl": "Convert the first character of a string to upper case"}
{"code": "private void printHelp(){\n  HelpFormatter formatter=new HelpFormatter();\n  formatter.setWidth(140);\n  formatter.printHelp(\"DistributedTestDriver\",cliOptions);\n}\n", "nl": "Prints out the help message"}
{"code": "public void msgNotFound(){\n  JOptionPane.showMessageDialog(null,\"Search String \" + pattern + \" not found\",\"Find\",JOptionPane.INFORMATION_MESSAGE);\n}\n", "nl": "Display an OptionPane dialog that the search string is not found"}
{"code": "public static void cleanPatch(Context context){\n  Tinker.with(context).cleanPatch();\n}\n", "nl": "clean all patch files!"}
{"code": "public static short convert(String stringValue){\n  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {\n    return (short)ColumnType.SHORT_INT.getMissingValue();\n  }\n  Matcher matcher=COMMA_PATTERN.matcher(stringValue);\n  return Short.parseShort(matcher.replaceAll(\"\"));\n}\n", "nl": "Returns a float that is parsed from the given String <p> We remove any commas before parsing"}
{"code": "public AdsGetAdsTargetingQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getAdsTargeting\",Utils.buildParametrizedType(List.class,TargSettings.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {\n  AssetManager manager=context.getAssets();\n  final InputStream is=manager.open(assetsFilename);\n  copyFile(file,is,mode);\n}\n", "nl": "copy file in assets into destination file"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public Vector2f(Vector2f vector2f){\n  this.x=vector2f.x;\n  this.y=vector2f.y;\n}\n", "nl": "Creates a new Vector2f that contains the passed vector's information"}
{"code": "public FloatDataType(byte[] buf){\n  if (buf.length != this.getSize()) {\n    throw new DataTypeException(\"Wrong size buffer for float\");\n  }\n  this.f=ByteBuffer.wrap(buf).getFloat();\n}\n", "nl": "Construct a FloatDataType from the bytes in buf"}
{"code": "protected void notifyDataChangedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onChanged();\n    }\n  }\n}\n", "nl": "Notifies observers about data changing"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"copyImage;\");\n  ClusterViewer viewer=getViewer();\n  JPanel panel=viewer.getPanel();\n  JScrollPane scrollPane=viewer.getSelectedScrollPane();\n  TransferableGraphic tg=new TransferableGraphic(panel,scrollPane);\n  Toolkit.getDefaultToolkit().getSystemClipboard().setContents(tg,tg);\n}\n", "nl": "parses the given command and executes it"}
{"code": "protected final void endNamespaceMapping() throws SAXException {\n  int count=fNamespaceContext.getDeclaredPrefixCount();\n  if (count > 0) {\n    for (int i=0; i < count; i++) {\n      fContentHandler.endPrefixMapping(fNamespaceContext.getDeclaredPrefixAt(i));\n    }\n  }\n}\n", "nl": "Send endPrefixMapping events"}
{"code": "protected boolean preCastCheck(){\n  Conditions skillConditions=skillTemplate.getStartconditions();\n  return skillConditions != null ? skillConditions.validate(this) : true;\n}\n", "nl": "Check all conditions before starting cast"}
{"code": "protected Bindings createBindings(VariableScope variableScope){\n  return scriptBindingsFactory.createBindings(variableScope);\n}\n", "nl": "override to build a spring aware ScriptingEngines"}
{"code": "public void scrollToFinishActivity(){\n  final int childWidth=mContentView.getWidth();\n  int left=0, top=0;\n  left=childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;\n  mDragHelper.smoothSlideViewTo(mContentView,left,top);\n  invalidate();\n}\n", "nl": "Scroll out contentView and finish the activity"}
{"code": "private void bossUseSkill(int skillId){\n  AI2Actions.useSkill(this,skillId);\n}\n", "nl": "Boss uses Skill"}
{"code": "public Bindings add(String property,JToggleButton c,boolean defaultValue){\n  registerPropertyChangeListener(c);\n  return add(new JToggleButtonBinding(property,c,defaultValue));\n}\n", "nl": "Handles JToggleButton, JCheckBox"}
{"code": "@deprecated public CompactByteArray(){\n  this((byte)0);\n}\n", "nl": "/*    "}
{"code": "public void postRequest(@NonNull Context context,String url,JSONObject body,ApiListener apiListener){\n  request(context,Request.Method.POST,url,body,apiListener);\n}\n", "nl": "Helper method to make authenticated HTTP requests to LinkedIn REST api using POST Method"}
{"code": "public PhotosGetAllCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return an additional \"likes\" field"}
{"code": "public void hide(){\n  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();\n  lp.height=0;\n  mContentView.setLayoutParams(lp);\n}\n", "nl": "hide footer when disable pull load more"}
{"code": "public static void distributeKinah(Player player,long amount){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new TeamKinahDistributionEvent<PlayerAlliance>(alliance,player,amount));\n  }\n}\n", "nl": "Share specific amount of kinah between alliance members"}
{"code": "public void gossipPerNodeData(GossipDataMessage message){\n  gossipManager.gossipPerNodeData(message);\n}\n", "nl": "Gossip data in a namespace that is per-node { node-id { key->value } }"}
{"code": "public void chooseDayNightMode(@AppCompatDelegate.NightMode int mode){\n  checkInit();\n  mPreferences.edit().putInt(PREFERENCE_DAYNIGHT_KEY,mode).apply();\n}\n", "nl": "Choose the DayNight mode you want to use for selected day/night mode themes"}
{"code": "private static byte[] bitmapToByte(Bitmap b){\n  if (b == null) {\n    return null;\n  }\n  ByteArrayOutputStream o=new ByteArrayOutputStream();\n  b.compress(Bitmap.CompressFormat.PNG,100,o);\n  return o.toByteArray();\n}\n", "nl": "convert Bitmap to byte array"}
{"code": "public static char lowSurrogate(int c){\n  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);\n}\n", "nl": "Returns the low surrogate of a supplemental character"}
{"code": "public StorageGetQuery keys(String... value){\n  return unsafeParam(\"keys\",value);\n}\n", "nl": "Set keys"}
{"code": "public static final void removeNullValues(ArrayList types){\n  ArrayList filter=new ArrayList(1);\n  filter.add(null);\n  types.removeAll(filter);\n}\n", "nl": "Remove null values from the given list"}
{"code": "public UniqueVector(){\n  elementSet=new java.util.HashSet();\n  elementVector=new java.util.Vector();\n}\n", "nl": "Creates a new vector"}
{"code": "private Var addProperty(VarProperty property){\n  if (property.isUnique()) {\n    testUniqueProperty((UniqueVarProperty)property);\n  }\n  properties.add(property);\n  return this;\n}\n", "nl": "Add a non-unique property"}
{"code": "public ImageResizer(Context context,int imageSize){\n  super(context);\n  setImageSize(imageSize);\n}\n", "nl": "Initialize providing a single target image size (used for both width and height);"}
{"code": "public void createOutFile(String filePath) throws IOException {\n  this.outFile=new ExifInterface(filePath);\n}\n", "nl": "The file after it has been compressed"}
{"code": "private static String encode(String pathElement){\n  try {\n    return URLEncoder.encode(pathElement,Charsets.UTF_8.name());\n  }\n catch (  UnsupportedEncodingException e) {\n    throw Throwables.propagate(e);\n  }\n}\n", "nl": "URL encodes a path element"}
{"code": "public void close() throws IOException {\n  iterator.close();\n}\n", "nl": "close the iterator"}
{"code": "public void selectAll(boolean select){\n  if (classificationViewer == null)   classificationViewer=(ClassificationViewer)dir.getViewerByClass(ClassificationViewer.class);\n  if (classificationViewer == null)   return;\n  classificationViewer.selectAllNodes(select);\n}\n", "nl": "set select state of all objects"}
{"code": "@Override public boolean equals(Object obj){\n  if (obj instanceof SpaceProxyImpl)   return super.equals(obj);\n  return false;\n}\n", "nl": "overrides implementation of equals() method in AbstractSpaceProxy"}
{"code": "public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){\n  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;\n}\n", "nl": "add distinct entry to list"}
{"code": "public void changeLevel(Legion legion,int newLevel,boolean save){\n  legion.setLegionLevel(newLevel);\n  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x00,legion));\n  PacketSendUtility.broadcastPacketToLegion(legion,SM_SYSTEM_MESSAGE.STR_GUILD_EVENT_LEVELUP(newLevel));\n  if (save) {\n    storeLegion(legion);\n  }\n}\n", "nl": "This method will change the legion level and send update to online members"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"compute wordCount kmer=25 step=25 mindepth=10;\");\n}\n", "nl": "action to be performed"}
{"code": "protected void notifyClickListenersAboutClick(int item){\n  for (  OnWheelClickedListener listener : clickingListeners) {\n    listener.onItemClicked(this,item);\n  }\n}\n", "nl": "Notifies listeners about clicking"}
{"code": "public LongFilePutter(File file,long limit,boolean inMemory) throws IOException {\n  super(file,8 * limit,(inMemory ? Mode.CREATE_READ_WRITE_IN_MEMORY : Mode.CREATE_READ_WRITE));\n}\n", "nl": "constructs a long file putter using the given file and limit"}
{"code": "public NotesAddQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "public MarketDeleteQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ContentletQuery addHost(String hostIdentifier){\n  query.append(\" +conhost:\" + hostIdentifier);\n  return this;\n}\n", "nl": "Adds a host limit to the query"}
{"code": "public void rightTrim(int numberOfSample){\n  trim(0,numberOfSample);\n}\n", "nl": "Trim the wave data from ending"}
{"code": "public void actionPerformed(ActionEvent ev){\n  Integer[] choices=new Integer[]{0,1,2,3,4,5,6,7,8,9,10,20,40};\n  Integer result=(Integer)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set edge width\",\"Set edge width\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),choices,choices[1]);\n  if (result != null)   execute(\"set edgeWidth=\" + result + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public FaveGetLinksQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getLinks\",GetLinksResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void checkCreateTemplate(String category,String name) throws Exception {\n  checkCreateTemplate(category,name,false);\n}\n", "nl": "Checks the given template in the given category, adding it to an existing project"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void releaseScan(){\n  release();\n}\n", "nl": "release SLHolder for this scan"}
{"code": "@Override public int hashCode(){\n  int hash=7;\n  hash=79 * hash + (int)(Double.doubleToLongBits(this.x) ^ (Double.doubleToLongBits(this.x) >>> 32));\n  hash=79 * hash + (int)(Double.doubleToLongBits(this.y) ^ (Double.doubleToLongBits(this.y) >>> 32));\n  hash=79 * hash + (int)(Double.doubleToLongBits(this.z) ^ (Double.doubleToLongBits(this.z) >>> 32));\n  return hash;\n}\n", "nl": "Returns a hash code for this vector"}
{"code": "public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){\n  return execCommand(new String[]{command},isRoot,isNeedResultMsg);\n}\n", "nl": "execute shell command"}
{"code": "public void addLanguage(Language language){\n  addLanguage(language.getId());\n}\n", "nl": "Adds a language limit to the query"}
{"code": "protected void initFileLocation(){\n  PathService pathService=CarbonCommonFactory.getPathService();\n  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(columnIdentifier,this.hdfsStorePath,carbonTableIdentifier);\n  this.columnDictionaryMetadataFilePath=carbonTablePath.getDictionaryMetaFilePath(columnIdentifier.getColumnId());\n}\n", "nl": "This method will form the path for dictionary metadata file for a given column"}
{"code": "@deprecated public UScriptRun(char[] chars,int start,int count){\n  reset(chars,start,count);\n}\n", "nl": "/*    "}
{"code": "public static void warnInfo(String msg){\n  warnInfo(\"zhibo\",msg);\n}\n", "nl": "author  hhj TODO"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isEmpty(String str){\n  return str == null || str.length() == 0;\n}\n", "nl": "Check if string is empty"}
{"code": "protected void assertClose(String msg,Fraction[] m,Fraction[] n,double tolerance){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors have different lengths\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i].doubleValue(),n[i].doubleValue(),tolerance);\n  }\n}\n", "nl": "verifies that two vectors are close (sup norm)"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public DocumentWordHistogram(){\n  MinSize=1;\n  MaxSize=2;\n}\n", "nl": "Creates a new instance of INSECTWordHistogram"}
{"code": "public boolean drain(){\n  return true;\n}\n", "nl": "Waits for all queued audio to be played"}
{"code": "void register(String[] patterns){\n  for (  String pattern : patterns) {\n    register(pattern,TRUE);\n  }\n}\n", "nl": "register a set of pattern (all associated with \"true\""}
{"code": "private void recordSimpleResourceEdit(){\nsynchronized (myLock) {\n    mySeenLocalResourceChanges=true;\n  }\n}\n", "nl": "Called when we've noticed an edit of a resource file that is in an app module"}
{"code": "@Override public byte[] readByteArray(String filePath,int length){\n  FileChannel fileChannel=updateCache(filePath);\n  ByteBuffer byteBffer=read(fileChannel,length);\n  return byteBffer.array();\n}\n", "nl": "This method will be used to read the byte array from file based on length(number of bytes)"}
{"code": "private AbstractIndex loadBlocks(String taskId,List<TableBlockInfo> tableBlockInfoList,AbsoluteTableIdentifier tableIdentifier) throws CarbonUtilException {\n  List<DataFileFooter> footerList=CarbonUtil.readCarbonIndexFile(taskId,tableBlockInfoList,tableIdentifier);\n  AbstractIndex segment=new SegmentTaskIndex();\n  segment.buildIndex(footerList);\n  return segment;\n}\n", "nl": "Below method will be used to load the blocks"}
{"code": "public boolean hasBulletList(String text){\n  return bulletPat.matcher(text).find();\n}\n", "nl": "WARN: assumes no trailing whitespace"}
{"code": "public SpaceTypeDescriptorBuilder addQueryExtensionInfo(String path,Class<? extends Annotation> queryExtensionAnnotation){\n  if (_queryExtensionsInfo == null)   _queryExtensionsInfo=new TypeQueryExtensionsImpl();\n  _queryExtensionsInfo.add(queryExtensionAnnotation,path);\n  return this;\n}\n", "nl": "Adds a QueryExtension information for the specified path"}
{"code": "public Observable<FirebaseChildEvent> observeChildChanged(final Query firebaseRef){\n  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.CHANGED));\n}\n", "nl": "Creates an observable only for the child changed method"}
{"code": "public boolean isMatch(){\n  return !(refName == null || refName.equals(\"*\"));\n}\n", "nl": "returns true, if is match"}
{"code": "private void sendBroadcastUploadsAdded(){\n  Intent start=new Intent(getUploadsAddedMessage());\n  sendStickyBroadcast(start);\n}\n", "nl": "Sends a broadcast in order to the interested activities can update their view TODO - no more broadcasts, replace with a callback to subscribed listeners"}
{"code": "public static boolean isPrimitive(String typeName){\n  return _primitiveTypes.containsKey(typeName);\n}\n", "nl": "Returns whether the specified type name is of primitive type"}
{"code": "public static String formatQuantity(BigDecimal quantity){\n  if (quantity == null)   return \"\";\n else   return quantityDecimalFormat.format(quantity);\n}\n", "nl": "Formats an BigDecimal representing a quantity into a string"}
{"code": "private void stop_notify_2(){\n  bleManager.stopListenCharacterCallback(UUID_NOTIFY_2);\n}\n", "nl": "stop listen notify2"}
{"code": "public VideoGetAlbumsQueryWithExtended needSystem(Boolean value){\n  return unsafeParam(\"need_system\",value);\n}\n", "nl": "Return system albums"}
{"code": "public PercentFormatter(DecimalFormat format){\n  mFormattedStringCache=new FormattedStringCache.Generic<>(format);\n  mFormattedStringCacheAxis=new FormattedStringCache.PrimFloat(format);\n}\n", "nl": "Allow a custom decimalformat"}
{"code": "public Builder quality(int quality){\n  if (quality < 1 || quality > 100)   throw new IllegalArgumentException(\"quality must be between 1 and 100\");\n  this.quality=quality;\n  return this;\n}\n", "nl": "Quality which we should generate the image 1-100"}
{"code": "public static boolean isForbiddenWord(String name){\n  return isForbiddenByClient(name) || isForbiddenBySequence(name);\n}\n", "nl": "Checks if a name is forbidden"}
{"code": "@NotNull public static String tableToString(@NotNull JTableFixture table){\n  return tableToString(table,0,Integer.MAX_VALUE,0,Integer.MAX_VALUE,40);\n}\n", "nl": "Pretty-prints the given table fixture"}
{"code": "final Segment<K,V> segmentFor(int hash){\n  return segments[(hash >>> segmentShift) & segmentMask];\n}\n", "nl": "Returns the segment that should be used for key with given hash"}
{"code": "public final void error(final Object o){\n  log(Level.ERROR,o);\n}\n", "nl": "This method logs the ERROR message"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static void json(String json){\n  printer.json(json);\n}\n", "nl": "Formats the json content and print it"}
{"code": "public WidgetsGetCommentsQuery widgetApiId(Integer value){\n  return unsafeParam(\"widget_api_id\",value);\n}\n", "nl": "Set widget api id"}
{"code": "public void removeSwipeListener(SwipeListener listener){\n  if (mListeners == null) {\n    return;\n  }\n  mListeners.remove(listener);\n}\n", "nl": "Removes a listener from the set of listeners"}
{"code": "public void addColumnListener(ColumnListener listener){\n  m_listeners.add(listener);\n}\n", "nl": "Adds a listener to be notified when this column changes"}
{"code": "public void write(int a) throws IOException {\n  outs.write(a);\n  position++;\n}\n", "nl": "write a single byte"}
{"code": "@TargetApi(Build.VERSION_CODES.LOLLIPOP) public Scoop bindStatusBar(Activity activity,int toppingId){\n  return bindStatusBar(activity,toppingId,null);\n}\n", "nl": "Bind the status bar of an activity to a topping so that it's color is updated when the user/developer updates the color for that topping id"}
{"code": "boolean isAncestorOf(Node a,Node b){\n  for (Node node=b; node != null; node=node.getParentNode()) {\n    if (node == a)     return true;\n  }\n  return false;\n}\n", "nl": "is a an ancestor of b ?"}
{"code": "public static String clearAllLastViewed(HttpServletRequest request,HttpServletResponse response){\n  ProductEvents.clearLastViewedCategories(request,response);\n  ProductEvents.clearLastViewedProducts(request,response);\n  ProductSearchSession.clearSearchOptionsHistoryList(request,response);\n  return \"success\";\n}\n", "nl": "Event to clear the last viewed history (products/categories/searchs)"}
{"code": "public DatabaseGetCountriesQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getCountries\",GetCountriesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected byte[] hexStringToByteArray(String hexString){\n  int len=hexString.length();\n  byte[] data=new byte[len / 2];\n  for (int i=0; i < len; i+=2) {\n    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));\n  }\n  return data;\n}\n", "nl": "Converts hex values from strings to byte arra"}
{"code": "public boolean isThisPtr(){\n  if (variable instanceof Pair) {\n    Pair o=(Pair)variable;\n    return o.isThisParameter();\n  }\n  return false;\n}\n", "nl": "Returns true if this VarNode represents the THIS pointer"}
{"code": "public static boolean hasRole(String roleName){\n  for (  String role : getRoles()) {\n    if (role.equalsIgnoreCase(roleName)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Tell whether the passed role is set?"}
{"code": "public static Column of(String name,Object value){\n  return Column.of(name,Value.of(value));\n}\n", "nl": "Creates a column instance"}
{"code": "public WallGetRepostsQuery(VkApiClient client){\n  super(client,\"wall.getReposts\",GetRepostsResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void handleDecode(Result result,Bitmap barcode){\n  inactivityTimer.onActivity();\n  playBeepSoundAndVibrate();\n  String resultString=result.getText();\n  handleResult(resultString);\n}\n", "nl": "Handler scan result"}
{"code": "public NewsfeedDeleteListQuery(VkApiClient client,UserActor actor,int listId){\n  super(client,\"newsfeed.deleteList\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  listId(listId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public VideoAddQuery(VkApiClient client,UserActor actor,int videoId,int ownerId){\n  super(client,\"video.add\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n  ownerId(ownerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean hasNext(){\n  return !isClosed && nextHeader != null;\n}\n", "nl": "has next fastA record?"}
{"code": "private String removeFrameSuffix(String query){\n  int pos=query.indexOf(\"_RF\");\n  if (pos != -1)   return query.substring(0,pos);\n else   return query;\n}\n", "nl": "remove frame suffix"}
{"code": "@Override protected boolean handler(@NonNull Throwable e,@NonNull IHandler handler){\n  String s=!TextUtils.isEmpty(e.getMessage()) ? e.getMessage() : e.getClass().getSimpleName();\n  handler.onHandler(Cons.Error.UnKnow,s);\n  return true;\n}\n", "nl": "must return true"}
{"code": "@NotNull public static String dumpTree(@NotNull TreeElement root){\n  final StringBuilder builder=new StringBuilder();\n  dumpTreeToBuilder(builder,root,0);\n  return builder.toString();\n}\n", "nl": "Pretty-print any TreeElement to a String"}
{"code": "@Override public void stop(){\n  impl.stop();\n}\n", "nl": "Call this method to force stopping fingerprint scanning"}
{"code": "public void click(){\n  image.click();\n}\n", "nl": "Clicks the image"}
{"code": "public SVNCheckedInChangeSet(SyncInfo info){\n  this(new SyncInfo[]{info});\n}\n", "nl": "Create a checked in change set from the given syncinfo"}
{"code": "public UsersGetNearbyQuery(VkApiClient client,UserActor actor,float latitude,float longitude){\n  super(client,\"users.getNearby\",GetNearbyResponse.class);\n  accessToken(actor.getAccessToken());\n  latitude(latitude);\n  longitude(longitude);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void removeCallSite(Stmt callSite,SootMethod caller){\n  if (!caller.getActiveBody().getUnits().contains(callSite))   return;\n  if (!((Stmt)callSite).containsInvokeExpr())   return;\n  caller.getActiveBody().getUnits().remove(callSite);\n  if (Scene.v().hasCallGraph())   Scene.v().getCallGraph().removeAllEdgesOutOf(callSite);\n}\n", "nl": "Removes a given call site"}
{"code": "public Builder addColumnInteger(String name,Integer minAllowedValue,Integer maxAllowedValue){\n  return addColumn(new IntegerMetaData(name,minAllowedValue,maxAllowedValue));\n}\n", "nl": "Add an integer column with the specified min/max allowable values"}
{"code": "public UsersSearchQuery schoolClass(Integer value){\n  return unsafeParam(\"school_class\",value);\n}\n", "nl": "Set school class"}
{"code": "public boolean drawGroup(@NotNull Graphics2D gc,@NotNull ScreenView screenView,@NotNull NlComponent component){\n  return false;\n}\n", "nl": "Paint the component and its children on the given context"}
{"code": "public void addHandlerSideQuestDrop(int questId,int npcId,int itemId,int amount,int chance){\n  HandlerSideDrop hsd=new HandlerSideDrop(questId,npcId,itemId,amount,chance);\n  QuestService.addQuestDrop(hsd.getNpcId(),hsd);\n}\n", "nl": "Add handler side drop (if not already in xml)"}
{"code": "public static <T>T make(Class<T> shieldClass,RxJava1Hub rxJava1Hub){\n  return inst.make(shieldClass,rxJava1Hub,RxJava1Hub.class);\n}\n", "nl": "Helper static method to generate Shield Instances"}
{"code": "private boolean isValidItemIndex(int index){\n  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());\n}\n", "nl": "Checks whether intem index is valid"}
{"code": "public boolean handleRequest(ZWaveController zController,SerialMessage lastSentMessage,SerialMessage incomingMessage) throws ZWaveSerialMessageException {\n  logger.warn(\"TODO: {} unsupported REQUEST.\",incomingMessage.getMessageClass().getLabel());\n  return false;\n}\n", "nl": "Method for handling the request from the controller"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public void addWorking(boolean working){\n  query.append(\" +working:\" + working);\n}\n", "nl": "Adds +working to the query"}
{"code": "public static boolean isMasterCard(String cc){\n  int firstdig=Integer.parseInt(cc.substring(0,1));\n  int seconddig=Integer.parseInt(cc.substring(1,2));\n  if ((cc.length() == 16) && (firstdig == 5) && ((seconddig >= 1) && (seconddig <= 5)))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid Master Card number"}
{"code": "public void clear(){\n  super.clear();\n  location=null;\n}\n", "nl": "erase the block"}
{"code": "public boolean findPrevious(String regularExpression){\n  return findAndUncollapseNext(regularExpression,true,false) > 0;\n}\n", "nl": "Find previous instance"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowBiPlot();\n}\n", "nl": "this is currently selected?"}
{"code": "public void close(){\n  toolTipHelper.shutdownNow();\n}\n", "nl": "call this when window is destroyed to release tooltip thread"}
{"code": "private boolean isLeafEdge(Edge f,PhyloGraph graph){\n  return graph.getDegree(graph.getSource(f)) == 1 || graph.getDegree(graph.getTarget(f)) == 1;\n}\n", "nl": "does this edge lead to a leaf?"}
{"code": "@CheckReturnValue public AddCmd files(Iterable<String> files){\n  Preconditions.checkState(!all,\"'all' and passing files is incompatible\");\n  return new AddCmd(force,false,files);\n}\n", "nl": "Configure the files to add to the index"}
{"code": "protected void init(){\n  mStatus=STATUS_OK;\n  mFrameCount=0;\n  mGifFrames=new ArrayList<GifFrame>();\n}\n", "nl": "Initializes or re-initializes reader"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static final void onPlayerLogout(Player player){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    PlayerGroupMember member=group.getMember(player.getObjectId());\n    member.updateLastOnlineTime();\n    group.onEvent(new PlayerDisconnectedEvent(group,player));\n  }\n}\n", "nl": "Player leaved world - set last online on member"}
{"code": "private void onRequest(HttpServerRequest request){\n  AtomicInteger level=new AtomicInteger(0);\n  request.toObservable().map(null).lift(new JsonParserOperator()).map(null).flatMap(null).count().subscribe(null,null);\n}\n", "nl": "Handle an HTTP request"}
{"code": "@Override protected void onRestoreState(Bundle savedInstanceState){\n  super.onRestoreState(savedInstanceState);\n}\n", "nl": "Restore Fragment's State here"}
{"code": "public boolean isApplicable(){\n  if (getViewer() == null || !(getViewer() instanceof megan.remote.RemoteServiceBrowser))   return false;\n  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();\n  return !remoteServiceBrowser.isServiceSelected() && remoteServiceBrowser.getURL().length() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private Object[][] prefetchRecordsFromFile(int numberOfRecords) throws CarbonSortKeyAndGroupByException {\n  Object[][] records=new Object[numberOfRecords][];\n  for (int i=0; i < numberOfRecords; i++) {\n    records[i]=getRowFromStream();\n  }\n  return records;\n}\n", "nl": "This method will read the records from sort temp file and keep it in a buffer"}
{"code": "public boolean contains(String name){\n  return legionsByName.containsKey(name.toLowerCase());\n}\n", "nl": "Returns true if legion is in cached by name"}
{"code": "public static <T>List<T> toList(T obj1){\n  List<T> list=new LinkedList<T>();\n  list.add(obj1);\n  return list;\n}\n", "nl": "Create a list from passed objX parameters"}
{"code": "public void increment(float score){\n  cntGenomicLoci++;\n  sumScore+=score;\n}\n", "nl": "Increment attributes by given score"}
{"code": "public static INDArray toMatrix(List<List<Writable>> records){\n  INDArray arr=Nd4j.create(records.size(),records.get(0).size());\n  for (int i=0; i < arr.rows(); i++) {\n    arr.putRow(i,toArray(records.get(i)));\n  }\n  return arr;\n}\n", "nl": "Convert a set of records in to a matrix"}
{"code": "public MarketGetAlbumsQuery(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"market.getAlbums\",GetAlbumsResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private ByteBuffer wrap(GSByteArrayOutputStream bos){\n  ByteBuffer byteBuffer=ByteBuffer.wrap(bos.getBuffer());\n  byteBuffer.order(ByteOrder.BIG_ENDIAN);\n  return byteBuffer;\n}\n", "nl": "Wraps a GSByteArrayOutputStream inner buffer with a ByteBuffer"}
{"code": "public double norm2(){\n  return s[0];\n}\n", "nl": "Two norm"}
{"code": "public ImageResizer(Context context,int imageSize){\n  super(context);\n  setImageSize(imageSize);\n}\n", "nl": "Initialize providing a single target image size (used for both width and height);"}
{"code": "public boolean isApplicable(){\n  final LabelsJList list=((ChartViewer)getViewer()).getActiveLabelsJList();\n  return list != null && list.getDisabledLabels().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public CM_CREATE_CHARACTER(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_CREATE_CHARACTER </tt> packet"}
{"code": "private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){\n  if (entity != null) {\n    requestBase.setEntity(entity);\n  }\n  return requestBase;\n}\n", "nl": "Applicable only to HttpRequest methods extending HttpEntityEnclosingRequestBase, which is for example not DELETE"}
{"code": "public static <T>Set<T> difference(Collection<? extends T> s1,Collection<? extends T> s2){\n  Set<T> s3=new HashSet<T>(s1);\n  s3.removeAll(s2);\n  return s3;\n}\n", "nl": "Return is s1 \\ s2"}
{"code": "public void onStart(){\n}\n", "nl": "Called when view is started"}
{"code": "public static INDArray[] dup(INDArray[] history){\n  INDArray[] dupHistory=new INDArray[history.length];\n  for (int i=0; i < history.length; i++) {\n    dupHistory[i]=history[i].dup();\n  }\n  return dupHistory;\n}\n", "nl": "Duplicate an history"}
{"code": "public boolean isIgnore(){\n  return ignore;\n}\n", "nl": "get the ignore status"}
{"code": "public Object cheese(String body,@Header(\"name\") String name){\n  return \"Hello \" + name + \". I got payload `\"+ body+ \"` and I am on host: \"+ System.getenv(\"HOSTNAME\");\n}\n", "nl": "The method used as funktion"}
{"code": "@Override public boolean equals(Object o){\n  return o == this;\n}\n", "nl": "whether two decls are the same"}
{"code": "public static void toggleKeyboradState(Context context,EditText edit){\n  edit.setFocusable(true);\n  edit.setFocusableInTouchMode(true);\n  edit.requestFocus();\n  InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\n  inputManager.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);\n}\n", "nl": "Toggle soft keyboard state"}
{"code": "@Provides @Singleton @CassandraClusters Collection<String> provideCassandraClusterNames(BlobStoreConfiguration configuration){\n  Set<String> clusters=Sets.newLinkedHashSet();\n  for (  CassandraConfiguration config : configuration.getCassandraClusters().values()) {\n    clusters.add(config.getCluster());\n  }\n  return clusters;\n}\n", "nl": "Required for HintsPollerManager"}
{"code": "public NewsfeedSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static ProbeItemDescriptor discreteBarItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue,boolean outlined,boolean filled,int width,boolean fixedWidth){\n  if (!outlined && !filled)   throw new IllegalArgumentException(\"Either outlined or filled must be set\");\n  return discreteItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,outlined ? DEFAULT_COLOR : null,filled ? DEFAULT_COLOR : null,width,fixedWidth,false,!filled);\n}\n", "nl": "Creates descriptor for a discrete item represented by vertical bars, with custom dataFactor ad min/max values"}
{"code": "public ExchangeItem(int itemObjId,long itemCount,Item item){\n  this.itemObjId=itemObjId;\n  this.itemCount=itemCount;\n  this.item=item;\n  this.itemDesc=item.getItemTemplate().getNameId();\n}\n", "nl": "Used when exchange item != original item"}
{"code": "final public boolean has(String name){\n  return context != null && context.containsKey(name);\n}\n", "nl": "Checks if has the name in the model for response"}
{"code": "public static SM_SYSTEM_MESSAGE STR_WATINGTIME(String value0){\n  return new SM_SYSTEM_MESSAGE(1300740,value0);\n}\n", "nl": "Resurrection wait time: %0 sec"}
{"code": "public PhotosReportQuery(VkApiClient client,UserActor actor,int ownerId,int photoId){\n  super(client,\"photos.report\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void assignNullSerializer(JsonSerializer<Object> nullSer){\n  if (_nullSerializer != null && _nullSerializer != nullSer) {\n    throw new IllegalStateException(\"Can not override null serializer\");\n  }\n  _nullSerializer=nullSer;\n}\n", "nl": "Method called to assign null value serializer for property"}
{"code": "public static void copyProperties(Object from,Object to) throws Exception {\n  copyPropertiesExclude(from,to,null);\n}\n", "nl": "Using reflection to realize the object to copy"}
{"code": "public NativeImageLoader(int height,int width,int channels,boolean centerCropIfNeeded){\n  this(height,width,channels);\n  this.centerCropIfNeeded=centerCropIfNeeded;\n}\n", "nl": "Instantiate an image with the given height and width"}
{"code": "public void addLanguage(Language language){\n  addLanguage(language.getId());\n}\n", "nl": "Adds a language limit to the query"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private void buildRowsPerPagePanel(){\n  rowsPerPagePanel.setInitialClasses(TableCssName.ROWS_PER_PAGE_PANEL);\n  rowsPerPagePanel.setGrid(\"s12 m4 l3\");\n  rowsPerPagePanel.add(listRowsPerPage);\n  rowsPerPagePanel.add(rowsPerPageLabel);\n  add(rowsPerPagePanel);\n}\n", "nl": "Build the rows per page panel - where you can set the range of row count into listbox"}
{"code": "public Call put(String url,Map<String,String> params,Callback callback){\n  Request request=new Builder().url(url).put(bodyFromMap(params)).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n", "nl": "Make a PUT call with params"}
{"code": "public static int pixelToDp(Context c,int px){\n  return (int)(px / c.getResources().getDisplayMetrics().density);\n}\n", "nl": "Convert pixels to DP"}
{"code": "@Override protected boolean requiresAuthentication(HttpServletRequest request,HttpServletResponse response){\n  return true;\n}\n", "nl": "Require authentication or not"}
{"code": "public static UInteger valueOf(String value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(Long.parseLong(value)));\n}\n", "nl": "Create an <code>unsigned int</code>"}
{"code": "public String toString(){\n  return \"MbrolaVoice\";\n}\n", "nl": "Converts this object to a string"}
{"code": "public static void sampleInstallTinker(ApplicationLike appLike){\n  if (isInstalled) {\n    TinkerLog.w(TAG,\"install tinker, but has installed, ignore\");\n    return;\n  }\n  TinkerInstaller.install(appLike);\n  isInstalled=true;\n}\n", "nl": "all use default class, simply Tinker install method"}
{"code": "@Override protected void __setConfig(Object config){\n  m_containerConfig=(ContainerConfig)config;\n}\n", "nl": "Implements the abstract methods of AbstractDynamicMBean"}
{"code": "protected LocalResourceStatus(byte[] bytes) throws SVNException {\n  super();\n  if (bytes.length < 4) {\n    return;\n  }\n  StatusFromBytesStream in=new StatusFromBytesStream(bytes);\n  initFromBytes(in);\n}\n", "nl": "(Re)Construct an object from the given bytes"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"select=none;\");\n}\n", "nl": "action to be performed"}
{"code": "protected AuthConfirmQuery code(String value){\n  return unsafeParam(\"code\",value);\n}\n", "nl": "Set code"}
{"code": "public TapTarget descriptionTextSize(int sp){\n  if (sp < 0)   throw new IllegalArgumentException(\"Given negative text size\");\n  this.descriptionTextSize=sp;\n  return this;\n}\n", "nl": "Specify the text size for the description in SP"}
{"code": "@Override public boolean isEnemyFrom(Creature creature){\n  if (creature instanceof SiegeNpc && this.getSiegeRace() != ((SiegeNpc)creature).getSiegeRace()) {\n    return true;\n  }\n else {\n    return super.isEnemyFrom(creature);\n  }\n}\n", "nl": "Siege Npcs of different SiegeRaces are always hostile"}
{"code": "public UrlSpaceConfigurer leaderSelector(LeaderSelectorConfig leaderSelectorConfig){\n  validate();\n  urlSpaceFactoryBean.leaderSelector(leaderSelectorConfig);\n  return this;\n}\n", "nl": "Sets an attribute store"}
{"code": "@ExceptionHandler(DataAccessException.class) @ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR) public @ResponseBody ErrorResponse resolveDataAccessException(DataAccessException e) throws IOException {\n  if (logger.isLoggable(Level.WARNING))   logger.log(Level.WARNING,\"received DataAccessException exception\",e);\n  return new ErrorResponse(new ExceptionMessage(e));\n}\n", "nl": "DataAcessException Handler, returns an error response to the client"}
{"code": "public boolean gotoLast(){\n  currentIterator=null;\n  currentId=null;\n  return isCurrentSet();\n}\n", "nl": "goto the last object Not implemented"}
{"code": "public boolean isControlDown(){\n  return mIsControlDown;\n}\n", "nl": "Accessor for control down check"}
{"code": "public Call put(String url,Callback callback){\n  return put(url,null,callback);\n}\n", "nl": "Make a PUT call"}
{"code": "public WallPostQuery friendsOnly(Boolean value){\n  return unsafeParam(\"friends_only\",value);\n}\n", "nl": "Post will be available to friends only"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(JensenShannonDivergence.SqrtJensenShannonDivergence);\n}\n", "nl": "this is currently selected?"}
{"code": "public void addFlag(int flag){\n  mIntent.addFlags(flag);\n}\n", "nl": "Add flag to Intent"}
{"code": "public void beforeStop(){\n}\n", "nl": "Call back before ICEREST stop"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_EXCEED_SUCCEED(DescriptionId nameId){\n  return new SM_SYSTEM_MESSAGE(1402657,new Object[]{nameId});\n}\n", "nl": "Amplification System"}
{"code": "public ItemToMaterialCursor queryItemsForMaterial(long mat_item_id){\n  return mHelper.queryItemsForMaterial(mat_item_id);\n}\n", "nl": "ITEM TO MATERIAL QUERIES"}
{"code": "private void typeUnknown(char c){\n  int converted=KeyEvent.getExtendedKeyCodeForChar(c);\n  controller.keyPress(converted);\n  controller.keyRelease(converted);\n}\n", "nl": "Type a character that is neither an alphabetic character and not in list of known characters (see list defined in this class)"}
{"code": "public FaveGetLinksQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Set offset"}
{"code": "public boolean next() throws GenericDataSourceException {\n  try {\n    return _rs.next();\n  }\n catch (  SQLException sqle) {\n    throw new GenericDataSourceException(\"SQL Exception while executing the following:\" + _sql,sqle);\n  }\n}\n", "nl": "Test if there more records available"}
{"code": "protected void draw(Graphics2D gc,Dimension size){\n  if (!chartViewer.isTranspose())   drawLegend(gc,size);\n else   drawLegendTransposed(gc,size);\n}\n", "nl": "draw the legend"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public SecureSetCounterQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.setCounter\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public UpdateLeaseSpaceOperationResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public boolean isGuideline(){\n  return mConstraintWidget instanceof Guideline;\n}\n", "nl": "is this a guideline"}
{"code": "@Override public Object generate(Object target,Method method,Object... params){\n  return generateKey(method,params);\n}\n", "nl": "Generates a key, taking into account the method and its params"}
{"code": "private boolean isSentenceEnd(int index){\n  FeatureVector fv=features.getFeatureVector(index);\n  return fv.getByteFeature(fiSentenceEnd) == 0 && fv.getByteFeature(fiWordEnd) == 0 && (!isHalfphone || fv.getByteFeature(fiLR) == fvLR_R);\n}\n", "nl": "Check if the given unit index is a sentence end"}
{"code": "public void registerKey(SelectionKey key){\n  if (key == null)   return;\n  _keysToEnable.add(key);\n  _keysToEnableCounter.incrementAndGet();\n  getSelector().wakeup();\n}\n", "nl": "called after the reading has finished"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public DatabaseGetCitiesQuery(VkApiClient client,int countryId){\n  super(client,\"database.getCities\",GetCitiesResponse.class);\n  countryId(countryId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void verifyPostAjax(ExpectedCondition condition){\n  authorLoader.verifyIsHidden();\n  verify(condition,Timeouts.MEDIUM);\n}\n", "nl": "Verifies that author mode is loaded (author loader is hidden) and then verifies if given condition is met in medium timeout (15 seconds)"}
{"code": "public void addSink(Set<SourceSinkDefinition> sinks){\n  for (  SourceSinkDefinition am : sinks)   this.sinkMethods.put(am.getMethod().getSignature(),am);\n}\n", "nl": "Adds a list of methods as sinks"}
{"code": "private void restoreCurrentItem(){\n  Bundle restoredBundle=savedInstanceState;\n  if (restoredBundle != null) {\n    if (restoredBundle.containsKey(CURRENT_SELECTED_ITEM_BUNDLE_KEY))     currentSelectedItem=restoredBundle.getInt(CURRENT_SELECTED_ITEM_BUNDLE_KEY,0);\n  }\n}\n", "nl": "Restore current item index from savedInstance"}
{"code": "public WidgetsGetPagesQuery period(String value){\n  return unsafeParam(\"period\",value);\n}\n", "nl": "Set period"}
{"code": "public WallGetQueryWithExtended filter(WallGetFilter value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Set filter"}
{"code": "private void buildNumPagePanel(){\n  numPagePanel.setInitialClasses(TableCssName.NUM_PAGE_PANEL);\n  numPagePanel.setGrid(\"s12 m4 l3\");\n  numPagePanel.setOffset(\"l3\");\n  numPagePanel.add(listPages);\n  numPagePanel.add(pageLabel);\n  add(numPagePanel);\n}\n", "nl": "Build the number page panel - where user can change the page number into a listbox"}
{"code": "public static boolean isConnectedWifi(Context context){\n  NetworkInfo info=Connectivity.getNetworkInfo(context);\n  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);\n}\n", "nl": "Check if there is any connectivity to a Wifi network"}
{"code": "@Override public void onMapReady(GoogleMap googleMap){\n  this.annotationViewWrapper=(AnnotationViewWrapper)this.getView().findViewById(R.id.annotationViewWrapper);\n  this.googleMap=googleMap;\n  this.googleMap.setOnCameraMoveListener(this);\n  this.googleMap.setOnCameraMoveStartedListener(this);\n  this.googleMap.setOnMapLoadedCallback(this);\n  this.setMapRenderer(this.mapRenderer);\n}\n", "nl": "call back from the getMapAsync function"}
{"code": "public SM_PLAYER_SEARCH(List<Player> players,int region){\n  this.players=new ArrayList<Player>(players);\n  this.region=region;\n}\n", "nl": "Constructs a new packet that will send these players"}
{"code": "public FriendsGetOnlineQueryWithMobile order(FriendsGetOnlineOrder value){\n  return unsafeParam(\"order\",value);\n}\n", "nl": "Sort order"}
{"code": "public Interceptor[] buildResourceInterceptors(Class<? extends Resource> resourceClass){\n  Interceptors before=resourceClass.getAnnotation(Interceptors.class);\n  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;\n}\n", "nl": "Build interceptors of Resource"}
{"code": "public static double[][] truncateRows(double[][] matrix,int nCols){\n  final int nRows=matrix.length;\n  final double[][] result=new double[nRows][nCols];\n  for (int row=0; row < nRows; row++) {\n    System.arraycopy(matrix[row],0,result[row],0,nCols);\n  }\n  return result;\n}\n", "nl": "copy only first nCols of matrix"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.210212602629,0.554298076728,0.831211613487,1.14547622606,1.61030798696,20.5150056524,15.0862724694,12.8325019940,11.0704976935,9.23635689978};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void clickPopupMenuItem(@NotNull String labelPrefix,@NotNull Component component,@NotNull Robot robot){\n  clickPopupMenuItemMatching(new PrefixMatcher(labelPrefix),component,robot);\n}\n", "nl": "Clicks an IntelliJ/Studio popup menu item with the given label prefix"}
{"code": "public Approximator(){\n  this.mType=ApproximatorType.NONE;\n}\n", "nl": "Initializes the approximator with type NONE"}
{"code": "protected void drawXAxis(Graphics2D gc){\n}\n", "nl": "draw the x axis"}
{"code": "public MessagesGetHistoryAttachmentsQuery(VkApiClient client,Actor actor,int peerId){\n  super(client,\"messages.getHistoryAttachments\",GetHistoryAttachmentsResponse.class);\n  accessToken(actor.getAccessToken());\n  peerId(peerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static String millisToText(long millis){\n  return Strings.millisToString(millis,true);\n}\n", "nl": "Convert time to a string"}
{"code": "public double det(){\n  return new LUDecomposition(this).det();\n}\n", "nl": "Matrix determinant"}
{"code": "public boolean drain(){\n  return true;\n}\n", "nl": "Waits for all queued audio to be played"}
{"code": "public RegexSpacePredicate(String expectedValue){\n  super(expectedValue,null);\n  if (expectedValue == null)   throw new IllegalArgumentException(\"Argument 'expectedValue' cannot be null.\");\n  init();\n}\n", "nl": "Creates a scalar predicate using the specified expected value"}
{"code": "public FixedMetadataValue(Plugin owningPlugin,final Object value){\n  super(owningPlugin);\n  this.internalValue=value;\n}\n", "nl": "Initializes a FixedMetadataValue with an Object"}
{"code": "@Override public void onContentLoaded(Uri uri,String contentType){\n  if (contentType.equals(ContentManager.Content.IMAGE.toString())) {\n    ImageLoader.getInstance().displayImage(uri.toString(),ivPicture);\n  }\n else {\n  }\n}\n", "nl": "Success result callback"}
{"code": "public void changeContrast(float value){\n  this.contrast+=value;\n}\n", "nl": "Changes contrast value by the value passed in as a parameter"}
{"code": "public DTW(double[][] signal,double[][] reference,double[] sigma2){\n  this.signal=signal;\n  this.reference=reference;\n  this.sigma2=sigma2;\n  this.distanceFunction=\"Mahalanobis\";\n  setCost(dpDistance());\n}\n", "nl": "DTW using Mahalanobis distance (Variance computation from external module)"}
{"code": "public boolean isApplicable(){\n  return ProjectManager.getNumberOfProjects() > 1 || getDir().getViewers().size() > 1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static String millisecondsToHours(long millis){\n  return String.format(Locale.getDefault(),\"%02d:%02d\",TimeUnit.MILLISECONDS.toHours(millis),TimeUnit.MILLISECONDS.toMinutes(millis) % TimeUnit.HOURS.toMinutes(1));\n}\n", "nl": "millisecondsToHours Get the hh:mm value from milliseconds"}
{"code": "public CompositeTupleSet(){\n  this(true);\n}\n", "nl": "Create a new, empty CompositeTupleSet"}
{"code": "@Override public boolean hasFixedPropertiesArray(){\n  return true;\n}\n", "nl": "true if the entry packet has an array of fixed properties"}
{"code": "public static void showProgressDialog(final Context context,final String message){\n  showProgressDialog(context,DEFAULT_TAG,message);\n}\n", "nl": "Shows default dialog with a message"}
{"code": "public void addEntry(LocalVarEntry e){\n  vars.addElement(e);\n}\n", "nl": "Add a LocalVar Entry to the attribute"}
{"code": "private void buildPathForAbstraction(final AbstractionAtSink abs){\n  SourceContextAndPath scap=new SourceContextAndPath(abs.getAbstraction().getAccessPath(),abs.getSinkStmt());\n  scap=scap.extendPath(abs.getAbstraction());\n  abs.getAbstraction().addPathElement(scap);\n  if (!checkForSource(abs.getAbstraction(),scap))   executor.execute(new SourceFindingTask(abs.getAbstraction()));\n}\n", "nl": "Builds the path for the given abstraction that reached a sink"}
{"code": "public byte[] download_file(String group_name,String remote_filename) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file(group_name,remote_filename,file_offset,download_bytes);\n}\n", "nl": "download file from storage server"}
{"code": "public static int copy(File src,File dest) throws IOException {\n  return copy(new FileInputStream(src),new FileOutputStream(dest),true);\n}\n", "nl": "copy file src to file destination"}
{"code": "public static void i(Class<?> clazz,String msg){\n  if (isDebug) {\n    Log.i(clazz.getSimpleName(),msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public static String[] exclude(String... includes){\n  return includes;\n}\n", "nl": "Sets what patterns to exclude"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  final ImportBlastDialog dialog=new ImportBlastDialog(getViewer().getFrame(),getDir(),\"Import BLAST and READs files - MEGAN\");\n  final String command=dialog.showAndGetCommand();\n  if (command != null)   execute(command);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void schedule(String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count) throws JobManagerException {\n  schedule(serviceName,context,startTime,frequency,interval,count,0);\n}\n", "nl": "Schedule a job to start at a specific time with specific recurrence info"}
{"code": "public boolean isAtSpawnLocation(){\n  return getDistanceToSpawnLocation() < 3;\n}\n", "nl": "Check whether npc located near initial spawn location"}
{"code": "public void initResultsEntryPackets(){\n  _results=!accumulate() ? null : new IEntryPacket[((AbstractIdsQueryPacket)_template).getIds().length];\n}\n", "nl": "if the operation not requires to accumulate set null, otherwise initialize the results for the readByIds operation"}
{"code": "@deprecated public static BigDecimal toBigDecimalTrunc(BigDecimal universalTime,int timeScale){\n  TimeScaleData data=getTimeScaleData(timeScale);\n  BigDecimal units=new BigDecimal(data.units);\n  BigDecimal epochOffset=new BigDecimal(data.epochOffset);\n  return universalTime.divide(units,1).subtract(epochOffset);\n}\n", "nl": "/*    "}
{"code": "public void createKey(SocketChannel channel){\n  _keysToCreate.add(channel);\n  _keysToCreateCounter.incrementAndGet();\n  getSelector().wakeup();\n}\n", "nl": "called after the reading has finished"}
{"code": "public static void putLong(String key,long value){\n  prefs.edit().putLong(key,value).commit();\n}\n", "nl": "Set a long value in the preferences editor, to be written back once"}
{"code": "public void assertMatches(Matcher<TrafficLog> matcher){\n  assertThat(trafficLogProvider.get(),matcher);\n}\n", "nl": "Asserts that traffic log is matched by provided matcher"}
{"code": "public StandardDocumentComparator(){\n  sGraph=new GraphSimilarity();\n  sHistogram=new GraphSimilarity();\n}\n", "nl": "Creates a new instance of StandardComparator"}
{"code": "public WidgetsGetPagesQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Set count"}
{"code": "public DateTime toJodaDateTime(){\n  return toJodaDateTime(ISOChronology.getInstance());\n}\n", "nl": "Converts dateUnit to Joda-Time DateTime using ISO chronology"}
{"code": "public static String combineGetMethodName(String fieldName){\n  return \"get\" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);\n}\n", "nl": "combine a get-method name form field name"}
{"code": "public CronTimer(int hour,int minute,int sec){\n  cronExpression=sec + \" \" + minute+ \" \"+ hour+ \" * * ?\";\n}\n", "nl": "Daily Cron"}
{"code": "private void addDataToDictionaryMap(){\n  int surrogateKey=dictionaryByteArrayToSurrogateKeyMap.size();\n  List<byte[]> oneDictionaryChunk=dictionaryChunks.get(dictionaryChunks.size() - 1);\n  for (int i=0; i < oneDictionaryChunk.size(); i++) {\n    DictionaryByteArrayWrapper dictionaryByteArrayWrapper=new DictionaryByteArrayWrapper(oneDictionaryChunk.get(i),xxHash32);\n    dictionaryByteArrayToSurrogateKeyMap.put(dictionaryByteArrayWrapper,++surrogateKey);\n  }\n}\n", "nl": "This method will add the new dictionary data to map"}
{"code": "public boolean isApplicable(){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static WxCurMenuInfoResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxCurMenuInfoResult.class);\n}\n", "nl": "json --> obj"}
{"code": "public String toString(){\n  StringBuilder builder=new StringBuilder(\"<\");\n  builder.append(href).append(\">; rel=\").append(relationship);\n  if (type != null)   builder.append(\"; type=\").append(type);\n  return builder.toString();\n}\n", "nl": "To write as link header"}
{"code": "public static float roundToNextSignificant(double number){\n  final float d=(float)Math.ceil((float)Math.log10(number < 0 ? -number : number));\n  final int pw=1 - (int)d;\n  final float magnitude=(float)Math.pow(10,pw);\n  final long shifted=Math.round(number * magnitude);\n  return shifted / magnitude;\n}\n", "nl": "rounds the given number to the next significant number"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_START_ROUND_IDARENA(String value0){\n  return new SM_SYSTEM_MESSAGE(1400928,value0);\n}\n", "nl": "Round %0 begins!"}
{"code": "public void addService(final IRemoteService service){\n  final ServicePanel servicePanel=new ServicePanel(service,this);\n  servicePanel.setToolTipText(service.getShortName());\n  tabbedPane.add(servicePanel,0);\n  tabbedPane.setTitleAt(0,abbreviateName(service.getShortName()));\n  tabbedPane.setSelectedIndex(0);\n}\n", "nl": "add a remote file service"}
{"code": "private void observe(Future<?> future){\n  Observable observable=new Observable(future,timeout);\n  queue.add(observable);\n}\n", "nl": "add this observable future into the queue"}
{"code": "private String toUrl(String testFile) throws MalformedURLException {\n  return new File(TestUtil.TEST_DATA_FOLDER + \"pac\",testFile).toURI().toURL().toString();\n}\n", "nl": "Helper method to build the url to the given test file"}
{"code": "protected GroupsGetMembersQueryWithFilter filter(GroupsGetMembersFilter value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Set filter"}
{"code": "public PhotosEditCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"photos.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean writeFile(String filePath,InputStream stream,boolean append){\n  return writeFile(filePath != null ? new File(filePath) : null,stream,append);\n}\n", "nl": "write file"}
{"code": "@RequestMapping(value=\"/servers/clean_cache\",method=RequestMethod.POST) public JsonResponse cleanServerCache(@RequestParam(\"server\") String server){\n  serverService.cleanCache(server);\n  return JsonResponse.ok(true);\n}\n", "nl": "Clear the server's local cache"}
{"code": "protected void notifyScrollingListenersAboutEnd(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingFinished(this);\n  }\n}\n", "nl": "Notifies listeners about ending scrolling"}
{"code": "public WallReportPostQuery(VkApiClient client,UserActor actor,int ownerId,int postId){\n  super(client,\"wall.reportPost\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  postId(postId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MonsterCursor queryMonsters(){\n  return mHelper.queryMonsters();\n}\n", "nl": "MONSTER QUERIES"}
{"code": "public boolean isDurableSubscriber(){\n  return !StringsUtils.isEmpty(m_durableSubscriptionName);\n}\n", "nl": "Determines if the subscriber is durable"}
{"code": "private Long createProcessPIK(){\n  Random r=new Random();\n  int pik=r.nextInt(PIK_MAX + 1);\n  if (pik < PIK_MIN) {\n    pik+=PIK_MIN;\n  }\n  return Long.valueOf(pik);\n}\n", "nl": "Creation of the random PIK (between PIK_MIN and PIK_MAX)"}
{"code": "public static Navigator with(Context context) throws NavigatorException {\n  return getInstance(context);\n}\n", "nl": "Get the default Navigator object instance and begin building a request"}
{"code": "private static TestItem adjustName(TestItem input){\n  StringBuilder sb=new StringBuilder(StringUtils.repeat(PREFIX,input.getPath().size()));\n  input.setName(sb.append(input.getName()).toString());\n  return input;\n}\n", "nl": "Add right shifting for child items depends on depth level"}
{"code": "@Override public void onSuccess(IMqttToken asyncActionToken){\n  ConnectionState state=(ConnectionState)asyncActionToken.getUserContext();\n  if (state == ConnectionState.Connecting) {\n    AirMapLog.i(\"TrafficService\",\"Successfully connected\");\n    onConnect();\n  }\n}\n", "nl": "Called when there was a successful MQTT connection"}
{"code": "public void removeRelated(String relationName) throws GenericEntityException {\n  this.getDelegator().removeRelated(relationName,this);\n}\n", "nl": "Remove the named Related Entity for the GenericValue from the persistent store"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public int modify_file1(String appender_file_id,long file_offset,String local_filename) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.modify_file(parts[0],parts[1],file_offset,local_filename);\n}\n", "nl": "modify appender file to storage server (by file name)"}
{"code": "public boolean isTerminated(){\n  return state == ABORTED;\n}\n", "nl": "Check if we're terminated completely, abort process is considered complete"}
{"code": "public boolean isGameStartSet(){\n  return gameStartSet;\n}\n", "nl": "get the isGameStartSet boolean"}
{"code": "public Constant key(){\n  return key;\n}\n", "nl": "Returns the key of the entry"}
{"code": "public void decipher(byte[] data){\n  decipher(data,0,data.length);\n}\n", "nl": "Decipher the given byte-array with Blowfish cipher"}
{"code": "public static int hash(String key,int bitSize,String input){\n  int fullHash=(key + input).hashCode();\n  int bitLimitedHash=fullHash;\n  if (bitSize < 32) {\n    bitLimitedHash=(0xFFFFFFFF >>> (32 - bitSize)) & fullHash;\n  }\n  return bitLimitedHash;\n}\n", "nl": "Hash method that uses the java String hashCode()"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"select=invert;\");\n}\n", "nl": "action to be performed"}
{"code": "public void remove(IObjectInfo<T> poi){\n  remove_impl(poi,true);\n}\n", "nl": "remove an element described by ObjectInfo"}
{"code": "@deprecated public static int compare(int codepoint,CharSequence a){\n  return -compare(a,codepoint);\n}\n", "nl": "/*    "}
{"code": "public static void xml(String xml){\n  printer.xml(xml);\n}\n", "nl": "Formats the json content and print it"}
{"code": "public static Typeface customTypeface(Context context,int index){\n  Typeface typeface=null;\n  if (index == 1)   typeface=Typeface.createFromAsset(context.getAssets(),\"fonts/BreeSerif-Regular.ttf\");\n  if (index == 2)   typeface=Typeface.createFromAsset(context.getAssets(),\"fonts/OpenSans-Regular.ttf\");\n  if (index == 3)   typeface=Typeface.createFromAsset(context.getAssets(),\"fonts/OpenSans-Bold.ttf\");\n  return typeface;\n}\n", "nl": "Custom Typefaces"}
{"code": "public static String imageUrl(String type){\n  return \"http://thecatapi.com/api/images/get?format=src&type=\" + type;\n}\n", "nl": "random cat images"}
{"code": "public boolean isInUse(){\n  return getKmTarget() > api.getPlayerProfile().getStats().getKmWalked();\n}\n", "nl": "Is the incubator currently being used"}
{"code": "public FriendsGetAvailableForCallQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getAvailableForCall\",GetAvailableForCallResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "void commit(){\n  queryExecutor.submit(null);\n}\n", "nl": "Commit and report any errors to the client"}
{"code": "public boolean leftAllowed(){\n  return (myFlags & LEFT_EDGE) != 0;\n}\n", "nl": "Returns true if this policy allows resizing the left edge"}
{"code": "@Override public boolean hasNext(){\n  return hasNext;\n}\n", "nl": "is all the blocks assigned to this iterator has been processed"}
{"code": "public InvalidPluginException(final Throwable cause){\n  super(cause);\n}\n", "nl": "Constructs a new InvalidPluginException based on the given Exception"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void onConnected(SubscriberKit subscriberKit){\n}\n", "nl": "Subscribe listener"}
{"code": "public static void addTrafficListener(AirMapTrafficListener callback){\n  getAirMapTrafficService().addListener(callback);\n}\n", "nl": "Adds a callback to the traffic service"}
{"code": "@Override public long addLoginHistory(LoginHistory loginHistory){\n  return sessionTemplate.insert(NAMESPACE + \".addLoginHistory\",loginHistory);\n}\n", "nl": "Add new login history"}
{"code": "@Override public long limit(){\n  return fileLength >>> 3;\n}\n", "nl": "length of array (file length / 8)"}
{"code": "@Deployment(resources={\"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.parallelGatewayTwoEndsProcess.bpmn20.xml\"}) public void testProcessCompleted_ParallelGatewayTwoEnds() throws Exception {\n  this.runtimeService.startProcessInstanceByKey(\"noEndProcess\");\n  List<ActivitiEvent> events=listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED);\n  assertEquals(\"ActivitiEventType.PROCESS_COMPLETED was expected 1 time.\",1,events.size());\n}\n", "nl": "Test +-->End1 Start-<> +-->End2 <p/> process on PROCESS_COMPLETED event"}
{"code": "@Override public void handle(){\n  spec.handler.accept(new PacketContext(),this);\n}\n", "nl": "Handles receiving this packet"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "public void expand(NodeBase v){\n  if (v != null) {\n    for (Enumeration descendants=v.breadthFirstEnumeration(); descendants.hasMoreElements(); ) {\n      v=(NodeBase)descendants.nextElement();\n      dataTree.expandPath(new TreePath(v.getPath()));\n    }\n  }\n}\n", "nl": "expand the given node"}
{"code": "public CM_CHARACTER_EDIT(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_CREATE_CHARACTER </tt> packet"}
{"code": "public AdsGetAdsLayoutQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getAdsLayout\",Utils.buildParametrizedType(List.class,AdLayout.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n", "nl": "Adds wheel scrolling listener"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public ZkConnection(String zkServers,int sessionTimeOut,String authStr){\n  _servers=zkServers;\n  _sessionTimeOut=sessionTimeOut;\n  _authStr=authStr;\n}\n", "nl": "build a zookeeper connection"}
{"code": "public boolean isSetCurrentMessageId(){\n  return this.currentMessageId != null;\n}\n", "nl": "Returns true if field currentMessageId is set (has been assigned a value) and false otherwise"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set keep1=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public AccountGetPushSettingsQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n", "nl": "Set device id"}
{"code": "public RecyclerView.ViewHolder newInsertionViewHolder(ViewGroup vParent){\n  final LayoutInflater inflater=LayoutInflater.from(getContext());\n  ViewGroup itemView=(ViewGroup)inflater.inflate(R.layout.layout_root,vParent,false);\n  return new InsertViewHolder(itemView);\n}\n", "nl": "Override this method if you need to bind view getHolder for insertions <p/> viewType == 100500"}
{"code": "private void deleteFile(){\n  FileFactory.FileType fileType=FileFactory.getFileType(this.filePath);\n  CarbonFile carbonFile=FileFactory.getCarbonFile(this.filePath,fileType);\n  carbonFile.delete();\n}\n", "nl": "this method will delete file"}
{"code": "public double uniformRand(){\n  return (rand.nextBoolean()) ? 1.0 : -1.0;\n}\n", "nl": "uniform_rand: generate uniformly distributed random numbers 1 or -1"}
{"code": "public String toString(){\n  return \"MPPointD, x: \" + x + \", y: \"+ y;\n}\n", "nl": "returns a string representation of the object"}
{"code": "public static void debug(@Nullable Class<?> caller,String message,Object... args){\n  android.util.Log.d(tag(caller),String.format(Locale.ENGLISH,message,args));\n}\n", "nl": "Logs with debug level"}
{"code": "public boolean isBeaming(){\n  return beaming;\n}\n", "nl": "Gets whether the node supports beaming"}
{"code": "public void updatePosition(ViewTransform viewTransform){\n  updateResizeHandlesPositions(viewTransform);\n  updateConstraintHandlesPositions();\n}\n", "nl": "Update our position"}
{"code": "public boolean isError(){\n  return state.equals(ERROR);\n}\n", "nl": "Check if error state is shown"}
{"code": "public void changeSampleName(Integer pid,String newName){\n  sampleNames.set(pid,newName);\n}\n", "nl": "replace an existing sample name"}
{"code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0,0.001d,0.010d,0.025d,0.050d,0.100d,0.999d,0.990d,0.975d,0.950d,0.900d,1};\n}\n", "nl": "Creates the default inverse cumulative probability test input values"}
{"code": "public PhotosGetQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Set count"}
{"code": "@Override public void run(){\n  time.increase();\n}\n", "nl": "Increases the time by one minute"}
{"code": "public void logStatisticsAsTableExecutor(){\n  String tableInfo=collectExecutorStatistics();\n  if (null != tableInfo) {\n    LOGGER.statistic(tableInfo);\n  }\n}\n", "nl": "Below method will be used to show statistic log as table"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_UPDATE(){\n  return new SM_SYSTEM_MESSAGE(1300611);\n}\n", "nl": "%1[update]%2 %0"}
{"code": "private static List<LoadMetadataDetails> checkPreserveSegmentsPropertyReturnRemaining(List<LoadMetadataDetails> segments){\n  int numberOfSegmentsToBePreserved=0;\n  numberOfSegmentsToBePreserved=CarbonProperties.getInstance().getNumberOfSegmentsToBePreserved();\n  return CarbonDataMergerUtil.getValidLoadDetailsWithRetaining(segments,numberOfSegmentsToBePreserved);\n}\n", "nl": "checks number of loads to be preserved and returns remaining valid segments"}
{"code": "@Override public boolean supportsFifoOrder(){\n  return true;\n}\n", "nl": "equality matching preserves fifo order"}
{"code": "public INSECTCategoryDB(){\n}\n", "nl": "Creates a new instance of INSECTCategoryDB"}
{"code": "private void finish(){\n  Activity container=getActivity();\n  container.finish();\n}\n", "nl": "Finishes the preview"}
{"code": "protected MarketGetByIdQuery itemIds(List<String> value){\n  return unsafeParam(\"item_ids\",value);\n}\n", "nl": "Items ID"}
{"code": "public PhotosEditQuery deletePlace(Boolean value){\n  return unsafeParam(\"delete_place\",value);\n}\n", "nl": "Set delete place"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapFlight && getFlightId().equals(((AirMapFlight)o).getFlightId());\n}\n", "nl": "Comparison based on ID"}
{"code": "public String toUuidString(){\n  String result=String.join(\"-\",contentAsHex(0,4),contentAsHex(4,6),contentAsHex(6,8),contentAsHex(8,10),contentAsHex(10,16));\n  return result.toLowerCase();\n}\n", "nl": "UUID created from the first 128 bits of SHA256"}
{"code": "private void doPrint(PrintStream writer,List<String> args){\n  String rootPath=mAppContext.getApplicationInfo().dataDir + \"/shared_prefs\";\n  String offsetPrefix=args.isEmpty() ? \"\" : args.get(0);\n  String keyPrefix=(args.size() > 1) ? args.get(1) : \"\";\n  printRecursive(writer,rootPath,\"\",offsetPrefix,keyPrefix);\n}\n", "nl": "Execute command to print all keys and values stored in the shared preferences which match the optional given prefix"}
{"code": "public void unlockUserInput(){\n  locked=false;\n  getCommandManager().setEnableCritical(true);\n  searchManager.getFindDialogAsToolBar().setEnableCritical(true);\n  if (bottomToolBar != null)   bottomToolBar.setEnabled(true);\n  setCursor(Cursor.getDefaultCursor());\n  getContentPane().setCursor(Cursor.getDefaultCursor());\n}\n", "nl": "ask view to allow user input"}
{"code": "@Override public int hashCode(){\n  return (matcher == null ? 0 : matcher.hashCode()) ^ (action == null ? 0 : action.hashCode());\n}\n", "nl": "Compute a hash code using the hash codes of the underlying objects"}
{"code": "CommandResult(Process process,Command command){\n  this.process=process;\n  this.command=command;\n}\n", "nl": "Construct command result instance with given arguments"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "protected MarketEditQuery price(float value){\n  return unsafeParam(\"price\",value);\n}\n", "nl": "Item price"}
{"code": "public static EntityQuery use(Delegator delegator){\n  return new EntityQuery(delegator);\n}\n", "nl": "Construct an EntityQuery object for use against the specified Delegator"}
{"code": "public GroupsEditQuery email(String value){\n  return unsafeParam(\"email\",value);\n}\n", "nl": "Organizer email (for events)"}
{"code": "public static String millisToText(long millis){\n  return Strings.millisToString(millis,true);\n}\n", "nl": "Convert time to a string"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"move dir=up;\");\n}\n", "nl": "action to be performed"}
{"code": "protected void ac(Object expected,Object actual){\n  ae(expected.getClass(),actual.getClass());\n}\n", "nl": "Assert these two are of the same class"}
{"code": "public <T extends CoreItem>void addItem(@IntRange(from=0) int position,@NonNull T item){\n  if (position > items.size()) {\n    throw new IndexOutOfBoundsException();\n  }\n  items.add(position,item);\n  notifyItemInserted(position);\n}\n", "nl": "adding an item to a position"}
{"code": "private void processLE(final char ch[],int offset,final int count){\n  int curPos=0;\n  for (int i=0; i < count; ++i) {\n    final int b0=fBuffer[curPos++] & 0xff;\n    final int b1=fBuffer[curPos++] & 0xff;\n    ch[offset++]=(char)((b1 << 8) | b0);\n  }\n}\n", "nl": "Decodes UTF-16LE"}
{"code": "public Observable<FirebaseChildEvent> observeChildMoved(final Query firebaseRef){\n  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.MOVED));\n}\n", "nl": "Creates an observable only for the child removed method"}
{"code": "public boolean isApplicable(){\n  return false;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private byte[] SHA256hash(byte[] tobeHashed){\n  SHA256Digest digester=new SHA256Digest();\n  byte[] retValue=new byte[digester.getDigestSize()];\n  digester.update(tobeHashed,0,tobeHashed.length);\n  digester.doFinal(retValue,0);\n  return retValue;\n}\n", "nl": "This is the SHA-256 hashing function that is performed on the public key"}
{"code": "public void mouseReleased(@AndroidCoordinate int x,@AndroidCoordinate int y){\n  if (myMouseInteraction != null) {\n    myMouseInteraction.mouseReleased(pxToDp(x),pxToDp(y));\n  }\n  myConstraintModel.requestRender();\n}\n", "nl": "Handles mouse release in the user interaction with our model"}
{"code": "public boolean contains(Object obj){\n  return index((T)obj) >= 0;\n}\n", "nl": "Searches the set for <tt>obj</tt>"}
{"code": "@Override public void run(){\n  firstWavePath.reset();\n  secondWavePath.reset();\n  shift=shift + speed;\n  invalidate();\n  handler.postDelayed(new WaveRunnable(),16);\n}\n", "nl": "This runnable helps to run animation in an infinite loop"}
{"code": "@PostConstruct protected void init(){\n  logger.debug(\"Create the RestTemplate instance that will be wrapped\");\n  makeRestTemplateWithCustomObjectMapper(restTemplate);\n  logger.debug(\"Set interceptor for authentication\");\n  List<ClientHttpRequestInterceptor> interceptors=Collections.<ClientHttpRequestInterceptor>singletonList(formLoginAuthenticationCsrfTokenInterceptor);\n  restTemplate.setRequestFactory(new InterceptingClientHttpRequestFactory(restTemplate.getRequestFactory(),interceptors));\n}\n", "nl": "Initialize the internal restTemplate instance"}
{"code": "public StatelessHibernateSpaceDataSourceConfigurer augmentInitialLoadEntries(boolean augmentInitialLoadEntries){\n  this.augmentInitialLoadEntries=augmentInitialLoadEntries;\n  return this;\n}\n", "nl": "Feature switch for initial load entries augmentation (creation of partition-specific query for entries)"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public Speaker persist(final Speaker speaker){\n  final String id=UUID.randomUUID().toString();\n  speaker.setId(id);\n  this.speakers.put(id,speaker);\n  return speaker;\n}\n", "nl": "Persist the given speaker"}
{"code": "private void recordSimpleJavaEdit(){\nsynchronized (myLock) {\n    mySeenLocalJavaChanges=true;\n  }\n}\n", "nl": "Called when we've noticed an edit of a Java file that is in an app module"}
{"code": "public LikesGetListQuery(VkApiClient client,LikesType type){\n  super(client,\"likes.getList\",GetListResponse.class);\n  type(type);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void addGlue(JComponent b,int layout){\n  b.add(getAxis(b,layout) == BoxLayout.X_AXIS ? Box.createHorizontalGlue() : Box.createVerticalGlue());\n}\n", "nl": "Add a glue, or variable spacing, to a UI component"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_GIVEUP(){\n  return new SM_SYSTEM_MESSAGE(1300610);\n}\n", "nl": "%1[fail]%2 %0"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-2.226325228634938,-1.156887023657177,-0.643949578356075,-0.2027950777320613,0.305827808237559,+6.42632522863494,5.35688702365718,4.843949578356074,4.40279507773206,3.89417219176244};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "public static void showString(String title,String content,Dimension dimension){\n  JTextArea area=new JTextArea(content);\n  area.setEditable(false);\n  JScrollPane scroll=new JScrollPane(area);\n  scroll.setPreferredSize(dimension);\n  JOptionPane.showMessageDialog(null,scroll,title,JOptionPane.INFORMATION_MESSAGE);\n}\n", "nl": "Display a string (can be long) inside a message dialogue"}
{"code": "private static BigInteger parseBigInteger(String whole,String part,int index) throws IllegalArgumentException {\n  if (part == null) {\n    return null;\n  }\n  part=part.substring(0,part.length() - 1);\n  return new BigInteger(part);\n}\n", "nl": "TODO: Javadoc"}
{"code": "public AddTypeIndexesResponseInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private void startLoadingData(){\n  Random random=new Random();\n  mHandler.postDelayed(null,1000 + random.nextInt(2000));\n}\n", "nl": "start splash animation"}
{"code": "@Bean public Auth0Client auth0Client(){\n  return new Auth0Client(clientId,issuer);\n}\n", "nl": "Provides Auth0 API access"}
{"code": "private static int hashOf(final int key){\n  final int h=key ^ ((key >>> 20) ^ (key >>> 12));\n  return h ^ (h >>> 7) ^ (h >>> 4);\n}\n", "nl": "Compute the hash value of a key"}
{"code": "public static boolean saveTime(){\n  log.info(\"Game time saved...\");\n  return DAOManager.getDAO(ServerVariablesDAO.class).store(\"time\",getGameTime().getTime());\n}\n", "nl": "Saves the current time to the database"}
{"code": "public static Map<String,Object> conditionTrueService(DispatchContext dctx,Map<String,?> context){\n  Map<String,Object> result=ServiceUtil.returnSuccess();\n  result.put(\"conditionReply\",Boolean.TRUE);\n  return result;\n}\n", "nl": "Return TRUE Service; ECA Condition Service"}
{"code": "private String nextHost(){\n  currentHost++;\n  if (currentHost == hostsArray.length) {\n    currentHost=0;\n  }\n  return hostsArray[currentHost];\n}\n", "nl": "Return the string ip of the next host using round-robin technique"}
{"code": "public V put(K key,V value){\n  return putInternal(key,value,expireTimeNanos);\n}\n", "nl": "Puts or loads the passed element into the cache"}
{"code": "public void putAuxiliaryData(Map<String,byte[]> label2data) throws IOException {\n  (new RMA2File(file)).replaceAuxiliaryData(label2data);\n}\n", "nl": "puts the MEGAN auxiliary data associated with the dataset"}
{"code": "public ResourcesPoet indent(boolean indent){\n  this.indent=indent;\n  return this;\n}\n", "nl": "Specify if you want the output to be indented or not"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCache.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "public boolean isApplicable(){\n  final ChartViewer viewer=(ChartViewer)getViewer();\n  return viewer.getActiveLabelsJList() != null && viewer.getActiveLabelsJList().getSelectedIndex() != -1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isEmpty(@Nullable String s){\n  return s == null || s.isEmpty();\n}\n", "nl": "Checks whether given string is null or empty"}
{"code": "public void expand(DefaultMutableTreeNode v){\n  if (v == null)   v=(DefaultMutableTreeNode)fileTree.getModel().getRoot();\n  for (Enumeration descendants=v.breadthFirstEnumeration(); descendants.hasMoreElements(); ) {\n    v=(DefaultMutableTreeNode)descendants.nextElement();\n    fileTree.expandPath(new TreePath(v.getPath()));\n  }\n}\n", "nl": "expand the given node"}
{"code": "public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){\n  return clickListeners.remove(itemClickListener);\n}\n", "nl": "remove item click listener from this view"}
{"code": "public static int computePercentIdentity(DAAMatchRecord match){\n  return match.getIdentities() * 100 / match.getLen();\n}\n", "nl": "computes percent identity"}
{"code": "public void leftClick() throws InterruptedException {\n  click(InputEvent.BUTTON1_MASK);\n}\n", "nl": "Left click the mouse"}
{"code": "public static boolean putBoolean(Context context,String key,boolean value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putBoolean(key,value);\n  return editor.commit();\n}\n", "nl": "put boolean preferences"}
{"code": "public static INDArray concat(INDArray[] history){\n  INDArray arr=Nd4j.concat(0,history);\n  if (arr.shape().length > 2)   arr.muli(1 / 256f);\n  return arr;\n}\n", "nl": "concat an array history into a single INDArry of as many channel as element in the history array"}
{"code": "public boolean hasInitialSeeds(){\n  return !this.initialSeeds.isEmpty();\n}\n", "nl": "Gets whether this information flow problem has initial seeds"}
{"code": "public VideoPutTagQuery(VkApiClient client,UserActor actor,int userId,int videoId){\n  super(client,\"video.putTag\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static boolean isValidIPAddress(String IPAddress){\n  return Patterns.IP_ADDRESS.matcher(IPAddress).matches();\n}\n", "nl": "Check if an IP Address is valid"}
{"code": "public GroupsGetQueryWithExtended filter(List<GroupsGetFilter> value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Types of communities to return"}
{"code": "public ResourcesPoet addBool(String name,String value){\n  Element element=document.createElement(\"bool\");\n  element.setAttribute(\"name\",name);\n  element.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(element);\n  return this;\n}\n", "nl": "Add a boolean to the config"}
{"code": "public SerialMessage stopLevelChangeMessage(){\n  logger.debug(\"NODE {}: Creating new message for command SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE\",getNode().getNodeId());\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);\n  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE};\n  result.setMessagePayload(newPayload);\n  return result;\n}\n", "nl": "Gets a SerialMessage with the SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE command"}
{"code": "public OrdersGetAmountQuery(VkApiClient client,UserActor actor,int userId,String... votes){\n  super(client,\"orders.getAmount\",Amount.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n  votes(votes);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public int daysCompleteTheTask(){\n  int k=0;\n  for (int i=1; i <= daysOfCurrentMonth(); i++) {\n    k+=data[i] ? 1 : 0;\n  }\n  return k;\n}\n", "nl": "used for MODE_SHOW_DATA_OF_THIS_MONTH"}
{"code": "public StorageGetQuery key(String value){\n  return unsafeParam(\"key\",value);\n}\n", "nl": "Set key"}
{"code": "public static void sampleInstallTinker(ApplicationLike appLike){\n  if (isInstalled) {\n    TinkerLog.w(TAG,\"install tinker, but has installed, ignore\");\n    return;\n  }\n  TinkerInstaller.install(appLike);\n  isInstalled=true;\n}\n", "nl": "all use default class, simply Tinker install method"}
{"code": "public VideoRemoveFromAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){\n  super(client,\"video.removeFromAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void uploadFile(TRSHttpRequest request,TRSFileUploadHttpCallback callback){\n  mProvider.uploadFile(request,callback);\n}\n", "nl": "Post File to Server"}
{"code": "public static boolean isAnyInfinity(double[] x){\n  for (  double value : x) {\n    if (Double.isInfinite(value)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check whether x contains Infinity"}
{"code": "public void navigateToMain(){\n  activity.startActivity(new Intent(activity,MainActivity.class));\n  activity.finish();\n}\n", "nl": "Start main app activity"}
{"code": "public boolean containsKey(DataType key){\n  return lookupKey(key).hasNext();\n}\n", "nl": "Performs a lookup to see if index contains a given key"}
{"code": "public Authentication(String firstName,String lastName,String mobile,String email,String password,String userType){\n  this.firstName=firstName;\n  this.lastName=lastName;\n  this.mobile=mobile;\n  this.email=email;\n  this.password=password;\n  this.userType=userType;\n}\n", "nl": "Used for signup"}
{"code": "public static PhasedBackoffWaitStrategy withSleep(long spinTimeout,long yieldTimeout,TimeUnit units){\n  return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new SleepingWaitStrategy(0));\n}\n", "nl": "Block by sleeping in a loop"}
{"code": "public MarketReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId,ReportReason reason){\n  super(client,\"market.reportComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n  reason(reason);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AirMapControlledAirspaceProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n", "nl": "Initialize an AirMapControlledAirspaceProperties from JSON"}
{"code": "@deprecated RuleBasedTransliterator(String ID,Data data,UnicodeFilter filter){\n  super(ID,filter);\n  this.data=data;\n  setMaximumContextLength(data.ruleSet.getMaximumContextLength());\n}\n", "nl": "/*    "}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  final ClusterViewer viewer=getViewer();\n  int max=viewer.getPcoaTab().getPCoA().getLoadingVectorsBiPlot().size();\n  np.matchIgnoreCase(\"set biplotSize=\");\n  int number=np.getInt(0,max);\n  np.matchIgnoreCase(\";\");\n  viewer.getPcoaTab().setBiplotSize(number);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public int skipBytes(int n) throws IOException {\n  int remaining=n;\n  while (remaining > 0) {\n    remaining-=(int)bif.skip(remaining);\n  }\n  position+=n;\n  return n;\n}\n", "nl": "skip n bytes"}
{"code": "public String toFastA(){\n  return toFastA(false,0,0,getNumberOfSequences() - 1,getLength());\n}\n", "nl": "return a fastA representation in string"}
{"code": "private Stream<String> resolve(String template,CSVReader reader) throws IOException {\n  String[] header=reader.readNext();\n  return partitionedStream(reader.iterator()).map(null).map(null);\n}\n", "nl": "Convert native data format (CSVReader) to stream of templates"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static boolean nullEquals(String s1,String s2){\n  return (s1 == null ? s2 == null : s1.equals(s2));\n}\n", "nl": "equals() with two strings where either could be null"}
{"code": "@Override public void onPreferenceSettingsChanged(SharedPreferences sharedPreferences,String name){\n  Toast.makeText(this,\"preference with key \" + name + \" changed\",Toast.LENGTH_LONG).show();\n}\n", "nl": "callback for preference changes"}
{"code": "public static AztecCode encode(byte[] data){\n  return encode(data,DEFAULT_EC_PERCENT,DEFAULT_AZTEC_LAYERS);\n}\n", "nl": "Encodes the given binary content as an Aztec symbol"}
{"code": "void deleteNode(){\n  vertex.edges(Direction.BOTH).forEachRemaining(null);\n  mindmapsGraph.getConceptLog().removeConcept(this);\n  vertex.remove();\n  vertex=null;\n}\n", "nl": "Deletes the node and adds it neighbours for validation"}
{"code": "private final static byte hibyte(int val){\n  return (byte)(val >>> 8);\n}\n", "nl": "Given a 16 bit value (represented as an int), extract the high eight bits and return them"}
{"code": "public String toString(){\n  return \"CMUVoice\";\n}\n", "nl": "Converts this object to its String representation"}
{"code": "public boolean hasGroups(){\n  for (  String sampleName : sampleOrder) {\n    if (getGroupId(sampleName) != null)     return true;\n  }\n  return false;\n}\n", "nl": "are there any groups defined?"}
{"code": "public void clearGroups(){\n  groups.clear();\n}\n", "nl": "Clear all of the groups within this track"}
{"code": "public void leftClick(int delay) throws InterruptedException {\n  click(InputEvent.BUTTON1_MASK,delay);\n}\n", "nl": "Left click the mouse with"}
{"code": "private final void raise(IOException exception) throws JMSException {\n  JMSException error=new JMSException(exception.toString());\n  error.setLinkedException(exception);\n  throw error;\n}\n", "nl": "Helper to raise a JMSException when an I/O error occurs"}
{"code": "@Override public void close(){\n}\n", "nl": "close the array"}
{"code": "public CountModifiers(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private static Integer[] newZeroedIntegerArray(int size){\n  Integer[] result=new Integer[size];\n  for (int i=0; i < size; i++)   result[i]=0;\n  return result;\n}\n", "nl": "create new array with zero entries"}
{"code": "public Thread execute(OwnCloudClient client,FileDataStorageManager storageManager,OnRemoteOperationListener listener,Handler listenerHandler){\n  if (storageManager == null) {\n    throw new IllegalArgumentException(\"Trying to execute a sync operation \" + \"with a NULL storage manager\");\n  }\n  mStorageManager=storageManager;\n  return super.execute(client,listener,listenerHandler);\n}\n", "nl": "Asynchronously executes the remote operation"}
{"code": "public Builder maxColumn(String... columns){\n  return add(ReduceOp.Max,columns);\n}\n", "nl": "Reduce the specified columns by taking the maximum value"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAirportProperties && getIcao().equals(((AirMapAirportProperties)o).getIcao());\n}\n", "nl": "Comparison based on ICAO"}
{"code": "public double magnitude(){\n  return Math.sqrt(w * w + x * x + y * y + z * z);\n}\n", "nl": "Also called the norm"}
{"code": "public final void seek(final long offset){\n  try {\n    bs.seek(offset);\n  }\n catch (  IOException e) {\n    System.err.println(\"Seek failed\" + e);\n  }\n}\n", "nl": "Seek the pointer to <code>offset</code>"}
{"code": "public Builder cacheInMemory(boolean cacheInMemory){\n  this.cacheInMemory=cacheInMemory;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached in memory"}
{"code": "public static boolean isBeforeToday(Calendar _calendar){\n  return _calendar.before(Calendar.getInstance());\n}\n", "nl": "Allows to know if a given calendar instance is set before today"}
{"code": "public static String execute(String command,String cwd){\n  return execute(command,new File(cwd));\n}\n", "nl": "Execute a command in a specific directory"}
{"code": "public MessagesGetChatUsersQueryWithChatIdsFields(VkApiClient client,UserActor actor,List<Integer> chatIds,UserField... fields){\n  super(client,\"messages.getChatUsers\",GetChatUsersChatIdsFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void toAllInRadius(int dimension,Vec3d pos,double radius){\n  toAllInRadius(OpenModLoader.getSidedHandler().getServer().worldServerForDimension(dimension),pos,radius);\n}\n", "nl": "Sends this packet to all the players in the dimension within the radius"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public DefaultJsonFeeder(Charset charset,int capacity){\n  byteBuf=ByteBuffer.allocate(capacity);\n  charBuf=CharBuffer.allocate(capacity * 2);\n  charBuf.limit(0);\n  decoder=charset.newDecoder();\n}\n", "nl": "Constructs a feeder"}
{"code": "public AppsDeleteAppRequestsQuery(VkApiClient client,UserActor actor){\n  super(client,\"apps.deleteAppRequests\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0,0.5,1};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "Stream<Concept> insertAll(Map<String,Concept> results){\n  concepts.clear();\n  concepts.putAll(new HashMap<>(results));\n  return vars.stream().map(null);\n}\n", "nl": "Insert all the Vars"}
{"code": "public static <T>T make(Class<T> shieldClass,RxJava2ObsHub rxJava2ObsHub){\n  return inst.make(shieldClass,rxJava2ObsHub,RxJava2ObsHub.class);\n}\n", "nl": "Helper static method to generate Shield Instances"}
{"code": "public MarketRemoveFromAlbumQuery removeFromAlbum(UserActor actor,int ownerId,int itemId,int... albumIds){\n  return new MarketRemoveFromAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);\n}\n", "nl": "Removes an item from one or multiple collections"}
{"code": "public static void syncNetworkFormatting2Summary(ClusterViewer clusterViewer,DataTable megan4Table){\n  System.err.println(\"syncNetworkFormatting2Summary(): not implemented\");\n}\n", "nl": "sync network formatting to summary"}
{"code": "public NGramDocumentComparatorAgent(){\n  super();\n}\n", "nl": "Creates a new instance of NGramDocumentComparatorAgent"}
{"code": "public ScrollPaneAdjuster(JScrollPane scrollPane){\n  this(scrollPane,null);\n}\n", "nl": "construct object and \"remember\" how scrollpane is currently centered around middle of screen"}
{"code": "protected void jimplifyStatic(DexBody body){\n  invocation=Jimple.v().newStaticInvokeExpr(getStaticSootMethodRef(),buildParameters(body,true));\n  body.setDanglingInstruction(this);\n}\n", "nl": "Executes the \"jimplify\" operation for a static invocation"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void syncImmediately(Context context){\n  Bundle bundle=new Bundle();\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);\n  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.data_provider_authority),bundle);\n}\n", "nl": "Helper method to have the sync adapter sync immediately"}
{"code": "public static WxNewsMediaResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxNewsMediaResult.class);\n}\n", "nl": "json --> obj"}
{"code": "public boolean isGlobalFindable(){\n  return true;\n}\n", "nl": "is a global find possible?"}
{"code": "@DELETE @Path(\"/{experimentID}\") @ApiOperation(value=\"Removes a favorite.\",response=Response.class,httpMethod=\"DELETE\",protocols=\"https\") @Timed(name=\"deleteFavorite\") public Response deleteFavorite(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authHeader,@PathParam(\"experimentID\") @ApiParam(value=\"Experiment ID\") final Experiment.ID experimentID){\n  UserInfo.Username userName=authorization.getUser(authHeader);\n  List<Experiment.ID> favoriteList=favorites.deleteFavorite(userName,experimentID);\n  return httpHeader.headers(Response.Status.OK).entity(prepareResponseEntity(favoriteList)).build();\n}\n", "nl": "Deletes a favorite"}
{"code": "public void reset(){\n  isRender=false;\n  fractionValue=-1;\n  radiusSize=0;\n  originalColorValue=0;\n}\n", "nl": "Reset all data of this shape ripple entries"}
{"code": "private LayoutMetadata(){\n}\n", "nl": "Utility class, do not create instances"}
{"code": "public void clear(){\n  final DefaultTreeModel model=(DefaultTreeModel)dataTree.getModel();\n  for (  NodeBase root : classification2RootNode.values()) {\n    root.removeAllChildren();\n    model.nodeStructureChanged(root);\n  }\n}\n", "nl": "erase the tree"}
{"code": "public GameTimeUpdater(GameTime time){\n  this.time=time;\n}\n", "nl": "Constructs GameTimeUpdater to update the given GameTime"}
{"code": "private OtherText copy(OtherText otherText){\n  if (otherText == null)   return null;\n  OtherTextImpl copy=new OtherTextImpl();\n  copy.setTarget(otherText.getTarget());\n  copy.setText(copy(otherText.getText()));\n  return copy;\n}\n", "nl": "Method exists in DuplicatingStyleVisitor but is marked private"}
{"code": "public static String[] nullToBlank(final String[] stringArray){\n  String[] result=stringArray;\n  if (stringArray == null) {\n    result=new String[]{};\n  }\n  return result;\n}\n", "nl": "when string[] is null return blank array"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "void addLogEntry(Collection<LogEntry> browserLogEntries){\n  logEntries.addAll(browserLogEntries);\n}\n", "nl": "Adds collection of log entries"}
{"code": "public void cleanPatchByVersion(File patchFile){\n  if (patchDirectory == null || patchFile == null || !patchFile.exists()) {\n    return;\n  }\n  String versionName=SharePatchFileUtil.getPatchVersionDirectory(SharePatchFileUtil.getMD5(patchFile));\n  cleanPatchByVersion(versionName);\n}\n", "nl": "try delete the temp version files"}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public VideoGetCommentsQueryWithExtended sort(VideoGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public static String formatPercentage(double percentage){\n  return percentageDecimalFormat.format(percentage);\n}\n", "nl": "Formats a double representing a percentage into a string"}
{"code": "public static ChannelBuilder create(String name){\n  if (exists(name))   throw new IllegalArgumentException(String.format(\"Channel %s already exists\",name));\n  return new ChannelBuilder(name);\n}\n", "nl": "Creates a new channel builder"}
{"code": "public EigenvalueDecomposition eig(){\n  return new EigenvalueDecomposition(this);\n}\n", "nl": "Eigenvalue Decomposition"}
{"code": "private static File createReserveDiskCacheDir(Context context){\n  File cacheDir=StorageUtils.getCacheDirectory(context,false);\n  File individualDir=new File(cacheDir,\"uil-images\");\n  if (individualDir.exists() || individualDir.mkdir()) {\n    cacheDir=individualDir;\n  }\n  return cacheDir;\n}\n", "nl": "Creates reserve disk cache folder which will be used if primary disk cache folder becomes unavailable"}
{"code": "public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {\n  Document document=builder.parse(xmlFile);\n  return (parseConfiguration(document));\n}\n", "nl": "Parse an XML Configuration from a File"}
{"code": "public void allow(PermissionFlag flag){\n  generalPermissions.remove(flag);\n}\n", "nl": "Changes the default permission for a flag, will not affect direct permissions and restrictions"}
{"code": "private static ExternalSystem resetBasicFields(ExternalSystem input){\n  input.setUsername(null);\n  input.setPassword(null);\n  return input;\n}\n", "nl": "Reset BASIC authentication fields for external system entity"}
{"code": "public DividerItemDecoration(Context context,int resId){\n  mDivider=ContextCompat.getDrawable(context,resId);\n}\n", "nl": "Custom divider will be used"}
{"code": "@Override public long addUserRole(UserRole userRole){\n  return sessionTemplate.insert(NAMESPACE + \".addUserRole\",userRole);\n}\n", "nl": "Add new user role mapping"}
{"code": "protected LuaObject(LuaState L,int index){\nsynchronized (L) {\n    this.L=L;\n    registerValue(index);\n  }\n}\n", "nl": "Creates a reference to an object in the given index of the stack"}
{"code": "public void resume(){\n}\n", "nl": "Resumes audio output"}
{"code": "public void clearMemoryCache(){\n  checkConfiguration();\n  configuration.memoryCache.clear();\n}\n", "nl": "Clears memory cache"}
{"code": "public void showLoadingDialog(){\n  LoadingDialog loading=new LoadingDialog(getResources().getString(R.string.log_progress_dialog_text));\n  FragmentManager fm=getSupportFragmentManager();\n  FragmentTransaction ft=fm.beginTransaction();\n  loading.show(ft,DIALOG_WAIT_TAG);\n}\n", "nl": "Show loading dialog"}
{"code": "public static boolean isAccountExpired(Account account){\n  AccountTime accountTime=account.getAccountTime();\n  return accountTime != null && accountTime.getExpirationTime() != null && accountTime.getExpirationTime().getTime() < System.currentTimeMillis();\n}\n", "nl": "Checks if account is already expired or not"}
{"code": "public IDBPersistenceException(final String msg,final int committed){\n  super(msg);\n  this.committed=committed;\n}\n", "nl": "Creates an exception with a detailed message and it indicates the number of objects that had been already committed"}
{"code": "private void updateLimitedRanks(){\n  updateAllRanksForRace(Race.ASMODIANS,AbyssRankEnum.GRADE9_SOLDIER.getRequiredAp(),RankingConfig.TOP_RANKING_MAX_OFFLINE_DAYS);\n  updateAllRanksForRace(Race.ELYOS,AbyssRankEnum.GRADE9_SOLDIER.getRequiredAp(),RankingConfig.TOP_RANKING_MAX_OFFLINE_DAYS);\n}\n", "nl": "Update player ranks based on quota for all players (online/offline)"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public boolean isSetSample(){\n  return __isset_bit_vector.get(__SAMPLE_ISSET_ID);\n}\n", "nl": "Returns true if field sample is set (has been assigned a value) and false otherwise"}
{"code": "public WallEditCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"wall.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void resetNodePool(){\n  ((SchemaParsingConfig)config).resetNodePool();\n}\n", "nl": "ResetNodePool on SchemaParsingConfig"}
{"code": "public double len(){\n  return Math.sqrt(x * x + y * y);\n}\n", "nl": "len of thie Math_Vector root(x^2+y^2)"}
{"code": "public static ToolbarTapTarget forToolbarNavigationIcon(android.widget.Toolbar toolbar,CharSequence title){\n  return forToolbarNavigationIcon(toolbar,title,null);\n}\n", "nl": "Return a tap target for the navigation button (back, up, etc) from the given toolbar"}
{"code": "public static DefaultColumnEntity of(String name,Column... columns){\n  if (columns.length == 0) {\n    return new DefaultColumnEntity(name);\n  }\n  return of(name,Arrays.asList(columns));\n}\n", "nl": "Creates a column family instance"}
{"code": "public void updateView(){\n  dir.execute(\"update reinduce=true;select nodes=previous;\",dir.getMainViewer().getCommandManager());\n}\n", "nl": "something has been changed or selected, rescan view"}
{"code": "public PhotosRestoreQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AudioEditQuery(VkApiClient client,UserActor actor,int ownerId,int audioId){\n  super(client,\"audio.edit\",Integer.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  audioId(audioId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + JensenShannonDivergence.SqrtJensenShannonDivergence + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public NewsfeedAddBanQuery groupIds(List<Integer> value){\n  return unsafeParam(\"group_ids\",value);\n}\n", "nl": "Set group ids"}
{"code": "public Expression whenCondition(Expression exp,Value val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a when condidional clause"}
{"code": "public static Map<String,Object> sendOrderCompleteNotification(DispatchContext ctx,Map<String,? extends Object> context){\n  return sendOrderNotificationScreen(ctx,context,\"PRDS_ODR_COMPLETE\");\n}\n", "nl": "Service to email a customer with order changes"}
{"code": "private static int hashOf(final int key){\n  final int h=key ^ ((key >>> 20) ^ (key >>> 12));\n  return h ^ (h >>> 7) ^ (h >>> 4);\n}\n", "nl": "Compute the hash value of a key"}
{"code": "public static void pickImage(Context context,Fragment fragment){\n  pickImage(context,fragment,REQUEST_PICK);\n}\n", "nl": "Pick image from a Fragment"}
{"code": "public void sendRestorePasswordEmail(final String subject,final String[] recipients,final String url,final String login){\n  MimeMessagePreparator preparator=null;\n  this.send(preparator);\n}\n", "nl": "Restore password email"}
{"code": "public boolean isValid(Date startDate,Date date){\n  return isValid(startDate.getTime(),date.getTime());\n}\n", "nl": "Tests the date to see if it falls within the rules"}
{"code": "public AdsGetTargetingStatsQuery adFormat(Integer value){\n  return unsafeParam(\"ad_format\",value);\n}\n", "nl": "Set ad format"}
{"code": "public static byte[] drawableToByte(Drawable d){\n  return bitmapToByte(drawableToBitmap(d));\n}\n", "nl": "convert Drawable to byte array"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (fileName.startsWith(\"!!!\"))   return true;\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"BLASTN\");\n}\n", "nl": "is file acceptable?"}
{"code": "private static short rangeCheck(long value) throws NumberFormatException {\n  if (value < MIN_VALUE || value > MAX_VALUE) {\n    throw new NumberFormatException(\"Value is out of range : \" + value);\n  }\n  return (short)value;\n}\n", "nl": "Throw exception if value out of range (long version)"}
{"code": "protected void showIndeterminate(final CharSequence message){\n  dismissProgress();\n  progress=new MaterialDialog.Builder(context).content(message).progress(true,0).build();\n  progress.show();\n}\n", "nl": "Show indeterminate progress dialog with given message"}
{"code": "public VideoSaveQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.save\",SaveResult.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener){\n  preferences.registerOnSharedPreferenceChangeListener(listener);\n}\n", "nl": "Register SharedPreferences change listener"}
{"code": "public MessagesGetHistoryAttachmentsQuery startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n", "nl": "Set start from"}
{"code": "public static void updateAircraft(AirMapAircraft aircraft,@Nullable AirMapCallback<AirMapAircraft> callback){\n  PilotService.updateAircraft(aircraft,callback);\n}\n", "nl": "Update the nickname of the authenticated pilot's aircraft"}
{"code": "public MarketCreateCommentQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void startPenaltySkill(){\n  int penaltySkill=skillTemplate.getPenaltySkillId();\n  if (penaltySkill == 0) {\n    return;\n  }\n  SkillEngine.getInstance().applyEffectDirectly(penaltySkill,firstTarget,effector,0);\n}\n", "nl": "Penalty success skill"}
{"code": "public void normal(){\n  mHintView.setVisibility(View.VISIBLE);\n  mProgressBar.setVisibility(View.GONE);\n}\n", "nl": "normal status"}
{"code": "protected void assertClose(String msg,Fraction[] m,Fraction[] n,double tolerance){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors not same length\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i].doubleValue(),n[i].doubleValue(),tolerance);\n  }\n}\n", "nl": "verifies that two vectors are close (sup norm)"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private String i18n(int key,Object... args){\n  return getContext().getString(key,args);\n}\n", "nl": "Shorthand translation"}
{"code": "public void click(int mask,Point p) throws InterruptedException {\n  click(mask,p.x,p.y);\n}\n", "nl": "Click mouse at a point"}
{"code": "public int download_file1(String file_id,String local_filename) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file1(file_id,file_offset,download_bytes,local_filename);\n}\n", "nl": "download file from storage server"}
{"code": "public static DateTimeUnit fromJdkCalendar(java.util.Calendar calendar){\n  return fromJodaDateTime(new DateTime(calendar));\n}\n", "nl": "Converts from JDK Calendar to DateUnit"}
{"code": "private void initLoadMoreData(){\n  for (int i=0; i < 2; i++) {\n    List<String> url=new ArrayList<>();\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_5.jpg\");\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_4.jpg\");\n    mLists.add(url);\n  }\n}\n", "nl": "init Load More Data"}
{"code": "public boolean isInBoundsX(float x){\n  return (isInBoundsLeft(x) && isInBoundsRight(x));\n}\n", "nl": "BELOW METHODS FOR BOUNDS CHECK"}
{"code": "public Point2D convertWindowToReference(Point2D apt){\n  if (scrollBackReferenceRect == null)   return null;\n else   return new Point2D.Double((apt.getX() - scrollBackReferenceRect.getX()) / scrollBackReferenceRect.getWidth(),(apt.getY() - scrollBackReferenceRect.getY()) / scrollBackReferenceRect.getHeight());\n}\n", "nl": "converts a point from window coordinates to reference coordinates"}
{"code": "public static Director newProject(){\n  return newProject(true);\n}\n", "nl": "gets a new director and makes the main viewer visible"}
{"code": "public static int calculateDeliveryControllerCount(int vmcount){\n  int itmp=0;\n  Float f=(vmcount / 2000.00F);\n  f=(float)Math.ceil(f);\n  f++;\n  itmp=f.intValue();\n  return itmp;\n}\n", "nl": "Calculate number of Delivery Controllers"}
{"code": "public static LineIterator toLineIterator(BufferedReader r){\n  return new BuffReadIter(r);\n}\n", "nl": "converts a BufferedReader to a line Iterator"}
{"code": "public boolean isAcontains(int taxon){\n  return A.get(taxon);\n}\n", "nl": "does A part contain taxon?"}
{"code": "public BoardGetCommentsQueryWithExtended sort(BoardGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public PagesGetQuery global(Boolean value){\n  return unsafeParam(\"global\",value);\n}\n", "nl": "Return information about a global wiki page"}
{"code": "public INDArray asRowVector(File f) throws IOException {\n  return asRowVector(ImageIO.read(f));\n}\n", "nl": "Convert a file to a row vector"}
{"code": "public static void sendBroadcast(Context context,String action){\n  sendBroadcast(context,action,null);\n}\n", "nl": "Sends a local broadcast using an intent with the action specified"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "@Override public boolean isSelected(T photo){\n  return selectedPhotos.contains(photo);\n}\n", "nl": "Indicates if the item at position where is selected"}
{"code": "public PhotosCreateAlbumQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean write(byte[] bytes,int offset,int size){\n  bytes=convert16To8Bits(bytes);\n  size/=2;\n  System.arraycopy(bytes,offset,outputData,curIndex,size);\n  curIndex+=size;\n  return true;\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "public void close() throws RemoteException {\n  if (_transactionManagerProvider != null)   _transactionManagerProvider.destroy();\n  _queryCache.clear();\n}\n", "nl": "Close QueryHandler resources"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public void pathValueToPixel(Path path){\n  path.transform(mMatrixValueToPx);\n  path.transform(mViewPortHandler.getMatrixTouch());\n  path.transform(mMatrixOffset);\n}\n", "nl": "transform a path with all the given matrices VERY IMPORTANT: keep order to value-touch-offset"}
{"code": "@Override public void characters(char[] chars,int start,int length) throws SAXException {\n  elementText.append(chars,start,length);\n}\n", "nl": "build current element text"}
{"code": "private void createItemsLayout(){\n  if (itemsLayout == null) {\n    itemsLayout=new LinearLayout(getContext());\n    itemsLayout.setOrientation(LinearLayout.VERTICAL);\n  }\n}\n", "nl": "Creates item layouts if necessary"}
{"code": "public NewsfeedGetCommentsQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isApplicable(){\n  return getViewer().getTabbedIndex() != ClusterViewer.MATRIX_TAB_INDEX;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@Override public boolean isFileModified(long fileTimeStamp,long endOffset){\n  boolean isFileModified=false;\n  if (getLastModifiedTime() > fileTimeStamp || getSize() > endOffset) {\n    isFileModified=true;\n  }\n  return isFileModified;\n}\n", "nl": "This method will be used to check whether a file has been modified or not"}
{"code": "public static void main(String[] args){\n  runShell(args,Version.VERSION,HISTORY_FILENAME,new GraqlClientImpl());\n}\n", "nl": "Run a Graql REPL"}
{"code": "public void addToEffectedController(){\n  if ((!addedToController) && (effected.getLifeStats() != null) && (!effected.getLifeStats().isAlreadyDead())) {\n    effected.getEffectController().addEffect(this);\n    addedToController=true;\n  }\n}\n", "nl": "Try to add this effect to effected controller"}
{"code": "@deprecated public Object clone(){\n  try {\n    return (StringCharacterIterator)super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new IllegalStateException();\n  }\n}\n", "nl": "/*    "}
{"code": "public AutoSummENGGui(){\n  initComponents();\n  loadSettings();\n}\n", "nl": "Creates new form AutoSummENGGui and loads its settings"}
{"code": "public GroupsJoinQuery(VkApiClient client,UserActor actor){\n  super(client,\"groups.join\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.isAllowNucleotides() && viewer.isShowAminoAcids();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean putInt(Context context,String key,int value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putInt(key,value);\n  return editor.commit();\n}\n", "nl": "put int preferences"}
{"code": "public XSObjectListImpl(XSObject[] array,int length){\n  fArray=array;\n  fLength=length;\n}\n", "nl": "Construct an XSObjectList implementation"}
{"code": "@Override protected void readImpl(){\n  name=readS();\n  message=readS();\n}\n", "nl": "Read message"}
{"code": "static boolean isSameColumn(ConstraintWidget a,ConstraintWidget b){\n  return Math.max(a.getX(),b.getX()) < Math.min(a.getX() + a.getWidth(),b.getX() + b.getWidth());\n}\n", "nl": "are the two widgets in the same vertical area"}
{"code": "public void validateData(List<BlogPostEntity> blogPostEntities){\n  if (blogPostEntities == null) {\n    throw new IllegalArgumentException(\"The list cannot be null\");\n  }\n}\n", "nl": "Validates the data"}
{"code": "public void requestInclusionStop(){\n  stopInclusionTimer();\n}\n", "nl": "Terminates inclusion or exclusion mode - which-ever is running"}
{"code": "protected MarketGetByIdQuery itemIds(String... value){\n  return unsafeParam(\"item_ids\",value);\n}\n", "nl": "Items ID"}
{"code": "public LikesIsLikedQuery(VkApiClient client,UserActor actor,LikesType type,int itemId){\n  super(client,\"likes.isLiked\",IsLikedResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Builder filter(Filter filter){\n  actionList.add(new DataAction(filter));\n  return this;\n}\n", "nl": "Add a filter operation to be executed after the previously-added operations have been executed"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set drawer=\" + ViewerBase.DiagramType.RoundedCladogram + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public URI[] locations(){\n  return new URI[0];\n}\n", "nl": "Locations of the splits"}
{"code": "private void initPrimaryOnlyComponents() throws SpaceComponentsInitializeException {\n  for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {\n    ISpaceComponentsHandler handler=iterator.next();\n    handler.initComponents(true);\n  }\n}\n", "nl": "Initialize primary-only space components"}
{"code": "public void showOverlapGraph(Director dir,ProgressListener progress) throws CanceledException {\n  final OverlapGraphViewer overlapGraphViewer=new OverlapGraphViewer(dir,overlapGraph,node2ReadNameMap,paths);\n  overlapGraphViewer.apply(progress);\n}\n", "nl": "show the overlap graph"}
{"code": "public boolean isApplicable(){\n  ParametersDialog viewer=(ParametersDialog)getParent();\n  return viewer != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public AdsDeleteCampaignsQuery(VkApiClient client,UserActor actor,int accountId,String ids){\n  super(client,\"ads.deleteCampaigns\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  ids(ids);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "void scale(double s){\n  Matrix3D tmp=new Matrix3D();\n  tmp.set(0,0,s);\n  tmp.set(1,1,s);\n  tmp.set(2,2,s);\n  preMultiply(tmp);\n}\n", "nl": "scale uniformly"}
{"code": "public JFileChooserTest(){\n  initComponents();\n  jMenu1.setEnabled(isEnable);\n}\n", "nl": "Creates new form JFileChooserTest"}
{"code": "@Override public String toString(){\n  return \"DummyFreeTTSVoice\";\n}\n", "nl": "Converts this object to a string"}
{"code": "public static ContextSet fromMap(Map<String,String> map){\n  if (map == null) {\n    throw new NullPointerException(\"map\");\n  }\n  MutableContextSet set=new MutableContextSet();\n  set.addAll(map);\n  return set.immutableCopy();\n}\n", "nl": "Creates a ContextSet from an existing map"}
{"code": "public static byte[] translate(byte[] sequence,byte[] alphabet,int offset,int length){\n  byte[] result=new byte[length];\n  for (int i=0; i < length; i++)   result[i]=alphabet[sequence[i + offset]];\n  return result;\n}\n", "nl": "decode sequence to nucleotides or amino acids"}
{"code": "static void addTextChangedListener(TextView textView,TextWatcher watcher){\n  textView.addTextChangedListener(watcher);\n}\n", "nl": "Default modifier for removing text change listener"}
{"code": "@Override public void subscribeByName(String regex,BaseTagListener listener) throws CacheSynchronizationException {\n  subscribeByName(new HashSet<>(Arrays.asList(new String[]{regex})),listener);\n}\n", "nl": "TODO: Call could be optimized by filtering out all strings without"}
{"code": "@Override public final void seek(final long offset){\n  try {\n    bs.seek(offset);\n  }\n catch (  IOException e) {\n    System.err.println(\"Seek failed\" + e);\n  }\n}\n", "nl": "Seek the pointer to <code>offset</code>"}
{"code": "public void notifyItemuseObservers(Item item){\n  notifyObservers(ObserverType.ITEMUSE,item);\n}\n", "nl": "notify that player used an item"}
{"code": "public WallGetByIdQueryWithExtended fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "private Value dereference(SoftReference<DoubleRef<Key,Value>> ref){\n  if (ref == null)   return null;\n  DoubleRef<Key,Value> doubleRef=ref.get();\n  return doubleRef == null ? null : doubleRef.getValue();\n}\n", "nl": "Extract the referenced value"}
{"code": "public SimpleTextCategory(String sName){\n  super();\n  Dictionary=new Dictionary(sName,30);\n  Dictionary.AddSubStrings=false;\n  Dictionary.RemoveSubStrings=false;\n  DocumentCount=0;\n  Name=sName;\n}\n", "nl": "Creates a new instance of INSECTWordCategory"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@deprecated public SimpleDateFormat(String pattern,DateFormatSymbols formatData,ULocale loc){\n  this(pattern,(DateFormatSymbols)formatData.clone(),null,null,loc,true,null);\n}\n", "nl": "/*     "}
{"code": "public boolean isInitialIfExistSearchActive(){\n  return _initialIfExistSearchActive;\n}\n", "nl": "is the initial if-exist search active ?"}
{"code": "@Override protected void onDestroy(){\n  super.onDestroy();\n  unregisterReceiver(receiver);\n  mBluetoothAdapter.disable();\n}\n", "nl": "Stop listening for Intents as soon as activity gets destroyed"}
{"code": "public GroupsEditQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n", "nl": "Community description"}
{"code": "public void stopWatch(){\n  _time=UNWATCHED;\n}\n", "nl": "Stop watching"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set useColors=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set show-insertions=\" + !isSelected() + \";apply;\");\n}\n", "nl": "action to be performed"}
{"code": "public void post(Object event){\n  mBusSubject.onNext(event);\n}\n", "nl": "Posts an object (usually an Event) to the bus"}
{"code": "protected OrdersGetAmountQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public static void cleanExternalCache(Context context){\n  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))   deleteFilesByDirectory(context.getExternalCacheDir());\n}\n", "nl": "Clear external cache"}
{"code": "public Response doPut(String url){\n  return doPut(url,null);\n}\n", "nl": "Does a HTTP PUT with an empty body"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.Unsorted.toString() + \";zoom axis=both what=fit;\");\n}\n", "nl": "action to be performed"}
{"code": "private void insertEntry(Entry e,long now){\n  e.calcRenew(now);\n  leases.put(e,e);\n}\n", "nl": "Calculate the preferred renew time, and put in the map"}
{"code": "public VideoSearchQuery filters(VideoSearchFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Set filters"}
{"code": "public MessagesGetChatUsersQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.getChatUsers\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "protected Record(ModelRecord modelRecord,Map<String,Object> fields){\n  if (modelRecord == null)   throw new IllegalArgumentException(\"Cannont create a Record with a null modelRecord parameter\");\n  this.recordName=modelRecord.name;\n  this.modelRecord=modelRecord;\n  this.fields=(fields == null ? new HashMap<String,Object>() : new HashMap<String,Object>(fields));\n}\n", "nl": "Creates new Record from existing Map"}
{"code": "public void increment(int i,int j){\n  matrix[i - 1][j - 1]++;\n  matrix[j - 1][i - 1]++;\n}\n", "nl": "increment the count"}
{"code": "public void stopDeceleration(){\n  mDecelerationAngularVelocity=0.f;\n}\n", "nl": "Sets the deceleration-angular-velocity to 0f"}
{"code": "public static String implementationVersion(){\n  return implementationVersion;\n}\n", "nl": "Implementation version"}
{"code": "public FriendsGetRequestsQueryWithNeedMutual suggested(Boolean value){\n  return unsafeParam(\"suggested\",value);\n}\n", "nl": "true - to return a list of suggested friends false - to return friend requests (default)"}
{"code": "public AdsGetSuggestionsQueryWithCities(VkApiClient client,UserActor actor,AdsGetSuggestionsSection section,String cities){\n  super(client,\"ads.getSuggestions\",Utils.buildParametrizedType(List.class,TargSuggestionsCities.class));\n  accessToken(actor.getAccessToken());\n  section(section);\n  cities(cities);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected AdsCheckLinkQuery linkType(AdsCheckLinkType value){\n  return unsafeParam(\"link_type\",value);\n}\n", "nl": "Object type"}
{"code": "public static ArrayList<String> matches(String text){\n  return matches(text,ALL);\n}\n", "nl": "It finds urls inside the text and return the matched ones"}
{"code": "public static <T>T readObjectFromFile(String path,Class<T> type,JavaSparkContext sc) throws IOException {\n  return readObjectFromFile(path,type,sc.sc());\n}\n", "nl": "Read an object from HDFS (or local) using default Java object serialization"}
{"code": "public byte[] download_file1(String file_id) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file1(file_id,file_offset,download_bytes);\n}\n", "nl": "download file from storage server"}
{"code": "private boolean lastEntry(){\n  return column.get(column.size() - 1);\n}\n", "nl": "Returns true if the last item added to the column is true and false otherwise"}
{"code": "int positionOfBookmarkId(BookmarkId id){\n  return positionOfItem(new Item(id));\n}\n", "nl": "Get the position in the list of a given bookmark folder id"}
{"code": "@Override public void schedule(Runnable childStatement){\n  Future<Void> submittedStatement=completionService.submit(childStatement,null);\n  tasks.add(submittedStatement);\n}\n", "nl": "Schedule a child statement to run"}
{"code": "@Override protected void readImpl(){\n  this.npcId=readD();\n}\n", "nl": "Nothing to do"}
{"code": "public synchronized void cancel(){\n}\n", "nl": "Cancels currently playing audio"}
{"code": "@Override public ListenableFuture<StatusResponse> statusMember(){\n  return this.futureStub.status(StatusRequest.getDefaultInstance());\n}\n", "nl": "get the status of one member"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "private boolean isRequestingSensorEventData(){\n  for (  Map.Entry<String,SensorDataRequest> sensorDataRequestEntry : sensorDataRequests.entrySet()) {\n    if (sensorDataRequestEntry.getValue().getEndTimestamp() == DataRequest.TIMESTAMP_NOT_SET) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns true if the app is requesting sensor data from the local or any connected device"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "private void saveInstantUploadVideoPathOnPreferences(){\n  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n  SharedPreferences.Editor editor=appPrefs.edit();\n  editor.putString(\"instant_video_upload_path\",mUploadVideoPath);\n  editor.commit();\n}\n", "nl": "Save the \"Instant Video Upload Path\" on preferences"}
{"code": "public void addTag(Tag t){\n  if (mTagList == null)   mTagList=new ArrayList<Tag>(1);\n  mTagList.add(t);\n}\n", "nl": "add tag <code>t</code> to this host"}
{"code": "public static final void emoteStartDancing2(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,133,0));\n}\n", "nl": "Npc starts dancing iu 2"}
{"code": "public ShapelessMaterialRecipe(Block output,Object... input){\n  this(new ItemStack(output),input);\n}\n", "nl": "Creates a new shapeless material recipe"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  ServicePanel servicePanel=((RemoteServiceBrowser)getViewer()).getServicePanel();\n  if (servicePanel != null) {\n    new Message(getViewer().getFrame(),servicePanel.getService().getInfo());\n  }\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.00500250166792,0.0502516792675,0.126589039921,0.256466471938,0.526802578289,34.5387763949,23.0258509299,18.4443972706,14.9786613678,11.5129254650};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "@Nullable public static PsiNamedElement findInScope(PsiElement element,String name){\n  PsiNamedElement[] resultHolder=new PsiNamedElement[1];\n  Processor<BuildElement> processor=null;\n  searchInScope(element,processor);\n  return resultHolder[0];\n}\n", "nl": "Walks up PSI tree of local file, checking PsiNamedElements"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  final ClusterViewer viewer=getViewer();\n  int max=viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(null).size();\n  np.matchIgnoreCase(\"set triplotSize=\");\n  int number=np.getInt(0,max);\n  np.matchIgnoreCase(\";\");\n  viewer.getPcoaTab().setTriplotSize(number);\n}\n", "nl": "parses the given command and executes it"}
{"code": "protected void writePixels() throws IOException {\n  Encoder encoder=new Encoder(width,height,indexedPixels,colorDepth);\n  encoder.encode(out);\n}\n", "nl": "Encodes and writes pixel data"}
{"code": "public void addRepurchaseItems(Player player,List<Item> items){\n  repurchaseItems.putAll(player.getObjectId(),items);\n}\n", "nl": "Save items for repurchase for this player"}
{"code": "public void prune(double dMinCoexistenceImportance){\n}\n", "nl": "TODO: Document"}
{"code": "protected TimelineReader loadAudioTimeline(String fileName) throws IOException, MaryConfigurationException {\n  return new TimelineReader(fileName);\n}\n", "nl": "Load audio timeline from file"}
{"code": "public GroupsGetRequestsQueryWithFields(VkApiClient client,UserActor actor,int groupId,List<UserField> fields){\n  super(client,\"groups.getRequests\",GetRequestsFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static String decorate(String name,String formatString,Map bindings){\n  IDecoratorComponent[][] format=compileFormatString(formatString);\n  String[] prefixSuffix=decorate(format,bindings);\n  return prefixSuffix[0] + name + prefixSuffix[1];\n}\n", "nl": "add a prefix and a suffix to name depending on format string and the bindings"}
{"code": "public boolean isSetMessageType(){\n  return __isset_bit_vector.get(__MESSAGETYPE_ISSET_ID);\n}\n", "nl": "Returns true if field messageType is set (has been assigned a value) and false otherwise"}
{"code": "public void java_lang_reflect_Array_multiNewArray(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  throw new NativeMethodNotSupportedException(method);\n}\n", "nl": "Treat this method as"}
{"code": "public Matrix timesEquals(double s){\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      A[i][j]=s * A[i][j];\n    }\n  }\n  return this;\n}\n", "nl": "Multiply a matrix by a scalar in place, A = s*A"}
{"code": "public NotificationsGetQuery filters(List<NotificationsGetFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Type of notifications to return"}
{"code": "public void removeAllUpdateListeners(){\n  listeners.clear();\n}\n", "nl": "Removes all previously registered <code>DataTagUpdateListener</code>"}
{"code": "private void shortPulling(ClientSession client,Map<String,String> configItems,HttpServletResponse resp){\n  sendUpdatedConfigsIfPossible(client.getAppId(),configItems,resp);\n}\n", "nl": "Do short pulling"}
{"code": "public void saveEntity(final ProxyEntity proxyEntity){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.saveOrUpdate(proxyEntity);\n  transaction.commit();\n  session.close();\n}\n", "nl": "Save the details of a submitted proxy entity"}
{"code": "private void collapseGroup(ExpandableListPosition listPosition){\n  expandableList.expandedGroupIndexes.put(listPosition.groupPos,false);\n  if (listener != null) {\n    listener.onGroupCollapsed(expandableList.getFlattenedGroupIndex(listPosition) + 1,expandableList.groups.get(listPosition.groupPos).getItemCount());\n  }\n}\n", "nl": "Collapse a group"}
{"code": "public static boolean putBoolean(Context context,String key,boolean value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putBoolean(key,value);\n  return editor.commit();\n}\n", "nl": "put boolean preferences"}
{"code": "public static void addLineTag(soot.tagkit.Host host,int sLine,int eLine){\n  host.addTag(new soot.tagkit.SourceLineNumberTag(sLine,eLine));\n}\n", "nl": "Line Tag Adder"}
{"code": "public MarketEditQuery photoIds(List<Integer> value){\n  return unsafeParam(\"photo_ids\",value);\n}\n", "nl": "Ids of additional photos"}
{"code": "public void writeInt(int a) throws IOException {\n  io.write((byte)(a >> 24));\n  io.write((byte)(a >> 16));\n  io.write((byte)(a >> 8));\n  io.write((byte)(a));\n}\n", "nl": "write an int"}
{"code": "public SessionKey(Account acc){\n  this.accountId=acc.getId();\n  this.loginOk=Rnd.nextInt();\n  this.playOk1=Rnd.nextInt();\n  this.playOk2=Rnd.nextInt();\n}\n", "nl": "Create new SesionKey for this Account"}
{"code": "final public void redirect(String url){\n  resp.setHeader(\"Location\",url);\n  setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);\n}\n", "nl": "response and redirect to the url"}
{"code": "public <T>void send(T message,Object token){\n  sendToTargetOrType(message,null,token);\n}\n", "nl": "send the message type of T, all receiver can receive the message"}
{"code": "public static LocalResourceStatus fromBytes(byte[] bytes) throws SVNException {\n  return ((bytes != null) && (bytes.length > 0)) ? new LocalResourceStatus(bytes) : null;\n}\n", "nl": "Factory method created instance from byte[]"}
{"code": "public T proxy(){\n  eventDrivenFactoryBean.afterPropertiesSet();\n  return (T)eventDrivenFactoryBean.getObject();\n}\n", "nl": "Creates a new event driven proxy of type T"}
{"code": "public static boolean isCreditCard(String stPassed){\n  if (isEmpty(stPassed))   return defaultEmptyOK;\n  String st=stripCharsInBag(stPassed,creditCardDelimiters);\n  if (!isInteger(st))   return false;\n  if (st.length() > 19)   return false;\n  return sumIsMod10(getLuhnSum(st));\n}\n", "nl": "Checks credit card number with Luhn Mod-10 test"}
{"code": "public boolean isSetClientIp(){\n  return this.clientIp != null;\n}\n", "nl": "Returns true if field clientIp is set (has been assigned a value) and false otherwise"}
{"code": "public void onStopMove(){\n  notifyAIOnMove();\n}\n", "nl": "Perform tasks on Creature stop move"}
{"code": "public void merge(StringMap<T> toMerge){\n  toMerge.forEach(null);\n}\n", "nl": "Copies all entries from the provided ObservableMap into this map"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public Object findFeature(Item item){\n  return path.findFeature(item);\n}\n", "nl": "Find the feature associated with the given item"}
{"code": "public static CommandResult execCommand(List<String> commands,boolean isRoot){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);\n}\n", "nl": "execute shell commands, default return result msg"}
{"code": "private void parseExtras(Bundle savedInstanceState){\n  if (getIntent() != null) {\n    mTitle=getIntent().getStringExtra(EXTRA_TITLE);\n  }\n  if (savedInstanceState != null) {\n    mTitle=savedInstanceState.getString(EXTRA_TITLE);\n  }\n}\n", "nl": "Helper Methods"}
{"code": "public static boolean isParcelable(Class clazz){\n  return Parcelable.class.isAssignableFrom(clazz);\n}\n", "nl": "Is the class parcelable?"}
{"code": "public static int computeHash(byte[] key,int mask){\n  return Math.abs(MurmurHash3.murmurhash3x8632(key,0,key.length,666) & mask);\n}\n", "nl": "compute the hash value for a given key"}
{"code": "public void moveBy(int amountX,int amountY){\n  Point p=getPosition();\n  move(p.x + amountX,p.y + amountY);\n}\n", "nl": "Move mouse by a certain amount"}
{"code": "public AccountGetActiveOffersQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Set count"}
{"code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n", "nl": "Apply the size behaviour"}
{"code": "public int size(){\n  return players.size();\n}\n", "nl": "Returns the number of players that are on this account"}
{"code": "private int findCurrentCenterViewPos(){\n  return getPosition(findCurrentCenterView());\n}\n", "nl": "Find position of view in the middle of screen"}
{"code": "public XSNamedMap4Types(String[] namespaces,SymbolHash[] maps,int num,short type){\n  super(namespaces,maps,num);\n  fType=type;\n}\n", "nl": "Construct an XSNamedMap implementation for a list of namespaces"}
{"code": "public boolean isApplicable(){\n  return ProjectManager.getNumberOfProjects() == 1 && ((Director)ProjectManager.getProjects().get(0)).getDocument().getNumberOfSamples() == 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public AppsGetCatalogQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public GotoLineDialog(JTextComponent text){\n  super(ActionUtils.getFrameFor(text),false);\n  initComponents();\n  this.text=text;\n  setLocationRelativeTo(text.getRootPane());\n}\n", "nl": "Creates new form GotoLineDialog"}
{"code": "public WallGetCommentsQueryWithExtended allowGroupComments(Boolean value){\n  return unsafeParam(\"allow_group_comments\",value);\n}\n", "nl": "Set allow group comments"}
{"code": "public AppsGetCatalogQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Set name case"}
{"code": "protected void notifyDataInvalidatedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onInvalidated();\n    }\n  }\n}\n", "nl": "Notifies observers about invalidating data"}
{"code": "public void freeSLHolder(IStoredListIterator<T> slh){\n  if (slh != null)   slh.release();\n}\n", "nl": "this method is called  by outside scan that want to quit the scan and return the slholder to the factory"}
{"code": "public void notifyAttackedObservers(Creature creature){\n  notifyObservers(ObserverType.ATTACKED,creature);\n}\n", "nl": "notify that creature attacked"}
{"code": "public void clear(){\n  _objMap.clear();\n  _objIdMap.clear();\n}\n", "nl": "Clears the entire object registery"}
{"code": "@Override public int[] makeInverseCumulativeTestValues(){\n  return new int[]{1,1,1,1,1,1,2,10,10,10,9,8,10};\n}\n", "nl": "Creates the default inverse cumulative probability density test expected values"}
{"code": "public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n", "nl": "Adds wheel scrolling listener"}
{"code": "public static void main(String[] args){\n  arguments=args;\n  JBCOViewer inst=new JBCOViewer();\n  inst.setVisible(true);\n}\n", "nl": "Auto-generated main method to display this JFrame"}
{"code": "public void printTable(ScoutWidget[] list){\n  printCenterTable(list);\n  printBaseTable(list);\n}\n", "nl": "Print the Tables"}
{"code": "public static void errorNotification(final String message){\n  showNotification(message,NotificationType.ERROR);\n}\n", "nl": "show a error Notification"}
{"code": "public boolean addSubEquipmentId(final Long subEquipmentId){\n  if (subEquipmentId != null && subEquipmentId > 0) {\n    return subEquipmentIds.add(subEquipmentId);\n  }\n  return false;\n}\n", "nl": "Adds the sub equipment id as dependency to this tag"}
{"code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private boolean checkIfBatchIsProcessedCompletely(BatchResult batch){\n  if (counter < batch.getSize()) {\n    return false;\n  }\n else {\n    return true;\n  }\n}\n", "nl": "To check if the batch is processed completely"}
{"code": "boolean verifyTrust(SecurityContext securityContext){\n  return (securityContext instanceof TrustedSecurityContext);\n}\n", "nl": "Verifies the security context has a valid trust"}
{"code": "private void drawSolidLineProgress(Canvas canvas){\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f,false,mProgressBackgroundPaint);\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f * getProgress() / getMax(),false,mProgressPaint);\n}\n", "nl": "Just draw arc"}
{"code": "private void showLocalVideo(String localPath){\n  Intent intent=new Intent(Intent.ACTION_VIEW);\n  intent.setDataAndType(Uri.fromFile(new File(localPath)),\"video/mp4\");\n  startActivity(intent);\n  finish();\n}\n", "nl": "show local video"}
{"code": "public final void log(){\n  TAGLOGGER.info(this.toString());\n}\n", "nl": "logs the FilteredDataTag in the appropriate log file"}
{"code": "public static boolean isScreenW(int widthDp){\n  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();\n  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;\n  return screenWidth >= widthDp;\n}\n", "nl": "Return true if the width in DP of the device is equal or greater than the given value"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  getViewer().selectComponent(getViewer().getPcoaTab());\n}\n", "nl": "action to be performed"}
{"code": "public String toString(){\n  return \"CMUTimeVoice\";\n}\n", "nl": "Converts this object to a string"}
{"code": "public static RemoveFilesDialogFragment newInstance(OCFile file){\n  ArrayList<OCFile> list=new ArrayList<>();\n  list.add(file);\n  return newInstance(list);\n}\n", "nl": "Convenience factory method to create new RemoveFilesDialogFragment instances for a single file"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "public boolean isPressed(float xClick,float yClick){\n  return new Rectangle(x,y,width,height).overlaps(new Rectangle(xClick,yClick,1,1));\n}\n", "nl": "Test if the x and y coordinates from user input are inside of the bounds of the button"}
{"code": "@ReactMethod public void disableAutoRefresh(String placementId){\n  mAdsManagers.get(placementId).disableAutoRefresh();\n}\n", "nl": "Disables auto refresh"}
{"code": "@Override protected void onSaveState(Bundle outState){\n  super.onSaveState(outState);\n}\n", "nl": "Save Fragment's State here"}
{"code": "public void onDelete(){\n  if (getOwner().isInWorld()) {\n    this.onDespawn();\n    this.delete();\n  }\n}\n", "nl": "This method should be called to make despawn of VisibleObject and delete it from the world"}
{"code": "public MarketSearchQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset based on a first matching item to get a certain items subset"}
{"code": "public boolean exists(String key,boolean ignoreCase){\n  if (ignoreCase)   key=key.toLowerCase();\n  for (  String existKey : this.getKeys(true)) {\n    if (ignoreCase)     existKey=existKey.toLowerCase();\n    if (existKey.equals(key))     return true;\n  }\n  return false;\n}\n", "nl": "Check existence of config section element"}
{"code": "public static ExpectedCondition<Boolean> pageUrlContains(final String url){\n  return null;\n}\n", "nl": "Check if current url contains provided url part"}
{"code": "public ElementType rootElementType(){\n  return theRoot;\n}\n", "nl": "Get the root element of this schema"}
{"code": "public static void addRouteCreator(RouteCreator creator){\n  RouteManager.INSTANCE.addCreator(creator);\n}\n", "nl": "set to create route rules"}
{"code": "public int size(){\n  return this.results == null ? 0 : this.results.size();\n}\n", "nl": "Gets the number of entries in this result object"}
{"code": "public boolean isAITicTacToc(){\n  return isAITicTacToc;\n}\n", "nl": "get the state about AI of TicTacToc"}
{"code": "public static List<JsonNode> listToJson(Collection<? extends IJsonable> collection){\n  List<JsonNode> jsonList=new LinkedList<>();\n  for (  IJsonable item : collection) {\n    jsonList.add(item.jsonize());\n  }\n  return jsonList;\n}\n", "nl": "Convert a collection of jsonable objects to list of json objects"}
{"code": "public TapTarget drawShadow(boolean draw){\n  this.drawShadow=draw;\n  return this;\n}\n", "nl": "Specify whether or not to draw a drop shadow around the outer circle"}
{"code": "public static void resetContext(){\n  invocationContexts.get().getContext().reset();\n}\n", "nl": "Resets the current context"}
{"code": "public WishlistCursor queryWishlists(){\n  return mHelper.queryWishlists();\n}\n", "nl": "WISHLIST QUERIES"}
{"code": "public AnnouncementTimerThread(){\n  super(\"GS-multicast-announcement-timer\");\n  setDaemon(true);\n}\n", "nl": "Create a daemon thread"}
{"code": "public int compare(Object o1,Object o2){\n  Field f1=(Field)o1;\n  Field f2=(Field)o2;\n  if (f1 == f2)   return 0;\n  if (f1.getDeclaringClass() == f2.getDeclaringClass())   return f1.getName().compareTo(f2.getName());\n  if (f1.getDeclaringClass().isAssignableFrom(f2.getDeclaringClass()))   return -1;\n  return 1;\n}\n", "nl": "Super before subclass, alphabetical within a given class"}
{"code": "public RawFileAudioPlayer(String path) throws IOException {\n  this.path=path;\n  os=new BufferedOutputStream(new FileOutputStream(path));\n}\n", "nl": "Constructs a NullAudioPlayer"}
{"code": "public void removeInputProcessor(InputProcessor ip){\n  processors.removeProcessor(ip);\n  Gdx.input.setInputProcessor(processors);\n}\n", "nl": "Remove an input processor"}
{"code": "public int pxToDp(@AndroidCoordinate int px){\n  return myConstraintModel.pxToDp(px);\n}\n", "nl": "Transform android pixels into Dp"}
{"code": "public boolean hasURLsForSelection(){\n  return getSelectedNodes().size() > 0;\n}\n", "nl": "does this viewer currently have any URLs for selected nodes?"}
{"code": "private static void forceSet(Object obj,Field f,Object val) throws IllegalAccessException {\n  f.setAccessible(true);\n  f.set(obj,val);\n}\n", "nl": "dalvik do not have security manager"}
{"code": "public PhotosSaveMessagesPhotoQuery server(Integer value){\n  return unsafeParam(\"server\",value);\n}\n", "nl": "Set server"}
{"code": "public void loading(){\n  mHintView.setVisibility(View.GONE);\n  mProgressBar.setVisibility(View.VISIBLE);\n}\n", "nl": "loading status"}
{"code": "static boolean isSameRow(ConstraintWidget a,ConstraintWidget b){\n  return Math.max(a.getY(),b.getY()) < Math.min(a.getY() + a.getHeight(),b.getY() + b.getHeight());\n}\n", "nl": "are the two widgets in the same horizontal area"}
{"code": "public ImageLoader(int height,int width,int channels,boolean centerCropIfNeeded){\n  this(height,width,channels);\n  this.centerCropIfNeeded=centerCropIfNeeded;\n}\n", "nl": "Instantiate an image with the given height and width"}
{"code": "public void actionPerformed(ActionEvent ev){\n  final Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),\"Choose fill color\",ProgramProperties.get(\"NodeFillColor\",Color.WHITE));\n  if (color != null) {\n    execute(\"set fillColor=\" + color.getRed() + \" \"+ color.getGreen()+ \" \"+ color.getBlue()+ \";\");\n    ProgramProperties.put(\"NodeFillColor\",color);\n  }\n}\n", "nl": "action to be performed"}
{"code": "public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {\n  String sDataString=utils.loadFileToStringWithNewlines(sFilename);\n  setDataString(sDataString);\n}\n", "nl": "Opens a text file and sets its contents as data string"}
{"code": "public boolean playWave(AudioPlayer player,Utterance utterance){\n  return playWaveSamples(player,utterance.getSpeakable(),getNumberOfSamples() * 2);\n}\n", "nl": "Synthesize a Wave  from this LPCResult"}
{"code": "public Call delete(String url,Callback callback){\n  Request request=new Builder().url(url).delete().build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n", "nl": "Make a DELETE call"}
{"code": "private boolean isMinimal(SimulationEvent event){\n  return minIndex == NULL || eventComparator.compare(event,eventList.get(minIndex)) < 0;\n}\n", "nl": "is event the first event in the calendar?"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public void close(){\n  if (this.apk != null)   this.apk.close();\n}\n", "nl": "Closes this apk file and all resources associated with it"}
{"code": "@Override public RecyclerView.LayoutParams generateDefaultLayoutParams(){\n  return new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);\n}\n", "nl": "Boilerplate to extend LayoutParams for tracking row/column of attached views"}
{"code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n", "nl": "make a SAM line"}
{"code": "public static boolean writeText(HttpServletResponse resp,Object msg){\n  return write(resp,\"text/plain\",msg);\n}\n", "nl": "write text data to response"}
{"code": "public void registerHandler(String handlerName,BridgeHandler handler){\n  if (handler != null) {\n    messageHandlers.put(handlerName,handler);\n  }\n}\n", "nl": "register handler,so that javascript can call it"}
{"code": "public static void write(String fileName,Table table) throws IOException {\n  write(fileName,table,null);\n}\n", "nl": "Writes the given table to a file with the given filename"}
{"code": "private static boolean viewNeedsPackage(String fqcn){\n  return !(fqcn.startsWith(ANDROID_WIDGET_PREFIX) || fqcn.startsWith(ANDROID_VIEW_PKG) || fqcn.startsWith(ANDROID_WEBKIT_PKG));\n}\n", "nl": "Returns true if views with the given fully qualified class name need to include their package in the layout XML tag"}
{"code": "public void clear(){\n  description=null;\n  table.clear();\n  sampleOrder.clear();\n  attributeOrder.clear();\n  attribute2type.clear();\n}\n", "nl": "erase the table"}
{"code": "public synchronized void recordStatistics(QueryStatistic statistic){\n  queryStatistics.add(statistic);\n}\n", "nl": "Below method will be used to add the statistics"}
{"code": "@Override public String toString(){\n  return String.format(\"(%d,%.3g)\",mX,mY);\n}\n", "nl": "For debugging only"}
{"code": "public static boolean putString(Context context,String key,String value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putString(key,value);\n  return editor.commit();\n}\n", "nl": "put string preferences"}
{"code": "public int findAll(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,true);\n}\n", "nl": "Selects all occurrences of text in document, subject to options and constraints of document type"}
{"code": "boolean casValue(Object cmp,Object val){\n  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);\n}\n", "nl": "compareAndSet value field"}
{"code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n", "nl": "make a SAM line"}
{"code": "public boolean canFindAll(){\n  return true;\n}\n", "nl": "does this searcher support find all?"}
{"code": "public TextHttpResponseHandler(){\n  this(DEFAULT_CHARSET);\n}\n", "nl": "Creates a new TextHttpResponseHandler"}
{"code": "public long value(int i){\n  return Array.getLong(values,i);\n}\n", "nl": "Returns the value at index i"}
{"code": "public String globalInfo(){\n  return \"InfoGainAttributeEval :\\n\\nEvaluates the worth of an attribute \" + \"by measuring the information gain with respect to the class.\\n\\n\" + \"InfoGain(Class,Attribute) = H(Class) - H(Class | Attribute).\\n\";\n}\n", "nl": "Returns a string describing this attribute evaluator"}
{"code": "public static void showBrand(Player player,int targetObjId,int brandId){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new ShowBrandEvent<PlayerGroup>(group,targetObjId,brandId));\n  }\n}\n", "nl": "Show specific mark on top of player"}
{"code": "public void die(){\n  getOwner().getLifeStats().reduceHp(getOwner().getLifeStats().getCurrentHp() + 1,getOwner());\n}\n", "nl": "Die by reducing HP to 0"}
{"code": "public void deactivatePage(String assetPath) throws IOException {\n  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(PATH_PROPERTY,assetPath).put(CMD_PROPERTY,DEACTIVATE).put(CHARSET_PROPERTY,UTF_8).build()),REPLICATE_URL,REPLICATION_STARTED_MESSAGE + assetPath);\n}\n", "nl": "Deactivates provided asset"}
{"code": "@deprecated public static boolean onCharacterBoundary(CharSequence s,int i){\n  return (i <= 0) || (i >= s.length()) || (!Character.isHighSurrogate(s.charAt(i - 1)))|| (!Character.isLowSurrogate(s.charAt(i)));\n}\n", "nl": "/*    "}
{"code": "private String trimReturnLine(String string){\n  return CharMatcher.anyOf(\"\\n\").trimFrom(string);\n}\n", "nl": "Trims the return line from the string"}
{"code": "public Collection<Var> migrate(){\n  Collection<Var> collection=new HashSet<>();\n  for (  Collection<Var> vars : this) {\n    collection.addAll(vars);\n  }\n  return collection;\n}\n", "nl": "Migrate a CSV schema into a Mindmaps ontology"}
{"code": "public int hashCode(){\n  int hashcode=this.operations[0].hashCode();\n  for (int i=1; i < operations.length; i++) {\n    hashcode^=operations[i].hashCode();\n  }\n  return hashcode;\n}\n", "nl": "the xor operation is used to ensure the order of operands does not impact the hashcode"}
{"code": "protected AccountChangePasswordQuery newPassword(String value){\n  return unsafeParam(\"new_password\",value);\n}\n", "nl": "New password that  will be set as a current"}
{"code": "public SM_QUEST_ACTION(int questId,boolean fake){\n  this.action=6;\n  this.questId=questId;\n  this.timer=0;\n  this.step=0;\n}\n", "nl": "Display Timer(4)"}
{"code": "public Math_Vector mul(double scalar){\n  this.x*=scalar;\n  this.y*=scalar;\n  return this;\n}\n", "nl": "mul the Math_Vector using scalar"}
{"code": "public double dot(Vector other){\n  return x * other.x + y * other.y;\n}\n", "nl": "dot product operator two vectors that are perpendicular have a dot product of 0"}
{"code": "public void transform(float a,float b,float c,float d,float e,float f){\n  mStrokeWidth*=Math.hypot(a + b,c + d);\n  Node.transform(a,b,c,d,e,f,mNode);\n}\n", "nl": "TODO: support rotation attribute for stroke width"}
{"code": "@Override public boolean isDynamicTimeDeadband(final SourceDataTag tag){\n  DataTagAddress address=tag.getAddress();\n  return (!address.isStaticTimedeadband() && this.equipmentConfiguration.isDynamicTimeDeadbandEnabled());\n}\n", "nl": "Checks if Dynamic Timedeadband can be appliyed or not"}
{"code": "@Override public int[] makeDensityTestPoints(){\n  return new int[]{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28};\n}\n", "nl": "Creates the default probability density test input values"}
{"code": "private void checkNoErrors(){\n  guiTest.robot().waitForIdle();\n  for (  Notification notification : EventLog.getLogModel(guiTest.ideFrame().getProject()).getNotifications()) {\n    assertThat(notification.getType()).isNotEqualTo(NotificationType.ERROR);\n  }\n}\n", "nl": "Checks that no errors are present in the event log"}
{"code": "protected void notifyScrollingListenersAboutStart(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingStarted(this);\n  }\n}\n", "nl": "Notifies listeners about starting scrolling"}
{"code": "protected CassandraDriver newDriver(final String propertyContext,final HealthCheckRegistry registry,final String instanceName) throws IOException, ConnectionException {\n  DriverConfiguration config=new DriverConfiguration(propertyContext);\n  CassandraDriver result=new DefaultCassandraDriver(config,registry,instanceName);\n  if (!result.isKeyspaceInitialized()) {\n    result.initializeKeyspace();\n  }\n  return result;\n}\n", "nl": "Construct the Cassandra driver from the specified context"}
{"code": "@Override public void remove(){\n  throw new UnsupportedOperationException(\"This operation is not supported.\");\n}\n", "nl": "<font color=\"red\"><b>NOT IMPLEMENTED</b></font>"}
{"code": "public boolean contains(int index){\n  return index >= getFirst() && index <= getLast();\n}\n", "nl": "Tests whether item is contained by range"}
{"code": "public MessagesRemoveChatUserQuery(VkApiClient client,UserActor actor,int chatId,String userId){\n  super(client,\"messages.removeChatUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ReplicateLaterWindow fillTime(String time){\n  timeField.sendKeys(time);\n  return this;\n}\n", "nl": "Puts time in time field"}
{"code": "public FriendsGetRequestsQuery suggested(Boolean value){\n  return unsafeParam(\"suggested\",value);\n}\n", "nl": "Return a list of suggested friends"}
{"code": "@Override public boolean isTransient(){\n  return _typeDesc == null || _typeDesc.getIdPropertyName() == null || super.isTransient();\n}\n", "nl": "UidQueryPacket can only be used to query the EDS if it is attached to specific type"}
{"code": "public static void syncImmediately(Context context,Bundle extras){\n  Bundle bundle=new Bundle(extras);\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);\n  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.data_provider_authority),bundle);\n}\n", "nl": "Helper method to have the sync adapter sync immediately"}
{"code": "public SpaceConnectRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static boolean isConnectedMobile(Context context){\n  NetworkInfo info=NetworkUtil.getNetworkInfo(context);\n  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);\n}\n", "nl": "Check if there is any connectivity to a mobile network"}
{"code": "public IStoredListIterator<T> next(IStoredListIterator<T> slh){\n  IStoredListIterator<T> slnext=nextPos((SegmentedListIterator<T>)slh);\n  if (slnext == null)   slh.release();\n  return slnext;\n}\n", "nl": "get the next element in scan order"}
{"code": "public FaveAddUserQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"fave.addUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public VideoSearchQueryWithExtended adult(Boolean value){\n  return unsafeParam(\"adult\",value);\n}\n", "nl": "Disable the Safe Search filter"}
{"code": "public Schema schema(){\n  return schema;\n}\n", "nl": "Returns the schema of the table's records"}
{"code": "public static void clearCookie(){\n  prefs.edit().putString(\"cookie\",\"\").commit();\n}\n", "nl": "clear the cookie in the SharedPreferences"}
{"code": "@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {\n}\n", "nl": "A notation declaration"}
{"code": "public NewsfeedAddBanQuery userIds(List<Integer> value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids"}
{"code": "public int size(){\n  return _locks.length;\n}\n", "nl": "get the number of resources in the pool"}
{"code": "public static char readChar(DataInputStream dis) throws IOException {\n  return (char)dis.readByte();\n}\n", "nl": "Reads a single char from the stream"}
{"code": "public static HttpResponse execute(HttpMethod method,String targetUrl) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {\n  return execute(method,targetUrl,null,null);\n}\n", "nl": "Execute an HTTP request without body"}
{"code": "public BoardGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id"}
{"code": "public SidekickGridRow selectGridCheckbox(){\n  if (!isGridRowCheckboxSelected()) {\n    bobcatWait.withTimeout(Timeouts.BIG).until(null,5);\n  }\n  return this;\n}\n", "nl": "Selects checbox in AemSidekick grid based"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  Director.showMessageWindow();\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public void endDocument() throws SAXException {\n  super.endDocument();\n}\n", "nl": "end the document"}
{"code": "public BoardGetTopicsQueryWithExtended(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"board.getTopics\",GetTopicsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void releaseScan() throws SAException {\n  if (_curValueList != null) {\n    _curValueList.releaseScan();\n    _curValueList=null;\n  }\n}\n", "nl": "release SLHolder for this scan"}
{"code": "public void restoreFp(){\n  increaseFp(TYPE.NATURAL_FP,1);\n}\n", "nl": "this method should be used only on FlyTimeRestoreService"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static int cleanup(long uid){\n  return Helper.delete(W.create(\"uid\",uid),Lock.class);\n}\n", "nl": "delete all user lock info for the user id"}
{"code": "public static void enableJMS(boolean enable){\n  ServiceDispatcher.enableJMS=enable;\n}\n", "nl": "Enables/Disables the JMS listeners globally (this will not effect any dispatchers already running)"}
{"code": "public boolean isLeftHalf(){\n  return isLeftHalf;\n}\n", "nl": "Is this target the left half of a phone?"}
{"code": "private void createLocalClassDecl(polyglot.ast.LocalClassDecl cDecl){\n  BiMap lcMap=InitialResolver.v().getLocalClassMap();\n  String name=Util.getSootType(cDecl.decl().type()).toString();\n  if (!InitialResolver.v().hasClassInnerTag(body.getMethod().getDeclaringClass(),name)) {\n    Util.addInnerClassTag(body.getMethod().getDeclaringClass(),name,null,cDecl.decl().name(),Util.getModifier(cDecl.decl().flags()));\n  }\n}\n", "nl": "Local Class Decl - Local Inner Class"}
{"code": "public static void putInt(String key,int value){\n  prefs.edit().putInt(key,value).commit();\n}\n", "nl": "Set an int value in the preferences editor, to be written back once"}
{"code": "private void fixScrollOffset(){\n  if (offsetScroll < 0) {\n    offsetScroll=0;\n  }\n  if (offsetScroll > getMaxOffsetX()) {\n    offsetScroll=getMaxOffsetX();\n  }\n}\n", "nl": "fix the offset x in case item out of boundary"}
{"code": "public PauseGenerator(){\n}\n", "nl": "Constructs a PauseGenerator"}
{"code": "public boolean isBigEndian(){\n  return isBigEndian;\n}\n", "nl": "Returns the endianness of the file"}
{"code": "public void scale(double r,double s,double t){\n  Matrix3D tmp=new Matrix3D();\n  tmp.set(0,0,r);\n  tmp.set(1,1,s);\n  tmp.set(2,2,t);\n  preMultiply(tmp);\n}\n", "nl": "scale non-uniformly"}
{"code": "public final void unschedule(final ScheduledTask task){\n  if (task == null)   return;\n  task.suspend();\n}\n", "nl": "Unschedules an instance of <code>Scheduled</code> class"}
{"code": "public void hide(){\n  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();\n  lp.height=0;\n  mContentView.setLayoutParams(lp);\n}\n", "nl": "hide footer when disable pull load more"}
{"code": "public SM_MAIL_SERVICE(Player player,Collection<Letter> letters){\n  super(player);\n  this.serviceId=2;\n  this.letters=letters;\n}\n", "nl": "Send mailbox info"}
{"code": "public FriendsGetRequestsQueryWithExtended suggested(Boolean value){\n  return unsafeParam(\"suggested\",value);\n}\n", "nl": "Return a list of suggested friends"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set nucleotideColors=\");\n  String value=np.getWordMatchesIgnoringCase(Basic.toString(ColorSchemeNucleotides.getNames(),\" \"));\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.setNucleotideColoringScheme(value);\n  viewer.setShowAminoAcids(viewer.isShowAminoAcids());\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void copy(Split split){\n  setA(split.getA());\n  setB(split.getB());\n  setWeight(split.getWeight());\n  weightList.addAll(split.weightList);\n}\n", "nl": "copy a split"}
{"code": "public static boolean isEnRoute(String cc){\n  String first4digs=cc.substring(0,4);\n  if ((cc.length() == 15) && (first4digs.equals(\"2014\") || first4digs.equals(\"2149\")))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid EnRoute number"}
{"code": "@Override public void deactivate(){\n}\n", "nl": "this tab has been deselected"}
{"code": "@deprecated public boolean hasNext(){\n  if (this.nextChar == -1) {\n    findNextChar();\n  }\n  return this.nextChar != -1;\n}\n", "nl": "/*    "}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.GOODALL + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@deprecated public boolean isNumeric(){\n  return DateTimePatternGenerator.types[this.canonicalIndex][2] > 0;\n}\n", "nl": "/*     "}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "private static ExternalSystem resetNTLMFields(ExternalSystem input){\n  input.setUsername(null);\n  input.setPassword(null);\n  input.setDomain(null);\n  return input;\n}\n", "nl": "Reset NTLM authentication fields for external system entity<br> <b>TFS specific</b>"}
{"code": "public static void showInternalError(String message){\n  showNotification(title,\"Internal error: \" + message,Mode.error,Pos.BOTTOM_LEFT,60000);\n}\n", "nl": "show an error notation"}
{"code": "public AudioGetUploadServerQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getUploadServer\",GetUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void stopSpinning(){\n  spinHandler.sendEmptyMessageDelayed(1,200);\n}\n", "nl": "Turn off spin mode"}
{"code": "public AdsRemoveOfficeUsersQuery(VkApiClient client,UserActor actor,int accountId,String ids){\n  super(client,\"ads.removeOfficeUsers\",Boolean.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  ids(ids);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set drawer=\" + ViewerBase.DiagramType.RectangularPhylogram + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public static boolean isMetaEndOfTrack(MidiMessage midiMsg){\n  if (midiMsg.getLength() != 3 || midiMsg.getStatus() != MetaMessage.META) {\n    return false;\n  }\n  byte[] msg=midiMsg.getMessage();\n  return ((msg[1] & 0xFF) == META_END_OF_TRACK_TYPE) && (msg[2] == 0);\n}\n", "nl": "return true if the passed message is Meta End Of Track"}
{"code": "public static void deleteOwner(AbstractAI ai2){\n  ai2.getOwner().getController().onDelete();\n}\n", "nl": "Despawn and delete owner"}
{"code": "public static boolean similar(ItemStack a,ItemStack b){\n  if (a == null || b == null) {\n    return a == b;\n  }\n  return a.getItem() == b.getItem() && a.getItemDamage() == b.getItemDamage();\n}\n", "nl": "Compare includes damage value; ignores stack size and NBT"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "private boolean endCondCheck(){\n  Conditions skillConditions=skillTemplate.getEndConditions();\n  return skillConditions != null ? skillConditions.validate(this) : true;\n}\n", "nl": "Check all conditions after using skill"}
{"code": "public final boolean isFallbackFileEmpty(){\n  return !((fFileController.getNumberOfLines()) > 0);\n}\n", "nl": "It checks whether the file is empty (true) or not (false)"}
{"code": "public void remove(IObjectInfo<T> oi){\n  remove_impl((ObjectInfo<T>)oi);\n}\n", "nl": "remove an element described by ObjectInfo"}
{"code": "public static void showProfile(android.support.v4.app.Fragment fragment,@Nullable HashMap<String,String> extras){\n  showProfile(fragment,AirMap.getUserId(),extras);\n}\n", "nl": "Display the authenticated pilot's profile"}
{"code": "public boolean clearTouched(){\n  boolean result=_touched;\n  _touched=false;\n  return result;\n}\n", "nl": "clear touched state and return previous touch state"}
{"code": "public static void checkPolygon(List<Coordinate> geometry,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean showWeather,@Nullable Date date,@Nullable AirMapCallback<AirMapStatus> callback){\n  StatusService.checkPolygon(geometry,takeOffPoint,types,ignoredTypes,showWeather,date,callback);\n}\n", "nl": "Get a flight status based on a flight within a polygon"}
{"code": "public PhotosGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.getComments\",GetCommentsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void initialiseByteArrayValues(int size){\n  if (size < 1) {\n    throw new IllegalArgumentException(\"Invalid array size\");\n  }\n  byteValues=new byte[size][];\n  columnByteValues=new byte[size][][];\n}\n", "nl": "Method to initialise double array"}
{"code": "public VideoRemoveFromAlbumQuery targetId(Integer value){\n  return unsafeParam(\"target_id\",value);\n}\n", "nl": "Set target id"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public static Zmat o(Zmat A) throws JampackException {\n  if (A.nrow != A.ncol)   throw new JampackException(\"Cannot compute the inverse of a rectangular matrix.\");\n  return Solve.aib(A,Eye.o(A.nrow));\n}\n", "nl": "Computes the inverse of a square Zmat"}
{"code": "public void addSorting(String structureName,String fieldName,boolean asc){\n  ParamValidationUtil.validateParamNotNull(fieldName,\"sortBy\");\n  String sorting=\"modDate\".equals(fieldName) ? fieldName : structureName + \".\" + fieldName;\n  String sortingWithOrder=sorting + \" \" + (asc ? \"asc\" : \"desc\");\n  this.sortBy=UtilMethods.isSet(this.sortBy) ? this.sortBy + \", \" + sortingWithOrder : sortingWithOrder;\n}\n", "nl": "Adds sorting to the query"}
{"code": "public MarketGetAlbumByIdQuery(VkApiClient client,UserActor actor,int ownerId,List<Integer> albumIds){\n  super(client,\"market.getAlbumById\",GetAlbumByIdResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  albumIds(albumIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Boolean isDictionaryFile(CarbonFile carbonFile){\n  return (!carbonFile.isDirectory()) && (carbonFile.getName().endsWith(DICTIONARY_EXT));\n}\n", "nl": "whether carbonFile is dictionary file or not"}
{"code": "public static StorableActivityFence stopping(@ActivityType int... activityTypes){\n  return new StorableActivityFence(activityTypes,STOP_TYPE);\n}\n", "nl": "Creates an storable activity fence which will be valid when the user stops one of the given activity"}
{"code": "protected void notifyScrollingListenersAboutEnd(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingFinished(this);\n  }\n}\n", "nl": "Notifies listeners about ending scrolling"}
{"code": "public JsonHttpResponseHandler(){\n  super(DEFAULT_CHARSET);\n}\n", "nl": "Creates a new JsonHttpResponseHandler"}
{"code": "private void writeFlowPair(FlowPair pair,Document document,Element parentElement){\n  Element flowPair=document.createElement(\"flowpair\");\n  parentElement.appendChild(flowPair);\n  writeDomainSpec(pair.getFirstDomain(),document,flowPair);\n  writeDomainSpec(pair.getSecondDomain(),document,flowPair);\n}\n", "nl": "Writes out a flow pair object for the use inside the flow policy"}
{"code": "public WallGetCommentsQueryWithExtended sort(WallGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public static String[] split(String str){\n  return split(str,ESCAPE_CHAR,COMMA);\n}\n", "nl": "Split a string using the default separator"}
{"code": "public static byte[] copy(byte[] src,byte[] target){\n  if (target.length < src.length) {\n    target=new byte[src.length];\n  }\n  System.arraycopy(src,0,target,0,src.length);\n  return target;\n}\n", "nl": "copies the src to the target, resizing the target, if necessary"}
{"code": "public boolean isSetTimeout(){\n  return __isset_bit_vector.get(__TIMEOUT_ISSET_ID);\n}\n", "nl": "Returns true if field timeout is set (has been assigned a value) and false otherwise"}
{"code": "public GroupsGetQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"groups.get\",GetExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void applyEffect(AbstractAI ai2,SkillTemplate template,Creature target){\n  Effect effect=new Effect(ai2.getOwner(),target,template,template.getLvl(),0);\n  effect.setIsForcedEffect(true);\n  effect.initialize();\n  effect.applyEffect();\n}\n", "nl": "Effect will be created and applied to target with 100% success"}
{"code": "private Object wrapResult(Object result,Class<?> viewClass){\n  return new JacksonViewAware(result,viewClass);\n}\n", "nl": "Wraps bean and view into one object"}
{"code": "public WebSocketsConnectionProvider(String uri,Map<String,String> connectHttpHeaders){\n  mUri=uri;\n  mConnectHttpHeaders=connectHttpHeaders != null ? connectHttpHeaders : new HashMap<>();\n  mLifecycleSubscribers=new ArrayList<>();\n  mMessagesSubscribers=new ArrayList<>();\n}\n", "nl": "Support UIR scheme ws://host:port/path"}
{"code": "@Override public ListenableFuture<MemberAddResponse> addMember(List<String> endpoints){\n  MemberAddRequest memberAddRequest=MemberAddRequest.newBuilder().addAllPeerURLs(endpoints).build();\n  return clusterStub.memberAdd(memberAddRequest);\n}\n", "nl": "add a new member into the cluster"}
{"code": "public static final void emoteStartIdling(Npc owner){\n  owner.setState(CreatureState.WALKING);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));\n}\n", "nl": "Npc starts idling"}
{"code": "public void showErrorMessage(String errorMessage){\n  if (mErrorView != null) {\n    mErrorView.setErrorText(errorMessage);\n    mErrorView.setVisibility(VISIBLE);\n  }\n}\n", "nl": "Predefined methods for default views Just delegation"}
{"code": "public static WxMenuResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxMenuResult.class);\n}\n", "nl": "json --> obj"}
{"code": "public static long[] transformLongArray(Long[] source){\n  long[] destin=new long[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert Long array to long array"}
{"code": "public String[] upload_appender_file(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_appender_file(group_name,file_buff,0,file_buff.length,file_ext_name,meta_list);\n}\n", "nl": "upload appender file to storage server (by file buff)"}
{"code": "public static <V,V1 extends V>Map<String,V> toMap(String name1,V1 value1){\n  return populateMap(new HashMap<String,V>(),name1,value1);\n}\n", "nl": "Create a map from passed nameX, valueX parameters"}
{"code": "public int modify_file1(String appender_file_id,long file_offset,byte[] file_buff,int buffer_offset,int buffer_length) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.modify_file(parts[0],parts[1],file_offset,file_buff,buffer_offset,buffer_length);\n}\n", "nl": "modify appender file to storage server (by file buff)"}
{"code": "public void changeSpaceState(int state,boolean electable,boolean replicable){\n  _spaceState.setState(state);\n  modifyLookupAttributes(new Entry[]{new State()},new Entry[]{new State(state,electable,replicable)});\n}\n", "nl": "Change space state to given state - lookup attributes are updated as well"}
{"code": "public boolean isNonsingular(){\n  for (int j=0; j < n; j++) {\n    if (LU[j][j] == 0)     return false;\n  }\n  return true;\n}\n", "nl": "Is the matrix nonsingular?"}
{"code": "protected String objectKey(Object id){\n  return RedisKeys.format(CLASSNAMES,id.toString());\n}\n", "nl": "Default use id as unique key"}
{"code": "@Override public boolean hasNext(){\n  return dataIter.hasNext();\n}\n", "nl": "Whether there are anymore records"}
{"code": "public AudioMoveToAlbumQuery(VkApiClient client,UserActor actor,int... audioIds){\n  super(client,\"audio.moveToAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioIds(audioIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public IStoredListIterator<T> next(IStoredListIterator<T> slh){\n  IStoredListIterator<T> slnext=nextPos((SegmentedListIterator<T>)slh);\n  if (slnext == null)   slh.release();\n  return slnext;\n}\n", "nl": "get the next element in scan order"}
{"code": "public static void writeObject(OutputStream out,Object obj) throws IOException {\n  ObjectOutputStream objOut=new ObjectOutputStream(out);\n  objOut.writeObject(obj);\n  objOut.flush();\n}\n", "nl": "Write an Object to an OutputStream"}
{"code": "private void broadcastToAllianceMembers(final Player player){\n  player.getPlayerAlliance2().sendPacket(new SM_MESSAGE(player,message,type));\n}\n", "nl": "Sends message to all alliance members"}
{"code": "private static void startIntentIfPossible(Context context,Intent intent){\n  if (isActivityAvailableForIntent(context,intent)) {\n    context.startActivity(intent);\n  }\n}\n", "nl": "Starts an Activity if it is exists"}
{"code": "public PagesGetQuery needHtml(Boolean value){\n  return unsafeParam(\"need_html\",value);\n}\n", "nl": "Return the page as HTML"}
{"code": "public static void e(String tag,String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.e(tag,buildMsg(msg),e);\n  }\n}\n", "nl": "error log"}
{"code": "public EmbeddedSpaceConfigurer attributeStore(AttributeStore attributeStore){\n  validate();\n  factoryBean.attributeStore(attributeStore);\n  return this;\n}\n", "nl": "Sets an attribute store"}
{"code": "public GroupsEditQuery marketWiki(Integer value){\n  return unsafeParam(\"market_wiki\",value);\n}\n", "nl": "Id of a wiki page with market description"}
{"code": "@Override public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {\n  executor.execute(this,space,txn,readModifier,max);\n}\n", "nl": "Accept the query executor"}
{"code": "public static long buff2long(byte[] bs,int offset){\n  return (((long)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 56) | (((long)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 48) | (((long)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 40)| (((long)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3])) << 32)| (((long)(bs[offset + 4] >= 0 ? bs[offset + 4] : 256 + bs[offset + 4])) << 24)| (((long)(bs[offset + 5] >= 0 ? bs[offset + 5] : 256 + bs[offset + 5])) << 16)| (((long)(bs[offset + 6] >= 0 ? bs[offset + 6] : 256 + bs[offset + 6])) << 8)| ((long)(bs[offset + 7] >= 0 ? bs[offset + 7] : 256 + bs[offset + 7]));\n}\n", "nl": "buff convert to long"}
{"code": "public void register(DispatchContext context){\n  if (Debug.infoOn())   Debug.logInfo(\"Registering dispatcher: \" + context.getName(),module);\n  this.localContext.put(context.getName(),context);\n}\n", "nl": "Registers the loader with this ServiceDispatcher"}
{"code": "public static <T>Function<String,T> jsonMapper(Class<T> clazz){\n  return null;\n}\n", "nl": "create a mapper for a JSON representation of the given class"}
{"code": "public boolean isUptoDate(){\n  return uptodate;\n}\n", "nl": "is viewer uptodate?"}
{"code": "public static void b2mc(double b[],double mc[],int m,double a){\n  double d=mc[m]=b[m];\n  for (int i=m--; i >= 0; i--) {\n    double o=b[i] + (a * d);\n    d=b[i];\n    mc[i]=o;\n  }\n}\n", "nl": "b2mc: transform MLSA digital filter coefficients to mel-cepstrum"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  getViewer().selectComponent(getViewer().getNnetTab());\n}\n", "nl": "action to be performed"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set minReadsAlignment=\");\n  int value=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\";\");\n  ProgramProperties.put(MeganProperties.MININUM_READS_IN_ALIGNMENT,value);\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public DataRefNode findFirstDataBlock(DataRefNode dataRefBlock,IndexKey searchKey){\n  BTreeNode rootNode=(BTreeNode)dataRefBlock;\n  while (!rootNode.isLeafNode()) {\n    rootNode=findFirstLeafNode(searchKey,rootNode);\n  }\n  return rootNode;\n}\n", "nl": "Below method will be used to get the first tentative data block based on search key"}
{"code": "@Override public String version(){\n  return VERSION;\n}\n", "nl": "Returns version of the connector"}
{"code": "public void removeSwipeListener(SwipeListener listener){\n  if (mListeners == null) {\n    return;\n  }\n  mListeners.remove(listener);\n}\n", "nl": "Removes a listener from the set of listeners"}
{"code": "public synchronized void resetTime(){\n  timeOffset=line.getMicrosecondPosition();\n}\n", "nl": "Resets the audio clock"}
{"code": "public void update(double deltaTime){\n  Move();\n  position.add(velocity.x * deltaTime,velocity.y * deltaTime);\n}\n", "nl": "update enemy"}
{"code": "public static boolean isReady(String placementId){\n  return isSupported() && isInitialized() && placementId != null && Placement.isReady(placementId);\n}\n", "nl": "Check if placement is ready to show ads"}
{"code": "public CreateSiteWindow openCreateSiteWindow(){\n  grid.getActionBar().expandDropDown(SiteAdminButtons.NEW);\n  grid.getActionBar().clickDropDownOption(SiteAdminButtons.NEW_SITE);\n  createSiteWindow.waitToBeDisplayed();\n  return createSiteWindow;\n}\n", "nl": "Opens CreateSiteWindow"}
{"code": "public static Builder waffleCone(){\n  return new Builder();\n}\n", "nl": "Create a builder instance for this class to initialize the library"}
{"code": "public WallGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id"}
{"code": "public void push(){\n  L.rawGetI(LuaState.LUA_REGISTRYINDEX.intValue(),ref.intValue());\n}\n", "nl": "Pushes the object represented by <code>this<code> into L's stack"}
{"code": "@Override public ListenableFuture<AlarmResponse> listAlarms(){\n  AlarmRequest alarmRequest=AlarmRequest.newBuilder().setAlarm(AlarmType.NONE).setAction(AlarmRequest.AlarmAction.GET).setMemberID(0).build();\n  return this.futureStub.alarm(alarmRequest);\n}\n", "nl": "get all active keyspace alarm"}
{"code": "public AXmlNamespace(String prefix,String uri,int line){\n  super();\n  this.prefix=prefix;\n  this.uri=uri;\n  this.line=line;\n}\n", "nl": "Creates a new namespace definition for Android xml documents"}
{"code": "final public void response(List<JSON> arr){\n  if (arr == null) {\n    responseJson(\"[]\");\n  }\n else {\n    responseJson(arr.toString());\n  }\n}\n", "nl": "output the jsonarr as \"application/json\" to end-user"}
{"code": "public static String removeNonNumeric(String str){\n  return removeRegex(str,\"[\\\\D]\");\n}\n", "nl": "Removes all non-numbers from str"}
{"code": "@PickTriggerResult public int fromMultipleSources(@StringRes final int pTitleRes,@NonNull final PickSource... pPickSources){\n  return this.fromMultipleSources(this.mContext.getString(pTitleRes),pPickSources);\n}\n", "nl": "Launch multi-source pick flow"}
{"code": "public boolean isUserSynchronized(){\n  Debug.logInfo(this.getClass().getName() + \" Authenticator isUserSynchronized()\",module);\n  return true;\n}\n", "nl": "Is the user synchronized back to OFBiz"}
{"code": "public RetrofitClient createBaseApi(){\n  apiService=create(BaseApiService.class);\n  return this;\n}\n", "nl": "create BaseApi  defalte ApiManager"}
{"code": "public Observable<Object> toObserverable(LifecycleTransformer lifecycleTransformer){\n  return _bus.compose(lifecycleTransformer);\n}\n", "nl": "dosen't designation to use specail thread,It's depending on what the 'send' method use"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getSelectedBlock().isSelected() && (viewer.getAlignment().getSequenceType().equalsIgnoreCase(Alignment.DNA) || viewer.getAlignment().getSequenceType().equalsIgnoreCase(Alignment.cDNA)) && !viewer.isShowAminoAcids();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void skipNullTerminatedBytes() throws IOException {\n  int letter=1;\n  while (letter != 0) {\n    letter=ins.read();\n    if (letter == -1)     throw new IOException(\"skipNullTerminatedBytes(): failed (EOF)\");\n  }\n}\n", "nl": "skip a null-terminated string"}
{"code": "public ByteArray(byte[] buf){\n  this(buf,0,buf.length);\n}\n", "nl": "Create a byte array"}
{"code": "public Builder cacheOnDisk(boolean cacheOnDisk){\n  this.cacheOnDisk=cacheOnDisk;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached on disk"}
{"code": "public boolean isActive(){\n  return this.isActive.get();\n}\n", "nl": "Access method to the namespace state to check whether the namespace is active or not"}
{"code": "public boolean itemExists(String name) throws JMSException {\n  HashMap body=(HashMap)Body;\n  return body.containsKey(name);\n}\n", "nl": "Check if an item exists in this MapMessage"}
{"code": "private static String separeMetaTagsContent(String content){\n  String result=Regex.pregMatch(content,Regex.METATAG_CONTENT_PATTERN,1);\n  return htmlDecode(result);\n}\n", "nl": "Gets content from metatag"}
{"code": "private String httpArray(Collection<Integer> classIds){\n  String s=\"\";\n  for (  Object o : classIds) {\n    s=s + o.toString() + \",\";\n  }\n  return s.substring(0,s.length() - 1);\n}\n", "nl": "Concatenate with comma"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public PagesGetQuery sitePreview(Boolean value){\n  return unsafeParam(\"site_preview\",value);\n}\n", "nl": "Resulting wiki page is a preview for the attached link"}
{"code": "private void notify_2(){\n  bleManager.notifyDevice(UUID_SERVICE,UUID_NOTIFY_2,notifyCallback_2);\n}\n", "nl": "listen notify2"}
{"code": "@deprecated protected boolean matchNodesCanHaveValues(){\n  return true;\n}\n", "nl": "/*    "}
{"code": "public PagesClearCacheQuery(VkApiClient client,UserActor actor,String url){\n  super(client,\"pages.clearCache\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  url(url);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static StorableLocationFence entering(double latitude,double longitude,double radius){\n  return new StorableLocationFence(ENTER_TYPE,latitude,longitude,radius,0);\n}\n", "nl": "Creates a storable location fence which will be valid when the user enter the given region"}
{"code": "private List<String> convertByteArrayListToStringValueList(List<byte[]> dictionaryByteArrayList){\n  List<String> valueList=new ArrayList<>(dictionaryByteArrayList.size());\n  for (  byte[] value : dictionaryByteArrayList) {\n    valueList.add(new String(value,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));\n  }\n  return valueList;\n}\n", "nl": "This method will convert list of byte array to list of string"}
{"code": "public static String urlEncodeArgs(Map<String,? extends Object> args){\n  return urlEncodeArgs(args,true);\n}\n", "nl": "URL Encodes a Map of arguements"}
{"code": "public static String keyOfIdGenerator(Class<?> clazz){\n  try {\n    return ID_GENERATOR_KEY_CACHE.get(clazz);\n  }\n catch (  ExecutionException e) {\n    throw new KeyException(e);\n  }\n}\n", "nl": "The key of id generator"}
{"code": "protected GroupsCreateQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "Community title"}
{"code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,OnBoardingActivity.class);\n  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n  _context.startActivity(intent);\n}\n", "nl": "Allows to start this activity"}
{"code": "private static void addToArray(Integer[] sum,int[] add){\n  for (int i=0; i < add.length; i++) {\n    sum[i]+=add[i];\n  }\n}\n", "nl": "add all values to sum"}
{"code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n", "nl": "Creates a new executor object for spawning worker threads"}
{"code": "protected boolean isJson(HttpServletRequest request){\n  String type=request.getContentType();\n  type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;\n  if (request.getPathInfo().endsWith(\".json\")) {\n    type=MediaType.APPLICATION_JSON_VALUE;\n  }\n  return isCompatibleWith(type,MediaType.APPLICATION_JSON);\n}\n", "nl": "Are we receiving JSON data?"}
{"code": "public GroupsEditQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static SM_SYSTEM_MESSAGE STR_PETITION_GM_LEAVE_MSG(String value0){\n  return new SM_SYSTEM_MESSAGE(1300565,value0);\n}\n", "nl": "This is a message from the GM: %0"}
{"code": "public boolean isEmpty(){\n  return state.equals(EMPTY);\n}\n", "nl": "Check if empty state is shown"}
{"code": "public void clear(){\n  uid=0;\n  matchRecord=null;\n  fName2Id.clear();\n  taxonId=0;\n}\n", "nl": "erase the block (for reuse)"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public SimplePollingContainerConfigurer eventListenerAnnotation(Object eventListener){\n  AnnotationEventListenerAdapter annotationEventListenerAdapter=new AnnotationEventListenerAdapter();\n  annotationEventListenerAdapter.setDelegate(eventListener);\n  annotationEventListenerAdapter.afterPropertiesSet();\n  pollingEventListenerContainer.setEventListener(annotationEventListenerAdapter);\n  return this;\n}\n", "nl": "Sets an event listener that uses annotations"}
{"code": "public WallGetByIdQuery(VkApiClient client,List<String> posts){\n  super(client,\"wall.getById\",Utils.buildParametrizedType(List.class,WallpostFull.class));\n  posts(posts);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isError(){\n  return state == State.ERROR;\n}\n", "nl": "Check if error state is shown"}
{"code": "public CM_MOVE_IN_AIR(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_MOVE_IN_AIR </tt> packet"}
{"code": "public void cleanUp(){\n  cacheFragment=null;\n}\n", "nl": "Call on destroy to avoid memory leaks"}
{"code": "public void removeEmojiconGroup(int position){\n  emojiconGroupList.remove(position);\n  pagerView.removeEmojiconGroup(position);\n  tabBar.removeTab(position);\n}\n", "nl": "remove emojicon group"}
{"code": "public int size(){\n  return name2id.size();\n}\n", "nl": "gets the size of the mapping"}
{"code": "public void onSuccess(int statusCode,Header[] headers,JSONObject response){\n}\n", "nl": "Returns when request succeeds"}
{"code": "public static JavaRDD<List<Writable>> zeromeanUnitVariance(Schema schema,JavaRDD<List<Writable>> data){\n  return zeromeanUnitVariance(schema,data,Collections.<String>emptyList());\n}\n", "nl": "Normalize by zero mean unit variance"}
{"code": "public void clear(){\n  ntax=0;\n  bits.clear();\n  index2name.clear();\n  name2index.clear();\n}\n", "nl": "erase all taxa"}
{"code": "public AdsCreateTargetGroupQuery lifetime(Integer value){\n  return unsafeParam(\"lifetime\",value);\n}\n", "nl": "Set lifetime"}
{"code": "protected void drawYAxis(Graphics2D gc,Dimension size){\n}\n", "nl": "draw the y-axis"}
{"code": "public PhotosGetQuery(VkApiClient client){\n  super(client,\"photos.get\",GetResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MediaFormat(){\n  mMap=new HashMap<String,Object>();\n}\n", "nl": "Creates an empty MediaFormat"}
{"code": "public boolean isEncountered(){\n  if (encountered == null) {\n    return false;\n  }\n  return encountered;\n}\n", "nl": "Encounter check"}
{"code": "public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos){\n  return nodeBlockMapping(blockInfos,-1);\n}\n", "nl": "This method will divide the blocks among the nodes as per the data locality"}
{"code": "static AnyVal<?> anyNull(){\n  return AnyNull.instance;\n}\n", "nl": "Returns an AnyVal that matches any null value"}
{"code": "GrimpBody(SootMethod m){\n  super(m);\n}\n", "nl": "Construct an empty GrimpBody"}
{"code": "public Symbol(Object value){\n  this.value=value;\n}\n", "nl": "Creates Symbol for non-symbolic results of action routines"}
{"code": "public static void d(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg,throwable);\n}\n", "nl": "Send a DEBUG log message"}
{"code": "public static void clearColumnDictionaryCache(Map<String,Dictionary> columnToDictionaryMap){\n  for (  Map.Entry<String,Dictionary> entry : columnToDictionaryMap.entrySet()) {\n    CarbonUtil.clearDictionaryCache(entry.getValue());\n  }\n}\n", "nl": "This method will clear the dictionary cache for a given map of columns and dictionary cache mapping"}
{"code": "public double distance(Coord coord){\n  return Math.sqrt(distanceSquare(coord));\n}\n", "nl": "return the euclidian distance between two coords"}
{"code": "public boolean isCentered(int orientationVertical){\n  if (isGuideline())   return false;\n  if (orientationVertical == Direction.ORIENTATION_VERTICAL) {\n    return mConstraintWidget.getAnchor(ConstraintAnchor.Type.TOP).isConnected() && mConstraintWidget.getAnchor(ConstraintAnchor.Type.BOTTOM).isConnected();\n  }\n  return mConstraintWidget.getAnchor(ConstraintAnchor.Type.LEFT).isConnected() && mConstraintWidget.getAnchor(ConstraintAnchor.Type.RIGHT).isConnected();\n}\n", "nl": "is the widget centered"}
{"code": "public AutoSummENGGui(){\n  initComponents();\n  loadSettings();\n}\n", "nl": "Creates new form AutoSummENGGui and loads its settings"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  int value=ProgramProperties.get(MeganProperties.MININUM_READS_IN_ALIGNMENT,10);\n  String result=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter minimum number of reads required for an alignment\",\"\" + value);\n  if (result != null && Basic.isInteger(result))   execute(\"set minReadsAlignment=\" + result + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private boolean removeLeaseInRenew(Entry e){\n  int index=leaseInRenew.indexOf(e);\n  if (index < 0)   return false;\n  leaseInRenew.remove(index);\n  return true;\n}\n", "nl": "Remove from leaseInRenew, return true if removed"}
{"code": "protected MarketGetCommentsQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item id"}
{"code": "public Set<Atomic> selectAtoms(){\n  Set<Atomic> atoms=new HashSet<>(atomSet).stream().filter(null).filter(null).collect(Collectors.toSet());\n  if (atoms.size() == 1)   return atoms;\n  Set<Atomic> selectedAtoms=atoms.stream().filter(null).collect(Collectors.toSet());\n  if (selectedAtoms.isEmpty())   throw new IllegalStateException(ErrorMessage.NO_ATOMS_SELECTED.getMessage(this.toString()));\n  return selectedAtoms;\n}\n", "nl": "atom selection function"}
{"code": "public void removeClickingListener(OnWheelClickedListener listener){\n  clickingListeners.remove(listener);\n}\n", "nl": "Removes wheel clicking listener"}
{"code": "public int convertTime(){\n  return this.getTime() / 12;\n}\n", "nl": "Convert from game time into real time"}
{"code": "private static void toggleVisibleOnApi(JCheckBox component,int maxApiLevel,int apiLevel){\n  component.setVisible(apiLevel <= maxApiLevel);\n  if (!component.isVisible()) {\n    component.setSelected(false);\n  }\n}\n", "nl": "Shows or hides a checkbox based on a given API level and the max API level for which it should be shown"}
{"code": "public void startFirstSampleTimer(){\n}\n", "nl": "Starts the first sample timer"}
{"code": "public static boolean canContainValue(Value val){\n  return val instanceof Local || val instanceof InstanceFieldRef || val instanceof StaticFieldRef|| val instanceof ArrayRef;\n}\n", "nl": "Checks whether the given value can be the base value value of an access path"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public void copyFrom(FastByteArrayInputStream source,int offset,int count){\n  if (offset + count > source.getCount()) {\n    throw new IndexOutOfBoundsException(\"Trying to copy data past the end of source\" + \", source.size=\" + source.getCount() + \", offset=\"+ offset+ \", count=\"+ count);\n  }\n  byte[] srcBuf=source.getBuf();\n  write(srcBuf,offset,count);\n}\n", "nl": "Copies data from input stream"}
{"code": "public void useIncense() throws RemoteServerException, LoginFailedException {\n  useIncense(ItemId.ITEM_INCENSE_ORDINARY);\n}\n", "nl": "use an item with itemID"}
{"code": "public boolean addLegionMember(int playerObjId){\n  if (canAddMember()) {\n    legionMembers.add(playerObjId);\n    return true;\n  }\n  return false;\n}\n", "nl": "Add a legionMember to the legionMembers list"}
{"code": "public boolean isDrawValueAboveBarEnabled(){\n  return mDrawValueAboveBar;\n}\n", "nl": "returns true if drawing values above bars is enabled, false if not"}
{"code": "public static synchronized void addReconnectingAccount(ReconnectingAccount acc){\n  reconnectingAccounts.put(acc.getAccount().getId(),acc);\n}\n", "nl": "Add account to reconnectionAccount list"}
{"code": "@Override protected int sizeOf(String key,BitmapDrawable value){\n  final int bitmapSize=getBitmapSize(value) / 1024;\n  return bitmapSize == 0 ? 1 : bitmapSize;\n}\n", "nl": "Measure item size in kilobytes rather than units which is more practical for a bitmap cache"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_AUTHORIZE_CANCEL(int nameId){\n  return new SM_SYSTEM_MESSAGE(1402147,new Object[]{new DescriptionId(nameId)});\n}\n", "nl": "Authorize System"}
{"code": "TestType(final Long pik){\n  this.pik=pik;\n}\n", "nl": "Set test type pik"}
{"code": "public void clearResources(){\n  objectCache.clear();\n}\n", "nl": "Clears the resource cache"}
{"code": "void removedAttrNode(AttrImpl attr,NodeImpl oldOwner,String name){\n}\n", "nl": "A method to be called when an attribute node has been removed"}
{"code": "public void resume(){\n  engine.resume();\n}\n", "nl": "Resumes waiting \"load&display\" tasks"}
{"code": "public void shutdown(){\n  drivers.stream().filter(null).forEach(null);\n}\n", "nl": "Shutdown all registered drivers"}
{"code": "public SM_UI_SETTINGS(byte[] data,int type){\n  this.data=data;\n  this.type=type;\n}\n", "nl": "Constructs new <tt>SM_CHARACTER_UI </tt> packet"}
{"code": "public static boolean isBackgroundAttribute(String text){\n  return BACKGROUND_ATTRIBUTES.contains(text);\n}\n", "nl": "Indicates whether the attribute represents a background color The attribute needs to be in the contrast map"}
{"code": "public WallGetByIdQuery(VkApiClient client,String... posts){\n  super(client,\"wall.getById\",Utils.buildParametrizedType(List.class,WallpostFull.class));\n  posts(posts);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean moveToTargetWithDistance(VisibleObject object,Player player,int direction,int distance){\n  double radian=Math.toRadians(object.getHeading() * 3);\n  float x0=object.getX();\n  float y0=object.getY();\n  float x1=(float)(Math.cos(Math.PI * direction + radian) * distance);\n  float y1=(float)(Math.sin(Math.PI * direction + radian) * distance);\n  return teleportTo(player,object.getWorldId(),x0 + x1,y0 + y1,object.getZ());\n}\n", "nl": "Move Player concerning object with specific conditions"}
{"code": "public static void log(int severity,String message,Throwable e){\n  log(new Status(severity,ID,0,message,e));\n}\n", "nl": "Log the given exception along with the provided message and severity indicator"}
{"code": "public NewsfeedDeleteBanQuery userIds(List<Integer> value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids"}
{"code": "public void openDatabase(){\n  String path=DB_PATH + DB_NAME;\n  mDatabase=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY);\n}\n", "nl": "copying database open process"}
{"code": "protected MarketReportQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Complaint reason"}
{"code": "public SecureGetSMSHistoryQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.getSMSHistory\",Utils.buildParametrizedType(List.class,SmsNotification.class));\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Bindings add(String property,JComboBox combo,int defaultValue){\n  combo.addActionListener(this);\n  return add(new JComboBoxBinding(property,combo,defaultValue));\n}\n", "nl": "Handles JComboBox"}
{"code": "public CacheReadOnlyIterator(StorageReadOnlyIterator<T> externalIterator){\n  this._externalIterator=externalIterator;\n}\n", "nl": "Create an iterator which stars iterating over the packets which reside in external storage"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"hide what=all;\");\n}\n", "nl": "action to be performed"}
{"code": "public Array<String> keys(){\n  Array<String> out=new JavaArray<>();\n  for (  String key : internalMap.keySet()) {\n    out.push(key);\n  }\n  return out;\n}\n", "nl": "Returns the keys defined in the map"}
{"code": "public void execute(Runnable runnable) throws IllegalStateException {\n  if (runObj != null)   throw new IllegalStateException(\"Cannot execute PoolableThread that \" + \"is busy\");\nsynchronized (working) {\n    if (runObj != null)     throw new IllegalStateException(\"Cannot execute PoolableThread \" + \"that is busy\");\n    runObj=runnable;\n    working.notifyAll();\n  }\n}\n", "nl": "Define what to run, and wake up this dozing thread"}
{"code": "public void resume(){\n  engine.resume();\n}\n", "nl": "Resumes waiting \"load&display\" tasks"}
{"code": "public PhotosGetNewTagsQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getNewTags\",GetNewTagsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public Builder addAction(String actionType,Action action){\n  mActions.add(new ActionPair(actionType,action));\n  return this;\n}\n", "nl": "Add an action to the action handler"}
{"code": "void receiveMessages(ClientCnx cnx,int numMessages){\n  if (cnx != null) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"[{}] [{}] Adding {} additional permits\",topic,subscription,numMessages);\n    }\n    cnx.ctx().writeAndFlush(Commands.newFlow(consumerId,numMessages),cnx.ctx().voidPromise());\n  }\n}\n", "nl": "send the flow command to have the broker start pushing messages"}
{"code": "protected final void fireColumnEvent(int idx,Object prev){\n  Object[] lstnrs=m_listeners.getArray();\n  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);\n}\n", "nl": "Notifies all registered listeners of a column UPDATE event"}
{"code": "public static void clearRegistry(){\n  registry.clear();\n}\n", "nl": "Clear the registry"}
{"code": "public boolean isFullRank(){\n  for (int j=0; j < n; j++) {\n    if (Rdiag[j] == 0)     return false;\n  }\n  return true;\n}\n", "nl": "Is the matrix full rank?"}
{"code": "private K highestKey(){\n  FastConcurrentSkipListMap.Node<K,V> n=hiNode();\n  if (n != null) {\n    K last=n.key;\n    if (inBounds(last))     return last;\n  }\n  throw new NoSuchElementException();\n}\n", "nl": "Returns highest absolute key (ignoring directonality)"}
{"code": "protected static boolean startsWith(String string,String tag){\n  return string.startsWith(tag) || (tag.contains(\" \") && string.startsWith(tag.replaceAll(\" \",\"\")));\n}\n", "nl": "does string start with the given tag (allowing spaces inside tag to be missing in string)"}
{"code": "private void updateMembersOfRecreateLegion(Legion legion){\n  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {\n    PacketSendUtility.sendPacket(onlineLegionMember,new SM_LEGION_UPDATE_MEMBER(onlineLegionMember,1300307,\"\"));\n    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x07));\n  }\n}\n", "nl": "This method will send a packet to every legion member and update them about the disband"}
{"code": "public static AuditLevel toLevel(int val,Level defaultLevel){\n  return AUDIT;\n}\n", "nl": "Returns custom level for debug type log message"}
{"code": "public static void drawButtonRewiMod(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){\n  if (!visible)   return;\n  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);\n  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);\n  getTextureHandler().bindModTexture(\"textures/misc/rewimodlogo.png\");\n  getGlStateManager().color(isHovered ? .7F : 1.0F,1.0F,1.0F);\n  drawCustomSizeRect(xPos + 4,yPos + 4,0,0,12,12);\n}\n", "nl": "Draws a small button with the logo of the RewiMod on it"}
{"code": "public boolean haveSuggestions(){\n  return myCurrentLeftMatch != null || myCurrentTopMatch != null || myCurrentRightMatch != null || myCurrentBottomMatch != null;\n}\n", "nl": "Returns true if the handler has any suggestions to offer"}
{"code": "private void buildPathForAbstraction(final AbstractionAtSink abs){\n  SourceContextAndPath scap=new SourceContextAndPath(abs.getAbstraction().getAccessPath(),abs.getSinkStmt());\n  scap=scap.extendPath(abs.getAbstraction());\n  abs.getAbstraction().addPathElement(scap);\n  if (!checkForSource(abs.getAbstraction(),scap))   executor.execute(new SourceFindingTask(abs.getAbstraction()));\n}\n", "nl": "Builds the path for the given abstraction that reached a sink"}
{"code": "protected boolean isEnabled() throws TeamException {\n  ISVNRemoteFile resource=getSingleSelectedSVNRemoteFile();\n  return (resource != null);\n}\n", "nl": "Ony enabled for single resource selection"}
{"code": "public final boolean isLoaded(I id){\n  return objects.asMap().containsKey(id);\n}\n", "nl": "Check to see if a object is loaded or not"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public SM_MAIL_SERVICE(Player player,Collection<Letter> letters,boolean isExpress){\n  super(player);\n  this.serviceId=2;\n  this.letters=letters;\n  this.isExpress=isExpress;\n}\n", "nl": "Send mailbox info"}
{"code": "public int next(){\n  if (hasNext()) {\n    currentMatches=nextMatches;\n    nextMatches=null;\n    return currentMatches.getNumberOfMatches();\n  }\n  return -1;\n}\n", "nl": "gets the next matches"}
{"code": "public boolean isDrawBarShadowEnabled(){\n  return mDrawBarShadow;\n}\n", "nl": "returns true if drawing shadows (maxvalue) for each bar is enabled, false if not"}
{"code": "public ZoomOptions build(){\n  ZoomOptions options=new ZoomOptions();\n  options.animate=animate;\n  return options;\n}\n", "nl": "Builds the ZoomOptions new instance"}
{"code": "public ExitMonitorStmt newExitMonitorStmt(Value op){\n  return new GExitMonitorStmt(op);\n}\n", "nl": "Constructs a ExitMonitorStmt(Expr) grammar chunk"}
{"code": "public static App inst(){\n  if (instance == null) {\n    throw new NullPointerException(\"App is not initialized yet\");\n  }\n  return instance;\n}\n", "nl": "Singleton accessor"}
{"code": "public PhotosEditAlbumQuery commentsDisabled(Boolean value){\n  return unsafeParam(\"comments_disabled\",value);\n}\n", "nl": "Set comments disabled"}
{"code": "EditorFixture(Robot robot,IdeFrameFixture frame){\n  this.robot=robot;\n  myFrame=frame;\n}\n", "nl": "Constructs a new editor fixture, tied to the given project"}
{"code": "public static boolean isCarbonIndexFile(String fileNameWithPath){\n  int pos=fileNameWithPath.lastIndexOf('.');\n  if (pos != -1) {\n    return fileNameWithPath.substring(pos).startsWith(INDEX_FILE_EXT);\n  }\n  return false;\n}\n", "nl": "check if it is carbon index file matching extension"}
{"code": "public ResourcesPoet addIntegerArray(String name,@NotNull List<Integer> values){\n  ArrayList<String> integers=new ArrayList<>();\n  for (  Integer value : values) {\n    integers.add(String.valueOf(value));\n  }\n  addIntegerArrayStrings(name,integers);\n  return this;\n}\n", "nl": "Add an integer array to the config"}
{"code": "public static void sendVerificationToken(AirMapCallback<Void> listener){\n  PilotService.sendVerificationToken(listener);\n}\n", "nl": "Verify the user's phone number"}
{"code": "public void addCategoryLimitations(boolean include,String... categoryVelocityVarNames){\n  query.append(\" \" + (include ? \"+\" : \"-\") + \"(\");\n  for (  String categoryVelocityVarName : categoryVelocityVarNames) {\n    query.append(\"categories:\" + escapeValue(categoryVelocityVarName) + \" \");\n  }\n  query.append(\")\");\n}\n", "nl": "Limit the results of the query to certain categories"}
{"code": "public PhotosGetQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Set offset"}
{"code": "public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){\n  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;\n  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();\n  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,\"uil-pool-\"));\n}\n", "nl": "Creates default implementation of task executor"}
{"code": "public static SuperPrefs newInstance(Context context){\n  return new SuperPrefs(context);\n}\n", "nl": "static factory method"}
{"code": "public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {\n  String sDataString=utils.loadFileToStringWithNewlines(sFilename);\n  setDataString(sDataString);\n}\n", "nl": "Opens a text file and sets its contents as data string"}
{"code": "@Deprecated public static void disableLogging(){\n  writeLogs(false);\n}\n", "nl": "Disables logger, no logs will be passed to LogCat, all log methods will do nothing"}
{"code": "public void scaleComponentTree(JComponent root){\n  if (myScaleFactor == 1.0f)   return;\n  if (DEBUG)   LOG.info(\"Scaling components from \\\"\" + myClazz.getSimpleName() + \"\\\"\");\n  scaleComponentTreeWorker(root);\n  if (DEBUG)   LOG.info(\"Done scaling components from \\\"\" + myClazz.getSimpleName() + \"\\\": \"+ myScaledValueCount+ \" values scaled\");\n  root.putClientProperty(SCALE_FACTOR_KEY,new Float(myScaleFactor));\n}\n", "nl": "Apply the scaling factor to the component tree starting at <code>root</code>"}
{"code": "public RepositoryChanged updateExistingRepository(String repoName,String repoRemoteLocation,String repoUserName,String repoPassword,String repoLocations,String repoBranch,boolean useCredentials){\n  return null;\n}\n", "nl": "This method to be implemented by the extending class"}
{"code": "public synchronized void resume(){\n}\n", "nl": "Resumes audio output"}
{"code": "public static void removePropertiesListListener(PropertiesListListener listener){\nsynchronized (propertieslistListeners) {\n    propertieslistListeners.remove(listener);\n  }\n}\n", "nl": "remove recent file listener"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){\n  return cacheOnDisk(cacheOnDisk);\n}\n", "nl": "Sets whether loaded image will be cached on disk"}
{"code": "@NotNull private List<StyleResourceValue> resolveNonFrameworkThemes(){\n  LocalResourceRepository repository=AppResourceRepository.getAppResources(myConfiguration.getModule(),true);\n  if (repository == null) {\n    return Collections.emptyList();\n  }\n  return getThemes(repository.getConfiguredResources(ResourceType.STYLE,myConfiguration.getFullConfig()),false);\n}\n", "nl": "Resolve all non-framework themes available from module of passed Configuration"}
{"code": "public CSVMigrator(Loader loader){\n  this.loader=loader;\n  loader.setBatchSize(1);\n}\n", "nl": "Construct a CSV migrator"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CMD_WHISHPER_OUTPUT_NPC(String value0){\n  return new SM_SYSTEM_MESSAGE(1400007,value0);\n}\n", "nl": "%0 Whispers:"}
{"code": "public ColorIcon(){\n}\n", "nl": "Creates a new instance of ColorIcon"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.GOODALL);\n}\n", "nl": "this is currently selected?"}
{"code": "public CART(Node rootNode,FeatureDefinition featDef,Properties properties){\n  super(rootNode,featDef,properties);\n}\n", "nl": "Build a new cart with the given node as the root node"}
{"code": "private boolean isOptionEnabled(UrlFilterRuleOption option){\n  loadRuleProperties();\n  return enabledOptions != null && enabledOptions.contains(option);\n}\n", "nl": "Checks if specified option is enabled"}
{"code": "public static ULong valueOf(String value) throws NumberFormatException {\n  return new ULong(value);\n}\n", "nl": "Create an <code>unsigned long</code>"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private FlatServoRail expand(){\n  if (isDynamic())   return this;\n  FlatServoRail ret=new FlatServoRail();\n  ret.component=this.component;\n  ret.color=this.color;\n  return ret;\n}\n", "nl": "Convert a static instance into a dynamic one"}
{"code": "public static void deleteDB(){\n  init(context);\n  Inquiry.get().dropTable(Constants.DATABASE_NAME);\n  Inquiry.deinit();\n}\n", "nl": "Deletes Data Base"}
{"code": "public static boolean isScreenW(int widthDp){\n  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();\n  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;\n  return screenWidth >= widthDp;\n}\n", "nl": "Return true if the width in DP of the device is equal or greater than the given value"}
{"code": "void submit(ProcessAndDisplayImageTask task){\n  initExecutorsIfNeed();\n  taskExecutorForCachedImages.execute(task);\n}\n", "nl": "Submits task to execution pool"}
{"code": "public GroupsGetBannedQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.getBanned\",GetBannedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MessagesGetByIdQuery(VkApiClient client,Actor actor,List<Integer> messageIds){\n  super(client,\"messages.getById\",GetByIdResponse.class);\n  accessToken(actor.getAccessToken());\n  messageIds(messageIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AsyncCatchOptions useBestBall(boolean useBestPokeball){\n  this.useBestPokeball=useBestPokeball;\n  return this;\n}\n", "nl": "Set using the best available ball"}
{"code": "public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n", "nl": "Adds wheel scrolling listener"}
{"code": "public SM_SYSTEM_MESSAGE(int code,Object... params){\n  this.code=code;\n  this.params=params;\n}\n", "nl": "Constructs new <tt>SM_SYSTEM_MESSAGE </tt> packet"}
{"code": "public PhotosPutTagQuery(VkApiClient client,UserActor actor,int photoId,int userId){\n  super(client,\"photos.putTag\",Integer.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public List<Order> searchOrder(OrderReqDto reqDto){\n  return sessionTemplate.selectList(NAMESPACE + \".searchOrder\",reqDto);\n}\n", "nl": "Search orders"}
{"code": "private void measureChildWithDecorationsAndMargin(View child,int widthSpec,int heightSpec){\n  Rect decorRect=new Rect();\n  calculateItemDecorationsForChild(child,decorRect);\n  RecyclerView.LayoutParams lp=(RecyclerView.LayoutParams)child.getLayoutParams();\n  widthSpec=updateSpecWithExtra(widthSpec,lp.leftMargin + decorRect.left,lp.rightMargin + decorRect.right);\n  heightSpec=updateSpecWithExtra(heightSpec,lp.topMargin + decorRect.top,lp.bottomMargin + decorRect.bottom);\n  child.measure(widthSpec,heightSpec);\n}\n", "nl": "Measure view with margins and specs"}
{"code": "public Builder cacheInMemory(boolean cacheInMemory){\n  this.cacheInMemory=cacheInMemory;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached in memory"}
{"code": "public void clearUndos(){\n  undo.discardAllEdits();\n}\n", "nl": "This will discard all undoable edits"}
{"code": "public SecureGetSMSHistoryQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public void showLoading(){\n  switchState(LOADING,null,null,null,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Hide content and show the progress bar"}
{"code": "public void nextGroup() throws SAException {\n  _curValueListHolder=null;\n  if (_curValueList != null) {\n    _curValueList.releaseScan();\n    _curValueList=null;\n  }\n}\n", "nl": "move to next group-value"}
{"code": "public boolean isApplicable(){\n  return getViewer() != null && getViewer() instanceof megan.remote.RemoteServiceBrowser && ((megan.remote.RemoteServiceBrowser)getViewer()).isServiceSelected();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void checkMultiplicationCompatible(final AnyMatrix left,final AnyMatrix right) throws MathIllegalArgumentException {\n  if (left.getColumnDimension() != right.getRowDimension()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,left.getColumnDimension(),right.getRowDimension());\n  }\n}\n", "nl": "Check if matrices are multiplication compatible"}
{"code": "public static boolean isValidClassFile(@NotNull byte[] classData){\n  return classData.length >= 7 && getMagic(classData) == 0xCAFEBABE;\n}\n", "nl": "Returns true if the given class file data represents a valid class"}
{"code": "public DocumentNGramGaussNormSymWinGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  CorrelationWindow=iCorrelationWindow;\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "public EntityQuery cache(boolean useCache){\n  this.useCache=useCache;\n  return this;\n}\n", "nl": "Specifies whether results should be read from the cache (or written to the cache if the results have not yet been cached)"}
{"code": "protected void notifyClickListenersAboutClick(int item){\n  for (  OnWheelClickedListener listener : clickingListeners) {\n    listener.onItemClicked(this,item);\n  }\n}\n", "nl": "Notifies listeners about clicking"}
{"code": "public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){\n  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;\n  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;\n  return this;\n}\n", "nl": "Sets options for memory cache"}
{"code": "public AccountUnregisterDeviceQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n", "nl": "Set device id"}
{"code": "public VideoReportQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){\n  super(client,\"video.report\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public CholeskyDecomposition chol(){\n  return new CholeskyDecomposition(this);\n}\n", "nl": "Cholesky Decomposition"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CURRENT_INCLUDES(int num0){\n  return new SM_SYSTEM_MESSAGE(1300639,num0);\n}\n", "nl": "Users listed as friends: %num0 users"}
{"code": "public void addMatchBlocks(SortedSet<IMatchBlock> matchBlocks){\n  setMatchBlocks(matchBlocks.toArray(new IMatchBlock[matchBlocks.size()]));\n}\n", "nl": "add the matchblocks to the readblock"}
{"code": "@Override public void onCaptureStarted(){\n}\n", "nl": "Is called when screen capturing task was started"}
{"code": "public ScriptingExecutor<T> scriptingExecutor(){\n  return remotingConfigurer.proxy();\n}\n", "nl": "Create a new executor <code>ScriptingExecutor</code> proxy"}
{"code": "private int findNextIndexNonZero(double[] contour,int current){\n  for (int i=current + 1; i < contour.length; i++) {\n    if (contour[i] != 0) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "nl": "To find next NonZero index"}
{"code": "public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){\n  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));\n}\n", "nl": "Creates new AsyncHttpClient using given params"}
{"code": "public static <T>List<T> toList(T obj1,T obj2,T obj3,T obj4){\n  List<T> list=new LinkedList<T>();\n  list.add(obj1);\n  list.add(obj2);\n  list.add(obj3);\n  list.add(obj4);\n  return list;\n}\n", "nl": "Create a list from passed objX parameters"}
{"code": "protected void onViewDetached(){\n}\n", "nl": "Called when view is detached"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-667.24856187,-65.6230835029,-25.4830299460,-12.0588781808,-5.26313542807,669.64856187,68.0230835029,27.8830299460,14.4588781808,7.66313542807};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "@Override public void onUIRefreshPrepare(PtrFrameLayout frame){\n}\n", "nl": "prepare for loading"}
{"code": "@Override public void onFailure(Throwable cause){\n  LOG.error(\"Encountered failures on writing record as (lid = {}, eid = {}) :\",new Object[]{currentLogSegmentSeqNo,currentEntryId,cause});\n  errorsFound.set(true);\n  syncLatch.countDown();\n}\n", "nl": "Invoked if the computation completes unsuccessfully"}
{"code": "public DatabaseGetCountriesByIdQuery(VkApiClient client){\n  super(client,\"database.getCountriesById\",Utils.buildParametrizedType(List.class,Country.class));\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void release(GL10 gl){\n  if (textureId[0] != -1) {\n    gl.glDeleteTextures(1,textureId,0);\n    textureId[0]=-1;\n  }\n}\n", "nl": "release texture"}
{"code": "public void scroll(int itemsToScroll,int time){\n  scroller.forceFinished(true);\n  lastScrollY=scrollingOffset;\n  int offset=itemsToScroll * getItemHeight();\n  scroller.startScroll(0,lastScrollY,0,offset - lastScrollY,time);\n  setNextMessage(MESSAGE_SCROLL);\n  startScrolling();\n}\n", "nl": "Scroll the wheel"}
{"code": "public boolean putImageWithFullPath(String fullPath,Bitmap theBitmap){\n  return !(fullPath == null || theBitmap == null) && saveBitmap(fullPath,theBitmap);\n}\n", "nl": "Saves 'theBitmap' into 'fullPath'"}
{"code": "public void fillInitialCache(){\n  removeAll();\n  Map<String,T> initialCache=itemHandler.getInitialCache();\n  for (  Entry<String,T> entry : initialCache.entrySet()) {\n    put(entry.getKey(),entry.getValue());\n  }\n}\n", "nl": "Removes all items from the cache and fills it with the initial cache"}
{"code": "public void testNonFrameworkParent(){\n  doTestForParentApi(\"MyStyle\",\"apiParentTestAfter1\");\n}\n", "nl": "Tests setting a non-framework parent"}
{"code": "public static long count(Bson q,Class<? extends Bean> t){\n  String collection=MongoHelper.getCollection(t);\n  if (!X.isEmpty(collection)) {\n    return count(collection,q);\n  }\n  return 0;\n}\n", "nl": "count the data, this may cause big issue if the data is huge"}
{"code": "final public void copyToBuffer(ByteBuffer buffer){\n  buffer.put(_buffer,0,_count);\n}\n", "nl": "Copy internal buffer"}
{"code": "public boolean isNaN(){\n  return Double.isNaN(x.getReal()) || Double.isNaN(y.getReal()) || Double.isNaN(z.getReal());\n}\n", "nl": "Returns true if any coordinate of this vector is NaN; false otherwise"}
{"code": "public void createOutFile(String filePath) throws IOException {\n  this.outFile=new ExifInterface(filePath);\n}\n", "nl": "The file after it has been compressed"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  if (viewer != null) {\n    if (TaxonomyData.getName2IdMap().get(viewer.selectedTaxon) != 0) {\n      execute(\"show webpage taxon='\" + viewer.selectedTaxon + \"';\");\n    }\n  }\n}\n", "nl": "action to be performed"}
{"code": "public void testImportSimpleGradleProject() throws IOException, ConfigurationException {\n  VirtualFile moduleRoot=createGradleProjectToImport(dir,MODULE_NAME);\n  GradleModuleImporter.importModules(this,Collections.singletonMap(moduleRoot.getName(),moduleRoot),getProject(),null);\n  assertModuleImported(getProject(),MODULE_NAME,moduleRoot);\n}\n", "nl": "Test importing simple module into even simpler project"}
{"code": "private static BigInteger wrap(final int i){\n  if (i == DatatypeConstants.FIELD_UNDEFINED) {\n    return null;\n  }\n  return BigInteger.valueOf(i);\n}\n", "nl": "TODO: Javadoc"}
{"code": "public void joinResource() throws InterruptedException {\n  if (runObj != null) {\nsynchronized (complete) {\n      if (runObj != null)       complete.wait();\n    }\n  }\n}\n", "nl": "Waits for the resource to complete"}
{"code": "public static void addLineTag(soot.tagkit.Host host,polyglot.ast.Node node){\n  if (soot.options.Options.v().keep_line_number()) {\n    if (node.position() != null) {\n      host.addTag(new soot.tagkit.SourceLineNumberTag(node.position().line(),node.position().line()));\n    }\n  }\n}\n", "nl": "Line Tag Adder"}
{"code": "private static SyntaxStyles createInstance(){\n  SyntaxStyles syntaxstyles=new SyntaxStyles();\n  Properties styles=JarServiceProvider.readProperties(SyntaxStyles.class);\n  syntaxstyles.mergeStyles(styles);\n  return syntaxstyles;\n}\n", "nl": "Create default styles"}
{"code": "private float dp2px(float dp){\n  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,getResources().getDisplayMetrics());\n}\n", "nl": "turn dp to px"}
{"code": "public static boolean hasAncestor(Node node,String ancestorName){\n  Node p=node;\n  while ((p=p.getParentNode()) != null) {\n    if (p.getNodeName().equals(ancestorName))     return true;\n  }\n  return false;\n}\n", "nl": "Verify if <code>node</code> has an ancestor with name <code>ancestorName</code>"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isApplicable(){\n  ChartViewer viewer=(ChartViewer)getViewer();\n  return (viewer.isSeriesTabSelected() && viewer.getChartSelection().getSelectedSeries().size() > 0) || (!viewer.isSeriesTabSelected() && viewer.getChartData() instanceof IChartData && viewer.getChartSelection().getSelectedClasses().size() > 0) || (viewer.getChartData() instanceof IChartData && viewer.getChartSelection().getSelectedAttributes().size() > 0);\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public MessagesGetLongPollHistoryQuery eventsLimit(Integer value){\n  return unsafeParam(\"events_limit\",value);\n}\n", "nl": "Set events limit"}
{"code": "public BaseViewHolder addOnClickListener(int viewId){\n  childClickViewIds.add(viewId);\n  return this;\n}\n", "nl": "add childView id"}
{"code": "public boolean canGetLocation(){\n  return this.canGetLocation;\n}\n", "nl": "Function to check GPS/wifi enabled"}
{"code": "public static void load(){\n  reload();\n}\n", "nl": "Loads list of banned ips"}
{"code": "public PhotosGetUserPhotosQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getUserPhotos\",GetUserPhotosResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "public boolean isIgnore(){\n  return false;\n}\n", "nl": "get the ignore status"}
{"code": "public VideoSearchQuery sort(VideoSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "private void error(String s){\n  System.out.println(\"ClusterUnitDatabase Error: \" + s);\n}\n", "nl": "Displays an error message"}
{"code": "public void addMethodForWrapping(String className,String subSignature){\n  Set<String> methods=this.classList.get(className);\n  if (methods == null) {\n    methods=new HashSet<String>();\n    this.classList.put(className,methods);\n  }\n  methods.add(subSignature);\n}\n", "nl": "Adds a method to which the taint wrapping rules shall apply"}
{"code": "public static void updatePilot(AirMapPilot pilot,@Nullable AirMapCallback<AirMapPilot> callback){\n  PilotService.updatePilot(pilot,callback);\n}\n", "nl": "Update a pilot"}
{"code": "public PhotosEditAlbumQuery uploadByAdminsOnly(Boolean value){\n  return unsafeParam(\"upload_by_admins_only\",value);\n}\n", "nl": "Set upload by admins only"}
{"code": "public JsonHttpResponseHandler(){\n  super(DEFAULT_CHARSET);\n}\n", "nl": "Creates new JsonHttpResponseHandler, with Json String encoding UTF-8"}
{"code": "public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg,String path){\n  return execCommand(new String[]{command},isRoot,isNeedResultMsg,path);\n}\n", "nl": "execute shell command"}
{"code": "public LargeValueFormatter(String appendix){\n  this();\n  mText=appendix;\n}\n", "nl": "Creates a formatter that appends a specified text to the result string"}
{"code": "public void nextGroup(){\n  release();\n}\n", "nl": "move to a new SL that represents a new group of same-values- used in fifo group scanning"}
{"code": "public static void f(String tag,String msg){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg);\n}\n", "nl": "Send a FATAL ERROR log message"}
{"code": "public void remove(IObjectInfo<T> poi){\n  remove_impl(poi,true);\n}\n", "nl": "remove an element described by ObjectInfo"}
{"code": "public MessagesSendQuery randomId(Integer value){\n  return unsafeParam(\"random_id\",value);\n}\n", "nl": "Set random id"}
{"code": "public final boolean isUpdating(){\n  return (mUpdateHeader == getChildAt(0) && mUpdateHeader.getHeight() > 0);\n}\n", "nl": "Is updating?"}
{"code": "public void deletePolicy(String policyName){\n  policies.remove(policyName);\n}\n", "nl": "Delete a policy"}
{"code": "public static boolean nullEquals(String s1,String s2){\n  return (s1 == null ? s2 == null : s1.equals(s2));\n}\n", "nl": "equals() with two strings where either could be null"}
{"code": "public ParameterVisibilityAnnotationAttr(String kind,ArrayList vis_annotations){\n  attr=new AsciiCP(kind + \"Annotations\");\n  list=vis_annotations;\n}\n", "nl": "Note: A visibility annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "public GetEntryTypeDescriptorSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public PhotosSaveWallPhotoQuery(VkApiClient client,UserActor actor,String photo){\n  super(client,\"photos.saveWallPhoto\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photo(photo);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public String toString(){\n  return \"PauseGenerator\";\n}\n", "nl": "Returns the string representation of the object"}
{"code": "public boolean runAfter(List tasks,int size){\n  return false;\n}\n", "nl": "No ordering"}
{"code": "public AemSidekick expandFieldsetIfCollapsed(String fieldsetName){\n  final WebElement fieldset=getFieldsetByName(fieldsetName);\n  bobcatWait.withTimeout(Timeouts.BIG).until(SidekickActions.expandFieldset(fieldset),Timeouts.SMALL);\n  return this;\n}\n", "nl": "Expands fieldset if collapsed based on fieldset name"}
{"code": "public ComponentConfigBuilder add(String itemType,String label,String value){\n  config.add(new ConfigurationEntry(currentTab,itemType,label,value));\n  return this;\n}\n", "nl": "Adds field entry, equivalent of: | tab_name | field type | label | value |"}
{"code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n", "nl": "Creates the default cumulative probability density test input values"}
{"code": "public void requestAssignReturnRoute(int nodeId,int destinationId){\n  enqueue(new AssignReturnRouteMessageClass().doRequest(nodeId,destinationId,getCallbackId()));\n}\n", "nl": "Request the controller to set the return route between two nodes"}
{"code": "public MarketRestoreCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"market.restoreComment\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public String toString(){\n  return \"TokenToWords\";\n}\n", "nl": "Converts this object to its String representation"}
{"code": "public boolean isSetClientAppkey(){\n  return this.clientAppkey != null;\n}\n", "nl": "Returns true if field clientAppkey is set (has been assigned a value) and false otherwise"}
{"code": "public static void w(String msg){\n  if (LOG_ENABLE) {\n    Log.w(TAG,buildMsg(msg));\n  }\n}\n", "nl": "warning log"}
{"code": "public boolean isApplicable(){\n  return getViewer().getSelectedComponent() == getViewer().getPcoaTab();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isEmpty(String str){\n  if (str == null || str.length() == 0 || str.equalsIgnoreCase(\"null\") || str.isEmpty() || str.equals(\"\")) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "return if str is empty"}
{"code": "public boolean isDecaying(){\n  return (getData() & 0x8) != 0;\n}\n", "nl": "Checks if this leaf block is in the process of decaying"}
{"code": "public CART(){\n}\n", "nl": "Build a new empty cart"}
{"code": "public static ServerRequest[] appendCheckChallenge(ServerRequest request){\n  return new ServerRequest[]{request,new ServerRequest(RequestType.CHECK_CHALLENGE,CheckChallengeMessage.getDefaultInstance())};\n}\n", "nl": "Append CheckChallenge request to the given ServerRequest"}
{"code": "public static List<Writable> sampleFromColumn(int count,String columnName,Schema schema,JavaRDD<List<Writable>> data){\n  int colIdx=schema.getIndexOfColumn(columnName);\n  JavaRDD<Writable> ithColumn=data.map(new SelectColumnFunction(colIdx));\n  return ithColumn.takeSample(false,count);\n}\n", "nl": "Randomly sample values from a single column"}
{"code": "private boolean supportsControllableClass(ZWaveNode node){\n  for (  CommandClass commandClass : controllableClasses) {\n    if (node.supportsCommandClass(commandClass) == true) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check if this node supports a controllable command class"}
{"code": "public double dist(double x,double y){\n  double distX=this.x - x;\n  double distY=this.y - y;\n  return Math.sqrt(distX * distX + distY * distY);\n}\n", "nl": "calculate distance"}
{"code": "public SQLQueryTemplatePacket(){\n  throw new IllegalStateException(\"This constructor is required for Externalizable and should not be called directly.\");\n}\n", "nl": "Required for Externalizable"}
{"code": "private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){\n  Element parameter=document.createElement(\"parameter\");\n  parameter.appendChild(parentElement);\n  parameter.setAttribute(\"package\",spec.getPackageName());\n  parameter.setAttribute(\"class\",spec.getClassName());\n  parameter.setAttribute(\"field\",spec.getFieldName());\n}\n", "nl": "Writes out a source/sink specification object for Java static fields"}
{"code": "public boolean isApplicable(){\n  ViewerBase viewer=(ViewerBase)getViewer();\n  return viewer.getGraph().getNumberOfNodes() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CMD_LOCATION_DESC(int worldId,float x,float y,float z){\n  return new SM_SYSTEM_MESSAGE(230038,worldId,x,y,z);\n}\n", "nl": "Coordinates of current location: %WORLDNAME0 Region, X=%1 Y=%2 Z=%3"}
{"code": "public static boolean isScreenW(int widthDp){\n  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();\n  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;\n  return screenWidth >= widthDp;\n}\n", "nl": "Return true if the width in DP of the device is equal or greater than the given value"}
{"code": "private boolean hasDualWieldingSkills(){\n  return owner.getSkillList().isSkillPresent(55) || owner.getSkillList().isSkillPresent(171) || owner.getSkillList().isSkillPresent(143)|| owner.getSkillList().isSkillPresent(144)|| owner.getSkillList().isSkillPresent(207);\n}\n", "nl": "TODO: Move to SkillEngine Use skill stack SKILL_P_EQUIP_DUAL to check that instead"}
{"code": "@Override public void onPatchPackageCheckFail(File patchFile,boolean isUpgradePatch,int errorCode){\n  TinkerLog.i(TAG,\"patchReporter: package check failed. path:%s, isUpgrade:%b, code:%d\",patchFile.getAbsolutePath(),isUpgradePatch,errorCode);\n  if (errorCode == ShareConstants.ERROR_PACKAGE_CHECK_DEX_META_CORRUPTED || errorCode == ShareConstants.ERROR_PACKAGE_CHECK_LIB_META_CORRUPTED || errorCode == ShareConstants.ERROR_PACKAGE_CHECK_RESOURCE_META_CORRUPTED) {\n    Tinker.with(context).cleanPatchByVersion(patchFile);\n  }\n}\n", "nl": "check patch signature, TINKER_ID and meta files"}
{"code": "public Quantum(TimeUnit unit,int interval){\n  this.unit=unit;\n  this.interval=interval;\n}\n", "nl": "Sets-up a new quantum"}
{"code": "protected void init(AbstractTextEditor editor){\n  IJavaElement jElem=getJavaElement(editor);\n  setProj(jElem.getResource().getProject());\n  setRec(jElem.getResource());\n}\n", "nl": "initialize rec and proj"}
{"code": "public static void removePreferenceKey(Context context,String key){\n  getSharedPreferences(context).edit().remove(key).commit();\n}\n", "nl": "Removes a shared preference value from by received key"}
{"code": "public void uploadUpdate(Context context,Account account,OCFile existingFile,Integer behaviour,Boolean forceOverwrite){\n  uploadUpdate(context,account,new OCFile[]{existingFile},behaviour,forceOverwrite);\n}\n", "nl": "Call to update a dingle file already uploaded"}
{"code": "public void testQueryByActivityIdAndBusinessKeyWithChildren(){\n  ExecutionQuery query=runtimeService.createExecutionQuery().activityId(\"receivePayment\").processInstanceBusinessKey(\"BUSINESS-KEY-1\",true);\n  assertEquals(1,query.list().size());\n  assertEquals(1,query.count());\n  Execution execution=query.singleResult();\n  assertNotNull(execution);\n  assertEquals(\"receivePayment\",execution.getActivityId());\n}\n", "nl": "Validate fix for ACT-1896"}
{"code": "public SM_TITLE_INFO(Player player,int titleId){\n  this.action=3;\n  this.playerObjId=player.getObjectId();\n  this.titleId=titleId;\n}\n", "nl": "broad title set"}
{"code": "protected void writePixels() throws IOException {\n  Encoder encoder=new Encoder(width,height,indexedPixels,colorDepth);\n  encoder.encode(out);\n}\n", "nl": "Encodes and writes pixel data"}
{"code": "public static JavaRDD<List<Writable>> zeromeanUnitVariance(Schema schema,JavaRDD<List<Writable>> data,List<String> skipColumns){\n  DataFrame frame=DataFrames.toDataFrame(schema,data);\n  return DataFrames.toRecords(zeromeanUnitVariance(frame,skipColumns)).getSecond();\n}\n", "nl": "Normalize by zero mean unit variance"}
{"code": "public Array2DRowRealMatrix(){\n}\n", "nl": "Creates a matrix with no data"}
{"code": "public TransformProcess build(){\n  return new TransformProcess(this);\n}\n", "nl": "Create the TransformProcess object"}
{"code": "public SiteAdminActionBar expandDropDown(SiteAdminButtons button){\n  actions.moveToElement(getButton(button)).perform();\n  actions.moveByOffset(30,0).perform();\n  actions.click().perform();\n  return this;\n}\n", "nl": "Expands drop down menu related with action bar button"}
{"code": "public FriendsEditQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"friends.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void drawItems(Canvas canvas){\n  canvas.save();\n  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;\n  canvas.translate(PADDING,-top + scrollingOffset);\n  itemsLayout.draw(canvas);\n  canvas.restore();\n}\n", "nl": "Draws items"}
{"code": "public GroupsGetByIdQuery(VkApiClient client,Actor actor){\n  super(client,\"groups.getById\",Utils.buildParametrizedType(List.class,GroupFull.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Action(String type){\n  this(type,new Object[0]);\n}\n", "nl": "Create Action with defined type without any attached payload"}
{"code": "public boolean contains(String aString){\n  return values.indexOf(dictionaryMap().get(aString)) >= 0;\n}\n", "nl": "Returns true if this column contains a cell with the given string, and false otherwise"}
{"code": "public void appendGroup(Group group) throws ObjectAlreadyHasException {\n  assertNotContains(group);\n  groups.add(group.getName());\n}\n", "nl": "Appends a group to the end of this track"}
{"code": "NewProjectDescriptor withMinSdk(@NotNull String minSdk){\n  myMinSdk=minSdk;\n  return this;\n}\n", "nl": "Set a custom minimum SDK version to use in the new project"}
{"code": "public int rank(){\n  return new SingularValueDecomposition(this).rank();\n}\n", "nl": "Matrix rank"}
{"code": "private static Entry[] attributesFor(){\n  final Entry info=new ServiceInfo(\"Transaction Manager\",\"Sun Microsystems, Inc.\",\"Sun Microsystems, Inc.\",com.sun.jini.constants.VersionConstants.SERVER_VERSION,\"\",\"\");\n  final Entry type=new com.sun.jini.lookup.entry.BasicServiceType(\"Transaction Manager\");\n  return new Entry[]{info,type};\n}\n", "nl": "Create the service owned attributes for an Mahalo server"}
{"code": "public static void d(String tag,String msg){\n  if (LOG_ENABLE && Log.isLoggable(tag,Log.DEBUG)) {\n    Log.d(tag,buildMsg(msg));\n  }\n}\n", "nl": "debug log"}
{"code": "public void validate(){\n  Preconditions.checkArgument(getBKClientReadTimeout() * 1000 > getReadLACLongPollTimeout(),\"Invalid timeout configuration : bkcReadTimeoutSeconds (\" + getBKClientReadTimeout() + \") should be longer than readLACLongPollTimeout (\"+ getReadLACLongPollTimeout()+ \")\");\n}\n", "nl": "Validate the configuration"}
{"code": "@CheckReturnValue public AddCmd force(){\n  return new AddCmd(true,all,files);\n}\n", "nl": "Force the add"}
{"code": "public void removeCommandClass(CommandClass commandClass){\n  if (supportedCommandClasses.containsKey(commandClass)) {\n    supportedCommandClasses.remove(commandClass);\n  }\n}\n", "nl": "Removes a command class from the endpoint"}
{"code": "GSPingManager(){\n  super(\"GSPingManager:\" + spaceProxy.getClass().getName() + \":\"+ System.currentTimeMillis());\n  setDaemon(true);\n  start();\n}\n", "nl": "Create a ServiceLeaseManager"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(PearsonDistance.PEARSON_DISTANCE);\n}\n", "nl": "this is currently selected?"}
{"code": "public AdsGetCampaignsQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getCampaigns\",Utils.buildParametrizedType(List.class,Campaign.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static CommandResult execCommand(String[] commands,boolean isRoot){\n  return execCommand(commands,isRoot,true);\n}\n", "nl": "execute shell commands, default return result msg"}
{"code": "public boolean hasSimilarityMatrix(String featureName){\n  return hasSimilarityMatrix(this.getFeatureIndex(featureName));\n}\n", "nl": "true, if given feature name contains similarity matrix"}
{"code": "public ControlLayersOptions build(){\n  ControlLayersOptions options=new ControlLayersOptions();\n  options.position=this.position;\n  options.collapsed=this.collapsed;\n  options.autoZIndex=this.autoZIndex;\n  return options;\n}\n", "nl": "Builds the ControlLayersOptions new instance"}
{"code": "protected void succeeded(Description description){\n}\n", "nl": "Invoked when a test succeeds"}
{"code": "public void pokePocketCrafting(){\n}\n", "nl": "Tell the pocket crafting table to update the result"}
{"code": "private void shoot_Missile(int dir){\n  DecimalFormat df=new DecimalFormat(\"#.##\");\n  if (rnd.nextInt(10) > 8) {\n    mnt.sendMessageInTheRoomPeople(Settings._ANSWER_PANGAPNG_ENEMY_ATTACK + \"\",df.format(this.position.x) + \"\",df.format(this.position.y) + \"\",dir + \"\",Settings.sPangPangEnemyName + Enemy_Missile_ID);\n    Enemy_Missile_ID++;\n  }\n}\n", "nl": "make pangpang enemy missile"}
{"code": "public int size(){\n  return v.length;\n}\n", "nl": "get dimension"}
{"code": "private boolean useCache(){\n  return (api.currentTimeMillis() - lastMapUpdate) < api.getSettings().getMapSettings().getMinRefresh();\n}\n", "nl": "Wether or not to get a fresh copy or use cache;"}
{"code": "@Override public boolean isOverriding(){\n  return (this.keyHook != null) ? this.keyHook.isOverridingPresses : false;\n}\n", "nl": "Is this object currently overriding the default Minecraft KeyBinding object?"}
{"code": "public final TestSubscriber<T> requestedFusionMode(int requestMode){\n  this.requestedFusionMode=requestMode;\n  return this;\n}\n", "nl": "Setup what fusion mode should be requested from the incomining Subscription if it happens to be QueueSubscription"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  getViewer().selectComponent(getViewer().getNJTab());\n}\n", "nl": "action to be performed"}
{"code": "public UsersGetNearbyQuery accuracy(Integer value){\n  return unsafeParam(\"accuracy\",value);\n}\n", "nl": "Current location accuracy in meters"}
{"code": "public GroupsEditLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){\n  super(client,\"groups.editLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  linkId(linkId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isReadOnly() throws IOException {\n  return file == null || !file.canWrite();\n}\n", "nl": "is connected document readonly?"}
{"code": "public DOMStringListImpl(){\n  fStrings=new ArrayList();\n}\n", "nl": "Construct an empty list of DOMStringListImpl"}
{"code": "public static java.util.Date toDate(Timestamp timestamp){\n  if (timestamp == null) {\n    return null;\n  }\n  long milliseconds=timestamp.getTime() + (timestamp.getNanos() / 1000000);\n  return new Date(milliseconds);\n}\n", "nl": "SCIPIO: Converts a timestamp  into a Date"}
{"code": "@deprecated protected int writeValueAndType(boolean hasValue,int value,int node){\n  int offset=write(node);\n  if (hasValue) {\n    offset=writeValueAndFinal(value,false);\n  }\n  return offset;\n}\n", "nl": "/*    "}
{"code": "public MediaWrapper(Media media){\n  if (media == null)   throw new NullPointerException(\"media was null\");\n  mUri=media.getUri();\n  init(media);\n}\n", "nl": "Create a new MediaWrapper"}
{"code": "public static void clearEditorPosition(@NotNull AttributesTransaction attributes){\n  attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_EDITOR_ABSOLUTE_X,null);\n  attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_EDITOR_ABSOLUTE_Y,null);\n}\n", "nl": "Clear all editor absolute positions"}
{"code": "public boolean hasNext(){\n  return false;\n}\n", "nl": "Checks if there are more record(s) to yield"}
{"code": "public static void deleteFile(String path){\n  File file=new File(path);\n  file.deleteOnExit();\n}\n", "nl": "delete file"}
{"code": "public static String nowDateString(){\n  return nowDateString(\"yyyyMMddHHmmss\");\n}\n", "nl": "Return a string formatted as yyyyMMddHHmmss"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void showInformation(Object parentIgnored,String message){\n  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,10000);\n}\n", "nl": "show an information notation"}
{"code": "@Override public Item remove(Item item){\n  return itemStorage.removeItem(item.getObjectId());\n}\n", "nl": "Remove item from storage without changing its state"}
{"code": "public CorpusTest(String testName){\n  super(testName);\n}\n", "nl": "Create the workbench case"}
{"code": "public static boolean putFloat(Context context,String key,float value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putFloat(key,value);\n  return editor.commit();\n}\n", "nl": "put float preferences"}
{"code": "public static void drawButtonYoutube(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){\n  if (!visible)   return;\n  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);\n  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);\n  getTextureHandler().bindModTexture(\"textures/misc/youtube256.png\");\n  getGlStateManager().color(1.0F,1.0F,1.0F);\n  drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14);\n}\n", "nl": "Draws a small button with the youtube logo on it"}
{"code": "public boolean hasURLsForSelection(){\n  return false;\n}\n", "nl": "does this viewer currently have any URLs for selected nodes?"}
{"code": "public String removeContactMech(String contactMechPurposeTypeId){\n  return contactMechIdsMap.remove(contactMechPurposeTypeId);\n}\n", "nl": "Remove the contactMechId from this cart given the contactMechPurposeTypeId"}
{"code": "public boolean isMatchCase(){\n  return isOptionEnabled(UrlFilterRuleOption.MATCH_CASE);\n}\n", "nl": "If rule is case sensitive returns true"}
{"code": "public static void createFlight(AirMapFlight flight,final AirMapCallback<AirMapFlight> listener){\n  String url=flightBaseUrl + flight.getGeometryType().toString();\n  JSONObject params=flight.getAsParams();\n  AirMap.getClient().postWithJsonBody(url,params,new GenericOkHttpCallback(listener,AirMapFlight.class));\n}\n", "nl": "Create a flight for the user"}
{"code": "public void addLive(boolean live){\n  query.append(\" +live:\" + live);\n}\n", "nl": "Adds +live to the query"}
{"code": "public static String toStringPacked(byte[] packed){\n  StringBuilder buf=new StringBuilder();\n  for (  byte a : packed)   buf.append(\" \").append(a & 0xFF);\n  return buf.toString();\n}\n", "nl": "report sequence in human-readable unpacked format"}
{"code": "protected NewsfeedDeleteListQuery listId(int value){\n  return unsafeParam(\"list_id\",value);\n}\n", "nl": "Set list id"}
{"code": "public static PhasedBackoffWaitStrategy withLock(long spinTimeout,long yieldTimeout,TimeUnit units){\n  return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new BlockingWaitStrategy());\n}\n", "nl": "Block with wait/notifyAll semantics"}
{"code": "public static boolean isEquals(Object actual,Object expected){\n  return actual == expected || (actual == null ? expected == null : actual.equals(expected));\n}\n", "nl": "compare two object"}
{"code": "public static JavaRDD<List<List<Writable>>> zeroMeanUnitVarianceSequence(Schema schema,JavaRDD<List<List<Writable>>> sequence){\n  return zeroMeanUnitVarianceSequence(schema,sequence,null);\n}\n", "nl": "Normalize the sequence by zero mean unit variance"}
{"code": "@Override protected int sizeOf(String key,BitmapDrawable value){\n  final int bitmapSize=getBitmapSize(value) / 1024;\n  return bitmapSize == 0 ? 1 : bitmapSize;\n}\n", "nl": "Measure item size in kilobytes rather than units which is more practical for a bitmap cache"}
{"code": "public AggregateConfig(Configuration config,String[] configArgs,ClassLoader loader) throws ConfigurationException {\n  specific=ConfigurationProvider.getInstance(configArgs,loader);\n  common=config;\n}\n", "nl": "Create an AggregateConfig"}
{"code": "public String build(){\n  StringWriter writer=new StringWriter();\n  StreamResult result=new StreamResult(writer);\n  build(result);\n  return writer.toString();\n}\n", "nl": "Build the XML to a string"}
{"code": "public int removeByPrimaryKey(GenericPK primaryKey) throws GenericEntityException {\n  if (primaryKey == null)   return 0;\n  if (Debug.verboseOn())   Debug.logVerbose(\"Removing GenericPK: \" + primaryKey.toString(),module);\n  return genericDAO.delete(primaryKey);\n}\n", "nl": "Remove a Generic Entity corresponding to the primaryKey"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void subscribeTopic(String topicName){\n  if (PrefsHelper.hasFCMToken(mContext)) {\n    FirebaseMessaging.getInstance().subscribeToTopic(topicName);\n  }\n}\n", "nl": "Subscribe to topic"}
{"code": "public static void addMacro(Player player,int macroPosition,String macroXML){\n  if (player.getMacroList().addMacro(macroPosition,macroXML)) {\n    DAOManager.getDAO(PlayerMacrossesDAO.class).addMacro(player.getObjectId(),macroPosition,macroXML);\n  }\n else {\n    DAOManager.getDAO(PlayerMacrossesDAO.class).updateMacro(player.getObjectId(),macroPosition,macroXML);\n  }\n}\n", "nl": "Add macro for player"}
{"code": "public int size(){\n  return m_size;\n}\n", "nl": "get size"}
{"code": "public WallPostQuery markAsAds(Boolean value){\n  return unsafeParam(\"mark_as_ads\",value);\n}\n", "nl": "Set mark as ads"}
{"code": "public static double tfidf(double td,double idf){\n  return td * idf;\n}\n", "nl": "Return td * idf"}
{"code": "public NotificationAdapter(){\n}\n", "nl": "Creates a new instance of NotificationAdapter"}
{"code": "public void preLoadSymbol(){\n  for (  String key : panelMap.keySet()) {\n    List<PopulateDetailsInterface> panelList=panelMap.get(key);\n    for (    PopulateDetailsInterface panel : panelList) {\n      panel.preLoadSymbol();\n    }\n  }\n}\n", "nl": "Method called before symbol loaded"}
{"code": "@Bean public Auth0Client auth0Client(){\n  return new Auth0Client(clientId,issuer);\n}\n", "nl": "Provides Auth0 API access"}
{"code": "@Deployment(resources={\"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml\"}) public void testUserMultipleTimesinvolvedWithProcessInstance(){\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"oneTaskProcess\");\n  runtimeService.addUserIdentityLink(processInstance.getId(),\"kermit\",\"type1\");\n  runtimeService.addUserIdentityLink(processInstance.getId(),\"kermit\",\"type2\");\n  assertEquals(1L,runtimeService.createProcessInstanceQuery().involvedUser(\"kermit\").count());\n}\n", "nl": "Test for ACT-1686"}
{"code": "public static boolean isWifi(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_WIFI) {\n    return true;\n  }\n  return false;\n}\n", "nl": "net is Wifi"}
{"code": "public Bindings add(String property,JTextComponent c,String defaultValue){\n  registerPropertyChangeListener(c);\n  return add(new JTextComponentBinding(property,c,defaultValue));\n}\n", "nl": "Handles JEditorPane, JTextArea, JTextField"}
{"code": "public void reset(){\n  setCapacity(0);\n}\n", "nl": "Reset the buffer to 0 size"}
{"code": "public void resetTracking(){\n  totalTime=0;\n  drawCycles=0;\n}\n", "nl": "RESET PERFORMANCE TRACKING FIELDS"}
{"code": "public void afterLast() throws SQLException {\n  throw new SQLException(\"Command not Supported!\",\"GSP\",-132);\n}\n", "nl": "TYPE_FORWARD_ONLY mode only"}
{"code": "public KeyAlreadySetException(Throwable cause){\n  super(cause);\n}\n", "nl": "Creates new error"}
{"code": "public DatabaseGetCountriesQuery needAll(Boolean value){\n  return unsafeParam(\"need_all\",value);\n}\n", "nl": "Return a full list of all countries"}
{"code": "public static <V,V1 extends V,V2 extends V,V3 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3){\n  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3);\n}\n", "nl": "Create a map from passed nameX, valueX parameters"}
{"code": "public boolean lessThan(PlatformLogicalVersion otherVersion){\n  Boolean specialLessThan=specialLessThan(otherVersion);\n  if (specialLessThan != null)   return specialLessThan;\n  return (_buildNumber < otherVersion._buildNumber) || (_buildNumber == otherVersion._buildNumber && _subBuildNumber < otherVersion._subBuildNumber);\n}\n", "nl": "Returns true if this logical version is less than other ( < )"}
{"code": "@DELETE @Path(\"/applications/{applicationName}/users/{userID}/roles\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Delete a user's role within an application\") @Timed public Response deleteUserRoles(@PathParam(\"applicationName\") @ApiParam(value=\"Application Name\") final Application.Name applicationName,@PathParam(\"userID\") @ApiParam(value=\"User ID\") final Username userID,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  Username userName=authorization.getUser(authorizationHeader);\n  UserInfo admin=authorization.getUserInfo(userName);\n  authorization.checkUserPermissions(userName,applicationName,ADMIN);\n  authorization.deleteUserRole(userID,applicationName,admin);\n  return httpHeader.headers(NO_CONTENT).build();\n}\n", "nl": "Delete a user's role within an application"}
{"code": "public void addOverlappingView(View view){\n  mFrameLayoutOverlappingViewContainer.addView(view,COMMON_LAYOUT_PARAMS);\n  mOverlappingViewsMap.put(view.getId(),view);\n}\n", "nl": "Add overlapping view and place it into overlapping container"}
{"code": "@Override public String createToken(int my_slot,int rac_count,int rac_size,String region){\n  int regionCount=rac_count * rac_size;\n  return initialToken(regionCount,my_slot,regionOffset(region)).toString();\n}\n", "nl": "Creates a token given the following parameter"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof IViewerWithFindToolBar && ((IViewerWithFindToolBar)getViewer()).isShowFindToolBar();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void unregisterData(){\n  userData=null;\n}\n", "nl": "Removes the UserData cache from this user"}
{"code": "public ControlOptions build(){\n  ControlOptions options=new ControlOptions();\n  options.position=position;\n  return options;\n}\n", "nl": "Builds the ControlOptions new instance"}
{"code": "public void clearCheckStates(){\n  for (int i=0; i < expandableList.groups.size(); i++) {\n    CheckedExpandableGroup group=(CheckedExpandableGroup)expandableList.groups.get(i);\n    group.clearSelections();\n  }\n}\n", "nl": "Clear any choices previously checked"}
{"code": "public Value nullIfExpression(Value val1,Value val2){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a nullif expression"}
{"code": "public void addGlobalComplexTypeDecl(XSComplexTypeDecl decl){\n  fGlobalTypeDecls.put(decl.getName(),decl);\n  decl.setNamespaceItem(this);\n}\n", "nl": "register one global complex type"}
{"code": "public ItemToSkillTreeCursor queryItemToSkillTreeItem(long id){\n  return mHelper.queryItemToSkillTreeItem(id);\n}\n", "nl": "ITEM TO SKILL TREE QUERIES"}
{"code": "public static byte[] sha3(byte[] input,int offset,int length){\n  Keccak.DigestKeccak kecc=new Keccak.Digest256();\n  kecc.update(input,offset,length);\n  return kecc.digest();\n}\n", "nl": "Keccak-256 hash function"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set drawer=\" + ViewerBase.DiagramType.RectangularCladogram + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public Iterator<T> iterator(){\n  return iterator;\n}\n", "nl": "gets the underlying getLetterCodeIterator"}
{"code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n", "nl": "Removes wheel scrolling listener"}
{"code": "public static String[] splitMultiplePacket(String packet){\n  String _partitioningPacket[]=packet.split(Settings.sReceiverSplitMultipleToken);\n  return _partitioningPacket;\n}\n", "nl": "split the multiple packet to packets"}
{"code": "public static void enableLogging(boolean enable){\n  AirMapLog.ENABLED=enable;\n}\n", "nl": "Enables logging from the network requests for debugging purposes"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.CHISSQUARE);\n}\n", "nl": "this is currently selected?"}
{"code": "@Override public void clear(){\n  super.clear();\n  boot=null;\n}\n", "nl": "Clear both references"}
{"code": "public static MerkleRoot computeMerkleRoot(List<? extends MerkleTreeNode> nodes){\n  List<MerkleTreeNode> merkleTreeNodeList=new ArrayList<>(nodes.size());\n  for (  MerkleTreeNode n : nodes) {\n    merkleTreeNodeList.add(new PrunedNode(n.getID(),0));\n  }\n  MerkleTreeNode rootNode=compress(merkleTreeNodeList).get(0);\n  return new MerkleRoot(rootNode.getID());\n}\n", "nl": "Digest a list of nodes into a single root digest"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "public Single<AuthResult> signInWithEmailAndPassword(final String _email,final String _password){\n  return observeSingleValue(firebaseAuth.signInWithEmailAndPassword(_email,_password));\n}\n", "nl": "Allows to _signin_ a user with a given email address and password"}
{"code": "public int append_file1(String appender_file_id,long file_size,UploadCallback callback) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.append_file(parts[0],parts[1],file_size,callback);\n}\n", "nl": "append file to storage server (by callback)"}
{"code": "public void clearSubFilters(){\n  subFilters.clear();\n}\n", "nl": "Clears all the subfilters from the Parent Filter"}
{"code": "public void stopAnimate(){\n  isPlaying=false;\n  mLoopAnimateY=0;\n  invalidate();\n}\n", "nl": "stop the loop animate"}
{"code": "public static AztecCode encode(byte[] data){\n  return encode(data,DEFAULT_EC_PERCENT,DEFAULT_AZTEC_LAYERS);\n}\n", "nl": "Encodes the given binary content as an Aztec symbol"}
{"code": "public boolean isDescendant(Integer idAbove,Integer idBelow){\n  return id2Address.get(idBelow).startsWith(id2Address.get(idAbove));\n}\n", "nl": "is the class below a descendant of the class above?"}
{"code": "public boolean optimizeScanForSingleObject(){\n  return _supportFifoPerSegment && getNumSegments() == 1 && size() <= 1;\n}\n", "nl": "return true if we can save iterator creation and get a single entry"}
{"code": "private static void markChecked(File templateFile,boolean createWithProject){\n  markChecked(templateFile.getParentFile().getName(),templateFile.getName(),createWithProject);\n}\n", "nl": "Marks that we've already checked the given template in a new project or existing project context"}
{"code": "public boolean gotoPrevious(){\n  currentIterator=null;\n  currentId=null;\n  return isCurrentSet();\n}\n", "nl": "goto the previous object"}
{"code": "public final boolean isOverridingUiMode(){\n  return (myOverride & CFG_UI_MODE) != 0;\n}\n", "nl": "Returns true if the UI mode is overridden"}
{"code": "public void enterFullScreen(){\n  View decorView=mContext.getWindow().getDecorView();\n  hideSystemUI(decorView);\n  for (  View view : views) {\n    view.setVisibility(View.GONE);\n    view.invalidate();\n  }\n}\n", "nl": "call this method to enter full screen"}
{"code": "public Builder primaryDarkColor(int colorPrimaryDark){\n  this.buttonPressedBackgroundColor=colorPrimaryDark;\n  return this;\n}\n", "nl": "Set the dark primary color (background color of the buttons when clicked)"}
{"code": "public long snapshotSize(){\n  return snapshotBytes;\n}\n", "nl": "Returns the size of the current snapshot file in bytes;"}
{"code": "public DistinctResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private void drawItems(Canvas canvas){\n  canvas.save();\n  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;\n  canvas.translate(PADDING,-top + scrollingOffset);\n  itemsLayout.draw(canvas);\n  canvas.restore();\n}\n", "nl": "Draws items"}
{"code": "public void sendRequest(String url,final ISimpleRequestCallback uiUpdater){\n  Request request=new Request.Builder().url(url).build();\n  sendRequest(request,uiUpdater);\n}\n", "nl": "Simple HTTP GET request"}
{"code": "public boolean isComplete(){\n  return !(Double.isNaN(getXmin()) || Double.isNaN(getXmax()));\n}\n", "nl": "determine if interval is fully specified"}
{"code": "public static void addRequest(AbstractAI ai2,Player player,int requestId,AI2Request request,Object... requestParams){\n  addRequest(ai2,player,requestId,ai2.getObjectId(),request,requestParams);\n}\n", "nl": "Add RequestResponseHandler to player with senderId equal to objectId of AI owner"}
{"code": "public MarketRestoreQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean declaresFieldByName(String name){\n  checkLevel(SIGNATURES);\n  for (  SootField field : fields) {\n    if (field.getName().equals(name))     return true;\n  }\n  return false;\n}\n", "nl": "Does this class declare a field with the given name?"}
{"code": "public UnknownDependencyException(){\n}\n", "nl": "Constructs a new UnknownDependencyException"}
{"code": "public MarketSearchQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of items to return"}
{"code": "@deprecated public boolean isFrozen(){\n  return this.frozen;\n}\n", "nl": "/*    "}
{"code": "private static boolean permissionExists(String permission){\n  Integer minVersion=MIN_SDK_PERMISSIONS.get(permission);\n  return minVersion == null || Build.VERSION.SDK_INT >= minVersion;\n}\n", "nl": "Returns true if the permission exists in this SDK version"}
{"code": "public static String replaceString(String mainString,String oldString,String newString){\n  return StringUtil.replaceString(mainString,oldString,newString);\n}\n", "nl": "Replaces all occurrences of oldString in mainString with newString"}
{"code": "public void lockUserInput(){\n  locked=true;\n  commandManager.setEnableCritical(false);\n}\n", "nl": "ask view to prevent user input"}
{"code": "private <E>E castConcept(Class<E> type){\n  try {\n    return type.cast(this);\n  }\n catch (  ClassCastException e) {\n    throw new InvalidConceptTypeException(ErrorMessage.INVALID_OBJECT_TYPE.getMessage(this,type));\n  }\n}\n", "nl": "Helper method to cast a concept to it's correct type"}
{"code": "public void addEntry(Label start,Label end,Label handler,CP cat){\n  addEntry(new CatchEntry(start,end,handler,cat));\n}\n", "nl": "add an entry to the catch table"}
{"code": "@deprecated public boolean isParseAllStyles(){\n  return this._parseAllStyles;\n}\n", "nl": "/*     "}
{"code": "public static boolean isConnected(Context context){\n  NetworkInfo info=NetworkUtil.getNetworkInfo(context);\n  return (info != null && info.isConnected());\n}\n", "nl": "Check if there is any connectivity"}
{"code": "public FriendsGetRequestsQueryWithNeedMutual(VkApiClient client,UserActor actor,Boolean needMutual){\n  super(client,\"friends.getRequests\",GetRequestsNeedMutualResponse.class);\n  accessToken(actor.getAccessToken());\n  needMutual(needMutual);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private boolean peekRead(String expectedCharacters) throws CompileException, IOException {\n  if (this.peek() == -1)   return false;\n  if (expectedCharacters.indexOf((char)this.nextChar) == -1)   return false;\n  this.sb.append((char)this.nextChar);\n  this.nextChar=this.nextButOneChar;\n  this.nextButOneChar=-1;\n  return true;\n}\n", "nl": "Consumes the next character iff it is one of the <var>expectedCharacters</var>"}
{"code": "public VideoAddToAlbumQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Set album ids"}
{"code": "public CatchOptions maxRazzberries(int maxRazzBerries){\n  this.maxRazzBerries=maxRazzBerries;\n  return this;\n}\n", "nl": "Set a maximum number of razzberries"}
{"code": "private void addNode(int nodeId){\n  ZWaveEvent zEvent=new ZWaveInitializationStateEvent(nodeId,ZWaveNodeInitStage.EMPTYNODE);\n  notifyEventListeners(zEvent);\n  ioHandler.deviceDiscovered(nodeId);\n  new ZWaveInitNodeThread(this,nodeId).start();\n}\n", "nl": "Add a node to the controller"}
{"code": "public GroupsGetCallbackSettingsQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.getCallbackSettings\",GetCallbackSettingsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void detach(AppCompatActivity activity){\n  attrViewMaps.remove(activity.hashCode());\n}\n", "nl": "this method should be called in Activity onDestroy method"}
{"code": "protected MarketReportQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item id"}
{"code": "@RequestMapping(value=\"/api/assets\",method=RequestMethod.POST) public SourceAsset importSourceAsset(@RequestBody SourceAsset sourceAsset) throws ExecutionException, InterruptedException {\n  logger.debug(\"Importing source asset\");\n  String normalizedContent=NormalizationUtils.normalize(sourceAsset.getContent());\n  PollableFuture<Asset> assetFuture=assetService.addOrUpdateAssetAndProcessIfNeeded(sourceAsset.getRepositoryId(),normalizedContent,sourceAsset.getPath());\n  sourceAsset.setAddedAssetId(assetFuture.get().getId());\n  sourceAsset.setPollableTask(assetFuture.getPollableTask());\n  return sourceAsset;\n}\n", "nl": "Creates the source asset and kicks off extraction process"}
{"code": "public CM_LEGION(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of CM_LEGION packet"}
{"code": "public static boolean isValidUrl(String url){\n  return Patterns.WEB_URL.matcher(url).matches();\n}\n", "nl": "Check if a url is valid"}
{"code": "public static void makeText(Context context,String msg,int length,int type){\n  makeText(context,msg,length,type,0,0);\n}\n", "nl": "no pop Anim ,animview at left"}
{"code": "public void expand(TreePath[] paths){\n  for (  TreePath path : paths) {\n    expandJTreeNode(dataTree,dataTree.getModel(),path.getLastPathComponent(),dataTree.getRowForPath(path),0);\n  }\n}\n", "nl": "expand an array of paths"}
{"code": "public boolean isTransactionComplete(){\n  return transactionComplete;\n}\n", "nl": "Checks if the processor marked the transaction as complete"}
{"code": "public SyntheticAttr(){\n}\n", "nl": "Create a new synthetic attribute"}
{"code": "private void cancelDuelRequest(Player owner,Player target){\n  log.debug(\"[Duel] Player \" + owner.getName() + \" cancelled his duel request with \"+ target.getName());\n  PacketSendUtility.sendPacket(target,new SM_DUEL_REQUEST_CANCEL(1300134,owner.getName()));\n  PacketSendUtility.sendPacket(owner,SM_SYSTEM_MESSAGE.STR_DUEL_WITHDRAW_REQUEST(target.getName()));\n}\n", "nl": "Cancels the duel request"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void unSubscribe(Subscription subscription){\n  if (subscription != null && subscription.isUnsubscribed())   subscription.unsubscribe();\n}\n", "nl": "un-subscribe to avoid leak memory"}
{"code": "public String toString(){\n  return \"FileAudioPlayer\";\n}\n", "nl": "Returns the name of this audioplayer"}
{"code": "public static int[] shuffle(int[] intArray){\n  if (intArray == null) {\n    return null;\n  }\n  return shuffle(intArray,getRandom(intArray.length));\n}\n", "nl": "Shuffling algorithm, Randomly permutes the specified int array using a default source of randomness"}
{"code": "public static SM_SYSTEM_MESSAGE STR_REGISTER_ITEM_MSG_UPGRADE_CANNOT(DescriptionId nameId){\n  return new SM_SYSTEM_MESSAGE(1402397,new Object[]{nameId});\n}\n", "nl": "Purification System"}
{"code": "public Distribution(){\n  hDistro=new TreeMap();\n}\n", "nl": "Creates a new instance of Distribution"}
{"code": "public WidgetsGetCommentsQuery url(String value){\n  return unsafeParam(\"url\",value);\n}\n", "nl": "Set url"}
{"code": "protected void notifyDataChangedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onChanged();\n    }\n  }\n}\n", "nl": "Notifies observers about data changing"}
{"code": "public DataType(Class<T> clazz,BiConsumer<PacketBuffer,T> writer,Function<PacketBuffer,T> reader){\n  this.clazz=clazz;\n  this.writer=writer;\n  this.reader=reader;\n}\n", "nl": "Creates a new data type"}
{"code": "public boolean isApplicable(){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public MarketGetCommentsQuery sort(String value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Comments sort order (\"asc\" - from old to new, \"desc\" - from new to old)"}
{"code": "public static Map<String,Object> sendOrderChangeNotification(DispatchContext ctx,Map<String,? extends Object> context){\n  return sendOrderNotificationScreen(ctx,context,\"PRDS_ODR_CHANGE\");\n}\n", "nl": "Service to email a customer with order changes"}
{"code": "public void collapse(DefaultMutableTreeNode v){\n  if (v == null)   v=this.root;\n  for (Enumeration descendants=v.depthFirstEnumeration(); descendants.hasMoreElements(); ) {\n    v=(DefaultMutableTreeNode)descendants.nextElement();\n    this.tree.collapsePath(new TreePath(v.getPath()));\n  }\n}\n", "nl": "collapse the given node   or root"}
{"code": "public MarketSearchQueryWithExtended tags(List<Integer> value){\n  return unsafeParam(\"tags\",value);\n}\n", "nl": "Comma-separated tag ids list"}
{"code": "@Override public synchronized CompletableFuture<Void> disconnect(){\n  CompletableFuture<Void> disconnectFuture=new CompletableFuture<>();\n  isFenced.set(true);\n  (dispatcher != null ? dispatcher.disconnect() : CompletableFuture.completedFuture(null)).thenCompose(null).thenRun(null).exceptionally(null);\n  return disconnectFuture;\n}\n", "nl": "Disconnect all consumers attached to the dispatcher and close this subscription"}
{"code": "public static void showCreateAircraft(){\n  Context context=AirMap.getInstance().getContext();\n  Intent intent=new Intent(context,CreateEditAircraftActivity.class);\n  context.startActivity(intent);\n}\n", "nl": "Display UI to create an aircraft"}
{"code": "public void updateView(){\n}\n", "nl": "override if necessary"}
{"code": "@NonNull public static String joinAddresses(String firstPart,String secondPart){\n  return escape(firstPart) + \"&\" + escape(secondPart);\n}\n", "nl": "Given two arbitrary strings representing parts of an address, join them in a guaranteed-unique way, by HTML-escaping both parts and joining them with '&'"}
{"code": "public static DiscCacheAware createReserveDiscCache(File cacheDir){\n  File individualDir=new File(cacheDir,\"uil-images\");\n  if (individualDir.exists() || individualDir.mkdir()) {\n    cacheDir=individualDir;\n  }\n  return new TotalSizeLimitedDiscCache(cacheDir,2 * 1024 * 1024);\n}\n", "nl": "Creates reserve disc cache which will be used if primary disc cache becomes unavailable"}
{"code": "public static boolean isDarkThemeEnable(){\n  return isDarkThemeEnable;\n}\n", "nl": "getter method to check if dark theme is enabled"}
{"code": "@Override public boolean equals(Object other){\n  return this == other || other instanceof JsonNull;\n}\n", "nl": "All instances of JsonNull are the same"}
{"code": "public void onTargetClick(TapTargetView view){\n  view.dismiss(true);\n}\n", "nl": "Signals that the user has clicked inside of the target"}
{"code": "public DocsGetByIdQuery(VkApiClient client,UserActor actor,String... docs){\n  super(client,\"docs.getById\",Utils.buildParametrizedType(List.class,Doc.class));\n  accessToken(actor.getAccessToken());\n  docs(docs);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Bitmap scaleImage(Bitmap src,float scaleWidth,float scaleHeight){\n  if (src == null) {\n    return null;\n  }\n  Matrix matrix=new Matrix();\n  matrix.postScale(scaleWidth,scaleHeight);\n  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);\n}\n", "nl": "scale image"}
{"code": "private void clearDictionaryCache(){\n  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();\n  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());\n  for (int i=0; i < reverseDictionaries.size(); i++) {\n    Dictionary dictionary=reverseDictionaries.get(i);\n    dictionary.clear();\n  }\n}\n", "nl": "This method will clear the dictionary access count so that any unused column can be removed from the cache"}
{"code": "public GroupsEditQuery wall(GroupsEditWall value){\n  return unsafeParam(\"wall\",value);\n}\n", "nl": "Wall settings"}
{"code": "protected void writeShort(int value) throws IOException {\n  out.write(value & 0xff);\n  out.write((value >> 8) & 0xff);\n}\n", "nl": "Write 16-bit value to output stream, LSB first"}
{"code": "@Override public int[] makeInverseCumulativeTestValues(){\n  return new int[]{0,0,1,1,1,1,5,4,4,4,4,5};\n}\n", "nl": "Creates the default inverse cumulative probability density test expected values"}
{"code": "static boolean isYearLeap(int y){\n  if (((y % 4 == 0) && (y % 100 != 0)) || (y % 400 == 0)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "cheking - is the year leap?"}
{"code": "public MessagesGetChatQueryWithFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public static String format(Date date){\n  return format(date,false,TIMEZONE_UTC);\n}\n", "nl": "Format a date into 'yyyy-MM-ddThh:mm:ssZ' (default timezone, no milliseconds precision)"}
{"code": "public LargeValueFormatter(String appendix){\n  this();\n  mText=appendix;\n}\n", "nl": "Creates a formatter that appends a specified text to the result string"}
{"code": "public boolean removeAssociation(int node){\n  return removeAssociation(node,0);\n}\n", "nl": "Removes an association node"}
{"code": "public Long generate(Class<?> clazz){\n  String idGeneratorKey=RedisKeys.keyOfIdGenerator(clazz);\n  return redis.opsForValue().increment(idGeneratorKey,1);\n}\n", "nl": "Generate id of the class"}
{"code": "private void refitText(String text,int textWidth){\n  if (textWidth <= 0 || text == null || text.length() == 0)   return;\n  int targetWidth=(textWidth - this.getPaddingLeft() - this.getPaddingRight()) / 3;\n  this.setTextSize(TypedValue.COMPLEX_UNIT_PX,targetWidth);\n}\n", "nl": "Resize the text so that it fits"}
{"code": "@deprecated public int parseOffsetLocalizedGMT(String text,ParsePosition pos){\n  return parseOffsetLocalizedGMT(text,pos,null);\n}\n", "nl": "/*     "}
{"code": "private String abbreviateName(String name){\n  name=name.replace(\"http://\",\"\").replace(\":8080\",\"\").replaceAll(\"/MeganServer$\",\"\");\n  if (name.length() <= 18)   return name;\n  return \"...\" + name.substring(name.length() - 15);\n}\n", "nl": "abbreviate name"}
{"code": "public MarketSearchQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of items to return"}
{"code": "public boolean hasAtMeMsg(String groupId){\n  return atMeGroupList.contains(groupId);\n}\n", "nl": "check if the input groupId in atMeGroupList"}
{"code": "public AdsCheckLinkQuery campaignId(Integer value){\n  return unsafeParam(\"campaign_id\",value);\n}\n", "nl": "Campaign ID"}
{"code": "@Override public void schedule(String jobName,String poolName,String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime,int maxRetry) throws GenericServiceException {\n  schedule(jobName,poolName,serviceName,context,startTime,frequency,interval,count,endTime,maxRetry,(String)null);\n}\n", "nl": "SCIPIO: This is now a delegating method"}
{"code": "public void pushBackLine(String line){\n  if (pushedBackLine != null)   System.err.println(\"Error: Push back line, but buffer not empty\");\n  pushedBackLine=line;\n}\n", "nl": "push back a line"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public PhotosGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id"}
{"code": "public AppsGetQuery(VkApiClient client){\n  super(client,\"apps.get\",GetResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void changeButtonTextColor(int resId){\n  this.slickButtonBackgroundColor=resId;\n  slickFormSubmitButton.setTextColor(slickButtonBackgroundColor);\n  slickFormSubmitButton.invalidate();\n}\n", "nl": "Change the submit button's text color to the one provided"}
{"code": "public GroupsGetCallbackConfirmationCodeQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.getCallbackConfirmationCode\",GetCallbackConfirmationCodeResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "_ProguardLexer(java.io.Reader in){\n  this.zzReader=in;\n}\n", "nl": "Creates a new scanner"}
{"code": "@Override public final void confirmEquipmentStateOK(final String pDescription){\n  sendCommfaultTag(this.equipmentConfiguration.getCommFaultTagId(),equipmentConfiguration.getName(),!this.equipmentConfiguration.getCommFaultTagValue(),pDescription);\n  Map<Long,SubEquipmentConfiguration> subEquipmentConfigurations=equipmentConfiguration.getSubEquipmentConfigurations();\n  for (  SubEquipmentConfiguration subEquipmentConfiguration : subEquipmentConfigurations.values()) {\n    sendCommfaultTag(subEquipmentConfiguration.getCommFaultTagId(),subEquipmentConfiguration.getName(),!subEquipmentConfiguration.getCommFaultTagValue(),pDescription);\n  }\n}\n", "nl": "Sends a note to the business layer, to confirm that the equipment is properly configured, connected to its source and running"}
{"code": "public VideoDeleteQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void testSimpleCase() throws Exception {\n  FileDownloader downloader=Mockito.mock(FileDownloader.class);\n  Mockito.when(downloader.download(Matchers.any(File.class))).thenReturn(ImmutableList.of(Pair.create(myDistributionFile,myDescription)));\n  DistributionService service=new DistributionService(downloader,CACHE_PATH,myDistributionFileUrl);\n  assertEquals(0.7,service.getSupportedDistributionForApiLevel(16),0.0001);\n}\n", "nl": "Test that we get back the correct sum for an api level"}
{"code": "@Override public int next(){\n  next=daa2QuerySAMIterator.next();\n  return countNewLines(next.get2());\n}\n", "nl": "gets the next matches"}
{"code": "public MessagesGetChatQueryWithChatIds(VkApiClient client,UserActor actor,Integer... chatIds){\n  super(client,\"messages.getChat\",Utils.buildParametrizedType(List.class,Chat.class));\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean contains(short value){\n  return lastIndexOf(value) >= 0;\n}\n", "nl": "Searches the list for <tt>value</tt>"}
{"code": "private void addAnnotationOnSource(ITextUnit textUnit,Issue issue){\n  TextContainer sourceContainer=textUnit.getSource();\n  addAnnotation(sourceContainer,issue);\n}\n", "nl": "Adds an issue annotation on the source of the given text unit"}
{"code": "public boolean optimizeScanForSingleObject(){\n  return size() <= 1;\n}\n", "nl": "return true if we can save iterator creation and get a single entry"}
{"code": "public SourceAttr(CP name){\n  this.name=name;\n}\n", "nl": "Create a source file attribute, with more control over attribute name"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public boolean increment(short key){\n  return adjustValue(key,(long)1);\n}\n", "nl": "Increments the primitive value mapped to key by 1"}
{"code": "public SecureSendSMSNotificationQuery(VkApiClient client,ServiceActor actor,int userId,String message){\n  super(client,\"secure.sendSMSNotification\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n  userId(userId);\n  message(message);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override @NotNull public OptionalPlayer owner(){\n  if (owner != null)   return owner;\n  OptionalPlayer cityOwner=island.getCity().owner();\n  if (cityOwner.getType() != Identity.Type.ADMINS)   return cityOwner;\n  return admin();\n}\n", "nl": "The actual owner of the plot"}
{"code": "public void lockUserInput(){\n  isLocked=true;\n  getCommandManager().setEnableCritical(false);\n  searchManager.getFindDialogAsToolBar().setEnableCritical(false);\n  frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  statusBar.setText2(\"Busy...\");\n}\n", "nl": "ask view to prevent user input"}
{"code": "public DistinctPropertiesKey(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public PhotosGetCommentsQueryWithExtended sort(PhotosGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public static void hidekeyboard(Activity activity){\n  try {\n    ((InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n}\n", "nl": "hide keyboard"}
{"code": "public static List<List<List<Writable>>> sampleSequence(int count,JavaRDD<List<List<Writable>>> data){\n  return data.takeSample(false,count);\n}\n", "nl": "Randomly sample a number of sequences from the data"}
{"code": "public void stopSchedule(){\n  StatLog.d(LOG_TAG,\"stopSchedule()\");\n  statiPollMgr.stop();\n}\n", "nl": "stop Schedule"}
{"code": "public AuthenticationToken(){\n}\n", "nl": "Empty construct"}
{"code": "private static Long[] modify(Integer[] order,Long[] array){\n  Long[] tmp=new Long[order.length];\n  int pos=0;\n  for (  Integer id : order) {\n    if (id < array.length)     tmp[pos++]=array[id];\n  }\n  return tmp;\n}\n", "nl": "modify an array according to the given order"}
{"code": "public static String removeLast(String input,int amount){\n  if (input.length() >= amount) {\n    return input.substring(0,input.length() - amount);\n  }\n else {\n    return input;\n  }\n}\n", "nl": "Remove last characters of a string"}
{"code": "@Override public int[] makeDensityTestPoints(){\n  return new int[]{-1,0,1,2,3,4,5,10};\n}\n", "nl": "Creates the default probability density test input values"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public SecureSetCounterQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public AppsGetCatalogQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public WallSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void checkForNullKey(String key){\n  if (key == null) {\n    throw new NullPointerException();\n  }\n}\n", "nl": "null keys would corrupt the shared pref file and make them unreadable this is a preventive measure"}
{"code": "@Override public void connectionLost(Throwable cause){\n  onDisconnect(false);\n}\n", "nl": "Called when the connection to the server was lost"}
{"code": "public final int establishedFusionMode(){\n  return establishedFusionMode;\n}\n", "nl": "Returns the established fusion mode or -1 if it was not enabled"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public UtilsGetServerTimeQuery(VkApiClient client){\n  super(client,\"utils.getServerTime\",Integer.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){\n  return !canChildScrollUp(content);\n}\n", "nl": "Default implement for check can perform pull to refresh"}
{"code": "public static MonsterStatusFragment newInstance(long monsterId){\n  Bundle args=new Bundle();\n  args.putLong(ARG_MONSTER_ID,monsterId);\n  MonsterStatusFragment f=new MonsterStatusFragment();\n  f.setArguments(args);\n  return f;\n}\n", "nl": "Create a new instance of the fragment for a monster"}
{"code": "@Override @Test public void testConstant(){\n  double[] noVariance=new double[]{1,1,1,1};\n  double[] values=new double[]{1,2,3,4};\n  Assert.assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance,values)));\n}\n", "nl": "Constant column"}
{"code": "public void removeClass(int classificationId,int classId){\n  first[classificationId].put(classId,null);\n  first[classificationId].remove(classId);\n  last[classificationId].put(classId,null);\n  last[classificationId].remove(classId);\n  size[classificationId].put(classId,null);\n  size[classificationId].remove(classId);\n}\n", "nl": "remove the given class from the given classification"}
{"code": "protected UsersGetNearbyQuery latitude(float value){\n  return unsafeParam(\"latitude\",value);\n}\n", "nl": "Geographic latitude of the place a user is located, in degrees (from -90 to 90)"}
{"code": "public int read(byte[] bytes,int offset,int len) throws IOException {\n  int count=ins.read(bytes,offset,len);\n  position+=count;\n  return count;\n}\n", "nl": "read some bytes"}
{"code": "public void removeChangingListener(OnWheelChangedListener listener){\n  changingListeners.remove(listener);\n}\n", "nl": "Removes wheel changing listener"}
{"code": "public ExecuteBatchQuery(VkApiClient client,Actor actor,AbstractQueryBuilder... requests){\n  super(client,\"execute\",JsonElement.class);\n  accessToken(actor.getAccessToken());\n  requests(requests);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean hasOption(String option){\n  return commandLine.hasOption(option);\n}\n", "nl": "Determine if an option was provided by the user via the CLI"}
{"code": "public static final void removePlayer(Player player){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new PlayerGroupLeavedEvent(group,player));\n  }\n}\n", "nl": "Remove player from group (normal leave, or kick offline player)"}
{"code": "public GeoServerNode(FileSystemInterface handler,GeoServerConnection connection){\n  super(connection.getConnectionName());\n  this.connection=connection;\n  this.handler=handler;\n}\n", "nl": "Instantiates a new GeoServerNode"}
{"code": "public Vector copy(Vector vec){\n  x=vec.x;\n  y=vec.y;\n  z=vec.z;\n  return this;\n}\n", "nl": "Copies another vector"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static ContextSet fromEntries(Iterable<Map.Entry<String,String>> iterable){\n  if (iterable == null) {\n    throw new NullPointerException(\"iterable\");\n  }\n  MutableContextSet set=new MutableContextSet();\n  set.addAll(iterable);\n  return set.immutableCopy();\n}\n", "nl": "Creates a ContextSet from an existing iterable of Map Entries"}
{"code": "public void destroyView() throws CanceledException {\n  super.destroyView();\n}\n", "nl": "ask view to destroy itself"}
{"code": "private boolean typeSupportsConstants(Type returnType){\n  if (returnType == IntType.v() || returnType == LongType.v() || returnType == FloatType.v() || returnType == DoubleType.v())   return true;\n  if (returnType instanceof RefType)   if (((RefType)returnType).getClassName().equals(\"java.lang.String\"))   return true;\n  return false;\n}\n", "nl": "Checks whether constant handling is supported for the given type"}
{"code": "public void logout(String username) throws AuthenticatorException {\n  Debug.logInfo(this.getClass().getName() + \" Authenticator logout()\",module);\n}\n", "nl": "Logs a user out"}
{"code": "public static boolean isNegativeVInt(byte value){\n  return value < -120 || (value >= -112 && value < 0);\n}\n", "nl": "Given the first byte of a vint/vlong, determine the sign"}
{"code": "public T onCreateViewHolder(ViewGroup parent,int itemType){\n  return onCreateViewHolderItemType(parent,ItemType.values()[itemType]);\n}\n", "nl": "wrapper method"}
{"code": "public static byte[] encrypt(final SecretKeySpec key,final byte[] iv,final byte[] message) throws GeneralSecurityException {\n  final Cipher cipher=Cipher.getInstance(AES_MODE);\n  IvParameterSpec ivSpec=new IvParameterSpec(iv);\n  cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);\n  byte[] cipherText=cipher.doFinal(message);\n  return cipherText;\n}\n", "nl": "More flexible AES encrypt that doesn't encode"}
{"code": "@Override public String toString(){\n  return String.format(\"%s,%s,%s,%s,%d,%s,%s,%s\",cname,mname,shorty,prototype,opcount,mhash_tight,mhash_loose,caller);\n}\n", "nl": "Override toString"}
{"code": "public static int pairBytesToHashcode(byte[] pairBytes){\n  return (pairBytes[0] & 0xFF) << 8 | (pairBytes[1] & 0xFF);\n}\n", "nl": "Convert bytes to hased pair"}
{"code": "public void parseChangeText(String changeLogText){\n  if (changeLogText != null) {\n    changeLogText=changeLogText.replaceAll(\"\\\\[\",\"<\").replaceAll(\"\\\\]\",\">\");\n  }\n  setChangeText(changeLogText);\n}\n", "nl": "Replace special tags [b] [i]"}
{"code": "public GroupsBanUserQuery reason(GroupsBanUserReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Reason for ban"}
{"code": "public boolean isApplicable(){\n  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public MessagesGetChatUsersQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"messages.getChatUsers\",Utils.buildParametrizedType(List.class,UserXtrInvitedBy.class));\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected AccountUnbanUserQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "protected String[] upload_appender_file(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final byte cmd=ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE;\n  return this.upload_file(cmd,group_name,local_filename,file_ext_name,meta_list);\n}\n", "nl": "upload appender file to storage server (by file name)"}
{"code": "public DataRecoveryThread(final PersistenceManager persistence){\n  if (persistence.getSleepTime() == -1) {\n    persistence.setSleepTime(DEFAULT_SLEEP_TIME);\n  }\n  this.persistenceManager=persistence;\n}\n", "nl": "Creates a new DataRecoveryThread object specifying the time it will sleep between each commit to the DB"}
{"code": "@Override public void focusLost(FocusEvent event){\n  JTextField tf=(JTextField)event.getSource();\n  if (!(validationsobj.equalNumeric(tf.getText()))) {\n    JOptionPane.showMessageDialog(rootPane,MESSAGES.getString(\"onlynumbersaccepted.validation\"),null,JOptionPane.ERROR_MESSAGE,null);\n    tf.setText(DEFAULTS.getString(tf.getName() + \".default\"));\n    tf.requestFocus();\n  }\n}\n", "nl": "User input validations"}
{"code": "public final List readDataBack(final int numberOfLines) throws DataFallbackException {\n  fFileController.closeFallbackOutputStream();\n  fFileController.openFallbackInputStream();\n  final List data=fFileController.readLines(numberOfLines,fallbackObj);\n  return data;\n}\n", "nl": "Reads a number of lines from the fallback mechanism"}
{"code": "private static boolean isDataBindingLayout(@NotNull NlComponent component){\n  return component.getTagName().equals(TAG_LAYOUT);\n}\n", "nl": "Returns true if the given component is a databinding layout tag"}
{"code": "private boolean isViewWasReused(){\n  String currentCacheKey=engine.getLoadingUriForView(imageAware);\n  return !memoryCacheKey.equals(currentCacheKey);\n}\n", "nl": "Checks whether memory cache key (image URI) for current ImageAware is actual"}
{"code": "public AccountGetBannedQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getBanned\",GetBannedResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public int append_file(String group_name,String appender_filename,byte[] file_buff,int offset,int length) throws IOException, MyException {\n  return this.do_append_file(group_name,appender_filename,length,new UploadBuff(file_buff,offset,length));\n}\n", "nl": "append file to storage server (by file buff)"}
{"code": "public static boolean isLoggable(int logLevel){\n  return (logLevel >= LOGLEVEL);\n}\n", "nl": "Determine if log level will be logged"}
{"code": "public Token(TokenType type,int start,int length){\n  this.type=type;\n  this.start=start;\n  this.length=length;\n  this.pairValue=0;\n}\n", "nl": "Constructs a new token"}
{"code": "public static int calculateXenvCPU(int deliveryControllerCount,int vCenterServerCount){\n  final int dc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.controller.vcpu.default\")) * deliveryControllerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.vcenter.vcpu.default\")) * vCenterServerCount;\n  return dc + vc;\n}\n", "nl": "Calculate XenDesktop vCPU requirements for deployment"}
{"code": "public AirMapFlightStatus(){\n}\n", "nl": "Initialize an AirMapFlightStatus with default values"}
{"code": "public static <K,T,V>MultiDimensionalMap<K,T,V> newTreeBackedMap(){\n  return new MultiDimensionalMap<>(new TreeMap<Pair<K,T>,V>());\n}\n", "nl": "Tree map implementation"}
{"code": "public DeprecatedAttr(){\n}\n", "nl": "Create a new deprecated attribute"}
{"code": "public Smelt(EntityPlayer player,SlotFurnaceOutput slot,float xp){\n  super(player,slot);\n  this.xp=xp;\n}\n", "nl": "Creates an appropriate smelting event taking care of experience"}
{"code": "public boolean AddQueryDataSet(String protocol,double packetSize){\n  for (int i=0; i < queryDataSet.size(); i++)   if (queryDataSet.get(i).getName().equals(protocol)) {\n    queryDataSet.get(i).setPieValue(queryDataSet.get(i).getPieValue() + packetSize * Settings.nOnePacketStringSize);\n    return true;\n  }\n  Platform.runLater(null);\n  return false;\n}\n", "nl": "this method's database for processing the view about user information"}
{"code": "public NewsfeedSearchQuery(VkApiClient client){\n  super(client,\"newsfeed.search\",SearchResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void observeChangingBook(){\n  Observable<Book> observable=bookRepository.observeChangingBooks().filter(null).observeOn(AndroidSchedulers.mainThread());\n  subscribe(observable,null,null,null);\n}\n", "nl": "example for subscribing to observable, which emits many events"}
{"code": "@Override public void deleteObject(String sObjectName,String sObjectCategory){\n  int index;\n  super.deleteObject(sObjectName,sObjectCategory);\n  ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);\n  index=nlist.indexOf(sObjectName);\n  nlist.remove(index);\n  super.saveObject(nlist,sObjectCategory,ListCategoryName);\n}\n", "nl": "deletes the object"}
{"code": "public boolean isDragging(){\n  return transferHandler.isDragging();\n}\n", "nl": "Checks if a dragging operation is currently happening"}
{"code": "public DatabaseGetSchoolClassesQuery(VkApiClient client){\n  super(client,\"database.getSchoolClasses\",Utils.buildParametrizedType(List.class,Utils.buildParametrizedType(List.class,JsonObject.class)));\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public WallSearchQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public CM_SHOW_DIALOG(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_SHOW_DIALOG </tt> packet"}
{"code": "public static boolean isInitialized(Context ctx){\n  vitamioPackage=ctx.getPackageName();\n  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";\n  return true;\n}\n", "nl": "Check if Vitamio is initialized at this device"}
{"code": "private boolean isTestMode(){\n  return ((System.getProperty(\"c2mon.server.testMode\")) != null && (System.getProperty(\"c2mon.server.testMode\").equals(\"true\")));\n}\n", "nl": "Checks if the TEST mode is on"}
{"code": "public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){\n  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());\n}\n", "nl": "scale image"}
{"code": "public MarketGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "\"1\" - return likes info"}
{"code": "public UsersSearchQuery universityFaculty(Integer value){\n  return unsafeParam(\"university_faculty\",value);\n}\n", "nl": "Set university faculty"}
{"code": "public static boolean activeTest(Socket sock) throws IOException {\n  byte[] header;\n  header=packHeader(FDFS_PROTO_CMD_ACTIVE_TEST,0,(byte)0);\n  sock.getOutputStream().write(header);\n  RecvHeaderInfo headerInfo=recvHeader(sock.getInputStream(),TRACKER_PROTO_CMD_RESP,0);\n  return headerInfo.errno == 0 ? true : false;\n}\n", "nl": "send ACTIVE_TEST command to server, test if network is ok and the server is alive"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "@Override public void undo(Transaction tx){\n}\n", "nl": "Does nothing, because compensation log record is redo-Only"}
{"code": "public static void debug(Object message,Throwable exception){\n  Gdx.app.debug(TAG,String.valueOf(message),exception);\n}\n", "nl": "Logs a debug message to the console or logcat"}
{"code": "public AccountSetOnlineQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.setOnline\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean canLearnMoreExpertCraftingSkill(Player player){\n  return getTotalExpertCraftingSkills(player) + getTotalMasterCraftingSkills(player) < CraftConfig.MAX_EXPERT_CRAFTING_SKILLS;\n}\n", "nl": "Check if player can learn more expert crafting skill or not (max is 2)"}
{"code": "public AemContextMenu open(final WebElement webElement){\n  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);\n  return this;\n}\n", "nl": "Opens context menu on desired WebElement"}
{"code": "public static Director newProject(boolean visible){\n  return newProject(visible,false);\n}\n", "nl": "gets a new director"}
{"code": "public InputStreamInputSplit(InputStream is,String path){\n  this.is=is;\n  this.location=new URI[]{URI.create(path)};\n}\n", "nl": "Instantiate with the given file as a uri"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public void useDarkTheme(boolean flag){\n  MaterialPrefUtil.useDarkTheme(flag);\n}\n", "nl": "set theme of settings screen"}
{"code": "private int dataIndex(long index){\n  return (int)(index >>> BITS);\n}\n", "nl": "get current array"}
{"code": "public static Beans<AuthToken> load(W q,int s,int n){\n  return Helper.load(q,s,n,AuthToken.class);\n}\n", "nl": "Load the Token by the query"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public FriendsAreFriendsQuery needSign(Boolean value){\n  return unsafeParam(\"need_sign\",value);\n}\n", "nl": "Set need sign"}
{"code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "public MainNavigator(FragmentActivity activity,DrawerLayout drawer){\n  this.activity=activity;\n  this.drawer=drawer;\n}\n", "nl": "Create MainNavigator"}
{"code": "private void createLRULevelCacheInstance(CacheType cacheType){\n  CarbonLRUCache carbonLRUCache=null;\n  if (cacheType.equals(CacheType.REVERSE_DICTIONARY) || cacheType.equals(CacheType.FORWARD_DICTIONARY)) {\n    carbonLRUCache=new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE,CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE_DEFAULT);\n    cacheTypeToLRUCacheMap.put(CacheType.REVERSE_DICTIONARY,carbonLRUCache);\n    cacheTypeToLRUCacheMap.put(CacheType.FORWARD_DICTIONARY,carbonLRUCache);\n  }\n}\n", "nl": "This method will create the lru cache instance based on the given type"}
{"code": "public GroupsGetMembersQuery(VkApiClient client,Actor actor){\n  super(client,\"groups.getMembers\",GetMembersResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public LikesAddQuery(VkApiClient client,UserActor actor,LikesType type,int itemId){\n  super(client,\"likes.add\",AddResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static DataFrame normalize(DataFrame dataFrame){\n  return normalize(dataFrame,0,1,Collections.<String>emptyList());\n}\n", "nl": "Scale based on min,max"}
{"code": "public void updateBuildVersionFields(){\n  if (apkAbsolutePath != null) {\n    binary.initPath(apkAbsolutePath);\n  }\n}\n", "nl": "Updates the build version(code and name) fields"}
{"code": "public UpdateItem(){\n}\n", "nl": "only for use as comparable item"}
{"code": "public PhotosConfirmTagQuery(VkApiClient client,UserActor actor,String photoId,int tagId){\n  super(client,\"photos.confirmTag\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n  tagId(tagId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showGroups=\" + (!isSelected()) + \" style=ellipses;\");\n}\n", "nl": "action to be performed"}
{"code": "public static final void guardMode(final Summon summon){\n  summon.getController().cancelCurrentSkill();\n  summon.setMode(SummonMode.GUARD);\n  Player master=summon.getMaster();\n  PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_GUARD_MODE(summon.getNameId()));\n  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));\n  summon.getLifeStats().triggerRestoreTask();\n}\n", "nl": "Change to guard mode"}
{"code": "public static boolean handle(EntityPlayer player,BlockPos pos){\n  SleepCheck event=new SleepCheck(player,pos,player.worldObj.getBlockState(pos).getBlock() == Blocks.BED);\n  OpenModLoader.getEventBus().post(event);\n  return event.result;\n}\n", "nl": "Convenience method for checking if the given player can sleep at the given position"}
{"code": "public String toString(){\n  return \"UnitConcatenator\";\n}\n", "nl": "Converts this object to a string"}
{"code": "public static Object readObject(byte[] data) throws IOException, ClassNotFoundException {\n  ByteArrayInputStream buffer=new ByteArrayInputStream(data);\n  ObjectInputStreamExt in=new ObjectInputStreamExt(buffer);\n  Object answer=in.readObject();\n  in.close();\n  return answer;\n}\n", "nl": "Read an Object from a byte array"}
{"code": "public static void hideToast(){\n  if (null != toast) {\n    toast.cancel();\n  }\n}\n", "nl": "hide the toast"}
{"code": "public void appendInterval(PraatInterval interval){\n  this.intervals.add(interval);\n}\n", "nl": "add interval to the end of intervals"}
{"code": "public static String b2hex(byte b){\n  return String.format(\"%02X \",b);\n}\n", "nl": "Converts a byte to a hexadecimal string representation"}
{"code": "public boolean isApplicable(){\n  return ProjectManager.getNumberOfProjects() == 1 && ((Director)ProjectManager.getProjects().get(0)).getDocument().getNumberOfSamples() == 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public PhotosGetTagsQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.getTags\",Utils.buildParametrizedType(List.class,PhotoTag.class));\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Pair<Schema,JavaRDD<List<Writable>>> toRecords(DataFrame dataFrame){\n  Schema schema=fromStructType(dataFrame.schema());\n  return new Pair<>(schema,dataFrame.javaRDD().map(new ToRecord(schema)));\n}\n", "nl": "Create a compatible schema and rdd for datavec"}
{"code": "public static final void restMode(final Summon summon){\n  summon.getController().cancelCurrentSkill();\n  summon.setMode(SummonMode.REST);\n  Player master=summon.getMaster();\n  PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_REST_MODE(summon.getNameId()));\n  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));\n  summon.getLifeStats().triggerRestoreTask();\n}\n", "nl": "Change to rest mode"}
{"code": "private void useFilteredFromEntries(LimitSizeEntryList entries){\n  LimitSizeEntryList filteredEntries=filterEntries(entries);\n  this.currentEntries=filteredEntries;\n  this.filteredEntries=filteredEntries;\n}\n", "nl": "Filter entries and set them as current entries"}
{"code": "protected static ActionResultInfo performAction(GenericValue productPromoAction,ShoppingCart cart,Delegator delegator,LocalDispatcher dispatcher,Timestamp nowTimestamp) throws GenericEntityException, CartItemModifyException {\n  ActionResultInfo actionResultInfo=new ActionResultInfo();\n  performAction(actionResultInfo,productPromoAction,cart,delegator,dispatcher,nowTimestamp);\n  return actionResultInfo;\n}\n", "nl": "returns true if the cart was changed and rules need to be re-evaluted"}
{"code": "@Override public double[] makeInverseCumulativeTestValues(){\n  return new double[]{0,0.210212602629,0.554298076728,0.831211613487,1.14547622606,1.61030798696,20.5150056524,15.0862724694,12.8325019940,11.0704976935,9.23635689978,Double.POSITIVE_INFINITY};\n}\n", "nl": "Creates the default inverse cumulative probability density test expected values"}
{"code": "public void prune(double dMinCoexistenceImportance){\n}\n", "nl": "TODO: Document"}
{"code": "public TapTarget outerCircleColor(@ColorRes int color){\n  this.outerCircleColor=color;\n  return this;\n}\n", "nl": "Specify the color resource for the outer circle"}
{"code": "public void showContent(){\n  switchState(CONTENT,null,null,null,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Hide all other states and show content"}
{"code": "public String toJson() throws JsonGenerationException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.writeValueAsString(this);\n}\n", "nl": "obj --> json"}
{"code": "public ColorConversionTransform(Random random,int conversionCode){\n  super(random);\n  this.conversionCode=conversionCode;\n  converter=new OpenCVFrameConverter.ToMat();\n}\n", "nl": "Return new ColorConversion object"}
{"code": "public void add(long value){\n  metric.add(value);\n}\n", "nl": "For internal usage only"}
{"code": "public static void clearDictionaryCache(Dictionary dictionary){\n  if (null != dictionary) {\n    dictionary.clear();\n  }\n}\n", "nl": "This method will be used to clear the dictionary cache after its usage is complete so that if memory threshold is reached it can evicted from LRU cache"}
{"code": "public void releaseScan() throws SAException {\n}\n", "nl": "release SLHolder for this scan"}
{"code": "public AbstractSpaceResponseInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private boolean canShowUpdaterView(int deltaY){\n  final int firstVisibleItem=getFirstVisiblePosition();\n  final int fistViewTop=getChildAt(0).getTop();\n  final int topPadding=getListPaddingTop();\n  return (firstVisibleItem == 0 && fistViewTop >= topPadding && deltaY > 0);\n}\n", "nl": "Checks if the update header can be showing?"}
{"code": "protected PhotosGetAllQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return detailed information about photos"}
{"code": "public void applyResult(AnswerPacket answerPacket,int resultIndex){\n  if (accumulate()) {\n    _results[resultIndex]=answerPacket.m_EntryPacket;\n  }\n else {\n    if (answerPacket.m_EntryPacket != null)     _successCount++;\n  }\n}\n", "nl": "Apply the result - store the result (readByIds) or count the cleared objects (clearByIds)"}
{"code": "private static byte[] hexStringToByteArray(String hexString){\n  int len=hexString.length();\n  byte[] data=new byte[len / 2];\n  for (int i=0; i < len; i+=2) {\n    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));\n  }\n  return data;\n}\n", "nl": "Converts hex values from strings to byte array"}
{"code": "VarTraversals(VarAdmin var){\n  if (var.isUserDefinedName()) {\n    shortcutTraversal.setInvalid();\n  }\n  String start=var.getName();\n  var.getProperties().forEach(null);\n}\n", "nl": "Create VarTraversals to represent a Var"}
{"code": "private int determineMaxLevel(PhyloTree tree){\n  return determineMaxLevelRec(0,tree.getRoot());\n}\n", "nl": "determine the max levels of the tree"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public AirMapFlightStatus(JSONObject statusJson){\n  constructFromJson(statusJson);\n}\n", "nl": "Initialize an AirMapFlightStatus from JSON"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "String inprogressZNode(long ledgerId,long firstTxId,long logSegmentSeqNo){\n  return logMetadata.getLogSegmentsPath() + \"/\" + inprogressZNodeName(ledgerId,firstTxId,logSegmentSeqNo);\n}\n", "nl": "Get the znode path for the inprogressZNode"}
{"code": "public Builder considerExifParams(boolean considerExifParams){\n  this.considerExifParams=considerExifParams;\n  return this;\n}\n", "nl": "Sets whether ImageLoader will consider EXIF parameters of JPEG image (rotate, flip)"}
{"code": "private void verifyValidation(){\n  setErrorMessage(null);\n  setValid(getErrorMessage() == null);\n}\n", "nl": "Verify the selection of the interface method"}
{"code": "protected GenericDelegator(){\n}\n", "nl": "Only allow creation through the factory method"}
{"code": "public static UByte ubyte(short value) throws NumberFormatException {\n  return UByte.valueOf(value);\n}\n", "nl": "Create an <code>unsigned byte</code>"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public List asList(){\n  List result=new LinkedList();\n  for (Iterator it=iterator(); it.hasNext(); ) {\n    result.add(it.next());\n  }\n  return result;\n}\n", "nl": "get all splits in a new list"}
{"code": "public synchronized void close(){\n  done=true;\n  if (line != null && line.isOpen()) {\n    line.close();\n    line=null;\n    notify();\n  }\n}\n", "nl": "Closes this audio player"}
{"code": "@Override public boolean isApplicable(){\n  if (ProgramProperties.get(\"always-allow-open-fviewer\",false))   return true;\n  final Document doc=((Director)getDir()).getDocument();\n  return doc.getActiveViewers().contains(cName);\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isVisaElectron(String cc){\n  String first6digs=cc.substring(0,6);\n  String first4digs=cc.substring(0,4);\n  if ((cc.length() == 16) && (first6digs.equals(\"417500\") || first4digs.equals(\"4917\") || first4digs.equals(\"4913\")|| first4digs.equals(\"4508\")|| first4digs.equals(\"4844\")|| first4digs.equals(\"4027\")))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid Visa Electron number"}
{"code": "public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent){\n  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Show empty view when there are not data to show"}
{"code": "public GroupsGetMembersQueryWithFields(VkApiClient client,List<UserField> fields){\n  super(client,\"groups.getMembers\",GetMembersFieldsResponse.class);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private static SecretKeySpec generateKey(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n  final MessageDigest digest=MessageDigest.getInstance(HASH_ALGORITHM);\n  byte[] bytes=password.getBytes(\"UTF-8\");\n  digest.update(bytes,0,bytes.length);\n  byte[] key=digest.digest();\n  SecretKeySpec secretKeySpec=new SecretKeySpec(key,\"AES\");\n  return secretKeySpec;\n}\n", "nl": "Generates SHA256 hash of the password which is used as key"}
{"code": "public PhotosReorderAlbumsQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"photos.reorderAlbums\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void sendLaunchFinishNotification(final String[] recipients,final String url,final Launch launch,final String resource,final Project.Configuration settings){\n  String subject=String.format(FINISH_LAUNCH_EMAIL_SUBJECT,launch.getName(),launch.getNumber());\n  MimeMessagePreparator preparator=null;\n  this.send(preparator);\n}\n", "nl": "Finish launch notification"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public PhotosGetChatUploadServerQuery(VkApiClient client,UserActor actor,int chatId){\n  super(client,\"photos.getChatUploadServer\",GetChatUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public double norm2(){\n  return (new SingularValueDecomposition(this).norm2());\n}\n", "nl": "Two norm"}
{"code": "public AdsUpdateTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,int targetGroupId,String name){\n  super(client,\"ads.updateTargetGroup\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  targetGroupId(targetGroupId);\n  name(name);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Matrix refresh(Matrix newMatrix,View chart,boolean invalidate){\n  mMatrixTouch.set(newMatrix);\n  limitTransAndScale(mMatrixTouch,mContentRect);\n  if (invalidate)   chart.invalidate();\n  newMatrix.set(mMatrixTouch);\n  return newMatrix;\n}\n", "nl": "call this method to refresh the graph with a given matrix"}
{"code": "private void drawMovieFrame(Canvas canvas){\n  mMovie.setTime(mCurrentAnimationTime);\n  canvas.save(Canvas.MATRIX_SAVE_FLAG);\n  canvas.scale(mScale,mScale);\n  mMovie.draw(canvas,mLeft / mScale,mTop / mScale);\n  canvas.restore();\n}\n", "nl": "Draw current GIF frame"}
{"code": "public static void i(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.i(tag,buildMsg(msg));\n  }\n}\n", "nl": "info log"}
{"code": "public TapTarget textTypeface(Typeface typeface){\n  if (typeface == null)   throw new IllegalArgumentException(\"Cannot use a null typeface\");\n  this.typeface=typeface;\n  return this;\n}\n", "nl": "Specify the typeface for all text"}
{"code": "public CatchOptions withProbability(double probability){\n  this.probability=probability;\n  return this;\n}\n", "nl": "Set a capture probability before switching balls or the minimum probability for a specific ball"}
{"code": "protected MarketSearchQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Identifier of an items owner community"}
{"code": "protected void failed(Throwable e,Description description){\n}\n", "nl": "Invoked when a test fails"}
{"code": "public static void i(String tag,String msg){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  Log.i(tag,msg);\n}\n", "nl": "Send an INFO log message"}
{"code": "default String relationName(String type){\n  return String.format(RELATION,type);\n}\n", "nl": "Get the name of a relation relating something to the given type"}
{"code": "public void submitJob(SelfCancalableJob SelfCancalableJob){\n  taskScheduler.schedule(SelfCancalableJob,SelfCancalableJob);\n}\n", "nl": "Submits self cancallable job"}
{"code": "@NotNull public static ResizePolicy horizontal(){\n  return ourHorizontal;\n}\n", "nl": "Returns a resize policy allowing horizontal resizing only"}
{"code": "public static void sendEvent(final ReactContext context,final String eventName,final WritableMap params){\n  if (context.hasActiveCatalystInstance()) {\n    context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName,params);\n  }\n else {\n    Log.d(TAG,\"Waiting for CatalystInstance before sending event\");\n  }\n}\n", "nl": "send a JS event"}
{"code": "public static Map<?,?> toMap(Object object){\n  return mapper.convertValue(object,Map.class);\n}\n", "nl": "Serialize an object to map"}
{"code": "public static ITemplateHolder createTemplateHolderForReplication(IServerTypeDesc typeDesc,IEntryPacket template,String uid,long expirationTime){\n  return new TemplateHolder(typeDesc,template,uid,expirationTime,null,SystemTime.timeMillis(),SpaceOperations.READ,null,0);\n}\n", "nl": "Special builder method for reading object before replicating"}
{"code": "public Call patch(String url,Map<String,String> params,Callback callback){\n  Request request=new Builder().url(url).patch(bodyFromMap(params)).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n", "nl": "Make a PATCH call with params"}
{"code": "public boolean end(){\n  return true;\n}\n", "nl": "Marks the end of a set of data"}
{"code": "public void removeUnlocked(IObjectInfo<T> oi){\n  remove_impl((ObjectInfo<T>)oi);\n}\n", "nl": "remove an element described by ObjectInfo, while the SL is unlocked"}
{"code": "public AudioGetBroadcastListQuery filter(AudioGetBroadcastListFilter value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Types of objects to return"}
{"code": "public PollsGetByIdQuery(VkApiClient client,UserActor actor,int pollId){\n  super(client,\"polls.getById\",Utils.buildParametrizedType(List.class,Poll.class));\n  accessToken(actor.getAccessToken());\n  pollId(pollId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Expression(){\n}\n", "nl": "Default empty Expression"}
{"code": "public SingularValueDecomposition svd(){\n  return new SingularValueDecomposition(this);\n}\n", "nl": "Singular Value Decomposition"}
{"code": "public void rotateImage(RotateDegrees degrees){\n  rotateImage(degrees,mAnimationDurationMillis);\n}\n", "nl": "Rotate image"}
{"code": "public void draw(Graphics2D gc,boolean centerLabelWidth,boolean centerLabelHeight){\n  if (centerLabelWidth || centerLabelHeight) {\n    Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();\n    gc.drawString(label,(int)(x - (centerLabelWidth ? labelSize.getWidth() / 2 : 0)),(int)(y + (centerLabelHeight ? labelSize.getHeight() / 2 : 0)));\n  }\n else   gc.drawString(label,x,y);\n}\n", "nl": "draw the label"}
{"code": "public static boolean isSuccess(Map<String,? extends Object> results){\n  if (ServiceUtil.isError(results) || ServiceUtil.isFailure(results)) {\n    return false;\n  }\n  return true;\n}\n", "nl": "A little short-cut method to check to see if a service was successful (neither error or failed)"}
{"code": "public BoardCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n", "nl": "true - to post the comment as by the community false - to post the comment as by the user (default)"}
{"code": "public static String keyOfIds(Class<?> clazz){\n  try {\n    return IDS_KEY_CACHE.get(clazz);\n  }\n catch (  ExecutionException e) {\n    throw new KeyException(e);\n  }\n}\n", "nl": "The key of id generator"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void unRegisterEvent(Object object){\n  if (noParamMap.containsKey(object)) {\n    noParamMap.remove(object);\n  }\n  if (hasParamMap.containsKey(object)) {\n    hasParamMap.remove(object);\n  }\n}\n", "nl": "unRegister when you no longer user the object"}
{"code": "@Override public void clear(){\n  if (null != columnDictionaryInfo) {\n    columnDictionaryInfo.clear();\n    columnDictionaryInfo=null;\n  }\n}\n", "nl": "This method will release the objects and set default value for primitive types"}
{"code": "public Builder buttonPressedBackgroundColor(int buttonPressedBackgroundColor){\n  this.buttonPressedBackgroundColor=buttonPressedBackgroundColor;\n  return this;\n}\n", "nl": "Set the background color of the buttons when clicked"}
{"code": "public boolean isSetServiceName(){\n  return this.serviceName != null;\n}\n", "nl": "Returns true if field serviceName is set (has been assigned a value) and false otherwise"}
{"code": "public VideoGetCommentsQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"deselect series=all;\");\n}\n", "nl": "action to be performed"}
{"code": "boolean hasFired(){\n  int status=getSequenceStatus();\n  return (status == SEQUENCE_FINISHED);\n}\n", "nl": "METHODS FOR INDIVIDUAL SHOWCASE VIEWS"}
{"code": "public void add(ClosingAwareWebDriver driver){\n  drivers.add(driver);\n}\n", "nl": "Register WebDriver instance that should be terminated at the end of the suite"}
{"code": "@Override public void close() throws IOException {\n  iterator.close();\n}\n", "nl": "close associated file or database"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-2.226325228634938,-1.156887023657177,-0.643949578356075,-0.2027950777320613,0.305827808237559,6.42632522863494,5.35688702365718,4.843949578356074,4.40279507773206,3.89417219176244};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "public void drawChartTransposed(Graphics2D gc){\n  colorByClasses=false;\n  colorBySeries=true;\n  doDraw(gc);\n}\n", "nl": "draw a transposed Radial Chart"}
{"code": "public ColumnReverseDictionaryInfo(){\n  boolean useXXHash=Boolean.valueOf(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.ENABLE_XXHASH,CarbonCommonConstants.ENABLE_XXHASH_DEFAULT));\n  if (useXXHash) {\n    xxHash32=XXHashFactory.fastestInstance().hash32();\n  }\n}\n", "nl": "check and initialize xxHash32 if enabled"}
{"code": "public static String makeWebServiceCall(String url,int requestmethod){\n  return makeWebServiceCall(url,requestmethod,null,false);\n}\n", "nl": "Making web service call"}
{"code": "public Configuration(Sentence sentence,Stack<Integer> stack,Queue<Integer> queue){\n  this.sentence=sentence;\n  this.stack=stack;\n  this.queue=queue;\n  this.arcs=new ArrayList<Dependency>();\n}\n", "nl": "Constructs a configuration: (sentence, stack, buffer, arcs)"}
{"code": "private Collection<Map<String,Object>> batchParse(String[] header,Collection<String[]> batch){\n  return batch.stream().map(null).collect(toList());\n}\n", "nl": "Call parse of a collection of input data"}
{"code": "private void expandGroup(ExpandableListPosition listPosition){\n  expandableList.expandedGroupIndexes.put(listPosition.groupPos,true);\n  if (listener != null) {\n    listener.onGroupExpanded(expandableList.getFlattenedGroupIndex(listPosition) + 1,expandableList.groups.get(listPosition.groupPos).getItemCount());\n  }\n}\n", "nl": "Expand a group"}
{"code": "public static DalvikMethodStruct of(Method method){\n  return new DalvikMethodStruct(method);\n}\n", "nl": "Create a dalvik struct in java mapping native"}
{"code": "@deprecated public UScriptRun(){\n  char[] nullChars=null;\n  reset(nullChars,0,0);\n}\n", "nl": "/*    "}
{"code": "public VideoReportCommentQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Reason for the complaint"}
{"code": "public boolean isApplicable(){\n  return getViewer().isPCoATab() && getViewer().getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(null).size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public Builder rangeColumns(String... columns){\n  return add(ReduceOp.Range,columns);\n}\n", "nl": "Reduce the specified columns by taking the range (max-min) of the values"}
{"code": "public static long dateToMilliseconds(Date date){\n  return date.getTime();\n}\n", "nl": "Convert date object to milliseconds"}
{"code": "@Override public boolean isEndOfStreamMarked() throws IOException {\n  checkClosedOrInError(\"isEndOfStreamMarked\");\n  long lastTxId=FutureUtils.result(getLastLogRecordAsyncInternal(false,true)).getTransactionId();\n  return lastTxId == DistributedLogConstants.MAX_TXID;\n}\n", "nl": "Check if an end of stream marker was added to the stream A stream with an end of stream marker cannot be appended to"}
{"code": "public AdsGetTargetGroupsQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getTargetGroups\",Utils.buildParametrizedType(List.class,TargetGroup.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Object[] internalGetChildren(Object o,IProgressMonitor monitor){\n  return new Object[0];\n}\n", "nl": "Initial implementation: return null;"}
{"code": "@Override public void erasePageData(Application.Name applicationName,Experiment.ID experimentID){\n  ExperimentPageList experimentPageList=getExperimentPages(experimentID);\n  for (  ExperimentPage experimentPage : experimentPageList.getPages()) {\n    deletePage(applicationName,experimentID,experimentPage.getName());\n    LOGGER.debug(\"CassandraPagesRepository Removing page: {} from terminated experiment: {} for application: {}\",experimentPage.getName(),experimentID,applicationName);\n  }\n}\n", "nl": "Erase the page related data associated to an experiment"}
{"code": "public static void debug(Object message){\n  Gdx.app.debug(TAG,String.valueOf(message));\n}\n", "nl": "Logs a debug message to the console or logcat"}
{"code": "public final void info(final Object o,final Throwable t){\n  log(Level.INFO,o,t);\n}\n", "nl": "This method logs the INFO message"}
{"code": "public void close(){\n  thriftWriter.close();\n}\n", "nl": "Below method will be used to close the thrift object"}
{"code": "protected DocsDeleteQuery docId(int value){\n  return unsafeParam(\"doc_id\",value);\n}\n", "nl": "Set doc id"}
{"code": "public void putRequest(Context context,String url,JSONObject body,ApiListener apiListener){\n  request(context,Request.Method.PUT,url,body,apiListener);\n}\n", "nl": "Helper method to make authenticated HTTP requests to LinkedIn REST api using PUT Method"}
{"code": "public Speaker update(final Speaker speaker){\n  if (!this.speakers.keySet().contains(speaker.getId()))   throw new IllegalArgumentException(\"Speaker not found \" + speaker.getId());\n  return this.speakers.put(speaker.getId(),speaker);\n}\n", "nl": "Update a speaker if found"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void clickByText(String text) throws UiObjectNotFoundException {\n  UiObject obj=new UiObject(new UiSelector().text(text));\n  obj.clickAndWaitForNewWindow();\n}\n", "nl": "Helper to click on object that match the text value"}
{"code": "public NewsfeedSearchQueryWithExtended startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n", "nl": "Set start from"}
{"code": "public static void checkFlightPath(List<Coordinate> path,int width,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean showWeather,@Nullable Date date,@Nullable AirMapCallback<AirMapStatus> callback){\n  StatusService.checkFlightPath(path,width,takeOffPoint,types,ignoredTypes,showWeather,date,callback);\n}\n", "nl": "Get a flight status based on a Multi-point based flight"}
{"code": "private List<byte[]> convertStringListToByteArray(List<String> valueList){\n  List<byte[]> byteArrayList=new ArrayList<>(valueList.size());\n  for (  String value : valueList) {\n    byteArrayList.add(value.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));\n  }\n  return byteArrayList;\n}\n", "nl": "this method will convert list of string to list of byte array"}
{"code": "public void patchLibraries(){\n  patchHandlerImplementation();\n  patchThreadImplementation();\n}\n", "nl": "Patches all supported system libraries"}
{"code": "public OrderByKey(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public SecureGetUserLevelQuery(VkApiClient client,ServiceActor actor,List<Integer> userIds){\n  super(client,\"secure.getUserLevel\",Utils.buildParametrizedType(List.class,Level.class));\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ConsoleEntryList(int capacity,int trimSize){\n  entries=new LimitSizeEntryList(capacity,trimSize);\n  currentEntries=entries;\n  logDisabledTypesMask=0;\n}\n", "nl": "Creates a new list based on capacity and trim size"}
{"code": "public void resetAll(Identity<?> identity){\n  strictPermission.values().forEach(null);\n}\n", "nl": "Resets all direct permission/restrictions from an identity"}
{"code": "private static void resolveTernaryOperator(TernaryExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){\n  if (null != objSubjectExpression.getTrueVariant()) {\n    resolveExpressionType(objSubjectExpression.getTrueVariant(),objScope,objIndex,objTypesSet);\n  }\n  if (null != objSubjectExpression.getFalseVariant()) {\n    resolveExpressionType(objSubjectExpression.getFalseVariant(),objScope,objIndex,objTypesSet);\n  }\n}\n", "nl": "Will resolve ternary operator"}
{"code": "public PhotosEditQuery foursquareId(String value){\n  return unsafeParam(\"foursquare_id\",value);\n}\n", "nl": "Set foursquare id"}
{"code": "public static final void emoteStartSinging(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,113,0));\n}\n", "nl": "Npc starts singing iu"}
{"code": "void addCodebaseComponents(URL[] jars){\n  if (jars == null)   return;\n  for (int i=0; i < jars.length; i++) {\n    if (!codebaseComponents.contains(jars[i]))     codebaseComponents.add(jars[i]);\n  }\n  addCommonJARs(jars);\n}\n", "nl": "Add common codebase JARs"}
{"code": "protected synchronized int assignDocumentNumber(){\n  return ++docAndDoctypeCounter;\n}\n", "nl": "NON-DOM:  increment document/doctype counter"}
{"code": "public NotificationsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"notifications.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static double[] generateUniform(int l){\n  double[] ret=new double[l];\n  java.util.Random rgen=new java.util.Random();\n  for (int i=0; i < l; i++) {\n    ret[i]=rgen.nextDouble();\n  }\n  return ret;\n}\n", "nl": "This will generate a series of uniformally distributed numbers between l times"}
{"code": "public PagesParseWikiQuery(VkApiClient client,UserActor actor,String text){\n  super(client,\"pages.parseWiki\",String.class);\n  accessToken(actor.getAccessToken());\n  text(text);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@GET public String reset(){\n  this.map.clear();\n  return \"Reset endpoints\";\n}\n", "nl": "Allows the cached Endpoints to be reset, forcing a config reload"}
{"code": "public int download_file(String group_name,String remote_filename,String local_filename) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file(group_name,remote_filename,file_offset,download_bytes,local_filename);\n}\n", "nl": "download file from storage server"}
{"code": "private XmlOutputter(){\n}\n", "nl": "the logger"}
{"code": "public LeadsCheckUserQuery testResult(Integer value){\n  return unsafeParam(\"test_result\",value);\n}\n", "nl": "Set test result"}
{"code": "public static String formatDecimalNumber(double number,String pattern,Locale locale){\n  com.ibm.icu.text.NumberFormat nf=com.ibm.icu.text.NumberFormat.getNumberInstance(locale);\n  String nbParsing=\"\";\n  ((com.ibm.icu.text.DecimalFormat)nf).applyPattern(pattern);\n  ((com.ibm.icu.text.DecimalFormat)nf).toPattern();\n  nbParsing=nf.format(number);\n  return nbParsing;\n}\n", "nl": "Format a decimal number to the pattern given"}
{"code": "public static void openWirelessNetworkSettings(Context context){\n  if (android.os.Build.VERSION.SDK_INT > 10) {\n    context.startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));\n  }\n else {\n    context.startActivity(new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS));\n  }\n}\n", "nl": "open the wireless network settings"}
{"code": "public static void showOkDialog(final Activity activity,final String title,final String text){\n  showOkDialog(activity,title,text,null);\n}\n", "nl": "Displays a dialog box with an OK button"}
{"code": "public PhotosEditQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AccountSaveProfileInfoQuery status(String value){\n  return unsafeParam(\"status\",value);\n}\n", "nl": "Set status"}
{"code": "@Override public void onPause(){\n  super.onPause();\n  mapView.onPause();\n  stopLocationUpdates();\n}\n", "nl": "Map Methods"}
{"code": "void restoreLocationServicesState(@NonNull ContentResolver contentResolver){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n    setLocationServicesStatePreKitKat(contentResolver,originalLocationProviders);\n  }\n else {\n    setLocationServicesState(contentResolver,originalLocationMode);\n  }\n}\n", "nl": "Should be called after testing completes, to restore original location services values"}
{"code": "public VideoGetQueryWithExtended videos(String... value){\n  return unsafeParam(\"videos\",value);\n}\n", "nl": "Video IDs"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "@deprecated public int hashCode(){\n  int result=0;\n  int increment=Math.min(3,this.values.length / 16);\n  for (int i=0; i < this.values.length; i+=increment) {\n    result=result * 37 + this.values[i];\n  }\n  return result;\n}\n", "nl": "/*    "}
{"code": "public LocalViewDetails(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static void showLogin(Fragment fragment,int requestCode){\n  Intent intent=new Intent(fragment.getActivity(),LoginActivity.class);\n  fragment.startActivityForResult(intent,requestCode);\n}\n", "nl": "Show the login screen"}
{"code": "public void loadTableMetadata(TableInfo tableInfo){\n  CarbonTable carbonTable=tableInfoMap.get(convertToLowerCase(tableInfo.getTableUniqueName()));\n  if (null == carbonTable || carbonTable.getTableLastUpdatedTime() < tableInfo.getLastUpdatedTime()) {\n    carbonTable=new CarbonTable();\n    carbonTable.loadCarbonTable(tableInfo);\n    tableInfoMap.put(convertToLowerCase(tableInfo.getTableUniqueName()),carbonTable);\n  }\n}\n", "nl": "method load the table"}
{"code": "public static boolean isAvailable(){\n  return taxonomyClassification != null;\n}\n", "nl": "is taxonomy data available?"}
{"code": "public VideoAddToAlbumQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Set album id"}
{"code": "public IntFilePutter(File file,long limit,boolean inMemory) throws IOException {\n  super(file,4 * limit,inMemory ? Mode.CREATE_READ_WRITE_IN_MEMORY : Mode.CREATE_READ_WRITE);\n}\n", "nl": "constructs a int file putter using the given file and limit"}
{"code": "private void addCasting(InsertQueryExecutor insertQueryExecutor,Relation relation,VarAdmin.Casting casting){\n  VarAdmin roleVar=casting.getRoleType().orElseThrow(null);\n  RoleType roleType=insertQueryExecutor.getConcept(roleVar).asRoleType();\n  Instance roleplayer=insertQueryExecutor.getConcept(casting.getRolePlayer()).asInstance();\n  relation.putRolePlayer(roleType,roleplayer);\n}\n", "nl": "Add a roleplayer to the given relation"}
{"code": "static <T>AnyVal<Object> anyHeadAnyTail(AnyVal<T> head,AnyVal<? extends List<? extends T>> tail){\n  return new AnyConsImpl(null,head,null,tail);\n}\n", "nl": "Return a new AnyVal that matches any head of a list and any tail of a list"}
{"code": "@deprecated public char elementAt(char index){\n  int ix=(this.indices[(index >> '\\005')] & 0xFFFF) + (index & 0x1F);\n  return ix >= this.values.length ? this.defaultValue : this.values[ix];\n}\n", "nl": "/*    "}
{"code": "public void finalize(){\n  NDC.remove();\n}\n", "nl": "The finalizer"}
{"code": "private final boolean validateClientPacket(ByteBuffer buf){\n  return buf.getShort(0) == ~buf.getShort(3) && buf.get(2) == staticClientPacketCode;\n}\n", "nl": "Check if packet was correctly decoded, also check if packet was correctly coded by aion client"}
{"code": "public static java.util.Date toDate(String dateTime){\n  if (dateTime == null) {\n    return null;\n  }\n  String date=dateTime.substring(0,dateTime.indexOf(\" \"));\n  String time=dateTime.substring(dateTime.indexOf(\" \") + 1);\n  return toDate(date,time);\n}\n", "nl": "Converts a date and time String into a Date"}
{"code": "public boolean isHeader(int position){\n  return position >= 0 && position < mHeaderViews.size();\n}\n", "nl": "jude is head view"}
{"code": "public WallSearchQuery(VkApiClient client){\n  super(client,\"wall.search\",SearchResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean isReservedStreamName(String name){\n  return name.startsWith(\".\");\n}\n", "nl": "Is it a reserved stream name in bkdl namespace?"}
{"code": "public final void writePos(final Point s){\n  writeShort(s.x);\n  writeShort(s.y);\n}\n", "nl": "Writes a 2D 4 byte position information"}
{"code": "private boolean isSelf(Player player,int targetObjId){\n  return player.sameObjectId(targetObjId);\n}\n", "nl": "Checks if target is same as current player"}
{"code": "public void resume(){\n  isPaused=false;\n}\n", "nl": "Have the boss resume - Override"}
{"code": "public Value generalCaseExpression(Expression[] exp,Value val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a general case expression"}
{"code": "public void releaseScan(){\n  release();\n}\n", "nl": "release SLHolder for this scan"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public Builder doubleMathOp(String columnName,MathOp mathOp,double scalar){\n  return transform(new DoubleMathOpTransform(columnName,mathOp,scalar));\n}\n", "nl": "Perform a mathematical operation (add, subtract, scalar max etc) on the specified double column, with a scalar"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static byte[] writeLTriad(int triad){\n  byte b1, b2, b3;\n  b3=(byte)(triad & 0xFF);\n  b2=(byte)((triad >> 8) & 0xFF);\n  b1=(byte)((triad >> 16) & 0xFF);\n  return new byte[]{b3,b2,b1};\n}\n", "nl": "Writes a 3-byte little-endian number"}
{"code": "public void clear(){\n  isClear=true;\n}\n", "nl": "prevent handling of all event inputs in this frame"}
{"code": "public boolean isGlobalFindable(){\n  return true;\n}\n", "nl": "is a global find possible?"}
{"code": "protected EventFlusher createEventFlusher(){\n  return null;\n}\n", "nl": "Subclasses that want something else than the database flusher should override this method"}
{"code": "protected DatabaseGetChairsQuery facultyId(int value){\n  return unsafeParam(\"faculty_id\",value);\n}\n", "nl": "Id of the faculty to get chairs from"}
{"code": "public AudioAddQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Set album id"}
{"code": "public static void load(){\n  taxonomyClassification=ClassificationManager.get(Classification.Taxonomy,true);\n}\n", "nl": "explicitly load the taxonomy classification"}
{"code": "public double distSquared(double x,double y){\n  double distX=this.x - x;\n  double distY=this.y - y;\n  return distX * distX + distY * distY;\n}\n", "nl": "calculate distance Square"}
{"code": "public void clear(){\n  internalMap.clear();\n}\n", "nl": "Removes all entries from this map"}
{"code": "public static TargetExpression allFromPackageRecursive(WorkspacePath localPackage){\n  if (localPackage.relativePath().isEmpty()) {\n    return new TargetExpression(\"//...:all\");\n  }\n  return new TargetExpression(\"//\" + localPackage.relativePath() + \"/...:all\");\n}\n", "nl": "All targets in all packages below the given path"}
{"code": "public static String formatQuantity(Integer quantity){\n  if (quantity == null)   return \"\";\n else   return formatQuantity(quantity.doubleValue());\n}\n", "nl": "Formats an Integer representing a quantity into a string"}
{"code": "public MessagesDeleteQuery spam(Boolean value){\n  return unsafeParam(\"spam\",value);\n}\n", "nl": "Set spam"}
{"code": "public static SpawnTemplate addNewSingleTimeSpawn(int worldId,int npcId,float x,float y,float z,byte heading){\n  return addNewSpawn(worldId,npcId,x,y,z,heading,0);\n}\n", "nl": "Create non-permanent spawn template with no respawn"}
{"code": "public FriendsGetRequestsQuery sort(FriendsGetRequestsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public static void log(MethodMsg methodMsg){\n  if (methodMsg != null) {\n    treeMethods.add(methodMsg);\n  }\n else {\n    throw new NullPointerException(\"MethodMsg is null!\");\n  }\n}\n", "nl": "Send a debug log message"}
{"code": "public static void sendVerificationToken(AirMapCallback<Void> listener){\n  String url=String.format(pilotSendVerifyUrl,AirMap.getUserId());\n  AirMap.getClient().post(url,new VoidCallback(listener));\n}\n", "nl": "Verify the user's phone number"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public FriendsAreFriendsQuery(VkApiClient client,UserActor actor,List<Integer> userIds){\n  super(client,\"friends.areFriends\",Utils.buildParametrizedType(List.class,FriendStatus.class));\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public NewsfeedGetCommentsQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "protected Combo createCombo(Composite parent){\n  Combo combo=new Combo(parent,SWT.READ_ONLY);\n  GridData data=new GridData(GridData.FILL_HORIZONTAL);\n  data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;\n  combo.setLayoutData(data);\n  return combo;\n}\n", "nl": "Utility method that creates a combo box"}
{"code": "public void notifyRequestDialogObservers(Npc npc){\n  notifyObservers(ObserverType.NPCDIALOGREQUEST,npc);\n}\n", "nl": "notify that player requested dialog with npc"}
{"code": "public static double angle2Radian(double angle){\n  return angle / 180 * Math.PI;\n}\n", "nl": "angle to radian"}
{"code": "private void testUniqueProperty(UniqueVarProperty property){\n  getProperty(property.getClass()).filter(null).ifPresent(null);\n}\n", "nl": "Fail if there is already an equal property of this type"}
{"code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n", "nl": "Creates a new executor object for spawning worker threads"}
{"code": "public MessagesGetQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "MergedManifest(@NotNull Module module){\n  myModule=module;\n}\n", "nl": "Constructs a new MergedManifest"}
{"code": "public void addLive(boolean live){\n  query.append(\" +live:\" + live);\n}\n", "nl": "Adds +live to the query"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String[] firstLines=Basic.getFirstLinesFromFile(new File(fileName),2);\n  return firstLines != null && firstLines.length == 2 && firstLines[0].startsWith(\">\") && Basic.contains(firstLines[1],';',2) && !firstLines[1].toLowerCase().contains(\"root\");\n}\n", "nl": "is file acceptable?"}
{"code": "public void drawNodeAndLabel(Node v,boolean selected){\n  draw(v,selected);\n  drawLabel(v,selected);\n}\n", "nl": "draw the node and the label"}
{"code": "@Override protected int sizeOf(String key,BitmapDrawable value){\n  final int bitmapSize=getBitmapSize(value) / 1024;\n  return bitmapSize == 0 ? 1 : bitmapSize;\n}\n", "nl": "Measure item size in kilobytes rather than units which is more practical for a bitmap cache"}
{"code": "public int prepare(Object xid) throws CannotCommitException, UnknownTransactionException, RemoteException {\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.entering(TxnManagerImpl.class.getName(),\"prepare-xid\",xid);\n  }\n  TxnManagerTransaction txntr=_txns.get(xid);\n  if (txntr == null)   throw new UnknownTransactionException(\"unknown transaction\");\n  return txntr.prepare(Long.MAX_VALUE);\n}\n", "nl": "prepare the underlying xtn designated by the rendered xid"}
{"code": "public static void addStoneStats(Item item,ManaStone stone,CreatureGameStats<?> cgs){\n  List<StatFunction> modifiers=stone.getModifiers();\n  if (modifiers == null) {\n    return;\n  }\n  cgs.addEffect(stone,modifiers);\n}\n", "nl": "Used when socketing of equipped item"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public Bitmap put(String key,Bitmap value){\n  return cache.put(key,value);\n}\n", "nl": "put bitmap to image cache"}
{"code": "@Override public long limit(){\n  return fileLength;\n}\n", "nl": "length of array"}
{"code": "public void startClassificationSection(String name) throws IOException {\n  currentName=name;\n  dumpStart=io.getPosition();\n  classificationIndexTmpFileWriter=new OutputWriter(rma2File.getClassificationIndexTmpFile());\n  numberOfClasses=0;\n}\n", "nl": "start a new classification"}
{"code": "protected static Map<String,String> convertHeaders(Header[] headers){\n  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);\n  for (int i=0; i < headers.length; i++) {\n    result.put(headers[i].getName(),headers[i].getValue());\n  }\n  return result;\n}\n", "nl": "Converts Headers array to Map"}
{"code": "public static void writeByte(PacketBuffer buf,byte value){\n  buf.writeByte(value);\n}\n", "nl": "Writes a byte to the buffer"}
{"code": "public FileRecordWriter(Configuration conf) throws FileNotFoundException {\n  setConf(conf);\n}\n", "nl": "Initialized based on configuration Set the following attributes in the conf:"}
{"code": "public void addElem(AnnotationElem elem){\n  if (elems == null)   elems=new ArrayList<AnnotationElem>();\n  elems.add(elem);\n}\n", "nl": "Adds one element to the list"}
{"code": "public static void release(Application app){\n  if (sLifecycleCallbacks != null) {\n    app.unregisterActivityLifecycleCallbacks(sLifecycleCallbacks);\n  }\n  hideProgressDialogsAll();\n}\n", "nl": "Hides all dialogs and unregisters activity lifecycle callbacks"}
{"code": "public NotesCreateCommentQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n", "nl": "Set guid"}
{"code": "public BalloonTreeLayout(String group,int minRadius){\n  super(group);\n  m_minRadius=minRadius;\n}\n", "nl": "Create a new BalloonTreeLayout"}
{"code": "public XSSimpleTypeDecl newXSSimpleTypeDecl(){\n  return new XSSimpleTypeDecl();\n}\n", "nl": "Implementation internal"}
{"code": "public MediaWrapper(Uri uri){\n  if (uri == null)   throw new NullPointerException(\"uri was null\");\n  mUri=uri;\n  init(null);\n}\n", "nl": "Create a new MediaWrapper"}
{"code": "@GlobalCallback(PlayerGroupDisbandCallback.class) public static void disband(PlayerGroup group){\n  Preconditions.checkState(group.onlineMembers() <= 1,\"Can't disband group with more than one online member\");\n  groups.remove(group.getTeamId());\n  group.onEvent(new GroupDisbandEvent(group));\n}\n", "nl": "Disband group by removing all players one by one"}
{"code": "public static void main(final String[] args){\n  ConfigurationElementReport report=new ConfigurationElementReport(ConfigConstants.Action.CREATE,ConfigConstants.Entity.ALARM,new Long(100000),ConfigConstants.Status.WARNING,\"DOn't know why\");\n  report.addSubReport(new ConfigurationElementReport(ConfigConstants.Action.CREATE,ConfigConstants.Entity.DATATAG,new Long(400)));\n  System.out.println(report.toXML());\n}\n", "nl": "For testing only"}
{"code": "public static void runOnUiThread(Runnable runnable){\n  HANDLER.post(runnable);\n}\n", "nl": "Run on ui thread"}
{"code": "public CatchmeBoardStatues(int tagNumber,int itemset){\n  super();\n  this.tagNumber=tagNumber;\n  this.itemset=itemset;\n}\n", "nl": "init The CatchmeBoardStatues Using tagNumber and ItemSetNumber"}
{"code": "public void savePetMoodData(){\n  DAOManager.getDAO(PlayerPetsDAO.class).savePetMoodData(this);\n}\n", "nl": "Saves mood data to DB"}
{"code": "public void move(float delta){\n}\n", "nl": "Move the boss - Override Update function"}
{"code": "public DOMImplementationListImpl(Vector params){\n  fImplementations=new ArrayList(params);\n}\n", "nl": "Construct a list of DOMImplementations from a Vector"}
{"code": "void submit(ProcessAndDisplayImageTask task){\n  initExecutorsIfNeed();\n  taskExecutorForCachedImages.execute(task);\n}\n", "nl": "Submits task to execution pool"}
{"code": "public void addContactMech(String contactMechPurposeTypeId,String contactMechId){\n  if (contactMechPurposeTypeId == null)   throw new IllegalArgumentException(\"You must specify a contactMechPurposeTypeId to add a ContactMech\");\n  contactMechIdsMap.put(contactMechPurposeTypeId,contactMechId);\n}\n", "nl": "Add a contact mech to this purpose; the contactMechPurposeTypeId is required"}
{"code": "protected void drawXAxis(Graphics2D gc){\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));\n  int x=5;\n  int y=getHeight() - bottomMargin + 25;\n  if (isTranspose())   gc.drawString(getChartData().getClassesLabel(),x,y);\n else   gc.drawString(getChartData().getSeriesLabel(),x,y);\n}\n", "nl": "draw the x axis"}
{"code": "public static boolean isUrl(String url){\n  Pattern pattern=Pattern.compile(\"^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\\\/])+$\");\n  return pattern.matcher(url).matches();\n}\n", "nl": "is url"}
{"code": "public MessagesGetChatQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"messages.getChat\",ChatFull.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private boolean isIllegalIndex(int i){\n  return i < curStartIndex || i >= curEndIndex;\n}\n", "nl": "whether the index is illegal"}
{"code": "XSWildcardDecl traverseAnyAttribute(Element elmNode,XSDocumentInfo schemaDoc,SchemaGrammar grammar){\n  Object[] attrValues=fAttrChecker.checkAttributes(elmNode,false,schemaDoc);\n  XSWildcardDecl wildcard=traverseWildcardDecl(elmNode,attrValues,schemaDoc,grammar);\n  fAttrChecker.returnAttrArray(attrValues,schemaDoc);\n  return wildcard;\n}\n", "nl": "Traverse &lt;anyAttribute&gt;"}
{"code": "public boolean equals(Math_Vector other){\n  if (this.x == other.x && this.y == other.y)   return true;\n  return false;\n}\n", "nl": "compare each other vector, equals"}
{"code": "public PhotosCreateCommentQuery stickerId(Integer value){\n  return unsafeParam(\"sticker_id\",value);\n}\n", "nl": "Set sticker id"}
{"code": "public ResourcesPoet addBool(String name,boolean value){\n  addBool(name,String.valueOf(value));\n  return this;\n}\n", "nl": "Add a boolean to the config"}
{"code": "public MarketSearchQueryWithExtended albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Identifier of an album"}
{"code": "private void finish(){\n  mmLastY=0;\n  mRunning=false;\n  removeCallbacks(this);\n  if (!mAbort) {\n    autoScrollFinished();\n  }\n}\n", "nl": "remove the post callbacks and reset default values"}
{"code": "public void sendRequest(String url,final IRequestCallback uiUpdater){\n  Request request=new Request.Builder().url(url).build();\n  sendRequest(request,uiUpdater);\n}\n", "nl": "Simple HTTP GET request"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void mouseReleased(){\n  mSnapCandidates.clear();\n}\n", "nl": "Need to be called when the mouse is released"}
{"code": "public void close() throws IOException {\n  reader.close();\n}\n", "nl": "close this file"}
{"code": "public static UByte valueOf(int value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(value));\n}\n", "nl": "Get an instance of an <code>unsigned byte</code>"}
{"code": "@Override public boolean equals(Object other){\n  if (other instanceof IntArrayWrapper) {\n    return Arrays.equals(data,((IntArrayWrapper)other).data);\n  }\n  return false;\n}\n", "nl": "This method will be used check to ArrayWrapper object is equal or not"}
{"code": "public static boolean isNetworkAvailable(Context context){\n  ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n  if (null == manager)   return false;\n  NetworkInfo info=manager.getActiveNetworkInfo();\n  if (null == info || !info.isAvailable())   return false;\n  return true;\n}\n", "nl": "check NetworkAvailable"}
{"code": "public static String formatQuantity(Double quantity){\n  if (quantity == null)   return \"\";\n else   return formatQuantity(quantity.doubleValue());\n}\n", "nl": "Formats an Double representing a quantity into a string"}
{"code": "public static int spToPX(final Context ctx,float sp){\n  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,sp,ctx.getResources().getDisplayMetrics());\n}\n", "nl": "sp*ppi/160  =px"}
{"code": "@Override public void applyFacets(XSFacets facets,short presentFacet,short fixedFacet,ValidationContext context) throws InvalidDatatypeFacetException {\n  if (context == null) {\n    context=fEmptyContext;\n  }\n  applyFacets(facets,presentFacet,fixedFacet,SPECIAL_PATTERN_NONE,context);\n}\n", "nl": "If <restriction> is chosen"}
{"code": "public static Hash of(byte[] data){\n  return new Hash(hash(data,0,data.length));\n}\n", "nl": "Create a Hash with double SHA256 hash of arbitrary data"}
{"code": "public AudioGetByIdQuery(VkApiClient client,UserActor actor,List<String> audios){\n  super(client,\"audio.getById\",Utils.buildParametrizedType(List.class,AudioFull.class));\n  accessToken(actor.getAccessToken());\n  audios(audios);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public PhotosGetCommentsQuery sort(PhotosGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public NewsfeedGetRecommendedQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static List<Writable> toRecord(INDArray array){\n  List<Writable> writables=new ArrayList<>();\n  writables.add(new NDArrayWritable(array));\n  return writables;\n}\n", "nl": "Convert an ndarray to a record"}
{"code": "private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){\n  ClassReference objClassRef=objSubjectExpression.getClassReference();\n  if (null == objClassRef || null == objClassRef.getFQN()) {\n    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);\n    return;\n  }\n  objTypesSet.add(objClassRef.getFQN());\n}\n", "nl": "Will resolve type of new expression"}
{"code": "public String clientAppId(){\n  return (String)httpRequest.getAttribute(AuthenticationFilter.AuthenticatedRoleAttributeName);\n}\n", "nl": "Gets a caller id (IP + role)"}
{"code": "public MarketRemoveFromAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,int... albumIds){\n  super(client,\"market.removeFromAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  albumIds(albumIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void updateAircraft(AirMapAircraft aircraft,AirMapCallback<AirMapAircraft> listener){\n  String url=String.format(pilotAircraftByIdUrl,AirMap.getUserId(),aircraft.getAircraftId());\n  AirMap.getClient().patch(url,aircraft.getAsParamsPatch(),new GenericOkHttpCallback(listener,AirMapAircraft.class));\n}\n", "nl": "Update an aircraft for the authenticated user"}
{"code": "public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){\n  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;\n  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();\n  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority));\n}\n", "nl": "Creates default implementation of task executor"}
{"code": "public TapTarget icon(Drawable icon,boolean hasSetBounds){\n  if (icon == null)   throw new IllegalArgumentException(\"Cannot use null drawable\");\n  this.icon=icon;\n  if (!hasSetBounds) {\n    this.icon.setBounds(new Rect(0,0,this.icon.getIntrinsicWidth(),this.icon.getIntrinsicHeight()));\n  }\n  return this;\n}\n", "nl": "Specify the icon that will be drawn in the center of the target bounds"}
{"code": "public XSNamedMapImpl(String[] namespaces,SymbolHash[] maps,int num){\n  fNamespaces=namespaces;\n  fMaps=maps;\n  fNSNum=num;\n}\n", "nl": "Construct an XSNamedMap implementation for a list of namespaces"}
{"code": "public boolean isSelected(){\n  return selected;\n}\n", "nl": "is selected"}
{"code": "public MarketReorderItemsQuery before(Integer value){\n  return unsafeParam(\"before\",value);\n}\n", "nl": "Id of an item to place current item before it"}
{"code": "private void sortBrokerItems(BrokerItem[] brokerItems,int sortType){\n  Arrays.sort(brokerItems,BrokerItem.getComparatoryByType(sortType));\n}\n", "nl": "Perform sorting according to sort type"}
{"code": "public AccountSetSilenceModeQuery sound(Integer value){\n  return unsafeParam(\"sound\",value);\n}\n", "nl": "Set sound"}
{"code": "public SM_RIFT_ANNOUNCE(FastMap<Integer,Integer> rifts){\n  this.actionId=0;\n  this.rifts=rifts;\n}\n", "nl": "Rift announce packet"}
{"code": "public static boolean putBoolean(Context context,String key,boolean value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putBoolean(key,value);\n  return editor.commit();\n}\n", "nl": "put boolean preferences"}
{"code": "void processIntent(Intent intent){\n  Parcelable[] rawMsgs=intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);\n  NdefMessage msg=(NdefMessage)rawMsgs[0];\n  String playerMac=new String(msg.getRecords()[0].getPayload());\n  GameSetupManager.getInstance().addPlayer(playerMac);\n  addingPlayer.show();\n  Toast.makeText(getApplicationContext(),\"Adding Player : \" + playerMac,Toast.LENGTH_LONG).show();\n}\n", "nl": "Parses the NDEF Message from the intent and prints to the TextView"}
{"code": "public void updateContactList(List<User> contactInfoList){\n  for (  User u : contactInfoList) {\n    contactList.put(u.getUsername(),u);\n  }\n  ArrayList<User> mList=new ArrayList<User>();\n  mList.addAll(contactList.values());\n  ((DemoHXSDKModel)getModel()).saveContactList(mList);\n}\n", "nl": "update User cach And db"}
{"code": "protected SecureAddAppEventQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "ID of a user to save the data"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){\n  if (entity != null) {\n    requestBase.setEntity(entity);\n  }\n  return requestBase;\n}\n", "nl": "Applicable only to HttpRequest methods extending HttpEntityEnclosingRequestBase, which is for example not DELETE"}
{"code": "public synchronized void addRoute(String to,String via){\n  if (routeExists(to,via)) {\n    return;\n  }\n  addForwardEntry(to,via);\n  inverseTable.add(via,to);\n}\n", "nl": "Adds a new route"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.180535929306,0.262801138133,0.301905425199,0.330899152971,0.353441418887,0.000788590320203,0.00737060094841,0.0177576041516,0.0343043442574,0.065664589369};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public MarketSearchQueryWithExtended q(String value){\n  return unsafeParam(\"q\",value);\n}\n", "nl": "Search query, for example \"pink slippers\""}
{"code": "public int size(){\n  return nsplits;\n}\n", "nl": "get size"}
{"code": "public GroupsCreateQuery subtype(GroupsCreateSubType value){\n  return unsafeParam(\"subtype\",value);\n}\n", "nl": "Public page subtype"}
{"code": "public EigenValueDecomposition eig(){\n  return new EigenValueDecomposition(this);\n}\n", "nl": "Eigenvalue Decomposition"}
{"code": "public boolean isLocaleSpecificLayout(){\n  return myEditedConfig.getLocaleQualifier() != null;\n}\n", "nl": "Returns true if the current layout is locale-specific"}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?"}
{"code": "public void storeInfoSection() throws IOException {\n  try (InputOutputReaderWriter io=new InputOutputReaderWriter(file,\"rw\")){\n    if (infoSection.getInfoSectionStart() <= 0)     throw new IOException(\"getInfoSectionStart(), illegal value: \" + infoSection.getInfoSectionStart());\n    io.seek(infoSection.getInfoSectionStart());\n    infoSection.write(io);\n    io.setLength(io.getPosition());\n  }\n }\n", "nl": "store the infosection"}
{"code": "public double angle(){\n  double angle=Math.atan2(y,x) * TO_DEGREES;\n  if (angle < 0)   angle+=360;\n  return angle;\n}\n", "nl": "calculate the angle"}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?"}
{"code": "public TapTarget titleTextSize(int sp){\n  if (sp < 0)   throw new IllegalArgumentException(\"Given negative text size\");\n  this.titleTextSize=sp;\n  return this;\n}\n", "nl": "Specify the text size for the title in SP"}
{"code": "public NewsfeedSearchQueryWithExtended fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "protected Udb82DatabaseType(){\n}\n", "nl": "Extendable Singleton"}
{"code": "public static ITextComponent readTextComponent(PacketBuffer buf){\n  return ITextComponent.a.jsonToComponent(readString(buf));\n}\n", "nl": "Reads a text component from the buffer"}
{"code": "public boolean isInitializationComplete(){\n  return nodeInitStageAdvancer.isInitializationComplete();\n}\n", "nl": "Gets the initialization state"}
{"code": "public static byte[] bitmapToByte(Bitmap b){\n  ByteArrayOutputStream o=new ByteArrayOutputStream();\n  b.compress(Bitmap.CompressFormat.PNG,100,o);\n  return o.toByteArray();\n}\n", "nl": "convert Bitmap to byte array"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public CommandManagerFX(IDirector dir,List<ICommand> commands){\n  super(dir,commands);\n}\n", "nl": "construct a parser"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean write(byte[] bytes,int offset,int size){\n  System.arraycopy(bytes,offset,outputData,curIndex,size);\n  curIndex+=size;\n  return true;\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "public static GenericPK create(ModelEntity modelEntity){\n  GenericPK newPK=new GenericPK();\n  newPK.init(modelEntity);\n  return newPK;\n}\n", "nl": "Creates new GenericPK"}
{"code": "public CMUArcticVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){\n  super(name,gender,age,description,locale,domain,organization,lexicon,database);\n}\n", "nl": "Creates a simple cluster unit voice for the ARCTIC voices"}
{"code": "public boolean isApplicable(){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  return inspectorWindow != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void drawUndirectedEdge(String label1,String label2){\n}\n", "nl": "draws an undirected edge"}
{"code": "public static void createFolder(String path){\n  File file=new File(path);\n  file.mkdirs();\n}\n", "nl": "create multilevel folder"}
{"code": "protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){\n  for (int i=0; i < mYAxis.mEntryCount; i++) {\n    String text=mYAxis.getFormattedLabel(i);\n    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;\n    c.drawText(text,fixedPosition,positions[i * 2 + 1] + offset,mAxisLabelPaint);\n  }\n}\n", "nl": "draws the y-labels on the specified x-position"}
{"code": "public void mouseReleased(MouseEvent e){\n  int x=mViewTransform.getAndroidX(e.getX());\n  int y=mViewTransform.getAndroidY(e.getY());\n  mouseReleased(x,y);\n}\n", "nl": "Mouse release handling"}
{"code": "public boolean isApplicable(){\n  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static ByteBuffer base64StringToByteBuffer(String base64EncodedKey){\n  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));\n}\n", "nl": "Converts a base64 encoded key into a ByteBuffer"}
{"code": "private static int snapWidth(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int width,ArrayList<SnapCandidate> snapCandidates){\n  int rightPosition=widget.getDrawX() + width;\n  rightPosition=snapHorizontal(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.RIGHT),rightPosition,snapCandidates);\n  width=rightPosition - widget.getDrawX();\n  return width;\n}\n", "nl": "Convenience function to snap the width"}
{"code": "public static int computeHash(byte[] key,int offset,int length,int mask){\n  return Math.abs(MurmurHash3.murmurhash3x8632(key,offset,length,666) & mask);\n}\n", "nl": "compute the hash value for a given key"}
{"code": "public DateTimeUnit toUtc(){\n  return DateTimeUnit.fromJodaDateTime(toJodaDateTime().toDateTime(DateTimeZone.UTC),true);\n}\n", "nl": "Return current instance with timeZone set to UTC"}
{"code": "protected void addToolbarActionsToMenu(@NotNull String label,@NotNull List<ViewAction> actions){\n  List<ViewAction> nestedActions=Lists.newArrayList();\n  addToolbarActions(nestedActions);\n  actions.add(new ViewActionMenu(label,null,nestedActions));\n}\n", "nl": "Utility method which exposes the toolbar actions in a submenu"}
{"code": "@Override public int[] makeInverseCumulativeTestValues(){\n  return new int[]{-3,-3,-3,-3,-3,-3,-2,1,5,5,5,5,5,5};\n}\n", "nl": "Creates the default inverse cumulative probability density test expected values"}
{"code": "public double quadraticMean(){\n  return quadraticMean.reduce(this);\n}\n", "nl": "Returns the quadraticMean, aka the root-mean-square, for all values in this column"}
{"code": "public void closeCurrentConnection(){\n  if (connection != null) {\n    closeUnderlyingConnection();\n    connection=null;\n  }\n}\n", "nl": "Must be called by the resource owner"}
{"code": "public Builder takeLastColumns(String... columns){\n  return add(ReduceOp.TakeLast,columns);\n}\n", "nl": "Reduce the specified columns by taking the last value"}
{"code": "private void deleteEntry(final SQLiteDatabase database,final String stringId){\n  database.delete(SongPlayCountColumns.NAME,WHERE_ID_EQUALS,new String[]{stringId});\n}\n", "nl": "Deletes the entry"}
{"code": "private ServiceStarter(){\n}\n", "nl": "Prevent instantiation"}
{"code": "public static boolean isVisa(String cc){\n  if (((cc.length() == 16) || (cc.length() == 13)) && (cc.substring(0,1).equals(\"4\")))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid Visa number"}
{"code": "protected void verifyConsistency(PolynomialSplineFunction f,double x[]){\n  PolynomialFunction polynomials[]=f.getPolynomials();\n  for (int i=1; i < x.length - 2; i++) {\n    Assert.assertEquals(polynomials[i].value(x[i + 1] - x[i]),polynomials[i + 1].value(0),0.1);\n    Assert.assertEquals(polynomials[i].polynomialDerivative().value(x[i + 1] - x[i]),polynomials[i + 1].polynomialDerivative().value(0),0.5);\n    Assert.assertEquals(polynomials[i].polynomialDerivative().polynomialDerivative().value(x[i + 1] - x[i]),polynomials[i + 1].polynomialDerivative().polynomialDerivative().value(0),0.5);\n  }\n}\n", "nl": "Verifies that interpolating polynomials satisfy consistency requirement: adjacent polynomials must agree through two derivatives at knot points"}
{"code": "public void remoteResourceCreated(ISVNRemoteFolder parent,String resourceName){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.remoteResourceCreated(parent,resourceName);\n  }\n}\n", "nl": "signals all listener that a remote resource has been created"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "public boolean shouldCreateData(){\n  return userRepository.count() == 0;\n}\n", "nl": "Checks if a system user exists to know if we need to create data or not"}
{"code": "public void openThriftWriter(String filePath) throws IOException {\n  thriftWriter=new ThriftWriter(filePath,true);\n  thriftWriter.open();\n}\n", "nl": "Below method will be used to open the thrift writer"}
{"code": "public boolean isSetLocalContext(){\n  return this.localContext != null;\n}\n", "nl": "Returns true if field localContext is set (has been assigned a value) and false otherwise"}
{"code": "public int targetSdkVersion(){\n  List<AXmlNode> usesSdk=this.manifest.getChildrenWithTag(\"uses-sdk\");\n  if (usesSdk == null || usesSdk.isEmpty())   return -1;\n  AXmlAttribute<?> attr=usesSdk.get(0).getAttribute(\"targetSdkVersion\");\n  if (attr == null)   return -1;\n  if (attr.getValue() instanceof Integer)   return (Integer)attr.getValue();\n  return Integer.getInteger((String)attr.getValue());\n}\n", "nl": "Gets the target SDK version for which this application was developed"}
{"code": "synchronized private boolean haveDataToTransmit(){\n  if (!transmitResult.compareAndSet(BKException.Code.OK,BKException.Code.OK)) {\n    return false;\n  }\n  return (recordSetWriter.getNumRecords() > 0);\n}\n", "nl": "Checks if there is any data to transmit so that the periodic flush task can determine if there is anything it needs to do"}
{"code": "public TapTarget cancelable(boolean status){\n  this.cancelable=status;\n  return this;\n}\n", "nl": "Specify whether or not the target should be cancelable"}
{"code": "public AuthConfirmQuery intro(Integer value){\n  return unsafeParam(\"intro\",value);\n}\n", "nl": "Set intro"}
{"code": "public boolean isFullyZoomedOut(){\n  return isFullyZoomedOutX() && isFullyZoomedOutY();\n}\n", "nl": "if the chart is fully zoomed out, return true"}
{"code": "public static void removeRunable(Runnable runnable){\n  HANDLER.removeCallbacks(runnable);\n}\n", "nl": "Remove runnable"}
{"code": "public final void updateZone(){\n  ZoneUpdateService.getInstance().add(getOwner());\n}\n", "nl": "Zone update mask management"}
{"code": "public static void ignoreFidelityWarning(@NotNull Object clientData){\n  if (ourIgnoredFidelityWarnings == null) {\n    ourIgnoredFidelityWarnings=new HashSet<String>();\n  }\n  ourIgnoredFidelityWarnings.add((String)clientData);\n}\n", "nl": "Ignore the given render fidelity warning for the current session"}
{"code": "public boolean isAbnormalPresentBySkillId(int skillId){\n  for (  Effect effect : abnormalEffectMap.values()) {\n    if (effect.getSkillId() == skillId) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Return true if skillId is present among creature's abnormals"}
{"code": "public static <T>void writeArray(PacketBuffer buf,T[] value,BiConsumer<PacketBuffer,T> writer){\n  buf.writeInt(value.length);\n  for (  T t : value) {\n    writer.accept(buf,t);\n  }\n}\n", "nl": "Writes an array to the buffer"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CMD_SHOUT_OUTPUT_NPC(String value0){\n  return new SM_SYSTEM_MESSAGE(1400002,value0);\n}\n", "nl": "%0 Shouts:"}
{"code": "public TLongObjectIterator(TLongObjectHashMap<V> map){\n  super(map);\n  this._map=map;\n}\n", "nl": "Creates an iterator over the specified map"}
{"code": "public boolean isSwipeable(final int _index){\n  if (getItemViewType(_index) == TYPE_HEADER) {\n    return false;\n  }\n  return true;\n}\n", "nl": "The item will NOT be swipeable if already seen or has unseen posts"}
{"code": "public SplitSystem(Taxa allTaxa,PhyloTree tree){\n  this();\n  splitsFromTreeRec(tree.getRoot(),tree,allTaxa,allTaxa.getBits(),new NodeArray(tree),this);\n}\n", "nl": "constructs a set of splits from a tree"}
{"code": "@Override public void writeExternal(ObjectOutput out) throws IOException {\n  PlatformLogicalVersion version=LRMIInvocationContext.getEndpointLogicalVersion();\n  writeExternal(out,version);\n}\n", "nl": "Required for Externalizable"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "private void mapStateProperties(ContainerState containerState,Map<String,Object> state){\n  if (state == null) {\n    return;\n  }\n  containerState.started=parseDate(state.get(DOCKER_CONTAINER_STATE_STARTED_PROP_NAME));\n  mapPowerState(containerState,state);\n}\n", "nl": "Process properties in the State object"}
{"code": "public static boolean isValidEmail(String email){\n  return Patterns.EMAIL_ADDRESS.matcher(email).matches();\n}\n", "nl": "Check if an email is valid"}
{"code": "public boolean isElemhide(){\n  return isOptionEnabled(UrlFilterRuleOption.ELEMHIDE);\n}\n", "nl": "If true -- CssFilter cannot be applied to page"}
{"code": "@deprecated public TimeZoneFormat cloneAsThawed(){\n  TimeZoneFormat copy=(TimeZoneFormat)super.clone();\n  copy._frozen=false;\n  return copy;\n}\n", "nl": "/*     "}
{"code": "public CommandTagAdd(){\n}\n", "nl": "Creates a new command tag add event"}
{"code": "public Webster(int port,String roots,String bindAddress) throws BindException {\n  this.port=port;\n  initialize(roots,bindAddress);\n}\n", "nl": "Create a new Webster"}
{"code": "public PhotosEditAlbumQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapStatusAdvisory && getId().equals(((AirMapStatusAdvisory)o).getId());\n}\n", "nl": "Comparison based on ID"}
{"code": "public NewsfeedGetCommentsQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AuthRestoreQuery(VkApiClient client,String phone){\n  super(client,\"auth.restore\",RestoreResponse.class);\n  phone(phone);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private boolean onCheckCanRefresh(){\n  return mRefreshEnabled && !canChildScrollUp() && mHasHeaderView&& mRefreshTriggerOffset > 0;\n}\n", "nl": "check if it can refresh"}
{"code": "@Override public long addModule(Module module){\n  return sessionTemplate.insert(NAMESPACE + \".addModule\",module);\n}\n", "nl": "Add new module"}
{"code": "public void removeListener(ISpaceModeListener listener){\n  _listeners.remove(listener);\n}\n", "nl": "Removes a listener for space availability"}
{"code": "public UsersGetSubscriptionsQueryWithExtended fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  super.source=source;\n}\n", "nl": "Serialization support"}
{"code": "public WallGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void debugInfo(String msg){\n  debugInfo(DEFAULT_TAG,msg);\n}\n", "nl": "author  hhj TODO"}
{"code": "public boolean end(){\n  return true;\n}\n", "nl": "Marks the end of a set of data"}
{"code": "@deprecated public CompactCharArray(){\n  this('\\000');\n}\n", "nl": "/*    "}
{"code": "public Disk(Vector position,Vector speed,double radius){\n  this.position=position;\n  this.speed=speed;\n  this.radius=radius;\n}\n", "nl": "Disk construction"}
{"code": "public static GenericValue findWebSite(Delegator delegator,String webSiteId){\n  return findWebSite(delegator,webSiteId,true);\n}\n", "nl": "returns a WebSite-GenericValue (using entityCache)"}
{"code": "@Override public int fillChunkData(byte[] data,int offset,int index,KeyStructureInfo restructuringInfo){\n  return 0;\n}\n", "nl": "Below method will be used to fill the data based on offset and row id"}
{"code": "public WallSearchQueryWithExtended(VkApiClient client){\n  super(client,\"wall.search\",SearchExtendedResponse.class);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "final public static long updateCollection(String collection,Object id,V v){\n  return updateCollection(collection,new BasicDBObject(X.ID,id),v);\n}\n", "nl": "update the data in collection"}
{"code": "public double expectedWeightedValue(){\n  return this.weightedMean;\n}\n", "nl": "Expected value for the testArray defined in UnivariateStatisticAbstractTest"}
{"code": "public FriendsDeleteAllRequestsQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.deleteAllRequests\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MessagesGetChatQueryWithChatIds nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public void onSuccess(int statusCode,Header[] headers,JSONArray response){\n}\n", "nl": "Returns when request succeeds"}
{"code": "public static Patterns packages(String[] includes){\n  return new Patterns(includes,new String[]{});\n}\n", "nl": "Sets the package patterns to scan"}
{"code": "public SCostFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n", "nl": "Create a unit file reader from the given unit file"}
{"code": "public static final void emoteStartFollowing(Npc owner){\n  owner.unsetState(CreatureState.WALKING);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));\n}\n", "nl": "Npc starts following other creature"}
{"code": "public ExitMonitorInst newExitMonitorInst(){\n  return new BExitMonitorInst();\n}\n", "nl": "Constructs a ExitMonitorInst() grammar chunk"}
{"code": "public AbstractSpaceRequestInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public void resetCircleColors(){\n  mCircleColors=new ArrayList<>();\n}\n", "nl": "resets the circle-colors array and creates a new one"}
{"code": "public boolean isValid(){\n  return getFlightId() != null;\n}\n", "nl": "Determines whether the current AirMapFlight is valid or not"}
{"code": "public String toString(){\n  return \"MultiFile8BitAudioPlayer\";\n}\n", "nl": "Returns the name of this audioplayer"}
{"code": "@Override public boolean isAlreadyMatched(){\n  return false;\n}\n", "nl": "is the entry returned already matched against the searching template currently is true if the underlying scan made by CacheManager::EntriesIter"}
{"code": "void modifiedCharacterData(NodeImpl node,String oldvalue,String value,boolean replace){\n}\n", "nl": "A method to be called when a character data node has been modified"}
{"code": "public boolean isEmpty(){\n  return dataMap.isEmpty();\n}\n", "nl": "is table empty?"}
{"code": "public void writeFloat(float a) throws IOException {\n  byteBuffer.putFloat(0,a);\n  byteBuffer.rewind();\n  byteBuffer.get(bytes,0,4);\n  swap(bytes,4);\n  outs.write(bytes,0,4);\n}\n", "nl": "write float, little endian"}
{"code": "public void beforeMemberAdded(MemberAddedEvent memberAddedEvent){\n}\n", "nl": "Called before target member is added"}
{"code": "public static <T>T checkNotNull(T object,String message){\n  if (object == null) {\n    throw new NullPointerException(message);\n  }\n  return object;\n}\n", "nl": "Check if object is null and throw"}
{"code": "public Matrix inverse(){\n  return solve(identity(m,m));\n}\n", "nl": "Matrix inverse or pseudoinverse"}
{"code": "private void selectColumn(int col){\n  for (int row=0; row < dataGrid.getRowCount(); row++)   spreadsheetView.getSelectionModel().select(row,spreadsheetView.getColumns().get(col));\n}\n", "nl": "select the given column"}
{"code": "public void showMessage(String message){\n  showError(message);\n}\n", "nl": "Show snackbar message"}
{"code": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + ((carbonTableIdentifier == null) ? 0 : carbonTableIdentifier.hashCode());\n  result=prime * result + ((storePath == null) ? 0 : storePath.hashCode());\n  return result;\n}\n", "nl": "to get the hash code"}
{"code": "final public void response(JSON jo){\n  if (jo == null) {\n    responseJson(\"{}\");\n  }\n else {\n    responseJson(jo.toString());\n  }\n}\n", "nl": "output the json as \"application/json\" to end-user"}
{"code": "public static void createRMA6FileFromDAA(String creator,String daaFile,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {\n  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,BlastFileFormat.DAA,doc.getBlastMode(),new String[]{daaFile},new String[]{},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);\n  rma6Creator.parseFiles(progressListener);\n}\n", "nl": "create an RMA6 file from a DAA file"}
{"code": "public GroupsCreateQuery type(GroupsCreateType value){\n  return unsafeParam(\"type\",value);\n}\n", "nl": "Community type"}
{"code": "public static void drawButtonTwitter(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){\n  if (!visible)   return;\n  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);\n  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);\n  getTextureHandler().bindModTexture(\"textures/misc/twitter256.png\");\n  getGlStateManager().color(1.0F,1.0F,1.0F);\n  drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14);\n}\n", "nl": "Draws a small button with the twitter logo on it"}
{"code": "public static void f(String tag,String msg){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg);\n}\n", "nl": "Send a FATAL ERROR log message"}
{"code": "public FactoryConfigurationError(java.lang.Exception e){\n  nested=e;\n}\n", "nl": "Construct an exception with a nested inner exception"}
{"code": "public Lex(String code){\n  this(new StringReader(code));\n}\n", "nl": "Construct a lexical analyzer to analysis a piece of code as String"}
{"code": "public NotesAddQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "public PhotosCreateAlbumQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "public static AlertDialog createOkDialog(final Activity activity,final String title,final String text,final DialogInterface.OnClickListener okListener){\n  AlertDialog dialog=new AlertDialog.Builder(activity).setTitle(title).setMessage(text).setPositiveButton(android.R.string.ok,okListener).create();\n  dialog.setOwnerActivity(activity);\n  return dialog;\n}\n", "nl": "Displays a dialog box with an OK button"}
{"code": "public Table<C,R,V> computeTransposedTable(){\n  final Table<C,R,V> transposed=new Table<>();\n  for (  R row : rowKeySet())   for (  C col : columnKeySet())   transposed.put(col,row,get(row,col));\n  return transposed;\n}\n", "nl": "compute table with tranposed rows and cols"}
{"code": "public ImageLoader(int height,int width,int channels){\n  super();\n  this.height=height;\n  this.width=width;\n  this.channels=channels;\n}\n", "nl": "Instantiate an image with the given height and width"}
{"code": "public Spring(ForceItem fi1,ForceItem fi2,float k,float len){\n  item1=fi1;\n  item2=fi2;\n  coeff=k;\n  length=len;\n}\n", "nl": "Create a new Spring instance"}
{"code": "public ImageResizer(Context context,int imageWidth,int imageHeight){\n  super(context);\n  setImageSize(imageWidth,imageHeight);\n}\n", "nl": "Initialize providing a single target image size (used for both width and height);"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "@NotNull public Face findSingleFace(@NotNull String imageUrl){\n  List<Face> faces=faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,imageUrl).withResult();\n  if (Utils.isEmpty(faces) || faces.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(faces) ? 0 : faces.size(),\"a single face was not present\");\n  return faces.get(0);\n}\n", "nl": "Find a single face within a given url"}
{"code": "public boolean isIncludeGlobalWorld(){\n  return this.includeGlobalWorld;\n}\n", "nl": "Gets if global or non world specific nodes should be applied"}
{"code": "@NonNull public static StorableFence or(@NonNull Collection<StorableFence> fences){\n  StorableFence metaFence=new StorableFence(Type.META);\n  metaFence.mOrFences.addAll(fences);\n  return metaFence;\n}\n", "nl": "Creates a meta storable fence which is a logical 'or' of all the given fences"}
{"code": "public void put(String key,Object ser){\n  put(key,ser,null);\n  put(\"\",\"\",new Base64Cipher());\n}\n", "nl": "*************** put"}
{"code": "public boolean isSelected(@NotNull NlComponent component){\n  return mySelection.contains(component);\n}\n", "nl": "Returns true if the given component is part of the selection"}
{"code": "public static OcrHelper init(String dataPath,int widthPixels,int heightPixels,String nidoFemale,String nidoMale,boolean isPokeSpamEnabled){\n  if (instance == null) {\n    instance=new OcrHelper(dataPath,widthPixels,heightPixels,nidoFemale,nidoMale,isPokeSpamEnabled);\n  }\n  return instance;\n}\n", "nl": "init Initializes the OCR helper and readies it for use"}
{"code": "public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener){\n  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());\n}\n", "nl": "Show error view with a button when something goes wrong and prompting the user to try again"}
{"code": "public TypeQueryExtensionImpl(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public void zoomTo(float zoom){\n  this.zoom=zoom;\n}\n", "nl": "Change the zoom level"}
{"code": "public static <T>IStoredList<T> createRandomScanList(boolean reuseLocks){\n  return createStoredList(true,reuseLocks);\n}\n", "nl": "Creates a StoredList that can be scanned from random position"}
{"code": "private void makeMultiTraversal(){\n  Optional<String> roleA=roletypes.get(0);\n  String playerA=roleplayers.get(0);\n  Optional<String> roleB=roletypes.get(1);\n  String playerB=roleplayers.get(1);\n  multiTraversal=MultiTraversal.create(new FragmentImpl(null,FragmentPriority.EDGE_RELATION,playerA,playerB),new FragmentImpl(null,FragmentPriority.EDGE_RELATION,playerB,playerA));\n}\n", "nl": "Create a MultiTraversal that follows shortcut edges"}
{"code": "public boolean isAlreadyMatched(){\n  return false;\n}\n", "nl": "is the entry returned already matched against the searching template currently is true if the underlying scan made by CacheManager::EntriesIter"}
{"code": "public void toAllInRadius(WorldServer world,Vec3i pos,double radius){\n  toAllInRadius(world,new Vec3d(pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5),radius);\n}\n", "nl": "Sends this packet to all the players in the world within the radius"}
{"code": "public Layer(){\n  super();\n}\n", "nl": "Construct the overlay"}
{"code": "public ItemStack(final Material type,final int amount,final short damage){\n  this(type.getId(),amount,damage);\n}\n", "nl": "An item stack with the specified damage / durabiltiy"}
{"code": "private static void decreaseKinahAmount(Player player,long price){\n  player.getInventory().decreaseKinah(price);\n}\n", "nl": "This method will decrease the kinah amount of a player"}
{"code": "protected void okPressed(){\n  if (createNewConfig())   super.okPressed();\n else {\n    Shell defaultShell=SootPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getShell();\n    String projectName=getSootMainProjectWidget().getText().getText();\n    MessageDialog.openError(defaultShell,\"Unable to find Soot Main Project\",\"Project \" + projectName + \" does not exist,\"+ \" is no Java project or is closed.\");\n  }\n}\n", "nl": "all options get saved as (alias, value) pair"}
{"code": "public static boolean isSolo(String cc){\n  String first4digs=cc.substring(0,4);\n  String first2digs=cc.substring(0,2);\n  if (((cc.length() == 16) || (cc.length() == 18) || (cc.length() == 19)) && (first2digs.equals(\"63\") || first4digs.equals(\"6767\")))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid Solo number"}
{"code": "public SubEquipmentCacheObject(final Long pId,final String pName,final String pDescription,final String pHandlerClassName,final Long pStateTagId,final Long pAliveTagId,final int pAliveInterval,final Long pCommfaultTagId,final Long pParentId){\n  super(pId,pName,pDescription,pHandlerClassName,pStateTagId,pAliveTagId,pAliveInterval,pCommfaultTagId);\n  this.parentId=pParentId;\n}\n", "nl": "Creates a new SubEquipmentCacheObject containing the information provided within the parameters"}
{"code": "public void replaceLocationManager(LocationManager locationManager) throws IOException {\n  InfoSection infoSection=loadInfoSection();\n  infoSection.syncLocationManager2InfoSection(locationManager);\n  storeInfoSection();\n}\n", "nl": "replace the location manager by a new one"}
{"code": "@Override protected void monitor() throws Exception {\n  checkAvailability();\n  if (serviceMonitor == null)   serviceMonitor=new GSPingManager();\n}\n", "nl": "Get the class which implements the ServiceMonitor"}
{"code": "public void purgeCache(IContainer root,boolean deep) throws SVNException {\n  statusCache.purgeCache(root,deep);\n}\n", "nl": "Purge the status information from the cache"}
{"code": "private static Comparable<?> castToComparable(Object obj){\n  try {\n    return (Comparable<?>)obj;\n  }\n catch (  ClassCastException cce) {\n    throw new IllegalArgumentException(\"Type \" + obj.getClass() + \" doesn't implement Comparable, Serialization mode might be different than \"+ StorageType.OBJECT+ \".\",cce);\n  }\n}\n", "nl": "Cast the object to Comparable otherwise throws an IllegalArgumentException exception"}
{"code": "public WatchedObject addRequestWatch(SocketChannel sock,ConnectionResource client){\n  return addWatch(new WatchedObject(this,sock,client));\n}\n", "nl": "Add given socket to the watched objects (request group)"}
{"code": "public void createRemoteFolder(ISVNRemoteFolder parent,String folderName,String message,IProgressMonitor monitor) throws SVNException {\n  parent.createRemoteFolder(folderName,message,monitor);\n}\n", "nl": "Creates a remote folder"}
{"code": "@NotNull public DesignSurfaceFixture requireSelection(@NotNull List<NlComponentFixture> components){\n  assertEquals(components,getSelection());\n  return this;\n}\n", "nl": "Requires the selection to have the given number of selected widgets"}
{"code": "public static int spToPX(final Context ctx,float sp){\n  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,sp,ctx.getResources().getDisplayMetrics());\n}\n", "nl": "sp*ppi/160  =px"}
{"code": "@Deprecated public void onFailure(int statusCode,Throwable error,String content){\n  onFailure(error,content);\n}\n", "nl": "Fired when a request fails to complete, override to handle in your own code"}
{"code": "private void requestForUpload(OCFile file){\n  FileUploader.UploadRequester requester=new FileUploader.UploadRequester();\n  requester.uploadUpdate(mContext,mAccount,file,FileUploader.LOCAL_BEHAVIOUR_MOVE,true);\n  mTransferWasRequested=true;\n}\n", "nl": "Requests for an upload to the FileUploader service"}
{"code": "void assignCoordinateFromPadding(){\n  mCoordinate=mLayoutFromEnd ? mOrientationHelper.getEndAfterPadding() : mOrientationHelper.getStartAfterPadding();\n}\n", "nl": "assigns anchor coordinate from the RecyclerView's padding depending on current layoutFromEnd value"}
{"code": "public ReachingCopies(Object analyze){\n  super();\n  DavaFlowSet temp=(DavaFlowSet)process(analyze,new DavaFlowSet());\n}\n", "nl": "END OF LOCAL PAIR CLASS"}
{"code": "private void appendRestrictedContentType(ContentType contentType){\n  if (restrictedContentTypesMask == 0) {\n    restrictedContentTypesMask=contentType.getFlagValue();\n  }\n else {\n    restrictedContentTypesMask|=contentType.getFlagValue();\n  }\n}\n", "nl": "Appends new content type to restricted list (depending on the current restricted content types)"}
{"code": "public void buildIndex(List<DataFileFooter> footerList){\n  segmentProperties=new SegmentProperties(footerList.get(0).getColumnInTable(),footerList.get(0).getSegmentInfo().getColumnCardinality());\n  BTreeBuilderInfo indexBuilderInfo=new BTreeBuilderInfo(footerList,segmentProperties.getDimensionColumnsValueSize());\n  BtreeBuilder blocksBuilder=new BlockletBTreeBuilder();\n  blocksBuilder.build(indexBuilderInfo);\n  dataRefNode=blocksBuilder.get();\n  totalNumberOfRows=footerList.get(0).getNumberOfRows();\n}\n", "nl": "Below method will be used to load the data block"}
{"code": "public static void warnInfo(String msg){\n  warnInfo(\"zhibo\",msg);\n}\n", "nl": "author  hhj TODO"}
{"code": "protected Set<D> computeCallFlowFunction(FlowFunction<D> callFlowFunction,D d1,D d2){\n  return callFlowFunction.computeTargets(d2);\n}\n", "nl": "Computes the call flow function for the given call-site abstraction"}
{"code": "public Math_Vector mul(Math_Vector other){\n  this.x*=other.x;\n  this.y*=other.y;\n  return this;\n}\n", "nl": "mul the Math_Vector using scalar"}
{"code": "public FactoryConfigurationError(java.lang.String msg){\n  super(msg);\n}\n", "nl": "Construct an exception with associated message"}
{"code": "@deprecated public final void reset(char[] chars){\n  int length=0;\n  if (chars != null) {\n    length=chars.length;\n  }\n  reset(chars,0,length);\n}\n", "nl": "/*    "}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?"}
{"code": "@Override public void deleteObject(String sObjectName,String sObjectCategory){\n  int index;\n  super.deleteObject(sObjectName,sObjectCategory);\n  ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);\n  index=nlist.indexOf(sObjectName);\n  nlist.remove(index);\n  super.saveObject(nlist,sObjectCategory,ListCategoryName);\n}\n", "nl": "deletes the object"}
{"code": "public CartPaymentInfo addPayment(String id){\n  return this.addPaymentAmount(id,null,false);\n}\n", "nl": "adds a payment method/payment method type"}
{"code": "@Override public void clearDataTags(){\n  dataTagTable.clear();\n}\n", "nl": "Clears the data tags of this time deadband activator"}
{"code": "public void cancel(){\n  mDna.eliminate();\n}\n", "nl": "Cancel the flow"}
{"code": "public MarketSearchQueryWithExtended searchExtended(UserActor actor,int ownerId){\n  return new MarketSearchQueryWithExtended(getClient(),actor,ownerId);\n}\n", "nl": "Searches market items in a community's catalog"}
{"code": "public void clear(AbsoluteTableIdentifier absoluteTableIdentifier){\n  tableLockMap.remove(absoluteTableIdentifier);\n  tableSegmentMap.remove(absoluteTableIdentifier);\n}\n", "nl": "remove all the details of a table this will be used in case of drop table"}
{"code": "@TargetApi(Build.VERSION_CODES.CUPCAKE) public static void image(BitmapListener listener,String type){\n  BitmapTask task=new BitmapTask();\n  task.setListener(listener);\n  task.execute(imageUrl(type));\n}\n", "nl": "random cat images bitmap"}
{"code": "private static double[] column(int column,double[]... nums) throws IllegalArgumentException {\n  double[] ret=new double[nums.length];\n  for (int i=0; i < nums.length; i++) {\n    double[] curr=nums[i];\n    ret[i]=curr[column];\n  }\n  return ret;\n}\n", "nl": "This returns the given column over an n arrays"}
{"code": "public static void checkFlightPath(List<Coordinate> path,int width,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean weather,Date date,AirMapCallback<AirMapStatus> listener){\n  String url=statusPathUrl;\n  Map<String,String> params=AirMapStatus.getAsParams(takeOffPoint,types,ignoredTypes,weather,date);\n  params.put(\"geometry\",\"LINESTRING(\" + makeGeoString(path) + \")\");\n  AirMap.getClient().get(url,params,new GenericOkHttpCallback(listener,AirMapStatus.class));\n}\n", "nl": "Get a flight status based on a Multi-point based flight"}
{"code": "public static ToolbarTapTarget forToolbarNavigationIcon(Toolbar toolbar,CharSequence title){\n  return forToolbarNavigationIcon(toolbar,title,null);\n}\n", "nl": "Return a tap target for the navigation button (back, up, etc) from the given toolbar"}
{"code": "@Override public void accept(@NonNull final Object reference){\nsynchronized (this) {\n    this.reference=reference;\n  }\n  updateDispatcher.update();\n}\n", "nl": "Post an Event"}
{"code": "public void removeClickingListener(OnWheelClickedListener listener){\n  clickingListeners.remove(listener);\n}\n", "nl": "Removes wheel clicking listener"}
{"code": "public void lockUserInput(){\n  isLocked=true;\n  getTabbedPane().setEnabled(false);\n  if (commandManager != null)   commandManager.setEnableCritical(false);\n  setCursor(new Cursor(Cursor.WAIT_CURSOR));\n}\n", "nl": "ask view to prevent user input"}
{"code": "@Override public List<Writable> next(){\n  List<String> next=dataIter.next();\n  invokeListeners(next);\n  List<Writable> ret=new ArrayList<>();\n  for (  String s : next)   ret.add(new Text(s));\n  return ret;\n}\n", "nl": "Get the next record"}
{"code": "@RequestMapping(method=RequestMethod.POST,value=\"orgUnits/{id}/activities\") @ResponseBody public String saveActivityReport2_8(@PathVariable int id,@RequestBody ActivityValue activityValue) throws NotAllowedException {\n  activityReportingService.saveActivityReport(getUnit(id),activityValue,0);\n  return ACTIVITY_REPORT_UPLOADED;\n}\n", "nl": "Save activity report for unit"}
{"code": "public NewsfeedDeleteBanQuery groupIds(List<Integer> value){\n  return unsafeParam(\"group_ids\",value);\n}\n", "nl": "Set group ids"}
{"code": "public double cond(){\n  return new SingularValueDecomposition(this).cond();\n}\n", "nl": "Matrix condition (2 norm)"}
{"code": "private List<int[]> prepareExpectedData(){\n  List<int[]> indexList=new ArrayList<>(2);\n  int[] sortIndex={0,3,2,4,1};\n  int[] sortIndexInverted={0,2,4,1,2};\n  indexList.add(0,sortIndex);\n  indexList.add(1,sortIndexInverted);\n  return indexList;\n}\n", "nl": "Method return the list of sortIndex and sortIndexInverted array"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public static ArrayList<Integer> convertStringArrayToIntegerArray(List<String> arrayList){\n  ArrayList<Integer> integers=new ArrayList<>();\n  for (  String str : arrayList) {\n    integers.add(Integer.valueOf(str));\n  }\n  return integers;\n}\n", "nl": "Create a Integer arrayList from String arrayList"}
{"code": "public static void writeNullablePbsEntryPacket(PbsOutputStream output,PbsEntryPacket pbsEntry){\n  if (pbsEntry != null) {\n    output.writeBoolean(true);\n    PbsEntryFormatter.writePbsEntryPacket(output,pbsEntry);\n  }\n else   output.writeBoolean(false);\n}\n", "nl": "Writes a pbs entry packet to the stream"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public UpdateLeasesSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static void warn(@NonNull String tag,String message,Object... args){\n  android.util.Log.w(tag,String.format(Locale.ENGLISH,message,args));\n}\n", "nl": "Logs with warn level"}
{"code": "public BitSet isScanRequired(byte[][] blkMaxVal,byte[][] blkMinVal){\n  BitSet bitSet=new BitSet(1);\n  bitSet.flip(0,1);\n  return bitSet;\n}\n", "nl": "Check if scan is required on given block based on min and max value"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set flipV=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show what=all;\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  ParametersDialog viewer=(ParametersDialog)getParent();\n  viewer.setVisible(false);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public GraphSimilarity(){\n  this.ValueSimilarity=0.0;\n  this.ContainmentSimilarity=0.0;\n  this.SizeSimilarity=0.0;\n}\n", "nl": "Creates a new instance of GraphSimilarity"}
{"code": "public SingularValueDecomposition svd(){\n  return new SingularValueDecomposition(this);\n}\n", "nl": "Singular Value Decomposition"}
{"code": "public boolean copyToScan(UpdateScan s){\n  if (!this.next())   return false;\n  s.insert();\n  for (  String fldName : sch.fields()) {\n    s.setVal(fldName,this.getVal(fldName));\n  }\n  return true;\n}\n", "nl": "Copy sorted records to UpdateScan"}
{"code": "public RegisterTypeDescriptorRequestInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "final public void forward(String model){\n  Controller.dispatch(model,req,resp,method);\n}\n", "nl": "Forward to the model(url), do not response yet"}
{"code": "public boolean isPropDirty(){\n  SVNStatusKind thePropStatus=getPropStatus();\n  return thePropStatus.equals(SVNStatusKind.CONFLICTED) || thePropStatus.equals(SVNStatusKind.MODIFIED);\n}\n", "nl": "prop is considered dirty if prop status is either conflicted or modified"}
{"code": "public static boolean putFloat(Context context,String key,float value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putFloat(key,value);\n  return editor.commit();\n}\n", "nl": "put float preferences"}
{"code": "public void restMode(){\n  SummonsService.restMode(getOwner());\n}\n", "nl": "Change to rest mode"}
{"code": "protected int addBaseLine(NlComponent node,String id){\n  int baselineY=node.getBaseline();\n  if (baselineY != -1) {\n    Rectangle b=new Rectangle(node.x,node.y,node.w,node.h);\n    myHorizontalEdges.add(new Segment(b.y + baselineY,b.x,x2(b),node,id,SegmentType.BASELINE,NO_MARGIN));\n  }\n  return baselineY;\n}\n", "nl": "Records the baseline edge for the given node to the potential match list"}
{"code": "public VisibilityAnnotationAttr(String kind,ArrayList annotations){\n  attr=new AsciiCP(kind + \"Annotations\");\n  list=annotations;\n  this.kind=kind;\n}\n", "nl": "Note: A visibility annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "public void removeRepositoryListener(ISVNListener listener){\n  repositoryListeners.remove(listener);\n}\n", "nl": "De-register a listener"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0,0,0,0,0.791089998892,0.730456085931,0.689667290488,0.645278794701,0.578763688757};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public MarketEditQuery photoIds(Integer... value){\n  return unsafeParam(\"photo_ids\",value);\n}\n", "nl": "Ids of additional photos"}
{"code": "public boolean separates(int a,int b){\n  return A.get(a) && B.get(b) || A.get(b) && B.get(a);\n}\n", "nl": "returns true, if split separates taxa a and b"}
{"code": "public final void stop(){\n  if (!isRunning()) {\n    resetPersistenceManager();\n  }\n  stopped=true;\n}\n", "nl": "It stops the thread and removes the reference to the PersistenceManager object so its memory can be released by the garbage collector"}
{"code": "protected MarketAddQuery mainPhotoId(int value){\n  return unsafeParam(\"main_photo_id\",value);\n}\n", "nl": "Cover photo identifier"}
{"code": "private ClassHelper(){\n}\n", "nl": "Prevent construction of utility class"}
{"code": "public Builder timeMathOp(String columnName,MathOp mathOp,long timeQuantity,TimeUnit timeUnit){\n  return transform(new TimeMathOpTransform(columnName,mathOp,timeQuantity,timeUnit));\n}\n", "nl": "Perform a mathematical operation (add, subtract, scalar min/max only) on the specified time column"}
{"code": "public DocumentWordGraph(){\n  MinSize=1;\n  MaxSize=2;\n  CorrelationWindow=3;\n  InitGraphs();\n}\n", "nl": "Creates a new instance of DocumentWordGraph"}
{"code": "public MarketRemoveFromAlbumQuery removeFromAlbum(UserActor actor,int ownerId,int itemId,List<Integer> albumIds){\n  return new MarketRemoveFromAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);\n}\n", "nl": "Removes an item from one or multiple collections"}
{"code": "private void tryScrollBackToTopWhileLoading(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "public int truncate_file1(String appender_file_id) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.truncate_file(parts[0],parts[1]);\n}\n", "nl": "truncate appender file to size 0 from storage server"}
{"code": "public void zoom(float percentage){\n  double zoomDelta=mViewRange.getLength() * percentage;\n  requestZoom(mViewRange.getMin() - zoomDelta,mViewRange.getMax() + zoomDelta);\n}\n", "nl": "Zoom by a percentage of the current view range using the center as the anchor"}
{"code": "private int countLetters(Lane lane){\n  int count=0;\n  for (int i=lane.getFirstNonGapPosition(); i <= lane.getLastNonGapPosition(); i++) {\n    if (Character.isLetter(lane.charAt(i)))     count++;\n  }\n  return count;\n}\n", "nl": "count number of letters in sequence"}
{"code": "public static int buff2int(byte[] bs,int offset){\n  return (((int)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 24) | (((int)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 16) | (((int)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 8)| ((int)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3]));\n}\n", "nl": "buff convert to int"}
{"code": "public NativeImageLoader(int height,int width,int channels,ImageTransform imageTransform){\n  this(height,width,channels);\n  this.imageTransform=imageTransform;\n  this.converter=new OpenCVFrameConverter.ToMat();\n}\n", "nl": "Instantiate an image with the given height and width"}
{"code": "public static int activityCount(){\n  return getInstance()._activityCount();\n}\n", "nl": "Returns the number of scheduled activities"}
{"code": "public LUDecomposition lu(){\n  return new LUDecomposition(this);\n}\n", "nl": "LU Decomposition"}
{"code": "private String htmlDecode(String content){\n  return Jsoup.parse(content).text();\n}\n", "nl": "Transforms from html to normal string"}
{"code": "public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data,double min,double max){\n  DataFrame frame=DataFrames.toDataFrame(schema,data);\n  return DataFrames.toRecords(normalize(frame,min,max,Collections.<String>emptyList())).getSecond();\n}\n", "nl": "Scale based on min,max"}
{"code": "public final String toJson(){\n  return getGson().toJson(this);\n}\n", "nl": "Generates out of this class instance a JSON message"}
{"code": "public static boolean removeFile(File file){\n  if (fileExists(file)) {\n    return file.delete();\n  }\n else {\n    return true;\n  }\n}\n", "nl": "Remove a file"}
{"code": "public void testAnObjectField() throws Exception {\n  AnObject empty=new AnObject();\n  AnObject full=helper.fill(new AnObject());\n  assertTrue(helper.areEquals(full,full));\n  assertFalse(helper.areEquals(empty,full));\n}\n", "nl": "AnObject field should always assigned new instance"}
{"code": "public static void v(String msg){\n  if (isDebug) {\n    Log.v(TAG,msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public final void trace(final Object o,final Throwable t){\n  log(Level.TRACE,o,t);\n}\n", "nl": "This method logs the TRACE message"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set show-reference=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().setShowReference(value);\n}\n", "nl": "parses the given command and executes it"}
{"code": "private boolean isThereInternetConnection(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();\n  return (networkInfo != null && networkInfo.isConnectedOrConnecting());\n}\n", "nl": "Checks if there is Internet connection"}
{"code": "private static double[] computeMean(double[] px,double[] py){\n  double[] m=new double[px.length];\n  for (int i=0; i < px.length; i++)   m[i]=0.5 * (px[i] + py[i]);\n  return m;\n}\n", "nl": "return mean of two profiles"}
{"code": "public static void e(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  Log.e(tag,msg,throwable);\n}\n", "nl": "Send an ERROR log message"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowGroupsAsConvexHulls();\n}\n", "nl": "this is currently selected?"}
{"code": "public MessagesGetHistoryQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id"}
{"code": "public WallRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"wall.restoreComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public MarketGetCategoriesQuery(VkApiClient client,UserActor actor){\n  super(client,\"market.getCategories\",GetCategoriesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected FriendsGetRequestsQueryWithNeedMutual needMutual(Boolean value){\n  return unsafeParam(\"need_mutual\",value);\n}\n", "nl": "true - to return a list of mutual friends (up to 20), if any"}
{"code": "public void showIconOnly(){\n  isIconOnlyMode=true;\n}\n", "nl": "Show only icon in item"}
{"code": "public void removeOption(byte entryCode){\n  this.optionsTable.remove(new Byte(entryCode));\n}\n", "nl": "Removes option with specified bytecode"}
{"code": "public void scroll(int itemsToScroll,int time){\n  int distance=itemsToScroll * getItemHeight() - scrollingOffset;\n  scroller.scroll(distance,time);\n}\n", "nl": "Scroll the wheel"}
{"code": "public FitBoundsOptions build(){\n  FitBoundsOptions options=new FitBoundsOptions();\n  options.paddingTopLeft=this.paddingTopLeft;\n  options.paddingBottomRight=this.paddingBottomRight;\n  options.padding=this.padding;\n  options.maxZoom=this.maxZoom;\n  return options;\n}\n", "nl": "Builds the FitBoundsOptions new instance"}
{"code": "private void showLoading(){\n  progressBar.setVisibility(View.VISIBLE);\n  recyclerView.setVisibility(View.GONE);\n  emptyTextView.setVisibility(View.GONE);\n}\n", "nl": "Show progessbar when loading data"}
{"code": "public static Location deserialize(Map<String,Object> args){\n  World world=Bukkit.getWorld((String)args.get(\"world\"));\n  if (world == null) {\n    throw new IllegalArgumentException(\"unknown world\");\n  }\n  return new Location(world,NumberConversions.toDouble(args.get(\"x\")),NumberConversions.toDouble(args.get(\"y\")),NumberConversions.toDouble(args.get(\"z\")),NumberConversions.toFloat(args.get(\"yaw\")),NumberConversions.toFloat(args.get(\"pitch\")));\n}\n", "nl": "Required method for deserialization"}
{"code": "public static GenericValue create(GenericValue value){\n  GenericValue newValue=new GenericValue();\n  newValue.init(value);\n  return newValue;\n}\n", "nl": "Creates new GenericValue from existing GenericValue"}
{"code": "public DefaultDeploymentCache(){\n  this.cache=Collections.synchronizedMap(new HashMap<String,T>());\n}\n", "nl": "Cache with no limit"}
{"code": "public static final void onPlayerLogin(Player player){\n  for (  PlayerAlliance alliance : alliances.values()) {\n    PlayerAllianceMember member=alliance.getMember(player.getObjectId());\n    if (member != null) {\n      alliance.onEvent(new PlayerConnectedEvent(alliance,player));\n    }\n  }\n}\n", "nl": "Player entered world - search for non expired alliance"}
{"code": "public SM_L2AUTH_LOGIN_CHECK(boolean ok,String accountName){\n  this.ok=ok;\n  this.accountName=accountName;\n}\n", "nl": "Constructs new <tt>SM_L2AUTH_LOGIN_CHECK </tt> packet"}
{"code": "public void run(){\n  consumerObject.dispatch(task);\n}\n", "nl": "calls the dispatcher message of the consumer on this task"}
{"code": "public PhotosCreateCommentQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void showContent(List<Integer> skipIds){\n  switchState(CONTENT,null,null,null,null,null,skipIds);\n}\n", "nl": "Hide all other states and show content"}
{"code": "public void removeAllListeners(){\n  listeners.clear();\n}\n", "nl": "Clear all the listeners"}
{"code": "@RequestMapping(value=\"/configs\",method=RequestMethod.GET) public JsonResponse pagingConfig(@RequestParam(\"appId\") Long appId,@RequestParam(value=\"configName\",defaultValue=\"\") String configName,@RequestParam(value=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(value=\"pageSize\",defaultValue=\"10\") Integer pageSize){\n  Response<Page<Config>> pagingResp=configService.pagingConfig(appId,configName,pageNo,pageSize);\n  if (!pagingResp.isSuccess()) {\n    Logs.error(\"failed to paging config(appId={}, configName={}), cause: {}\",appId,configName,pagingResp.getErr());\n    return JsonResponse.notOk(pagingResp.getErr());\n  }\n  return JsonResponse.ok(pagingResp.getData());\n}\n", "nl": "Paging configs"}
{"code": "public SimpleServiceEngine(ServiceDispatcher dispatcher){\n  super(dispatcher);\n}\n", "nl": "Creates new Engine"}
{"code": "protected void writePalette() throws IOException {\n  out.write(colorTab,0,colorTab.length);\n  int n=(3 * 256) - colorTab.length;\n  for (int i=0; i < n; i++) {\n    out.write(0);\n  }\n}\n", "nl": "Writes color table"}
{"code": "private void init(T referent){\n  _hashCode=System.identityHashCode(referent);\n}\n", "nl": "Init the hashcode according to the identity HashCode"}
{"code": "public EntityQuery cache(){\n  this.useCache=true;\n  return this;\n}\n", "nl": "Specifies whether results should be read from the cache (or written to the cache if the results have not yet been cached)"}
{"code": "public List<String> endpoints(){\n  return this.endpoints;\n}\n", "nl": "gets the endpoints for the builder"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public PollsEditQuery edit(UserActor actor,int ownerId,int pollId){\n  return new PollsEditQuery(getClient(),actor,ownerId,pollId);\n}\n", "nl": "Edits created polls"}
{"code": "public AccountSetInfoQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.setInfo\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void testDataAttributeCompletion() throws Throwable {\n  doTestCompletionVariants(\"dataAttributeCompletion.xml\",\"android:path\",\"android:pathPrefix\",\"android:pathPattern\");\n}\n", "nl": "Test that \"path\" attribute prefix inside \"data\" tag leads to correct completion results"}
{"code": "public void startFirstSampleTimer(){\n  timer.start(\"firstAudio\");\n  firstSample=true;\n}\n", "nl": "Starts the first sample timer"}
{"code": "public NewsfeedSearchQueryWithExtended(VkApiClient client){\n  super(client,\"newsfeed.search\",SearchExtendedResponse.class);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public VideoSaveQuery privacyComment(String... value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment"}
{"code": "public String[] upload_appender_file(byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_appender_file(group_name,file_buff,offset,length,file_ext_name,meta_list);\n}\n", "nl": "upload appender file to storage server (by file buff)"}
{"code": "public void requestRequestNetworkUpdate(){\n  enqueue(new RequestNetworkUpdateMessageClass().doRequest());\n  logger.debug(\"ZWave controller request network update\");\n}\n", "nl": "Requests a network update"}
{"code": "public boolean isSwitchOpen(){\n  return openImage.getVisibility() == View.VISIBLE;\n}\n", "nl": "is switch open"}
{"code": "public static void clearComm(AirMapFlight flight,@Nullable AirMapCallback<Void> callback){\n  FlightService.clearCommKey(flight,callback);\n}\n", "nl": "Stop receiving notifications for traffic alerts"}
{"code": "public SM_RIFT_ANNOUNCE(RVController rift,boolean isMaster){\n  this.rift=rift;\n  this.actionId=isMaster ? 2 : 3;\n}\n", "nl": "Rift announce packet"}
{"code": "public DocumentNGramGraph(){\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "private boolean isViewWasReused(){\n  String currentCacheKey=engine.getLoadingUriForView(imageAware);\n  return !memoryCacheKey.equals(currentCacheKey);\n}\n", "nl": "Checks whether memory cache key (image URI) for current ImageAware is actual"}
{"code": "public static String[][] invert(final String[][] array){\n  final String[][] newarray=new String[array.length][2];\n  for (int i=0; i < array.length; i++) {\n    newarray[i][0]=array[i][1];\n    newarray[i][1]=array[i][0];\n  }\n  return newarray;\n}\n", "nl": "Used to invert an escape array into an unescape array"}
{"code": "protected void notifyScrollingListenersAboutEnd(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingFinished(this);\n  }\n}\n", "nl": "Notifies listeners about ending scrolling"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array"}
{"code": "private void begin_Pos(){\n  if (position.x < posX + this.map_controler.syncCnt)   dir=2;\n else   dir=14;\n  if (position.y < posY)   dir=(dir == 2) ? 6 : 10;\n  sx=this.map_controler.get_Direc_Dis_X(dir);\n  sy=this.map_controler.get_Direc_Dis_Y(dir);\n  status=POSITION;\n}\n", "nl": "enemy moving attack position"}
{"code": "public void doReward(){\n}\n", "nl": "Perform reward operation"}
{"code": "public void writeIntLittleEndian(int a) throws IOException {\n  ensureSize(size + 4);\n  bytes[size++]=((byte)(a));\n  bytes[size++]=((byte)(a >> 8));\n  bytes[size++]=((byte)(a >> 16));\n  bytes[size++]=((byte)(a >> 24));\n}\n", "nl": "write int, little endian"}
{"code": "public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){\n}\n", "nl": "Returns when request failed"}
{"code": "public void forceMoveToPrimary() throws RemoteException {\n  _electManager.forceMoveToPrimary();\n}\n", "nl": "Forcefully make this space to be primary"}
{"code": "public boolean contains(int val){\n  return index(val) >= 0;\n}\n", "nl": "Searches the set for <tt>val</tt>"}
{"code": "private void inflateConnectedText(){\n  if (mConnectedText != R.string.text_connected) {\n    connectivityText.setText(mConnectedText);\n  }\n}\n", "nl": "Set the connectivity text when phone is connected"}
{"code": "public String tableName(){\n  return tblName;\n}\n", "nl": "Returns the table name of this TableInfo"}
{"code": "public SenseComparator(){\n}\n", "nl": "Creates a new instance of SenseComparator"}
{"code": "public static SM_SYSTEM_MESSAGE STR_TITLE_BONUS_SKILL(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1300775,value0,value1);\n}\n", "nl": "%0 skill (Level %1)"}
{"code": "public static double calculateViewStorage(int connectionServerCount,int securityServerCount,int vCenterServerCount){\n  final int cs=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.connectionserver.storage.default\")) * connectionServerCount;\n  final int ss=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.securityserver.storage.default\")) * securityServerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.vcenter.storage.default\")) * vCenterServerCount;\n  final int co=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.composer.storage.default\"));\n  final double d=(cs + ss + vc+ co) / 1048576.0;\n  return d;\n}\n", "nl": "Calculate storage requirements for deployment"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_ME_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200469,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer bound"}
{"code": "public static final Future<?> newFollowingToTargetCheckTask(final QuestEnv env,Npc npc,float x,float y,float z){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowingNpcCheckTask(env,new CoordinateDestinationChecker(npc,x,y,z)),1000,1000);\n}\n", "nl": "Schedule new following checker task"}
{"code": "@Deprecated public static void disableLogging(){\n  writeLogs(false);\n}\n", "nl": "Disables logger, no logs will be passed to LogCat, all log methods will do nothing"}
{"code": "public static boolean isProjectStyle(@NotNull String styleResourceUrl){\n  return !styleResourceUrl.startsWith(ANDROID_STYLE_RESOURCE_PREFIX);\n}\n", "nl": "Returns true if the given style represents a project theme"}
{"code": "public void updateGestureRotation(float x,float y){\n  mChart.setRotationAngle(mChart.getAngleForPoint(x,y) - mStartAngle);\n}\n", "nl": "updates the view rotation depending on the given touch position, also takes the starting angle into consideration"}
{"code": "public static DataFrame toDataFrame(Schema schema,JavaRDD<List<Writable>> data){\n  JavaSparkContext sc=new JavaSparkContext(data.context());\n  SQLContext sqlContext=new SQLContext(sc);\n  JavaRDD<Row> rows=data.map(new ToRow(schema));\n  DataFrame dataFrame=sqlContext.createDataFrame(rows,fromSchema(schema));\n  return dataFrame;\n}\n", "nl": "Creates a data frame from a collection of writables rdd given a schema"}
{"code": "public void resume(){\n  engine.resume();\n}\n", "nl": "Resumes waiting \"load&display\" tasks"}
{"code": "public static boolean isClassInSystemPackage(String className){\n  return className.startsWith(\"android.\") || className.startsWith(\"java.\") || className.startsWith(\"sun.\");\n}\n", "nl": "Checks whether the given class name belongs to a system package"}
{"code": "public void populateAll() throws GeneralException {\n  for (  ServiceEcaAction ecaAction : serviceEcaRule.getEcaActionList()) {\n    servicesCalledByThisServiceEca.add(aif.getServiceArtifactInfo(ecaAction.getServiceName()));\n    UtilMisc.addToSortedSetInMap(this,aif.allServiceEcaInfosReferringToServiceName,ecaAction.getServiceName());\n  }\n}\n", "nl": "This must be called after creation from the ArtifactInfoFactory after this class has been put into the global Map in order to avoid recursive initialization"}
{"code": "public void notifyFailed(Throwable exception) throws CarbonSortKeyAndGroupByException {\n  dataSorterAndWriterExecutorService.shutdownNow();\n  intermediateFileMerger.close();\n  parameters.getObserver().setFailed(true);\n  LOGGER.error(exception);\n  throw new CarbonSortKeyAndGroupByException(exception);\n}\n", "nl": "Below method will be called if any thread fails during execution"}
{"code": "public void removeAllFromAggregate(int row){\n  clearAggregateMappings(row,true);\n}\n", "nl": "Remove all items contained in the aggregate at the given row"}
{"code": "public FaveGetLinksQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Set count"}
{"code": "private void rectangle(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  for (int i=start; i < stop; i++)   windowFunction[i]=1.0 / (double)size;\n}\n", "nl": "Fill an array with the values of a rectangular window function"}
{"code": "private ProxyBypassListSelector buildLocalBypassSelector(ProtocolDispatchSelector ps){\n  List<UriFilter> localBypassFilter=new ArrayList<UriFilter>();\n  localBypassFilter.add(new IELocalByPassFilter());\n  return new ProxyBypassListSelector(localBypassFilter,ps);\n}\n", "nl": "Wraps the given selector to handle \"local\" addresses"}
{"code": "public double dist(Math_Vector other){\n  double distX=this.x - other.x;\n  double distY=this.y - other.y;\n  return Math.sqrt(distX * distX + distY * distY);\n}\n", "nl": "calculate each vector's distance"}
{"code": "void modifyingCharacterData(NodeImpl node,boolean replace){\n}\n", "nl": "A method to be called when a character data node is about to be modified"}
{"code": "public GiftsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"gifts.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AdsCheckLinkQuery(VkApiClient client,UserActor actor,int accountId,AdsCheckLinkType linkType,String linkUrl){\n  super(client,\"ads.checkLink\",LinkStatus.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  linkType(linkType);\n  linkUrl(linkUrl);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void notifyClickListenersAboutClick(int item){\n  for (  OnWheelClickedListener listener : clickingListeners) {\n    listener.onItemClicked(this,item);\n  }\n}\n", "nl": "Notifies listeners about clicking"}
{"code": "public SimpleMethodTest(String caseName,Element mainElement){\n  this(caseName,mainElement.getAttribute(\"location\"),mainElement.getAttribute(\"name\"));\n}\n", "nl": "Tests of Simple Method"}
{"code": "public static final void onPlayerLogout(Player player){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    PlayerAllianceMember member=alliance.getMember(player.getObjectId());\n    member.updateLastOnlineTime();\n    alliance.onEvent(new PlayerDisconnectedEvent(alliance,player));\n  }\n}\n", "nl": "Player leaved world - set last online on member"}
{"code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,CreateTaskActivity.class);\n  _context.startActivity(intent);\n}\n", "nl": "Allows to start this activity"}
{"code": "public void moveBy(int offset){\n  cursor+=offset;\n}\n", "nl": "Moves the cursor forward or backward by some amount"}
{"code": "public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){\n  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());\n}\n", "nl": "scale image"}
{"code": "public void componentShown(ComponentEvent ev){\n}\n", "nl": "component shown"}
{"code": "public MarketEditAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int albumId,String title){\n  super(client,\"market.editAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  albumId(albumId);\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public WallDeleteQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show replaceToolbar=\" + !isSelected() + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public AdsGetAdsPostsReachQuery(VkApiClient client,UserActor actor,int accountId,String adsIds){\n  super(client,\"ads.getAdsPostsReach\",Utils.buildParametrizedType(List.class,PostStats.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  adsIds(adsIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Builder buttonTextColor(int buttonTextColor){\n  this.buttonTextColor=buttonTextColor;\n  return this;\n}\n", "nl": "Set the text color of the buttons"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_STIGMA_ENCHANT_HIDDEN_SKILL(DescriptionId descriptionId){\n  return new SM_SYSTEM_MESSAGE(1402944,descriptionId);\n}\n", "nl": "%0%'s hidden enchantment level has increased by 1 level"}
{"code": "public static int dipToPX(final Context ctx,float dip){\n  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,ctx.getResources().getDisplayMetrics());\n}\n", "nl": "px = dp * (dpi / 160)"}
{"code": "@NonNull public static StorableFence not(@NonNull StorableFence fence){\n  StorableFence metaFence=new StorableFence(Type.META);\n  metaFence.mNotFence=fence;\n  return metaFence;\n}\n", "nl": "Creates a meta storable fence which is a logical 'not' of the given fence"}
{"code": "@NotNull public static String listAllEmotions(@NotNull Emotion emotion){\n  return emotion.scores.scores().entrySet().stream().map(null).collect(Collectors.joining());\n}\n", "nl": "Returns the most dominate emotion and the score for that emotion"}
{"code": "public static final boolean isExpired(long time){\n  return time < System.currentTimeMillis();\n}\n", "nl": "Check whether supplied time in ms is expired"}
{"code": "@Override public boolean endContentModel(int[] currentState){\n  boolean isFinal=false;\n  int state=currentState[0];\n  return state >= 0;\n}\n", "nl": "The method indicates the end of list of children"}
{"code": "public boolean isSPD(){\n  return isspd;\n}\n", "nl": "Is the matrix symmetric and positive definite?"}
{"code": "@Override public boolean isXIncludeAware(){\n  try {\n    return xmlReader.getFeature(XINCLUDE_FEATURE);\n  }\n catch (  SAXException exc) {\n    return false;\n  }\n}\n", "nl": "Gets the XInclude processing mode for this parser"}
{"code": "public void start(){\n  this.startTime=this.world.getTotalWorldTime();\n  this.stopTime=0;\n}\n", "nl": "Start timing"}
{"code": "private static void validateURL(SpaceURL spaceURL) throws SpaceURLValidationException {\n  Enumeration names=spaceURL.propertyNames();\n  while (names.hasMoreElements()) {\n    String property=names.nextElement().toString();\n    if (_logger.isLoggable(Level.FINE))     _logger.fine(\"Validating Space URL property: \" + property + \" = \"+ spaceURL.getProperty(property));\n    if (!urlElements.contains(property.toLowerCase()))     throw new SpaceURLValidationException(\"Invalid space url property - '\" + property + \"'\");\n  }\n}\n", "nl": "The method validates the space URL parameter names"}
{"code": "public SPTKPitchReaderWriter(double[] contour,PitchFileHeader header){\n  this.contour=contour;\n  this.header=header;\n}\n", "nl": "create a SPTK Pitch reader writer with external contour"}
{"code": "public PacketBuilder send(String id){\n  if (!specs.containsKey(id))   throw new IllegalArgumentException(\"Invalid PacketSpec name \" + id);\n  return new PacketBuilder(this,specs.get(id));\n}\n", "nl": "Creates a packet builder for sending a packet"}
{"code": "public static void deleteAircraft(AirMapAircraft aircraft,@Nullable AirMapCallback<Void> callback){\n  PilotService.deleteAircraft(aircraft,callback);\n}\n", "nl": "Delete an aircraft from the authenticated pilots' profile"}
{"code": "public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){\n}\n", "nl": "Returns when request failed"}
{"code": "public SM_MAIL_SERVICE(int[] letterIds){\n  super(null);\n  this.serviceId=6;\n  this.letterIds=letterIds;\n}\n", "nl": "used when deleting letter"}
{"code": "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setHasOptionsMenu(true);\n}\n", "nl": "function method"}
{"code": "public boolean isServiceUnitLoaded(String suName){\n  return this.loadedBundles.contains(suName);\n}\n", "nl": "Check if a ServiceUnit is already loaded by this ResourceUnit"}
{"code": "public static void e(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.e(tag,buildMsg(msg));\n  }\n}\n", "nl": "error log"}
{"code": "public Response doPost(String url){\n  return doPost(url,null);\n}\n", "nl": "Does a HTTP POST with an empty body"}
{"code": "public static void i(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  Log.i(tag,msg,throwable);\n}\n", "nl": "Send an INFO log message"}
{"code": "private void initIdleStateTracking(){\n  mIdleTracker=new IdlenessTracker();\n  mIdleTracker.startTracking();\n}\n", "nl": "Idle state tracking, and messaging with the task manager when significant state changes occur"}
{"code": "public Builder buttonPressedTextColor(int buttonPressedTextColor){\n  this.buttonPressedTextColor=buttonPressedTextColor;\n  return this;\n}\n", "nl": "Set the text color of the buttons when clicked"}
{"code": "public WallRestoreQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static int floor_double(double value){\n  int i=(int)value;\n  return value < (double)i ? i - 1 : i;\n}\n", "nl": "Returns the greatest integer less than or equal to the double argument"}
{"code": "public void resourceDeleted(ISVNRemoteResource resource){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceDeleted(resource);\n  }\n}\n", "nl": "A resource has been deleted"}
{"code": "public INSECTMemoryDB(){\n  ObjectMap=new HashMap();\n}\n", "nl": "Creates a new instance of INSECTMemoryDB"}
{"code": "public HttpPost createReplicateRequest(String path){\n  return new HttpPost(String.format(REQUEST_STRING_WITH_PATH,authorIp,path,Commands.REPLICATE.getCommand()));\n}\n", "nl": "Creates HttpPost request for replication"}
{"code": "public Bindings add(String property,JComboBox combo){\n  combo.addActionListener(this);\n  return add(new JComboBoxBinding(property,combo,0));\n}\n", "nl": "Handles JComboBox"}
{"code": "public static BufferedImage toBufferedImage(Image image){\n  return ImageTransform.toBufferedImage(image,BufferedImage.TYPE_INT_ARGB_PRE);\n}\n", "nl": "toBufferedImage <p> Transform from an Image instance to a BufferedImage instance"}
{"code": "public void testAddService() throws Exception {\n  final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyService.java\",\"src/com/example/DummyService.java\");\n  myFixture.configureFromExistingVirtualFile(file);\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,\"Add service to manifest\");\n  assertNotNull(action);\n  action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());\n  myFixture.checkResultByFile(\"AndroidManifest.xml\",\"intentions/DummyService_manifest_after.xml\",true);\n}\n", "nl": "Test that \"add service\" quick intention does show up and works"}
{"code": "public static SuperPrefs newInstance(Context context){\n  return new SuperPrefs(context);\n}\n", "nl": "static factory method"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static <T>void addService(String url,Class<T> serviceInterface,T service,int port) throws RpcException {\n  ProviderConfig<T> providerConfig=new ProviderConfig<T>(serviceInterface,service);\n  providerConfig.setUrl(url);\n  providerConfig.getServerConfig().setPort(port);\n  addService(providerConfig);\n}\n", "nl": "add the service to pigeon and publish the service to registry"}
{"code": "public static void d(String tag,String msg){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg);\n}\n", "nl": "Send a DEBUG log message"}
{"code": "@Override public void onError(String error){\n}\n", "nl": "Call if have some problem with getting content"}
{"code": "public boolean isSetSequenceId(){\n  return __isset_bit_vector.get(__SEQUENCEID_ISSET_ID);\n}\n", "nl": "Returns true if field sequenceId is set (has been assigned a value) and false otherwise"}
{"code": "public JsonHttpResponseHandler(){\n  super(DEFAULT_CHARSET);\n}\n", "nl": "Creates new JsonHttpResponseHandler, with Json String encoding UTF-8"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public Iterable<T> asIterable(){\n  return internalArray;\n}\n", "nl": "Java Compatibility"}
{"code": "public void removeColumn(Column c){\n  int idx=m_columns.indexOf(c);\n  if (idx < 0) {\n    throw new IllegalArgumentException(\"No such column.\");\n  }\n  removeColumn(idx);\n}\n", "nl": "Remove a column from this table"}
{"code": "public PresenterLayout(Context context){\n  super(context);\n  initializedDefaultsFromXml();\n  initLayout();\n  if (mInflateDefaultViews) {\n    inflateDefaultOverlappingViews();\n  }\n}\n", "nl": "In case of creating view from code"}
{"code": "private void showDrawableError(){\n  Dialog dialog=new Dialog(\"Error...\",getSkin());\n  Label label=new Label(\"Error while adding new drawables.\\nEnsure that image dimensions are\\nless than maximums specified in project.\\nRolling back changes...\",getSkin());\n  label.setAlignment(Align.center);\n  dialog.text(label);\n  dialog.button(\"OK\");\n  dialog.show(getStage());\n}\n", "nl": "Show an error indicating a drawable that exceeds project specifications"}
{"code": "public void unlockUserInput(){\n}\n", "nl": "ask view to allow user input"}
{"code": "public CM_REVIVE(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_REVIVE </tt> packet"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public ClientAccessInformation(String ipAddress,String accessAndTerminateTime,String type){\n  super();\n  this.ipAddress=ipAddress;\n  AccessAndTerminateTime=accessAndTerminateTime;\n  this.type=type;\n}\n", "nl": "init The ClientAccessInformation Using User's IpAddress and Access or terminate Time and Access Type"}
{"code": "public StringBuffer outputKeyCreation(boolean kekOnly,String kekTest){\n  return this.outputKeyCreation(0,kekOnly,kekTest);\n}\n", "nl": "Output the creation of public/private keys + KEK to the console for manual database update"}
{"code": "public UrlValidator(String[] schemes){\n  this(schemes,0L);\n}\n", "nl": "Behavior of validation is modified by passing in several strings options:"}
{"code": "public Door(final TreeSpecies species,boolean isHingeRight){\n  this(getWoodDoorOfSpecies(species),isHingeRight);\n}\n", "nl": "Constructs the top half of a wooden door of the given species and with the hinge on the left or right"}
{"code": "private static boolean isAlphanum(char p_char){\n  return (p_char <= 'z' && (fgLookupTable[p_char] & MASK_ALPHA_NUMERIC) != 0);\n}\n", "nl": "Determine whether a char is an alphanumeric: 0-9, a-z or A-Z"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "public StatusSetQuery(VkApiClient client,UserActor actor){\n  super(client,\"status.set\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isAvoidFirstLastClippingEnabled(){\n  return mAvoidFirstLastClipping;\n}\n", "nl": "returns true if avoid-first-lastclipping is enabled, false if not"}
{"code": "public PhotosCopyQuery accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n", "nl": "Special access key for private photos"}
{"code": "public NewsfeedGetRecommendedQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getRecommended\",GetRecommendedResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void startWaveSouthernShieldGenerator2(){\n  sp(284847,337.93338f,257.88702f,292.43845f,(byte)60,1000,\"SouthernShieldGenerator1\");\n  sp(284848,338.05304f,254.6424f,292.3325f,(byte)60,1000,\"SouthernShieldGenerator2\");\n  sp(284849,338.13315f,251.34738f,292.48932f,(byte)59,1000,\"SouthernShieldGenerator3\");\n}\n", "nl": "Southern Shield Generator"}
{"code": "public static void i(String tag,String msg){\n  if (isDebug) {\n    Log.i(tag,msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void tryScrollBackToTopAbortRefresh(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "public Builder cacheInMemory(){\n  cacheInMemory=true;\n  return this;\n}\n", "nl": "Loaded image will be cached in memory"}
{"code": "public static boolean propertyValueEquals(URL url,String name,String compareString){\n  String value=getPropertyValue(url,name);\n  if (value == null)   return false;\n  return value.trim().equals(compareString);\n}\n", "nl": "Compares the specified property to the compareString, returns true if they are the same, false otherwise"}
{"code": "public UseItemPotionResponse.Result heal() throws LoginFailedException, RemoteServerException {\n  if (!isInjured())   return UseItemPotionResponse.Result.ERROR_CANNOT_USE;\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_POTION);\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_SUPER_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_SUPER_POTION);\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_HYPER_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_HYPER_POTION);\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_MAX_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_MAX_POTION);\n  return UseItemPotionResponse.Result.ERROR_CANNOT_USE;\n}\n", "nl": "Heal a pokemon, using various fallbacks for potions"}
{"code": "public GroupsGetBannedQuery fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){\n  return !canChildScrollUp(content);\n}\n", "nl": "Default implement for check can perform pull to refresh"}
{"code": "public CMULexicon(){\n  this(\"cmulex\");\n}\n", "nl": "Creates the default CMU Lexicon which is a binary lexicon"}
{"code": "public synchronized boolean isCompleted(){\n  return completed;\n}\n", "nl": "If the service has completed return true"}
{"code": "public MarketGetQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Identifier of an album"}
{"code": "public void showMetrics(){\n}\n", "nl": "Shows metrics for this audio player"}
{"code": "public ArmorCursor queryArmorSearch(String search){\n  return mHelper.queryArmorSearch(search);\n}\n", "nl": "ARMOR QUERIES"}
{"code": "public TypeVariableBV typeVariable(){\n  int id=typeVariableList.size();\n  typeVariableList.add(null);\n  TypeVariableBV result=new TypeVariableBV(id,this);\n  typeVariableList.set(id,result);\n  return result;\n}\n", "nl": "Get new type variable"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void STAR_encoding_row(){\n  int i, j;\n  for (i=0; i < stripe_unit_size; i++) {\n    for (j=0; j < data_disk_nbr; j++) {\n      check_data[data_disk_nbr][i]^=check_data[j][i];\n    }\n  }\n}\n", "nl": "entry function for encoding computing checksum in every row,*check_data[p]"}
{"code": "public static void show(Context context,String text){\n  if (mToast == null) {\n    mToast=Toast.makeText(context,text,Toast.LENGTH_SHORT);\n  }\n  mToast.setDuration(Toast.LENGTH_SHORT);\n  mToast.setText(text);\n  mToast.show();\n}\n", "nl": "show a toast"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.contains(\"Naive Bayesian rRNA Classifier\");\n}\n", "nl": "is file acceptable?"}
{"code": "public T proxy(){\n  executorFactoryBean.afterPropertiesSet();\n  return (T)executorFactoryBean.getObject();\n}\n", "nl": "Creates a new executor proxy of type T"}
{"code": "private void unableServerTextEdit(){\n  serverTextEdit.setEditable(false);\n  serverTextEdit.setVisible(false);\n  serverTextEdit.setPromptText(\"\");\n}\n", "nl": "unable server shell text editor"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public OPCHardwareAddressImpl(final String pItemName,final int pCommandPulseLength) throws ConfigurationException {\n  setOPCItemName(pItemName);\n  setCommandPulseLength(pCommandPulseLength);\n  setCurrentOPCItemName(getOPCItemName());\n}\n", "nl": "Create a OPCHardwareAddress object"}
{"code": "public boolean isMouseDown(){\n  return mMouseDown;\n}\n", "nl": "Accessor for mouse down check"}
{"code": "protected VideoGetAlbumsByVideoQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Set owner id"}
{"code": "public void endAction(MotionEvent me){\n  OnChartGestureListener l=mChart.getOnChartGestureListener();\n  if (l != null)   l.onChartGestureEnd(me,mLastGesture);\n}\n", "nl": "Calls the OnChartGestureListener to do the end callback"}
{"code": "public Builder addColumnsInteger(String... names){\n  for (  String s : names)   addColumnInteger(s);\n  return this;\n}\n", "nl": "Add multiple Integer columns with no restrictions on the min/max allowable values"}
{"code": "@Override public final boolean isEmpty(){\n  return getAll().isEmpty();\n}\n", "nl": "test is empty bean"}
{"code": "public boolean isImmutable(){\n  return true;\n}\n", "nl": "Check to see if this set is in an immutable form"}
{"code": "private void sendBeforeTextChanged(CharSequence s,int start,int count,int after){\n  if (mListeners != null) {\n    for (int i=0; i < mListeners.size(); i++) {\n      mListeners.get(i).beforeTextChanged(s,start,count,after);\n    }\n  }\n}\n", "nl": "Send an before text change event to child listeners"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public static HttpResponse execute(HttpMethod method,String targetUrl,String body) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {\n  return execute(method,targetUrl,body,null);\n}\n", "nl": "Execute an HTTP request"}
{"code": "public static boolean isInitialized(Context ctx){\n  vitamioPackage=ctx.getPackageName();\n  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";\n  return true;\n}\n", "nl": "Check if Vitamio is initialized at this device"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static boolean putMapNotEmptyKeyAndValue(Map<String,String> map,String key,String value){\n  if (map == null || StringUtil.isEmpty(key) || StringUtil.isEmpty(value)) {\n    return false;\n  }\n  map.put(key,value);\n  return true;\n}\n", "nl": "add key-value pair to map, both key and value need not null or empty"}
{"code": "public static byte[] writeObject(Object object) throws IOException {\n  ByteArrayOutputStream buffer=new ByteArrayOutputStream();\n  ObjectOutputStream out=new ObjectOutputStream(buffer);\n  out.writeObject(object);\n  out.close();\n  return buffer.toByteArray();\n}\n", "nl": "Serialize an Object to a ByteArray"}
{"code": "public FastByteArrayInputStream convertToInputStream(){\n  return new FastByteArrayInputStream(buf,count);\n}\n", "nl": "Creates InputStream using the same data that is written into this stream with no copying in memory"}
{"code": "@VisibleForTesting static String row(int row,Table table,String missing){\n  StringBuilder builder=new StringBuilder().append(\"<tr>\");\n  for (  Column col : table.columns()) {\n    builder.append(\"<td>\").append(String.valueOf(col.getString(row))).append(\"</td>\");\n  }\n  builder.append(\"</tr>\").append('\\n');\n  return builder.toString();\n}\n", "nl": "Returns a string containing the html output of one table row"}
{"code": "public boolean increment(K key){\n  return adjustValue(key,(long)1);\n}\n", "nl": "Increments the primitive value mapped to key by 1"}
{"code": "private boolean isLargeEnough(){\n  int x0=leftMargin;\n  int x1=getWidth() - rightMargin;\n  int y0=getHeight() - bottomMargin;\n  int y1=topMargin;\n  return x0 < x1 && y0 > y1;\n}\n", "nl": "is canvas large enough to draw chart?"}
{"code": "private void initArray(){\n  this.permissionsGranted=new ArrayList<>();\n  this.permissionsDenied=new ArrayList<>();\n  this.permissionsDeniedForever=new ArrayList<>();\n  this.permissionToAsk=new ArrayList<>();\n}\n", "nl": "init permissions ArrayList"}
{"code": "public int addOrderTerm(String termTypeId,BigDecimal termValue,Long termDays,String textValue){\n  GenericValue orderTerm=this.getDelegator().makeValue(\"OrderTerm\");\n  orderTerm.put(\"termTypeId\",termTypeId);\n  orderTerm.put(\"termValue\",termValue);\n  orderTerm.put(\"termDays\",termDays);\n  orderTerm.put(\"textValue\",textValue);\n  return addOrderTerm(orderTerm);\n}\n", "nl": "Add an orderTerm to the order"}
{"code": "public void closeAll(){\n  if (this.servers == null) {\n    return;\n  }\n  for (int i=0; i < this.servers.length; i++) {\n    this.forceClose(this.servers[i]);\n  }\n}\n", "nl": "close all servers"}
{"code": "public SourceEditor toggleMarkdown(){\n  return setMarkdown(!markdown);\n}\n", "nl": "Toggle markdown file rendering"}
{"code": "protected BoardGetTopicsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return information about users who created topics or who posted there last"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public Action(String type,Object[] values){\n  this.type=type;\n  this.values=values;\n}\n", "nl": "Create Action object with specified type and values"}
{"code": "private static boolean validClass(Class<?> clazz,Class<?> classToIgnore){\n  return ((clazz.getName().compareTo(classToIgnore.getName()) != 0) && (clazz.getSimpleName().compareTo(PACKAGE_INFO) != 0));\n}\n", "nl": "Check if a valid class to instantiate"}
{"code": "@Override public void render(SpriteBatch sb){\n  for (  UIElement element : elements)   element.render(sb);\n}\n", "nl": "Draws all elements stored in the container"}
{"code": "public boolean isSetDebug(){\n  return __isset_bit_vector.get(__DEBUG_ISSET_ID);\n}\n", "nl": "Returns true if field debug is set (has been assigned a value) and false otherwise"}
{"code": "public void allowAll(PermissionFlag flag){\n  generalPermissions.remove(flag);\n  strictPermission.getOrDefault(flag,emptyMap()).values().removeIf(null);\n}\n", "nl": "Changes the default permission for a flag and removes all direct restrictions, direct permissions will be kept"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set pc1=1 pc2=2 pc3=3;\");\n}\n", "nl": "action to be performed"}
{"code": "public VideoHideCatalogSectionQuery(VkApiClient client,UserActor actor,int sectionId){\n  super(client,\"video.hideCatalogSection\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  sectionId(sectionId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private Collection<Var> migrateColumnValueAsResource(Var instance,String columnName,Object columnValue,String tableName){\n  if (columnValue == null) {\n    return Collections.emptyList();\n  }\n  return Collections.singleton(var().id(id(instance)).has(namer.resourceName(tableName,columnName),columnValue));\n}\n", "nl": "Migrate a column value as a resource"}
{"code": "public boolean isCompatibleWith(@NotNull ResourceTypeAllowedValues other){\n  for (  ResourceType type : other.types) {\n    if (isTypeAllowed(type)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns true if the resource type constraint is compatible with the other resource type constraint"}
{"code": "public static boolean isDark(@ColorInt int color){\n  float[] hsl=new float[3];\n  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);\n  return isDark(hsl);\n}\n", "nl": "Convert to HSL & check that the lightness value"}
{"code": "@deprecated public boolean isAlias(String k){\n  return ICUResourceBundleReader.RES_GET_TYPE(getTableResource(k)) == 3;\n}\n", "nl": "/*     "}
{"code": "public void clearChoices(){\n}\n", "nl": "Clear any choices previously set"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "protected void notifyScrollingListenersAboutStart(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingStarted(this);\n  }\n}\n", "nl": "Notifies listeners about starting scrolling"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void justSelected(){\n  setCachedExpression(generateExpression());\n  checkSymbolIsValid();\n}\n", "nl": "Method called when the field has been selected from a combo box and may need to be initialised"}
{"code": "public PollsDeleteVoteQuery isBoard(Boolean value){\n  return unsafeParam(\"is_board\",value);\n}\n", "nl": "Set is board"}
{"code": "public GroupsGetSettingsQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.getSettings\",GroupSettings.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void layout(int width,int height){\n  int itemsWidth=width - 2 * PADDING;\n  itemsLayout.layout(0,0,itemsWidth,height);\n}\n", "nl": "Sets layouts width and height"}
{"code": "public static void d(String tag,String msg){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg);\n}\n", "nl": "Send a DEBUG log message"}
{"code": "public MarketReorderAlbumsQuery after(Integer value){\n  return unsafeParam(\"after\",value);\n}\n", "nl": "Id of a collection to place current collection after it"}
{"code": "public LogOutputStream(RandomAccessFile raf) throws IOException {\n  this.raf=raf;\n}\n", "nl": "Creates an output file with the specified <code>RandomAccessFile</code>"}
{"code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n", "nl": "Apply the size behaviour"}
{"code": "AnnotationView viewForAnnotation(Annotation annotation){\n  return this.annotationToAnnotationViewMap.get(annotation);\n}\n", "nl": "Helper method for the user so they can access the map"}
{"code": "@Override protected XMLDocumentScanner createDocumentScanner(){\n  fNamespaceScanner=new XMLNSDocumentScannerImpl();\n  return fNamespaceScanner;\n}\n", "nl": "Create a document scanner: this scanner performs namespace binding"}
{"code": "public VideoDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"video.deleteComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public InvalidDescriptionException(final String message){\n  super(message);\n}\n", "nl": "Constructs a new InvalidDescriptionException with the given message"}
{"code": "protected Object entryInitialFlow(){\n  return emptySet.clone();\n}\n", "nl": "IN(Start) is the empty set"}
{"code": "private static void resolveSelfAssignmentExpression(SelfAssignmentExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){\n  storeAsTypeWithSignaturesImport(objSubjectExpression.getType().toString(),objScope,objIndex,objTypesSet);\n}\n", "nl": "Will resolve self-assignments"}
{"code": "public boolean using(){\n  return mUsing;\n}\n", "nl": "get Use Status"}
{"code": "public boolean isApplicable(){\n  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private final void activateObjects(){\n  for (  VisibleObject visObject : objects.values()) {\n    if (visObject instanceof Creature) {\n      Creature creature=(Creature)visObject;\n      creature.getAi2().onGeneralEvent(AIEventType.ACTIVATE);\n    }\n  }\n}\n", "nl": "Send ACTIVATE event to all objects with AI2"}
{"code": "public ConceptualGraph(){\n}\n", "nl": "Creates a new instance of ConceptualGraph"}
{"code": "protected WallGetCommentsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Set extended"}
{"code": "public Bindings add(String property,JList list){\n  registerPropertyChangeListener(list);\n  return add(new JListBinding(property,list));\n}\n", "nl": "Handles JList"}
{"code": "public void clearAllConstraints(){\n  for (  ConstraintWidget widget : getWidgets()) {\n    widget.resetAllConstraints();\n  }\n  mSelection.clear();\n  mSelection.setSelectedAnchor(null);\n}\n", "nl": "Clear all constraints"}
{"code": "private void processBE(final char ch[],int offset,final int count){\n  int curPos=0;\n  for (int i=0; i < count; ++i) {\n    final int b0=fBuffer[curPos++] & 0xff;\n    final int b1=fBuffer[curPos++] & 0xff;\n    ch[offset++]=(char)((b0 << 8) | b1);\n  }\n}\n", "nl": "Decodes UTF-16BE"}
{"code": "public SharedIteratorSpaceDataSourceDecorator(SpaceDataSource spaceDataSource,long timeToLive){\n  _spaceDataSource=spaceDataSource;\n  _timeToLive=timeToLive;\n  _queryToSources=new ConcurrentHashMap<DataSourceSQLQuery,SharedDataIteratorSource<Object>>();\n  _sourcesToQuery=new ConcurrentHashMap<SharedDataIteratorSource<Object>,DataSourceSQLQuery>();\n}\n", "nl": "Create a new instance"}
{"code": "public static void createQuerySchema(String schemaFile,String querySchemaName,String dataSchemaNameInput,String selectorNameInput,List<String> elementNames,List<String> filterNames,String filter) throws IOException {\n  createQuerySchema(schemaFile,querySchemaName,dataSchemaNameInput,selectorNameInput,elementNames,filterNames,filter,true,null,false,null);\n}\n", "nl": "Creates the test query schema file"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"print;\");\n  System.err.println(\"Print command: not implemented\");\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void writeFloat(float a) throws IOException {\n  writeInt(Float.floatToIntBits(a));\n}\n", "nl": "write a float"}
{"code": "public static int calculateViewMemory(int connectionServerCount,int securityServerCount,int vCenterServerCount){\n  final int cs=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.connectionserver.memory.default\")) * connectionServerCount;\n  final int ss=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.securityserver.memory.default\")) * securityServerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.vcenter.memory.default\")) * securityServerCount;\n  final int co=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.composer.memory.default\"));\n  return cs + ss + vc+ co;\n}\n", "nl": "Calculate memory requirements for deployment"}
{"code": "@deprecated public char first(){\n  this.pos=this.begin;\n  return current();\n}\n", "nl": "/*    "}
{"code": "public static Settings init(){\n  return init(DEFAULT_TAG);\n}\n", "nl": "It is used to get the settings object in order to change settings"}
{"code": "public static final void emoteStartWalking(Npc owner){\n  owner.setState(CreatureState.WALKING);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.WALK));\n}\n", "nl": "Npc starts walking (either random or path)"}
{"code": "protected void shareByWeixinCircle(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_WEIXIN_CIRCLE,getShareData(ShareConstant.SHARE_CHANNEL_WEIXIN_CIRCLE),ShareConstant.REQUEST_CODE);\n}\n", "nl": "share to weixin circle"}
{"code": "public SM_TITLE_INFO(int titleId){\n  this.action=1;\n  this.titleId=titleId;\n}\n", "nl": "self title set"}
{"code": "private float dp2px(float dp){\n  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,getResources().getDisplayMetrics());\n}\n", "nl": "turn dp to px"}
{"code": "public User(String username){\n  if (username == null)   throw new IllegalArgumentException(\"user's name can't be null\");\n  this.username=username;\n}\n", "nl": "Construct a User reference"}
{"code": "public MonsterHabitatCursor queryHabitatMonster(long id){\n  return mHelper.queryHabitatMonster(id);\n}\n", "nl": "MONSTER HABITAT QUERIES"}
{"code": "public static boolean isInitialized(Context ctx){\n  vitamioPackage=ctx.getPackageName();\n  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";\n  return true;\n}\n", "nl": "Check if Vitamio is initialized at this device"}
{"code": "public static void log(int severity,String message,Throwable e){\n  log(new Status(severity,SVNUIPlugin.ID,0,message,e));\n}\n", "nl": "Log the given exception along with the provided message and severity indicator"}
{"code": "public ResourcesPoet addString(String name,String value){\n  Element element=document.createElement(\"string\");\n  element.setAttribute(\"name\",name);\n  element.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(element);\n  return this;\n}\n", "nl": "Add a string to the config"}
{"code": "public RotationControl(int mouseButton){\n  m_button=mouseButton;\n}\n", "nl": "Create a new RotateControl"}
{"code": "public void startAnimations(){\n  isStopSearchingAnim=false;\n  if (animatorSet == null) {\n    animatorSet=new AnimatorSet();\n    animatorSet.playTogether(lineCircleAnim(),rotateCircleAnim(),smallCircleAnim(),largeCircleAnim());\n  }\n  animatorSet.start();\n}\n", "nl": "start the view's animations"}
{"code": "public TrafficLogPredicate add(TrafficLogPredicate query){\n  predicates.addAll(query.getPredicates());\n  return this;\n}\n", "nl": "Adds all predicates defined by query instance to this object"}
{"code": "public MultiFile8BitAudioPlayer(String baseName,AudioFileFormat.Type type){\n  this.baseName=baseName;\n  this.outputType=type;\n  debug=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.debug\");\n}\n", "nl": "Constructs a MultiFile8BitAudioPlayer"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public ExitMonitorStmt newExitMonitorStmt(Value op){\n  return new JExitMonitorStmt(op);\n}\n", "nl": "Constructs a ExitMonitorStmt(Immediate) grammar chunk"}
{"code": "public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){\n}\n", "nl": "Returns when request failed"}
{"code": "public boolean isHiddenAttribute(String attribute){\n  return attribute.endsWith(\" [hidden]\");\n}\n", "nl": "is this a hidden attribute (such as color etc)"}
{"code": "public static boolean isConnectedFast(Context context){\n  NetworkInfo info=NetworkUtil.getNetworkInfo(context);\n  return (info != null && info.isConnected() && NetworkUtil.isConnectionFast(info.getType(),info.getSubtype()));\n}\n", "nl": "Check if there is fast connectivity"}
{"code": "public void removeSample(String name){\n  if (table.rowKeySet().contains(name)) {\n    table.rowKeySet().remove(name);\n    sampleOrder.remove(name);\n  }\n}\n", "nl": "remove a sample from the table"}
{"code": "public Bitmap put(String key,Bitmap value){\n  return cache.put(key,value);\n}\n", "nl": "put bitmap to image cache"}
{"code": "public WallGetQuery filter(WallGetFilter value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Set filter"}
{"code": "public void inASTWhileNode(ASTWhileNode node){\n  nodeStack.add(node);\n}\n", "nl": "Following methods add a new node to the end of the nodeStack arrayList Since that node becomes the closest target of an implicit break or continue"}
{"code": "protected void noteUpdate(K key,V newValue,V oldValue){\n  for (  CacheListener<K,V> listener : listeners) {\n    listener.noteKeyUpdate(this,key,newValue,oldValue);\n  }\n}\n", "nl": "Send a key update event to all registered listeners"}
{"code": "public void updateTask(){\n  this.villager.getLookHelper().setLookPositionWithEntity(this.mate,10.0F,(float)this.villager.getVerticalFaceSpeed());\n  this.villager.getNavigator().tryMoveToEntityLiving(this.mate,this.moveSpeed);\n  ++this.spawnBabyDelay;\n  if (this.spawnBabyDelay >= 60 && this.villager.getDistanceSqToEntity(this.mate) < 9.0D) {\n    this.spawnBaby();\n  }\n}\n", "nl": "Updates the task"}
{"code": "public DefaultMovieInfoProvider(){\n}\n", "nl": "Creates a new instance of DefaultMovieInfoProvider"}
{"code": "public static Drawable byteToDrawable(byte[] b){\n  return bitmapToDrawable(byteToBitmap(b));\n}\n", "nl": "convert byte array to Drawable"}
{"code": "public static void uinstallApplication(final Context context,final String packageName){\n  final Intent intent=new Intent(Intent.ACTION_DELETE,Uri.fromParts(\"package\",packageName,null));\n  context.startActivity(intent);\n}\n", "nl": "Propose user to uninstall the given application"}
{"code": "public KeyPair createKeys() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeySpecException {\n  DHPublicKey publicKey=(DHPublicKey)this.getValueLinkPublicKey();\n  DHParameterSpec dhParamSpec=publicKey.getParams();\n  KeyPairGenerator keyGen=KeyPairGenerator.getInstance(\"DH\");\n  keyGen.initialize(dhParamSpec);\n  KeyPair keyPair=keyGen.generateKeyPair();\n  return keyPair;\n}\n", "nl": "Create a set of public/private keys using ValueLinks defined parameters"}
{"code": "public static String[] include(String... includes){\n  return includes;\n}\n", "nl": "Sets what patterns to include"}
{"code": "public static String nowAsString(){\n  return Long.toString(System.currentTimeMillis());\n}\n", "nl": "Returns currentTimeMillis as String"}
{"code": "public boolean contains(short val){\n  return index(val) >= 0;\n}\n", "nl": "Searches the set for <tt>val</tt>"}
{"code": "public boolean isDrawHoleEnabled(){\n  return mDrawHole;\n}\n", "nl": "returns true if the hole in the center of the pie-chart is set to be visible, false if not"}
{"code": "private int determineMaxLevelRec(int level,Node v){\n  int newLevel=level;\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1);\n  }\n  return newLevel;\n}\n", "nl": "recursively does the work"}
{"code": "@Override public Order searchById(Long id){\n  return sessionTemplate.selectOne(NAMESPACE + \".searchById\",id);\n}\n", "nl": "Search order by primary key"}
{"code": "public void loadString(TRSHttpRequest request,TRSStringHttpCallback callback){\n  mProvider.loadString(request,callback);\n}\n", "nl": "Load String Data"}
{"code": "@deprecated public Transliterator safeClone(){\n  UnicodeFilter filter=getFilter();\n  if ((filter != null) && ((filter instanceof UnicodeSet))) {\n    filter=new UnicodeSet((UnicodeSet)filter);\n  }\n  return new RuleBasedTransliterator(getID(),this.data,filter);\n}\n", "nl": "/*    "}
{"code": "public static void e(String tag,String msg){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  Log.e(tag,msg);\n}\n", "nl": "Send an ERROR log message"}
{"code": "public static boolean shuffle(Object[] objArray){\n  if (objArray == null) {\n    return false;\n  }\n  return shuffle(objArray,getRandom(objArray.length));\n}\n", "nl": "Shuffling algorithm, Randomly permutes the specified array using a default source of randomness"}
{"code": "public LikesGetListQueryWithExtended(VkApiClient client,UserActor actor,LikesType type){\n  super(client,\"likes.getList\",GetListExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@ObjectiveCName(\"init:\") public RecordMergeStrategyException(String error){\n  this(-1,null,-1,null,error);\n}\n", "nl": "Use when you don't need a reference to the actual conflicting data"}
{"code": "public static double rootMeansSquaredError(double[] real,double[] predicted){\n  double ret=0.0;\n  for (int i=0; i < real.length; i++) {\n    ret+=Math.pow((real[i] - predicted[i]),2);\n  }\n  return Math.sqrt(ret / real.length);\n}\n", "nl": "This returns the root mean squared error of two data sets"}
{"code": "public void writeChar(char a) throws IOException {\n  io.write((byte)(a >> 8));\n  io.write((byte)(a));\n}\n", "nl": "write a char"}
{"code": "public void testSingleLineFalse() throws Exception {\n  deleteManifest();\n  myFixture.copyFileToProject(BASE_PATH_GLOBAL + \"deprecation/AndroidManifest.xml\",\"AndroidManifest.xml\");\n  myFixture.enableInspections(new AndroidLintInspectionToolProvider.AndroidLintDeprecatedInspection());\n  myFixture.configureFromExistingVirtualFile(myFixture.copyFileToProject(BASE_PATH + \"singleLineFalse.xml\",\"res/layout/singleLineFalse.xml\"));\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,\"Replace singleLine=\\\"true\\\" with maxLines=\\\"1\\\"\");\n  assertNull(action);\n}\n", "nl": "Specialized quick fix is not available on singleLine=\"false\""}
{"code": "public static Zmat o(Zmat A){\n  Zmat B=new Zmat(A.nrow,A.ncol);\n  for (int i=0; i < A.nrow; i++)   for (int j=0; j < A.ncol; j++) {\n    B.re[i][j]=-A.re[i][j];\n    B.im[i][j]=-A.im[i][j];\n  }\n  return B;\n}\n", "nl": "Negates a Zmat"}
{"code": "public static final void changeGroupRules(PlayerGroup group,LootGroupRules lootRules){\n  group.onEvent(new ChangeGroupLootRulesEvent(group,lootRules));\n}\n", "nl": "Change group's loot rules and notify team members"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public SkillCursor querySkillFromTree(long id){\n  return mHelper.querySkillFromTree(id);\n}\n", "nl": "SKILL QUERIES"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  viewer.setMethod(TaxonomicProfileDialog.ProfileMethod.ReadSpreading);\n}\n", "nl": "parses the given command and executes it"}
{"code": "private void clustering(){\n  clustering(CLUSTER_DEFAULT_SIZE,\"Average\");\n}\n", "nl": "clustering with default target cluster size and default linkage type It uses 'Average' linkage clustering approach as default"}
{"code": "@Override public void monitor(Object proxy,ServiceID serviceID) throws Exception {\n  spaceProxy=proxy;\n  super.monitor(proxy,serviceID);\n}\n", "nl": "Override the monitor method to ensure a non-clustered proxy is used"}
{"code": "@Bean public Auth0Client auth0Client(){\n  return new Auth0Client(clientId,issuer);\n}\n", "nl": "Provides Auth0 API access"}
{"code": "public WallGetByIdQuery(VkApiClient client,UserActor actor,String... posts){\n  super(client,\"wall.getById\",Utils.buildParametrizedType(List.class,WallpostFull.class));\n  accessToken(actor.getAccessToken());\n  posts(posts);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void writeJavaParameterSpec(JavaParameterSpec spec,Document document,Element parentElement){\n  Element parameter=document.createElement(\"parameter\");\n  parentElement.appendChild(parameter);\n  parameter.setAttribute(\"package\",spec.getPackageName());\n  parameter.setAttribute(\"class\",spec.getClassName());\n  parameter.setAttribute(\"method\",spec.getHalfSignature());\n  parameter.setAttribute(\"parameter\",Integer.toString(spec.getParamIdx()));\n}\n", "nl": "Writes out a source/sink specification object for Java method parameters"}
{"code": "public AirMapSchoolProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n", "nl": "Initialize an AirMapSchoolProperties from JSON"}
{"code": "public boolean isFinalState(int state){\n  return (state < 0) ? false : fFinalStateFlags[state];\n}\n", "nl": "check whether the given state is one of the final states"}
{"code": "public String toString(){\n  return format;\n}\n", "nl": "gets the format string"}
{"code": "@Override public ListenableFuture<AlarmResponse> disalarm(AlarmMember member){\n  AlarmRequest alarmRequest=AlarmRequest.newBuilder().setAlarm(AlarmType.NOSPACE).setAction(AlarmRequest.AlarmAction.DEACTIVATE).setMemberID(member.getMemberID()).build();\n  checkArgument(member.getMemberID() != 0,\"the member id can not be 0\");\n  checkArgument(member.getAlarm() != AlarmType.NONE,\"alarm type can not be NONE\");\n  return this.futureStub.alarm(alarmRequest);\n}\n", "nl": "disarms a given alarm"}
{"code": "public AdsAddOfficeUsersQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.addOfficeUsers\",Boolean.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public NotesGetByIdQuery(VkApiClient client,UserActor actor,int noteId){\n  super(client,\"notes.getById\",Note.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void startThread(Context context){\n  this.mContext=context;\n  post(this);\n}\n", "nl": "start the thread"}
{"code": "private Collection<Map<String,Object>> batchParse(Collection<Json> batch){\n  return batch.stream().map(null).collect(toList());\n}\n", "nl": "Call parse of a collection of input data"}
{"code": "private static void populate(){\n  if (descriptionMap.isEmpty()) {\n    descriptionMap.put(jpg,\"JPEG (*.png)\");\n    descriptionMap.put(gif,\"GIF (*.gif)\");\n    descriptionMap.put(tif,\"TIFF (*.tif)\");\n    descriptionMap.put(png,\"PNG (*.png)\");\n  }\n}\n", "nl": "Populates the description values"}
{"code": "public final boolean isOverridingDevice(){\n  return (myOverride & CFG_DEVICE) != 0;\n}\n", "nl": "Returns true if the device is overridden"}
{"code": "public GroupsEditQuery ageLimits(GroupsEditAgeLimit value){\n  return unsafeParam(\"age_limits\",value);\n}\n", "nl": "Community age limits"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public boolean isInBoundsX(float x){\n  return isInBoundsLeft(x) && isInBoundsRight(x);\n}\n", "nl": "BELOW METHODS FOR BOUNDS CHECK"}
{"code": "public boolean isApplicable(){\n  ClusterViewer viewer=getViewer();\n  if (viewer.getMatrixTab() != null) {\n    TableModel model=viewer.getMatrixTab().getTable().getModel();\n    return model.getRowCount() > 1;\n  }\n  return false;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static double mlsadf(double x,double b[],int m,double a,double d[],int pt2,int pt3[]){\n  x=mlsadf1(x,b,m,a,d);\n  x=mlsadf2(x,b,m - 1,a,d,pt2,pt3);\n  return x;\n}\n", "nl": "mlsadf: HTS Mel Log Spectrum Approximation filter"}
{"code": "public static Map<String,String> parseKeyAndValueToMap(String source,boolean ignoreSpace){\n  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,ignoreSpace);\n}\n", "nl": "parse key-value pairs to map, ignore empty key"}
{"code": "static ShapeDrawable makeShapeDrawable(int color){\n  ShapeDrawable badgeBackground=new ShapeDrawable(new OvalShape());\n  badgeBackground.setIntrinsicWidth(10);\n  badgeBackground.setIntrinsicHeight(10);\n  badgeBackground.getPaint().setColor(color);\n  return badgeBackground;\n}\n", "nl": "Make circle drawable for badge background"}
{"code": "public SM_FRIEND_NOTIFY(int code,String name){\n  this.code=code;\n  this.name=name;\n}\n", "nl": "Constructs a new notify packet"}
{"code": "public static void startSync(Project project,GradleSyncListener listener){\n  GradleProjectImporter.getInstance().requestProjectSync(project,listener);\n}\n", "nl": "gradle sync"}
{"code": "public Bitmap put(String key,Bitmap value){\n  return cache.put(key,value);\n}\n", "nl": "put bitmap to image cache"}
{"code": "private static String genSalt(final byte[] Random){\n  final StringBuilder Salt=new StringBuilder(\"$H$\");\n  Salt.append(iota64[30]);\n  Salt.append(encode64(Random));\n  return Salt.toString();\n}\n", "nl": "Generates a salt string from random bytes <code>Random</code>"}
{"code": "public int size(){\n  return bits.cardinality();\n}\n", "nl": "get the number of taxa"}
{"code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public int rank(){\n  return new SingularValueDecomposition(this).rank();\n}\n", "nl": "Matrix rank"}
{"code": "public void clearSelection(){\n  List<Integer> selection=getSelectedItemsPosition();\n  selectedItems.clear();\n  for (  Integer i : selection) {\n    notifyItemChanged(i);\n  }\n}\n", "nl": "Clear the selection status for all items"}
{"code": "public StatsTrackVisitorQuery(VkApiClient client,UserActor actor){\n  super(client,\"stats.trackVisitor\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "private void drawRing(Canvas canvas,Rect bounds){\n  final RectF arcBounds=mTempBounds;\n  final Ring ring=mRing;\n  arcBounds.set(bounds);\n  arcBounds.inset(ring.strokeInset,ring.strokeInset);\n  canvas.drawArc(arcBounds,ring.start,ring.sweep,false,mPaint);\n}\n", "nl": "draw the ring"}
{"code": "@DataProvider(name=\"circuits\") public String[][] createCircuitData(){\n  return new String[][]{{\"monza\",\"Italy\"},{\"spa\",\"Belgium\"},{\"sepang\",\"Malaysia\"}};\n}\n", "nl": "Create a DataProvider that specifies in which country a specific circuit can be found (specify that Monza  is in Italy, for example)"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public SpaceHealthStatus(Throwable[] healthIssueErrors){\n  this.healthIssueErrors=healthIssueErrors;\n}\n", "nl": "Constructs a new space health status object"}
{"code": "public NewsfeedDeleteBanQuery userIds(Integer... value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids"}
{"code": "public VideoSaveQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "public static String escape(String url) throws UnsupportedEncodingException {\n  return escape(url,\"UTF-8\");\n}\n", "nl": "escaped an url using \"UTF-8\" encoding, and will not escape \"?\",\"=\" and escaped characters"}
{"code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected OrdersGetAmountQuery votes(String... value){\n  return unsafeParam(\"votes\",value);\n}\n", "nl": "Set votes"}
{"code": "public QueryTemplatePacket buildTemplate(LiteralNode node,QueryColumnData queryColumnData,short op,short nullOp,FunctionCallDescription functionCallDescription) throws SQLException {\n  QueryTableData tableData=queryColumnData.getColumnTableData();\n  ITypeDesc typeDesc=tableData.getTypeDesc();\n  Object value=node.getConvertedObject(typeDesc,queryColumnData.getColumnPath());\n  return new QueryTemplatePacket(tableData,query.getQueryResultType(),queryColumnData.getColumnPath(),toRange(queryColumnData.getColumnPath(),functionCallDescription,value,value == null ? nullOp : op));\n}\n", "nl": "Build space template"}
{"code": "public boolean isSetTraceId(){\n  return this.traceId != null;\n}\n", "nl": "Returns true if field traceId is set (has been assigned a value) and false otherwise"}
{"code": "static boolean objectsEquality(Object a,Object b){\n  if (a == null)   return b == null;\n  if (a == b)   return true;\n  return (a.equals(b));\n}\n", "nl": "perform objects equality , cater for null and also first use == which is not always true for various class  \"equals\""}
{"code": "public void writeDataFile(OutputStream outStream) throws DataFileException {\n  writeRecords(outStream,this.records);\n}\n", "nl": "Writes the records in this DataFile object to the given OutputStream"}
{"code": "public boolean isUptoDate(){\n  return uptodate;\n}\n", "nl": "is viewer uptodate?"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public Single<Void> fetch(){\n  int cache=0;\n  if (!this.firebaseRemoteConfig.getInfo().getConfigSettings().isDeveloperModeEnabled()) {\n    cache=3600;\n  }\n  return observeSingleValue(this.firebaseRemoteConfig.fetch(cache));\n}\n", "nl": "Allows to fetch the RemoteConfig remote values"}
{"code": "public AccountGetAppPermissionsQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"account.getAppPermissions\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getLength() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public LSInputListImpl(LSInput[] array,int length){\n  fArray=array;\n  fLength=length;\n}\n", "nl": "Construct an LSInputList implementation"}
{"code": "SAXParserImpl(SAXParserFactoryImpl spf,Hashtable features) throws SAXException {\n  this(spf,features,false);\n}\n", "nl": "Create a SAX parser with the associated features"}
{"code": "public FaveRemoveUserQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"fave.removeUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@deprecated public final String format(Style style,TimeZone tz,long date){\n  return format(style,tz,date,null);\n}\n", "nl": "/*     "}
{"code": "private void registerValue(int index){\nsynchronized (L) {\n    L.pushValue(index);\n    int key=L.Lref(LuaState.LUA_REGISTRYINDEX.intValue());\n    ref=new Integer(key);\n  }\n}\n", "nl": "Creates the reference to the object in the registry table"}
{"code": "public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,String groupId,List<Integer> userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatusFull.class));\n  groupId(groupId);\n  extended(true);\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ContentletQuery addHost(Host host){\n  return addHost(host.getIdentifier());\n}\n", "nl": "Adds a host limit to the query"}
{"code": "public CatchOptions useRazzberry(boolean useRazzBerry){\n  this.useRazzBerry=useRazzBerry;\n  return this;\n}\n", "nl": "Allows using a single razzberry to attempt capture"}
{"code": "public IObjectInfo<T> addUnlocked(T subject){\n  return store_impl(subject);\n}\n", "nl": "store an element, while the SL is unlocked"}
{"code": "public ResultSet executeQuery(String sql) throws GenericDataSourceException, GenericEntityException {\n  prepareStatement(sql);\n  return executeQuery();\n}\n", "nl": "Execute a query based on the SQL string given"}
{"code": "@ObjectiveCName(\"init:data:\") RpcResult(boolean success,Object data){\n  this.success=success;\n  this.data=data;\n}\n", "nl": "This object gives you access to the rpc response state to respond to a request"}
{"code": "public MessagesSearchQuery date(Integer value){\n  return unsafeParam(\"date\",value);\n}\n", "nl": "Set date"}
{"code": "public EulerAngle add(double x,double y,double z){\n  return new EulerAngle(this.x + x,this.y + y,this.z + z);\n}\n", "nl": "Creates a new EulerAngle which is the result of adding the x, y, z components to this EulerAngle"}
{"code": "private void broadcastToLegionMembers(final Player player){\n  if (player.isLegionMember()) {\n    PacketSendUtility.broadcastPacketToLegion(player.getLegion(),new SM_MESSAGE(player,message,type));\n  }\n}\n", "nl": "Sends message to all legion members"}
{"code": "public static Intent createIntent(Context ctx){\n  return createIntent(ctx,null);\n}\n", "nl": "Intent Factories"}
{"code": "public UsersGetNearbyQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public PhotosGetQuery photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n", "nl": "Return photo sizes in a special format"}
{"code": "public static String toNumbers(String address){\n  StringBuilder buf=new StringBuilder();\n  for (int i=0; i < address.length(); i++)   buf.append(String.format(\"%d.\",(int)address.charAt(i)));\n  return buf.toString();\n}\n", "nl": "converts an address to numbers of easier display"}
{"code": "public SpaceQueryDetails(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static boolean putString(Context context,String key,String value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putString(key,value);\n  return editor.commit();\n}\n", "nl": "put string preferences"}
{"code": "public boolean isFileType(){\n  return getValueType().isFile();\n}\n", "nl": "Indicates whether the value type of this data element is a file (externally stored resource)"}
{"code": "private void rejectDuelRequest(Player requester,Player responder){\n  log.debug(\"[Duel] Player \" + responder.getName() + \" rejected duel request from \"+ requester.getName());\n  PacketSendUtility.sendPacket(requester,new SM_DUEL_REQUEST_CANCEL(1300097,responder.getName()));\n  PacketSendUtility.sendPacket(responder,SM_SYSTEM_MESSAGE.STR_DUEL_REJECT_DUEL(requester.getName()));\n}\n", "nl": "Rejects the duel request"}
{"code": "public AudioGetBroadcastListQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getBroadcastList\",Utils.buildParametrizedType(List.class,UserBroadcast.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@deprecated private LanguageMatcherData addDistance(String desired,String supported,int percent){\n  return addDistance(desired,supported,percent,false,null);\n}\n", "nl": "/*    "}
{"code": "public boolean isSkipCommentLines(){\n  return iterator.isSkipCommentLines();\n}\n", "nl": "skip lines starting with #?"}
{"code": "@Override public boolean isValueLineVariableLength(){\n  return mValueLineVariableLength;\n}\n", "nl": "When valuePosition is OutsideSlice, this allows variable line length"}
{"code": "public double expectedWeightedValue(){\n  return this.weightedSum;\n}\n", "nl": "Expected value for the testArray defined in UnivariateStatisticAbstractTest"}
{"code": "public static Range of(int lowerBound,int upperBound){\n  return new Range(lowerBound,upperBound);\n}\n", "nl": "Creates a Range object with lower and upper bound"}
{"code": "public void stopAndError(String errorMessage){\n  mBasoStatus=BasoStatus.ERROR;\n  setFinishedText(errorMessage);\n  toggleLayout();\n}\n", "nl": "Set text and show stopped layout"}
{"code": "public MarketDeleteCommentQuery deleteComment(UserActor actor,int ownerId,int commentId){\n  return new MarketDeleteCommentQuery(getClient(),actor,ownerId,commentId);\n}\n", "nl": "Deletes an item's comment"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_DISPERSE_TIME(String durationday0){\n  return new SM_SYSTEM_MESSAGE(1300308,durationday0);\n}\n", "nl": "Time remaining until disbanding: %DURATIONDAY0"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set showLabels=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public void createGroupFromWidgets(ArrayList<ConstraintWidget> widgets){\n  ConstraintWidgetContainer container=new ConstraintWidgetContainer();\n  container.setCompanionWidget(WidgetCompanion.create(container));\n  createContainerFromWidgets(widgets,container,createContainerName(\"group\"));\n}\n", "nl": "Create and insert a new group from a given list of widgets"}
{"code": "public void componentHidden(ComponentEvent ev){\n}\n", "nl": "component hidded"}
{"code": "public static boolean isDarkTheme(Context context,boolean current){\n  return resolveBoolean(context,R.attr.themeDark,current);\n}\n", "nl": "Gets dialog type (Light/Dark) from current theme"}
{"code": "protected void reset() throws XNIException {\n  if (fValidationManager != null)   fValidationManager.reset();\n  int count=fComponents.size();\n  for (int i=0; i < count; i++) {\n    XMLComponent c=(XMLComponent)fComponents.get(i);\n    c.reset(this);\n  }\n}\n", "nl": "reset all components before parsing"}
{"code": "public CM_TITLE_SET(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_TITLE_SET </tt> packet"}
{"code": "public static void validateUTF8(byte[] utf8) throws MalformedInputException {\n  validateUTF8(utf8,0,utf8.length);\n}\n", "nl": "Check if a byte array contains valid utf-8"}
{"code": "public static Observable<GoogleApiClient> observable(Context context,Api api){\n  return GoogleApiClientObservable.create(context.getApplicationContext(),new ApiDefinition(api));\n}\n", "nl": "Serve an Observable GoogleApiClient"}
{"code": "public static void createQuerySchema(String schemaFile,String querySchemaName,String dataSchemaNameInput,String selectorNameInput,List<String> elementNames,List<String> filterNames,String filter,boolean append,FileSystem fs,boolean hdfs) throws IOException {\n  createQuerySchema(schemaFile,querySchemaName,dataSchemaNameInput,selectorNameInput,elementNames,filterNames,filter,append,fs,hdfs,null);\n}\n", "nl": "Creates the test query schema file"}
{"code": "void rollback(){\n  queryExecutor.submit(null);\n}\n", "nl": "Rollback the transaction, removing uncommitted changes"}
{"code": "List<ConfigItem> fetchConfigs(Set<String> names){\n  Map<String,Object> params=Maps.newHashMapWithExpectedSize(1);\n  params.put(\"names\",Joiners.COMMA.join(names));\n  return doGet(ClientUris.CONFIG_FETCHES,headers,params,JsonUtil.LIST_CONFIG_ITEM_TYPE);\n}\n", "nl": "Fetch config from server"}
{"code": "public static Node replaceLeafByCart(CART cart,LeafNode leaf){\n  DecisionNode mother=(DecisionNode)leaf.getMother();\n  Node newNode=cart.getRootNode();\n  mother.replaceDaughter(newNode,leaf.getNodeIndex());\n  newNode.setIsRoot(false);\n  return newNode;\n}\n", "nl": "In this tree, replace the given leaf with the given CART"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"show gapBetweenBars=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof ChartViewer) {\n    ((ChartViewer)getViewer()).setShowGapsBetweenBars(show);\n  }\n}\n", "nl": "parses the given command and executes it"}
{"code": "private static void convertCorrelationsToDistances(Distances distances){\n  for (int i=1; i <= distances.getNtax(); i++) {\n    for (int j=i + 1; j <= distances.getNtax(); j++) {\n      distances.set(i,j,(1.0 - distances.get(i,j) * distances.get(i,j)));\n    }\n  }\n}\n", "nl": "convert correlations into distances by subtracting from 1 and dividing by 2"}
{"code": "private Singletons(){\n}\n", "nl": "private ctor to prevent instantiation"}
{"code": "public static String escapeString(String str){\n  return escapeString(str,ESCAPE_CHAR,COMMA);\n}\n", "nl": "Escape commas in the string using the default escape char"}
{"code": "public boolean authenticate(String username,String password,boolean isServiceAuth) throws AuthenticatorException {\n  Debug.logInfo(this.getClass().getName() + \" Authenticator authenticate() -- returning false\",module);\n  return false;\n}\n", "nl": "Method to authenticate a user"}
{"code": "public PagesClearCacheQuery(VkApiClient client,String url){\n  super(client,\"pages.clearCache\",OkResponse.class);\n  url(url);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "void deleteEdgeTo(Schema.EdgeLabel type,Concept toConcept){\n  GraphTraversal<Vertex,Edge> traversal=mindmapsGraph.getTinkerPopGraph().traversal().V(getBaseIdentifier()).outE(type.getLabel()).as(\"edge\").otherV().hasId(((ConceptImpl)toConcept).getBaseIdentifier()).select(\"edge\");\n  if (traversal.hasNext())   traversal.next().remove();\n}\n", "nl": "Deletes an edge of a specific type going to a specific concept"}
{"code": "public TypeQueryExtensionsImpl(){\n}\n", "nl": "required for Externalizable"}
{"code": "private void storeLegion(Legion legion){\n  storeLegion(legion,false);\n}\n", "nl": "Stores newly created legion"}
{"code": "public GroupsGetQueryWithExtended filter(GroupsGetFilter... value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Types of communities to return"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public boolean isApplicable(){\n  return getDoc().getNumberOfReads() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public byte[] decryptViaKek(byte[] content){\n  return cryptoViaKek(content,Cipher.DECRYPT_MODE);\n}\n", "nl": "Ue the KEK to decrypt a value"}
{"code": "@VisibleForTesting protected static List<String> extractLogcatFromReader(BufferedReader reader,int maxLines) throws IOException {\n  return extractLogcatFromReaderInternal(reader,maxLines);\n}\n", "nl": "Extract microdump-free logcat for more informative crash reports"}
{"code": "public LeadsCheckUserQuery country(String value){\n  return unsafeParam(\"country\",value);\n}\n", "nl": "Set country"}
{"code": "@ColorInt public int extractPrimaryColorFrom(Context context){\n  return extractIntAttribute(context,PRIMARY);\n}\n", "nl": "Extracts the colorPrimary color attribute of the passing Context's theme"}
{"code": "public void clearMemoryCache(){\n  checkConfiguration();\n  configuration.memoryCache.clear();\n}\n", "nl": "Clears memory cache"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void putFloat(String key,float value){\n  checkForNullKey(key);\n  preferences.edit().putFloat(key,value).apply();\n}\n", "nl": "Put float value into SharedPreferences with 'key' and save"}
{"code": "public void skip(long n) throws IOException {\n  seek(getPosition() + n);\n}\n", "nl": "skip n bytes"}
{"code": "public static void v(String tag,String msg){\n  if (isDebug) {\n    Log.v(tag,msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public QueryAnswers resolve(MatchQuery inputQuery,boolean materialise){\n  Query query=new ReasonerMatchQuery(inputQuery,graph);\n  return resolveQuery(query,materialise);\n}\n", "nl": "Resolve a given query using the rule base"}
{"code": "private String toUrl(String testFile) throws MalformedURLException {\n  return new File(TestUtil.TEST_DATA_FOLDER + \"pac\",testFile).toURI().toURL().toString();\n}\n", "nl": "Helper method to build the url to the given test file"}
{"code": "@Override public void writePacketData(PacketBuffer buf) throws IOException {\n  buf.writeInt(ChannelManager.getID(channel));\n  channel.write(buf,packet);\n}\n", "nl": "Writes the packet to the given buffer"}
{"code": "public MessagesGetLongPollHistoryQuery pts(Integer value){\n  return unsafeParam(\"pts\",value);\n}\n", "nl": "Set pts"}
{"code": "public Map<String,Object> send(Map<String,Object> request) throws HttpClientException {\n  return send((String)props.get(\"payment.valuelink.url\"),request);\n}\n", "nl": "Transmit a request to ValueLink"}
{"code": "public boolean equals(double other_x,double other_y){\n  if (this.x == other_x && this.y == other_y) {\n    return true;\n  }\n  return false;\n}\n", "nl": "compare each other Value, equals"}
{"code": "public CommandTagUpdate(){\n}\n", "nl": "Creates a new command tag update"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void outputComplete(){\n  final int bufferIndex=(int)(outputCnt % bufferSize);\n  inputs.set(bufferIndex,null);\n  outputs.set(bufferIndex,null);\n  outputCnt++;\n  outputThreadLock.unlock();\n}\n", "nl": "Thread UNSAFE This method should be called in completeHandler"}
{"code": "public static void syncCollapsedFromSummaryToTaxonomyViewer(DataTable table,MainViewer mainViewer){\n  Document doc=mainViewer.getDir().getDocument();\n  mainViewer.getCollapsedIds().clear();\n  if (table.getCollapsed(ClassificationType.Taxonomy.toString()) != null)   mainViewer.getCollapsedIds().addAll(table.getCollapsed(ClassificationType.Taxonomy.toString()));\n}\n", "nl": "sync collapsed nodes from summary to main viewer"}
{"code": "public static MutableContextSet singleton(String key,String value){\n  MutableContextSet set=new MutableContextSet();\n  set.add(key,value);\n  return set;\n}\n", "nl": "Make a singleton MutableContextSet from a context pair"}
{"code": "private static boolean visitNodesToUseRec(ViewerBase viewer,Node v,NodeSet toUse){\n  boolean use=viewer.getSelected(v);\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    if (visitNodesToUseRec(viewer,e.getTarget(),toUse))     use=true;\n  }\n  if (use)   toUse.add(v);\n  return use;\n}\n", "nl": "recursively visit all nodes that we need to use due to user selection"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public MessagesDeleteChatPhotoQuery(VkApiClient client,UserActor actor,int chatId){\n  super(client,\"messages.deleteChatPhoto\",DeleteChatPhotoResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean putLong(Context context,String key,long value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putLong(key,value);\n  return editor.commit();\n}\n", "nl": "put long preferences"}
{"code": "public void save(String fileName) throws IOException {\n  try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName),1000000)){\n    for (    String key : keySet()) {\n      Integer value=get(key);\n      if (value != null)       w.write(key + \"\\t\" + value+ \"\\n\");\n    }\n  }\n }\n", "nl": "save to a file"}
{"code": "protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){\n  this.fontRendererObj.drawString(this.name,8,6,4210752);\n  this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(),8,this.ySize - 96 + 2,4210752);\n}\n", "nl": "Draw the foreground layer for the GuiContainer (everything in front of the items)"}
{"code": "public static void unpublishAllServices() throws RpcException {\n  try {\n    ServicePublisher.unpublishAllServices();\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while unpublishing all services\",e);\n  }\n}\n", "nl": "unpublish all pigeon services from registry"}
{"code": "public DownloadConfiguration(){\n  maxThreadNum=DEFAULT_MAX_THREAD_NUMBER;\n  threadNum=DEFAULT_THREAD_NUMBER;\n}\n", "nl": "init with default value"}
{"code": "public static void warn(@Nullable Class<?> caller,String message,Object... args){\n  android.util.Log.w(tag(caller),String.format(Locale.ENGLISH,message,args));\n}\n", "nl": "Logs with warn level"}
{"code": "@deprecated public RbnfScannerProviderImpl(){\n  this.cache=new HashMap();\n}\n", "nl": "/*    "}
{"code": "protected void noteAddition(K key,V newValue){\n  for (  CacheListener<K,V> listener : listeners) {\n    listener.noteKeyAddition(this,key,newValue);\n  }\n}\n", "nl": "Send a key addition event to all registered listeners"}
{"code": "public boolean topAllowed(){\n  return (myFlags & TOP_EDGE) != 0;\n}\n", "nl": "Returns true if this policy allows resizing the top edge"}
{"code": "public void clearPayment(int index){\n  paymentInfo.remove(index);\n}\n", "nl": "removes a specific payment info from the list"}
{"code": "FilterType(final int number){\n  this.number=number;\n}\n", "nl": "The Filter type number"}
{"code": "protected AppsGetScoreQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public static void writeInt(DataOutputStream dis,boolean isBigEndian,int val) throws IOException {\n  if (!isBigEndian) {\n    writeLittleEndianInt(dis,val);\n  }\n else {\n    dis.writeInt(val);\n  }\n}\n", "nl": "Writes an integer to the output stream, byte-swapping as necessary"}
{"code": "public void increase(){\n  gameTime++;\n  if (getMinute() == 0) {\n    checkDayTimeChange();\n  }\n}\n", "nl": "Increases game time by a minute"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_ACQUIRE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300617,value0);\n}\n", "nl": "Quest acquired: %0"}
{"code": "public Split[] asArray(){\n  Split[] result=new Split[size()];\n  int count=0;\n  for (Iterator it=iterator(); it.hasNext(); ) {\n    result[count++]=(Split)it.next();\n  }\n  return result;\n}\n", "nl": "returns the splits as an array"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "public double distSquared(Math_Vector other){\n  double distX=this.x - other.x;\n  double distY=this.y - other.y;\n  return distX * distX + distY * distY;\n}\n", "nl": "calculate each vector's distance Square"}
{"code": "public Observable<Book> observeChangingBooks(){\n  return changingBookSubject;\n}\n", "nl": "emit event, when book changed"}
{"code": "public Builder cacheOnDisc(boolean cacheOnDisc){\n  this.cacheOnDisc=cacheOnDisc;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached on disc"}
{"code": "public boolean isApplicable(){\n  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX && getViewer().getPcoaTab().isIs3dMode();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@Override public void showProgress(){\n  if (mShotRecycler.getVisibility() == View.VISIBLE && mBrowseAdapter.getItemCount() > 0) {\n    mSwipeRefreshLayout.setRefreshing(true);\n  }\n else {\n    mRecyclerProgress.setVisibility(View.VISIBLE);\n  }\n}\n", "nl": "Browse MVP View method implementation"}
{"code": "public PhotosCopyQuery(VkApiClient client,UserActor actor,int ownerId,int photoId){\n  super(client,\"photos.copy\",Integer.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void assertClose(double[] m,double[] n,double tolerance){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors not same length\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(m[i],n[i],tolerance);\n  }\n}\n", "nl": "verifies that two vectors are close (sup norm)"}
{"code": "public Response doDelete(String url){\n  return doDelete(url,null);\n}\n", "nl": "Does a HTTP DELETE with an empty body"}
{"code": "private IReadBlock fetchNext(){\n  while (!canceled.get() && allReadsIterator.hasNext()) {\n    IReadBlock readBlock=allReadsIterator.next();\n    if (FindSelection.doesMatch(findSelector,readBlock,pattern))     return readBlock;\n  }\n  return null;\n}\n", "nl": "fetches the next read that matches the search pattern"}
{"code": "public NewsfeedGetQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public MessagesDeleteDialogQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id"}
{"code": "private Uri whichContentStore(){\n  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n    return android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n  }\n else {\n    return android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI;\n  }\n}\n", "nl": "Determine if we are storing the images in internal or external storage"}
{"code": "static void changeImageViewTint(ImageView imageView,int color){\n  imageView.setColorFilter(color);\n}\n", "nl": "Change given image view tint"}
{"code": "public boolean isTransactionCanceled(){\n  return transactionCanceled;\n}\n", "nl": "Indicates that the transaction for the incoming message is canceled by a command class"}
{"code": "public void keyTyped(KeyEvent ke){\n}\n", "nl": "Key typed"}
{"code": "public void begin(int size){\n}\n", "nl": "Starts the output of a set of data"}
{"code": "public void toPlayer(EntityPlayerMP player){\n  player.connection.sendPacket(new PacketWrapper(channel,new Packet(this)));\n}\n", "nl": "Sends this packet to the given player"}
{"code": "public MarketReportQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,ReportReason reason){\n  super(client,\"market.report\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  reason(reason);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public FriendsGetListsQuery returnSystem(Boolean value){\n  return unsafeParam(\"return_system\",value);\n}\n", "nl": "Set return system"}
{"code": "public MediaFormat(){\n  mMap=new HashMap<String,Object>();\n}\n", "nl": "Creates an empty MediaFormat"}
{"code": "public VideoGetAlbumsQuery needSystem(Boolean value){\n  return unsafeParam(\"need_system\",value);\n}\n", "nl": "Return system albums"}
{"code": "public static <K>MapStack<K> create(MapStack<K> source){\n  MapStack<K> newValue=new MapStack<K>();\n  newValue.stackList.addAll(source.stackList);\n  return newValue;\n}\n", "nl": "Does a shallow copy of the internal stack of the passed MapStack; enables simultaneous stacks that share common parent Maps"}
{"code": "public AuthSignupQuery voice(Boolean value){\n  return unsafeParam(\"voice\",value);\n}\n", "nl": "true - call the phone number and leave a voice message of the authorization code false - send the code by SMS (default)"}
{"code": "public static boolean isTaxonDisabled(Integer taxonId){\n  return taxonId == null || taxonomyClassification.getIdMapper().getDisabledIds().contains(taxonId);\n}\n", "nl": "is this taxon, or one of its ancestors, disabled? Taxa that are disabled are ignored by LCA algorithm"}
{"code": "public boolean apply(){\n  setVisible(true);\n  return !isCanceled();\n}\n", "nl": "show the dialog"}
{"code": "public GroupsGetRequestsQueryWithFields(VkApiClient client,UserActor actor,int groupId,UserField... fields){\n  super(client,\"groups.getRequests\",GetRequestsFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "void incrementRefCounter(){\nsynchronized (mutex) {\n    refCounter++;\n  }\n}\n", "nl": "Increment the references"}
{"code": "public ThresholdValues(){\n}\n", "nl": "Create a new ThresholdValues"}
{"code": "public DocsGetTypesQuery(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"docs.getTypes\",GetTypesResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void removeFromTemplateContext(String name){\n  if (templateContext != null)   templateContext.remove(name);\n}\n", "nl": "Removes an object from the FTL survey template context"}
{"code": "public ResourcesPoet addColor(String name,String value){\n  Element element=document.createElement(\"color\");\n  element.setAttribute(\"name\",name);\n  element.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(element);\n  return this;\n}\n", "nl": "Add a color to the config"}
{"code": "public boolean isMenuPathEnabled(@NotNull String... path){\n  return getMenuFixture().isMenuPathEnabled(path);\n}\n", "nl": "Returns whether a menu path is enabled"}
{"code": "public void cancelInteraction(){\n  finishInteraction(myLastMouseX,myLastMouseY,ourLastStateMask,true);\n}\n", "nl": "Cancels the current running interaction"}
{"code": "private Response buildJSONResponse(Object o) throws JsonProcessingException {\n  return newFixedLengthResponse(MAPPER.writeValueAsString(o));\n}\n", "nl": "Helper method to serialize a POJO into JSON"}
{"code": "@NotNull public List<Emotion> findEmotionFaces(@NotNull String image){\n  return emotionBuilder.emotionRecognition(image).withResult();\n}\n", "nl": "Find a faces within a local image"}
{"code": "private void notify_1(){\n  bleManager.notifyDevice(UUID_SERVICE,UUID_NOTIFY_1,notifyCallback_1);\n}\n", "nl": "listen notify1"}
{"code": "public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){\n  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));\n}\n", "nl": "Creates new AsyncHttpClient using given params"}
{"code": "@RequestMapping(value=\"/apps/del\",method=RequestMethod.POST) public JsonResponse delApp(@RequestParam(\"appName\") String appName){\n  Response<Boolean> delResp=appService.delete(appName);\n  if (!delResp.isSuccess()) {\n    Logs.error(\"failed to delete app({}), cause: {}\",appName,delResp.getErr());\n  }\n  return JsonResponse.ok(delResp.getData());\n}\n", "nl": "Delete the app"}
{"code": "protected void fireTimeoutOccured(Map<WatchedObject,Collection<WatchedObject>> watchedObjects) throws Exception {\n  for (  Collection<WatchedObject> bucket : watchedObjects.values()) {\n    _observer.timeoutOccured(bucket);\n  }\n}\n", "nl": "Fire timeout event about the watched object to the <i>TimeoutObserver</i>"}
{"code": "public static MutableContextSet fromEntries(Iterable<Map.Entry<String,String>> iterable){\n  MutableContextSet set=new MutableContextSet();\n  set.addAll(iterable);\n  return set;\n}\n", "nl": "Creates a MutableContextSet from an existing iterable of Map Entries"}
{"code": "public static void i(String tag,String msg){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  Log.i(tag,msg);\n}\n", "nl": "Send an INFO log message"}
{"code": "public void addBottomResourceBundle(String resource){\n  if (this.initialResourceBundle == null) {\n    throw new IllegalArgumentException(\"Cannot add bottom resource bundle, this wrapper was not properly initialized (there is no base/initial ResourceBundle).\");\n  }\n  this.addBottomResourceBundle(new InternalRbmWrapper(UtilProperties.getResourceBundle(resource,this.initialResourceBundle.getLocale())));\n}\n", "nl": "Don't pass the locale to make sure it has the same locale as the base"}
{"code": "private static void padInt(StringBuilder buffer,int value,int length){\n  String strValue=Integer.toString(value);\n  for (int i=length - strValue.length(); i > 0; i--) {\n    buffer.append('0');\n  }\n  buffer.append(strValue);\n}\n", "nl": "Zero pad a number to a specified length"}
{"code": "public BrowserLogEntry(String message){\n  this.message=message;\n}\n", "nl": "Construct BrowserLogEntry"}
{"code": "public CompositeRange add(Range range){\n  _ranges.add(range);\n  ((AllSpacePredicate)this.getPredicate()).addOperand(range.getPredicate());\n  return this;\n}\n", "nl": "Add a range to the composite ranges"}
{"code": "public static void d(String msg){\n  if (LOG_ENABLE) {\n    Log.d(TAG,buildMsg(msg));\n  }\n}\n", "nl": "debug log"}
{"code": "public static String convertTime(int time){\n  time/=1000;\n  int minute=time / 60;\n  int second=time % 60;\n  minute%=60;\n  return String.format(\"%02d:%02d\",minute,second);\n}\n", "nl": "convert time str"}
{"code": "private void useSkill(int skillId,VisibleObject target){\n  SkillEngine.getInstance().getSkill(getOwner(),skillId,65,target).useSkill();\n}\n", "nl": "Destroyer Kunax Skill's AI"}
{"code": "public VideoAddAlbumQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.addAlbum\",AddAlbumResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isSelectionFindable(){\n  return mainViewer.getSelectedNodes().size() > 0;\n}\n", "nl": "is a selection find possible"}
{"code": "public DocumentNGramSymWinDistroGraph(){\n  InitGraphs();\n}\n", "nl": "Creates a new instance of DocumentNGramSymWinDistroGraph"}
{"code": "public SpectralSpellInteroperator(String sInputFile,String[] sArgs){\n  InputFile=sInputFile;\n  Args=sArgs;\n}\n", "nl": "Creates a new instance of SpectralSpellInteroperator"}
{"code": "@PUT @Path(\"/roles\") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value=\"Update roles for a list of users and applications\") @Timed public Response updateUserRoles(@ApiParam(name=\"userRoleList\",value=\"Please see model example\",required=true) final UserRoleList userRoleList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  List<Map> statuses=updateUserRole(userRoleList,authorizationHeader);\n  return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put(\"assignmentStatuses\",statuses).build()).build();\n}\n", "nl": "Update user roles"}
{"code": "public Builder path(@NonNull File path){\n  if (path == null)   throw new IllegalArgumentException(\"path == null\");\n  this.path=path;\n  return this;\n}\n", "nl": "Path to which we will save the screenshots"}
{"code": "public Call patch(String url,JSONObject params,Callback callback){\n  MediaType JSON=MediaType.parse(\"application/json; charset=utf-8\");\n  RequestBody body=RequestBody.create(JSON,params.toString());\n  Request request=new Builder().url(url).patch(body).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n", "nl": "Make a PATCH call with JSON body"}
{"code": "public void uncollapseAll(){\n  getCollapsedIds().clear();\n  updateTree();\n}\n", "nl": "completely uncollapse all nodes"}
{"code": "protected void verifyContainerProperty(String propertyPath,Object expectedValue) throws Throwable {\n  CommandInput commandInput=new CommandInput().withDockerUri(getDockerVersionedUri()).withCredentials(getDockerCredentials()).withProperty(DockerAdapterCommandExecutor.DOCKER_CONTAINER_ID_PROP_NAME,containerId);\n  host.testStart(1);\n  getTestCommandExecutor().inspectContainer(commandInput,null);\n  host.testWait();\n}\n", "nl": "Perform an inspect command to check the container's run status"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "final long fn(long v,long x){\n  return v + x;\n}\n", "nl": "Version of plus for use in retryUpdate"}
{"code": "public boolean isSetQueueSize(){\n  return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID);\n}\n", "nl": "Returns true if field queueSize is set (has been assigned a value) and false otherwise"}
{"code": "public static boolean removeFromCache(String imageUri,DiskCache diskCache){\n  File image=diskCache.get(imageUri);\n  return image != null && image.exists() && image.delete();\n}\n", "nl": "Removed cached image file from disk cache (if image was cached in disk cache before)"}
{"code": "public void addRepositoryListener(ISVNListener listener){\n  repositoryListeners.add(listener);\n}\n", "nl": "Register to receive notification of repository creation and disposal"}
{"code": "public PhotosGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return an additional \"likes\" field"}
{"code": "@Override public boolean isXYLocked(){\n  return true;\n}\n", "nl": "must x and y coordinates by zoomed together?"}
{"code": "public <R>R executeTransactionalCommand(final TransactionalCommand<R> command,final int retryCount) throws MithraBusinessException {\n  return this.executeTransactionalCommand(command,new TransactionStyle(this.transactionTimeout,retryCount));\n}\n", "nl": "executes the given transactional command with the custom number of retries"}
{"code": "public FriendsGetRequestsQueryWithNeedMutual sort(FriendsGetRequestsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public static ToolbarTapTarget forToolbarMenuItem(android.widget.Toolbar toolbar,@IdRes int menuItemId,CharSequence title,@Nullable CharSequence description){\n  return new ToolbarTapTarget(toolbar,menuItemId,title,description);\n}\n", "nl": "Return a tap target for the menu item from the given toolbar"}
{"code": "public final boolean between(int iNum,int iMin,int iMax){\n  return (iNum >= iMin) && (iNum <= iMax);\n}\n", "nl": "This function returns true when the iNum is between the limits [iMin,iMax]"}
{"code": "public void choose(Flavor item){\n  checkInit();\n  int index=mFlavors.indexOf(item);\n  mPreferences.edit().putInt(PREFERENCE_FLAVOR_KEY,index).apply();\n}\n", "nl": "Choose a given flavor"}
{"code": "public void ready(){\n}\n", "nl": "It does nothing, but look as a cool huh"}
{"code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n", "nl": "Removes wheel scrolling listener"}
{"code": "protected void ensureOpen() throws IllegalStateException {\n  if (closed) {\n    throw new IllegalStateException(\"Forbidden call on a closed connection.\");\n  }\n}\n", "nl": "Verifies that the connection is open"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public Math_Vector sub(Math_Vector other){\n  this.x-=other.x;\n  this.y-=other.y;\n  return this;\n}\n", "nl": "sub the value to this Math_Vector"}
{"code": "public static <T>T createService(final Class<T> clazz,final String baseUrl){\n  Retrofit retrofit=new Retrofit.Builder().baseUrl(baseUrl).addConverterFactory(GsonConverterFactory.create()).build();\n  return retrofit.create(clazz);\n}\n", "nl": "Creates a retrofit service from an arbitrary class (clazz)"}
{"code": "private boolean hasURL(URL url){\n  URL[] urls=getURLs();\n  for (int i=0; i < urls.length; i++) {\n    if (urls[i].equals(url))     return (true);\n  }\n  return (false);\n}\n", "nl": "Check if the URL already is registered"}
{"code": "public int download_file1(String file_id,long file_offset,long download_bytes,String local_filename) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.download_file(parts[0],parts[1],file_offset,download_bytes,local_filename);\n}\n", "nl": "download file from storage server"}
{"code": "public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);\n}\n", "nl": "execute shell commands"}
{"code": "@Override public Map<String,Object> runSync(String localName,ModelService modelService,Map<String,Object> context) throws GenericServiceException {\n  Map<String,Object> result=serviceInvoker(localName,modelService,context);\n  if (result == null)   throw new GenericServiceException(\"Service did not return expected result\");\n  return result;\n}\n", "nl": "Run the service synchronously and return the result"}
{"code": "public PercentFormatter(DecimalFormat format){\n  this.mFormat=format;\n}\n", "nl": "Allow a custom decimalformat"}
{"code": "private void startIntermediateMerging(File[] intermediateFiles){\n  File file=new File(parameters.getTempFileLocation() + File.separator + parameters.getTableName()+ System.nanoTime()+ CarbonCommonConstants.MERGERD_EXTENSION);\n  IntermediateFileMerger merger=new IntermediateFileMerger(parameters,intermediateFiles,file);\n  executorService.submit(merger);\n}\n", "nl": "Below method will be used to start the intermediate file merging"}
{"code": "public IObjectInfo<T> addUnlocked(T subject){\n  return store_impl(subject);\n}\n", "nl": "store an element, while the SL is unlocked"}
{"code": "public boolean isIncluded(int value){\n  for (  Range r : ranges) {\n    if (r.start <= value && value <= r.end) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Is the given value in the set of ranges"}
{"code": "public GroupByValue(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public PollsEditQuery addAnswers(String value){\n  return unsafeParam(\"add_answers\",value);\n}\n", "nl": "Answers list, for example: [\"yes\",\"no\",\"maybe\"]"}
{"code": "public PollsAddVoteQuery(VkApiClient client,UserActor actor,int pollId,int answerId){\n  super(client,\"polls.addVote\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  pollId(pollId);\n  answerId(answerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public DocumentNGramDistroGraph(){\n  InitGraphs();\n}\n", "nl": "Creates a new instance of DocumentNGramDistroGraph"}
{"code": "@Override public void loadData(){\n  return;\n}\n", "nl": "For boundaries, this does nothing;"}
{"code": "public static Data load(String table,W q){\n  return Helper.load(table,q,Data.class);\n}\n", "nl": "load the data from the table"}
{"code": "private TemplateParser(){\n  registerDefaultMacros();\n}\n", "nl": "Create a template parser"}
{"code": "private void execute(){\n  for (  AbstractAnnotationManager manager : managers)   manager.execute(target,context);\n}\n", "nl": "Execute the different managers given their positions, it represents their dependencies"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  SelectedBlock selectedBlock=viewer.getSelectedBlock();\n  return viewer.getAlignment().getNumberOfSequences() > 0 && selectedBlock.isSelected() && selectedBlock.getFirstRow() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public BalloonTreeLayout(String group){\n  this(group,2);\n}\n", "nl": "Create a new BalloonTreeLayout"}
{"code": "public static byte[] convertImageToJPEG(BufferedImage img,float quality) throws IOException {\n  return bufferedImageToJPEG(img,quality);\n}\n", "nl": "converts an image to JPEG"}
{"code": "public WordEvaluatorAdapter(){\n}\n", "nl": "Creates a new instance of WordEvaluatorAdapter"}
{"code": "public void stopScrolling(){\n  scroller.stopScrolling();\n}\n", "nl": "Stops scrolling"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  if (inspectorWindow.getDataTree().getSelectionCount() == 0)   inspectorWindow.clear();\n else   inspectorWindow.deleteSelectedNodes();\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public boolean isAvailable(){\n  return true;\n}\n", "nl": "is this node available?"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void actionPerformed(ActionEvent ev){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();\n  if (samples.size() > 0)   execute(\"set nodeShape=square sample='\" + Basic.toString(samples,\"' '\") + \"';\");\n}\n", "nl": "action to be performed"}
{"code": "private void serverTextCommandEditInit(){\n  serverTextEdit.setEditable(true);\n  serverTextEdit.setVisible(true);\n  serverTextEdit.setPromptText(\"Input your shell command\");\n}\n", "nl": "server shell text edit init"}
{"code": "public float connectedDistanceToRoot(ScoutWidget[] list,Direction direction){\n  float value=recursiveConnectedDistanceToRoot(list,direction);\n  cacheRootDistance(direction,value);\n  return value;\n}\n", "nl": "get distance to the container in a direction caches the distance"}
{"code": "protected NewsfeedUnsubscribeQuery type(NewsfeedItemType value){\n  return unsafeParam(\"type\",value);\n}\n", "nl": "Type of object from which to unsubscribe"}
{"code": "private int computeKey(int row,int column){\n  return row * columns + column;\n}\n", "nl": "Compute the key to access a matrix element"}
{"code": "private boolean isSentenceStart(int index){\n  FeatureVector fv=features.getFeatureVector(index);\n  return fv.getByteFeature(fiSentenceStart) == 0 && fv.getByteFeature(fiWordStart) == 0 && (!isHalfphone || fv.getByteFeature(fiLR) == fvLR_L);\n}\n", "nl": "Check if the given unit index is a sentence start"}
{"code": "public static boolean checkValidInterval(String interval){\n  return Arrays.asList(TIME_INTERVALS).contains(interval);\n}\n", "nl": "SCIPIO: Checks if the interval passed is a valid one"}
{"code": "public void clear(){\n  for (  int[] segment : segments) {\n    Arrays.fill(segment,0);\n  }\n  maxIndex=-1;\n  numberOfNonZeroEntries=0;\n}\n", "nl": "Zeros the array"}
{"code": "public XMLConfigurationException(short type,String identifier,String message){\n  super(message);\n  fType=type;\n  fIdentifier=identifier;\n}\n", "nl": "Constructs a configuration exception with the specified type, feature/property identifier, and error message"}
{"code": "public static void v(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.v(tag,buildMsg(msg));\n  }\n}\n", "nl": "verbose log"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showBiPlot=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public void rightTrim(double second){\n  trim(0,second);\n}\n", "nl": "Trim the wave data from ending"}
{"code": "public int hashCode(){\n  this.combineOperands();\n  return operands.hashCode();\n}\n", "nl": "the xor operation is used to ensure the order of operands does not impact the hashcode"}
{"code": "public boolean drawShadows(){\n  return drawShadows;\n}\n", "nl": "Determine whether shadows are drawn"}
{"code": "protected Button createRadioButton(Composite parent,String label,int span){\n  Button button=new Button(parent,SWT.RADIO);\n  button.setText(label);\n  GridData data=new GridData();\n  data.horizontalSpan=span;\n  button.setLayoutData(data);\n  return button;\n}\n", "nl": "Utility method to create a radio button"}
{"code": "public boolean deleteKey(DataType key,RecordID rid){\n  throw new BPlusTreeException(\"BPlusTree#DeleteKey Not Implemented!\");\n}\n", "nl": "Deletes an entry with the matching Key and RecordID"}
{"code": "public IObjectInfo<T> add(T subject){\n  return addImpl(subject);\n}\n", "nl": "store an element"}
{"code": "public NotificationAdapter(){\n}\n", "nl": "Creates a new instance of NotificationAdapter"}
{"code": "public DataStructure(byte[] raw,Format format){\n  this(ByteBuffer.wrap(raw).order(ByteOrder.LITTLE_ENDIAN),format);\n}\n", "nl": "Default is Little endian provide a prepared BteBuffer if you want to use an other order"}
{"code": "private static String wrapWithMergeConflict(String original,String added){\n  String sep=\"\\n\";\n  return \"<<<<<<< Original\" + sep + original+ sep+ \"=======\"+ sep+ added+ \">>>>>>> Added\"+ sep;\n}\n", "nl": "Wraps the given strings in the standard conflict syntax"}
{"code": "public static <V>boolean addListNotNullValue(List<V> sourceList,V value){\n  return (sourceList != null && value != null) ? sourceList.add(value) : false;\n}\n", "nl": "add not null entry to list"}
{"code": "void put(int key,MvvmViewModel cacheViewModel){\n  cache.put(key,cacheViewModel);\n}\n", "nl": "Put a ViewModel into the cache"}
{"code": "public boolean isGlobalScope(){\n  return true;\n}\n", "nl": "get scope global rather than selected"}
{"code": "public static <T>void publishService(String url) throws RpcException {\n  try {\n    ServicePublisher.publishService(url);\n  }\n catch (  RegistryException t) {\n    throw new RpcException(\"error while publishing service:\" + url,t);\n  }\n}\n", "nl": "publish the service to registry"}
{"code": "private boolean isGCMBaseIntentService(SootClass currentClass){\n  while (currentClass.hasSuperclass()) {\n    if (currentClass.getSuperclass().getName().equals(AndroidEntryPointConstants.GCMBASEINTENTSERVICECLASS))     return true;\n    currentClass=currentClass.getSuperclass();\n  }\n  return false;\n}\n", "nl": "Checks whether the given service is a GCM BaseIntentService"}
{"code": "public static ConversationListFragment newInstance(String anchorId,boolean isNormalStyle){\n  ConversationListFragment fragment=new ConversationListFragment();\n  Bundle bundle=new Bundle();\n  bundle.putString(ARG_ANCHOOR,anchorId);\n  bundle.putBoolean(ARG_IS_NORMAL,isNormalStyle);\n  fragment.setArguments(bundle);\n  return fragment;\n}\n", "nl": "create a ConversationListFragment instance"}
{"code": "@Override public void copyContentlet(Contentlet arg0,Folder arg1,User arg2,boolean arg3,boolean arg4,Contentlet arg5){\n}\n", "nl": "Dummy implemented methods"}
{"code": "public UsersGetFollowersQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "protected MarketReorderAlbumsQuery albumId(int value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Collection id"}
{"code": "@deprecated public StringCharacterIterator(String text,int pos){\n  this(text,0,text.length(),pos);\n}\n", "nl": "/*    "}
{"code": "public Builder addColumnLong(String name,Long minAllowedValue,Long maxAllowedValue){\n  return addColumn(new LongMetaData(name,minAllowedValue,maxAllowedValue));\n}\n", "nl": "Add an Long column with the specified min/max allowable values"}
{"code": "public boolean equalTo(Highlight h){\n  if (h == null)   return false;\n else {\n    return (this.mDataSetIndex == h.mDataSetIndex && this.mXIndex == h.mXIndex && this.mStackIndex == h.mStackIndex);\n  }\n}\n", "nl": "returns true if this highlight object is equal to the other (compares xIndex and dataSetIndex)"}
{"code": "public XMLDTDLoader(){\n  this(new SymbolTable());\n}\n", "nl": "Deny default construction; we need a SymtolTable!"}
{"code": "protected void writeString(String s) throws IOException {\n  for (int i=0; i < s.length(); i++) {\n    out.write((byte)s.charAt(i));\n  }\n}\n", "nl": "Writes string to output stream"}
{"code": "public AudioSaveQuery(VkApiClient client,UserActor actor,int server,String audio){\n  super(client,\"audio.save\",Utils.buildParametrizedType(List.class,Audio.class));\n  accessToken(actor.getAccessToken());\n  server(server);\n  audio(audio);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static GenericPK create(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){\n  GenericPK newPK=new GenericPK();\n  newPK.init(delegator,modelEntity,fields);\n  return newPK;\n}\n", "nl": "Creates new GenericPK from existing Map"}
{"code": "protected NewsfeedIgnoreItemQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item identifier"}
{"code": "@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){\n  exception.printStackTrace();\n  Log.e(\"TrafficService\",\"Error connecting: \" + exception.getMessage());\n  onDisconnect(false);\n}\n", "nl": "Called when there was an error connecting"}
{"code": "private void addQuestions(ApiResult ar,String questions,int page,long fromDate,long toDate,String tag,NotifyMe notifyMe) throws JSONException, IOException {\n  String url=CloseVoteFinder.getInstance().getApiUrl(questions,page,fromDate,toDate,tag);\n  addQuestions(ar,url,tag,notifyMe);\n}\n", "nl": "Add all question in single page"}
{"code": "public static Transaction startTransaction(SQLiteDatabase writableDb){\n  return new Transaction(writableDb);\n}\n", "nl": "Get a transaction builder for inserting/updating stuff"}
{"code": "@Override public String toString(){\n  return \"Sequence\" + sequence;\n}\n", "nl": "returns a string like \"Sequence[a, b, c]\""}
{"code": "public static WeightedAddress[] resizeArray(WeightedAddress[] array,int size){\n  WeightedAddress[] result=new WeightedAddress[size];\n  System.arraycopy(array,0,result,0,array.length);\n  for (int i=array.length; i < result.length; i++)   result[i]=new WeightedAddress();\n  return result;\n}\n", "nl": "utility for resizing an array of weighted addresses"}
{"code": "public ReadBlockRMA2Formatter(String format){\n  this.format=format;\n  decode(format);\n}\n", "nl": "constructs an instance and sets to the given format"}
{"code": "@Override public void onConnected(Bundle connectionHint){\n  Log.i(TAG,\"onConnected: Is connected to Google Play Services\");\n}\n", "nl": "Google Play Services Lifecycle methods"}
{"code": "public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent,List<Integer> skipIds){\n  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,skipIds);\n}\n", "nl": "Show empty view when there are not data to show"}
{"code": "private Typeface cacheFont(String fontPath){\n  Typeface cached=mTypefaceMap.get(fontPath);\n  if (cached == null) {\n    cached=Typeface.createFromAsset(mAssetManager,fontPath);\n    mTypefaceMap.put(fontPath,cached);\n  }\n  return cached;\n}\n", "nl": "Creates a cached copy of a typeface from the given path"}
{"code": "public static String validateString(String string){\n  if (string == null) {\n    return \"\";\n  }\n else {\n    return string;\n  }\n}\n", "nl": "Checks if the given string is null and if it is, it returns an empty string"}
{"code": "@Override public void onUIRefreshComplete(PtrFrameLayout frame){\n  mDrawable.stop();\n}\n", "nl": "perform UI after refresh"}
{"code": "public static Tailer create(File file,TailerListener listener,long delayMillis){\n  return create(file,listener,delayMillis,false);\n}\n", "nl": "Creates and starts a Tailer for the given file, starting at the beginning of the file"}
{"code": "@Override public String toString(){\n  return \"Entry, x: \" + x + \" y (sum): \"+ getY();\n}\n", "nl": "returns a string representation of the entry containing x-index and value"}
{"code": "public ApplicationException(){\n}\n", "nl": "For Externalizable"}
{"code": "public void deleteRequest(@NonNull Context context,String url,ApiListener apiListener){\n  request(context,Request.Method.DELETE,url,null,apiListener);\n}\n", "nl": "Helper method to make authenticated HTTP requests to LinkedIn REST api using DELETE Method"}
{"code": "public static Executor createTaskDistributor(){\n  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,\"uil-pool-d-\"));\n}\n", "nl": "Creates default implementation of task distributor"}
{"code": "public void clear(){\nsynchronized (contexts) {\n    contexts.clear();\n  }\n}\n", "nl": "Clears the set"}
{"code": "public UsersGetFollowersQuery(VkApiClient client,UserActor actor){\n  super(client,\"users.getFollowers\",GetFollowersResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@VisibleForTesting @Transactional public void markAssetExtractionAsLastSuccessful(Asset asset,AssetExtraction assetExtraction){\n  logger.debug(\"Marking asset extraction as last successful, assetExtractionId: {}\",assetExtraction.getId());\n  asset.setLastSuccessfulAssetExtraction(assetExtraction);\n  assetRepository.save(asset);\n}\n", "nl": "Mark the asset extraction as last successful"}
{"code": "public boolean drain(){\n  return true;\n}\n", "nl": "Waits for all queued audio to be played"}
{"code": "public MediaFormat(){\n  mMap=new HashMap<String,Object>();\n}\n", "nl": "Creates an empty MediaFormat"}
{"code": "public DataColorAction(String group,String dataField,int dataType,String colorField,int[] palette){\n  super(group,colorField);\n  setDataType(dataType);\n  setDataField(dataField);\n  m_palette=palette;\n}\n", "nl": "Create a new DataColorAction"}
{"code": "@Override public void onLocationChanged(Location loc){\n  mCurLocation=loc;\n  LocationService.location=loc;\n  updateUI();\n}\n", "nl": "Called by Play Services when the user's location changes"}
{"code": "public void mouseEntered(MouseEvent e){\n  mIsControlDown=e.isControlDown();\n  mIsShiftDown=e.isShiftDown();\n  mIsAltDown=e.isAltDown();\n}\n", "nl": "Mouse entered handling"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void justSelected(){\n  setCachedExpression(generateExpression());\n  checkSymbolIsValid();\n}\n", "nl": "Method called when the field has been selected from a combo box and may need to be initialised"}
{"code": "@Override public void onComicLoadSuccess(Comic comic){\n  mDetailAdapter.setInfo(comic.getSource(),comic.getCover(),comic.getTitle(),comic.getAuthor(),comic.getIntro(),comic.getFinish(),comic.getUpdate(),comic.getLast());\n  if (comic.getTitle() != null && comic.getCover() != null) {\n    int resId=comic.getFavorite() != null ? R.drawable.ic_favorite_white_24dp : R.drawable.ic_favorite_border_white_24dp;\n    mStarButton.setImageResource(resId);\n    mStarButton.setVisibility(View.VISIBLE);\n  }\n}\n", "nl": "init: load comic -> load chapter -> load download if load download fail, we still show the layout"}
{"code": "public static DiscCacheAware createReserveDiscCache(File cacheDir){\n  File individualDir=new File(cacheDir,\"uil-images\");\n  if (individualDir.exists() || individualDir.mkdir()) {\n    cacheDir=individualDir;\n  }\n  return new TotalSizeLimitedDiscCache(cacheDir,2 * 1024 * 1024);\n}\n", "nl": "Creates reserve disc cache which will be used if primary disc cache becomes unavailable"}
{"code": "public void sendDelayedTimeDeadbandValues(){\n  this.equipmentLogger.trace(\"sendDelayedTimeDeadbandValues - Sending all time deadband delayed values to the server\");\n  for (  SDTTimeDeadbandScheduler tagScheduler : this.sdtTimeDeadbandSchedulers.values()) {\n    if (tagScheduler.isScheduledForSending()) {\n      tagScheduler.run();\n    }\n  }\n}\n", "nl": "Sends all through timedeadband delayed values immediately"}
{"code": "public void signalRewrittenEntry(String uid){\n  if (_reWrittenEntries == null)   _reWrittenEntries=new ConcurrentHashMap<String,String>();\n  _reWrittenEntries.put(uid,uid);\n}\n", "nl": "given a uid, signal the entry as rewritten under the xtn"}
{"code": "public void printMcepMean(){\n  printVectors(mcepMean,mcepVariance);\n}\n", "nl": "Print mean and variance of each state"}
{"code": "protected void drawXAxis(Graphics2D gc){\n}\n", "nl": "draw the x axis"}
{"code": "public FriendsEditListQuery(VkApiClient client,UserActor actor,int listId){\n  super(client,\"friends.editList\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  listId(listId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void onAttack(NpcAI2 npcAI,Creature creature){\n  handleNumericEvent(npcAI,creature,ShoutEventType.ATTACK_K);\n}\n", "nl": "Handle target attacked events"}
{"code": "public static String httpArray2(List<String> classIds){\n  String s=\"\";\n  for (  Object o : classIds) {\n    s=s + o.toString() + \",\";\n  }\n  return s.substring(0,s.length() - 1);\n}\n", "nl": "Concatenate with comma"}
{"code": "public boolean isGreaterThan(GameTime gt){\n  return this.getTime() > gt.getTime();\n}\n", "nl": "Compares this time and the time given"}
{"code": "public String removeUser(String user){\n  ResponseEntity<String> response=restTemplate.exchange(url + RMAControllerMappings.REMOVE_USER_MAPPING + \"userName=\"+ user,HttpMethod.GET,request,String.class);\n  return response.getBody();\n}\n", "nl": "Remove a user"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static MBeanServerConnection createMBeanServerConnection(String jndiURL) throws Exception {\n  JMXServiceURL url=new JMXServiceURL(JMXUtilities.createJMXUrl(jndiURL));\n  JMXConnector jmxc=JMXConnectorFactory.connect(url,null);\n  return jmxc.getMBeanServerConnection();\n}\n", "nl": "create MBean server connection according to certain JNDI URL"}
{"code": "public OrderedDataOutputStream(OutputStream out){\n  super(out);\n  _order=ByteOrder.LITTLE_ENDIAN;\n}\n", "nl": "Default order is Little endian"}
{"code": "public synchronized void cancel(){\n}\n", "nl": "Cancels currently playing audio"}
{"code": "public TimeMetaData(String name,DateTimeZone timeZone){\n  this(name,timeZone,null,null);\n}\n", "nl": "Create a TimeMetaData column with no restriction on the allowable times"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void cancelAllTasks(boolean mayInterruptIfRunning){\n  for (  SingleAsyncTask singleAsyncTask : mSingleAsyncTaskList) {\n    cancelTask(singleAsyncTask,mayInterruptIfRunning);\n  }\n  mSingleAsyncTaskList.clear();\n}\n", "nl": "cancel all singleTask in the scheduler"}
{"code": "public boolean isSetResponseInfo(){\n  return this.responseInfo != null;\n}\n", "nl": "Returns true if field responseInfo is set (has been assigned a value) and false otherwise"}
{"code": "public void deleteSortLocationIfExists() throws CarbonSortKeyAndGroupByException {\n  CarbonDataProcessorUtil.deleteSortLocationIfExists(parameters.getTempFileLocation());\n}\n", "nl": "This method will be used to delete sort temp location is it is exites"}
{"code": "public static StorableLocationFence exiting(double latitude,double longitude,double radius){\n  return new StorableLocationFence(EXIT_TYPE,latitude,longitude,radius,0);\n}\n", "nl": "Creates a storable location fence which will be valid when the user leaves the given region"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set pc1=1 pc2=3;\");\n}\n", "nl": "action to be performed"}
{"code": "private Utils(){\n}\n", "nl": "Making sure public utility methods remain static"}
{"code": "public TelemetryService(AirMapFlight flight){\n  this.flight=flight;\n  connect();\n}\n", "nl": "Initializes service to send Telemetry data"}
{"code": "public UnitFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n", "nl": "Create a unit file reader from the given unit file"}
{"code": "public int numberOfObjects(){\n  return numberOfObjects;\n}\n", "nl": "how many objects are there?"}
{"code": "public static boolean retryInfinitelyBoolean(final Callable<Boolean> callable){\n  return booleanResponseRetryer.retryInfinitely(callable);\n}\n", "nl": "Boolean Response Retryer"}
{"code": "public PhotosGetQuery rev(Boolean value){\n  return unsafeParam(\"rev\",value);\n}\n", "nl": "Return photos in reverse chronological order"}
{"code": "@Override public void runSyncIgnore(String localName,ModelService modelService,Map<String,Object> context) throws GenericServiceException {\n  runSync(localName,modelService,context);\n}\n", "nl": "Run the service synchronously and IGNORE the result"}
{"code": "public void ensureStateIsDraft(Experiment experiment){\n  Experiment.State state=experiment.getState();\n  if (!state.equals(Experiment.State.DRAFT)) {\n    throw new InvalidExperimentStateException(experiment.getID(),Experiment.State.DRAFT,experiment.getState());\n  }\n}\n", "nl": "Checks that an experiment has a state \"draft\" and throws an exception if it doesn't"}
{"code": "public void release(int... keys){\n  for (  int key : keys) {\n    release(key);\n  }\n}\n", "nl": "Release a series of key"}
{"code": "@Override public String toString(){\n  return gson.toJson(this);\n}\n", "nl": "JSON representation of the EsSupervisionEvent"}
{"code": "protected void onBindFooterViewHolder(RecyclerView.ViewHolder holder,int position){\n}\n", "nl": "Override this method to update your footers"}
{"code": "public static void drawCircledText(Graphics2D g,String text,int x,int y){\n  drawCircledText(g,sSmallFont,text,x,y);\n}\n", "nl": "Utility function to draw a circle text centered at coordinates (x, y)"}
{"code": "public boolean isApplicable(){\n  RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();\n  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void unsetPeak(){\n  peak=Integer.MIN_VALUE;\n  repaint();\n}\n", "nl": "Cleans the peak mark Will repaint the component"}
{"code": "public MarketAddToAlbumQuery addToAlbum(UserActor actor,int ownerId,int itemId,List<Integer> albumIds){\n  return new MarketAddToAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);\n}\n", "nl": "Adds an item to one or multiple collections"}
{"code": "public QuestRewardCursor queryQuestRewardItem(long id){\n  return mHelper.queryQuestRewardItem(id);\n}\n", "nl": "QUEST REWARD QUERIES"}
{"code": "public Transition<A> dup(){\n  INDArray[] dupObservation=dup(observation);\n  INDArray nextObs=nextObservation.dup();\n  return new Transition<>(dupObservation,action,reward,isTerminal,nextObs);\n}\n", "nl": "Duplicate this transition"}
{"code": "private void calcStackSize(List<BarEntry> yVals){\n  for (int i=0; i < yVals.size(); i++) {\n    float[] vals=yVals.get(i).getYVals();\n    if (vals != null && vals.length > mStackSize)     mStackSize=vals.length;\n  }\n}\n", "nl": "calculates the maximum stacksize that occurs in the Entries array of this DataSet"}
{"code": "public DatabaseConfFrame(){\n  initComponents();\n}\n", "nl": "Creates new form DatabaseConfFrame"}
{"code": "private static boolean validateNewSize(int level){\n  return !(level < MIN_EXPAND || level > MAX_EXPAND);\n}\n", "nl": "Checks if new player cube is not max"}
{"code": "@deprecated public VariableField(String string,boolean strict){\n  this.canonicalIndex=DateTimePatternGenerator.getCanonicalIndex(string,strict);\n  if (this.canonicalIndex < 0) {\n    throw new IllegalArgumentException(\"Illegal datetime field:\\t\" + string);\n  }\n  this.string=string;\n}\n", "nl": "/*     "}
{"code": "public void addChangingListener(OnWheelChangedListener listener){\n  changingListeners.add(listener);\n}\n", "nl": "Adds wheel changing listener"}
{"code": "public DocumentNGramGaussNormSymWinGraph(){\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "Selfie build(){\n  return new Selfie(format,path,quality);\n}\n", "nl": "Build a Selfie with all the parameters"}
{"code": "public static String dateToString(Date date,SimpleDateFormat dateFormat){\n  return dateFormat.format(date);\n}\n", "nl": "Create a formatted date with specific date format"}
{"code": "public static Bitmap normalize(Context context,Uri selectedImage){\n  return normalize(context,selectedImage,MAX_BITMAP_WIDTH,MAX_BITMAP_HEIGHT);\n}\n", "nl": "Normalize a bitmap to 640px"}
{"code": "public Array2DRowFieldMatrix(final Field<T> field){\n  super(field);\n}\n", "nl": "Creates a matrix with no data"}
{"code": "protected void ensureTX() throws IllegalStateException {\n  if (m_acknowledgeMode != Session.SESSION_TRANSACTED) {\n    throw new IllegalStateException(\"Forbidden call on a non transacted session.\");\n  }\n}\n", "nl": "Verifies that the session is under TX"}
{"code": "public CART(Node rootNode,FeatureDefinition featDef){\n  super(rootNode,featDef);\n}\n", "nl": "Build a new cart with the given node as the root node"}
{"code": "public static byte writeBool(boolean b){\n  if (b) {\n    return 0x01;\n  }\n else {\n    return 0x00;\n  }\n}\n", "nl": "Writes a signed boolean as a byte"}
{"code": "public static void exitSafeRegion(boolean token){\n  sEnabled=token;\n}\n", "nl": "Exits a code region where the sandbox was not needed"}
{"code": "public void addAll(ContextSet contextSet){\n  if (contextSet == null) {\n    throw new NullPointerException(\"contextSet\");\n  }\nsynchronized (this.contexts) {\n    this.contexts.addAll(contextSet.toSet());\n  }\n}\n", "nl": "Adds of of the values in another ContextSet to this set"}
{"code": "public boolean isApplicable(){\n  megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();\n  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getSelectedFiles().size() > 1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private String id(Var instance){\n  return instance.admin().getId().get();\n}\n", "nl": "Returns the id of a Var"}
{"code": "public FriendsGetMutualQuery targetUids(Integer... value){\n  return unsafeParam(\"target_uids\",value);\n}\n", "nl": "Set target uids"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public final void warn(final Object o,final Throwable t){\n  log(Level.WARN,o,t);\n}\n", "nl": "This method logs the WARNING message"}
{"code": "public UtilsResolveScreenNameQuery(VkApiClient client,UserActor actor,String screenName){\n  super(client,\"utils.resolveScreenName\",DomainResolved.class);\n  accessToken(actor.getAccessToken());\n  screenName(screenName);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void unsetInitializer(){\n  _threadId.set(null);\n}\n", "nl": "Unset current thread as space initializer"}
{"code": "@NotNull public static ResizePolicy scaled(){\n  return ourScaled;\n}\n", "nl": "Returns a resize policy allowing scaled / aspect-ratio preserving resizing only"}
{"code": "public DatabaseGetSchoolsQuery(VkApiClient client,int cityId){\n  super(client,\"database.getSchools\",GetSchoolsResponse.class);\n  cityId(cityId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static boolean isValidNamespace(String namespaceCandidate){\n  return NAMESPACE_PATTERN.matcher(namespaceCandidate).matches();\n}\n", "nl": "When a image name part can be ambiguously either host or namespace, check which one it is based on a regex of valid characters for the namespace part"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "private boolean references(QueryTableData dest){\n  QueryTableData source=this;\n  while (source != null) {\n    if (source.equals(dest))     return true;\n    source=source.getJoinTable();\n  }\n  return false;\n}\n", "nl": "returns true is this table references given dest table"}
{"code": "public void initialiseDoubleValues(int size){\n  if (size < 1) {\n    throw new IllegalArgumentException(\"Invalid array size\");\n  }\n  doubleValues=new double[size];\n}\n", "nl": "Method to initialise double array"}
{"code": "public static GridData createHVFillGridData(){\n  return createHVFillGridData(1);\n}\n", "nl": "Grid data"}
{"code": "public void bind(Activity activity){\n  List<IBinding> bindings=getViewBinder(activity).bind(activity);\n  Set<IBinding> _bindings=getBindings(activity.getClass());\n  _bindings.addAll(bindings);\n}\n", "nl": "Api Methods"}
{"code": "public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){\n  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,skipIds);\n}\n", "nl": "Show error view with a button when something goes wrong and prompting the user to try again"}
{"code": "public static boolean isConfigured(){\n  return ds != null;\n}\n", "nl": "test is configured"}
{"code": "private static String format(double value){\n  return String.format(\"%s%s\",SCALE_PREFIX,NumberFormat.getIntegerInstance().format((int)value));\n}\n", "nl": "Format a map scale into a string"}
{"code": "public static String formatQuantity(int quantity){\n  return formatQuantity((double)quantity);\n}\n", "nl": "Formats an int representing a quantity into a string"}
{"code": "public void collapse(TreePath[] paths){\n  for (  TreePath path : paths) {\n    this.collapse((DefaultMutableTreeNode)path.getLastPathComponent());\n  }\n}\n", "nl": "collapse an array of paths"}
{"code": "public boolean hasRegion(){\n  return qualifier.getRegion() != null && !FAKE_VALUE.equals(qualifier.getRegion());\n}\n", "nl": "Returns true if this locale specifies a specific region"}
{"code": "public Authentication(String mobile){\n  this.mobile=mobile;\n}\n", "nl": "Used for update mobile"}
{"code": "public boolean isCompleteQuest(int questId){\n  QuestState qs=getQuestStateList().getQuestState(questId);\n  if (qs == null) {\n    return false;\n  }\n  return qs.getStatus() == QuestStatus.COMPLETE;\n}\n", "nl": "Quest completion"}
{"code": "public AppsSendRequestQuery name(String value){\n  return unsafeParam(\"name\",value);\n}\n", "nl": "Set name"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public UsersGetFollowersQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){\n  super(client,\"users.getFollowers\",GetFollowersFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean checkRace(Race playerRace){\n  ItemTemplate template=DataManager.ITEM_DATA.getItemTemplate(id);\n  return template.getRace() == Race.PC_ALL && (race == null || race == playerRace) || template.getRace() != Race.PC_ALL && template.getRace() == playerRace;\n}\n", "nl": "Method is used to check item race; Some items having PC_ALL really are not for both races, like some foods and weapons"}
{"code": "public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n", "nl": "Adds wheel scrolling listener"}
{"code": "public void clearBasicAuth(){\n  this.httpClient.getCredentialsProvider().clear();\n}\n", "nl": "Removes set basic auth credentials"}
{"code": "public byte[] download_file1(String file_id,long file_offset,long download_bytes) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return null;\n  }\n  return this.download_file(parts[0],parts[1],file_offset,download_bytes);\n}\n", "nl": "download file from storage server"}
{"code": "public void clear(){\n  _entryInfos.clear();\n}\n", "nl": "Clear the the table"}
{"code": "protected MarketGetByIdQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return additional fields"}
{"code": "public boolean isApplicable(){\n  ChartViewer viewer=(ChartViewer)getViewer();\n  return (viewer.isSeriesTabSelected() && viewer.getChartData().getChartSelection().getSelectedSeries().size() > 0) || (!viewer.isSeriesTabSelected() && viewer.getChartData().getChartSelection().getSelectedClasses().size() > 0);\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public GraphSimilarity(){\n  this.ValueSimilarity=0.0;\n  this.ContainmentSimilarity=0.0;\n  this.SizeSimilarity=0.0;\n}\n", "nl": "Creates a new instance of GraphSimilarity"}
{"code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "private static boolean isHandoff(AndroidFirstRunPersistentData persistentData){\n  if (InstallerData.exists()) {\n    if (!persistentData.isSdkUpToDate() || !persistentData.isSameTimestamp(InstallerData.get().getTimestamp())) {\n      return InstallerData.get().isCurrentVersion();\n    }\n  }\n  return false;\n}\n", "nl": "return true if the handoff data was updated since the last time wizard ran"}
{"code": "public AccountSetInfoQuery value(String value){\n  return unsafeParam(\"value\",value);\n}\n", "nl": "Set value"}
{"code": "public ComponentCursor queryComponentCreated(long id){\n  return mHelper.queryComponentCreated(id);\n}\n", "nl": "COMPONENT QUERIES"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "public synchronized static void removeLuaState(int idx){\n  states.add(idx,null);\n}\n", "nl": "removes the luaState from the states list"}
{"code": "public static Configuration createSubEquipmentDataTag(Long parentId){\n  Configuration configuration=new Configuration();\n  DataTag dataTag=DataTag.create(\"DATA_INI_TEST\",Integer.class,new DataTagAddress()).subEquipmentId(parentId).id(1000L).build();\n  configuration.addEntity(dataTag);\n  return configuration;\n}\n", "nl": "DataTag id: 1000"}
{"code": "public static void log(int severity,String message,Throwable e){\n  log(new Status(severity,PLUGIN_ID,0,message,e));\n}\n", "nl": "Log the given exception along with the provided message and severity indicator"}
{"code": "public ArenaQuestCursor queryArenaQuests(){\n  return mHelper.queryArenaQuests();\n}\n", "nl": "ARENA QUESTS QUERIES"}
{"code": "public static String shortName(Class<? extends Model> model){\n  if (model == null || home == null) {\n    return X.EMPTY;\n  }\n  return home._shortName(model);\n}\n", "nl": "return the shortname of the class, cut the prefix by module package"}
{"code": "protected AudioGetByIdQuery audios(String... value){\n  return unsafeParam(\"audios\",value);\n}\n", "nl": "Audio file IDs, in the following format: {owner_id}_{audio_id}"}
{"code": "public void addProcessIds(final Collection<Long> processIds){\n  for (  Long processId : processIds) {\n    addProcessId(processId);\n  }\n}\n", "nl": "Adds all process id's of that list as dependency to this tag"}
{"code": "private boolean isValidComponentName(String name){\n  if (name.isEmpty())   return false;\n  if (name.equals(\"true\") || name.equals(\"false\"))   return false;\n  if (Character.isDigit(name.charAt(0)))   return false;\n  if (name.startsWith(\".\"))   return true;\n  return false;\n}\n", "nl": "Checks if the specified name is a valid Android component name"}
{"code": "@Override public void notifyOnOperationComplete(){\n  scheduleBackgroundRead();\n}\n", "nl": "Triggered when the background activity completes an operation"}
{"code": "public EulerAngle(double x,double y,double z){\n  this.x=x;\n  this.y=y;\n  this.z=z;\n}\n", "nl": "Creates a EularAngle with each axis set to the passed angle in radians"}
{"code": "public GenericValue findByPrimaryKey(GenericPK primaryKey) throws GenericEntityException {\n  if (primaryKey == null) {\n    return null;\n  }\n  GenericValue genericValue=GenericValue.create(primaryKey);\n  genericDAO.select(genericValue);\n  return genericValue;\n}\n", "nl": "Find a Generic Entity by its Primary Key"}
{"code": "public static void error(Object message,Throwable exception){\n  Gdx.app.error(TAG,String.valueOf(message),exception);\n}\n", "nl": "Logs an error message to the console or logcat"}
{"code": "@Override public void onWindowFocusChanged(boolean hasFocus){\n  super.onWindowFocusChanged(hasFocus);\n  if (hasFocus && immersiveMode) {\n    final int uiOptions=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n    getWindow().getDecorView().setSystemUiVisibility(uiOptions);\n  }\n}\n", "nl": "Called when view focus is changed"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static void disableTrafficAlerts(){\n  getAirMapTrafficService().disconnect();\n  getAirMapTrafficService().removeAllListeners();\n}\n", "nl": "Disconnects from Traffic Alerts"}
{"code": "public static ExpectedCondition<Boolean> elementNotPresentOrVisible(final By bySelector){\n  return null;\n}\n", "nl": "Check if element is neither present nor visible"}
{"code": "public FriendsGetQueryWithFields(VkApiClient client,List<UserField> fields){\n  super(client,\"friends.get\",GetFieldsResponse.class);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public RecurrenceInfo(GenericValue info) throws RecurrenceInfoException {\n  this.info=info;\n  if (!info.getEntityName().equals(\"RecurrenceInfo\"))   throw new RecurrenceInfoException(\"Invalid RecurrenceInfo Value object.\");\n  init();\n}\n", "nl": "Creates new RecurrenceInfo"}
{"code": "public AccountGetProfileInfoQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getProfileInfo\",UserSettings.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void actionPerformed(ActionEvent ev){\n  final ClusterViewer viewer=getViewer();\n  int max=viewer.getPcoaTab().getPCoA().getLoadingVectorsBiPlot().size();\n  int number=Math.min(max,viewer.getPcoaTab().getBiplotSize());\n  String result=JOptionPane.showInputDialog(viewer.getFrame(),\"Number of biplot vectors (0-\" + max + \"): \",number);\n  if (result != null && Basic.isInteger(result))   executeImmediately(\"set biplotSize=\" + Basic.parseInt(result) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public void add(double d){\n  data.add((float)d);\n}\n", "nl": "Adds the given double to this column, after casting it to a float"}
{"code": "public FeatureSetImpl(){\n  featureMap=new LinkedHashMap();\n}\n", "nl": "Creates a new empty feature set"}
{"code": "public GroupsBanUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.banUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addLanguage(String languageId){\n  query.append(\" +languageId:\" + languageId);\n}\n", "nl": "Adds a language limit to the query"}
{"code": "private void close(){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   supportFinishAfterTransition();\n else   finish();\n}\n", "nl": "Close current activity correctly"}
{"code": "@OnClick({R.id.primary1,R.id.primary2,R.id.primary3,R.id.primary4,R.id.primary5,R.id.primary6}) void onPrimaryColorClicked(View view){\n  Button btn=(Button)view;\n  int tintColor=btn.getBackgroundTintList().getDefaultColor();\n  Scoop.getInstance().update(Toppings.PRIMARY,tintColor);\n}\n", "nl": "Listener Methods"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  SearchManager searchManager=((IViewerWithFindToolBar)getViewer()).getSearchManager();\n  if (searchManager != null)   searchManager.applyFindNext();\n}\n", "nl": "action to be performed"}
{"code": "@Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){\n  return cacheOnDisk(cacheOnDisk);\n}\n", "nl": "Sets whether loaded image will be cached on disk"}
{"code": "public Scoop bind(Object obj,int toppingId,View view){\n  return bind(obj,toppingId,view,null);\n}\n", "nl": "Bind a view to a topping on a given object"}
{"code": "public static File renameFile(File file,String newName){\n  String absolutePath=file.getAbsolutePath();\n  String fileName=file.getName();\n  String newAbsolutePath=absolutePath.substring(0,absolutePath.lastIndexOf(fileName)) + newName;\n  return new File(newAbsolutePath);\n}\n", "nl": "Change the name of the file"}
{"code": "@Override public boolean isEnabled(){\n  return false;\n}\n", "nl": "Flag to test if this Authenticator is enabled"}
{"code": "public static int dpToPx(float dp){\n  return Math.round(dp * getDensity());\n}\n", "nl": "Converts a dp value to a px value"}
{"code": "public static void e(String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.e(TAG,buildMsg(msg),e);\n  }\n}\n", "nl": "error log"}
{"code": "public void initialiseLongValues(int size){\n  if (size < 1) {\n    throw new IllegalArgumentException(\"Invalid array size\");\n  }\n  longValues=new long[size];\n}\n", "nl": "Method to initialise long array"}
{"code": "public AggregateConfig(String[] configs) throws ConfigurationException {\n  specific=ConfigurationProvider.getInstance(configs);\n}\n", "nl": "Create an AggregateConfig"}
{"code": "public static UInteger uint(String value) throws NumberFormatException {\n  return value == null ? null : UInteger.valueOf(value);\n}\n", "nl": "Create an <code>unsigned int</code>"}
{"code": "public void close(){\n  connectionPool.freeConnection(cpeer);\n}\n", "nl": "Release the CPeer when called on un register from the Selector"}
{"code": "public XSNamedMap4Types(String namespace,SymbolHash map,short type){\n  super(namespace,map);\n  fType=type;\n}\n", "nl": "Construct an XSNamedMap implementation for one namespace"}
{"code": "private static void sendNotModified(ChannelHandlerContext ctx){\n  FullHttpResponse response=new DefaultFullHttpResponse(HTTP_1_1,NOT_MODIFIED);\n  setDateHeader(response);\n  ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n}\n", "nl": "When file timestamp is the same as what the browser is sending up, send a \"304 Not Modified\""}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && !viewer.getPcoaTab().isIs3dMode();\n}\n", "nl": "this is currently selected?"}
{"code": "@Override public int nodeSize(){\n  return listOfKeys.size();\n}\n", "nl": "to get the number of keys tuples present in the block"}
{"code": "public FriendsGetAvailableForCallQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){\n  super(client,\"friends.getAvailableForCall\",GetAvailableForCallFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Contexts allowAll(){\n  return new Contexts(ContextSet.empty(),true,true,true,true,true,true);\n}\n", "nl": "Gets a context that will allow all nodes"}
{"code": "public Matrix timesEquals(double s){\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      A[i][j]=s * A[i][j];\n    }\n  }\n  return this;\n}\n", "nl": "Multiply a matrix by a scalar in place, A = s*A"}
{"code": "public AppsGetCatalogQuery(VkApiClient client,int count){\n  super(client,\"apps.getCatalog\",GetCatalogResponse.class);\n  count(count);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@deprecated public CompactCharArray(char defaultValue){\n}\n", "nl": "/*    "}
{"code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,LoginActivity.class);\n  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n  _context.startActivity(intent);\n}\n", "nl": "Allows to start this activity"}
{"code": "public static <T extends FieldElement<T>>void assertEquals(T[] m,T[] n){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors not same length\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(m[i],n[i]);\n  }\n}\n", "nl": "verifies that two arrays are equal"}
{"code": "public PhotosGetByIdQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return additional fields"}
{"code": "public static int dayNumber(Timestamp stamp){\n  Calendar tempCal=toCalendar(stamp,TimeZone.getDefault(),Locale.getDefault());\n  return tempCal.get(Calendar.DAY_OF_WEEK);\n}\n", "nl": "returns a day number in a week for a Timestamp input"}
{"code": "public boolean isApplicable(){\n  final CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null && viewer.getMode() == Comparer.COMPARISON_MODE.RELATIVE;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isUrl(String url){\n  Pattern pattern=Pattern.compile(\"^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\\\/])+$\");\n  return pattern.matcher(url).matches();\n}\n", "nl": "is url"}
{"code": "public X509TrustManager removeDelegate(Object key){\n  return delegates.remove(key);\n}\n", "nl": "Remove a previously added delegate"}
{"code": "public void unlockUserInput(){\n  locked=false;\n  tabbedPane.setEnabled(true);\n  setCursor(Cursor.getDefaultCursor());\n  getCommandManager().setEnableCritical(true);\n  getCommandManager().updateEnableState();\n}\n", "nl": "ask view to allow user input"}
{"code": "private String createOutputFileName(String outputFileTemplate,int classId,String className,int numberOfIds){\n  String outputFile=null;\n  if (outputFileTemplate.contains(\"%d\"))   outputFile=outputFileTemplate.replaceAll(\"%d\",\"\" + classId);\n  if (outputFileTemplate.contains(\"%s\"))   outputFile=(outputFile == null ? outputFileTemplate : outputFile).replaceAll(\"%s\",Basic.toCleanName(className));\n  if (outputFile == null && numberOfIds > 1)   outputFile=Basic.replaceFileSuffix(outputFileTemplate,\"-\" + classId + \".fasta\");\n  if (outputFile == null)   outputFile=outputFileTemplate;\n  return outputFile;\n}\n", "nl": "create the output file name"}
{"code": "public void showOverlappingContainer(){\n  mFrameLayoutOverlappingViewContainer.setVisibility(VISIBLE);\n}\n", "nl": "Show overlapping container"}
{"code": "protected VideoRemoveFromAlbumQuery videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n", "nl": "Set video id"}
{"code": "public void visitPhpMethod(Method method){\n  this.inspectCallable(method);\n}\n", "nl": "re-dispatch to inspector"}
{"code": "public static synchronized void removeAccountOnLS(Account account){\n  accountsOnLS.remove(account.getId());\n}\n", "nl": "Removes account from list of connections"}
{"code": "public RedGradient(int maxCount){\n  this.maxCount=maxCount;\n  factor=maxCount / Math.log(maxCount);\n}\n", "nl": "setup the green gradient"}
{"code": "protected WallGetQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return \"wall\", \"profiles\", and \"groups\" fields"}
{"code": "WeakRef(Remote impl){\n  super(impl,queue);\n}\n", "nl": "Create an instance registered with queue"}
{"code": "public static boolean isNimbusGTKTheme(){\n  return UIUtils.isNimbusGTKTheme();\n}\n", "nl": "Determines if current L&F is GTK using Nimbus theme"}
{"code": "public Webster(int port,String roots) throws BindException {\n  this.port=port;\n  initialize(roots);\n}\n", "nl": "Create a new Webster"}
{"code": "public boolean isApplicable(){\n  ChartViewer chartViewer=(ChartViewer)getViewer();\n  return chartViewer.getChartDrawer() != null && chartViewer.getChartDrawer().canShowXAxis();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static int calculateHate(Creature creature,int value){\n  Stat2 stat=new AdditionStat(StatEnum.BOOST_HATE,value,creature,0.1f);\n  return (int)(creature.getGameStats().getStat(StatEnum.BOOST_HATE,stat).getCurrent());\n}\n", "nl": "Hate based on BOOST_HATE stat Now used only from skills, probably need to use for regular attack"}
{"code": "public boolean isOp(){\n  return this.op;\n}\n", "nl": "Gets if OP defaults should be included"}
{"code": "public static void v(Class<?> clazz,String msg){\n  if (isDebug) {\n    Log.v(clazz.getSimpleName(),msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public Math_Vector cpy(){\n  return new Math_Vector(x,y);\n}\n", "nl": "copy the Math_Vector"}
{"code": "public void writeToFile(String fileName) throws IOException {\n  FileWriter fw=new FileWriter(fileName);\n  fw.append(this.toString());\n  fw.close();\n}\n", "nl": "write TextGrid to text file which can be used by Praat"}
{"code": "@Override public void startStreamingConsumption(long timeout){\n  jssc.start();\n  if (timeout < 0)   jssc.awaitTermination();\n else   jssc.awaitTermination(timeout);\n}\n", "nl": "Starts the streaming consumption"}
{"code": "public CatchOptions maxPokeballs(int maxPokeballs){\n  if (maxPokeballs <= 1)   maxPokeballs=-1;\n  this.maxPokeballs=maxPokeballs;\n  return this;\n}\n", "nl": "Set a maximum number of pokeballs"}
{"code": "public UsersGetSubscriptionsQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"users.getSubscriptions\",GetSubscriptionsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isRefreshEnabled(){\n  return mRefreshEnabled;\n}\n", "nl": "is refresh function is enabled"}
{"code": "public SearchGetHintsQuery(VkApiClient client,UserActor actor){\n  super(client,\"search.getHints\",Utils.buildParametrizedType(List.class,Hint.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void main(String[] args) throws IOException {\n  ParseSinaXmlData parser=new ParseSinaXmlData();\n  parser.buildRawText(\"res/sina_data/alldata.txt\",\"res/sina_data/SinaRawText.txt\");\n}\n", "nl": "<p>Title:main</p> <p>Description:<p>"}
{"code": "public static String removeNumeric(String str){\n  return removeRegex(str,\"[\\\\d]\");\n}\n", "nl": "Removes all numbers from str"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private static boolean validateNewSize(int level){\n  return !(level < MIN_EXPAND || level > MAX_EXPAND);\n}\n", "nl": "Checks if new player cube is not max"}
{"code": "@Override public void onLoadContentProgress(int loadPercent){\n}\n", "nl": "Return progress of load content from cloud"}
{"code": "public void removePendingFifoSearchObject(boolean disableInitialSearch){\n  _pendingFifoSearch=null;\n  if (disableInitialSearch)   resetInitialFifoSearchActive();\n}\n", "nl": "remove the pending search object & if requested disable initial search indicator NOTE- should be done when template is locked"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public LayoutTest(){\n  initComponents();\n}\n", "nl": "Creates new form LayoutTest"}
{"code": "public static Drawable tintDrawable(@Nullable Drawable drawable,@ColorInt int color){\n  if (drawable != null) {\n    drawable.setColorFilter(color,PorterDuff.Mode.SRC_IN);\n  }\n  return drawable;\n}\n", "nl": "Tints a drawable with the provided color"}
{"code": "public Crop withAspect(int x,int y){\n  cropIntent.putExtra(Extra.ASPECT_X,x);\n  cropIntent.putExtra(Extra.ASPECT_Y,y);\n  return this;\n}\n", "nl": "Set fixed aspect ratio for crop area"}
{"code": "public void exitFullScreen(){\n  View decorView=mContext.getWindow().getDecorView();\n  showSystemUI(decorView);\n  for (  View view : views) {\n    view.setVisibility(View.VISIBLE);\n    view.invalidate();\n  }\n}\n", "nl": "call this method to exit full screen"}
{"code": "public InputMapping(){\n  initComponents();\n}\n", "nl": "Creates new form InputMapping"}
{"code": "public boolean canZoomInMoreX(){\n  return (mScaleX < mMaxScaleX);\n}\n", "nl": "Returns true if the chart is not yet fully zoomed in on the x-axis"}
{"code": "@Override public void onStreamCreated(PublisherKit publisherKit,Stream stream){\n  sendEvent(Events.EVENT_PUBLISH_START,Arguments.createMap());\n}\n", "nl": "Publisher listener"}
{"code": "@deprecated public TimeZone parse(Style style,String text,ParsePosition pos,Output<TimeType> timeType){\n  return parse(style,text,pos,this._parseAllStyles,timeType);\n}\n", "nl": "/*     "}
{"code": "public void addAnimation(Animation animation){\n  if (mAnimations.contains(animation)) {\n    return;\n  }\n  mAnimations.add(animation);\n  animation.start();\n}\n", "nl": "Add an animation to the choreographer and starts it immediately"}
{"code": "public BufferedReadOnlyIterator(StorageReadOnlyIterator<T> externalIterator){\n  this._externalIterator=externalIterator;\n}\n", "nl": "Create an iterator which stars iterating over the packets which reside in external storage"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public VocalizationUnitFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n", "nl": "Create a unit file reader from the given unit file"}
{"code": "private static boolean checkLearnIsPossible(Player player,PlayerSkillList playerSkillList,SkillLearnTemplate template){\n  if (playerSkillList.isSkillPresent(template.getSkillId()))   return true;\n  if (player.havePermission(MembershipConfig.STIGMA_AUTOLEARN) && template.isStigma())   return true;\n  if (template.isAutolearn())   return true;\n  return false;\n}\n", "nl": "Check SKILL_AUTOLEARN property Check skill already learned Check skill template auto-learn attribute"}
{"code": "private void tryScrollBackToTopAfterComplete(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "public JsonParser(Charset charset){\n  this(new DefaultJsonFeeder(charset));\n}\n", "nl": "Constructs a JSON parser"}
{"code": "public DatabaseGetUniversitiesQuery(VkApiClient client){\n  super(client,\"database.getUniversities\",GetUniversitiesResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public FriendsGetRequestsQueryWithExtended out(Boolean value){\n  return unsafeParam(\"out\",value);\n}\n", "nl": "true - to return outgoing requests false - to return incoming requests (default)"}
{"code": "private static boolean inAppended(String[] names){\n  for (int i=0; i < names.length; i++) {\n    if (!theAppended.contains(names[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "checks if all <code>names</code> elements are in <code>theAppended</code>"}
{"code": "public void addFootView(View view,int footerHeight){\n  addFootView(view,footerHeight,false);\n}\n", "nl": "add footer view with the footer height"}
{"code": "protected boolean isUnauthenticated(ClientHttpResponse clientHttpResponse) throws IOException {\n  return (clientHttpResponse.getStatusCode().equals(HttpStatus.FOUND) && clientHttpResponse.getHeaders().getLocation().getPath().equals(\"/login\")) || (clientHttpResponse.getStatusCode().equals(HttpStatus.UNAUTHORIZED));\n}\n", "nl": "Checks if the response status is unauthenticated"}
{"code": "public Builder takeFirstColumns(String... columns){\n  return add(ReduceOp.TakeFirst,columns);\n}\n", "nl": "Reduce the specified columns by taking the first value"}
{"code": "public boolean needsHighlight(int xIndex,int dataSetIndex){\n  if (!valuesToHighlight() || dataSetIndex < 0)   return false;\n  for (int i=0; i < mIndicesToHighlight.length; i++)   if (mIndicesToHighlight[i].getXIndex() == xIndex && mIndicesToHighlight[i].getDataSetIndex() == dataSetIndex)   return true;\n  return false;\n}\n", "nl": "checks if the given index in the given DataSet is set for highlighting or not"}
{"code": "public void collapseSelectedNodes(){\n  for (Node v=getSelectedNodes().getFirstElement(); v != null; v=getSelectedNodes().getNextElement(v)) {\n    getCollapsedIds().add((Integer)v.getInfo());\n  }\n  updateTree();\n}\n", "nl": "collapse  all selected  nodes"}
{"code": "public void startFirstSampleTimer(){\n  firstSound=true;\n  timer.start(\"AudioFirstSound\");\n}\n", "nl": "Starts the first sample timer"}
{"code": "public Jim2Mov(ImageProvider ip,MovieInfoProvider mip,FrameSavedListener listener){\n  this(ip,mip);\n  addFrameSavedListener(listener);\n}\n", "nl": "Creates a new instance of Jim2Mov"}
{"code": "public GameTime minus(GameTime gt){\n  return new GameTime(this.getTime() - gt.getTime());\n}\n", "nl": "Subtract the given game time from this game time"}
{"code": "public AdsGetCategoriesQuery(VkApiClient client,UserActor actor){\n  super(client,\"ads.getCategories\",Utils.buildParametrizedType(List.class,Category.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean exists(Bson query,Class<? extends Bean> t) throws Exception {\n  String collection=getCollection(t);\n  if (collection != null) {\n    return exists(collection,query);\n  }\n  throw new Exception(\"the Class<\" + t.getName() + \"> doest annotated by @DBMapping()!\");\n}\n", "nl": "test whether the query is exists in"}
{"code": "private static boolean haveChecked(String category,String name,boolean createWithProject){\n  String key=getCheckKey(category,name,createWithProject);\n  return ourTemplatesChecked.contains(key);\n}\n", "nl": "Checks whether we've already checked the given template in a new project or existing project context"}
{"code": "public static <T>Set<T> stringToSet(String val,Class<T> type){\n  String[] tokens=trim(val).split(\",\");\n  return Arrays.stream(tokens).map(null).collect(Collectors.toSet());\n}\n", "nl": "Converts comma separated string to Set"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.GOODALL_NORMALIZED + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public void processPackets(Player player,List<DataPacket> packets){\n  if (packets.isEmpty())   return;\n  List<Byte> filter=new ArrayList<>();\n  for (  DataPacket packet : packets) {\n    player.handleDataPacket(packet);\n  }\n}\n", "nl": "Process packets obtained from batch packets Required to perform additional analyses and filter unnecessary packets"}
{"code": "public void add(Map.Entry<String,String> entry){\n  if (entry == null) {\n    throw new NullPointerException(\"context\");\n  }\nsynchronized (contexts) {\n    contexts.add(Maps.immutableEntry(entry.getKey(),entry.getValue()));\n  }\n}\n", "nl": "Adds a new key value pair to the set"}
{"code": "public boolean isEmpty(){\nsynchronized (contexts) {\n    return contexts.isEmpty();\n  }\n}\n", "nl": "Check if the set is empty"}
{"code": "public static void debugLongInfo(String str){\n  debugLongInfo(\"zhibo\",str);\n}\n", "nl": "author  hhj TODO"}
{"code": "public void addReceiver(AXmlNode node){\n  if (receivers.isEmpty())   receivers=new ArrayList<AXmlNode>();\n  receivers.add(node);\n}\n", "nl": "Adds a new receiver to the manifest"}
{"code": "public void centerHorizontally(ConstraintWidget widget){\n  ConstraintAnchor left=getClosestHorizontalWidgetAnchor(widget,true);\n  ConstraintAnchor right=getClosestHorizontalWidgetAnchor(widget,false);\n  widget.connect(widget.getAnchor(ConstraintAnchor.Type.LEFT),left,0);\n  widget.connect(widget.getAnchor(ConstraintAnchor.Type.RIGHT),right,0);\n}\n", "nl": "center the given widget horizontally"}
{"code": "public IntIterator childEdgeRows(int node){\n  return super.outEdgeRows(node);\n}\n", "nl": "Get an iterator over the edge ids for edges connecting child nodes to a given parent"}
{"code": "public AirMapStatusAdvisory(){\n}\n", "nl": "Initialize an AirMapStatusAdvisory with default values"}
{"code": "public boolean isInvisible(){\n  return invisible;\n}\n", "nl": "return the visibility"}
{"code": "public void execute(MinecraftServer server,ICommandSender sender,String[] args) throws CommandException {\n  EntityPlayerMP entityplayermp=args.length == 0 ? getCommandSenderAsPlayer(sender) : getPlayer(server,sender,args[0]);\n  NBTTagCompound nbttagcompound=null;\n  CyberwareAPI.getCapability(entityplayermp).resetWare(entityplayermp);\n  CyberwareAPI.updateData(entityplayermp);\n  notifyCommandListener(sender,this,\"cyberware.commands.clearCyberware.success\",new Object[]{entityplayermp.getName()});\n}\n", "nl": "Callback for when the command is executed"}
{"code": "private boolean preUsageCheck(){\n  Conditions skillConditions=skillTemplate.getUseconditions();\n  return skillConditions != null ? skillConditions.validate(this) : true;\n}\n", "nl": "Check all conditions before using skill"}
{"code": "public FaveGetPostsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return additional \"wall\", \"profiles\", and \"groups\" fields false - (default)"}
{"code": "public VideoEditAlbumQuery(VkApiClient client,UserActor actor,int albumId,String title){\n  super(client,\"video.editAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public FriendsSearchQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public static int randomNumberBetween(double begin,double end){\n  if (begin > end)   throw new IllegalArgumentException(\"Begin must not be less than end\");\n  return (int)begin + (int)(Math.random() * ((end - begin) + 1));\n}\n", "nl": "Generates a random integer between the specified numbers"}
{"code": "synchronized public void terminate(){\n  if (_isTerminated)   return;\n  _isTerminated=true;\n  if (_electManager != null)   _electManager.terminate();\n  _namingService.terminate();\n  _primarySpaceModeListeners.clear();\n}\n", "nl": "terminate the PrimarySpaceSelector"}
{"code": "private boolean isIllegalIndex(int i){\n  return i < curStartIndex || i >= curEndIndex;\n}\n", "nl": "whether the index is illegal"}
{"code": "public DoubleElemValPair(String name,char kind,double val){\n  super(name,kind);\n  this.val=new DoubleCP(val);\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "@Override public void close() throws IOException {\n  if (null != dictionaryThriftWriter && dictionaryThriftWriter.isOpen()) {\n    writeDictionaryFile();\n    closeThriftWriter();\n  }\n}\n", "nl": "write dictionary metadata file and close thrift object"}
{"code": "public VideoSearchQueryWithExtended shorter(Integer value){\n  return unsafeParam(\"shorter\",value);\n}\n", "nl": "Set shorter"}
{"code": "public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){\n  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));\n  if (headers != null)   request.setHeaders(headers);\n  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);\n}\n", "nl": "Perform a HTTP HEAD request and track the Android Context which initiated the request with customized headers"}
{"code": "private void sendQueryResult(String result){\n  Iterable<String> splitResult=Splitter.fixedLength(QUERY_CHUNK_SIZE).split(result + \"\\n\");\n  for (  String resultChunk : splitResult) {\n    sendJson(Json.object(ACTION,ACTION_QUERY,QUERY_RESULT,resultChunk));\n  }\n}\n", "nl": "Send a single query result back to the client"}
{"code": "public static Executor createTaskDistributor(){\n  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,\"uil-pool-d-\"));\n}\n", "nl": "Creates default implementation of task distributor"}
{"code": "public Boolean hasNodeProperty(String nodePath,String propertyName) throws RepositoryException {\n  LOG.debug(\"Checking if node '{}' has property '{}'\",nodePath,propertyName);\n  session.refresh(true);\n  return session.getNode(nodePath).hasProperty(propertyName);\n}\n", "nl": "Checks if node has specified property"}
{"code": "private void addToClassToSourceMap(String className,String sourceName){\n  if (classToSourceMap == null) {\n    classToSourceMap=new HashMap<String,String>();\n  }\n  classToSourceMap.put(className,sourceName);\n}\n", "nl": "ClassToSourceMap is for classes whos names don't match the source file name - ex: multiple top level classes in a single file"}
{"code": "public boolean isAllow(){\n  return message == null;\n}\n", "nl": "A check to be used as method reference"}
{"code": "public void discard(){\n  hars.clear();\n}\n", "nl": "discard (clear) all the traffic logs collected so far"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public AdsGetVideoUploadURLQuery(VkApiClient client,UserActor actor){\n  super(client,\"ads.getVideoUploadURL\",String.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public synchronized void initScriptsFramework(String framework){\n  Message msg=mJSHandler.obtainMessage();\n  msg.obj=framework;\n  msg.what=WXJSBridgeMsgType.INIT_FRAMEWORK;\n  msg.setTarget(mJSHandler);\n  msg.sendToTarget();\n}\n", "nl": "Initialize JavaScript framework"}
{"code": "private void startWaveNorthernShieldGenerator2(){\n  sp(284838,174.50981f,251.38982f,292.43088f,(byte)0,1000,\"NorthernShieldGenerator1\");\n  sp(284839,174.9973f,254.4739f,292.3325f,(byte)0,1000,\"NorthernShieldGenerator2\");\n  sp(284840,174.84029f,257.80832f,292.4389f,(byte)0,1000,\"NorthernShieldGenerator3\");\n}\n", "nl": "Northern Shield Generator"}
{"code": "public boolean isIgnore(){\n  return false;\n}\n", "nl": "get the ignore status"}
{"code": "public EventDescriptor(){\n}\n", "nl": "Construct an EventDescriptor with attributes set to null"}
{"code": "public static Bitmap decodeSampledBitmapFromFilePath(String filePath,int reqWidth,int reqHeight){\n  final BitmapFactory.Options options=new BitmapFactory.Options();\n  options.inJustDecodeBounds=true;\n  BitmapFactory.decodeFile(filePath,options);\n  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);\n  options.inJustDecodeBounds=false;\n  return BitmapFactory.decodeFile(filePath,options);\n}\n", "nl": "Decode a given image file with the specified dimensions"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "public static float calculateAngleFrom(VisibleObject obj1,VisibleObject obj2){\n  return calculateAngleFrom(obj1.getX(),obj1.getY(),obj2.getX(),obj2.getY());\n}\n", "nl": "Get an angle between the line defined by two objects and the horizontal axis"}
{"code": "public CM_PRIVATE_STORE_NAME(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_PRIVATE_STORE </tt> packet"}
{"code": "public WallEditQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public PhotosGetMarketUploadServerQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"photos.getMarketUploadServer\",GetMarketUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AggregateConfig(String[] configs,ClassLoader loader) throws ConfigurationException {\n  specific=ConfigurationProvider.getInstance(configs,loader);\n}\n", "nl": "Create an AggregateConfig"}
{"code": "private void startWaveEasternShieldGenerator1(){\n  sp(233720,252.68709f,333.483f,325.59268f,(byte)90,1000,\"EasternShieldGenerator1\");\n  sp(233721,255.74022f,333.2762f,325.49332f,(byte)90,1000,\"EasternShieldGenerator2\");\n  sp(233881,258.72256f,333.27713f,325.58722f,(byte)90,6000,\"EasternShieldGenerator3\");\n}\n", "nl": "* Eastern Shield Generator Periodic Spawn  *"}
{"code": "public void zoomToFit(){\n  if (is3dMode) {\n    getTransformation3D().identity();\n    updateTransform(is3dMode);\n  }\n  graphView.fitGraphToWindow();\n}\n", "nl": "zoom to fit"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set showLabels=\");\n  boolean showLabels=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.setShowLabels(showLabels);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public final boolean isAlternatingNightMode(){\n  return (myAlternate & CFG_NIGHT_MODE) != 0;\n}\n", "nl": "Returns true if the night mode is alternated"}
{"code": "private void notifyUpdated(List<AirMapTraffic> updated){\n  if (updated == null || updated.isEmpty()) {\n    return;\n  }\n  for (  AirMapTrafficListener listener : listeners) {\n    listener.onUpdateTraffic(updated);\n  }\n}\n", "nl": "Notify the listeners that traffic has been updated"}
{"code": "@Override public void read(PacketBuffer buf){\n  types.forEach(null);\n}\n", "nl": "Reads this packet from the given buffer"}
{"code": "public TextSpectralSpellPreprocessor(String sArgs){\n  tWords=null;\n  hFoundWords=new Hashtable();\n  sWordMapSem=new Semaphore(1);\n  Args=sArgs.split(\" \");\n}\n", "nl": "Creates a new instance of TextSpectralSpellPreprocessor"}
{"code": "protected void writeString(String s) throws IOException {\n  for (int i=0; i < s.length(); i++) {\n    out.write((byte)s.charAt(i));\n  }\n}\n", "nl": "Writes string to output stream"}
{"code": "public static boolean isVideo(File file){\n  Uri selectedUri=Uri.fromFile(file);\n  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString().toLowerCase());\n  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);\n  return (mimeType != null && mimeType.startsWith(\"video/\"));\n}\n", "nl": "Checks if file passed is a video"}
{"code": "public QuestStateList(){\n  _quests=new TreeMap<Integer,QuestState>();\n}\n", "nl": "Creates an empty quests list"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void writeThriftObject(TBase dictionaryThriftObject) throws IOException {\n  dictionaryThriftWriter.write(dictionaryThriftObject);\n}\n", "nl": "This method will write the thrift object to a file"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "protected void notifyChangingListeners(int oldValue,int newValue){\n  for (  OnWheelChangedListener listener : changingListeners) {\n    listener.onChanged(this,oldValue,newValue);\n  }\n}\n", "nl": "Notifies changing listeners"}
{"code": "public CompoundResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static void e(String msg){\n  if (LOG_ENABLE) {\n    Log.e(TAG,buildMsg(msg));\n  }\n}\n", "nl": "error log"}
{"code": "public static CommandResult execCommand(String[] commands,boolean isRoot,String path){\n  return execCommand(commands,isRoot,true,path);\n}\n", "nl": "execute shell commands, default return result msg"}
{"code": "@ObjectiveCName(\"init:name:correlationId:\") RpcResponse(IConnection connection,String name,String correlationId){\n  this.connection=connection;\n  this.name=name;\n  this.correlationId=correlationId;\n  this.isAcknowledged=false;\n  this.isComplete=false;\n  this.ack();\n}\n", "nl": "This object provides a number of methods that allow a rpc provider to respond to a request"}
{"code": "public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){\n  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));\n}\n", "nl": "Creates new AsyncHttpClient using given params"}
{"code": "private void editConflictsInternal(IFile resource,IFile conflictOldFile,IFile conflictWorkingFile,IFile conflictNewFile) throws InvocationTargetException, InterruptedException {\n  CompareConfiguration cc=new CompareConfiguration();\n  ConflictsCompareInput fInput=new ConflictsCompareInput(cc);\n  fInput.setResources(conflictOldFile,conflictWorkingFile,conflictNewFile,(IFile)resource);\n  CompareUI.openCompareEditorOnPage(fInput,getTargetPage());\n}\n", "nl": "edit the conflicts using built-in merger"}
{"code": "public static String xor(String key,String input){\n  StringBuilder output=new StringBuilder();\n  for (int i=0; i < input.length(); i++) {\n    output.append((char)(input.charAt(i) ^ key.charAt(i % key.length())));\n  }\n  return output.toString();\n}\n", "nl": "Simple XOR encryption"}
{"code": "public boolean isSingleAuthenticator(){\n  Debug.logInfo(this.getClass().getName() + \" Authenticator isSingleAuthenticator()\",module);\n  return false;\n}\n", "nl": "Is this expected to be the only authenticator, if so errors will be thrown when users cannot be found"}
{"code": "public DatabaseGetCountriesByIdQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getCountriesById\",Utils.buildParametrizedType(List.class,Country.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private String checkIfValueIsNotEmpty(Host hostWithTwitterSettings,String fieldVarName){\n  String tempValue=hostWithTwitterSettings.getStringProperty(fieldVarName);\n  if (tempValue == null || tempValue.isEmpty()) {\n    throw new NullPointerException(\"The value of field '\" + fieldVarName + \"' is not filled in the Host\");\n  }\n  return tempValue;\n}\n", "nl": "Check if Twitter configuration field is filled, if not there will be a NullPointerException"}
{"code": "public MonsterToArenaCursor queryMonsterToArenaMonster(long id){\n  return mHelper.queryMonsterToArenaMonster(id);\n}\n", "nl": "MONSTER TO ARENA QUERIES"}
{"code": "private List<ColumnDictionaryChunk> readDictionaryFile(long dictionaryStartOffset,int dictionaryChunkCountToBeRead) throws IOException {\n  List<ColumnDictionaryChunk> dictionaryChunks=new ArrayList<ColumnDictionaryChunk>(dictionaryChunkCountToBeRead);\n  dictionaryFileReader.setReadOffset(dictionaryStartOffset);\n  while (dictionaryFileReader.hasNext() && dictionaryChunks.size() != dictionaryChunkCountToBeRead) {\n    dictionaryChunks.add((ColumnDictionaryChunk)dictionaryFileReader.read());\n  }\n  return dictionaryChunks;\n}\n", "nl": "This method will read the dictionary file and return the list of dictionary thrift object"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0,0,1};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public WebLink(String key){\n  this(BundleSupport.getLabel(key),BundleSupport.getURL(key),true);\n}\n", "nl": "Creates a new instance of WebLink"}
{"code": "public void addAssociation(int node){\n  addAssociation(node,0);\n}\n", "nl": "Adds an association node"}
{"code": "public UnknownDependencyException(final String message){\n  super(message);\n}\n", "nl": "Constructs a new UnknownDependencyException with the given message"}
{"code": "public static int sumFromTo(int iStart,int iEnd){\n  int iRes=0;\n  for (int iCnt=iStart; iCnt <= iEnd; iRes+=iCnt++)   ;\n  return iRes;\n}\n", "nl": "Returns the sum of a sequence of numbers in a specified range"}
{"code": "public void doDrop(Player player){\n}\n", "nl": "Perform drop operation"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getPCoA() != null && viewer.getPcoaTab().getPCoA().getNumberOfPositiveEigenValues() > 3 && !(viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && viewer.getPcoaTab().getThirdPC() == 2) && viewer.getPcoaTab().isIs3dMode();\n}\n", "nl": "this is currently selected?"}
{"code": "public void loading(){\n}\n", "nl": "loading status"}
{"code": "public void putSingleString(Activity activity,String key,String string) throws ClassNotFoundException {\n  HashMap<String,String> hashMap=receiveHashMap(activity);\n  hashMap.put(key,string);\n  pushHashMap(activity,hashMap);\n}\n", "nl": "Put Methods"}
{"code": "public PhotosGetWallUploadServerQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getWallUploadServer\",PhotoUpload.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void layout(int width,int height){\n  int itemsWidth=width - 2 * PADDING;\n  itemsLayout.layout(0,0,itemsWidth,height);\n}\n", "nl": "Sets layouts width and height"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_NOTICE(String value0,long i){\n  return new SM_SYSTEM_MESSAGE(1400019,value0,i,2);\n}\n", "nl": "Legion Message: %0 %DATETIME1"}
{"code": "protected soot.Local generateLocal(polyglot.types.Type polyglotType){\n  soot.Type type=Util.getSootType(polyglotType);\n  return lg.generateLocal(type);\n}\n", "nl": "Extra Local Variables Generation"}
{"code": "public double det(){\n  return new LUDecomposition(this).det();\n}\n", "nl": "Matrix determinant"}
{"code": "private boolean isConnectivityLayoutOverridden(){\n  verifyOverrideRulesForConnectivity();\n  return mConnectedLayout != 0 && mDisconnectedLayout != 0;\n}\n", "nl": "check if the connectivity view was overridden by a custom view via xml or programmatically"}
{"code": "@Override public void fatalError(SAXParseException exception){\n  errorCount++;\n  fatalCount++;\n  if (showErrors && (errorCount + warningCount < maxMessages)) {\n    message(\"Fatal error\",exception);\n  }\n}\n", "nl": "SAX2 API"}
{"code": "public static DateTimeUnit fromJdkDate(Date date){\n  return fromJodaDateTime(new DateTime(date.getTime()),true);\n}\n", "nl": "Converts from JDK Date to DateUnit"}
{"code": "private void registerDefaultMacros(){\n  macros=new HashMap<>();\n  registerMacro(\"noescp\",new NoescpMacro());\n  registerMacro(\"int\",new IntMacro());\n  registerMacro(\"double\",new DoubleMacro());\n  registerMacro(\"equals\",new EqualsMacro());\n}\n", "nl": "Register the default macros that can be used by the visitor"}
{"code": "private void initRefreshData(){\n  for (int i=0; i < 1; i++) {\n    List<String> url=new ArrayList<>();\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114606_1.jpg\");\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_6.jpg\");\n    mLists.add(url);\n  }\n}\n", "nl": "init refrsh data"}
{"code": "public void sendMail(MailDetailsBean mDetails) throws MailSenderException {\n  createConnection(mDetails.getServer());\n  createMessage(mDetails);\n  setTransportForm();\n}\n", "nl": "It sends the email using the information provided by the MailDetailsBean object"}
{"code": "public static String unescape(String s){\n  try {\n    return URLDecoder.decode(s,\"UTF-8\");\n  }\n catch (  Exception e) {\n    return s;\n  }\n}\n", "nl": "unescape UTF8/URL encoded strings"}
{"code": "private JMXServiceURLFactory(){\n}\n", "nl": "Don't let anyone instantiate this class"}
{"code": "public InfoflowResults analyzeAPKFile(String fileName) throws IOException, XmlPullParserException {\n  return analyzeAPKFile(fileName,false,true,false);\n}\n", "nl": "Analyzes the given APK file for data flows"}
{"code": "private void clearMessages(){\n  animationHandler.removeMessages(MESSAGE_SCROLL);\n  animationHandler.removeMessages(MESSAGE_JUSTIFY);\n}\n", "nl": "Clears messages from queue"}
{"code": "void autocomplete(Json json){\n  queryExecutor.submit(null);\n}\n", "nl": "Find autocomplete results and send them to the client"}
{"code": "public static StatisticLevel toLevel(String sArg,Level defaultLevel){\n  return STATISTIC;\n}\n", "nl": "Returns custom level for debug type log message"}
{"code": "private void validateUpdateColumns() throws SQLException {\n  for (  UpdateColumn column : _updatedColumns) {\n    column.createColumnData(this);\n    if (column.isSelfIncremented())     column.validateSelfIncrementedColumnName(this);\n  }\n}\n", "nl": "Validates INSERT query's update columns"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public TapTarget icon(Drawable icon){\n  return icon(icon,false);\n}\n", "nl": "Specify the icon that will be drawn in the center of the target bounds"}
{"code": "public static void writeNullablePbsEntryPacketObjectArray(PbsOutputStream output,Object[] objects){\n  if (objects != null) {\n    output.writeInt(objects.length);\n    for (    Object entry : objects)     writeNullablePbsEntryPacket(output,(PbsEntryPacket)entry);\n  }\n else   output.writeInt(-1);\n}\n", "nl": "Write an object array of nullable pbs entries to the stream"}
{"code": "public boolean isLoading(){\n  return state == State.LOADING;\n}\n", "nl": "Check if loading state is shown"}
{"code": "public AppsGetCatalogQuery sort(AppsGetCatalogSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public void normalize(){\n  normalizeTo(1.0);\n}\n", "nl": "Normalizes the values of the distribution to the range [0,1]"}
{"code": "public FriendsGetSuggestionsQuery filter(FriendsGetSuggestionsFilter... value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Types of potential friends to return"}
{"code": "public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){\n  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;\n  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;\n  return this;\n}\n", "nl": "Sets options for memory cache"}
{"code": "private void initInjector(){\n  appComponent=DaggerAppComponent.builder().networkModule(new NetworkModule(this)).dataModule(new DataModule(this)).build();\n}\n", "nl": "Initialise the injector and create the app graph"}
{"code": "public Gpos(PartOfSpeech pos){\n  this.pos=pos;\n}\n", "nl": "Creates a GPOS with the given part-of-speech table"}
{"code": "public static String formatQuantity(Float quantity){\n  if (quantity == null)   return \"\";\n else   return formatQuantity(quantity.doubleValue());\n}\n", "nl": "Formats a Float representing a quantity into a string"}
{"code": "public TapTarget titleTextColor(@ColorRes int color){\n  this.titleTextColor=color;\n  return this;\n}\n", "nl": "Specify the color resource for the title text"}
{"code": "public static boolean checkRootPermission(){\n  return execCommand(\"echo root\",true,false).result == 0;\n}\n", "nl": "check whether has root permission"}
{"code": "public JavaClipAudioPlayer(){\n  debug=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.debug\");\n  drainDelay=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.drainDelay\",150L).longValue();\n  openFailDelayMs=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.openFailDelayMs\",0).longValue();\n  totalOpenFailDelayMs=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.totalOpenFailDelayMs\",0).longValue();\n  audioMetrics=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.showAudioMetrics\");\n  setPaused(false);\n}\n", "nl": "Constructs a default JavaClipAudioPlayer"}
{"code": "public void removeCycles(){\n  if (myHorizontalCycle != null) {\n    removeCycles(myHorizontalDeps);\n  }\n  if (myVerticalCycle != null) {\n    removeCycles(myVerticalDeps);\n  }\n}\n", "nl": "Breaks any cycles detected by the handler"}
{"code": "public NormalizerAdapter(){\n}\n", "nl": "Creates a new instance of NormalizerAdapter"}
{"code": "@Override public void addExhaustion(float exhaustion){\n  super.addExhaustion(exhaustion * EntityPlayerExt.getArmorExhaustionModifier(player));\n}\n", "nl": "Adds input to foodExhaustionLevel to a max of 40"}
{"code": "public WidgetsGetPagesQuery(VkApiClient client){\n  super(client,\"widgets.getPages\",GetPagesResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected MarketGetAlbumByIdQuery albumIds(int... value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Collections identifiers to obtain data from"}
{"code": "@Override public Scan open(){\n  Scan s=p1.open();\n  TableScan ts=(TableScan)tp2.open();\n  Index idx=ii.open(tx);\n  return new IndexJoinScan(s,idx,joinField,ts);\n}\n", "nl": "Opens an indexjoin scan for this query"}
{"code": "public MessagesMarkAsReadQuery peerId(String value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id"}
{"code": "public void initialize(int[] data){\n  if (data == null) {\n    throw new IllegalArgumentException(\" Data Array is NUll\");\n  }\n  this.data=data;\n}\n", "nl": "This method is used to initialize data array"}
{"code": "public boolean hasNext() throws IOException {\n  return thriftReader.hasNext();\n}\n", "nl": "check if any more object is present"}
{"code": "public boolean isTypeAllowed(@NotNull ResourceType type){\n  return isTypeAllowed(type.getName());\n}\n", "nl": "Returns true if this resource type constraint allows a type of the given name"}
{"code": "final public void remove(String name){\n  if (context != null) {\n    context.remove(name);\n  }\n}\n", "nl": "remove the name from the model"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static int extractHighUnsignedNibble(int value){\n  return (value & 0xF0) >>> 4;\n}\n", "nl": "Extracts the high unsigned 4-bit nibble from the least significant byte of the given value"}
{"code": "public static boolean isSystemApplication(Context context){\n  if (context == null) {\n    return false;\n  }\n  return isSystemApplication(context,context.getPackageName());\n}\n", "nl": "whether context is system application"}
{"code": "@Override public String generateToken(PlatformUser user){\n  Claims claims=Jwts.claims().setSubject(user.getUsername());\n  claims.put(DEVICE_ID,user.getDeviceId());\n  claims.put(PLATFORM,user.getPlatform());\n  claims.put(ROLE,user.getRole());\n  claims.put(LOGIN_TIME,user.getLoginTime());\n  return Jwts.builder().setClaims(claims).signWith(SignatureAlgorithm.HS512,secret).compact();\n}\n", "nl": "Generate json web token from platform user object"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "@deprecated public static boolean isJavaLetterOrDigit(int cp){\n  return isJavaIdentifierPart(cp);\n}\n", "nl": "/*     "}
{"code": "protected List<Match> findClosest(Segment draggedEdge,List<Segment> edges){\n  List<Match> closest=new ArrayList<Match>();\n  addClosest(draggedEdge,edges,closest);\n  return closest;\n}\n", "nl": "Finds the closest matching segments among the given list of edges for the given dragged edge, and returns these as a list of matches"}
{"code": "public PhotosGetByIdQueryWithExtended(VkApiClient client,List<String> photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,PhotoFull.class));\n  photos(photos);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static double distFrom(double lat1,double lng1,double lat2,double lng2){\n  double earthRadius=6371000;\n  double lat=Math.toRadians(lat2 - lat1);\n  double lng=Math.toRadians(lng2 - lng1);\n  double haversine=Math.sin(lat / 2) * Math.sin(lat / 2) + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.sin(lng / 2)* Math.sin(lng / 2);\n  return earthRadius * (2 * Math.atan2(Math.sqrt(haversine),Math.sqrt(1 - haversine)));\n}\n", "nl": "Dist between coordinates"}
{"code": "public NewsfeedUnsubscribeQuery(VkApiClient client,UserActor actor,NewsfeedItemType type,int itemId){\n  super(client,\"newsfeed.unsubscribe\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void recordPageEnd(){\n  TcStatSdk.getInstance(context).recordPageEnd();\n}\n", "nl": "record Page End"}
{"code": "public boolean isOk(){\n  return ok;\n}\n", "nl": "did the user select apply?"}
{"code": "private void writeDataTofile(Object[][] recordHolderList,int entryCountLocal,File file) throws CarbonSortKeyAndGroupByException {\n  if (parameters.isSortFileCompressionEnabled() || parameters.isPrefetch()) {\n    writeSortTempFile(recordHolderList,entryCountLocal,file);\n    return;\n  }\n  writeData(recordHolderList,entryCountLocal,file);\n}\n", "nl": "Below method will be used to write data to file"}
{"code": "public AudioMoveToAlbumQuery(VkApiClient client,UserActor actor,List<Integer> audioIds){\n  super(client,\"audio.moveToAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioIds(audioIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void checkPolygon(List<Coordinate> geometry,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean weather,Date date,AirMapCallback<AirMapStatus> listener){\n  String url=statusPolygonUrl;\n  Map<String,String> params=AirMapStatus.getAsParams(takeOffPoint,types,ignoredTypes,weather,date);\n  params.put(\"geometry\",\"POLYGON(\" + makeGeoString(geometry) + \")\");\n  AirMap.getClient().get(url,params,new GenericOkHttpCallback(listener,AirMapStatus.class));\n}\n", "nl": "Get a flight status based on a flight within a polygon"}
{"code": "public void rightClick() throws InterruptedException {\n  click(InputEvent.BUTTON3_MASK);\n}\n", "nl": "Right click mouse with default delay"}
{"code": "public static Column std(DataFrame dataFrame,String columnName){\n  return functions.sqrt(var(dataFrame,columnName));\n}\n", "nl": "Standard deviation for a column"}
{"code": "public void changePermissions(Legion legion,short deputyPermission,short centurionPermission,short legionarPermission,short volunteerPermission){\n  if (legion.setLegionPermissions(deputyPermission,centurionPermission,legionarPermission,volunteerPermission)) {\n    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x02,legion));\n  }\n}\n", "nl": "This method will handle the changement of permissions"}
{"code": "public void unRegister(Object listener){\n  eventBus.unregister(listener);\n  Logs.info(\"un register an listener({})\",listener);\n}\n", "nl": "Unregister the listener"}
{"code": "public VideoSaveQuery repeat(Boolean value){\n  return unsafeParam(\"repeat\",value);\n}\n", "nl": "Repeat the playback of the video"}
{"code": "public AudioSearchQuery performerOnly(Boolean value){\n  return unsafeParam(\"performer_only\",value);\n}\n", "nl": "Search only by artist name"}
{"code": "public static void updatePilot(AirMapPilot pilot,AirMapCallback<AirMapPilot> listener){\n  String url=String.format(pilotByIdUrl,pilot.getPilotId());\n  AirMap.getClient().patch(url,pilot.getAsParams(),new GenericOkHttpCallback(listener,AirMapPilot.class));\n}\n", "nl": "Update the user's profile"}
{"code": "private void updateScreenNumber(@Nullable DesignSurface surface){\n  if (surface != null) {\n    myXScreenNumber=!surface.isStackVertically() && surface.getScreenMode() == BOTH ? 2 : 1;\n    myYScreenNumber=surface.isStackVertically() && surface.getScreenMode() == BOTH ? 2 : 1;\n  }\n}\n", "nl": "Update the number of screen displayed in X and Y axis"}
{"code": "public void xtnLockEntryOnTemplateOperation(Context context,IEntryHolder eh,ITemplateHolder th,XtnEntry alreadyLockedXtn){\n  if (th.getXidOriginated() != alreadyLockedXtn && th.getXidOriginated() != null)   th.getXidOriginated().lock();\n}\n", "nl": "/** given an entry + template- perform the xtn locks and set the appropriate"}
{"code": "public void collapse(TreePath[] paths){\n  for (  TreePath path : paths) {\n    collapse((DefaultMutableTreeNode)path.getLastPathComponent());\n  }\n}\n", "nl": "collapse an array of paths"}
{"code": "public boolean isContent(){\n  return state == State.CONTENT;\n}\n", "nl": "Check if content is shown"}
{"code": "private void onException(Exception e){\n  if (e instanceof IllegalArgumentException) {\n  }\n else {\n  }\n  finishedTasks++;\n}\n", "nl": "Handles exception on ping"}
{"code": "private static void markChecked(String category,String name,boolean createWithProject){\n  String key=getCheckKey(category,name,createWithProject);\n  ourTemplatesChecked.add(key);\n}\n", "nl": "Marks that we've already checked the given template in a new project or existing project context"}
{"code": "public boolean routeExists(String to){\n  RoutesMap routesMap=forwardTable.get(to);\n  if (routesMap == null) {\n    return false;\n  }\n  return (routesMap.size() > 0);\n}\n", "nl": "Checks if we have at least one route to the target"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_ACQUIRE_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300613,value0);\n}\n", "nl": "Quest acquired: %0"}
{"code": "public void sendCatchMeClickedInitNumber(){\n  for (int i=0; i < roomClients.size(); i++)   if (roomClients.get(i).getsEnteredRoom().equals(getsRoomName())) {\n    roomClients.get(i).setnCatchmePlayCount(getnCatchmePlayCount());\n    roomClients.get(i).sendPacket(Settings._ANSWER_CATCHME_INIT_PLAY_CLICKED_NUMBER + \"\",roomClients.get(i).getnCatchmePlayCount() + \"\");\n  }\n}\n", "nl": "if CatchMe Game Start, this method is called by game room's manager and the manager have game token and item set number"}
{"code": "public boolean isDrawBarShadowEnabled(){\n  return mDrawBarShadow;\n}\n", "nl": "returns true if drawing shadows (maxvalue) for each bar is enabled, false if not"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void updateKey(byte[] blowfishKey){\n  this.blowfishKey=blowfishKey;\n  System.arraycopy(SBOX_INIT_0,0,sBoxes[0],0,256);\n  System.arraycopy(SBOX_INIT_1,0,sBoxes[1],0,256);\n  System.arraycopy(SBOX_INIT_2,0,sBoxes[2],0,256);\n  System.arraycopy(SBOX_INIT_3,0,sBoxes[3],0,256);\n  initArrays();\n}\n", "nl": "Update current blowfish key with the new one and reinitialize the P-array and S-boxes"}
{"code": "public static boolean needRecalculate(String returnAdjustmentTypeId){\n  return \"RET_PROMOTION_ADJ\".equals(returnAdjustmentTypeId) || \"RET_DISCOUNT_ADJ\".equals(returnAdjustmentTypeId) || \"RET_SALES_TAX_ADJ\".equals(returnAdjustmentTypeId);\n}\n", "nl": "These return adjustment types need to be recalculated when the return item is updated"}
{"code": "public Single<AuthResult> createUserWithEmailAndPassword(final String _email,final String _password){\n  return observeSingleValue(firebaseAuth.createUserWithEmailAndPassword(_email,_password));\n}\n", "nl": "Allows to _create_ a user with a given email address and password"}
{"code": "private void showEmpty(){\n  progressBar.setVisibility(View.GONE);\n  recyclerView.setVisibility(View.GONE);\n  emptyTextView.setVisibility(View.VISIBLE);\n}\n", "nl": "Show empty data"}
{"code": "public static UByte valueOf(long value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(value));\n}\n", "nl": "Get an instance of an <code>unsigned byte</code>"}
{"code": "private void inflateConnectedTextColor(){\n  if (mConnectedTextColor != R.color.connectivity_color) {\n    connectivityText.setTextColor(ColorUtil.getColorWrapper(mContext,mConnectedTextColor));\n  }\n}\n", "nl": "Set the connectivity text color when phone is connected"}
{"code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  super.destroyView();\n}\n", "nl": "ask view to destroy itself"}
{"code": "public void close(){\n  getDiskCache().close();\n}\n", "nl": "Close the disk cache used for storing Bitmaps"}
{"code": "public void drawLabel(Node v,boolean selected){\n  viewer.getNV(v).drawLabel(gc,viewer.trans,viewer.getFont(),selected);\n  if (selected)   hiliteLabel(v,(NodeData)v.getData());\n}\n", "nl": "draw the label of the node"}
{"code": "private static boolean isMatch(String left,String right){\n  left=null != left ? left : \"\";\n  right=null != right ? right : \"\";\n  return StringUtils.getJaroWinklerDistance(left,right) > 0.85;\n}\n", "nl": "Really simple fuzzy match using JaroWinklerDistance"}
{"code": "public void remove(String key){\n  internalMap.remove(key);\n}\n", "nl": "Remove the value with the supplied key"}
{"code": "private Collection<Var> migrateAsEntity(SQLTable currentTable){\n  Var type=var().isa(\"entity-type\").id(currentTable.getEntityType());\n  return Lists.newArrayList(type);\n}\n", "nl": "Migrate a table as an entity type"}
{"code": "public void removeAllGraphModelListeners(){\n  m_listeners.clear();\n}\n", "nl": "Removes all listeners on this graph"}
{"code": "public Matrix solve(Matrix B){\n  return (m == n ? (new LUDecomposition(this)).solve(B) : (new QRDecomposition(this)).solve(B));\n}\n", "nl": "Solve A*X = B"}
{"code": "public static void i(String msg){\n  if (LOG_ENABLE) {\n    Log.i(TAG,buildMsg(msg));\n  }\n}\n", "nl": "info log"}
{"code": "public UsersGetSubscriptionsQueryWithExtended fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public boolean isApplicable(){\n  RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();\n  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getSelectedFiles().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void addStrut(JComponent b,boolean horiz,int size){\n  if (size < 1)   return;\n  b.add(horiz ? Box.createHorizontalStrut(size) : Box.createVerticalStrut(size));\n}\n", "nl": "Add a strut, or rigid spacing, to a UI component"}
{"code": "private void hanning(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double factor=twoPI / (size - 1.0d);\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=0.5 * (1 - Math.cos(factor * i));\n}\n", "nl": "Fill an array with the values of a standard Hanning window function"}
{"code": "public static boolean equalOverShorterOfBoth(byte[] a,byte[] b){\n  int top=Math.min(a.length,b.length);\n  for (int i=0; i < top; i++) {\n    if (a[i] != b[i])     return false;\n  }\n  return true;\n}\n", "nl": "determines whether two byte arrays are equalOverShorterOfBoth over the whole minimum of their two lengths"}
{"code": "public void writeDouble(double a) throws IOException {\n  byteBuffer.putDouble(0,a);\n  byteBuffer.rewind();\n  byteBuffer.get(bytes,0,8);\n  swap(bytes,8);\n  outs.write(bytes,0,8);\n}\n", "nl": "read double, little endian"}
{"code": "public void leftClick(int x,int y,int delay) throws InterruptedException {\n  move(x,y);\n  click(InputEvent.BUTTON1_MASK,delay);\n}\n", "nl": "Left click mouse at a point with specified delay"}
{"code": "public static int calculatevCenterServerCount(int vmconcurrentcount,int vcvmlimit){\n  Float f=((float)vmconcurrentcount / (float)vcvmlimit);\n  f=(float)Math.ceil(f);\n  final int i=f.intValue();\n  return i;\n}\n", "nl": "Calculate number of vCenter servers"}
{"code": "public void onRetry(){\n}\n", "nl": "Fired when a retry occurs, override to handle in your own code"}
{"code": "public void toAll(List<EntityPlayerMP> players){\n  PacketWrapper packet=new PacketWrapper(channel,new Packet(this));\n  players.stream().map(null).forEach(null);\n}\n", "nl": "Sends this packet to all the players in the given list"}
{"code": "private static boolean haveChecked(File templateFile,boolean createWithProject){\n  return haveChecked(templateFile.getParentFile().getName(),templateFile.getName(),createWithProject);\n}\n", "nl": "Checks whether we've already checked the given template in a new project or existing project context"}
{"code": "public static String upperCaseFirst(String input){\n  if (input.charAt(0) >= 'a' && input.charAt(0) <= 'z') {\n    return (\"\" + input.charAt(0)).toUpperCase() + input.substring(1);\n  }\n else {\n    return input;\n  }\n}\n", "nl": "Capitalize the first character of the string if possible"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.000756494565517,0.0109109752919,0.0303377878006,0.0637967988952,0.128289492005,0.000756494565517,0.0109109752919,0.0303377878006,0.0637967988952,0.128289492005};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public CM_QUIT(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_QUIT </tt> packet"}
{"code": "private void handleInitializerBlocks(soot.SootMethod sootMethod){\n  ArrayList<Block> initializerBlocks=((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).getInitializerBlocks();\n  if (initializerBlocks != null) {\n    handleStaticBlocks(initializerBlocks);\n  }\n}\n", "nl": "init blocks get created within init methods in Jimple"}
{"code": "private boolean isDictionaryMetaFileModified(CarbonFile carbonFile,long fileTimeStamp,long endOffset){\n  return carbonFile.isFileModified(fileTimeStamp,endOffset);\n}\n", "nl": "This method will validate dictionary metadata file for any modification"}
{"code": "public static boolean isInSphere(final VisibleObject obj,final float centerX,final float centerY,final float centerZ,final float radius){\n  float dx=(obj.getX() - centerX);\n  float dy=(obj.getY() - centerY);\n  float dz=(obj.getZ() - centerZ);\n  return dx * dx + dy * dy + dz * dz < radius * radius;\n}\n", "nl": "Check Coordinate with formula: \" sqrt((x-x0)^2 + (y-y0)^2 + (z-z0)^2) < radius \""}
{"code": "public void notifyDataSetChanged(){\n  internalAdapter.notifyDataSetChanged();\n}\n", "nl": "Transfer to the internal adapter"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public MessagesSendQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.send\",Integer.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Map<String,Object> conditionFalseService(DispatchContext dctx,Map<String,?> context){\n  Map<String,Object> result=ServiceUtil.returnSuccess();\n  result.put(\"conditionReply\",Boolean.FALSE);\n  return result;\n}\n", "nl": "Return FALSE Service; ECA Condition Service"}
{"code": "public RemoteVideoInfo(RemoteVideoInfo other){\n  this(other.title,other.durationMillis,other.state,other.currentTimeMillis,other.errorMessage);\n}\n", "nl": "Copy a remote video info"}
{"code": "private void tryScrollBackToTopAbortRefresh(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "protected OCUpload(Parcel source){\n  readFromParcel(source);\n}\n", "nl": "Reconstruct from parcel"}
{"code": "private void resolveCaptures(){\n  Set<String> captures=new HashSet<>();\n  getVarSet().forEach(null);\n  captures.forEach(null);\n}\n", "nl": "finds captured variable occurrences in a query and replaces them with fresh variables"}
{"code": "@deprecated protected int writeValueAndFinal(int i,boolean isFinal){\n}\n", "nl": "/*    "}
{"code": "protected void notifyDataInvalidatedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onInvalidated();\n    }\n  }\n}\n", "nl": "Notifies observers about invalidating data"}
{"code": "public PlacesAddQuery(VkApiClient client,UserActor actor,String title,float latitude,float longitude){\n  super(client,\"places.add\",AddResponse.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n  latitude(latitude);\n  longitude(longitude);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected Object entryInitialFlow(){\n  return emptySet.clone();\n}\n", "nl": "IN(Start) is the empty set"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.0346808448626,0.0937009113303,0.143313661184,0.202008445998,0.293728320107,20.8026639595,8.74589525602,5.98756512605,4.38737418741,3.10751166664};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "public String[] upload_file(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String master_filename=null;\n  final String prefix_name=null;\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE,group_name,master_filename,prefix_name,file_ext_name,file_size,callback,meta_list);\n}\n", "nl": "upload file to storage server (by callback)"}
{"code": "public synchronized void close(){\n}\n", "nl": "Closes this audio player"}
{"code": "public DTW(double[][] signal,double[][] reference){\n  this.signal=signal;\n  this.reference=reference;\n  this.distanceFunction=\"Euclidean\";\n  setCost(dpDistance());\n}\n", "nl": "Dynamic time warping (DTW) cost signal and reference Default 'Euclidean' distance function"}
{"code": "public FriendsGetRequestsQueryWithNeedMutual out(Boolean value){\n  return unsafeParam(\"out\",value);\n}\n", "nl": "true - to return outgoing requests false - to return incoming requests (default)"}
{"code": "public boolean isSelectionFindable(){\n  return selected.size() > 0;\n}\n", "nl": "is a selection find possible"}
{"code": "public void drawChartTransposed(Graphics2D gc){\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n}\n", "nl": "draw heat map with colors representing series"}
{"code": "public static float lerp(float start,float end,float progress){\n  return start - progress * (start - end);\n}\n", "nl": "Linearly interpolates a float value from start to end for given progress"}
{"code": "public AccountGetCountersQuery filter(List<AccountGetCountersFilter> value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Counters information of which shall be returned"}
{"code": "@Override public Attr createAttributeNS(String namespaceURI,String qualifiedName,String localName) throws DOMException {\n  return new PSVIAttrNSImpl(this,namespaceURI,qualifiedName,localName);\n}\n", "nl": "Create an attribute with PSVI information"}
{"code": "public static <V>boolean isEmpty(V[] sourceArray){\n  return (sourceArray == null || sourceArray.length == 0);\n}\n", "nl": "is null or its length is 0"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof GraphView && ((GraphView)getViewer()).getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private static boolean isLessThanOneWeek(Date date){\n  Calendar calendar=Calendar.getInstance();\n  calendar.add(Calendar.DAY_OF_MONTH,-6);\n  return date.after(calendar.getTime());\n}\n", "nl": "Check if the date is less than 7 days from now"}
{"code": "public static UByte ubyte(String value) throws NumberFormatException {\n  return value == null ? null : UByte.valueOf(value);\n}\n", "nl": "Create an <code>unsigned byte</code>"}
{"code": "@Nullable public static Label createIfValid(String label){\n  if (validate(label)) {\n    return new Label(label);\n  }\n  return null;\n}\n", "nl": "Silently returns null if this is not a valid Label"}
{"code": "public VideoRemoveFromAlbumQuery albumIds(Integer... value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Set album ids"}
{"code": "public DocumentNGramGaussNormGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  CorrelationWindow=iCorrelationWindow;\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "public void onTargetLongClick(TapTargetView view){\n  onTargetClick(view);\n}\n", "nl": "Signals that the user has long clicked inside of the target"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views"}
{"code": "private Integer compareDateValues(Long loadValue,Long userValue){\n  return loadValue.compareTo(userValue);\n}\n", "nl": "compares two given date strings"}
{"code": "protected PollsEditQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Poll owner id"}
{"code": "public String[] upload_file(String group_name,String master_filename,String prefix_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  if ((group_name == null || group_name.length() == 0) || (master_filename == null || master_filename.length() == 0) || (prefix_name == null)) {\n    throw new MyException(\"invalid arguement\");\n  }\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,file_buff.length,new UploadBuff(file_buff,0,file_buff.length),meta_list);\n}\n", "nl": "upload file to storage server (by file buff, slave file mode)"}
{"code": "public CommandBuilder withLongSwitchIfPresent(Map<String,Object> properties,String... keys){\n  withLongSwitchIfPresent(properties,UnaryOperator.identity(),keys);\n  return this;\n}\n", "nl": "if the given key(s) is present in the map, create a long switch (--switch) with the same name as the key"}
{"code": "public AppsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"apps.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static String formatSpelledOutAmount(Double amount,Locale locale){\n  return formatSpelledOutAmount(amount.doubleValue(),locale);\n}\n", "nl": "Formats a Double into a properly spelled out number string based on Locale"}
{"code": "public static <V,V1 extends V,V2 extends V,V3 extends V,V4 extends V,V5 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3,String name4,V4 value4,String name5,V5 value5){\n  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3,name4,value4,name5,value5);\n}\n", "nl": "Create a map from passed nameX, valueX parameters"}
{"code": "protected void accumulateLabel(String path){\n  String name=getLabel(path);\n  if (!labels.contains(name))   labels.add(name);\n}\n", "nl": "Accumulate the label from the path"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0,1};\n}\n", "nl": "Creates the default cumulative probability distribution test expected values"}
{"code": "public Builder expression(final String expression){\n  this.expression=expression;\n  return this;\n}\n", "nl": "Sets the expression"}
{"code": "public DocumentWordDistroGraph(){\n  MinSize=1;\n  MaxSize=2;\n  CorrelationWindow=3;\n}\n", "nl": "Creates a new instance of DocumentWordDistroGraph"}
{"code": "public static String clearLastViewedProducts(HttpServletRequest request,HttpServletResponse response){\n  HttpSession session=request.getSession();\n  if (session != null) {\n    session.setAttribute(\"lastViewedProducts\",FastList.newInstance());\n  }\n  return \"success\";\n}\n", "nl": "Event to clear the last vieweed products"}
{"code": "protected MarketAddToAlbumQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item identifier"}
{"code": "public static short[] quantize(float[] f,float fMin,float fRange){\n  int len=f.length;\n  short[] ret=new short[len];\n  for (int i=0; i < len; i++)   ret[i]=quantize(f[i],fMin,fRange);\n  return (ret);\n}\n", "nl": "Quantize an array of floats over the 16bits signed short range"}
{"code": "@deprecated public OverlayBundle(String[] baseNames,Locale locale){\n  this.baseNames=baseNames;\n  this.locale=locale;\n  this.bundles=new ResourceBundle[baseNames.length];\n}\n", "nl": "/*    "}
{"code": "public static LineString lineString(Collection<Point> points){\n  return lineString(points.toArray(new Point[points.size()]));\n}\n", "nl": "Creates a LineString instance from the specified points"}
{"code": "@Override public Object clone(){\n  return GenericPK.create(this);\n}\n", "nl": "Clones this GenericPK, this is a shallow clone & uses the default shallow HashMap clone"}
{"code": "@Override protected void initData(){\n}\n", "nl": "Initialize the Activity data"}
{"code": "public void onNotify(File path,SVNNodeKind kind){\n  this.path=path;\n  if (monitor != null) {\n    monitor.worked(1);\n    subTask();\n  }\n}\n", "nl": "Display the log the message in the progress monitor and increase the progress by 1"}
{"code": "public void releaseScan() throws SAException {\n  if (_curValueList != null) {\n    _curValueList.releaseScan();\n    _curValueList=null;\n  }\n}\n", "nl": "release SLHolder for this scan"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public static int binaryLogUp(long n_){\n  int k=0;\n  while ((1L << k) < n_)   k++;\n  return k;\n}\n", "nl": "Binary log: finds the smallest power k such that 2^k>=n"}
{"code": "public void toAll(){\n  toAll(OpenModLoader.getSidedHandler().getServer().getPlayerList().getPlayerList());\n}\n", "nl": "Sends this packet to all players on the server"}
{"code": "public static double ssTotal(double[] residuals,double[] targetAttribute){\n  return ssReg(residuals,targetAttribute) + ssError(residuals,targetAttribute);\n}\n", "nl": "Total variance in target attribute"}
{"code": "public ByteArray(){\n}\n", "nl": "Construct an empty ByteArray"}
{"code": "protected boolean isFileExistsForGivenColumn(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){\n  PathService pathService=CarbonCommonFactory.getPathService();\n  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier(),carbonStorePath,dictionaryColumnUniqueIdentifier.getCarbonTableIdentifier());\n  String dictionaryFilePath=carbonTablePath.getDictionaryFilePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());\n  String dictionaryMetadataFilePath=carbonTablePath.getDictionaryMetaFilePath(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId());\n  return CarbonUtil.isFileExists(dictionaryFilePath) && CarbonUtil.isFileExists(dictionaryMetadataFilePath);\n}\n", "nl": "This method will check if dictionary and its metadata file exists for a given column"}
{"code": "protected final void fireColumnEvent(int idx,boolean prev){\n  Object[] lstnrs=m_listeners.getArray();\n  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);\n}\n", "nl": "Notifies all registered listeners of a column UPDATE event"}
{"code": "@PUT @Path(\"/{applicationName}/priorities\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Create global priority list for an application\",notes=\"Experiments can only be placed in a priority list in DRAFT, RUNNING, and PAUSED states.\") @Timed public Response createPriorities(@PathParam(\"applicationName\") @ApiParam(value=\"Application Name\") final Application.Name applicationName,@ApiParam(required=true,defaultValue=DEFAULT_MODEXP) final ExperimentIDList experimentIDList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  authorization.checkUserPermissions(authorization.getUser(authorizationHeader),applicationName,UPDATE);\n  priorities.createPriorities(applicationName,experimentIDList,true);\n  return httpHeader.headers(NO_CONTENT).build();\n}\n", "nl": "Creates a rank ordered priority list"}
{"code": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + ((databaseName == null) ? 0 : databaseName.hashCode());\n  result=prime * result + ((tableUniqueName == null) ? 0 : tableUniqueName.hashCode());\n  return result;\n}\n", "nl": "to generate the hash code"}
{"code": "public void disableLabels(Collection<String> labels){\n  disabledLabels.addAll(labels);\n}\n", "nl": "disable the named labels"}
{"code": "public static PictureAttributes createPictureAttributes(){\n  return new PictureAttributes();\n}\n", "nl": "Create picture attributes"}
{"code": "public SimplePollingContainerConfigurer eventListenerMethod(Object eventListener,String methodName){\n  MethodEventListenerAdapter methodEventListenerAdapter=new MethodEventListenerAdapter();\n  methodEventListenerAdapter.setDelegate(eventListener);\n  methodEventListenerAdapter.setMethodName(methodName);\n  methodEventListenerAdapter.afterPropertiesSet();\n  pollingEventListenerContainer.setEventListener(methodEventListenerAdapter);\n  return this;\n}\n", "nl": "Sets an event listener that uses method name as an adapter"}
{"code": "public static void unbanChar(int playerId){\n  DAOManager.getDAO(PlayerPunishmentsDAO.class).unpunishPlayer(playerId,PunishmentType.CHARBAN);\n}\n", "nl": "This method will handle unbanning a character"}
{"code": "@Override public void start(BundleContext bc) throws Exception {\n  context=bc;\n  logger.debug(\"Z-Wave binding started. Version {}\",ZWaveActivator.getVersion());\n}\n", "nl": "Called whenever the OSGi framework starts our bundle"}
{"code": "public SecureGetTransactionsHistoryQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.getTransactionsHistory\",Utils.buildParametrizedType(List.class,Transaction.class));\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void writeLSD() throws IOException {\n  writeShort(width);\n  writeShort(height);\n  out.write((0x80 | 0x70 | 0x00| palSize));\n  out.write(0);\n  out.write(0);\n}\n", "nl": "Writes Logical Screen Descriptor"}
{"code": "public void addOnPageChangeListener(ViewPager.OnPageChangeListener onPageChangeListener){\n  this.onPageChangeListener=onPageChangeListener;\n}\n", "nl": "Set your own onPageChangeListener"}
{"code": "public EventBuilder minPriority(){\n  this.event.setPriority(Thread.MIN_PRIORITY);\n  return this;\n}\n", "nl": "Use min priority in thread execution"}
{"code": "public void showMetrics(){\n}\n", "nl": "Shows metrics for this audio player"}
{"code": "public WallGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id"}
{"code": "public NormalizerAdapter(){\n}\n", "nl": "Creates a new instance of NormalizerAdapter"}
{"code": "public void put(String label,String newLabel){\n  label2label.put(label,newLabel);\n}\n", "nl": "set a label 2 label map"}
{"code": "public static void dismissDialogSafely(Dialog dialog){\n  if (dialog != null && dialog.isShowing()) {\n    dialog.dismiss();\n  }\n}\n", "nl": "Dismiss dialog safely"}
{"code": "public AdsUpdateCampaignsQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.updateCampaigns\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void onBeforeSpawn(){\n}\n", "nl": "Called before object is placed into world"}
{"code": "public CatchOptions usePokeball(Pokeball pokeBall){\n  this.pokeBall=pokeBall;\n  return this;\n}\n", "nl": "Set a specific Pokeball to use"}
{"code": "public void leftTrim(double second){\n  trim(second,0);\n}\n", "nl": "Trim the wave data from beginning"}
{"code": "public IStoredListIterator<T> next(IStoredListIterator<T> slh){\n  IStoredListIterator<T> slnext=nextPos((StoredListIterator<T>)slh);\n  if (slnext == null)   slh.release();\n  return slnext;\n}\n", "nl": "get the next element in scan order"}
{"code": "public WallPostQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n", "nl": "Set guid"}
{"code": "public IObjectInfo<T> add(T subject){\n  return store_impl(subject);\n}\n", "nl": "store an element"}
{"code": "public ExtendedAnswerHolder update(IEntryPacket updated_entry,Transaction txn,long lease,long timeout,SpaceContext sc,boolean fromReplication,boolean origin,boolean newRouter,int modifiers) throws UnusableEntryException, UnknownTypeException, TransactionException, RemoteException, InterruptedException {\n  if (Modifiers.contains(modifiers,Modifiers.EXPLAIN_PLAN)) {\n    throw new UnsupportedOperationException(\"Sql explain plan is not supported for update operation\");\n  }\n  return update(updated_entry,txn,lease,timeout,sc,fromReplication,origin,newRouter,modifiers,null);\n}\n", "nl": "perform an update operation- make it atomic NOTE- returnonlyUID is ignored"}
{"code": "public void destroyView() throws CanceledException {\n  searchManager.getFindDialogAsToolBar().close();\n  frame.setVisible(false);\n  doc.getSampleSelection().removeSampleSelectionListener(selectionListener);\n  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());\n  dir.removeViewer(this);\n  frame.dispose();\n}\n", "nl": "ask view to destroy itself"}
{"code": "public double calcPointToLineDistance(Entry startEntry,Entry endEntry,Entry entryPoint){\n  float xDiffEndStart=(float)endEntry.getXIndex() - (float)startEntry.getXIndex();\n  float xDiffEntryStart=(float)entryPoint.getXIndex() - (float)startEntry.getXIndex();\n  double normalLength=Math.sqrt((xDiffEndStart) * (xDiffEndStart) + (endEntry.getVal() - startEntry.getVal()) * (endEntry.getVal() - startEntry.getVal()));\n  return Math.abs((xDiffEntryStart) * (endEntry.getVal() - startEntry.getVal()) - (entryPoint.getVal() - startEntry.getVal()) * (xDiffEndStart)) / normalLength;\n}\n", "nl": "calculate the distance between a line between two entries and an entry (point)"}
{"code": "private int findInsertionIndex(final int key){\n  return findInsertionIndex(keys,states,key,mask);\n}\n", "nl": "Find the index at which a key should be inserted"}
{"code": "public boolean isDurableWriteEnabled(){\n  return getBoolean(SERVER_DURABLE_WRITE_ENABLED,SERVER_DURABLE_WRITE_ENABLED_DEFAULT);\n}\n", "nl": "Is durable write enabled?"}
{"code": "public MessagesGetChatUsersQueryWithChatIds nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public static Map<String,String> strToMap(String str,String delim,boolean trim){\n  return strToMap(str,delim,trim,null);\n}\n", "nl": "Creates a Map from an encoded name/value pair string"}
{"code": "public SM_PET(int actionId,PetCommonData commonData){\n  this.actionId=actionId;\n  this.commonData=commonData;\n}\n", "nl": "For adopt only"}
{"code": "public GroupsIsMemberQueryWithUserIds(VkApiClient client,UserActor actor,String groupId,List<Integer> userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatus.class));\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AppsSendRequestQuery appId(Integer value){\n  return unsafeParam(\"app_id\",value);\n}\n", "nl": "Set app id"}
{"code": "public static int sumFromTo(int iStart,int iEnd){\n  int iRes=0;\n  for (int iCnt=iStart; iCnt <= iEnd; iRes+=iCnt++)   ;\n  return iRes;\n}\n", "nl": "Returns the sum of a sequence of numbers in a specified range"}
{"code": "public void addEmojiconGroup(List<EaseEmojiconGroupEntity> groupEntitieList){\n  for (int i=0; i < groupEntitieList.size(); i++) {\n    EaseEmojiconGroupEntity groupEntity=groupEntitieList.get(i);\n    emojiconGroupList.add(groupEntity);\n    pagerView.addEmojiconGroup(groupEntity,i == groupEntitieList.size() - 1 ? true : false);\n    tabBar.addTab(groupEntity.getIcon());\n  }\n}\n", "nl": "add emojicon group list"}
{"code": "protected final void fireColumnEvent(int idx,double prev){\n  Object[] lstnrs=m_listeners.getArray();\n  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);\n}\n", "nl": "Notifies all registered listeners of a column UPDATE event"}
{"code": "public PhotosGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id"}
{"code": "private void throwCloseConnection() throws ClosedChannelException {\n  ClosedChannelException closeEx=new ClosedChannelException();\n  closeEx.initCause(new IOException(\"Connection has been closed by peer\"));\n  throw closeEx;\n}\n", "nl": "throws ClosedChannelException if remote peer socket closed"}
{"code": "public void updateWithItemHandler(String key){\n  remove(key);\n  put(key,itemHandler.get(key));\n}\n", "nl": "Updates the cache for the given key using the value from the source"}
{"code": "public String[] upload_file(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE,group_name,null,null,file_ext_name,file_buff.length,new UploadBuff(file_buff,0,file_buff.length),meta_list);\n}\n", "nl": "upload file to storage server (by file buff)"}
{"code": "private void printGrantedAuthorities(final Auth0JWTToken principal){\n  for (  final GrantedAuthority grantedAuthority : principal.getAuthorities()) {\n    final String authority=grantedAuthority.getAuthority();\n    logger.info(authority);\n  }\n}\n", "nl": "Simple demonstration of how Principal info can be accessed"}
{"code": "public Main(){\n}\n", "nl": "Creates a new instance of Main"}
{"code": "public void addPaging(Integer pageSize,Integer pageIndex){\n  ParamValidationUtil.validateParamNotNull(pageSize,\"pageSize\");\n  ParamValidationUtil.validateParamNotNull(pageIndex,\"pageIndex\");\n  int offset=pageIndex * pageSize;\n  this.offset=offset;\n  this.limit=pageSize;\n  this.usePaging=true;\n}\n", "nl": "Adds paging to the query"}
{"code": "public static void moveFile(String sourceFilePath,String destFilePath){\n  if (TextUtils.isEmpty(sourceFilePath) || TextUtils.isEmpty(destFilePath)) {\n    throw new RuntimeException(\"Both sourceFilePath and destFilePath cannot be null.\");\n  }\n  moveFile(new File(sourceFilePath),new File(destFilePath));\n}\n", "nl": "move file"}
{"code": "protected final boolean isUpdateHeaderVisible(){\n  return mUpdateHeader == getChildAt(0);\n}\n", "nl": "Is update header visible?"}
{"code": "public void refreshZoneImpl(){\n  getOwner().revalidateZones();\n}\n", "nl": "Refresh completely zone irrespective of the current zone"}
{"code": "private TableOptionWrapper(){\n}\n", "nl": "to  initialize the wrapper object"}
{"code": "public PhotosGetUserPhotosQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return an additional \"likes\" field"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set contract-gaps=\");\n  boolean collapse=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().getSelectedBlock().clear();\n  viewer.setContractGaps(collapse);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void onButtonClick(View v){\n  if (mBound) {\n    int num=mService.getRandomNumber();\n    Toast.makeText(this,\"number: \" + num,Toast.LENGTH_SHORT).show();\n  }\n}\n", "nl": "Called when a button is clicked (the button in the layout file attaches to this method with the android:onClick attribute)"}
{"code": "public SVNChangeSetCollector(ISynchronizePageConfiguration configuration){\n  super(configuration);\n}\n", "nl": "Constructs a new SVNChangeSetCollector used to collect incoming change sets"}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state"}
{"code": "public void addChangingListener(OnWheelChangedListener listener){\n  changingListeners.add(listener);\n}\n", "nl": "Adds wheel changing listener"}
{"code": "@Override public void clearSelection(){\n  selectedPhotos.clear();\n}\n", "nl": "Clear the selection status for all items"}
{"code": "public static void drawResizeHandleSelection(ViewTransform transform,Graphics2D g,ResizeHandle selectedResizeHandle){\n  Rectangle bounds=selectedResizeHandle.getSwingBounds(transform);\n  g.drawRect(bounds.x,bounds.y,bounds.width,bounds.height);\n}\n", "nl": "Draw resize handle selection"}
{"code": "public void requestRender(){\n  ourLock.lock();\n  ConstraintUtilities.renderModel(this);\n  ourLock.unlock();\n}\n", "nl": "Schedule a render"}
{"code": "public boolean isCurrentSet(){\n  return currentTaxonIterator != null && currentTaxonId != null;\n}\n", "nl": "is the current object set?"}
{"code": "private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,String queryString){\n  GraqlLexer lexer=getLexer(queryString);\n  GraqlErrorListener errorListener=new GraqlErrorListener(queryString);\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(errorListener);\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  return parseQueryFragment(parseRule,visit,errorListener,tokens);\n}\n", "nl": "Parse any part of a Graql query"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.CHISSQUARE + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public static final void emoteStartDancing1(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,134,0));\n}\n", "nl": "Npc starts dancing iu 1"}
{"code": "public ImageFixture withThumbnailSize(int size){\n  myThumbnailSize=size;\n  return this;\n}\n", "nl": "Sets the maximum dimension for thumbnails"}
{"code": "public static int clamp(int value,int min,int max){\n  if (value < min)   value=min;\n  if (value > max)   value=max;\n  return value;\n}\n", "nl": "Clamps the value to a discrete value"}
{"code": "public void normal(){\n  mHintView.setVisibility(View.VISIBLE);\n  mProgressBar.setVisibility(View.GONE);\n}\n", "nl": "normal status"}
{"code": "@Override public void onCanceled(){\n}\n", "nl": "Call if user manual cancel picking or taking content"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isLocked(){\n  return getInt(\"locked\") > 0;\n}\n", "nl": "whether the user has been locked"}
{"code": "protected GroupsGetInvitedUsersQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Group id to return invited users for"}
{"code": "public void registerListener(FCMListener fcmListener){\n  this.mFCMListener=fcmListener;\n}\n", "nl": "Register listener"}
{"code": "private void printHelp(){\n  HelpFormatter formatter=new HelpFormatter();\n  formatter.setWidth(140);\n  formatter.printHelp(\"ResponderDriver\",cliOptions);\n}\n", "nl": "Prints out the help message"}
{"code": "public ControlAttributionOptions build(){\n  ControlAttributionOptions options=new ControlAttributionOptions();\n  options.position=this.position;\n  options.prefix=this.prefix;\n  return options;\n}\n", "nl": "Builds a new ControlAttributionOptions instance"}
{"code": "public static String millisecondsToString(long milliseconds,SimpleDateFormat dateFormat){\n  return dateFormat.format(new Date(milliseconds));\n}\n", "nl": "return a date string from milliseconds with a specific date format"}
{"code": "public void addMessage(Message message){\n  if (SHOW_LOGS)   Logger.v(TAG,\">> addMessage, lock \" + message);\n  mQueueLock.lock(TAG);\n  mPlayerMessagesQueue.add(message);\n  mQueueLock.notify(TAG);\n  if (SHOW_LOGS)   Logger.v(TAG,\"<< addMessage, unlock \" + message);\n  mQueueLock.unlock(TAG);\n}\n", "nl": "Use it if you need to add a single message"}
{"code": "public DefaultMovieInfoProvider(String fileToSave){\n  this(MovieUtils.createMediaLocator(fileToSave));\n}\n", "nl": "Creates a new instance of DefaultMovieInfoProvider"}
{"code": "public VideoGetQuery videos(List<String> value){\n  return unsafeParam(\"videos\",value);\n}\n", "nl": "Video IDs"}
{"code": "public double min(){\n  return m_min;\n}\n", "nl": "Get lower end of histogram range"}
{"code": "public boolean declaresMethod(NumberedString subsignature){\n  checkLevel(SIGNATURES);\n  SootMethod ret=subSigToMethods.get(subsignature);\n  return ret != null;\n}\n", "nl": "Does this class declare a method with the given subsignature?"}
{"code": "public GroupsGetBannedQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public void clearMemoryCache(){\n  checkConfiguration();\n  configuration.memoryCache.clear();\n}\n", "nl": "Clears memory cache"}
{"code": "public DocsGetWallUploadServerQuery(VkApiClient client,Actor actor){\n  super(client,\"docs.getWallUploadServer\",GetWallUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Builder convertFromSequence(){\n  actionList.add(new DataAction(new ConvertFromSequence()));\n  return this;\n}\n", "nl": "Convert a sequence to a set of individual values (by treating each value in each sequence as a separate example)"}
{"code": "public void goToNextStep(){\n  goToStep(activeStep + 1,false);\n}\n", "nl": "Go to the next step"}
{"code": "public void notifyChange(){\n  executeEvent();\n}\n", "nl": "invoke this method when you want to update data"}
{"code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0d,0.001d,0.010d,0.025d,0.050d,0.100d,0.999d,0.990d,0.975d,0.950d,0.900d,1d};\n}\n", "nl": "Creates the default inverse cumulative probability test input values"}
{"code": "public SQLSchemaMigrator graph(MindmapsGraph graph){\n  this.graph=graph;\n  return this;\n}\n", "nl": "Set a graph from which to get information"}
{"code": "public void calculateCount(){\n  count=Rnd.get(dropTemplate.getMinAmount(),dropTemplate.getMaxAmount());\n}\n", "nl": "Regenerates item count upon each call // TODO input parameters - based on attacker stats // TODO more precise calculations (non-linear)"}
{"code": "public TapTarget textColor(@ColorRes int color){\n  this.titleTextColor=color;\n  this.descriptionTextColor=color;\n  return this;\n}\n", "nl": "Specify the color resource for all text"}
{"code": "public MessagesGetChatUsersQueryWithChatIdsFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "@Deprecated public static void disableLogging(){\n  writeLogs(false);\n}\n", "nl": "Disables logger, no logs will be passed to LogCat, all log methods will do nothing"}
{"code": "public FeatureVectorCART(MaryNode tree,FeatureArrayIndexer ffi){\n  featDef=ffi.getFeatureDefinition();\n  addDaughters(null,tree,ffi);\n  if (rootNode instanceof DecisionNode) {\n    ((DecisionNode)rootNode).countData();\n  }\n}\n", "nl": "Convert the given Mary node tree into a CART with the leaves containing featureVectors"}
{"code": "public void forceMoveToPrimary() throws RemoteException {\n  if (getState() == State.ACTIVE)   return;\n  changeState(State.PENDING,State.ACTIVE,true);\n  notifyListenerOnActive(new ServiceItem(_electTemplate.getServiceID(),_electTemplate.getService(),null));\n}\n", "nl": "Forcefully make this space to be primary"}
{"code": "public SlickForm withField(FormField field){\n  this.formFields.add(field);\n  return this;\n}\n", "nl": "Adds a new field to the SlickForm's fields collection"}
{"code": "private SkillEngine(){\n}\n", "nl": "should not be instantiated directly"}
{"code": "private void writeSourceSinkSpec(SourceSinkSpec spec,Document document,Element parentElement){\n  if (spec instanceof JavaParameterSpec)   writeJavaParameterSpec((JavaParameterSpec)spec,document,parentElement);\n else   if (spec instanceof JavaFieldSpec)   writeJavaFieldSpec((JavaFieldSpec)spec,document,parentElement);\n else   throw new RuntimeException(\"Unsupported source or sink specification type\");\n}\n", "nl": "Writes out a source/sink specification object"}
{"code": "public void write(OutputWriter outs) throws IOException {\n  for (long index=0; index < maxIndex; index++) {\n    outs.writeInt(get(index));\n  }\n}\n", "nl": "write to stream in binary"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static int px2sp(Context context,float pxValue){\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(pxValue / scale + 0.5f);\n}\n", "nl": "convert px to sp"}
{"code": "public NotesGetCommentsQuery(VkApiClient client,UserActor actor,int noteId){\n  super(client,\"notes.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static <ARG>Matcher<ARG> match(ARG arg){\n  return new Matcher<>(arg);\n}\n", "nl": "Start a pattern matcher on the given value"}
{"code": "@Deprecated public Builder cacheInMemory(){\n  cacheInMemory=true;\n  return this;\n}\n", "nl": "Loaded image will be cached in memory"}
{"code": "public String toStringVerbose(int windowSize){\n  List<Double> mapping=seqFromToLenOut();\n  String str=\"Genome coords: \" + from + \"-\"+ to+ \"; screen width: \"+ mapping.size()+ \"; scale: \"+ this.getBpPerScreenColumn()+ \" bp/column\"+ \"; Mapping: \"+ mapping;\n  str+=\"\\n\";\n  str+=this.toString();\n  return str;\n}\n", "nl": "For debugging only"}
{"code": "public static boolean isOFBGiftCard(String stPassed){\n  if (isEmpty(stPassed))   return defaultEmptyOK;\n  String st=stripCharsInBag(stPassed,creditCardDelimiters);\n  if (st.length() == 15 && sumIsMod10(getLuhnSum(st))) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Check to see if a card number is a valid OFB Gift Card (Certifiicate)"}
{"code": "public AppPreferences(final Context context){\n  preferences=context.getApplicationContext().getSharedPreferences(\"io.github.azaiats.androidmvvm.sample.AppPreferences\",Context.MODE_PRIVATE);\n}\n", "nl": "Create AppPreferences"}
{"code": "private void notifyRemoved(List<AirMapTraffic> removed){\n  if (removed == null || removed.isEmpty()) {\n    return;\n  }\n  for (  AirMapTrafficListener listener : listeners) {\n    listener.onRemoveTraffic(removed);\n  }\n}\n", "nl": "Notify the listeners that traffic has been removed"}
{"code": "protected final void clearIdentifiers(){\n  if (identifiers != null) {\n    identifiers.clear();\n  }\n}\n", "nl": "Remove all identifiers from the ID table"}
{"code": "protected int addContentSpecNode(short nodeType,String nodeValue){\n  int contentSpecIndex=createContentSpec();\n  fContentSpec.setValues(nodeType,nodeValue,null);\n  setContentSpec(contentSpecIndex,fContentSpec);\n  return contentSpecIndex;\n}\n", "nl": "Create an XMLContentSpec for a single non-leaf"}
{"code": "public static double idf(double totalDocs,double numTimesWordAppearedInADocument){\n  return totalDocs > 0 ? Math.log10(totalDocs / numTimesWordAppearedInADocument) : 0;\n}\n", "nl": "Inverse document frequency: the total docs divided by the number of times the word appeared in a document"}
{"code": "public boolean isDrawTopYLabelEntryEnabled(){\n  return mDrawTopYLabelEntry;\n}\n", "nl": "returns true if drawing the top y-axis label entry is enabled"}
{"code": "public MarketGetCategoriesQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Set offset"}
{"code": "public WidgetsGetPagesQuery(VkApiClient client,UserActor actor){\n  super(client,\"widgets.getPages\",GetPagesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addToBottom(Map<K,V> existingMap){\n  if (existingMap == null) {\n    throw new IllegalArgumentException(\"Error: cannot add null existing Map to bottom of a MapContext\");\n  }\n  this.stackList.add(existingMap);\n}\n", "nl": "Puts an existing Map on the BOTTOM of the stack (bottom meaning will be overriden by lower layers on the stack, ie everything else already there)"}
{"code": "public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){\n  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));\n}\n", "nl": "Creates new AsyncHttpClient using given params"}
{"code": "public MD5OutputStream(OutputStream out){\n  super(out);\n  md5=new MD5();\n}\n", "nl": "Creates MD5OutputStream"}
{"code": "public static void timedRecord(String filename,long millis,AudioFormat audioFormat){\n  File outputFile=new File(filename);\n  timedRecord(outputFile,millis,audioFormat);\n}\n", "nl": "Record a sound file with the recording being limited to a given amount of time"}
{"code": "public EventDescriptor(Class eventClass){\n  this(eventClass,null);\n}\n", "nl": "Construct an EventDescriptor with a class"}
{"code": "public synchronized void clear(){\n  this.nonEmptyForwardLookup.clear();\n  this.nonEmptyLookupByTargetNode.clear();\n  this.nonEmptyReverseLookup.clear();\n}\n", "nl": "Removes all jump functions"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-5.89342953136,-3.36492999891,-2.57058183564,-2.01504837333,-1.47588404882,5.89342953136,3.36492999891,2.57058183564,2.01504837333,1.47588404882};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "public static Map<String,Object> sendOrderPayRetryNotification(DispatchContext ctx,Map<String,? extends Object> context){\n  return sendOrderNotificationScreen(ctx,context,\"PRDS_ODR_PAYRETRY\");\n}\n", "nl": "Service to email a customer with order payment retry results"}
{"code": "private UInteger(String value) throws NumberFormatException {\n  this.value=rangeCheck(Long.parseLong(value));\n}\n", "nl": "Create an <code>unsigned int</code>"}
{"code": "public static JsonRootNode jsonFromString(String input){\n  try {\n    return new JdomParser().parse(input);\n  }\n catch (  InvalidSyntaxException e) {\n    return null;\n  }\n}\n", "nl": "Parse a json from a string"}
{"code": "public BoardDeleteCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId,int commentId){\n  super(client,\"board.deleteComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static long max(final long a,final long b){\n  return (a <= b) ? b : a;\n}\n", "nl": "Compute the maximum of two values"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views"}
{"code": "public static UShort valueOf(String value) throws NumberFormatException {\n  return new UShort(value);\n}\n", "nl": "Create an <code>unsigned short</code>"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public boolean hasValidOTP(){\n  return makeOTP().length() == 4;\n}\n", "nl": "Checks if all four fields have been filled"}
{"code": "public boolean isSuperUser(String role){\n  Set<String> superUserRoles=conf.getSuperUserRoles();\n  return role != null && superUserRoles.contains(role) ? true : false;\n}\n", "nl": "Super user roles are allowed to do anything, used for replication primarily"}
{"code": "@Override public boolean isFingerprintAuthSupported(){\n  return impl.isFingerprintAuthSupported();\n}\n", "nl": "Returns <code>true</code> when fingerprint authentication is available and supported"}
{"code": "public GroupsSetCallbackServerQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.setCallbackServer\",SetCallbackServerResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isUptoDate(){\n  return isUpToDate;\n}\n", "nl": "is viewer uptodate?"}
{"code": "public InfoflowResults analyzeAPKFile(String apkFileName,String xmlFileName) throws IOException, XmlPullParserException {\n  return analyzeAPKFile(apkFileName,xmlFileName,false,false,false);\n}\n", "nl": "Analyzes the given APK file for data flows with a given xml file"}
{"code": "public Expression whenScalar(Value val1,Value val2){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a when scalar_expression clause"}
{"code": "public static boolean isActivityAvailableForIntent(Context context,Intent intent){\n  return intent.resolveActivity(context.getPackageManager()) != null;\n}\n", "nl": "Check if there is a valid Activity for the intent"}
{"code": "@Override public boolean isValueLineVariableLength(){\n  return mValueLineVariableLength;\n}\n", "nl": "When valuePosition is OutsideSlice, this allows variable line length"}
{"code": "public GroupsGetRequestsQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.getRequests\",GetRequestsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public RegisterReplicationLocalViewResponseInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public void addHeader(@LayoutRes int layoutId,Object data){\n  int insertPosition=calcInsertPosition(0);\n  mInserts.add(insertPosition,new Insertion(layoutId,data,Insertion.TYPE_HEADER));\n  getItems().add(insertPosition,null);\n  mHeadersCount+=1;\n  notifyIfNeed();\n}\n", "nl": "Add header before all items and after TYPE_ABSOLUTE_HEADER"}
{"code": "private String expandClassName(String className){\n  String packageName=getPackageName();\n  if (className.startsWith(\".\"))   return packageName + className;\n else   if (className.substring(0,1).equals(className.substring(0,1).toUpperCase()))   return packageName + \".\" + className;\n else   return className;\n}\n", "nl": "Generates a full class name from a short class name by appending the globally-defined package when necessary"}
{"code": "public int truncate_file1(String appender_file_id,long truncated_file_size) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.truncate_file(parts[0],parts[1],truncated_file_size);\n}\n", "nl": "truncate appender file from storage server"}
{"code": "public String toString(){\n  return cronExpression;\n}\n", "nl": "Returns the string representation of the <CODE>CronExpression</CODE>"}
{"code": "public static boolean isInitializer(){\n  return _threadId.get() != null && INITIALIZER_ID.equals(_threadId.get());\n}\n", "nl": "Returns true is current thread is initializer thread"}
{"code": "public static double[] normalizeZscore(double[] x){\n  double mn=mean(x,0);\n  double sd=standardDeviation(x,0);\n  for (int i=0; i < x.length; i++)   if (!Double.isNaN(x[i]))   x[i]=(x[i] - mn) / sd;\n  return x;\n}\n", "nl": "Calcualtes x_i = (x_i - mean(x)) / std(x) This function can deal with NaNs"}
{"code": "public void transformTableToContainer(ConstraintTableLayout table){\n  ConstraintWidgetContainer container=new ConstraintWidgetContainer();\n  container.setDebugName(createContainerName(\"container\"));\n  transformContainerToContainer(table,container);\n}\n", "nl": "Transform the selected table to a normal container"}
{"code": "private static void sendPatch(StatefulService service,Object body){\n  Operation patch=Operation.createPatch(service.getUri()).setBody(body).setCompletion(null);\n  service.sendRequest(patch);\n}\n", "nl": "Helper method to send a patch to the specified service"}
{"code": "public boolean drain(){\n  timer.stop(\"speakableOut\");\n  return true;\n}\n", "nl": "Waits for all queued audio to be played"}
{"code": "public void actionPerformed(ActionEvent ev){\n  String result=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter Id\",\"Select Node by Id\",JOptionPane.QUESTION_MESSAGE);\n  if (result != null)   execute(\"select id=\" + result + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public void saveIssue(Issue issue){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.saveOrUpdate(issue);\n  transaction.commit();\n  session.close();\n}\n", "nl": "Save an issue"}
{"code": "public PagesSaveAccessQuery(VkApiClient client,UserActor actor,int pageId){\n  super(client,\"pages.saveAccess\",Integer.class);\n  accessToken(actor.getAccessToken());\n  pageId(pageId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean between(float value,float start,float end){\n  if (start > end) {\n    float tmp=start;\n    start=end;\n    end=tmp;\n  }\n  return value >= start && value <= end;\n}\n", "nl": "Checks if value belongs to range <code>[start, end]</code>"}
{"code": "protected RemoteResourceStatus(byte[] bytes) throws SVNException {\n  super();\n  StatusFromBytesStream in=new StatusFromBytesStream(bytes);\n  initFromBytes(in);\n}\n", "nl": "(Re)Construct an object from the given bytes"}
{"code": "public UnknownDependencyException(final Throwable throwable,final String message){\n  super(message,throwable);\n}\n", "nl": "Constructs a new UnknownDependencyException based on the given Exception"}
{"code": "private void toggleMenuDrawer(){\n  if (isMenuDrawerOpen()) {\n    closeMenuDrawer();\n  }\n else {\n    openMenuDrawer();\n  }\n}\n", "nl": "Used to toggle the menu drawer"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void writeOp(LogRecord record) throws IOException {\n  record.writeToStream(buf);\n}\n", "nl": "Write an operation to the output stream"}
{"code": "public boolean isHorizontalGuideline(){\n  if (mConstraintWidget instanceof Guideline) {\n    Guideline g=(Guideline)mConstraintWidget;\n    return g.getOrientation() == Guideline.HORIZONTAL;\n  }\n  return false;\n}\n", "nl": "is this a horizontal guide line on the image"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapPermitAnswer && getId().equals(((AirMapPermitAnswer)o).getId());\n}\n", "nl": "Comparison based on ID"}
{"code": "private DensityUtil(){\n  throw new UnsupportedOperationException(\"cannot be instantiated\");\n}\n", "nl": "cannot be instantiated"}
{"code": "public StaticScript metaArguments(Object... metaArguments){\n  this.metaArguments=metaArguments;\n  return this;\n}\n", "nl": "Adds another meta argument to the script"}
{"code": "public MessagesGetLongPollHistoryQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.getLongPollHistory\",GetLongPollHistoryResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addChangingListener(OnWheelChangedListener listener){\n  changingListeners.add(listener);\n}\n", "nl": "Adds wheel changing listener"}
{"code": "public void stopDeceleration(){\n  mDecelerationAngularVelocity=0.f;\n}\n", "nl": "Sets the deceleration-angular-velocity to 0f"}
{"code": "@Override protected boolean shouldGenerateIdAsFallback(){\n  return true;\n}\n", "nl": "Auto generating bean ids to avoid the error Configuration problem: Id is required for element when used as a top-level tag"}
{"code": "public boolean isHidden(){\n  return myHidden;\n}\n", "nl": "Returns whether the overlay is hidden"}
{"code": "public MarketCreateCommentQuery replyToComment(Integer value){\n  return unsafeParam(\"reply_to_comment\",value);\n}\n", "nl": "Id of a comment to reply with current comment to"}
{"code": "public NotSetPositionException(Throwable cause){\n  super(cause);\n}\n", "nl": "Creates new error"}
{"code": "public static final void changeGroupRules(PlayerAlliance alliance,LootGroupRules lootRules){\n  alliance.onEvent(new ChangeAllianceLootRulesEvent(alliance,lootRules));\n}\n", "nl": "Change alliance's loot rules and notify team members"}
{"code": "public MonsterWeaknessCursor queryWeaknessFromMonster(long id){\n  return mHelper.queryWeaknessFromMonster(id);\n}\n", "nl": "MONSTER WEAKNESS QUERIES"}
{"code": "public static boolean isFreeName(String name){\n  return !DAOManager.getDAO(PlayerDAO.class).isNameUsed(name);\n}\n", "nl": "Checks if name is already taken or not"}
{"code": "private boolean isSourceXliff(){\n  return xliffFilter.getCurrentTargetLocale() == null || xliffFilter.getCurrentTargetLocale().equals(LocaleId.EMPTY) || xliffFilter.getCurrentTargetLocale().equals(sourceLocaleId);\n}\n", "nl": "Use the filter to see if there's a target language"}
{"code": "@Override public int compareTo(PlayerHouseBid o){\n  return (int)(time.getTime() - o.getTime().getTime());\n}\n", "nl": "Order by date ascending"}
{"code": "public boolean isAnimating(){\n  return mAnimation.step();\n}\n", "nl": "Return true if we are animating a color transition"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public DatabaseGetUniversitiesQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getUniversities\",GetUniversitiesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AudioReorderQuery(VkApiClient client,UserActor actor,int audioId){\n  super(client,\"audio.reorder\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioId(audioId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public RenderRequest(JsonObject json){\n  this.request=new HttpRequestWrapper(json.getJsonObject(\"request\"));\n  if (json.containsKey(\"template\")) {\n    this.template=json.getString(\"template\");\n  }\n}\n", "nl": "Initialise the fields of this instance from the specified JSON"}
{"code": "public static String execute(String command){\n  return SubprocessUttility.execute(command);\n}\n", "nl": "Execute a command in the environment"}
{"code": "public static void e(String tag,String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.e(tag,buildMsg(msg),e);\n  }\n}\n", "nl": "error log"}
{"code": "public static void error(@Nullable Class<?> caller,Throwable throwable,String message,Object... args){\n  android.util.Log.e(tag(caller),String.format(Locale.ENGLISH,message,args),throwable);\n}\n", "nl": "Logs with error level and logs stack trace for the throwable"}
{"code": "public static Action create(String type,Object... values){\n  return new Action(type,values);\n}\n", "nl": "Factory method to create action with defined type and any number of attached values as payload"}
{"code": "public VideoGetQuery videos(String... value){\n  return unsafeParam(\"videos\",value);\n}\n", "nl": "Video IDs"}
{"code": "public boolean isApplicable(){\n  return getParent() != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private int computeSize(Map<Integer,Integer[]> integerMap){\n  int count=0;\n  for (  Integer taxonId : integerMap.keySet()) {\n    Integer value=integerMap.get(taxonId)[0];\n    if (value != null)     count+=value;\n  }\n  return count;\n}\n", "nl": "compute the size of the classification"}
{"code": "protected UUID makeUUID(){\n  return UUIDGen.getTimeUUID();\n}\n", "nl": "Helper method for creating uuid"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set colorMatchesVsReference=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public void onMapLongClick(@NonNull LatLng point){\n  AirMap.createFlight(this,REQUEST_FLIGHT,getCoordinateFromLatLng(point),null);\n}\n", "nl": "Called when the map is long clicked"}
{"code": "public void cleanPatchByVersion(String versionName){\n  if (patchDirectory == null || versionName == null) {\n    return;\n  }\n  String path=patchDirectory.getAbsolutePath() + \"/\" + versionName;\n  SharePatchFileUtil.deleteDir(path);\n}\n", "nl": "clean the patch version files, such as tinker/patch-641e634c"}
{"code": "@Override public Scan open(){\n  TableScan ts=(TableScan)tp.open();\n  Index idx=ii.open(tx);\n  return new IndexSelectScan(idx,searchRange,ts);\n}\n", "nl": "Creates a new indexselect scan for this query"}
{"code": "public void registerHandler(String handlerName,BridgeHandler handler){\n  if (handler != null) {\n    messageHandlers.put(handlerName,handler);\n  }\n}\n", "nl": "register handler,so that javascript can call it"}
{"code": "public InvalidDescriptionException(final Throwable cause,final String message){\n  super(message,cause);\n}\n", "nl": "Constructs a new InvalidDescriptionException based on the given Exception"}
{"code": "public boolean removeEntity(final ProxyEntity proxyEntity){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.delete(proxyEntity);\n  transaction.commit();\n  session.close();\n  return true;\n}\n", "nl": "Remove the details of a submitted proxy entity"}
{"code": "public AsyncCatchOptions withProbability(double probability){\n  this.probability=probability;\n  return this;\n}\n", "nl": "Set a capture probability before switching balls or the minimum probability for a specific ball"}
{"code": "@Override public void close(){\n}\n", "nl": "Close this serializer"}
{"code": "public SVNRemoteResourcePropertySource(ISVNRemoteResource resource){\n  this.resource=resource;\n}\n", "nl": "Create a PropertySource and store its resource"}
{"code": "final public String browser(){\n  return this.getHeader(\"user-agent\");\n}\n", "nl": "get the user-agent of browser"}
{"code": "public void addListener(CacheListener<K,V> listener){\n  listeners.add(listener);\n}\n", "nl": "Adds an event listener for key removals"}
{"code": "private UByte(short value) throws NumberFormatException {\n  this.value=rangeCheck(value);\n}\n", "nl": "Create an <code>unsigned byte</code>"}
{"code": "@SuppressWarnings(\"unused\") public void addSlide(SlideFragment slideFragment,MessageButtonBehaviour messageButtonBehaviour){\n  adapter.addItem(slideFragment);\n  messageButtonBehaviours.put(adapter.getLastItemPosition(),messageButtonBehaviour);\n}\n", "nl": "Add SlideFragment to IntroScreen"}
{"code": "public Coord minus(Coord coord){\n  return new Coord(x - coord.x,y - coord.y);\n}\n", "nl": "Substract to the instance x and y the values of the given coord"}
{"code": "private void initData(Context context){\n  scroller=new WheelScroller(getContext(),scrollingListener);\n}\n", "nl": "Initializes class data"}
{"code": "public String toString(){\n  String s=\"{\";\n  for (int j=0; j < size(); j++)   s+=(j == 0 ? \"\" : \",\") + get(j);\n  return s + \"}\";\n}\n", "nl": "get string"}
{"code": "public void clearShapes(){\n  sample2shape.clear();\n}\n", "nl": "erase shapes"}
{"code": "public final boolean useSkill(int skillId){\n  return useSkill(skillId,1);\n}\n", "nl": "Use skill with default level 1"}
{"code": "@Override public void onUIRefreshComplete(PtrFrameLayout frame){\n  mDrawable.stop();\n}\n", "nl": "perform UI after refresh"}
{"code": "public Date toJdkDate(){\n  return toJodaDateTime().toDate();\n}\n", "nl": "Converts dateUnit to JDK Date"}
{"code": "public LikesGetListQueryWithExtended skipOwn(Boolean value){\n  return unsafeParam(\"skip_own\",value);\n}\n", "nl": "Set skip own"}
{"code": "public static String readString(DataInputStream in) throws IOException {\n  int llength=in.readInt();\n  if (llength == -1)   return null;\n  byte a[]=new byte[llength];\n  in.readFully(a,0,llength);\n  return new String(a);\n}\n", "nl": "read String from DataInputStream motivation: readUTF can't print lines larger than USHORTMAX"}
{"code": "@PickTriggerResult public int fromGallery(){\n  return this.triggerPick(this.prepareGalleryIntent(),QiPick.REQ_GALLERY);\n}\n", "nl": "Launch gallery pick flow"}
{"code": "public String binarizeNumericAttributesTipText(){\n  return \"Just binarize numeric attributes instead of properly discretizing them.\";\n}\n", "nl": "Returns the tip text for this property"}
{"code": "public static String exceptionStackTraceToString(Exception ex){\n  StringWriter errors=new StringWriter();\n  ex.printStackTrace(new PrintWriter(errors));\n  return errors.toString();\n}\n", "nl": "Create a String from stacktrace"}
{"code": "public DatabaseGetChairsQuery(VkApiClient client,int facultyId){\n  super(client,\"database.getChairs\",GetChairsResponse.class);\n  facultyId(facultyId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "void agg2way(NetNode x,NetNode y){\n  x.nbr=y;\n  y.nbr=x;\n}\n", "nl": "agglomerate 2 nodes"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public boolean isVoiced(){\n  Allophone allophone=getAllophone();\n  return allophone.isVoiced();\n}\n", "nl": "Determine whether this is a voiced phone"}
{"code": "ActiveElectionState(State state){\n  setState(state);\n}\n", "nl": "construct this ActiveElectionState with the given State"}
{"code": "@Override public boolean isXIncludeAware(){\n  try {\n    return domParser.getFeature(XINCLUDE_FEATURE);\n  }\n catch (  SAXException exc) {\n    return false;\n  }\n}\n", "nl": "Gets the XInclude processing mode for this parser"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override protected String dateToString(DateTimeData date){\n  StringBuffer message=new StringBuffer(5);\n  append(message,date.year,4);\n  append(message,(char)date.utc,0);\n  return message.toString();\n}\n", "nl": "Converts year object representation to String"}
{"code": "public boolean contains(int legionId){\n  return legionsById.containsKey(legionId);\n}\n", "nl": "Returns true if legion is in cached by id"}
{"code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public MainViewModel(AppPreferences preferences){\n  this.preferences=preferences;\n}\n", "nl": "Create MainViewModel with preferences"}
{"code": "private int measureHeight(int measureSpec){\n  return MeasureSpec.getSize(measureSpec);\n}\n", "nl": "Determines the height of this view"}
{"code": "public void configureWith(ComponentConfiguration config){\n  verifyIsDisplayed();\n  configure(config);\n  confirm();\n}\n", "nl": "Method used to configure component with specified config in parameter"}
{"code": "public DistributedLogNamespaceBuilder statsLogger(StatsLogger statsLogger){\n  this._statsLogger=statsLogger;\n  return this;\n}\n", "nl": "Stats Logger used for stats collection"}
{"code": "public static void sendServerListFor(int accountId){\n  if (accountsOnLS.containsKey(accountId)) {\n    accountsOnLS.get(accountId).sendPacket(new SM_SERVER_LIST());\n  }\n}\n", "nl": "SM_SERVER_LIST call"}
{"code": "protected LogSegmentMetadata doCompleteAndCloseLogSegment(String inprogressZnodeName,long logSegmentSeqNo,long ledgerId,long firstTxId,long lastTxId,int recordCount,long lastEntryId,long lastSlotId) throws IOException {\n  Promise<LogSegmentMetadata> promise=new Promise<LogSegmentMetadata>();\n  doCompleteAndCloseLogSegment(inprogressZnodeName,logSegmentSeqNo,ledgerId,firstTxId,lastTxId,recordCount,lastEntryId,lastSlotId,promise);\n  return FutureUtils.result(promise);\n}\n", "nl": "Close log segment"}
{"code": "@Override public Intent tryLoad(TinkerApplication app,int tinkerFlag,boolean tinkerLoadVerifyFlag){\n  Intent resultIntent=new Intent();\n  long begin=SystemClock.elapsedRealtime();\n  tryLoadPatchFilesInternal(app,tinkerFlag,tinkerLoadVerifyFlag,resultIntent);\n  long cost=SystemClock.elapsedRealtime() - begin;\n  ShareIntentUtil.setIntentPatchCostTime(resultIntent,cost);\n  return resultIntent;\n}\n", "nl": "only main process can handle patch version change or incomplete"}
{"code": "private UByte(int value) throws NumberFormatException {\n  this.value=rangeCheck(value);\n}\n", "nl": "Create an <code>unsigned byte</code>"}
{"code": "public void removeAttributes(Collection<String> attributes){\n  attributeOrder.removeAll(attributes);\n  attribute2type.keySet().removeAll(attributes);\n  for (  String attribute : attributes) {\n    table.removeColumn(attribute);\n  }\n}\n", "nl": "remove a collection of attributes"}
{"code": "private void deleteStorePath(){\n  FileFactory.FileType fileType=FileFactory.getFileType(this.hdfsStorePath);\n  CarbonFile carbonFile=FileFactory.getCarbonFile(this.hdfsStorePath,fileType);\n  deleteRecursiveSilent(carbonFile);\n}\n", "nl": "this method will delete the store path"}
{"code": "public LikesGetListQueryWithExtended friendsOnly(Boolean value){\n  return unsafeParam(\"friends_only\",value);\n}\n", "nl": "Return only the current user's friends"}
{"code": "private void requestChangeLevel(Player activePlayer){\n  if (legionRestrictions.canChangeLevel(activePlayer)) {\n    Legion legion=activePlayer.getLegion();\n    activePlayer.getInventory().decreaseKinah(legion.getKinahPrice());\n    changeLevel(legion,legion.getLegionLevel() + 1,false);\n    addHistory(legion,legion.getLegionLevel() + \"\",LegionHistoryType.LEVEL_UP);\n  }\n}\n", "nl": "This method will handle the leveling up of a legion"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void initNavHelper(Context context){\n  this.mContext=context;\n  this.mNavBean=new NavigatorBean();\n}\n", "nl": "Private class Method"}
{"code": "public WallGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return the \"likes\" field"}
{"code": "public boolean isBatchingAckTrackerEmpty(){\n  boolean state=true;\n  for (  Consumer consumer : consumers) {\n    state&=((ConsumerImpl)consumer).isBatchingAckTrackerEmpty();\n  }\n  return state;\n}\n", "nl": "helper method that returns current state of data structure used to track acks for batch messages"}
{"code": "public boolean isSetAverageLoad(){\n  return __isset_bit_vector.get(__AVERAGELOAD_ISSET_ID);\n}\n", "nl": "Returns true if field averageLoad is set (has been assigned a value) and false otherwise"}
{"code": "public static <T>String createJSONStringFromPojo(Context context,T data){\n  Gson gson=new Gson();\n  return gson.toJson(data);\n}\n", "nl": "Method to convert pojo (Model obect) into json string"}
{"code": "public _DbLexer(java.io.Reader in){\n  this.zzReader=in;\n}\n", "nl": "Creates a new scanner"}
{"code": "public NotesDeleteQuery(VkApiClient client,UserActor actor,int noteId){\n  super(client,\"notes.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public GenericValue findByPrimaryKeyPartial(GenericPK primaryKey,Set<String> keys) throws GenericEntityException {\n  if (primaryKey == null) {\n    return null;\n  }\n  GenericValue genericValue=GenericValue.create(primaryKey);\n  genericDAO.partialSelect(genericValue,keys);\n  return genericValue;\n}\n", "nl": "Find a Generic Entity by its Primary Key and only returns the values requested by the passed keys (names)"}
{"code": "public LeadsCompleteQuery(VkApiClient client,UserActor actor,String vkSid,String secret){\n  super(client,\"leads.complete\",Complete.class);\n  accessToken(actor.getAccessToken());\n  vkSid(vkSid);\n  secret(secret);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof GraphView && ((GraphView)getViewer()).getSelectedEdges().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public Vector multiply(double factor){\n  return new Vector(x * factor,y * factor);\n}\n", "nl": "multiplication operator"}
{"code": "public WallReportCommentQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Reason for the complaint"}
{"code": "public SpaceClusterInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public NewsfeedGetMentionsQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getMentions\",GetMentionsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean toBoolean(String indicator,boolean defaultVal){\n  Boolean result=toBoolean(indicator);\n  return result != null ? result : defaultVal;\n}\n", "nl": "SCIPIO: Type conversion of Strings that resemble \"Y\" or \"N\" values to Boolean"}
{"code": "public DocsEditQuery(VkApiClient client,UserActor actor,int ownerId,int docId){\n  super(client,\"docs.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  docId(docId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void notifyAttackObservers(Creature creature){\n  notifyObservers(ObserverType.ATTACK,creature);\n}\n", "nl": "notify that creature attacking"}
{"code": "ParticipantHandle(TransactionParticipant preparedPart,long crashcount,StubId stubId,boolean persistent) throws RemoteException {\n  this(preparedPart,crashcount,stubId,persistent,-1,null,null);\n}\n", "nl": "Create a new node that is equivalent to that node"}
{"code": "public static ExpectedCondition<Boolean> elementNotPresent(final By bySelector){\n  return null;\n}\n", "nl": "Check if element located by specified By locator exists in DOM"}
{"code": "protected AccountSetPushSettingsQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n", "nl": "Set device id"}
{"code": "public static void main(String[] args){\n}\n", "nl": "<p>Title:main</p> <p>Description:<p>"}
{"code": "private void populateChildGallery(){\n  ArrayList<DataHolder> files=readGallery((GalleryActivity)getActivity());\n  System.gc();\n  mGalleryAdapter=new GalleryAdapter(getActivity(),R.layout.gridview_child_gallery_item,mGalleryType,files,mCacheManager,myContext.getFilePathsList(),myContext.getMaxPhoto());\n  mGalleryAdapter.setPhotoClickListener((GalleryActivity)getActivity());\n  mGalleryView.setAdapter(mGalleryAdapter);\n}\n", "nl": "function for reading the gallery files and folders and setting custom adapter for gallery grid view"}
{"code": "public boolean isUseInvertedIndex(){\n  return useInvertedIndex;\n}\n", "nl": "the isUseInvertedIndex"}
{"code": "public static Rule createReflexiveRule(String ruleId,RelationType relType,MindmapsGraph graph){\n  final int arity=relType.hasRoles().size();\n  if (arity != 2)   throw new IllegalArgumentException(ErrorMessage.RULE_CREATION_ARITY_ERROR.getMessage());\n  String body=Graql.var().isa(relType.getId()).rel(\"x\").rel(\"y\").toString() + \";\";\n  String head=Graql.var().isa(relType.getId()).rel(\"x\").rel(\"x\").toString() + \";\";\n  return graph.putRule(ruleId,body,head,graph.getMetaRuleInference());\n}\n", "nl": "create reflexive rule R(from: X, to: X) :- R(from: X,to: Y)"}
{"code": "public static void kickAccountFromGameServer(Account account){\n  for (  GameServerInfo gsi : getGameServers()) {\n    if (gsi.isAccountOnGameServer(account.getId())) {\n      gsi.getConnection().sendPacket(new SM_REQUEST_KICK_ACCOUNT(account.getId()));\n      break;\n    }\n  }\n}\n", "nl": "Helper method, used to kick account from any gameServer if it's logged in"}
{"code": "public boolean disableCharacteristicIndicate(){\n  return disableCharacteristicIndicate(getCharacteristic());\n}\n", "nl": "stop indicate"}
{"code": "public void actionPerformed(ActionEvent ev){\n  final Object choice=JOptionPane.showInputDialog(getViewer().getFrame(),\"Choose node shape\",\"MEGAN - Choose\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),SHAPES,SHAPES[0]);\n  if (choice != null)   execute(\"set nodeShape=\" + choice.toString() + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public static void registerKryoClasses(SparkConf conf){\n  List<Class<?>> classes=Arrays.asList((Class<?>)BooleanWritable.class,ByteWritable.class,DoubleWritable.class,FloatWritable.class,IntWritable.class,LongWritable.class,NullWritable.class,Text.class);\n  conf.registerKryoClasses((Class<?>[])classes.toArray());\n}\n", "nl": "Register the DataVec writable classes for Kryo"}
{"code": "public void handleDecode(String result){\n  playBeepSoundAndVibrate();\n  Toast.makeText(MyApplication.getContext(),result,Toast.LENGTH_SHORT).show();\n  restartQr();\n}\n", "nl": "QR scan result"}
{"code": "public AggregateConfig(Configuration config,String[] configArgs) throws ConfigurationException {\n  specific=ConfigurationProvider.getInstance(configArgs);\n  common=config;\n}\n", "nl": "Create an AggregateConfig"}
{"code": "public int modify_file1(String appender_file_id,long file_offset,byte[] file_buff) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.modify_file(parts[0],parts[1],file_offset,file_buff);\n}\n", "nl": "modify appender file to storage server (by file buff)"}
{"code": "@Override public void init(String[] args,String name,String configFile) throws ContainerException {\n  this.name=name;\n  this.configFile=configFile;\n  this.stores=new LinkedHashMap<Store,Session>();\n  this.pollTimer=Executors.newScheduledThreadPool(1);\n}\n", "nl": "Initialize the container"}
{"code": "public void testCache() throws Exception {\n  FileDownloader downloader=Mockito.mock(FileDownloader.class);\n  Mockito.when(downloader.download(Matchers.any(File.class))).thenReturn(ImmutableList.of(Pair.create(myDistributionFile,myDescription)));\n  DistributionService service=new DistributionService(downloader,CACHE_PATH,myDistributionFileUrl);\n  service.getSupportedDistributionForApiLevel(19);\n  service.getDistributionForApiLevel(21);\n  Mockito.verify(downloader).download(Matchers.any(File.class));\n}\n", "nl": "Test that we don't download on every request"}
{"code": "public PhotosCreateAlbumQuery commentsDisabled(Boolean value){\n  return unsafeParam(\"comments_disabled\",value);\n}\n", "nl": "Set comments disabled"}
{"code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n", "nl": "Creates the default cumulative probability density test input values"}
{"code": "public static int[] shuffle(int[] intArray){\n  if (intArray == null) {\n    return null;\n  }\n  return shuffle(intArray,getRandom(intArray.length));\n}\n", "nl": "Shuffling algorithm, Randomly permutes the specified int array using a default source of randomness"}
{"code": "public CommandManagerFX(IDirector dir,IDirectableViewer viewer,String commandsPath){\n  this(dir,viewer,new String[]{commandsPath},false);\n}\n", "nl": "construct a parser and load all commands found for the given path"}
{"code": "public static float reduce(float startValue,float endValue,float time){\n  if (startValue < endValue)   throw new IllegalArgumentException(\"End size can't be larger than start size.\");\n  return endValue + (startValue - endValue) * (1 - time);\n}\n", "nl": "Reduce value from startValue to endValue"}
{"code": "public void onEnterZone(ZoneInstance zoneInstance){\n}\n", "nl": "Will be called by ZoneManager when creature enters specific zone"}
{"code": "@Override public long limit(){\n  return fileLength >>> 2;\n}\n", "nl": "length of array (file length/4)"}
{"code": "private UByte(long value) throws NumberFormatException {\n  this.value=rangeCheck(value);\n}\n", "nl": "Create an <code>unsigned byte</code>"}
{"code": "public PhotosGetAllQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAll\",GetAllResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void handleFieldInits(soot.SootMethod sootMethod){\n  ArrayList<FieldDecl> fieldInits=((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).getFieldInits();\n  if (fieldInits != null) {\n    handleFieldInits(fieldInits);\n  }\n}\n", "nl": "adds any needed field inits"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=previous;\");\n}\n", "nl": "action to be performed"}
{"code": "public void afterMemberRemoved(MemberRemovedEvent memberRemovedEvent){\n}\n", "nl": "Called after target member is removed"}
{"code": "private static String joinPath(String path1,String path2){\n  File file1=new File(path1);\n  File file2=new File(file1,path2);\n  return file2.getPath();\n}\n", "nl": "IO combining two paths"}
{"code": "public SaveHeaderGroup copy(){\n  SaveHeaderGroup clone=new SaveHeaderGroup();\n  clone.headers.addAll(this.headers);\n  return clone;\n}\n", "nl": "Returns a copy of this object"}
{"code": "@Override public boolean isAlreadyMatched(){\n  return false;\n}\n", "nl": "is the entry returned already matched against the searching template currently is true if the underlying scan made by CacheManager::EntriesIter"}
{"code": "public int addAdjustment(GenericValue adjustment){\n  adjustments.add(adjustment);\n  return adjustments.indexOf(adjustment);\n}\n", "nl": "Add an adjustment to the order; don't worry about setting the orderId, orderItemSeqId or orderAdjustmentId; they will be set when the order is created"}
{"code": "public static String toTree(@NotNull List<NlComponent> roots){\n  return toTree(roots,false);\n}\n", "nl": "Dumps out the component tree, recursively"}
{"code": "public void scheduleValueForSending(){\n  this.sendValue=true;\n}\n", "nl": "Informs the scheduler, that next time it wakes up, it should send the value of the source data tag"}
{"code": "public void uploadNewFile(Context context,Account account,String localPath,String remotePath,int behaviour,String mimeType,boolean createRemoteFile,int createdBy){\n  uploadNewFile(context,account,new String[]{localPath},new String[]{remotePath},new String[]{mimeType},behaviour,createRemoteFile,createdBy);\n}\n", "nl": "Call to upload a new single file"}
{"code": "private DownloadManager(){\n  mDownloaderMap=new LinkedHashMap<String,Downloader>();\n}\n", "nl": "private construction"}
{"code": "public static boolean isInited(){\n  return inited;\n}\n", "nl": "Is VanillaDB initialized ?"}
{"code": "public static Set<String> convertArrayToSet(String[] array){\n  Set<String> resultSet=new HashSet<String>(array.length);\n  Collections.addAll(resultSet,array);\n  return resultSet;\n}\n", "nl": "Transforms array of String objects to Set"}
{"code": "public void removeChangingListener(OnWheelChangedListener listener){\n  changingListeners.remove(listener);\n}\n", "nl": "Removes wheel changing listener"}
{"code": "public boolean hasDataConnector(){\n  return fileName != null && fileName.length() > 0 && (fileType.toString().startsWith(\"RMA\") || fileType.toString().startsWith(\"DAA\") || fileType == Type.MEGAN_SERVER_FILE);\n}\n", "nl": "does file have  a data connector associated with it"}
{"code": "public void addPreAllocatedServiceUnit(String suName,ResourceQuota quota){\n  this.preAllocatedBundles.add(suName);\n  this.preAllocatedQuota.add(quota);\n  estimateLoadPercentage();\n}\n", "nl": "Pre-allocate a ServiceUnit to this ResourceUnit"}
{"code": "private void clearIssueReferences(String launchId){\n  List<FailReferenceResource> issues=issuesRepository.findAllLaunchIssues(launchId);\n  issuesRepository.delete(issues);\n}\n", "nl": "Clear failReference collections by specified launch id"}
{"code": "@deprecated public ComposedCharIter(boolean compat,int options){\n  if (compat) {\n    this.n2impl=Norm2AllModes.getNFKCInstance().impl;\n  }\n else {\n    this.n2impl=Norm2AllModes.getNFCInstance().impl;\n  }\n}\n", "nl": "/*    "}
{"code": "public MessagesGetLastActivityQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"messages.getLastActivity\",LastActivity.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Map<String,Object> returnSuccess(String successMessage){\n  return returnMessage(ModelService.RESPOND_SUCCESS,successMessage);\n}\n", "nl": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static void createSchemaFiles(String filter) throws Exception {\n  createSchemaFiles(null,false,filter);\n}\n", "nl": "Create and load the data and query schema files used for testing"}
{"code": "@Deployment(resources={\"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.parallelGatewayNoEndProcess.bpmn20.xml\"}) public void testProcessCompleted_ParallelGatewayNoEnd() throws Exception {\n  this.runtimeService.startProcessInstanceByKey(\"noEndProcess\");\n  assertEquals(\"ActivitiEventType.PROCESS_COMPLETED was expected 1 time.\",1,listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());\n}\n", "nl": "Test +-->Task1 Start-<> +-->Task1 process on PROCESS_COMPLETED event"}
{"code": "public void testMappingCharFilter() throws Exception {\n  send(\"analyze\",\"{text: foo bar, analyzer: {charFilters: [{class: Mapping, mappingFileContents: '\\\"bar\\\" => \\\"foo\\\"'}], tokenizer: Whitespace}}\");\n  assertEquals(\"foo foo\",justTokens());\n}\n", "nl": "Exercises the xxxFileContents hack, for a char filter"}
{"code": "public void writeOffset(long offset) throws IOException {\n  dataOutputStream.writeLong(offset);\n}\n", "nl": "Write the offset to the file"}
{"code": "public static void f(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg,throwable);\n}\n", "nl": "Send a FATAL ERROR log message"}
{"code": "public void push(Map<K,V> existingMap){\n  if (existingMap == null) {\n    throw new IllegalArgumentException(\"Error: cannot push null existing Map onto a MapContext\");\n  }\n  this.stackList.add(0,existingMap);\n}\n", "nl": "Puts an existing Map on the top of the stack (top meaning will override lower layers on the stack)"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "private void afterSuccessfulBulkExecution(IReplicationInBatchContext context){\n  if (_operationStatisticsHandler != null) {\n    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());\n    List<BulkItem> bulk=context.getPendingContext();\n    sourceChannelStatistics.addSuccessfulOperationCount(bulk);\n  }\n}\n", "nl": "Invoked after bulk execution in EDS to update mirror statistics"}
{"code": "private static Bitmap byteToBitmap(byte[] b){\n  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);\n}\n", "nl": "convert byte array to Bitmap"}
{"code": "public boolean hasDTD(){\n  return hasDTD;\n}\n", "nl": "Returns the boolean value to inform id DTD was found in the XML file or not"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public MarketCreateCommentQuery stickerId(Integer value){\n  return unsafeParam(\"sticker_id\",value);\n}\n", "nl": "Sticker id"}
{"code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n", "nl": "Outputs a debug message if debugging is turned on"}
{"code": "public boolean hasRemote(){\n  return org.tigris.subversion.svnclientadapter.utils.SVNStatusUtils.hasRemote(this);\n}\n", "nl": "Returns if the resource has a remote counter-part"}
{"code": "private void tryScrollBackToTopAbortRefresh(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "@Override public void put(int index,byte[] value){\n  System.arraycopy(value,0,datastore,((index) * sizeOfEachElement),sizeOfEachElement);\n}\n", "nl": "This method will be used to insert key to store"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public FaveRemoveGroupQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"fave.removeGroup\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  super.destroyView();\n}\n", "nl": "ask view to destroy itself"}
{"code": "public static void enableLogs(){\n  verbose=true;\n}\n", "nl": "Enable logs on development"}
{"code": "private void checkConfiguration(){\n  if (configuration == null) {\n    throw new IllegalStateException(ERROR_NOT_INIT);\n  }\n}\n", "nl": "Checks if ImageLoader's configuration was initialized"}
{"code": "public static void loadImage(final Context _context,final ImageView _imageView,final String _imageUrl,final int _placeHolderResource){\n  getBitmapLoader(_context,_imageUrl,_placeHolderResource).centerCrop().into(_imageView);\n}\n", "nl": "Allows to load an image with Glide"}
{"code": "@Override public int hashCode(){\n  return this.id.hashCode();\n}\n", "nl": "Hashcode method - keep consistent with equals()!"}
{"code": "public SourceSinkDefinition(SootMethodAndClass am){\n  this(am,null,null,null);\n}\n", "nl": "Creates a new instance of the MethodSourceSinkDefinition class"}
{"code": "public static int convert(String stringValue){\n  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {\n    return MISSING_VALUE;\n  }\n  Matcher matcher=COMMA_PATTERN.matcher(stringValue);\n  return Integer.parseInt(matcher.replaceAll(\"\"));\n}\n", "nl": "Returns a float that is parsed from the given String <p> We remove any commas before parsing"}
{"code": "public void addMessages(List<? extends Message> messages){\n  if (SHOW_LOGS)   Logger.v(TAG,\">> addMessages, lock \" + messages);\n  mQueueLock.lock(TAG);\n  mPlayerMessagesQueue.addAll(messages);\n  mQueueLock.notify(TAG);\n  if (SHOW_LOGS)   Logger.v(TAG,\"<< addMessages, unlock \" + messages);\n  mQueueLock.unlock(TAG);\n}\n", "nl": "Use it if you need to add a multiple messages"}
{"code": "public Observable<FirebaseChildEvent> observeChildRemoved(final Query firebaseRef){\n  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.REMOVED));\n}\n", "nl": "Creates an observable only for the child removed method"}
{"code": "public UsersGetQuery(VkApiClient client){\n  super(client,\"users.get\",Utils.buildParametrizedType(List.class,UserXtrCounters.class));\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static GenericEntity createGenericEntity(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){\n  if (modelEntity == null) {\n    throw new IllegalArgumentException(\"Cannot create a GenericEntity with a null modelEntity parameter\");\n  }\n  GenericEntity newEntity=new GenericEntity();\n  newEntity.init(delegator,modelEntity,fields);\n  return newEntity;\n}\n", "nl": "Creates new GenericEntity from existing Map"}
{"code": "public boolean aggregateContains(int row,VisualItem member){\n  return getAggregatedRow(row,member) >= 0;\n}\n", "nl": "Indicates if an item is a member of the aggregate at the given row"}
{"code": "public void init(Context context){\n  boolean isNightModel=PersistenceUtils.isNightModel(context);\n  AppCompatDelegate.setDefaultNightMode(isNightModel ? AppCompatDelegate.MODE_NIGHT_YES : AppCompatDelegate.MODE_NIGHT_NO);\n}\n", "nl": "ths method should be called in Application onCreate method"}
{"code": "protected void startBookKeeper() throws Exception {\n  zkc=MockZooKeeper.newInstance();\n  for (int i=0; i < numBookies; i++) {\n    ZkUtils.createFullPathOptimistic(zkc,\"/ledgers/available/192.168.1.1:\" + (5000 + i),\"\".getBytes(),null,null);\n  }\n  zkc.create(\"/ledgers/LAYOUT\",\"1\\nflat:1\".getBytes(),null,null);\n  bkc=new MockBookKeeper(baseClientConf,zkc);\n}\n", "nl": "Start cluster"}
{"code": "@deprecated public String toString(){\n  return this.string;\n}\n", "nl": "/*     "}
{"code": "public Calculable(){\n}\n", "nl": "Create a new Calculable"}
{"code": "public LinearLayoutManager(Context context){\n  this(context,VERTICAL,false);\n}\n", "nl": "Creates a vertical LinearLayoutManager"}
{"code": "public static void splitFilePath(String sourcePath,List<String> partitionsFiles,String separator){\n  if (StringUtils.isNotEmpty(sourcePath)) {\n    String[] files=sourcePath.split(separator);\n    for (    String file : files) {\n      partitionsFiles.add(file);\n    }\n  }\n}\n", "nl": "split sourcePath by comma"}
{"code": "public boolean isBcontains(int taxon){\n  return B.get(taxon);\n}\n", "nl": "does B part containt taxon?"}
{"code": "private void validateRoleType(RoleTypeImpl roleType){\n  if (!ValidateGlobalRules.validateHasSingleIncomingHasRoleEdge(roleType))   errorsFound.add(ErrorMessage.VALIDATION_ROLE_TYPE.getMessage(roleType.getId()));\n}\n", "nl": "Validation rules exclusive to role types"}
{"code": "public GatheringCursor queryGatheringItem(long id){\n  return mHelper.queryGatheringItem(id);\n}\n", "nl": "GATHERING QUERIES"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MISSION_SYSTEMMSG_ACQUIRE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300930,value0);\n}\n", "nl": "Campaign quest acquired: %0"}
{"code": "@Override public void createApplication(Application.Name applicationName){\n}\n", "nl": "Creates an application at top level"}
{"code": "static void changeViewVisibilityVisible(View view){\n  if (view != null && view.getVisibility() == View.GONE)   view.setVisibility(View.VISIBLE);\n}\n", "nl": "Change view visibility"}
{"code": "public void onMove(){\n  notifyAIOnMove();\n  updateZone();\n}\n", "nl": "Perform tasks on Creature move in progress"}
{"code": "private int dip2px(float dip){\n  float v=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,getResources().getDisplayMetrics());\n  return (int)(v + 0.5f);\n}\n", "nl": "unit dip to px"}
{"code": "protected UserDetails createBasicUser(String username,String givenName,String surname,String commonName){\n  logger.info(\"Creating user: {}\",username);\n  String randomPassword=RandomStringUtils.randomAlphanumeric(15);\n  User userWithRole=userService.createUserWithRole(username,randomPassword,Role.USER,givenName,surname,commonName);\n  logger.debug(\"Manually setting created by user to system user because at this point, there isn't an authenticated user context\");\n  userService.updateCreatedByUserToSystemUser(userWithRole);\n  return new UserDetailsImpl(userWithRole);\n}\n", "nl": "Create user with the username"}
{"code": "private boolean isTestAnnotated(SpringFixture fixture){\n  return fixture != null;\n}\n", "nl": "Is annotated with fixture"}
{"code": "public boolean canFindAll(){\n  return true;\n}\n", "nl": "does this searcher support find all?"}
{"code": "public static void createAircraft(AirMapAircraft aircraft,AirMapCallback<AirMapAircraft> listener){\n  String url=String.format(pilotAircraftUrl,AirMap.getUserId());\n  AirMap.getClient().post(url,aircraft.getAsParamsPost(),new GenericOkHttpCallback(listener,AirMapAircraft.class));\n}\n", "nl": "Create an aircraft for the authenticated user"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapTraffic && ((AirMapTraffic)o).getId().equals(getId());\n}\n", "nl": "Comparison based on ID"}
{"code": "public static void initManager(Context context){\n  if (mInstance == null) {\n    mInstance=new AssetsDatabaseManager(context);\n  }\n}\n", "nl": "Initialize AssetsDatabaseManager"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static CompoundTag read(File file) throws IOException {\n  return read(file,ByteOrder.BIG_ENDIAN);\n}\n", "nl": "A Named Binary Tag library for Nukkit Project"}
{"code": "public boolean duplicateSample(String sample,String newName,boolean allowReplaceSample){\n  if (allowReplaceSample || !table.rowKeySet().contains(newName)) {\n    Map<String,Object> row=table.row(sample);\n    return addSample(newName,row,true,false);\n  }\n  return false;\n}\n", "nl": "duplicate an existing sample"}
{"code": "int indexOf(Node child,Node parent){\n  if (child.getParentNode() != parent)   return -1;\n  int i=0;\n  for (Node node=parent.getFirstChild(); node != child; node=node.getNextSibling()) {\n    i++;\n  }\n  return i;\n}\n", "nl": "what is the index of the child in the parent"}
{"code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0,0.001d,0.01d,0.025d,0.05d,0.1d,0.999d,0.990d,0.975d,0.950d,0.900d,1};\n}\n", "nl": "Creates the default inverse cumulative probability test input values"}
{"code": "public void addGlobalAttributeDecl(XSAttributeDecl decl){\n  fGlobalAttrDecls.put(decl.fName,decl);\n  decl.setNamespaceItem(this);\n}\n", "nl": "register one global attribute"}
{"code": "public BoardGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.getComments\",GetCommentsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void readDataFile(String content) throws DataFileException {\n  if (content == null || content.length() <= 0)   throw new IllegalStateException(\"Content is empty, can't read file\");\n  ByteArrayInputStream bis=new ByteArrayInputStream(content.getBytes());\n  readDataFile(bis,null);\n}\n", "nl": "Populates (or reloads) the data file with the text of the given content"}
{"code": "public FriendsGetQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){\n  super(client,\"friends.get\",GetFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static int dipToPX(final Context ctx,float dip){\n  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,ctx.getResources().getDisplayMetrics());\n}\n", "nl": "px = dp * (dpi / 160)"}
{"code": "public PhotosGetMessagesUploadServerQuery(VkApiClient client,Actor actor){\n  super(client,\"photos.getMessagesUploadServer\",PhotoUpload.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public FriendsGetByPhonesQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getByPhones\",Utils.buildParametrizedType(List.class,UserXtrPhone.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public int truncate_file(String group_name,String appender_filename) throws IOException, MyException {\n  final long truncated_file_size=0;\n  return this.truncate_file(group_name,appender_filename,truncated_file_size);\n}\n", "nl": "truncate appender file to size 0 from storage server"}
{"code": "public GroupsGetMembersQueryWithFields(VkApiClient client,UserField... fields){\n  super(client,\"groups.getMembers\",GetMembersFieldsResponse.class);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private int dataPos(long index){\n  return (int)(index & BIT_MASK);\n}\n", "nl": "get position in current array"}
{"code": "public void paint(Graphics graphics){\n  super.paint(graphics);\n  Graphics2D gc=(Graphics2D)graphics;\n  gc.setColor(Color.WHITE);\n  gc.fill(getVisibleRect());\n  draw(gc,null);\n}\n", "nl": "draw the legend"}
{"code": "public int store(GenericValue value) throws GenericEntityException {\n  if (value == null) {\n    return 0;\n  }\n  return genericDAO.update(value);\n}\n", "nl": "Store the Entity from the GenericValue to the persistent store"}
{"code": "private static File createReserveDiskCacheDir(Context context){\n  File cacheDir=StorageUtils.getCacheDirectory(context,false);\n  File individualDir=new File(cacheDir,\"uil-images\");\n  if (individualDir.exists() || individualDir.mkdir()) {\n    cacheDir=individualDir;\n  }\n  return cacheDir;\n}\n", "nl": "Creates reserve disk cache folder which will be used if primary disk cache folder becomes unavailable"}
{"code": "private void initThreadPoolSize(){\n  try {\n    thread_pool_size=Integer.parseInt(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.NUM_CORES_LOADING,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL));\n  }\n catch (  NumberFormatException e) {\n    thread_pool_size=Integer.parseInt(CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);\n  }\n}\n", "nl": "This method will initialize the thread pool size to be used for creating the max number of threads for a job"}
{"code": "public GroupsSearchQuery sort(GroupsSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public ModelKeyMap findKeyMap(String fieldName){\n  for (  ModelKeyMap keyMap : keyMaps) {\n    if (keyMap.getFieldName().equals(fieldName))     return keyMap;\n  }\n  return null;\n}\n", "nl": "Find a KeyMap with the specified fieldName"}
{"code": "public void expand(TreePath[] paths){\n  for (  TreePath path : paths) {\n    this.expand((DefaultMutableTreeNode)path.getLastPathComponent());\n  }\n}\n", "nl": "expand an array of paths"}
{"code": "public boolean isRevive(){\n  return getItemId() == ItemId.ITEM_REVIVE || getItemId() == ItemId.ITEM_MAX_REVIVE;\n}\n", "nl": "Check if the item it's a revive"}
{"code": "public static boolean isValidEmail(@NonNull String email){\n  return !TextUtils.isEmpty(email) && android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();\n}\n", "nl": "Mehtod to cheeck valid email"}
{"code": "public static boolean removeFromCache(String imageUri,DiscCacheAware discCache){\n  File image=discCache.get(imageUri);\n  return image.delete();\n}\n", "nl": "Removed cached image file from disc cache (if image was cached in disc cache before)"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public StatusGetQuery groupId(Integer value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Set group id"}
{"code": "public static void w(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  Log.w(tag,msg,throwable);\n}\n", "nl": "Send a WARNING log message"}
{"code": "public WeaponCursor queryWeapon(){\n  return mHelper.queryWeapon();\n}\n", "nl": "WEAPON QUERIES"}
{"code": "public AirMapStatus(JSONObject statusJson){\n  constructFromJson(statusJson);\n}\n", "nl": "Initialize an AirMapStatus from JSON"}
{"code": "@After public final void afterTest(){\n  this.testMessageListenerContainer.stop();\n}\n", "nl": "After each tests"}
{"code": "public boolean decrypt(byte[] data,int offset,int length){\n  cipher.decipher(data,offset,length);\n  return verifyChecksum(data,offset,length);\n}\n", "nl": "Decrypt given data"}
{"code": "public void init(ISpaceProxy space,Transaction txn,AbstractDMLQuery query) throws Exception {\n  IQueryResultSet<IEntryPacket> tableEntries=getTemplate(query.getQueryResultType()).readMultiple(space,txn,Integer.MAX_VALUE,query.getReadModifier());\n  if (_joinCondition != null)   setEntriesCursor(_joinCondition.createIndex(this,tableEntries));\n else   setEntriesCursor(new ScanCursor(tableEntries));\n}\n", "nl": "Fetch the entries from space that match this table condition"}
{"code": "public boolean canZoomInMoreY(){\n  return (mScaleY < mMaxScaleY);\n}\n", "nl": "Returns true if the chart is not yet fully zoomed in on the y-axis"}
{"code": "@ObjectiveCName(\"updateList:\") private void updateList(Collection entries){\n  Map<String,ArrayList<Integer>> oldStructure=this.beforeChange();\n  this.record.set(entries);\n  this.afterChange(oldStructure);\n}\n", "nl": "Useful entry point for diffing previous list and new one to get entries added, removed and moved"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"select=all;\");\n}\n", "nl": "action to be performed"}
{"code": "public boolean isFullSplitSystem(Taxa taxa){\n  BitSet bits=taxa.getBits();\n  for (Iterator it=iterator(); it.hasNext(); ) {\n    Split split=(Split)it.next();\n    if (!split.getTaxa().equals(bits))     return false;\n  }\n  return true;\n}\n", "nl": "returns true, if all splits contain all taxa"}
{"code": "public boolean isCDATAAttribute(QName elName,QName atName){\n  int elDeclIdx=getElementDeclIndex(elName);\n  return !(getAttributeDecl(elDeclIdx,fAttributeDecl) && fAttributeDecl.simpleType.type != XMLSimpleType.TYPE_CDATA);\n}\n", "nl": "Returns whether the given attribute is of type CDATA or not"}
{"code": "public void startWrite(){\n  writerIterator=null;\n}\n", "nl": "call this when starting to write formatted output"}
{"code": "public LikesDeleteQuery(VkApiClient client,UserActor actor,LikesType type,int itemId){\n  super(client,\"likes.delete\",DeleteResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public TIntObjectIterator(TIntObjectHashMap<V> map){\n  super(map);\n  this._map=map;\n}\n", "nl": "Creates an iterator over the specified map"}
{"code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isWifiConnected(Context context){\n  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  return cm != null && cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;\n}\n", "nl": "Check if we have a WiFi connection"}
{"code": "public void onScrollToClose(){\n}\n", "nl": "Invoke when scroll percent over the threshold for the first time"}
{"code": "public void reset(){\n  is_Dead=false;\n  Un_Dead_Cult=500;\n  is_Un_Dead=true;\n}\n", "nl": "reset unit information"}
{"code": "public void clear(){\n  maxValue=0L;\n  minValue=Long.MAX_VALUE;\n  for (int i=0, size=counts.length; i < size; i++) {\n    counts[i]=0L;\n  }\n}\n", "nl": "Clear the list of interval counters"}
{"code": "public void removeUpdateListener(final BaseListener<? extends Tag> pListener){\n  listeners.remove(pListener);\n}\n", "nl": "Removes (synchronized) a previously registered <code>DataTagUpdateListener</code>"}
{"code": "private double mean(double[] vec){\n  double result=0;\n  for (int i=0; i < vec.length; i++)   result+=vec[i];\n  return result / vec.length;\n}\n", "nl": "the mean of the values in the double array"}
{"code": "protected void writeShort(int value) throws IOException {\n  out.write(value & 0xff);\n  out.write((value >> 8) & 0xff);\n}\n", "nl": "Write 16-bit value to output stream, LSB first"}
{"code": "public MessagesSetActivityQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id"}
{"code": "public int size(){\n  return counterMap.size();\n}\n", "nl": "The number of keys in this CounterMap (not the number of key-value entries -- use totalSize() for that)"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set show-insertions=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.setShowInsertions(show);\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Deprecated public Builder enablePermissive(){\n  return this;\n}\n", "nl": "permissive mode is enabled by default"}
{"code": "@RequestMapping(value=ClientUris.SERVER_ROUTE,method=RequestMethod.GET) public ServerRouteResp route(@RequestParam(\"appName\") String appName,@RequestParam(\"clientPid\") Integer clientPid,HttpServletRequest req){\n  Response<ServerRouteResp> routeResp=clusterService.routeServer(appName,req.getRemoteAddr(),clientPid);\n  if (!routeResp.isSuccess()) {\n    return null;\n  }\n  return routeResp.getData();\n}\n", "nl": "Route a server to client"}
{"code": "public SM_MACRO_LIST(Player player){\n  this.player=player;\n}\n", "nl": "Constructs new <tt>SM_MACRO_LIST </tt> packet"}
{"code": "public void outASTWhileNode(ASTWhileNode node){\n  if (nodeStack.isEmpty())   throw new RuntimeException(\"trying to remove node from empty stack: ClosestBreakTargetFinder\");\n  nodeStack.remove(nodeStack.size() - 1);\n}\n", "nl": "Following methods remove the last node from the end of the nodeStack arrayList Since the previous node now becomes the closest target to an implicit break or continue"}
{"code": "NewProjectDescriptor withPackageName(@NotNull String pkg){\n  myPkg=pkg;\n  return this;\n}\n", "nl": "Set a custom package to use in the new project"}
{"code": "protected static Map<String,String> convertHeaders(Header[] headers){\n  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);\n  for (int i=0; i < headers.length; i++) {\n    result.put(headers[i].getName(),headers[i].getValue());\n  }\n  return result;\n}\n", "nl": "Converts Headers array to Map"}
{"code": "public void removeTag(String aName){\n  int tagIndex;\n  if ((tagIndex=searchForTag(aName)) != -1) {\n    mTagList.remove(tagIndex);\n  }\n}\n", "nl": "remove the tag named <code>aName</code>"}
{"code": "public static Bitmap byteToBitmap(byte[] b){\n  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);\n}\n", "nl": "convert byte array to Bitmap"}
{"code": "void submit(ProcessAndDisplayImageTask task){\n  initExecutorsIfNeed();\n  taskExecutorForCachedImages.execute(task);\n}\n", "nl": "Submits task to execution pool"}
{"code": "void remove(int key){\n  if (cache != null) {\n    cache.remove(key);\n  }\n}\n", "nl": "Remove a ViewModel from the specified key"}
{"code": "private boolean matchesPartPhoneNumber(Item tokenItem,String tokenVal){\n  String n_name=(String)tokenItem.findFeature(\"n.name\");\n  String n_n_name=(String)tokenItem.findFeature(\"n.n.name\");\n  String p_name=(String)tokenItem.findFeature(\"p.name\");\n  String p_p_name=(String)tokenItem.findFeature(\"p.p.name\");\n  boolean matches3DigitsP_name=matches(threeDigitsPattern,p_name);\n  return ((matches(threeDigitsPattern,tokenVal) && ((!matches(digitsPattern,p_name) && matches(threeDigitsPattern,n_name) && matches(fourDigitsPattern,n_n_name)) || (matches(sevenPhoneNumberPattern,n_name)) || (!matches(digitsPattern,p_p_name) && matches3DigitsP_name && matches(fourDigitsPattern,n_name)))) || (matches(fourDigitsPattern,tokenVal) && (!matches(digitsPattern,n_name) && matches3DigitsP_name && matches(threeDigitsPattern,p_p_name))));\n}\n", "nl": "Returns true if the given token matches part of a phone number"}
{"code": "public RoomController(final GameServicesMultiplayer multiplayer,final Future<Void> future){\n  this.multiplayer=multiplayer;\n  this.future=future;\n  session=new AndroidGameSession(multiplayer,future);\n}\n", "nl": "Created on main thread!"}
{"code": "public boolean isApplicable(){\n  ChartViewer viewer=(ChartViewer)getViewer();\n  return viewer.getChartData().getNumberOfSeries() > 0 && viewer.getChartSelection().getSelectedSeries().size() < viewer.getChartData().getNumberOfSeries();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public AudioRestoreQuery(VkApiClient client,UserActor actor,int audioId){\n  super(client,\"audio.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioId(audioId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void firstTimeExperienceComplete() throws LoginFailedException, RemoteServerException {\n  markTutorial(TutorialStateOuterClass.TutorialState.FIRST_TIME_EXPERIENCE_COMPLETE);\n}\n", "nl": "The last step, mark the last tutorial state as completed"}
{"code": "protected void notifyChangingListeners(int oldValue,int newValue){\n  for (  OnWheelChangedListener listener : changingListeners) {\n    listener.onChanged(this,oldValue,newValue);\n  }\n}\n", "nl": "Notifies changing listeners"}
{"code": "public SM_MAIL_SERVICE(int letterId,int attachmentType){\n  super(null);\n  this.serviceId=5;\n  this.letterId=letterId;\n  this.attachmentType=attachmentType;\n}\n", "nl": "used when getting attached items"}
{"code": "public final boolean isAlternatingDeviceState(){\n  return (myAlternate & CFG_DEVICE_STATE) != 0;\n}\n", "nl": "Returns true if the device state is alternated"}
{"code": "public boolean isApplicable(){\n  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX && getViewer().getPcoaTab().isIs3dMode();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean validKey(String cacheName,Object key){\n  UtilCache<?,?> cache=findCache(cacheName);\n  if (cache != null) {\n    if (cache.containsKey(key))     return true;\n  }\n  return false;\n}\n", "nl": "Checks for a non-expired key in a specific cache"}
{"code": "public static float roundToNextSignificant(double number){\n  final float d=(float)Math.ceil((float)Math.log10(number < 0 ? -number : number));\n  final int pw=1 - (int)d;\n  final float magnitude=(float)Math.pow(10,pw);\n  final long shifted=Math.round(number * magnitude);\n  return shifted / magnitude;\n}\n", "nl": "rounds the given number to the next significant number"}
{"code": "@Override public Object clone(){\n  GenericEntity newEntity=new GenericEntity();\n  newEntity.init(this);\n  newEntity.setDelegator(internalDelegator);\n  return newEntity;\n}\n", "nl": "Clones this GenericEntity, this is a shallow clone & uses the default shallow HashMap clone"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"copyImage;\");\n}\n", "nl": "action to be performed"}
{"code": "public void stopScrolling(){\n  scroller.stopScrolling();\n}\n", "nl": "Stops scrolling"}
{"code": "private void tryScrollBackToTopWhileLoading(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "public void unlockUserInput(){\n  isLocked=false;\n  if (commandManager != null)   commandManager.setEnableCritical(true);\n  getTabbedPane().setEnabled(true);\n  setCursor(Cursor.getDefaultCursor());\n}\n", "nl": "ask view to allow user input"}
{"code": "FloatList(){\n  value=0.0F;\n  next=null;\n  prev=null;\n}\n", "nl": "Creates a new node"}
{"code": "private byte[] RIPEMD160(byte[] tobeHashed){\n  RIPEMD160Digest digester=new RIPEMD160Digest();\n  byte[] retValue=new byte[digester.getDigestSize()];\n  digester.update(tobeHashed,0,tobeHashed.length);\n  digester.doFinal(retValue,0);\n  byte[] version=new byte[]{0x00};\n  return concateByteArray(version,retValue);\n}\n", "nl": "This method does all the RipeMD 160 hashing function, and after that hash has taken place, it prepends the version  byte to the beginning of the Byte array"}
{"code": "@CheckReturnValue public AddCmd all(){\n  Preconditions.checkState(Iterables.isEmpty(files),\"'all' and passing files is incompatible\");\n  return new AddCmd(force,true,files);\n}\n", "nl": "Add all the unstagged files to the index"}
{"code": "@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {\n}\n", "nl": "A notation declaration"}
{"code": "private void validateCasting(CastingImpl casting){\n  if (!ValidateGlobalRules.validatePlaysRoleStructure(casting)) {\n    Instance rolePlayer=casting.getRolePlayer();\n    errorsFound.add(ErrorMessage.VALIDATION_CASTING.getMessage(rolePlayer.type().getId(),rolePlayer.getId(),casting.getRole().getId()));\n  }\n}\n", "nl": "Validation rules exclusive to castings"}
{"code": "public static int extractHighSignedNibble(int value){\n  return (value << 24) >> 28;\n}\n", "nl": "Extracts the high signed 4-bit nibble from the least significant byte of the given value"}
{"code": "public int download_file1(String file_id,DownloadCallback callback) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file1(file_id,file_offset,download_bytes,callback);\n}\n", "nl": "download file from storage server"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void shouldShowFullBadgeText(boolean shouldShowBadgeWithNinePlus){\n  this.shouldShowBadgeWithNinePlus=shouldShowBadgeWithNinePlus;\n}\n", "nl": "If you want to show full badge text or show 9+"}
{"code": "private static Object toTagValue(final TagShortTermLog dtShortTerm){\n  Object tagValue=null;\n  if (dtShortTerm.getTagValue() != null) {\n    tagValue=TypeConverter.cast(dtShortTerm.getTagValue(),dtShortTerm.getTagDataType());\n  }\n  return tagValue;\n}\n", "nl": "Creates a new object whose type is set up based in the parameters"}
{"code": "public boolean executeImmediately(final String command){\n  throw new RuntimeException(\"Internal error: OLD executeImmediately()\");\n}\n", "nl": "execute a command within the swing thread"}
{"code": "public FileInfo query_file_info1(String file_id) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return null;\n  }\n  return this.query_file_info(parts[0],parts[1]);\n}\n", "nl": "get file info from storage server"}
{"code": "private void createItemsLayout(){\n  if (itemsLayout == null) {\n    itemsLayout=new LinearLayout(getContext());\n    itemsLayout.setOrientation(LinearLayout.VERTICAL);\n  }\n}\n", "nl": "Creates item layouts if necessary"}
{"code": "protected VideoSearchQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Set extended"}
{"code": "@RequestMapping(value=\"/account/change_password\",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody String password){\n  if (!checkPasswordLength(password)) {\n    return new ResponseEntity<>(\"Incorrect password\",HttpStatus.BAD_REQUEST);\n  }\n  userService.changePassword(password);\n  return new ResponseEntity<>(HttpStatus.OK);\n}\n", "nl": "POST  /account/change_password : changes the current user's password"}
{"code": "private void checkTheMeteorGameFinishCondition(String[] packet){\n  increaseReceiveFinishEventCount();\n  if (getnReceiveFinishEventCount() >= getnMaxmumClients() && isCheckMeteorGameCheckFinishOneTime) {\n    sendMessageInTheRoomPeople(Settings._ANSWER_METEORGAME_METEOR_GAME_FINISH + \"\");\n    isCheckMeteorGameCheckFinishOneTime=false;\n    setTheClientScoreAboutMeteorGame(packet[2]);\n  }\n}\n", "nl": "check meteor game finish condithion"}
{"code": "public static boolean isWindowsClassicLookAndFeel(){\n  return UIUtils.isWindowsClassicLookAndFeel();\n}\n", "nl": "Determines if current L&F is Windows Classic LookAndFeel"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  final MeganizeDAADialog dialog=new MeganizeDAADialog(getViewer().getFrame(),(Director)getDir());\n  final String command=dialog.showAndGetCommand();\n  if (command != null)   execute(command);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isNonBlockingRead(){\n  return _nonBlockingRead;\n}\n", "nl": "return true if this template should perform in non-blocking read"}
{"code": "public EmailBuilder from(String fromAddress){\n  this.from.add(fromAddress);\n  return this;\n}\n", "nl": "adds an email from address"}
{"code": "public boolean hasPermission(Security security,GenericValue userLogin){\n  return OrderReadHelper.hasPermission(security,userLogin,orderHeader);\n}\n", "nl": "Checks to see if this user has read permission on this order"}
{"code": "public SignatureAttr(String s){\n  sig=new AsciiCP(s);\n}\n", "nl": "Note: A signature attr is associated with a <em>class</em>, method or field so you need to create a new SignatureAttr for"}
{"code": "private static int changeIndexSign(final int index){\n  return -index - 1;\n}\n", "nl": "Change the index sign"}
{"code": "private boolean videoMatch(VideoFormat vf1,VideoFormat vf2){\n  if (vf1 instanceof RGBFormat && vf2 instanceof RGBFormat) {\n    RGBFormat rgbf1=(RGBFormat)vf1;\n    RGBFormat rgbf2=(RGBFormat)vf2;\n    return rgbf1.getBitsPerPixel() == rgbf2.getBitsPerPixel();\n  }\n  return vf1.getEncoding().equals(vf2.getEncoding());\n}\n", "nl": "Checks if two video format match"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean addOnItemClickListener(OnItemClickListener itemClickListener){\n  return clickListeners.add(itemClickListener);\n}\n", "nl": "add item click listener to this view"}
{"code": "public AbortPreparedTransactionSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n", "nl": "Apply the size behaviour"}
{"code": "public static <V>boolean isEmpty(V[] sourceArray){\n  return (sourceArray == null || sourceArray.length == 0);\n}\n", "nl": "is null or its length is 0"}
{"code": "public GroupsSetCallbackSettingsQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.setCallbackSettings\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void actions(Context context,Api api,Action1<GoogleApiClient> onClientConnected,Action1<Throwable> onError){\n  GoogleApiClientActions.create(context.getApplicationContext(),new ApiDefinition(api),onClientConnected,onError);\n}\n", "nl": "Serve a GoogleApiClient with callback actions"}
{"code": "protected final void fireColumnEvent(int idx,int prev){\n  Object[] lstnrs=m_listeners.getArray();\n  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);\n}\n", "nl": "Notifies all registered listeners of a column UPDATE event"}
{"code": "public static void deletePermit(String permitId,@Nullable AirMapCallback<Void> callback){\n  PilotService.deletePermit(permitId,callback);\n}\n", "nl": "Delete a permit from the pilot's profile"}
{"code": "@Deprecated public void onFailure(Throwable error,String content){\n  onFailure(error);\n}\n", "nl": "Fired when a request fails to complete, override to handle in your own code"}
{"code": "public static Map<String,String> strToMap(String str,String delim){\n  return strToMap(str,delim,false);\n}\n", "nl": "Creates a Map from an encoded name/value pair string"}
{"code": "private void requestMoveOperation(Intent data){\n  OCFile folderToMoveAt=data.getParcelableExtra(FolderPickerActivity.EXTRA_FOLDER);\n  ArrayList<OCFile> files=data.getParcelableArrayListExtra(FolderPickerActivity.EXTRA_FILES);\n  getFileOperationsHelper().moveFiles(files,folderToMoveAt);\n}\n", "nl": "Request the operation for moving the file/folder from one path to another"}
{"code": "public void toServer(){\n  OpenModLoader.getSidedHandler().getClientPlayer().connection.sendPacket(new PacketWrapper(channel,new Packet(this)));\n}\n", "nl": "Sends this packet from the client to the server"}
{"code": "private void formWindowClosed(java.awt.event.WindowEvent evt){\n  saveSettings();\n  System.exit(0);\n}\n", "nl": "Saves settings and terminates the application"}
{"code": "public MarketGetCategoriesQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Set count"}
{"code": "@POST @Path(\"applications/{applicationName}/pages/{pageName}/users/{userID}\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Return bucket assignments for a user for all the experiments associated with a page\",notes=\"The mutual exclusion and segmentation rules apply\") @Timed public Response postBatchAssignmentForPage(@PathParam(\"applicationName\") @ApiParam(value=\"Application Name\") final Application.Name applicationName,@PathParam(\"pageName\") @ApiParam(\"Page Name\") Page.Name pageName,@PathParam(\"userID\") @ApiParam(value=\"User(customer) ID\") final User.ID userID,@QueryParam(\"createAssignment\") @DefaultValue(\"true\") @ApiParam(value=\"conditional to generate an assignment if one doesn't exist\",defaultValue=\"true\") final boolean createAssignment,@QueryParam(\"ignoreSamplingPercent\") @DefaultValue(\"false\") @ApiParam(value=\"whether the sampling percent for the experiment should be ignored, \" + \"forcing the user into the experiment (if eligible)\",defaultValue=\"false\") final boolean ignoreSamplingPercent,@QueryParam(\"context\") @DefaultValue(\"PROD\") @ApiParam(value=\"context for the experiment, eg QA, PROD\") final Context context,@ApiParam(value=\"Segmentation Profile\") final SegmentationProfile segmentationProfile,@javax.ws.rs.core.Context final HttpHeaders headers){\n  List<Map> assignmentsFromPage=assignments.doPageAssignments(applicationName,pageName,userID,context,createAssignment,ignoreSamplingPercent,headers,segmentationProfile);\n  return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put(\"assignments\",assignmentsFromPage).build()).build();\n}\n", "nl": "Create/Retrieve assignments for a single user for experiments associated to a single page"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public void removeChangingListener(OnWheelChangedListener listener){\n  changingListeners.remove(listener);\n}\n", "nl": "Removes wheel changing listener"}
{"code": "public boolean isApplicable(){\n  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isItemSet(){\n  return getItemSet() != null;\n}\n", "nl": "Checks if the ItemTemplate belongs to an item set"}
{"code": "public NewsfeedGetQuery filters(NewsfeedGetFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Filters to apply"}
{"code": "private void longPulling(ClientSession client,Map<String,String> pullingConfigs,HttpServletRequest req){\n  final AsyncContext asyncContext=req.startAsync();\n  asyncContext.setTimeout(0L);\n  longPullingScheduler.submit(new LongPullingTask(client,pullingConfigs,asyncContext));\n}\n", "nl": "Do long pulling"}
{"code": "public BoardGetTopicsQueryWithExtended preview(BoardGetTopicsPreview value){\n  return unsafeParam(\"preview\",value);\n}\n", "nl": "Set preview"}
{"code": "public void add(float f){\n  data.add(f);\n}\n", "nl": "Adds the given float to this column"}
{"code": "public void actionPerformed(ActionEvent ev){\n  final ClusterViewer viewer=getViewer();\n  int max=viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(null).size();\n  int number=Math.min(max,viewer.getPcoaTab().getTriplotSize());\n  String result=JOptionPane.showInputDialog(viewer.getFrame(),\"Number of tri-plot vectors (0-\" + max + \"): \",number);\n  if (result != null && Basic.isInteger(result))   executeImmediately(\"set triplotSize=\" + Basic.parseInt(result) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public MarketAddAlbumQuery(VkApiClient client,UserActor actor,int ownerId,String title){\n  super(client,\"market.addAlbum\",AddAlbumResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed"}
{"code": "public Builder addColumnDouble(String name,Double minAllowedValue,Double maxAllowedValue){\n  return addColumnDouble(name,minAllowedValue,maxAllowedValue,false,false);\n}\n", "nl": "Add a Double column with the specified restrictions (and no NaN/Infinite values allowed)"}
{"code": "public static TextBlock newLine(){\n  return new TextBlock(ImmutableList.of(\"\"));\n}\n", "nl": "A text block that is a single newline"}
{"code": "private void scrollToCenter(){\n  View nearestToCenterView=findCurrentCenterView();\n  if (nearestToCenterView != null) {\n    shiftToCenterCardScroller.setTargetPosition(getPosition(nearestToCenterView));\n    startSmoothScroll(shiftToCenterCardScroller);\n  }\n}\n", "nl": "Scroll views left or right so nearest view will be in the middle of screen"}
{"code": "public boolean findFirst(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,false) > 0;\n}\n", "nl": "Find first instance"}
{"code": "public AsyncHttpResponseHandler(){\n  if (Looper.myLooper() != null) {\n    handler=new ResponderHandler(this);\n  }\n}\n", "nl": "Creates a new AsyncHttpResponseHandler"}
{"code": "private boolean isOptionDisabled(UrlFilterRuleOption option){\n  loadRuleProperties();\n  return disabledOptions != null && disabledOptions.contains(option);\n}\n", "nl": "Checks if specified option is disabled"}
{"code": "private boolean isPropelDefined(){\n  if (!this.hasPropelChecked) {\n    this.hasPropel=(PhpIndex.getInstance(holder.getProject()).getClassesByName(\"Propel\").size() > 0);\n    this.hasPropelChecked=true;\n  }\n  return this.hasPropel;\n}\n", "nl": "test if propel defined in project"}
{"code": "int awaitTransmitComplete(long timeout,TimeUnit unit) throws Exception {\n  return Await.result(transmitComplete,Duration.fromTimeUnit(timeout,unit));\n}\n", "nl": "Await for the transmit to be complete"}
{"code": "public AirMapAirportProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n", "nl": "Initialize an AirMapAirportProperties from JSON"}
{"code": "Reaper(){\n  super(\"File Reaper\");\n  setPriority(Thread.MAX_PRIORITY);\n  setDaemon(true);\n}\n", "nl": "Construct a new Reaper"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void showLoading(List<Integer> skipIds){\n  switchState(LOADING,null,null,null,null,null,skipIds);\n}\n", "nl": "Hide content and show the progress bar"}
{"code": "public Builder considerExifParams(boolean considerExifParams){\n  this.considerExifParams=considerExifParams;\n  return this;\n}\n", "nl": "Sets whether ZjbImageLoader will consider EXIF parameters of JPEG image (rotate, flip)"}
{"code": "protected AccountRegisterDeviceQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n", "nl": "Set device id"}
{"code": "public void showMetrics(){\n  timer.show(\"JavaStreamingAudioPlayer\");\n}\n", "nl": "Shows metrics for this audio player"}
{"code": "public static void debugInfo(String msg){\n  debugInfo(DEFAULT_TAG,msg);\n}\n", "nl": "author  hhj TODO"}
{"code": "private ThriftWriter openThriftWriter(String filePath) throws IOException {\n  ThriftWriter thriftWriter=new ThriftWriter(filePath,true);\n  thriftWriter.open();\n  return thriftWriter;\n}\n", "nl": "open thrift writer for writing dictionary chunk/meta object"}
{"code": "public void hideAllBudges(){\n  for (  RelativeLayout badge : badgeList) {\n    if (badge.getVisibility() == VISIBLE)     BadgeHelper.hideBadge(badge);\n  }\n  badgeSaveInstanceHashMap.clear();\n}\n", "nl": "Hiding all available badges"}
{"code": "public Calculable(String id,double value){\n  setId(id);\n  setValue(value);\n  setWhen(System.currentTimeMillis());\n}\n", "nl": "Create a new Calculable that records the time"}
{"code": "public boolean isSingleResult(){\n  return _results.getFieldNames().length == 1 && _results.getFieldValues().length == 1;\n}\n", "nl": "Gets whether the result is a single value result"}
{"code": "public final boolean isAlternatingUiMode(){\n  return (myAlternate & CFG_UI_MODE) != 0;\n}\n", "nl": "Returns true if the UI mode is alternated"}
{"code": "@NotNull public NlConfigurationToolbarFixture requireDevice(@NotNull String id){\n  Wait.seconds(30).expecting(\"configuration to be updated\").until(null);\n  return this;\n}\n", "nl": "Requires the device id to be the given id"}
{"code": "public void removeUnlocked(IObjectInfo<T> oi){\n  remove_impl((ObjectInfo<T>)oi);\n}\n", "nl": "remove an element described by ObjectInfo, while the SL is unlocked"}
{"code": "public static void mc2b(double mc[],double b[],int m,double a){\n  b[m]=mc[m];\n  for (m--; m >= 0; m--) {\n    b[m]=mc[m] - a * b[m + 1];\n  }\n}\n", "nl": "mc2b: transform mel-cepstrum to MLSA digital filter coefficients"}
{"code": "public static void showLogin(Activity activity,int requestCode){\n  Intent intent=new Intent(activity,LoginActivity.class);\n  activity.startActivityForResult(intent,requestCode);\n}\n", "nl": "Show the login screen"}
{"code": "public void addGlobalAttributeGroupDecl(XSAttributeGroupDecl decl){\n  fGlobalAttrGrpDecls.put(decl.fName,decl);\n  decl.setNamespaceItem(this);\n}\n", "nl": "register one global attribute group"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "@deprecated public DictionaryBasedBreakIterator(InputStream compiledRules,InputStream dictionaryStream) throws IOException {\n  this.fRData=RBBIDataWrapper.get(compiledRules);\n  this.dictionary=new BreakDictionary(dictionaryStream);\n}\n", "nl": "/*    "}
{"code": "@Override public void onConnected(Bundle connectionHint){\n  initializeUI();\n  startLocationUpdates();\n}\n", "nl": "Google Play Services Lifecycle methods"}
{"code": "protected GroupsIsMemberQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return an extended response with additional fields"}
{"code": "public double[] computePercentFactorPerSampleForTransposedChart(DefaultChartData chartData,String[] series){\n  final double[] percentFactorPerSample=new double[series.length];\n  for (int i=0; i < series.length; i++) {\n    double value=chartData.getTotalForSeriesIncludingDisabledAttributes(series[i]);\n    percentFactorPerSample[i]=(value == 0 ? 0 : 100 / value);\n  }\n  return percentFactorPerSample;\n}\n", "nl": "gets factor used to compute percentage for a series in a transposed chart"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_COMPLETE(){\n  return new SM_SYSTEM_MESSAGE(1300612);\n}\n", "nl": "%1[complete]%2 %0"}
{"code": "public void fling(int velocityX){\n  if (getChildCount() > 0) {\n    int width=getWidth() - getPaddingRight() - getPaddingLeft();\n    int right=getChildAt(0).getWidth();\n    mScroller.fling(getScrollX(),getScrollY(),velocityX,0,0,Math.max(0,right - width),0,0,width / 2,0);\n    ViewCompat.postInvalidateOnAnimation(this);\n  }\n}\n", "nl": "Fling the scroll view"}
{"code": "public static String buildTestPageUrl(final Class<?> type){\n  return FILE_PROTOCOL + findResourcePath(type);\n}\n", "nl": "Builds a path to test page based on given type package name"}
{"code": "public void triggerAction(Map<String,String> postProperties,String commandUrl,String successMessage) throws IOException {\n  HttpPost request=new HttpPost(String.format(commandUrl,authorIp));\n  List<BasicNameValuePair> params=new ArrayList<>();\n  postProperties.entrySet().stream().forEach(null);\n  request.setEntity(new UrlEncodedFormEntity(params,Consts.UTF_8));\n  sender.sendCrxRequest(request,successMessage);\n}\n", "nl": "Allows to trigger any Wcm action using provided Map as POST properties"}
{"code": "private void checkAndWriteDictionaryChunkToFile() throws IOException {\n  if (oneDictionaryChunkList.size() >= dictionary_one_chunk_size) {\n    writeDictionaryFile();\n    createChunkList();\n  }\n}\n", "nl": "check if the threshold has been reached for the number of values that can kept in memory and then flush the data to file"}
{"code": "public boolean isAvoidFirstLastClippingEnabled(){\n  return mAvoidFirstLastClipping;\n}\n", "nl": "returns true if avoid-first-lastclipping is enabled, false if not"}
{"code": "private void checkIsInitialized(){\n  Preconditions.checkNotNull(boxDropExporterConfig,getClass().getSimpleName() + \" must be initialized first\");\n}\n", "nl": "Checks that the exporter has been initialized"}
{"code": "@PickTriggerResult public int fromCamera(){\n  final File outputFile=this.createCameraImageFile();\n  if (outputFile == null) {\n    return PickTriggerResult.TRIGGER_PICK_ERR_CAM_FILE;\n  }\n  return this.triggerPick(this.prepareCameraIntent(this.createCameraImageUri(outputFile)),QiPick.REQ_CAMERA);\n}\n", "nl": "Launch take picture from camera pick flow"}
{"code": "public SpaceTypeDescriptorContainer(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public VideoGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id"}
{"code": "protected MarketGetByIdQueryWithExtended itemIds(List<String> value){\n  return unsafeParam(\"item_ids\",value);\n}\n", "nl": "Items ID"}
{"code": "public boolean isVerticalGuideline(){\n  if (mConstraintWidget instanceof Guideline) {\n    Guideline g=(Guideline)mConstraintWidget;\n    return g.getOrientation() == Guideline.VERTICAL;\n  }\n  return false;\n}\n", "nl": "is guideline vertical"}
{"code": "public SerialMessage allOffMessage(){\n  logger.debug(\"NODE {}: Switch All - Creating All Off message.\",getNode().getNodeId());\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessageType.Request,SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessagePriority.Set);\n  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_ALL_OFF};\n  result.setMessagePayload(newPayload);\n  return result;\n}\n", "nl": "Create the All Off message"}
{"code": "public void reset(){\n  super.clear();\n  fContextType=CONTEXT_INITIALIZE;\n  fLocationHints=null;\n  fTriggeringComponent=null;\n  fEnclosedElementName=null;\n  fAttributes=null;\n}\n", "nl": "resets all the fields"}
{"code": "public void delete(Config config){\n  configDao.unBindApp(config);\n  configDao.unIndex(config);\n  configDao.delete(config.getId());\n}\n", "nl": "Delete the config"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  PrinterJob job=PrinterJob.getPrinterJob();\n  PageFormat pageFormat=job.pageDialog(new PageFormat());\n  ProgramProperties.setPageFormat(pageFormat);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public ResourcesPoet addDimension(String name,String value){\n  Element bool=document.createElement(\"dimen\");\n  bool.setAttribute(\"name\",name);\n  bool.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(bool);\n  return this;\n}\n", "nl": "Add a dimension to the config"}
{"code": "private static boolean hasVerticalConstraints(@NotNull ConstraintWidget widget){\n  ConstraintAnchor top=widget.getAnchor(ConstraintAnchor.Type.TOP);\n  ConstraintAnchor bottom=widget.getAnchor(ConstraintAnchor.Type.BOTTOM);\n  ConstraintAnchor baseline=widget.getAnchor(ConstraintAnchor.Type.BASELINE);\n  return (top != null && top.isConnected()) || (bottom != null && bottom.isConnected()) || (baseline != null && baseline.isConnected());\n}\n", "nl": "Return true if the widget has vertical constraints"}
{"code": "public static <K,V>Type<MapEntry<K,V>> concreteEntryType(Type<? extends Map<K,V>> mapType){\n  Type<?> type=TypeFactory.valueOf(MapEntry.class,mapType.getActualTypeArguments());\n  return (Type<MapEntry<K,V>>)type;\n}\n", "nl": "Returns the concrete <code>MapEntry&lt;K,V&gt;</code> type that represents the entries of the given map"}
{"code": "public static void showInternalError(Object parentIgnored,String message){\n  showNotification(title,\"Internal error: \" + message,Mode.error,Pos.BOTTOM_LEFT,60000);\n}\n", "nl": "show an error notation"}
{"code": "public static boolean removeCount(Context context){\n  return applyCount(context,0);\n}\n", "nl": "Tries to remove the notification count"}
{"code": "public static void init(Configuration conf){\n  ROOT=conf.getString(\"repo.path\",\"/opt/repo\");\n}\n", "nl": "Initialize the Repo, this will be invoke when giiwa startup"}
{"code": "private String generateChartHtml(Chart chart,User user) throws IOException {\n  JFreeChart jFreechart=chartService.getJFreeChart(chart,new Date(),null,i18nManager.getI18nFormat(),user);\n  return uploadImage(chart.getUid(),ChartUtils.getChartAsPngByteArray(jFreechart,578,440));\n}\n", "nl": "Returns an absolute URL to an image representing the chart input"}
{"code": "@Override public void toggleSelection(T photo){\n  if (selectedPhotos.contains(photo)) {\n    selectedPhotos.remove(photo);\n  }\n else {\n    selectedPhotos.add(photo);\n  }\n}\n", "nl": "Toggle the selection status of the item at a given position"}
{"code": "public static void e(String msg){\n  if (isDebug) {\n    Log.e(TAG,msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected AuthConfirmQuery clientId(int value){\n  return unsafeParam(\"client_id\",value);\n}\n", "nl": "Set client id"}
{"code": "public void sort(List<Map<String,Object>> sheet,String key){\n  Collections.sort(sheet,new FieldComparator(key));\n}\n", "nl": "Sort a result on the field with the given key"}
{"code": "public Sample(short[] frameData,byte[] residualData,int residualSize){\n  this.frameData=frameData;\n  this.residualData=residualData;\n  this.residualSize=residualSize;\n}\n", "nl": "Constructs a Sample from its component parts"}
{"code": "public int readNullTerminatedBytes(byte[] bytes) throws IOException {\n  int i=0;\n  while (true) {\n    byte letter=(byte)ins.read();\n    if (letter == 0)     return i;\n else     bytes[i++]=letter;\n  }\n}\n", "nl": "reads a null-terminated string"}
{"code": "public static CommandResult execCommand(List<String> commands,boolean isRoot){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);\n}\n", "nl": "execute shell commands, default return result msg"}
{"code": "public String encode2XML(){\n  return null;\n}\n", "nl": "This method encodes the equipment configuration object into XML"}
{"code": "public static TimePreferenceDialogFragmentCompat newInstance(String key){\n  final TimePreferenceDialogFragmentCompat fragment=new TimePreferenceDialogFragmentCompat();\n  final Bundle b=new Bundle(1);\n  b.putString(ARG_KEY,key);\n  fragment.setArguments(b);\n  return fragment;\n}\n", "nl": "Creates a new Instance of the TimePreferenceDialogFragment and stores the key of the related Preference"}
{"code": "public void plus(long animationDurationMS){\n  if (state == FLAG_STATE_PLUS) {\n    return;\n  }\n  toggle(animationDurationMS);\n}\n", "nl": "Transition to \"+\" over the given animation duration"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String[] firstLines=Basic.getFirstLinesFromFile(new File(fileName),2);\n  return firstLines != null && firstLines.length == 2 && firstLines[0].startsWith(\">\") && Basic.contains(firstLines[1],';',2) && firstLines[1].toLowerCase().contains(\"root\");\n}\n", "nl": "is file acceptable?"}
{"code": "private void init(){\n  updateCount=-1;\n  resultSet=null;\n}\n", "nl": "Reset statement state"}
{"code": "public CatchOptions noMasterBall(boolean skipMasterBall){\n  this.skipMasterBall=skipMasterBall;\n  return this;\n}\n", "nl": "Set whether or not Master balls can be used"}
{"code": "protected void startJobAcquisitionThread(){\n  if (asyncJobAcquisitionThread == null) {\n    asyncJobAcquisitionThread=new Thread(asyncJobsDueRunnable);\n  }\n  asyncJobAcquisitionThread.start();\n}\n", "nl": "Starts the acquisition thread"}
{"code": "public FriendsGetRequestsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return response messages from users who have sent a friend request or, if \"suggested\" is set to true, to return a list of suggested friends"}
{"code": "public boolean isAckPending(){\n  return this.ackPending;\n}\n", "nl": "Returns true is there is an ack pending from the controller"}
{"code": "public void resourceMoved(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String destinationResourceName){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceMoved(resource,destinationFolder,destinationResourceName);\n  }\n}\n", "nl": "A resource has been moved"}
{"code": "public Builder stringRemoveWhitespaceTransform(String columnName){\n  return transform(new RemoveWhiteSpaceTransform(columnName));\n}\n", "nl": "Remove all whitespace characters from the values in the specified String column"}
{"code": "private void tryScrollBackToTop(){\n  if (!mPtrIndicator.isUnderTouch()) {\n    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);\n  }\n}\n", "nl": "Scroll back to to if is not under touch"}
{"code": "@Override public void nodeJoined(final ClusterNode clusterNode){\n  LOGGER.info(\"Detected Terracotta node joined cluster: \" + clusterNode.getId());\n}\n", "nl": "A node has joined the cluster"}
{"code": "@Override public Throwable fillInStackTrace(){\n  return null;\n}\n", "nl": "override fillInStackTrace() and do nothing"}
{"code": "protected IResource[] checkOverwriteOfDirtyResources(IResource[] resources) throws SVNException, InterruptedException {\n  IResource[] dirtyResources=getModifiedResources(resources,null);\n  if (dirtyResources == null || dirtyResources.length == 0) {\n    return resources;\n  }\n  PromptingDialog dialog=new PromptingDialog(getShell(),dirtyResources,getPromptCondition(dirtyResources),Policy.bind(\"ReplaceWithAction.confirmOverwrite\"));\n  return dialog.promptForMultiple();\n}\n", "nl": "Prompts user to overwrite resources that are in the <code>resources<code> list and are modified"}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getSelectedReference() != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void plus(){\n  plus(ANIMATION_DURATION_MS);\n}\n", "nl": "Transition to \"+\""}
{"code": "static int rootDistanceY(ConstraintWidget widget){\n  int rootHeight=widget.getParent().getHeight();\n  int aY=widget.getY();\n  int aHeight=widget.getHeight();\n  return Math.min(aY,rootHeight - (aY + aHeight));\n}\n", "nl": "get the distance to widget's parent in Y"}
{"code": "public static double uniform(Random rng,double min,double max){\n  return rng.nextDouble() * (max - min) + min;\n}\n", "nl": "Generate a uniform random number from the given rng"}
{"code": "@Override public ListenableFuture<MemberListResponse> listMember(){\n  return clusterStub.memberList(MemberListRequest.getDefaultInstance());\n}\n", "nl": "lists the current cluster membership"}
{"code": "public void registerEvent(Object object,Method method){\n  noParamMap.put(object,method);\n}\n", "nl": "register a method to execute when some time"}
{"code": "public static int javaNew(int luaState,Class clazz) throws LuaException {\n  LuaState L=LuaStateFactory.getExistingState(luaState);\nsynchronized (L) {\n    Object ret=getObjInstance(L,clazz);\n    L.pushJavaObject(ret);\n    return 1;\n  }\n}\n", "nl": "javaNew returns a new instance of a given clazz"}
{"code": "public static ExpectedCondition<Boolean> scopedElementLocatedByNotPresent(final WebElement scope,final By locator){\n  return null;\n}\n", "nl": "Check if element located by specified By locator exists in DOM in an element's context"}
{"code": "public Builder cacheOnDisk(boolean cacheOnDisk){\n  this.cacheOnDisk=cacheOnDisk;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached on disk"}
{"code": "public static Beans<Data> load(String table,W q,int s,int n){\n  return Helper.load(table,q,s,n,Data.class);\n}\n", "nl": "Load data from any table"}
{"code": "public static void showSnackShort(View view,String text){\n  Snackbar.make(view,text,Snackbar.LENGTH_SHORT).show();\n}\n", "nl": "Method to display Snacbar with short duration"}
{"code": "@Override public int hashCode(){\n  return Arrays.hashCode(data);\n}\n", "nl": "This method will be used to get the hascode, this will be used to the index for inserting ArrayWrapper object as a key in Map"}
{"code": "private void rotate(){\n  final int fullCircle=360;\n  mAngle+=ROTATION_DEGREES;\n  mAngle%=fullCircle;\n  mCropView.rotateImage(ROTATION_DEGREES);\n}\n", "nl": "Rotates photo"}
{"code": "protected void execWithInput(CommandInput commandInput,String command,CompletionHandler completionHandler){\n  execWithInput(commandInput,command,completionHandler,null,SSH_OPERATION_TIMEOUT_SHORT,TimeUnit.SECONDS);\n}\n", "nl": "Execute a command asynchronously, no transformation of the output string"}
{"code": "public GroupsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"groups.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void disband(League league){\n  Preconditions.checkState(league.onlineMembers() <= 1,\"Can't disband league with more than one online member\");\n  leagues.remove(league.getTeamId());\n  league.onEvent(new LeagueDisbandEvent(league));\n}\n", "nl": "Disband league after minimum of members has been reached"}
{"code": "public boolean canZoomInMoreX(){\n  return (mScaleX < mMaxScaleX);\n}\n", "nl": "Returns true if the chart is not yet fully zoomed in on the x-axis"}
{"code": "@Deprecated public Builder cacheInMemory(){\n  cacheInMemory=true;\n  return this;\n}\n", "nl": "Loaded image will be cached in memory"}
{"code": "private CommonClassLoader(ClassLoader parent){\n  super(\"CommonClassLoader\",new URL[0],parent);\n}\n", "nl": "Create a CommonClassLoader"}
{"code": "public CompareWithRemoteAction(SVNRevision revision){\n  this.revision=revision;\n}\n", "nl": "Creates a new CompareWithRemoteAction for the specified revision"}
{"code": "public static long calculateDuration(int dayCount){\n  if (dayCount == 0) {\n    return Integer.MAX_VALUE;\n  }\n  Calendar cal=Calendar.getInstance();\n  cal.add(Calendar.DATE,+dayCount);\n  return ((cal.getTimeInMillis() - System.currentTimeMillis()) / 1000);\n}\n", "nl": "Calculates the timestamp when a given number of days is over"}
{"code": "private boolean isFreeName(String name){\n  return !DAOManager.getDAO(LegionDAO.class).isNameUsed(name);\n}\n", "nl": "Checks if name is already taken or not"}
{"code": "public boolean bottomAllowed(){\n  return (myFlags & BOTTOM_EDGE) != 0;\n}\n", "nl": "Returns true if this policy allows resizing the bottom edge"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public VideoSearchQueryWithExtended filters(List<VideoSearchFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Set filters"}
{"code": "public ResourcesPoet addDrawable(String name,String value){\n  Element bool=document.createElement(\"drawable\");\n  bool.setAttribute(\"name\",name);\n  bool.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(bool);\n  return this;\n}\n", "nl": "Add a drawable to the config"}
{"code": "public static Column max(DataFrame dataFrame,String columnName){\n  return dataFrame.groupBy(columnName).agg(functions.max(columnName)).col(columnName);\n}\n", "nl": "Max for a column"}
{"code": "public static <K,T,V>MultiDimensionalMap<K,T,V> newThreadSafeHashBackedMap(){\n  return new MultiDimensionalMap<>(new ConcurrentHashMap<Pair<K,T>,V>());\n}\n", "nl": "Thread safe hash map implementation"}
{"code": "private boolean stopNotify1(){\n  return bleManager.stopNotify(UUID_SERVICE,UUID_NOTIFY_1);\n}\n", "nl": "stop notify"}
{"code": "@Override public boolean isAvailable(){\n  return files.size() > 0;\n}\n", "nl": "is this service available?"}
{"code": "public void mergeWith(DistributionDocument tpData,double fLearningRate){\n}\n", "nl": "TODO: Document"}
{"code": "static public String bb2hex(byte[] bb){\n  StringBuilder result=new StringBuilder();\n  for (int i=0; i < bb.length; i++) {\n    result.append(String.format(\"%02X \",bb[i]));\n  }\n  return result.toString();\n}\n", "nl": "Converts a byte array to a hexadecimal string representation"}
{"code": "@Scheduled(fixedDelay=1000) public void updateStatisticsForAllReposiotries(){\n  for (  Long repositoryId : statisticsScheduleRepository.findRepositoryIds()) {\n    updateRepositoryStatistics(repositoryId);\n  }\n}\n", "nl": "Every second, the scheduler looks into"}
{"code": "public static void e(String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.e(TAG,buildMsg(msg),e);\n  }\n}\n", "nl": "error log"}
{"code": "@ColorInt public int extractAccentColorFrom(Context context){\n  return extractIntAttribute(context,ACCENT);\n}\n", "nl": "Extracts the colorAccent color attribute of the passing Context's theme"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_COMPLETE_STAGE_IDARENA(String value0){\n  return new SM_SYSTEM_MESSAGE(1400930,value0);\n}\n", "nl": "You have passed Stage %0!"}
{"code": "private void _writeVersion(byte[] buffer){\n  buffer[INDEX_VERSION]=NTP_MODE | (NTP_VERSION << 3);\n}\n", "nl": "Writes NTP version as defined in RFC-1305"}
{"code": "public GroupsEditQuery eventStartDate(Integer value){\n  return unsafeParam(\"event_start_date\",value);\n}\n", "nl": "Event start date in Unixtime format"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.1998,0.198,0.195,0.19,0.18,0.000200000000000,0.00200000000002,0.00499999999997,0.00999999999994,0.0199999999999};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public GroupsEditQuery eventFinishDate(Integer value){\n  return unsafeParam(\"event_finish_date\",value);\n}\n", "nl": "Event finish date in Unixtime format"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select series=all;\");\n}\n", "nl": "action to be performed"}
{"code": "public static Quantum seconds(int interval){\n  return new Quantum(TimeUnit.SECONDS,interval);\n}\n", "nl": "Factory method - creates a new quantum given the number of seconds"}
{"code": "public SingleFileAudioPlayer(String baseName,AudioFileFormat.Type type){\n  this.baseName=baseName + \".\" + type.getExtension();\n  this.outputType=type;\n  debug=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.debug\");\n  outputList=new Vector();\n}\n", "nl": "Constructs a FileAudioPlayer"}
{"code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n", "nl": "Removes wheel scrolling listener"}
{"code": "public int skipBytes(int bytes) throws IOException {\n  return in.skipBytes(bytes);\n}\n", "nl": "skip some bytes"}
{"code": "public AudioSetBroadcastQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.setBroadcast\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void close() throws IOException {\n  super.close();\n  closed=true;\n}\n", "nl": "Closes underlying output stream, and mark this as closed"}
{"code": "public MatchQuery resolveToQuery(MatchQuery inputQuery,boolean materialise){\n  Query query=new Query(inputQuery,graph);\n  if (!query.isRuleResolvable())   return inputQuery;\n  QueryAnswers answers=resolveQuery(query,materialise);\n  return new ReasonerMatchQuery(inputQuery,graph,answers);\n}\n", "nl": "Resolve a given query using the rule base"}
{"code": "public boolean isPerLogicalSubjectLockObject(boolean isEvictable){\n  if (isEvictable)   throw new RuntimeException(\"AllInCacheLockManager::no evictable object\");\n  return true;\n}\n", "nl": "do we use subject for locking itself ?"}
{"code": "public static <T>Iterable<T> Iterable(T object){\n  return null;\n}\n", "nl": "Return a new iterable over a single item"}
{"code": "public PhotosSaveMessagesPhotoQuery(VkApiClient client,Actor actor,String photo){\n  super(client,\"photos.saveMessagesPhoto\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photo(photo);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AuthSignupQuery sex(AppsSignupSex value){\n  return unsafeParam(\"sex\",value);\n}\n", "nl": "Set sex"}
{"code": "public void reset(){\n  ((SchemaParsingConfig)config).reset();\n}\n", "nl": "Reset SchemaParsingConfig"}
{"code": "public boolean isCurrentSelected(){\n  return isCurrentSet() && toSelectIds.contains(currentId);\n}\n", "nl": "is the current object selected?"}
{"code": "public void add(RequestFilter filter){\n  filters.add(filter);\n}\n", "nl": "Register new filter"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.00664355180993,0.0454328283309,0.0981162737374,0.176713524579,0.321946865392,10.5115496887,7.4976304671,6.23205600701,5.23968436955,4.2079028257};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "public DocumentQuery addCondition(DocumentCondition condition){\n  this.conditions.add(Objects.requireNonNull(condition,\"condition is required\"));\n  return this;\n}\n", "nl": "Add a new condition in the query"}
{"code": "public InfoSection loadInfoSection() throws IOException {\n  try (InputReader reader=new InputReader(getFile(),null,null,true)){\n    readHeader(reader);\n    infoSection.read(reader);\n  }\n   return infoSection;\n}\n", "nl": "load the info section"}
{"code": "public static Map<String,Object> returnErrorService(DispatchContext dctx,Map<String,?> context){\n  Locale locale=(Locale)context.get(\"locale\");\n  return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"CommonServiceReturnError\",locale));\n}\n", "nl": "Return Error Service; Used for testing error handling"}
{"code": "public MailPreviewForm(){\n  initComponents();\n}\n", "nl": "Creates new form MailPreviewForm"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set showAminoAcids=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.setShowAminoAcids(value);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public InvalidDescriptionException(){\n  super(\"Invalid plugin.yml\");\n}\n", "nl": "Constructs a new InvalidDescriptionException"}
{"code": "protected void succeeded(Description description){\n}\n", "nl": "Invoked when a test succeeds"}
{"code": "public static boolean isAccountPenaltyActive(Account account){\n  AccountTime accountTime=account.getAccountTime();\n  return accountTime != null && accountTime.getPenaltyEnd() != null && (accountTime.getPenaltyEnd().getTime() == 1000 || accountTime.getPenaltyEnd().getTime() >= System.currentTimeMillis());\n}\n", "nl": "Checks if account is restricted by penalty or not"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set summarized=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public void unbind(Object obj){\n  Set<IBinding> bindings=getBindings(obj.getClass());\n  for (  IBinding binding : bindings) {\n    binding.unbind();\n  }\n  mBindings.remove(obj.getClass());\n}\n", "nl": "Unbind all bindings on a certain class"}
{"code": "public void clearBasicAuth(){\n  this.httpClient.getCredentialsProvider().clear();\n}\n", "nl": "Removes set basic auth credentials"}
{"code": "public PhotosReorderPhotosQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.reorderPhotos\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public PhotosGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,PhotoFull.class));\n  accessToken(actor.getAccessToken());\n  photos(photos);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void showProgressDialog(final Context context){\n  showProgressDialog(context,DEFAULT_TAG,null);\n}\n", "nl": "Shows default progress dialog without any message"}
{"code": "public boolean hasLabels(){\n  return sample2label.size() > 0;\n}\n", "nl": "are any labels defined?"}
{"code": "public StatsGetPostReachQuery(VkApiClient client,UserActor actor,int ownerId,int postId){\n  super(client,\"stats.getPostReach\",Utils.buildParametrizedType(List.class,WallpostStat.class));\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  postId(postId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private static Bitmap drawableToBitmap(Drawable d){\n  return d == null ? null : ((BitmapDrawable)d).getBitmap();\n}\n", "nl": "convert Drawable to Bitmap"}
{"code": "public void append(byte[] utf8,int start,int len){\n  setCapacity(length + len,true);\n  System.arraycopy(utf8,start,bytes,length,len);\n  length+=len;\n}\n", "nl": "Append a range of bytes to the end of the given text"}
{"code": "private static void log(String log,Object... args){\n  if (verbose)   if (args.length > 0)   Log.d(TAG,log + \" \" + Arrays.asList(args));\n else   Log.d(TAG,log);\n}\n", "nl": "Log print"}
{"code": "private Utils(){\n}\n", "nl": "Creates a new instance of Utils"}
{"code": "public static boolean isswitch(String cc){\n  String first4digs=cc.substring(0,4);\n  String first6digs=cc.substring(0,6);\n  if (((cc.length() == 16) || (cc.length() == 18) || (cc.length() == 19)) && (first4digs.equals(\"4903\") || first4digs.equals(\"4905\") || first4digs.equals(\"4911\")|| first4digs.equals(\"4936\")|| first6digs.equals(\"564182\")|| first6digs.equals(\"633110\")|| first4digs.equals(\"6333\")|| first4digs.equals(\"6759\")))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid Switch number"}
{"code": "public DefaultMovieInfoProvider(MediaLocator mediaLocator){\n  this.mediaLocator=mediaLocator;\n}\n", "nl": "Creates a new instance of DefaultMovieInfoProvider"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAircraftModel && ((AirMapAircraftModel)o).getModelId().equals(getModelId());\n}\n", "nl": "Comparison based on ID"}
{"code": "@ObjectiveCName(\"removeEntry:\") public List removeEntry(String entry){\n  Collection entries=this.getEntries();\n  while (entries.contains(entry))   entries.remove(entry);\n  this.updateList(entries);\n  return this;\n}\n", "nl": "Removes the first occurrence of an entry from the list"}
{"code": "@Override public String toString(){\n  return getMessage();\n}\n", "nl": "Return the exception message"}
{"code": "public static void startComm(AirMapFlight flight,@Nullable AirMapCallback<AirMapComm> callback){\n  FlightService.getCommKey(flight,callback);\n}\n", "nl": "Get a comm key for a given flight to enable traffic alerts"}
{"code": "Iterator(){\n  counter[last]=-1;\n}\n", "nl": "Create an iterator"}
{"code": "public MarketSearchQuery sort(MarketSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Items sort"}
{"code": "public AbstractEquipmentCacheObject(final Long pId,final String pName,final String pDescription,final String pHandlerClassName,final Long pStateTagId,final Long pAliveTagId,final int pAliveInterval,final Long pCommfaultTagId){\n  super(pId,pName,pStateTagId,pAliveTagId,pAliveInterval);\n  this.description=pDescription;\n  this.handlerClassName=pHandlerClassName;\n  this.commFaultTagId=pCommfaultTagId;\n}\n", "nl": "Creates a MonitoringEquipment object containing the provided information"}
{"code": "public WallGetQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public static double sumSquareDev(double[] values,double target){\n  double sumsq=0d;\n  for (int i=0; i < values.length; i++) {\n    final double dev=values[i] - target;\n    sumsq+=(dev * dev);\n  }\n  return sumsq;\n}\n", "nl": "Computes the sum of squared deviations of <values> from <target>"}
{"code": "private void layout(int width,int height){\n  int itemsWidth=width - 2 * PADDING;\n  itemsLayout.layout(0,0,itemsWidth,height);\n}\n", "nl": "Sets layouts width and height"}
{"code": "private void loadMore(){\n  isLoadingData=true;\n  isLoadingMoreData=true;\n  mOnLoadMoreListener.onLoadMore();\n}\n", "nl": "loadmore not allow refresh and loadmore together"}
{"code": "private void addCallbackMethod(String layoutClass,AndroidMethod callbackMethod){\n  Set<SootMethodAndClass> methods=this.callbackMethods.get(layoutClass);\n  if (methods == null) {\n    methods=new HashSet<SootMethodAndClass>();\n    this.callbackMethods.put(layoutClass,methods);\n  }\n  methods.add(new AndroidMethod(callbackMethod));\n}\n", "nl": "Adds a method to the set of callback method"}
{"code": "protected LocalResource(IResource resource){\n  Assert.isNotNull(resource);\n  this.resource=resource;\n}\n", "nl": "Creates a SVN handle to the provided resource"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public static float sign(float fValue){\n  return Math.signum(fValue);\n}\n", "nl": "Returns 1 if the number is positive, -1 if the number is negative, and 0 otherwise"}
{"code": "public boolean containsRow(R rowKey){\n  return dataMap.containsKey(rowKey);\n}\n", "nl": "row contained?"}
{"code": "public static void stopMentoring(Player player){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new PlayerGroupStopMentoringEvent(group,player));\n  }\n}\n", "nl": "Stop mentoring in group"}
{"code": "public boolean isClosable(){\n  return isClosable;\n}\n", "nl": "is this getLetterCodeIterator closable?"}
{"code": "public static int computeEditDistance(String alignedQuery,String alignedReference){\n  int distance=0;\n  for (int i=0; i < alignedQuery.length(); i++) {\n    if (alignedQuery.charAt(i) == '-' || alignedReference.charAt(i) == '-' || alignedQuery.charAt(i) != alignedReference.charAt(i))     distance++;\n  }\n  return distance;\n}\n", "nl": "compute edit distance from alignment"}
{"code": "public static Bitmap drawableToBitmap(Drawable drawable){\n  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();\n}\n", "nl": "convert Drawable to Bitmap"}
{"code": "public AppsSendRequestQuery requestName(String value){\n  return unsafeParam(\"request_name\",value);\n}\n", "nl": "Set request name"}
{"code": "protected Object receiveEvent(Object template) throws DataAccessException {\n  try {\n    return receiveOperationHandler.receive(template,getGigaSpace(),getReceiveTimeout());\n  }\n catch (  SpaceInterruptedException e) {\n    return null;\n  }\n}\n", "nl": "Receive an event"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.Mapping.toString() + \";zoom axis=both what=fit;\");\n}\n", "nl": "action to be performed"}
{"code": "public static boolean modelSupportsInstantRun(@NotNull AndroidGradleModel model){\n  GradleVersion modelVersion=model.getModelVersion();\n  return modelVersion == null || modelVersion.compareTo(InstantRunManager.MINIMUM_GRADLE_PLUGIN_VERSION) >= 0;\n}\n", "nl": "Returns true if Instant Run is supported for this gradle model (whether or not it's enabled)"}
{"code": "public GroupsInviteQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.invite\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public BOMHelper(){\n}\n", "nl": "Creates a new instance of BOMHelper"}
{"code": "public static UByte valueOf(short value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(value));\n}\n", "nl": "Get an instance of an <code>unsigned byte</code>"}
{"code": "public String toString(){\n  return \"CMUDiphoneVoice\";\n}\n", "nl": "Converts this object to a string"}
{"code": "private ULong(BigInteger value) throws NumberFormatException {\n  if (value.compareTo(MIN_VALUE) < 0 || value.compareTo(MAX_VALUE) > 0) {\n    throw new NumberFormatException();\n  }\n else {\n    this.value=value.longValue();\n  }\n}\n", "nl": "Create an <code>unsigned long</code>"}
{"code": "public final boolean isAccountOnGameServer(int accountId){\n  return accountsOnGameServer.containsKey(accountId);\n}\n", "nl": "Check if given account is already on This GameServer"}
{"code": "public UnknownDependencyException(final Throwable throwable){\n  super(throwable);\n}\n", "nl": "Constructs a new UnknownDependencyException based on the given Exception"}
{"code": "private boolean removeFilter(){\n  if (isFiltering()) {\n    currentEntries=entries;\n    filteredEntries=null;\n    return true;\n  }\n  return false;\n}\n", "nl": "Returns current filter"}
{"code": "@Override public void onPause(){\n  super.onPause();\n  mapView.onPause();\n  stopLocationUpdates();\n}\n", "nl": "Funcoes do Mapa Map Functions"}
{"code": "public static void debugLongInfo(String str){\n  debugLongInfo(DEFAULT_TAG,str);\n}\n", "nl": "author  hhj TODO"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_GIVEUP_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300614,value0);\n}\n", "nl": "Quest failed: %0"}
{"code": "public WallGetCommentsQuery(VkApiClient client,int postId){\n  super(client,\"wall.getComments\",GetCommentsResponse.class);\n  postId(postId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void nextTable() throws SQLException {\n  if (tables.hasNext()) {\n    currentTable=tables.next();\n    openRows();\n  }\n}\n", "nl": "Move reference of the current table up by one"}
{"code": "public boolean isDrawTopYLabelEntryEnabled(){\n  return mDrawTopYLabelEntry;\n}\n", "nl": "returns true if drawing the top y-axis label entry is enabled"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.EUCLIDEAN_NORMALIZED + \";\");\n}\n", "nl": "action to be performed"}
{"code": "private void createThrow(polyglot.ast.Throw throwStmt){\n  soot.Value toThrow=base().createAggressiveExpr(throwStmt.expr(),false,false);\n  soot.jimple.ThrowStmt throwSt=soot.jimple.Jimple.v().newThrowStmt(toThrow);\n  body.getUnits().add(throwSt);\n  Util.addLnPosTags(throwSt,throwStmt.position());\n  Util.addLnPosTags(throwSt.getOpBox(),throwStmt.expr().position());\n}\n", "nl": "Throw Stmt Creation"}
{"code": "private Entry<V> cacheMiss(K key){\n  return resolver.createEntry(key);\n}\n", "nl": "This method is called in case of cache-miss It can return NULL if it's not possible to resolve the missing instance"}
{"code": "public GroupsEditQuery edit(UserActor actor,int groupId){\n  return new GroupsEditQuery(getClient(),actor,groupId);\n}\n", "nl": "Edits a community"}
{"code": "public PhotosSaveWallPhotoQuery hash(String value){\n  return unsafeParam(\"hash\",value);\n}\n", "nl": "Set hash"}
{"code": "public TapTarget targetCircleColor(@ColorRes int color){\n  this.targetCircleColor=color;\n  return this;\n}\n", "nl": "Specify the color resource for the target circle"}
{"code": "public void close(){\n  channel.close();\n}\n", "nl": "Closes the channel"}
{"code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0,0.001,0.010,0.025,0.050,0.100,0.200,0.5,0.999,0.990,0.975,0.950,0.900,1};\n}\n", "nl": "Creates the default inverse cumulative probability test input values"}
{"code": "private void removeAllTraffic(){\n  List<AirMapTraffic> removed=new ArrayList<>(allTraffic);\n  allTraffic.clear();\n  notifyRemoved(removed);\n}\n", "nl": "Removes all traffic from the list and notifies the listener"}
{"code": "public static void f(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg,throwable);\n}\n", "nl": "Send a FATAL ERROR log message"}
{"code": "public PhotosGetByIdQuery(VkApiClient client,UserActor actor,String... photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photos(photos);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@ObjectiveCName(\"addRecordEventsListener:\") public List addRecordEventsListener(RecordEventsListener recordEventsListener){\n  this.record.addRecordEventsListener(recordEventsListener);\n  return this;\n}\n", "nl": "Adds a Listener that will notify you if a Discard, Delete or Error event occurs"}
{"code": "public void callback(final String instanceId,final String callback,final Map<String,Object> data){\n  callback(instanceId,callback,data,false);\n}\n", "nl": "Invoke JavaScript callback"}
{"code": "public Observable<FirebaseChildEvent> observeChildAdded(final Query firebaseRef){\n  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.ADDED));\n}\n", "nl": "Creates an observable only for the child changed method"}
{"code": "private void photoGalleryIntent(){\n  Intent intent=new Intent();\n  intent.setType(\"image/*\");\n  intent.setAction(Intent.ACTION_GET_CONTENT);\n  startActivityForResult(Intent.createChooser(intent,getString(R.string.select_picture_title)),IMAGE_GALLERY_REQUEST);\n}\n", "nl": "Enviar foto pela galeria"}
{"code": "private DeepstreamFactory(){\n  this.clients=new HashMap();\n}\n", "nl": "DeepstreamFactory is a map of all url connections created"}
{"code": "public static boolean hasRole(String roleName){\n  for (  String role : getRoles()) {\n    if (role.equalsIgnoreCase(roleName)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Tell whether the passed role is set?"}
{"code": "public static void startLocalZkServer(final int port){\n  startLocalZkServer(port,org.apache.commons.io.FileUtils.getTempDirectoryPath() + File.separator + \"test-\"+ System.currentTimeMillis());\n}\n", "nl": "Starts a local Zk instance with a generated empty data directory"}
{"code": "@Override public int nodeSize(){\n  return this.numberOfKeys;\n}\n", "nl": "Method to get the next block this can be used while scanning when iterator of this class can be used iterate over blocks"}
{"code": "public JCustomTooltip(JComponent src,JComponent content){\n  this(src,content,false);\n}\n", "nl": "Create a new JCustomTooltip"}
{"code": "@Override public void modelChanged(@NotNull NlModel model){\n  if (myDesignSurface != null) {\n    updateDeviceConfiguration(myDesignSurface.getConfiguration());\n    updateComponents(model.getComponents());\n    updateScreenNumber(myDesignSurface);\n    myMiniMap.repaint();\n  }\n}\n", "nl": "A change occurred inside the model object"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "@Override public Object clone(){\n  return GenericValue.create(this);\n}\n", "nl": "Clones this GenericValue, this is a shallow clone & uses the default shallow HashMap clone"}
{"code": "protected final void applyTheme(AppTheme theme){\n  preferences.persistSelectedTheme(theme);\n  restartActivity();\n  int enterAnimation=android.R.anim.fade_in;\n  int exitAnimation=android.R.anim.fade_out;\n  overridePendingTransition(enterAnimation,exitAnimation);\n}\n", "nl": "Persists the passing theme and restarts the activity transitioning to the new theme"}
{"code": "private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){\n  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);\n}\n", "nl": "compareAndSet head node"}
{"code": "private void refresh(){\n  isLoadingData=true;\n  isLoadingMoreData=true;\n  mOnRefreshListener.onRefresh();\n}\n", "nl": "refresh not allow refresh and loadmore together"}
{"code": "public static boolean isEmpty(CharSequence str){\n  return TextUtils.isEmpty(str);\n}\n", "nl": "Check if a string is empty"}
{"code": "public static ExpirationDatePickerDialogFragment newInstance(OCFile file,long chosenDateInMillis){\n  Bundle arguments=new Bundle();\n  arguments.putParcelable(ARG_FILE,file);\n  arguments.putLong(ARG_CHOSEN_DATE_IN_MILLIS,chosenDateInMillis);\n  ExpirationDatePickerDialogFragment dialog=new ExpirationDatePickerDialogFragment();\n  dialog.setArguments(arguments);\n  return dialog;\n}\n", "nl": "Factory method to create new instances"}
{"code": "private void instantiate(){\n  managers=new AbstractAnnotationManager[]{new AnnotationContextManager(androidUnitTest),new AnnotationActivityManager(androidUnitTest),new AnnotationFragmentManager(androidUnitTest),new AnnotationViewManager(androidUnitTest)};\n  activityManager=(AnnotationActivityManager)managers[1];\n  fragmentManager=(AnnotationFragmentManager)managers[2];\n}\n", "nl": "Instantiate the list of abstract annotation managers"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public final void goToLastProcessedLine(final int lastCommited) throws DataFallbackException {\n  fFileController.closeFallbackInputStream();\n  int readLines=fFileController.getReadBackLines();\n  fFileController.goToLine(readLines + lastCommited);\n}\n", "nl": "Places the file descriptor in the line indicated as parameter"}
{"code": "public void resetTime(){\n}\n", "nl": "Resets the audio clock"}
{"code": "public static ValueAnimator animateDummy(int duration){\n  ValueAnimator a=ValueAnimator.ofFloat(0,1);\n  a.setDuration(duration);\n  a.start();\n  return a;\n}\n", "nl": "Use Animator to do a \"setTimeout\""}
{"code": "public static byte[] fromHex(String hex){\n  try {\n    return Hex.decodeHex(hex.toCharArray());\n  }\n catch (  DecoderException e) {\n    return null;\n  }\n}\n", "nl": "recreate a byte array from hexadecimal"}
{"code": "private void clustering(int tagetClusterSize){\n  clustering(tagetClusterSize,\"Average\");\n}\n", "nl": "clustering with default linkage type It uses 'Average' linkage clustering approach as default"}
{"code": "public WidgetsGetCommentsQuery(VkApiClient client){\n  super(client,\"widgets.getComments\",GetCommentsResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static double ssReg(double[] residuals,double[] targetAttribute){\n  double mean=sum(targetAttribute) / targetAttribute.length;\n  double ret=0;\n  for (int i=0; i < residuals.length; i++) {\n    ret+=Math.pow(residuals[i] - mean,2);\n  }\n  return ret;\n}\n", "nl": "How much of the variance is explained by the regression"}
{"code": "public static boolean checkNetwork(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo networkInfo=connectivityManager == null ? null : connectivityManager.getActiveNetworkInfo();\n  return networkInfo != null && networkInfo.isConnected();\n}\n", "nl": "Check network"}
{"code": "public MessagesGetChatUsersQueryWithChatIdsFields(VkApiClient client,UserActor actor,List<Integer> chatIds,List<UserField> fields){\n  super(client,\"messages.getChatUsers\",GetChatUsersChatIdsFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public CountClearEntriesSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public SM_BLOCK_RESPONSE(int code,String playerName){\n  this.code=code;\n  this.playerName=playerName;\n}\n", "nl": "Constructs a new block request response packet"}
{"code": "public ItemCursor queryItems(){\n  return mHelper.queryItems();\n}\n", "nl": "ITEM QUERIES"}
{"code": "public void clearTransaction(){\n  modifiedConcepts.clear();\n  modifiedCastings.clear();\n  modifiedResources.clear();\n}\n", "nl": "Removes all the concepts from the transaction tracker"}
{"code": "public void checkDataSource(Map<String,ModelEntity> modelEntities,List<String> messages,boolean addMissing) throws GenericEntityException {\n  genericDAO.checkDb(modelEntities,messages,addMissing);\n}\n", "nl": "Check the datasource to make sure the entity definitions are correct, optionally adding missing entities or fields on the server"}
{"code": "public static final Future<?> newFollowingToTargetCheckTask(final QuestEnv env,Npc npc,Npc target){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowingNpcCheckTask(env,new TargetDestinationChecker(npc,target)),1000,1000);\n}\n", "nl": "Schedule new following checker task"}
{"code": "public DistributedLogNamespaceBuilder clientId(String clientId){\n  this._clientId=clientId;\n  return this;\n}\n", "nl": "Client Id used for accessing the namespace"}
{"code": "protected ShoppingCartItem(){\n}\n", "nl": "Cannot create shopping cart item with no parameters"}
{"code": "public Map<Double,K> sortItems(List<K> items,PokemonGo api){\n  Map<Double,K> result=new TreeMap<>();\n  for (  K point : items) {\n    result.put(distFrom(api.getLatitude(),api.getLongitude(),point.getLatitude(),point.getLongitude()),point);\n  }\n  return result;\n}\n", "nl": "Sort items map by distance"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public MessagesGetLongPollHistoryQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public MessagesGetQuery out(Boolean value){\n  return unsafeParam(\"out\",value);\n}\n", "nl": "\"true\" - to return outgoing messages \"false\" - to return incoming messages (default)"}
{"code": "static byte[] convertBoolArrayToByteArray(boolean[] boolArr){\n  byte[] byteArr=new byte[(boolArr.length + 7) / 8];\n  for (int i=0; i < byteArr.length; i++) {\n    byteArr[i]=readByte(boolArr,8 * i);\n  }\n  return byteArr;\n}\n", "nl": "Packs a bit array into bytes, most significant bit first"}
{"code": "protected MarketEditQuery mainPhotoId(int value){\n  return unsafeParam(\"main_photo_id\",value);\n}\n", "nl": "Cover photo id"}
{"code": "public boolean isLessThan(GameTime gt){\n  return this.getTime() < gt.getTime();\n}\n", "nl": "Compares this time and the time given"}
{"code": "public SFFS(int solSize,boolean b0,boolean logSol){\n  interceptTerm=b0;\n  logSolution=logSol;\n  solutionSize=solSize;\n}\n", "nl": "Sequential Floating Forward Search(SFFS) for selection of features"}
{"code": "public void activateFetched(){\n  this.firebaseRemoteConfig.activateFetched();\n}\n", "nl": "Allows to activate the fetched values"}
{"code": "public static <T>String toXml(Class<T> clazz,T object){\n  return CLASS_2_XSTREAM_INSTANCE.get(clazz).toXML(object);\n}\n", "nl": "pojo -> xml"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public RegisterEntryTypeDescriptorSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public DocumentWordDistroGraph(){\n  MinSize=1;\n  MaxSize=2;\n  CorrelationWindow=3;\n}\n", "nl": "Creates a new instance of DocumentWordDistroGraph"}
{"code": "public void remoteResourceMoved(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String destinationResourceName){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.remoteResourceMoved(resource,destinationFolder,destinationResourceName);\n  }\n}\n", "nl": "signals all listener that a remote resource has been moved"}
{"code": "public static boolean putInt(Context context,String key,int value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putInt(key,value);\n  return editor.commit();\n}\n", "nl": "put int preferences"}
{"code": "@Override public JavaDStream<DataSet> createStream(){\n  JavaPairInputDStream<String,String> messages=KafkaUtils.createStream(jssc,zkHost,\"canova\",Collections.singletonMap(kafkaTopic,kafkaPartitions));\n  JavaDStream<DataSet> dataset=messages.flatMap(new DataSetFlatmap(numLabels,recordToDataSetFunction)).cache();\n  return dataset;\n}\n", "nl": "Create the streaming result"}
{"code": "void reset(){\n  myParserCount=0;\n  myParserFiles=null;\n  myLayoutName=null;\n  myLayoutEmbeddedParser=null;\n}\n", "nl": "Resets the callback state for another render"}
{"code": "@Deprecated public void onFailure(Throwable error){\n}\n", "nl": "Fired when a request fails to complete, override to handle in your own code"}
{"code": "private void writeAmplification(ByteBuffer buf){\n  Item item=ownerItem;\n  writeC(buf,item.isAmplified() ? 1 : 0);\n  writeH(buf,item.getBuffSkill());\n  writeC(buf,0);\n}\n", "nl": "Writes amplification data"}
{"code": "public boolean verify(byte[] hash,byte[] signature){\n  return crypto.verify(hash,signature,pub);\n}\n", "nl": "verify a signature created with the private counterpart of this key"}
{"code": "private static float spacing(MotionEvent event){\n  float x=event.getX(0) - event.getX(1);\n  float y=event.getY(0) - event.getY(1);\n  return (float)Math.sqrt(x * x + y * y);\n}\n", "nl": "returns the distance between two pointer touch points"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getDataType().equalsIgnoreCase(\"SEED\");\n}\n", "nl": "this is currently selected?"}
{"code": "public EqualsSpacePredicate(Object expectedValue,FunctionCallDescription functionCallDescription){\n  super(expectedValue,functionCallDescription);\n}\n", "nl": "Creates a scalar predicate using the specified expected value"}
{"code": "public int append_file(String group_name,String appender_filename,byte[] file_buff) throws IOException, MyException {\n  return this.do_append_file(group_name,appender_filename,file_buff.length,new UploadBuff(file_buff,0,file_buff.length));\n}\n", "nl": "append file to storage server (by file buff)"}
{"code": "public static void i(String msg){\n  if (isDebug) {\n    Log.i(TAG,msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "private QueryParser(QueryBuilder queryBuilder){\n  this.queryBuilder=queryBuilder;\n  registerDefaultAggregates();\n}\n", "nl": "Create a query parser with the specified graph"}
{"code": "private void writeDictionaryFile() throws IOException {\n  ColumnDictionaryChunk columnDictionaryChunk=new ColumnDictionaryChunk();\n  columnDictionaryChunk.setValues(oneDictionaryChunkList);\n  writeThriftObject(columnDictionaryChunk);\n}\n", "nl": "This method will serialize the object of dictionary file"}
{"code": "public AudioSearchQuery sort(AudioSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public static List<String> serializeDataSelection(boolean wantReadText,boolean wantMatches){\n  DataSelection dataSelection=new DataSelection();\n  dataSelection.setWantReadText(wantReadText);\n  dataSelection.setWantMatches(wantMatches);\n  return serializeDataSelection(dataSelection);\n}\n", "nl": "serialize data selection"}
{"code": "void receiveQuery(Json json){\n  queryExecutor.submit(null);\n}\n", "nl": "Receive and remember part of a query"}
{"code": "private void begin_Back_Pos(){\n  position.y=Settings.nGameAsteroidSceneHeight;\n  position.x=posX + this.map_controler.syncCnt;\n  velocity.set(new Math_Vector(0,0));\n  status=BACKPOS;\n}\n", "nl": "begin back position"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static boolean isToday(Date date){\n  return android.text.format.DateUtils.isToday(date.getTime());\n}\n", "nl": "Check if the specific date is today"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public void cancel(){\n  mCancellationRequested.set(true);\n}\n", "nl": "Cancel operation"}
{"code": "static boolean isRtlMargin(String attribute){\n  if (SdkConstants.ATTR_LAYOUT_MARGIN_LEFT.equals(attribute) || SdkConstants.ATTR_LAYOUT_MARGIN_RIGHT.equals(attribute)) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Returns true if the given attribute is an RTL-affected one"}
{"code": "public static void checkUiThread(){\n  if (Looper.getMainLooper() != Looper.myLooper()) {\n    throw new IllegalStateException(\"Must be called from the main thread. Was: \" + Thread.currentThread());\n  }\n}\n", "nl": "Check if running on main thread"}
{"code": "public static UShort valueOf(int value) throws NumberFormatException {\n  return new UShort(value);\n}\n", "nl": "Create an <code>unsigned short</code>"}
{"code": "public static void w(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  Log.w(tag,msg,throwable);\n}\n", "nl": "Send a WARNING log message"}
{"code": "public UnregisterReplicationLocalViewRequestInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public AccountLookupContactsQuery contacts(List<String> value){\n  return unsafeParam(\"contacts\",value);\n}\n", "nl": "List of contacts separated with commas"}
{"code": "public int delete_file1(String file_id) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.delete_file(parts[0],parts[1]);\n}\n", "nl": "delete file from storage server"}
{"code": "public PhotosGetQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return additional \"likes\", \"comments\", and \"tags\" fields"}
{"code": "@Override public int searchOrderCount(OrderReqDto reqDto){\n  return sessionTemplate.selectOne(NAMESPACE + \".searchOrderCount\",reqDto);\n}\n", "nl": "Get order count"}
{"code": "public GroupsGetMembersQueryWithFields(VkApiClient client,Actor actor,UserField... fields){\n  super(client,\"groups.getMembers\",GetMembersFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public LeadsCompleteQuery(VkApiClient client,String vkSid,String secret){\n  super(client,\"leads.complete\",Complete.class);\n  vkSid(vkSid);\n  secret(secret);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_ACQUIRE(){\n  return new SM_SYSTEM_MESSAGE(1300609);\n}\n", "nl": "%1[acquire]%2 %0"}
{"code": "public void callHandler(String handlerName,String data,CallBackFunction callBack){\n  doSend(handlerName,data,callBack);\n}\n", "nl": "call javascript registered handler"}
{"code": "public void put(String sample,HiddenAttribute attribute,Object value){\n  put(sample,attribute.toString(),value);\n}\n", "nl": "put a value in the table"}
{"code": "public static String formatPercentage(Double percentage){\n  if (percentage == null)   return \"\";\n  return formatPercentage(percentage.doubleValue());\n}\n", "nl": "Formats a Double representing a percentage into a string"}
{"code": "public CMUDiphoneVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){\n  super(name,gender,age,description,locale,domain,organization,lexicon);\n  setRate(150f);\n  setPitch(100F);\n  setPitchRange(11F);\n  this.database=database;\n}\n", "nl": "Creates a simple voice"}
{"code": "public void uploadUpdate(Context context,Account account,OCFile[] existingFiles,Integer behaviour,Boolean forceOverwrite){\n  Intent intent=new Intent(context,FileUploader.class);\n  intent.putExtra(FileUploader.KEY_ACCOUNT,account);\n  intent.putExtra(FileUploader.KEY_FILE,existingFiles);\n  intent.putExtra(FileUploader.KEY_LOCAL_BEHAVIOUR,behaviour);\n  intent.putExtra(FileUploader.KEY_FORCE_OVERWRITE,forceOverwrite);\n  context.startService(intent);\n}\n", "nl": "Call to update multiple files already uploaded"}
{"code": "public static long[] transformLongArray(Long[] source){\n  long[] destin=new long[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert Long array to long array"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected void drawXAxis(Graphics2D gc){\n}\n", "nl": "draw the x axis"}
{"code": "public Matrix inverse(){\n  return solve(identity(m,m));\n}\n", "nl": "Matrix inverse or pseudoinverse"}
{"code": "@Deprecated public ItemStack(final int type,final int amount,final short damage){\n  this.type=type;\n  this.amount=amount;\n  this.durability=damage;\n}\n", "nl": "An item stack with the specified damage / durability"}
{"code": "public boolean containsCause(Class<? extends Throwable> exceptionClass){\n  return containsCause(exceptionClass,getCauses());\n}\n", "nl": "Returns  true if given exception class is a direct cause of this exception"}
{"code": "public static void disableConsoleLogging(){\n  consoleLoggingEnabled=false;\n}\n", "nl": "Turn off all console logging You MUST re-enable logging when you are done"}
{"code": "public ScriptingExecutor<T> scriptingExecutor(){\n  return remotingConfigurer.proxy();\n}\n", "nl": "Create a new event driven <code>ScriptingExecutor</code> proxy"}
{"code": "public static byte[] hexStringToByte(String hex){\n  byte[] bts=new byte[hex.length() / 2];\n  for (int i=0; i < bts.length; i++) {\n    bts[i]=(byte)Integer.parseInt(hex.substring(2 * i,2 * i + 2),16);\n  }\n  return bts;\n}\n", "nl": "Given a hexstring this will return the byte array corresponding to the string"}
{"code": "public static boolean isChinese(int codePoint){\n  return codePoint >= ChineseLanguageConstants.CHINESE_START && codePoint <= ChineseLanguageConstants.CHINESE_END;\n}\n", "nl": "Use code point of a character to decide if it is a Chinese character"}
{"code": "public VideoDeleteAlbumQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"video.deleteAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public BlurDrawable(Activity activity){\n  this(activity.getWindow().getDecorView());\n}\n", "nl": "used for dialog/fragment/popWindow/dialog"}
{"code": "public Jim2Mov(ImageProvider ip,MovieInfoProvider mip){\n  this.ip=ip;\n  this.mip=mip;\n  itm=new ImagesToMovie(this);\n}\n", "nl": "Creates a new instance of Jim2Mov"}
{"code": "public Builder integerToCategorical(String columnName,List<String> categoryStateNames){\n  return transform(new IntegerToCategoricalTransform(columnName,categoryStateNames));\n}\n", "nl": "Convert the specified column from an integer representation (assume values 0 to numCategories-1) to a categorical representation, given the specified state names"}
{"code": "public IntervalFeatureSet(Map<String,List<IntervalFeature>> intervalMap,TrackFormat type){\n  this.intervalMap=intervalMap;\n  this.sortIntervalsWithinChroms();\n  this.type=type;\n}\n", "nl": "Initialize directly from map of IntervalFeatures"}
{"code": "@ColorInt private int extractIntAttribute(Context context,int[] attribute){\n  TypedValue typedValue=new TypedValue();\n  TypedArray a=context.obtainStyledAttributes(typedValue.data,attribute);\n  int color=a.getColor(0,0);\n  a.recycle();\n  return color;\n}\n", "nl": "Extracts the drawable of the passing Context's theme"}
{"code": "public boolean isUptoDate(){\n  return uptodate;\n}\n", "nl": "is viewer uptodate?"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static void int2buff(int n,byte[] bs,int offset){\n  bs[offset]=(byte)((n >> 24) & 0xFF);\n  bs[offset + 1]=(byte)((n >> 16) & 0xFF);\n  bs[offset + 2]=(byte)((n >> 8) & 0xFF);\n  bs[offset + 3]=(byte)(n & 0xFF);\n  return;\n}\n", "nl": "int convert to buff (big-endian)"}
{"code": "public static IncludeReference create(@NonNull Module module,@NonNull VirtualFile fromFile,@Nullable VirtualFile toFile){\n  return new IncludeReference(module,fromFile,toFile);\n}\n", "nl": "Creates a new include reference"}
{"code": "@Override protected boolean requireRecentSdk(){\n  return true;\n}\n", "nl": "Is the bundled (incomplete) SDK install adequate or do we need to find a valid install?"}
{"code": "@Override public boolean dispatchTouchEvent(MotionEvent ev){\n  return true;\n}\n", "nl": "Disables touch"}
{"code": "static final void intToByteArray(int value,byte[] bytes,int startIndex){\n  int i=startIndex * 4;\n  bytes[i]=(byte)(value >>> 24);\n  bytes[i + 1]=(byte)(value >>> 16);\n  bytes[i + 2]=(byte)(value >>> 8);\n  bytes[i + 3]=(byte)(value);\n}\n", "nl": "Merge an int value into byte array, starting at the specified starting index (occupies the next 4 bytes);"}
{"code": "public PhotosSearchQuery sort(Integer value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order:"}
{"code": "public static boolean canUseItem(Player player,Item item){\n  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canUseItem.ordinal()]) {\n    if (!restrictions.canUseItem(player,item)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Check whether player can use an item"}
{"code": "public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data,List<String> skipColumns){\n  return normalize(schema,data,0,1,skipColumns);\n}\n", "nl": "Scale all data  0 to 1"}
{"code": "public SM_STATS_INFO(Player player){\n  this.player=player;\n  this.pcd=player.getCommonData();\n  this.pgs=player.getGameStats();\n  this.pls=player.getLifeStats();\n}\n", "nl": "Constructs new <tt>SM_UI</tt> packet"}
{"code": "public double norm2(){\n  return (new SingularValueDecomposition(this).norm2());\n}\n", "nl": "Two norm"}
{"code": "public SM_CREATE_CHARACTER(PlayerAccountData accPlData,int responseCode){\n  this.player=accPlData;\n  this.responseCode=responseCode;\n}\n", "nl": "Constructs new <tt>SM_CREATE_CHARACTER </tt> packet"}
{"code": "public DataColorAction(String group,String dataField,int dataType,String colorField){\n  super(group,colorField);\n  setDataType(dataType);\n  setDataField(dataField);\n}\n", "nl": "Create a new DataColorAction"}
{"code": "public SecureGetAppBalanceQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.getAppBalance\",Integer.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public void onOk(int taskId){\n  TransferablePlayer tplayer=this.transfers.remove(taskId);\n  textLog.info(\"taskId:\" + taskId + \"; [TransferComplete]\");\n  PlayerService.deletePlayerFromDB(tplayer.playerId);\n}\n", "nl": "from login server to source, after response from target server"}
{"code": "public TaxonomyClusterViewer(final MainViewer viewer){\n  super(viewer.getDir(),viewer,ClassificationType.Taxonomy.toString());\n}\n", "nl": "creates a new network viewer"}
{"code": "@Override public void saveGenericEntity(Object entity){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.saveOrUpdate(entity);\n  transaction.commit();\n  session.close();\n}\n", "nl": "Save a recording"}
{"code": "public boolean containsEx(String memberName){\n  return legionMemberExByName.containsKey(memberName);\n}\n", "nl": "Returns true if legion is in cached by id"}
{"code": "public AudioGetRecommendationsQuery shuffle(Boolean value){\n  return unsafeParam(\"shuffle\",value);\n}\n", "nl": "true - shuffle on"}
{"code": "public void removeDragComponent(){\n  if (myDragDropWidget != null) {\n    myWidgetsScene.removeWidget(myDragDropWidget);\n    myDragDropWidget=null;\n  }\n}\n", "nl": "Remove a drop widget"}
{"code": "public UrlValidator(String[] schemes){\n  this(schemes,0L);\n}\n", "nl": "Behavior of validation is modified by passing in several strings options:"}
{"code": "public StructStorageStat[] listStorages(TrackerServer trackerServer,String groupName) throws IOException {\n  final String storageIpAddr=null;\n  return this.listStorages(trackerServer,groupName,storageIpAddr);\n}\n", "nl": "query storage server stat info of the group"}
{"code": "public void save(Writer writer){\n  YAML.get().dump(saveMap(),writer);\n}\n", "nl": "Saves this PluginDescriptionFile to the given writer"}
{"code": "protected List<byte[]> convertStringListToByteArray(List<String> valueList){\n  List<byte[]> byteArrayList=new ArrayList<>(valueList.size());\n  for (  String value : valueList) {\n    byteArrayList.add(value.getBytes(Charset.defaultCharset()));\n  }\n  return byteArrayList;\n}\n", "nl": "this method will convert list of string to list of byte array"}
{"code": "private static Bitmap resizePhoto(Bitmap realImage,float maxImageSize,boolean filter){\n  float ratio=Math.min((float)maxImageSize / realImage.getWidth(),(float)maxImageSize / realImage.getHeight());\n  int width=Math.round((float)ratio * realImage.getWidth());\n  int height=Math.round((float)ratio * realImage.getHeight());\n  Bitmap newBitmap=Bitmap.createScaledBitmap(realImage,width,height,filter);\n  return newBitmap;\n}\n", "nl": "This method resize the photo"}
{"code": "@deprecated public char next(){\n  if (this.pos < this.end - 1) {\n    this.pos+=1;\n    return this.text.charAt(this.pos);\n  }\n  this.pos=this.end;\n  return 65535;\n}\n", "nl": "/*    "}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + PearsonDistance.PEARSON_DISTANCE + \";\");\n}\n", "nl": "action to be performed"}
{"code": "private void handleOuterClassThisInit(soot.SootMethod sootMethod){\n  SootField this0Field=body.getMethod().getDeclaringClass().getFieldByNameUnsafe(\"this$0\");\n  if (this0Field != null) {\n    soot.jimple.FieldRef fieldRef=soot.jimple.Jimple.v().newInstanceFieldRef(specialThisLocal,this0Field.makeRef());\n    soot.jimple.AssignStmt stmt=soot.jimple.Jimple.v().newAssignStmt(fieldRef,outerClassParamLocal);\n    body.getUnits().add(stmt);\n  }\n}\n", "nl": "adds this field for the outer class"}
{"code": "@Override public void initialize(SinkTaskContext context){\n  iTaskContext=context;\n}\n", "nl": "Initialise sink task"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public Builder duplicateColumns(List<String> columnNames,List<String> newNames){\n  return transform(new DuplicateColumnsTransform(columnNames,newNames));\n}\n", "nl": "Duplicate a set of columns"}
{"code": "private AudioInputStream synthesizeVocalization(AudioFileFormat aft,Element domElement) throws SynthesisException {\n  int numberOfBackChannels=unitFileReader.getNumberOfUnits();\n  int backchannelNumber=vSelector.getBestMatchingCandidate(domElement);\n  assert backchannelNumber < numberOfBackChannels : \"This voice has \" + numberOfBackChannels + \" backchannels only. so it doesn't support unit number \"+ backchannelNumber;\n  return synthesizeSelectedVocalization(backchannelNumber,aft,domElement);\n}\n", "nl": "Synthesize a vocalization which fits better for given target"}
{"code": "Node(){\n  key=null;\n  next=prev=this;\n}\n", "nl": "Create the header entry"}
{"code": "public Builder addColumnFloat(String name){\n  return addColumn(new FloatMetaData(name));\n}\n", "nl": "Add a Double column with no restrictions on the allowable values, except for no NaN/infinite values allowed"}
{"code": "@NonNull public static StorableFence and(@NonNull Collection<StorableFence> fences){\n  StorableFence metaFence=new StorableFence(Type.META);\n  metaFence.mAndFences.addAll(fences);\n  return metaFence;\n}\n", "nl": "Creates a meta storable fence which is a logical 'and' of all the given fences"}
{"code": "public boolean isStable(){\n  return myFeatures.contains(FEATURE_STABLE);\n}\n", "nl": "Returns true if GAPIS is considered stable (non-experimental):"}
{"code": "public VideoCreateCommentQuery stickerId(Integer value){\n  return unsafeParam(\"sticker_id\",value);\n}\n", "nl": "Set sticker id"}
{"code": "public boolean hasASTForSootName(String name){\n  if (sootNameToAST == null)   return false;\n  if (sootNameToAST.containsKey(name))   return true;\n  return false;\n}\n", "nl": "returns true if there is an AST avail for given soot class"}
{"code": "public int[][] fromFile(File file) throws IOException {\n  BufferedImage image=ImageIO.read(file);\n  image=scalingIfNeed(image,true);\n  return toIntArrayArray(image);\n}\n", "nl": "Load a rastered image from file"}
{"code": "private void drawShadows(Canvas canvas){\n  int height=(int)(3 * getItemHeight());\n  topShadow.setBounds(0,0,getWidth(),height);\n  topShadow.draw(canvas);\n  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());\n  bottomShadow.draw(canvas);\n}\n", "nl": "Draws shadows on top and bottom of control"}
{"code": "public String[] listUsers(){\n  ResponseEntity<String[]> response=restTemplate.exchange(url + RMAControllerMappings.LIST_USERS_MAPPING,HttpMethod.GET,request,String[].class);\n  return response.getBody();\n}\n", "nl": "Get a List of users"}
{"code": "public static String escapeString(String str,char escapeChar,char charToEscape){\n  return escapeString(str,escapeChar,new char[]{charToEscape});\n}\n", "nl": "Escape <code>charToEscape</code> in the string with the escape char <code>escapeChar</code>"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 2 && !viewer.getPcoaTab().isIs3dMode();\n}\n", "nl": "this is currently selected?"}
{"code": "default String resourceName(String tableName,String type){\n  return String.format(RESOURCE_NAME,tableName,type);\n}\n", "nl": "Get the name of a relation between an object and a resource"}
{"code": "public int append_file1(String appender_file_id,byte[] file_buff) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.append_file(parts[0],parts[1],file_buff);\n}\n", "nl": "append file to storage server (by file buff)"}
{"code": "private void validateType(TypeImpl conceptType){\n  if (conceptType.isAbstract() && !ValidateGlobalRules.validateIsAbstractHasNoIncomingIsaEdges(conceptType))   errorsFound.add(ErrorMessage.VALIDATION_IS_ABSTRACT.getMessage(conceptType.getId()));\n}\n", "nl": "Validation rules exclusive to types"}
{"code": "public Future<?> scheduleHpRestoreTask(CreatureLifeStats<? extends Creature> lifeStats){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new HpRestoreTask(lifeStats),1700,DEFAULT_DELAY);\n}\n", "nl": "HP restoring task"}
{"code": "public boolean isCompatible(Split split){\n  return !(getA().intersects(split.getA()) && getA().intersects(split.getB()) && getB().intersects(split.getA())&& getB().intersects(split.getB()));\n}\n", "nl": "is this split compatible with the given one?"}
{"code": "public WriteEntriesSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "@Override public int fillChunkData(byte[] data,int offset,int rowId,KeyStructureInfo restructuringInfo){\n  byte[] maskedKey=getMaskedKey(dataChunk,rowId * chunkAttributes.getColumnValueSize(),restructuringInfo);\n  System.arraycopy(maskedKey,0,data,offset,maskedKey.length);\n  return maskedKey.length;\n}\n", "nl": "Below method will be used to fill the data based on offset and row id"}
{"code": "public Response doPatch(String url){\n  return doPatch(url,null);\n}\n", "nl": "Does a HTTP PATCH with an empty body"}
{"code": "public boolean isInInstance(){\n  return getPosition().isInstanceMap();\n}\n", "nl": "Check if map is instance"}
{"code": "public GroupsDeleteLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){\n  super(client,\"groups.deleteLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  linkId(linkId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static GenericEntity createGenericEntity(GenericEntity value){\n  if (value == null) {\n    throw new IllegalArgumentException(\"Cannot create a GenericEntity with a null value parameter\");\n  }\n  GenericEntity newEntity=new GenericEntity();\n  newEntity.init(value);\n  return newEntity;\n}\n", "nl": "Copy Factory Method: Creates new GenericEntity from existing GenericEntity"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  String input=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter label of node to scroll to\",\"None\");\n  if (input != null) {\n    input=input.trim();\n    if (input.length() > 0)     execute(\"scrollTo node='\" + input + \"';\");\n  }\n}\n", "nl": "action to be performed"}
{"code": "private void saveInstantUploadPathOnPreferences(){\n  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n  SharedPreferences.Editor editor=appPrefs.edit();\n  editor.putString(\"instant_upload_path\",mUploadPath);\n  editor.commit();\n}\n", "nl": "Save the \"Instant Upload Path\" on preferences"}
{"code": "public MainTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "protected void writeLSD() throws IOException {\n  writeShort(width);\n  writeShort(height);\n  out.write((0x80 | 0x70 | 0x00| palSize));\n  out.write(0);\n  out.write(0);\n}\n", "nl": "Writes Logical Screen Descriptor"}
{"code": "public static void launch(Context context,String startLabelId,int activeSensorIndex,boolean fromRecord,boolean createTask,Bundle options){\n  final Intent intent=new Intent(context,RunReviewActivity.class);\n  intent.putExtra(RunReviewFragment.ARG_START_LABEL_ID,startLabelId);\n  intent.putExtra(RunReviewFragment.ARG_SENSOR_INDEX,activeSensorIndex);\n  intent.putExtra(EXTRA_FROM_RECORD,fromRecord);\n  intent.putExtra(EXTRA_CREATE_TASK,createTask);\n  context.startActivity(intent,options);\n}\n", "nl": "Launches a new run review activity"}
{"code": "@Override public void remove(){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Not supported"}
{"code": "public static boolean putLong(Context context,String key,long value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putLong(key,value);\n  return editor.commit();\n}\n", "nl": "put long preferences"}
{"code": "protected void resetOptions(){\n  m_InfoGains=null;\n  m_missing_merge=true;\n  m_Binarize=false;\n}\n", "nl": "Reset options to their default values"}
{"code": "@deprecated public char current(){\n  if ((this.pos >= this.begin) && (this.pos < this.end)) {\n    return this.text.charAt(this.pos);\n  }\n  return 65535;\n}\n", "nl": "/*    "}
{"code": "public static void addGlue(JComponent b,boolean horiz){\n  b.add(horiz ? Box.createHorizontalGlue() : Box.createVerticalGlue());\n}\n", "nl": "Add a glue, or variable spacing, to a UI component"}
{"code": "public Window(Collection<String> words,int begin,int end){\n  this(words,5,begin,end);\n}\n", "nl": "Creates a window with a context of size 3"}
{"code": "public org.datavec.api.berkeley.PriorityQueue<E> asMinPriorityQueue(){\n  org.datavec.api.berkeley.PriorityQueue<E> pq=new org.datavec.api.berkeley.PriorityQueue<E>(entries.size());\n  for (  Entry<E,Double> entry : entries.entrySet()) {\n    pq.add(entry.getKey(),-entry.getValue());\n  }\n  return pq;\n}\n", "nl": "Warning: all priorities are the negative of their counts in the counter here"}
{"code": "static public int[] removeIndex(int[] X,int x){\n  int newX[]=new int[X.length - 1];\n  int j=0;\n  for (int i=0; i < X.length; i++)   if (X[i] != x)   newX[j++]=X[i];\n  return newX;\n}\n", "nl": "Remove val x from list of int X"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"Reading from fasta file\");\n}\n", "nl": "is file acceptable?"}
{"code": "@Deployment(resources={\"org/activiti/engine/test/bpmn/event/timer/StartTimerEventTest.testDurationStartTimerEvent.bpmn20.xml\"}) public void testTimerStartEventDeployment(){\n  ProcessDefinitionEntity processDefinition=(ProcessDefinitionEntity)repositoryService.createProcessDefinitionQuery().processDefinitionKey(\"startTimerEventExample\").singleResult();\n  ActivitiEntityEvent processDefinitionCreated=ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED,processDefinition);\n  TimerJobEntity timer=(TimerJobEntity)managementService.createTimerJobQuery().singleResult();\n  ActivitiEntityEvent timerCreated=ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED,timer);\n  assertSequence(processDefinitionCreated,timerCreated);\n  listener.clearEventsReceived();\n}\n", "nl": "test sequence of events for process definition with timer start event"}
{"code": "public ConceptualGraph(){\n}\n", "nl": "Creates a new instance of ConceptualGraph"}
{"code": "public boolean isPinchZoomEnabled(){\n  return mPinchZoomEnabled;\n}\n", "nl": "returns true if pinch-zoom is enabled, false if not"}
{"code": "public DuplicateAionObjectException(Throwable cause){\n  super(cause);\n}\n", "nl": "Creates new error"}
{"code": "public GraphSimilarityComparatorAdapter(){\n}\n", "nl": "Creates a new instance of GraphSimilarityComparatorAdapter"}
{"code": "public AdsGetSuggestionsQuery(VkApiClient client,UserActor actor,AdsGetSuggestionsSection section){\n  super(client,\"ads.getSuggestions\",Utils.buildParametrizedType(List.class,TargSuggestions.class));\n  accessToken(actor.getAccessToken());\n  section(section);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public LikesGetListQuery skipOwn(Boolean value){\n  return unsafeParam(\"skip_own\",value);\n}\n", "nl": "Set skip own"}
{"code": "public AdsGetUploadURLQuery(VkApiClient client,UserActor actor,AdsGetUploadURLAdFormat adFormat){\n  super(client,\"ads.getUploadURL\",String.class);\n  accessToken(actor.getAccessToken());\n  adFormat(adFormat);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@deprecated public AttributedCharacterIterator formatToCharacterIterator(Object obj){\n  StringBuffer toAppendTo=new StringBuffer();\n  FieldPosition pos=new FieldPosition(0);\n  toAppendTo=format(obj,toAppendTo,pos);\n  AttributedString as=new AttributedString(toAppendTo.toString());\n  as.addAttribute(DateFormat.Field.TIME_ZONE,DateFormat.Field.TIME_ZONE);\n  return as.getIterator();\n}\n", "nl": "/*     "}
{"code": "public UtilsCheckLinkQuery(VkApiClient client,UserActor actor,String url){\n  super(client,\"utils.checkLink\",LinkChecked.class);\n  accessToken(actor.getAccessToken());\n  url(url);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isEmpty(){\n  return this.getEntries().size() == 0;\n}\n", "nl": "Returns true if the list is empty"}
{"code": "public void put(String key,T value){\n  internalMap.put(key,value);\n}\n", "nl": "Set the value for the supplied key"}
{"code": "public static void showError(Object parentIgnored,String message,long milliseconds){\n  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,milliseconds);\n}\n", "nl": "show an error notation"}
{"code": "private void fireProcessSupervisionUpdate(final SupervisionEvent supervisionEvent){\n  Set<SupervisionListener> listeners=processSupervisionListeners.get(supervisionEvent.getEntityId());\n  if (listeners != null) {\n    for (    SupervisionListener listener : listeners) {\n      listener.onSupervisionUpdate(supervisionEvent);\n    }\n  }\n}\n", "nl": "Inner method to inform all subscribed listeners of the process supervision event"}
{"code": "private String separeMetaTagsContent(String content){\n  String result=Regex.pregMatch(content,Regex.METATAG_CONTENT_PATTERN,1);\n  return htmlDecode(result);\n}\n", "nl": "Gets content from metatag"}
{"code": "public boolean isActiveStepCompleted(){\n  return isStepCompleted(activeStep);\n}\n", "nl": "Determines whether the active step is completed or not"}
{"code": "public DeriveColumnsFromTimeTransform build(){\n  return new DeriveColumnsFromTimeTransform(this);\n}\n", "nl": "Create the transform instance"}
{"code": "private static void prependSchwa(Item item){\n  Item schwa=item.prependItem(null);\n  schwa.getFeatures().setString(\"name\",\"ax\");\n  item.getItemAs(Relation.SYLLABLE_STRUCTURE).prependItem(schwa);\n}\n", "nl": "Prepends a schwa to the given item"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public GroupsUnbanUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.unbanUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean isShowToastEnabled(){\n  InstantRunConfiguration configuration=InstantRunConfiguration.getInstance();\n  return configuration.SHOW_TOAST;\n}\n", "nl": "Is showing toasts enabled in the given project"}
{"code": "public void release(int key){\n  controller.keyRelease(key);\n}\n", "nl": "Release a key"}
{"code": "public void resetCircleColors(){\n  mCircleColors=new ArrayList<>();\n}\n", "nl": "resets the circle-colors array and creates a new one"}
{"code": "public static String roundToString(double value,int significantFigures){\n  MathContext mc=new MathContext(significantFigures);\n  BigDecimal num=new BigDecimal(value);\n  return num.round(mc).toPlainString();\n}\n", "nl": "Returns a string representation of number rounded to given number of significant figures"}
{"code": "public GroupsApproveRequestQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.approveRequest\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public final boolean isOverridingDeviceState(){\n  return (myOverride & CFG_DEVICE_STATE) != 0;\n}\n", "nl": "Returns true if the device state is overridden"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public AudioEditAlbumQuery(VkApiClient client,UserActor actor,int albumId,String title){\n  super(client,\"audio.editAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void rollback() throws GenericTransactionException {\n  rollback(null);\n}\n", "nl": "Rolls back transaction in the current thread IF transactions are available"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAvailablePermitQuestion && ((AirMapAvailablePermitQuestion)o).getId().equals(getId());\n}\n", "nl": "Comparison based on ID"}
{"code": "public static boolean isTinkerEnableWithSharedPreferences(Context context){\n  SharedPreferences sp=context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG,Context.MODE_MULTI_PROCESS);\n  return sp.getBoolean(ShareConstants.TINKER_ENABLE_CONFIG,true);\n}\n", "nl": "can't load or receive any patch!"}
{"code": "@deprecated protected boolean matchNodesCanHaveValues(){\n  return false;\n}\n", "nl": "/*    "}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "public PhotosGetAlbumsQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAlbums\",GetAlbumsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected static float distance(float eventX,float startX,float eventY,float startY){\n  float dx=eventX - startX;\n  float dy=eventY - startY;\n  return (float)Math.sqrt(dx * dx + dy * dy);\n}\n", "nl": "returns the distance between two points"}
{"code": "private boolean isChildService(Operation op){\n  String path=op.getUri().getPath();\n  return !path.equals(getParentPath(op));\n}\n", "nl": "Is the current service a child service"}
{"code": "public static java.sql.Timestamp nowTimestamp(){\n  return getTimestamp(System.currentTimeMillis());\n}\n", "nl": "Return a Timestamp for right now"}
{"code": "private void trackRange(final long value){\n  if (value < minValue) {\n    minValue=value;\n  }\n  if (value > maxValue) {\n    maxValue=value;\n  }\n}\n", "nl": "Track minimum and maximum observations"}
{"code": "public void repositoryModified(ISVNRepositoryLocation repository){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.repositoryModified(repository);\n  }\n}\n", "nl": "signals all listener that we have removed a repository"}
{"code": "protected void onUnregisterObserver(){\n}\n", "nl": "Called whenever it's time to stop monitoring changes on the loaders data source"}
{"code": "public PhotosCreateCommentQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n", "nl": "Set guid"}
{"code": "private USEnglish(){\n}\n", "nl": "Not constructable"}
{"code": "public void logStatisticsAsTableDriver(){\n}\n", "nl": "Below method will be used to show statistic log as table"}
{"code": "public NewsfeedAddBanQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.addBan\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public StyleImageView disableAnimation(){\n  styler.disableAnimation();\n  return this;\n}\n", "nl": "this method turn off animation and reset animation duration to 0"}
{"code": "public static void log(Object message,Exception exception){\n  Gdx.app.log(TAG,String.valueOf(message),exception);\n}\n", "nl": "Logs a message to the console or logcat"}
{"code": "public GroupsRemoveUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.removeUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static int px2dip(Context context,float pxValue){\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(pxValue / scale + 0.5f);\n}\n", "nl": "convert px to dip"}
{"code": "public boolean isEmpty(){\n  return q.isEmpty();\n}\n", "nl": "Answers whether the queue is empty"}
{"code": "public DatabaseGetRegionsQuery(VkApiClient client,UserActor actor,int countryId){\n  super(client,\"database.getRegions\",GetRegionsResponse.class);\n  accessToken(actor.getAccessToken());\n  countryId(countryId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ExecuteStorageFunctionQuery storageFunction(Actor actor,String storageFunctionName){\n  return new ExecuteStorageFunctionQuery(getClient(),actor,storageFunctionName);\n}\n", "nl": "Execute storage function"}
{"code": "public void showLoading(List<Integer> skipIds){\n  switchState(LOADING,null,null,null,null,null,skipIds);\n}\n", "nl": "Hide content and show the progress bar"}
{"code": "@Override public void stopWatch(){\n  super.stopWatch();\n  _retries=0;\n}\n", "nl": "Stop watch and reset retries count"}
{"code": "public boolean handlesPainting(){\n  return false;\n}\n", "nl": "Returns true to handles painting the component"}
{"code": "public static String[] splitProtocol(String packet){\n  String _partitioningPacket[]=packet.split(Settings.sReceiverSplitProtocolToken);\n  for (int i=0; i < _partitioningPacket.length - 1; i++) {\n    _partitioningPacket[i]=_partitioningPacket[i + 1];\n  }\n  _partitioningPacket[_partitioningPacket.length - 1]=null;\n  return _partitioningPacket;\n}\n", "nl": "split the packet base on the programmer's rule"}
{"code": "void createFinish(int width,int height){\n  if (mWXSDKInstance.getRenderStrategy() == WXRenderStrategy.APPEND_ONCE) {\n    mWXSDKInstance.onViewCreated(mGodComponent);\n  }\n  mWXSDKInstance.onRenderSuccess(width,height);\n}\n", "nl": "weex render finish"}
{"code": "public static void drawArrow(Graphics2D g,Polygon arrow,int x,int y){\n  arrow.translate(x,y);\n  g.draw(arrow);\n  g.fill(arrow);\n  arrow.translate(-x,-y);\n}\n", "nl": "Utility function to draw in (x, y) one of the Polygon used for the arrows"}
{"code": "public ClassPathResource(String resourceName){\n  if (resourceName == null)   throw new IllegalStateException(\"Resource name can't be null\");\n  this.resourceName=resourceName;\n}\n", "nl": "Builds new ClassPathResource object"}
{"code": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + ((columnSchema == null) ? 0 : columnSchema.hashCode());\n  return result;\n}\n", "nl": "to generate the hash code for this class"}
{"code": "public void loading(){\n  mHintView.setVisibility(View.GONE);\n  mProgressBar.setVisibility(View.VISIBLE);\n}\n", "nl": "loading status"}
{"code": "public static String fieldNameToMethodName(String methodPrefix,String fieldName){\n  return fieldNameToMethodName(methodPrefix,fieldName,false);\n}\n", "nl": "field name to method name"}
{"code": "public State(){\n}\n", "nl": "Construct a State with null attributes"}
{"code": "public int addOrderTerm(String termTypeId,BigDecimal termValue,Long termDays){\n  return addOrderTerm(termTypeId,termValue,termDays,null);\n}\n", "nl": "Add an orderTerm to the order"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set drawer=\");\n  String drawerName=np.getWordMatchesIgnoringCase(Basic.toString(ViewerBase.DiagramType.values(),\" \"));\n  np.matchIgnoreCase(\";\");\n  ViewerBase viewer=(ViewerBase)getViewer();\n  viewer.setDrawerType(drawerName);\n  viewer.updateTree();\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean canEvolve(){\n  return !EvolutionInfo.isFullyEvolved(getPokemonId()) && (getCandy() >= getCandiesToEvolve());\n}\n", "nl": "Check if can evolve this pokemon"}
{"code": "public void onAfterSpawn(){\n}\n", "nl": "Called after object was placed into world"}
{"code": "public void testMinApiParent(){\n  doTestForParentApi(\"android:Theme.Holo\",\"apiParentTestAfter3\");\n}\n", "nl": "Tests setting a parent with api = projectMinApi"}
{"code": "public static boolean isAnyCard(String ccPassed){\n  if (isEmpty(ccPassed))   return defaultEmptyOK;\n  String cc=stripCharsInBag(ccPassed,creditCardDelimiters);\n  if (!isCreditCard(cc))   return false;\n  if (isMasterCard(cc) || isVisa(cc) || isAmericanExpress(cc)|| isDinersClub(cc)|| isDiscover(cc)|| isEnRoute(cc)|| isJCB(cc)|| isSolo(cc)|| isswitch(cc)|| isVisaElectron(cc))   return true;\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid number for any accepted credit card"}
{"code": "public final boolean isOnline(){\n  return gscHandler != null && gscHandler.getState() == State.AUTHED;\n}\n", "nl": "Check if GameServer is Online"}
{"code": "private void addSegmentsIfEmpty(JobContext job,AbsoluteTableIdentifier absoluteTableIdentifier) throws IOException {\n  if (getSegmentsFromConfiguration(job).length == 0) {\n    SegmentStatusManager.ValidAndInvalidSegmentsInfo validAndInvalidSegments=new SegmentStatusManager(absoluteTableIdentifier).getValidAndInvalidSegments();\n    setSegmentsToAccess(job.getConfiguration(),validAndInvalidSegments.getValidSegments());\n  }\n}\n", "nl": "Below method will be used to set the segments details if segments are not added in the configuration"}
{"code": "public static String formatQuantity(float quantity){\n  return formatQuantity((double)quantity);\n}\n", "nl": "Formats a float representing a quantity into a string"}
{"code": "public boolean isError(){\n  return state.equals(ERROR);\n}\n", "nl": "Check if error state is shown"}
{"code": "public void mousePressed(MouseEvent e){\n  mIsControlDown=e.isControlDown();\n  mIsShiftDown=e.isShiftDown();\n  mIsAltDown=e.isAltDown();\n  float x=mViewTransform.getAndroidFX(e.getX());\n  float y=mViewTransform.getAndroidFY(e.getY());\n  mousePressed(x,y,SwingUtilities.isRightMouseButton(e));\n}\n", "nl": "Mouse press handling"}
{"code": "public static boolean isWifiEnabled(Context context){\n  ConnectivityManager mgrConn=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  TelephonyManager mgrTel=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);\n  return ((mgrConn.getActiveNetworkInfo() != null && mgrConn.getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED) || mgrTel.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);\n}\n", "nl": "is Wifi Enabled"}
{"code": "public boolean equalTo(Highlight h){\n  if (h == null)   return false;\n else {\n    if (this.mDataSetIndex == h.mDataSetIndex && this.mX == h.mX && this.mStackIndex == h.mStackIndex && this.mDataIndex == h.mDataIndex)     return true;\n else     return false;\n  }\n}\n", "nl": "Returns true if this highlight object is equal to the other (compares xIndex and dataSetIndex)"}
{"code": "protected final boolean isLoadFooterVisible(){\n  return mLoadFooter == getChildAt(getChildCount() - 1);\n}\n", "nl": "Is load footer visible?"}
{"code": "public VideoGetAlbumsQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.getAlbums\",GetAlbumsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void trigger(int position,float positionOffset){\n  CircleIndicator.this.mCurItemPosition=position;\n  CircleIndicator.this.mCurItemPositionOffset=positionOffset;\n  Log.e(\"CircleIndicator\",\"onPageScrolled()\" + position + \":\"+ positionOffset);\n  requestLayout();\n  invalidate();\n}\n", "nl": "trigger to redraw the indicator when the ViewPager's selected item changed!"}
{"code": "static protected boolean isVowel(String phone){\n  return VOWELS.indexOf(phone.substring(0,1)) != -1;\n}\n", "nl": "Determines if the given phone is a vowel"}
{"code": "public boolean isJsInject(){\n  return isOptionEnabled(UrlFilterRuleOption.JS_INJECT);\n}\n", "nl": "Does not inject adguard javascript to page"}
{"code": "public void removeCookie(String url){\n  cookieJar.remove(url);\n}\n", "nl": "This method allows to remove cached authentication cookie for a given URL"}
{"code": "public NGramCorrelationForm(){\n  initComponents();\n}\n", "nl": "Creates new form NGramCorrelationForm"}
{"code": "public boolean drawShadows(){\n  return drawShadows;\n}\n", "nl": "Determine whether shadows are drawn"}
{"code": "protected void moveToBackup(){\n  beforeSpaceModeChange(SpaceMode.BACKUP);\n  setSpaceMode(SpaceMode.BACKUP);\n  afterSpaceModeChange(SpaceMode.BACKUP);\n}\n", "nl": "Change space mode to backup"}
{"code": "private void updateAfterDisbandLegion(Legion legion){\n  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {\n    PacketSendUtility.broadcastPacket(onlineLegionMember,new SM_LEGION_UPDATE_TITLE(onlineLegionMember.getObjectId(),0,\"\",0),true);\n    PacketSendUtility.sendPacket(onlineLegionMember,new SM_LEGION_LEAVE_MEMBER(1300302,0,legion.getLegionName()));\n    onlineLegionMember.resetLegionMember();\n  }\n}\n", "nl": "This method will remove legion from all legion members online after a legion has been disbanded"}
{"code": "public boolean optimizeScanForSingleObject(){\n  return true;\n}\n", "nl": "return true if we can save iterator creation and get a single entry"}
{"code": "public InputStreamInputSplit(InputStream is,File path){\n  this.is=is;\n  this.location=new URI[]{path.toURI()};\n}\n", "nl": "Instantiate with the given file as a uri"}
{"code": "@SuppressLint(\"DefaultLocale\") public static String doublePrecision(int time){\n  return String.format(\"%02d\",time);\n}\n", "nl": "coverts int to string with precision to two places"}
{"code": "public void resourceCopied(ISVNRemoteResource source,ISVNRemoteFolder destination){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceCopied(source,destination);\n  }\n}\n", "nl": "A resource has been copied"}
{"code": "protected MarketAddQuery name(String value){\n  return unsafeParam(\"name\",value);\n}\n", "nl": "Item name"}
{"code": "public PhotosCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n", "nl": "Post a comment from the community"}
{"code": "protected MarketSearchQueryWithExtended ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Identifier of an items owner community"}
{"code": "public SM_AUTH_GG(int sessionId){\n  super(0x0b);\n  this.sessionId=sessionId;\n}\n", "nl": "Constructs new instance of <tt>SM_AUTH_GG</tt> packet"}
{"code": "public void writeInt(int a) throws IOException {\n  outs.write((byte)(a));\n  outs.write((byte)(a >> 8));\n  outs.write((byte)(a >> 16));\n  outs.write((byte)(a >> 24));\n}\n", "nl": "write int, little endian"}
{"code": "@NotNull public NlConfigurationToolbarFixture requireApi(int apiLevel){\n  Wait.seconds(30).expecting(\"configuration to be updated\").until(null);\n  return this;\n}\n", "nl": "Requires the API level to be the given API level"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getDataType().equalsIgnoreCase(\"KEGG\");\n}\n", "nl": "this is currently selected?"}
{"code": "public SourceAsset sendSourceAsset(SourceAsset sourceAsset){\n  return authenticatedRestTemplate.postForObject(getBasePathForEntity(),sourceAsset,SourceAsset.class);\n}\n", "nl": "Send the source asset to the server and start the extraction process"}
{"code": "public void press(int mask){\n  controller.mousePress(mask);\n}\n", "nl": "Press mouse mask"}
{"code": "public static boolean equals(double x,double y){\n  return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n}\n", "nl": "Returns true iff both arguments are NaN or neither is NaN and they are equal"}
{"code": "private void openMenuDrawer(){\n  if (mDrawerLayout != null) {\n    mDrawerLayout.openDrawer(MENU_DRAWER_GRAVITY);\n  }\n}\n", "nl": "Used to open the menu drawer"}
{"code": "public static boolean isBitOn(int value,int bitNumber){\n  if (bitNumber <= 0 || bitNumber > 8) {\n    throw new IllegalArgumentException(\"Only bits 1 through 8 are supported\");\n  }\n  return ((value & MASKS[bitNumber - 1]) == MASKS[bitNumber - 1]);\n}\n", "nl": "Check if the bit is set to '1'"}
{"code": "public PrecompiledJoinCostReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName,null,null,0);\n}\n", "nl": "Create a precompiled join cost file reader from the given file"}
{"code": "public Bindings add(String property,JTextArea textArea){\n  registerPropertyChangeListener(textArea);\n  return add(new JTextAreaBinding(property,textArea));\n}\n", "nl": "Handles JTextArea lists"}
{"code": "private static void reverse(ConstraintWidget[] widgets){\n  for (int i=0; i < widgets.length / 2; i++) {\n    ConstraintWidget widget=widgets[i];\n    widgets[i]=widgets[widgets.length - 1 - i];\n    widgets[widgets.length - 1 - i]=widget;\n  }\n}\n", "nl": "in place Reverses the order of the widgets"}
{"code": "public static AlertDialog showTwoButtonsDialog(final Activity activity,final String title,final String text,final String negativeButtonText,final DialogInterface.OnClickListener leftButtonListener,final String positiveButtonText,final DialogInterface.OnClickListener positiveButtonListener){\n  if (activity == null || activity.isFinishing()) {\n    return null;\n  }\n  return new AlertDialog.Builder(activity).setTitle(title).setMessage(text).setPositiveButton(negativeButtonText,leftButtonListener).setNegativeButton(positiveButtonText,positiveButtonListener).show();\n}\n", "nl": "Show an Alert Dialog with two buttons"}
{"code": "protected MarketAddToAlbumQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Collections ids to add  item to"}
{"code": "public void increaseDefeat(){\n  defeat++;\n}\n", "nl": "this function increase the number about defeat; (+1)"}
{"code": "public static double standardDeviation(double[] data,int opt){\n  if (opt == 0)   return Math.sqrt(variance(data,opt));\n else   return Math.sqrt(variance(data,opt));\n}\n", "nl": "Compute the standard deviation of the given data, this function can deal with NaNs"}
{"code": "public boolean isSelected(){\n  return isApplicable() && getViewer().getPcoaTab() != null && getViewer().getPcoaTab().isFlipH();\n}\n", "nl": "this is currently selected?"}
{"code": "public static void w(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  Log.w(tag,msg,throwable);\n}\n", "nl": "Send a WARNING log message"}
{"code": "public void rectValuesToPixel(List<RectF> rects){\n  Matrix m=getValueToPixelMatrix();\n  for (int i=0; i < rects.size(); i++)   m.mapRect(rects.get(i));\n}\n", "nl": "transforms multiple rects with all matrices"}
{"code": "public void createInFile(String filePath) throws IOException {\n  this.inFile=new ExifInterface(filePath);\n}\n", "nl": "The file before it is compressed"}
{"code": "private void fireEquipmentSupervisionUpdate(final SupervisionEvent supervisionEvent){\n  Set<SupervisionListener> listeners=equipmentSupervisionListeners.get(supervisionEvent.getEntityId());\n  if (listeners != null) {\n    for (    SupervisionListener listener : listeners) {\n      listener.onSupervisionUpdate(supervisionEvent);\n    }\n  }\n}\n", "nl": "Inner method to inform all subscribed listeners of the equipment supervision event"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private static int probe(final int perturb,final int j){\n  return (j << 2) + j + perturb+ 1;\n}\n", "nl": "Compute next probe for collision resolution"}
{"code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "@SuppressWarnings(\"unchecked\") public static String mapWritableToString(MapWritable map){\n  JSONObject jsonObj=new JSONObject();\n  for (  Writable key : map.keySet()) {\n    jsonObj.put(key.toString(),map.get(key).toString());\n  }\n  return jsonObj.toJSONString();\n}\n", "nl": "Method to convert a MapWritable into a JSON string"}
{"code": "public AuthCheckPhoneQuery(VkApiClient client,UserActor actor,String phone,String clientSecret){\n  super(client,\"auth.checkPhone\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  phone(phone);\n  clientSecret(clientSecret);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void clear(){\n  freqTable.clear();\n}\n", "nl": "Clears the frequency table"}
{"code": "public void removeFifoXtnInfoForEntry(IEntryHolder eh){\n  _terminatingXtnsInfo.removeFifoXtnInfoForEntry(eh);\n}\n", "nl": "remove fifo xtn info for entry MUST be called  when entry is locked"}
{"code": "public void freeSLHolder(IStoredListIterator<T> slh){\n  if (slh != null)   slh.release();\n}\n", "nl": "this method is called  by outside scan that want to quit the scan and return the slholder to the factory"}
{"code": "public boolean showDialog(){\n  dialog.setVisible(true);\n  return !canceled;\n}\n", "nl": "show the dialog"}
{"code": "public FriendsGetRecentQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getRecent\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void close() throws IOException {\n  if (readerWriter != null) {\n    readerWriter.close();\n    readerWriter=null;\n  }\n}\n", "nl": "close the file"}
{"code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n", "nl": "net is3G"}
{"code": "public void updateGraph() throws Exception {\n  if (tabbedPane.getSelectedComponent() instanceof ITab) {\n    final ITab iTab=(ITab)tabbedPane.getSelectedComponent();\n    iTab.compute(taxa,distances);\n    clusterAnalysisSearcher.updateMatrixSearcher();\n  }\n}\n", "nl": "update the graph"}
{"code": "public void testLongStringPerformance(){\n  ISpellingCorrector sc=getSpellingCorrector();\n  sc.correct(\"thisisareallylongstringthatshouldcalusethingstorunreallyslow\");\n}\n", "nl": "If there is a performance issue this takes forever to run"}
{"code": "public ChangeSet(){\n  _mutators=new LinkedList<SpaceEntryMutator>();\n  _lease=0;\n}\n", "nl": "Constructs an empty change set"}
{"code": "public AccountRegisterDeviceQuery(VkApiClient client,UserActor actor,String token,String deviceId){\n  super(client,\"account.registerDevice\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  token(token);\n  deviceId(deviceId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Bitmap drawableToBitmap(Drawable drawable){\n  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();\n}\n", "nl": "convert Drawable to Bitmap"}
{"code": "public void resetConfiguration(){\n  setRainTime(-1);\n  setFadeOutTime(-1);\n  setSnowTime(-1);\n  setRainParticles(-1);\n  setSnowParticles(-1);\n}\n", "nl": "Restore to the default configuration settings"}
{"code": "private int byteArrayToInteger(byte[] b,int offset){\n  return (b[offset + 3] & 0xFF) << 24 | (b[offset + 2] & 0xFF) << 16 | (b[offset + 1] & 0xFF) << 8 | (b[offset] & 0xFF);\n}\n", "nl": "Convert 4 bytes to Integer"}
{"code": "protected void shareBySms(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SMS,getShareData(ShareConstant.SHARE_CHANNEL_SMS),ShareConstant.REQUEST_CODE);\n}\n", "nl": "share sms"}
{"code": "public void initialize(){\n  loginToClientChannelFactory=initChannelFactory();\n  Channel loginToClientChannel=initChannel(loginToClientChannelFactory,Config.CHAT_ADDRESS,loginToClientPipeLineFactory);\n  channelGroup.add(loginToClientChannel);\n  ServerCfg gs=new ServerCfg(Config.GAME_ADDRESS.getAddress().getHostAddress(),Config.GAME_ADDRESS.getPort(),\"Gs Connections\",new GsConnectionFactoryImpl());\n  nioServer=new NioServer(5,gs);\n  nioServer.connect();\n}\n", "nl": "Initialize listening on login port"}
{"code": "public Builder considerExifParams(boolean considerExifParams){\n  this.considerExifParams=considerExifParams;\n  return this;\n}\n", "nl": "Sets whether ImageLoader will consider EXIF parameters of JPEG image (rotate, flip)"}
{"code": "private void deleteLegionFromDB(Legion legion){\n  this.allCachedLegions.remove(legion);\n  DAOManager.getDAO(LegionDAO.class).deleteLegion(legion.getLegionId());\n}\n", "nl": "Completely removes legion from database and cache"}
{"code": "public boolean isEdgeVector(int edgeIndex){\n  String edgeValue=getFeature(edgeIndex).toString();\n  return (!edgeValue.equals(FeatureDefinition.NULLVALUE));\n}\n", "nl": "Is this an edge vector?"}
{"code": "public final static float calculateAngleFrom(float obj1X,float obj1Y,float obj2X,float obj2Y){\n  float angleTarget=(float)Math.toDegrees(Math.atan2(obj2Y - obj1Y,obj2X - obj1X));\n  if (angleTarget < 0) {\n    angleTarget=360 + angleTarget;\n  }\n  return angleTarget;\n}\n", "nl": "Get an angle between the line defined by two points and the horizontal axis"}
{"code": "public DocsAddQuery(VkApiClient client,UserActor actor,int ownerId,int docId){\n  super(client,\"docs.add\",AddResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  docId(docId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addChangeListener(PropertyChangeListener newListener){\n  listener.add(newListener);\n}\n", "nl": "Method to add a listener"}
{"code": "public void onScrollToClose(){\n}\n", "nl": "Invoke when scroll percent over the threshold for the first time"}
{"code": "public ResourceLazyLoadingScript metaArguments(Object... metaArguments){\n  this.metaArguments=metaArguments;\n  return this;\n}\n", "nl": "Adds another meta argument to the script"}
{"code": "public GroupsIsMemberQueryWithExtended(VkApiClient client,String groupId){\n  super(client,\"groups.isMember\",IsMemberExtendedResponse.class);\n  groupId(groupId);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private boolean pop(byte mode){\n  if (top < 0 || stack[top] != mode) {\n    return false;\n  }\n  --top;\n  return true;\n}\n", "nl": "Pop the stack, assuring that the current mode matches the expectation"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "AppendOnlyStreamReader(DistributedLogManager dlm) throws IOException {\n  this.dlm=dlm;\n  reader=dlm.getInputStream(0);\n  currentPosition=0;\n}\n", "nl": "Construct ledger input stream"}
{"code": "public ImageOverlayOptions build(){\n  ImageOverlayOptions options=new ImageOverlayOptions();\n  options.opacity=this.opacity;\n  options.attribution=this.attribution;\n  return options;\n}\n", "nl": "Builds the ImageOverlayOptions instance"}
{"code": "public boolean hasSimilarityMatrix(int featureIndex){\n  if (featureIndex >= this.getNumberOfByteFeatures()) {\n    return false;\n  }\n  return this.similarityMatrices != null && this.similarityMatrices[featureIndex] != null;\n}\n", "nl": "true, if given feature index contains similarity matrix"}
{"code": "public void startFirstSampleTimer(){\n}\n", "nl": "Starts the first sample timer"}
{"code": "public CM_PING(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_PING </tt> packet"}
{"code": "public GermanLexicon(){\n  this(\"germanlex\");\n}\n", "nl": "Creates the default CMU Lexicon which is a binary lexicon"}
{"code": "public static List<String> splitPath(String path){\n  return splitPath(new File(path));\n}\n", "nl": "Split a path into a list of directories ending with the file name"}
{"code": "public MessagesGetDialogsQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.getDialogs\",GetDialogsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void prepareDataSet(){\n  dataSet1=Arrays.asList(new String[]{\"a\",\"b\",\"c\"});\n  dataSet2=Arrays.asList(new String[]{\"d\",\"e\",\"f\"});\n  dataSet3=Arrays.asList(new String[]{\"b\",\"c\",\"a\",\"d\"});\n}\n", "nl": "prepare the dataset required for running test cases"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public int fillChunkData(byte[] data,int offset,int index,KeyStructureInfo keyStructureInfo){\n  if (chunkAttributes.getInvertedIndexes() != null) {\n    index=chunkAttributes.getInvertedIndexesReverse()[index];\n  }\n  System.arraycopy(dataChunk,index * chunkAttributes.getColumnValueSize(),data,offset,chunkAttributes.getColumnValueSize());\n  return chunkAttributes.getColumnValueSize();\n}\n", "nl": "Below method will be used to fill the data based on offset and row id"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "private MonsterHunterDatabaseHelper(Context context){\n  super(context,DATABASE_NAME,null,DATABASE_VERSION);\n  myContext=context;\n  setForcedUpgrade();\n}\n", "nl": "Initialize the helper object"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public boolean isCollapsed(){\n  return collapsed;\n}\n", "nl": "Returns true if similar entries are collapsed"}
{"code": "public static void removeCredentials(String url){\n  server2Credentials.remove(url);\n}\n", "nl": "remove credentials for given URL"}
{"code": "private void photoCameraIntent(){\n  String nomeFoto=DateFormat.format(\"yyyy-MM-dd_hhmmss\",new Date()).toString();\n  filePathImageCamera=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),nomeFoto + \"camera.jpg\");\n  Intent it=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  it.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(filePathImageCamera));\n  startActivityForResult(it,IMAGE_CAMERA_REQUEST);\n}\n", "nl": "Enviar foto tirada pela camera"}
{"code": "public boolean isSomeSampleColored(){\n  for (  String sample : getSampleOrder()) {\n    if (get(sample,HiddenAttribute.Color) != null)     return true;\n  }\n  return false;\n}\n", "nl": "is some sample colored"}
{"code": "public SwapReadOnlyIterator(ReadOnlyIterator<T> memoryIterator){\n  this._memoryIterator=memoryIterator;\n}\n", "nl": "Create an iterator which stars iterating over the packets which reside in the memory redo log file"}
{"code": "public SM_QUEST_ACTION(int questId){\n  this.action=3;\n  this.questId=questId;\n}\n", "nl": "Delete Quest(3)"}
{"code": "public static short readShort(DataInputStream dis,boolean isBigEndian) throws IOException {\n  if (!isBigEndian) {\n    return readLittleEndianShort(dis);\n  }\n else {\n    return dis.readShort();\n  }\n}\n", "nl": "Read a short from the input stream, byte-swapping as necessary"}
{"code": "public boolean hit(float x,float y){\n  return mBounds.contains(x,y);\n}\n", "nl": "Return true if the point (x, y) intersects with the ResizeHandle"}
{"code": "@PickTriggerResult public int fromDocuments(){\n  return this.fromDocuments(false);\n}\n", "nl": "Launch documents pick flow"}
{"code": "public static boolean isEmpty(CharSequence data){\n  return data == null || data.length() == 0;\n}\n", "nl": "Check out if it is a empty data"}
{"code": "public Dictionary(String sName,int iMaxWordSize){\n  WordDefs=new HashSet();\n  Name=sName;\n  MaxWordSize=iMaxWordSize;\n}\n", "nl": "Creates a new instance of Dictionary"}
{"code": "public GroupsIsMemberQueryWithUserIds(VkApiClient client,String groupId,Integer... userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatus.class));\n  groupId(groupId);\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MarketRemoveFromAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,List<Integer> albumIds){\n  super(client,\"market.removeFromAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  albumIds(albumIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public StatelessSection(int itemResourceId){\n  super();\n  this.itemResourceId=itemResourceId;\n}\n", "nl": "Create a Section object with loading/failed states but no header and footer"}
{"code": "public static double[] yVals(double[] vector){\n  double[] y=new double[vector.length / 2];\n  int count=0;\n  for (int i=0; i < vector.length; i++) {\n    if (i % 2 == 0)     y[count++]=vector[i];\n  }\n  return y;\n}\n", "nl": "This returns the odd indexed values for the given vector"}
{"code": "public ViewActionSeparator(int rank){\n  super(rank,null,\"\");\n}\n", "nl": "Creates a separator"}
{"code": "public boolean isUptoDate(){\n  return this.uptodate;\n}\n", "nl": "is viewer uptodate?"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void destroyView() throws CanceledException {\n  frame.setVisible(false);\n  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());\n  dir.removeViewer(this);\n  searchManager.getFindDialogAsToolBar().close();\n  frame.dispose();\n}\n", "nl": "ask view to destroy itself"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void putInt(String key,int value){\n  checkForNullKey(key);\n  preferences.edit().putInt(key,value).apply();\n}\n", "nl": "Put int value into SharedPreferences with 'key' and save"}
{"code": "public void putDelegate(String alias,X509ExtendedKeyManager newDelegate){\n  if (!alias.equals(alias.toLowerCase())) {\n    throw new IllegalArgumentException(\"Aliases must be all lowercase\");\n  }\n  delegates.put(alias,newDelegate);\n}\n", "nl": "Add a delegate identified by the given unique key (can be used to remove it later)"}
{"code": "public FriendsGetOnlineQueryWithMobile(VkApiClient client,UserActor actor){\n  super(client,\"friends.getOnline\",GetOnlineMobileResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void changeStatusBarColor(){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    Window window=getWindow();\n    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n    window.setStatusBarColor(Color.TRANSPARENT);\n  }\n}\n", "nl": "Making notification bar transparent"}
{"code": "private Transaction createTransaction() throws LeaseDeniedException, RemoteException, TransactionException {\n  ITransactionManagerProvider transactionManagerProvider=getTransactionManagerProvider();\n  return (TransactionFactory.create(transactionManagerProvider.getTransactionManager(),_config.getTransactionTimeout())).transaction;\n}\n", "nl": "Create new transaction using the local transaction manager"}
{"code": "public boolean isFullyZoomedOut(){\n  return mViewPortHandler.isFullyZoomedOut();\n}\n", "nl": "if the chart is fully zoomed out, return true"}
{"code": "public static NameValuePair[] split_metadata(String meta_buff){\n  return split_metadata(meta_buff,FDFS_RECORD_SEPERATOR,FDFS_FIELD_SEPERATOR);\n}\n", "nl": "split metadata to name value pair array"}
{"code": "public void clearSelection(){\n  selection.clear();\n  previouslySelectedItem=null;\n  shiftDown=false;\n  mouseClicks=0;\n}\n", "nl": "erase selection"}
{"code": "public AccountGetPushSettingsQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getPushSettings\",PushSettings.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCurrentSet(){\n  return currentIterator != null && currentId != null;\n}\n", "nl": "is the current object set?"}
{"code": "public DatabaseGetCitiesQuery needAll(Boolean value){\n  return unsafeParam(\"need_all\",value);\n}\n", "nl": "Return all cities in the country"}
{"code": "public void changeBadgeTextAtIndex(int badgeIndex,int badgeText){\n  if (badgeSaveInstanceHashMap.get(badgeIndex) != null && (((BadgeItem)badgeSaveInstanceHashMap.get(badgeIndex)).getIntBadgeText() != badgeText)) {\n    BadgeItem currentBadgeItem=(BadgeItem)badgeSaveInstanceHashMap.get(badgeIndex);\n    BadgeItem badgeItemForSave=new BadgeItem(badgeIndex,badgeText,currentBadgeItem.getBadgeColor());\n    BadgeHelper.forceShowBadge(badgeList.get(badgeIndex),badgeItemForSave,shouldShowBadgeWithNinePlus);\n    badgeSaveInstanceHashMap.put(badgeIndex,badgeItemForSave);\n  }\n}\n", "nl": "Change badge text at index"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String[] lines=Basic.getFirstLinesFromFile(new File(fileName),2);\n  return lines != null && lines[0] != null && lines[1] != null && lines[0].startsWith(\"<?xml\") && (lines[1].startsWith(\"<!DOCTYPE BlastOutput\") || lines[1].startsWith(\"<BlastOutput>\"));\n}\n", "nl": "is file acceptable?"}
{"code": "public static boolean shuffle(Object[] objArray){\n  if (objArray == null) {\n    return false;\n  }\n  return shuffle(objArray,getRandom(objArray.length));\n}\n", "nl": "Shuffling algorithm, Randomly permutes the specified array using a default source of randomness"}
{"code": "public static boolean hasStatusBar(Activity activity){\n  LayoutParams params=activity.getWindow().getAttributes();\n  return (params.flags & LayoutParams.FLAG_FULLSCREEN) != LayoutParams.FLAG_FULLSCREEN;\n}\n", "nl": "Check if we have status bar"}
{"code": "public VideoEditQuery repeat(Boolean value){\n  return unsafeParam(\"repeat\",value);\n}\n", "nl": "Repeat the playback of the video"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public PhotosGetAllCommentsQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAllComments\",GetAllCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public BoardGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return the \"likes\" field"}
{"code": "public static List<JSONObject> initialize(FileSystem fs) throws Exception {\n  List<JSONObject> dataElements=Inputs.createJSONInput(fs);\n  String localStopListFile=Inputs.createStopList(fs,true);\n  SystemConfiguration.setProperty(\"pir.stopListFile\",localStopListFile);\n  Inputs.createSchemaFiles(fs,true,StopListFilter.class.getName());\n  return dataElements;\n}\n", "nl": "Create all inputs"}
{"code": "public static void showProfile(Activity activity,@Nullable HashMap<String,String> extras){\n  showProfile(activity,AirMap.getUserId(),extras);\n}\n", "nl": "Display the authenticated pilot's profile"}
{"code": "public static Completable completable(GoogleApiClientCompletable completable){\n  return Completable.create(completable);\n}\n", "nl": "Serve a Completable GoogleApiClient"}
{"code": "public MarketGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> itemIds){\n  super(client,\"market.getById\",GetByIdExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  itemIds(itemIds);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void replaceToken(Token token,String replacement){\n  try {\n    replace(token.start,token.length,replacement,null);\n  }\n catch (  BadLocationException ex) {\n    log.log(Level.WARNING,\"unable to replace token: \" + token,ex);\n  }\n}\n", "nl": "Replace the token with the replacement string"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public Builder type(final String typeName){\n  this.propertyTypeName=typeName;\n  return this;\n}\n", "nl": "Set the type by name"}
{"code": "private boolean hasSimilarityMeasure(){\n  return this.isSimilarityMeasure;\n}\n", "nl": "To get the type of measure used for cluster data"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-2.226325228634938d,-1.156887023657177d,-0.643949578356075d,-0.2027950777320613d,0.305827808237559d,6.42632522863494d,5.35688702365718d,4.843949578356074d,4.40279507773206d,3.89417219176244d};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?"}
{"code": "public SharedPreferences.Editor putStringNoEncrypted(String key,String value){\n  mEditor.putString(SecurePreferences.encrypt(key),value);\n  return this;\n}\n", "nl": "This is useful for storing values that have be encrypted by something else"}
{"code": "public boolean acceptsURL(String url) throws SQLException {\n  return (url.startsWith(GConnection.JDBC_GIGASPACES));\n}\n", "nl": "Only urls that start with jdbc:gigaspaces: are compliant"}
{"code": "private SoftReference<DoubleRef<Key,Value>> reference(Key key,Value value){\n  return new SoftReference<DoubleRef<Key,Value>>(new DoubleRef<Key,Value>(key,value));\n}\n", "nl": "Create a soft double reference to the object"}
{"code": "public void actionPerformed(ActionEvent ev){\n  String choices[]=new String[]{\"angular\",\"straight\",\"curved\",\"none\"};\n  String result=(String)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set edge shape\",\"Set edge shape\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),choices,choices[0]);\n  if (result != null)   execute(\"set edgeShape=\" + result + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void unlockUserInput(){\n  commandManager.setEnableCritical(true);\n  locked=false;\n}\n", "nl": "ask view to allow user input"}
{"code": "public String[] categoryArray(){\n  return keyToValue.values().toArray(new String[size()]);\n}\n", "nl": "Returns the strings in the dictionary as an array in order of the numeric key"}
{"code": "public BucketAdapter(Context _context,List<Task> _model){\n  this.context=_context;\n  this.model=_model;\n}\n", "nl": "Allows to create the Adapter"}
{"code": "public AccountSaveProfileInfoQuery sex(AccountSaveProfileInfoSex value){\n  return unsafeParam(\"sex\",value);\n}\n", "nl": "User sex"}
{"code": "public static boolean isPossibleToReadResource(Acl acl,String userModifier,String projectName){\n  if (!acl.getOwnerUserId().equalsIgnoreCase(userModifier))   if (!acl.getEntries().stream().filter(Preconditions.hasACLPermission(projectName,AclPermissions.READ)).findFirst().isPresent())   return false;\n  return true;\n}\n", "nl": "Validate is specified acl owned by specified user or is shared to specified project but don't rise exception"}
{"code": "public boolean isApplicationEnabled(){\n  AXmlAttribute<?> attr=this.application.getAttribute(\"enabled\");\n  return attr == null || !attr.getValue().equals(Boolean.FALSE);\n}\n", "nl": "Gets whether this Android application is enabled"}
{"code": "public static Rectangle rectangle(double minX,double maxX,double minY,double maxY){\n  return new RectangleImpl(minX,maxX,minY,maxY);\n}\n", "nl": "Creates a Rectangle instance"}
{"code": "public void notifyAbnormalSettedObservers(AbnormalState state){\n  notifyObservers(ObserverType.ABNORMALSETTED,state);\n}\n", "nl": "notify that abnormalstate is setted in effectcontroller"}
{"code": "public static <K>Expression<K> toCNF(Expression<K> root){\n  return toPos(root);\n}\n", "nl": "More formal name for product-of-sums"}
{"code": "@Override protected void readImpl(){\n  macroPosition=readC();\n}\n", "nl": "Reading macro id"}
{"code": "public FriendsGetRequestsQuery needMutual(Boolean value){\n  return unsafeParam(\"need_mutual\",value);\n}\n", "nl": "Return a list of mutual friends (up to 20), if any"}
{"code": "public static void clickButtonTwitter(){\n  RewiMod.getInstance().openUrl(\"https://twitter.com/RewiMod\");\n}\n", "nl": "Opens the browser to the Official RewiMod twitter timeline"}
{"code": "@Override public void processPacket(INetHandler netHandler){\n  channel.handle(packet);\n}\n", "nl": "Handles receiving this packet"}
{"code": "public void addGlobalNotationDecl(XSNotationDecl decl){\n  fGlobalNotationDecls.put(decl.fName,decl);\n  decl.setNamespaceItem(this);\n}\n", "nl": "register one global notation"}
{"code": "protected boolean requireRecentSdk(){\n  return false;\n}\n", "nl": "Is the bundled (incomplete) SDK install adequate or do we need to find a valid install?"}
{"code": "public AirMapTfrProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n", "nl": "Initialize an AirMapTfrProperties from JSON"}
{"code": "@Override public String toString(){\n  return getName() + \"=\" + \"\\\"\"+ getValue()+ \"\\\"\";\n}\n", "nl": "NON-DOM method for debugging convenience"}
{"code": "protected void verifyContainerIsRunning(final boolean expectedState) throws Throwable {\n  verifyContainerProperty(\"State.Running\",expectedState);\n}\n", "nl": "Perform an inspect command to check the container's run status"}
{"code": "public DuplicateAionObjectException(String message,Throwable cause){\n  super(message,cause);\n}\n", "nl": "Creates new error"}
{"code": "public PagesGetQuery needSource(Boolean value){\n  return unsafeParam(\"need_source\",value);\n}\n", "nl": "Set need source"}
{"code": "public static <T>MaybeConsumer<T> noop(){\n  return (MaybeConsumer<T>)NOOP;\n}\n", "nl": "A MaybeConsumer that does nothing, with a particular generic type"}
{"code": "private boolean isTestMode(){\n  return ((System.getProperty(\"c2mon.server.testMode\")) != null && (System.getProperty(\"c2mon.server.testMode\").equals(\"true\")));\n}\n", "nl": "Checks if the TEST mode is on"}
{"code": "private boolean appendFilter(){\n  if (isFiltering()) {\n    useFilteredFromEntries(filteredEntries);\n    return true;\n  }\n  return applyFilter();\n}\n", "nl": "Appends new filter to already filtered items"}
{"code": "public MediaFormat(){\n  mMap=new HashMap<String,Object>();\n}\n", "nl": "Creates an empty MediaFormat"}
{"code": "static public void reversePrint(Result[] result){\n  for (int i=(result.length - 1); i >= 0; i--) {\n    System.err.println(\"Gen\" + result[i].getGenNum() + \":   scale of \"+ result[i].getScale()+ \"  \"+ result[i].getRemark());\n  }\n}\n", "nl": "print in reverse order"}
{"code": "public synchronized TrueTime withSharedPreferences(Context context){\n  DISK_CACHE_CLIENT.enableDiskCaching(context);\n  return INSTANCE;\n}\n", "nl": "Cache TrueTime initialization information in SharedPreferences This can help avoid additional TrueTime initialization on app kills"}
{"code": "public void paint(Graphics graphics){\n  super.paint(graphics);\n  Graphics2D gc=(Graphics2D)graphics;\n  gc.setColor(Color.WHITE);\n  gc.fill(getVisibleRect());\n  draw(gc,null);\n}\n", "nl": "draw the legend"}
{"code": "@Override public void close(){\n}\n", "nl": "close the array"}
{"code": "public SM_TITLE_INFO(Player player){\n  this.action=0;\n  this.titleList=player.getTitleList();\n}\n", "nl": "title list"}
{"code": "private boolean isPrimitiveTypeWrapper(ModelImpl modelImpl){\n  return (modelImpl.getProperties() == null && modelImpl.getAdditionalProperties() == null) && !Strings.isNullOrEmpty(modelImpl.getType()) && !\"object\".equalsIgnoreCase(modelImpl.getType())&& WellKnownTypeUtils.isPrimitiveType(modelImpl.getType());\n}\n", "nl": "Returns true if the modelImpl is a wrapper of primitive type like string, Float etc; false otherwise"}
{"code": "public Math_Vector nor(){\n  double len=len();\n  if (len != 0) {\n    this.x/=len;\n    this.y/=len;\n  }\n  return this;\n}\n", "nl": "normalization the vector"}
{"code": "private void addOptionalSpringLibs(StringBuilder classpath){\n  addLibs(classpath,gsLibOptional + \"spring\");\n}\n", "nl": "add all jars under lib/optional/spring"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void start(Map<String,String> props){\n  fProperties=props;\n}\n", "nl": "Start the connector"}
{"code": "@deprecated public UScriptRun(String text){\n  reset(text);\n}\n", "nl": "/*    "}
{"code": "public static double squaredLoss(double[] x,double[] y,double w_0,double w_1){\n  double sum=0;\n  for (int j=0; j < x.length; j++) {\n    sum+=Math.pow((y[j] - (w_1 * x[j] + w_0)),2);\n  }\n  return sum;\n}\n", "nl": "This will return the squared loss of the given points"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getNumberOfSequences() > 0 && viewer.getSelectedBlock().isSelected() && viewer.getSelectedBlock().getLastRow() < viewer.getAlignment().getNumberOfSequences() - 1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "public PhotosCreateCommentQuery accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n", "nl": "Set access key"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void remove(RequestFilter filter){\n  filters.remove(filter);\n}\n", "nl": "Unregister filter (it won't get anymore events)"}
{"code": "public CholeskyDecomposition chol(){\n  return new CholeskyDecomposition(this);\n}\n", "nl": "Cholesky Decomposition"}
{"code": "public static void putStringSet(String key,Set<String> values){\n  prefs.edit().putStringSet(key,values).commit();\n}\n", "nl": "Set a set of String values in the preferences editor, to be written"}
{"code": "public static CommandResult execCommand(String command,boolean isRoot){\n  return execCommand(new String[]{command},isRoot,true);\n}\n", "nl": "execute shell command, default return result msg"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void mouseMoved(MouseEvent e){\n  mIsControlDown=e.isControlDown();\n  mIsShiftDown=e.isShiftDown();\n  mIsAltDown=e.isAltDown();\n  float x=mViewTransform.getAndroidFX(e.getX());\n  float y=mViewTransform.getAndroidFY(e.getY());\n  mouseMoved(x,y);\n}\n", "nl": "Mouse moved handling"}
{"code": "public CreateSiteWindow selectLanguages(List<String> languages){\n  clickLanguageCheckBox(\"English (United Kingdom)\");\n  languages.forEach(null);\n  return this;\n}\n", "nl": "Selects languages on Languages view"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public RecyclerView build(){\n  return mRecyclerView;\n}\n", "nl": "Build the RecyclerView"}
{"code": "@Deprecated public Builder cacheOnDisc(){\n  return cacheOnDisk(true);\n}\n", "nl": "Loaded image will be cached on disk"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getLength() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public PollsGetVotersQuery friendsOnly(Boolean value){\n  return unsafeParam(\"friends_only\",value);\n}\n", "nl": "Return only current user's friends"}
{"code": "static public void main(String args[]) throws Exception {\n  ResamplingMethod compare=new ResamplingMethod();\n  if (args.length > 0)   compare.setParametersFromCommandLine(args);\n else   compare.setParametersFromConsole();\n  compare.run();\n}\n", "nl": "run the program"}
{"code": "public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){\n  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;\n  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;\n  return this;\n}\n", "nl": "Sets options for memory cache"}
{"code": "public SyncAdapter(Context context,boolean autoInitialize){\n  super(context,autoInitialize);\n  mContentResolver=context.getContentResolver();\n  mBroadcastManager=LocalBroadcastManager.getInstance(context);\n  mPrefs=PreferenceManager.getDefaultSharedPreferences(context);\n  mMarvelApi=MarvelApi.getInstance();\n}\n", "nl": "Set up the sync adapter"}
{"code": "public static void f(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg,throwable);\n}\n", "nl": "Send a FATAL ERROR log message"}
{"code": "public ElementType rootElementType(){\n  return theRoot;\n}\n", "nl": "Get the root element of this schema"}
{"code": "public static <V,V1 extends V,V2 extends V,V3 extends V,V4 extends V,V5 extends V,V6 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3,String name4,V4 value4,String name5,V5 value5,String name6,V6 value6){\n  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3,name4,value4,name5,value5,name6,value6);\n}\n", "nl": "Create a map from passed nameX, valueX parameters"}
{"code": "public String loadString(String key,String defValue){\n  return prefs.getString(key,defValue);\n}\n", "nl": "Load the specified value from the shared preferences"}
{"code": "private void observeChangingBooks(){\n  Observable<Book> observable=bookRepository.observeChangingBooks().observeOn(AndroidSchedulers.mainThread());\n  subscribe(observable,null,null,null);\n}\n", "nl": "example for subscribing to observable, which emits many events"}
{"code": "public static ServiceClient createServiceClient(SSLContext sslContext){\n  return createServiceClient(sslContext,0);\n}\n", "nl": "Create a ServiceClient instance using the given SSLContext"}
{"code": "public AudioGetLyricsQuery(VkApiClient client,UserActor actor,int lyricsId){\n  super(client,\"audio.getLyrics\",Lyrics.class);\n  accessToken(actor.getAccessToken());\n  lyricsId(lyricsId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Builder cacheOnDisc(){\n  cacheOnDisc=true;\n  return this;\n}\n", "nl": "Loaded image will be cached on disc"}
{"code": "public static <T>List<T> toList(T obj1,T obj2,T obj3){\n  List<T> list=new LinkedList<T>();\n  list.add(obj1);\n  list.add(obj2);\n  list.add(obj3);\n  return list;\n}\n", "nl": "Create a list from passed objX parameters"}
{"code": "public FriendsGetRequestsQueryWithExtended needMutual(Boolean value){\n  return unsafeParam(\"need_mutual\",value);\n}\n", "nl": "Return a list of mutual friends (up to 20)"}
{"code": "public PhotosEditAlbumQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "public Map<String,Object> mapFields(Map<String,Object> fields,boolean eval){\n  Map<String,Object> result=new HashMap<>();\n  fields.forEach(null);\n  return result;\n}\n", "nl": "Maps fields to dynamic schema"}
{"code": "@Override public void onTmpFilesCopied(ResultCode result){\n  dismissLoadingDialog();\n  finish();\n}\n", "nl": "Process the result of CopyAndUploadContentUrisTask"}
{"code": "@Override public boolean hasNext() throws IOException {\n  return daa2QuerySAMIterator.hasNext();\n}\n", "nl": "is there more data?"}
{"code": "public boolean isAnyStepCompleted(){\n  for (  boolean completedStep : completedSteps) {\n    if (completedStep) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Determines if any step has been completed"}
{"code": "public SimpleTextDocument(){\n  Graph=new DocumentWordGraph();\n  Histogram=new DocumentWordHistogram();\n}\n", "nl": "Creates a new instance of INSECTWordDocument"}
{"code": "public void init(float startX,float startY,float endX,float endY){\n  setStart(new PointF(startX,startY));\n  setEnd(new PointF(endX,endY));\n}\n", "nl": "init the 4 values of the cubic-bezier"}
{"code": "protected void assertClose(String msg,RealMatrix m,RealMatrix n,double tolerance){\n  Assert.assertTrue(msg,m.subtract(n).getNorm() < tolerance);\n}\n", "nl": "verifies that two matrices are close (1-norm)"}
{"code": "public static int calculateXenMemory(int deliveryControllerCount,int vCenterServerCount){\n  final int dc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.controller.memory.default\")) * deliveryControllerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.vcenter.memory.default\")) * vCenterServerCount;\n  return dc + vc;\n}\n", "nl": "Calculate XenDesktop memory requirements for deployment"}
{"code": "private List<TestItem> updateChildrenOfLaunch(String launchId,Set<String> launches,boolean extendDescription){\n  List<TestItem> testItems=launches.stream().map(null).flatMap(null).collect(toList());\n  testItemRepository.save(testItems);\n  return testItems.stream().filter(null).collect(toList());\n}\n", "nl": "Update test-items of specified launches with new LaunchID"}
{"code": "public MirrorOperationStatisticsImpl(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public void invalidateAll(){\n  if (m_tuples == null)   return;\n  for (int i=0; i < m_tuples.length; ++i)   invalidate(i);\n}\n", "nl": "Invalidate all tuples managed by this TupleManager"}
{"code": "public SimpleAsyncPollingContainerConfigurer eventListenerAnnotation(Object eventListener){\n  AnnotationEventListenerAdapter annotationEventListenerAdapter=new AnnotationEventListenerAdapter();\n  annotationEventListenerAdapter.setDelegate(eventListener);\n  annotationEventListenerAdapter.afterPropertiesSet();\n  pollingEventListenerContainer.setEventListener(annotationEventListenerAdapter);\n  return this;\n}\n", "nl": "Sets an event listener that uses annotations"}
{"code": "@Override public void onAttachedToWindow(){\n  super.onAttachedToWindow();\n  setupBounds();\n  setupPaints();\n  invalidate();\n}\n", "nl": "Now we know the dimensions of the view, setup the bounds and paints"}
{"code": "public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener){\n  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());\n}\n", "nl": "Show error view with a button when something goes wrong and prompting the user to try again"}
{"code": "public void onRequestPermissionResult(int requestCode,String[] permissions,int[] grantResults) throws JSONException {\n}\n", "nl": "Called by the system when the user grants permissions"}
{"code": "public static void closeSocket(Socket sock) throws IOException {\n  byte[] header;\n  header=packHeader(FDFS_PROTO_CMD_QUIT,0,(byte)0);\n  sock.getOutputStream().write(header);\n  sock.close();\n}\n", "nl": "send quit command to server and close socket"}
{"code": "public SourceDataTagQuality(){\n  this.qualityCode=SourceDataTagQualityCode.OK;\n}\n", "nl": "The default quality is OK"}
{"code": "public static Configuration createAlarm(){\n  Configuration configuration=new Configuration();\n  Alarm alarm=Alarm.create(\"faultFamily\",\"faultMember\",1337,new ValueCondition(Integer.class,1)).id(2000L).dataTagId(1000L).build();\n  configuration.addEntity(alarm);\n  return configuration;\n}\n", "nl": "Alarm id: 2000 datTagId: 1000"}
{"code": "protected void assertCurrentVariantWasSet(String errorMessage,List<Long> localeIds,Long tmTextUnitId){\n  for (  Long localeId : localeIds) {\n    TMTextUnitCurrentVariant currentVariant=tmTextUnitCurrentVariantRepository.findByLocale_IdAndTmTextUnit_Id(localeId,tmTextUnitId);\n    assertNotNull(errorMessage,currentVariant);\n  }\n}\n", "nl": "Asserts that there is a current variant associated to the given tmTextUnit and locales"}
{"code": "public FaveRemoveLinkQuery(VkApiClient client,UserActor actor,String linkId){\n  super(client,\"fave.removeLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  linkId(linkId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static byte[] readPackedSequence(ByteInputBuffer buffer,int query_len,int bits){\n  int size=(query_len * bits + 7) / 8;\n  return buffer.readBytes(size);\n}\n", "nl": "read packed sequence from buffer"}
{"code": "static <T>AnyVal<Object> headTail(T head,ConsList<T> tail){\n  return new AnyConsImpl(head,null,tail,null);\n}\n", "nl": "Return a new AnyVal that matches the given head of a list and the given tail of a list"}
{"code": "protected AionServerPacket(){\n  super();\n  setOpcode(ServerPacketsOpcodes.getOpcode(getClass()));\n}\n", "nl": "Constructs new server packet"}
{"code": "public void addContactMech(String contactMechPurposeTypeId,String contactMechId){\n  if (contactMechPurposeTypeId == null)   throw new IllegalArgumentException(\"You must specify a contactMechPurposeTypeId to add a ContactMech\");\n  contactMechIdsMap.put(contactMechPurposeTypeId,contactMechId);\n}\n", "nl": "Add a contact mech to this purpose; the contactMechPurposeTypeId is required"}
{"code": "public static List<String> formatDateList(List<Date> dateList){\n  List<String> newList=new ArrayList<String>();\n  for (  Date date : dateList)   newList.add(formatDate(date));\n  return newList;\n}\n", "nl": "Returns a Llist of date strings from a List of Date objects"}
{"code": "public WallGetCommentsQuery sort(WallGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public static boolean isValidMobile(@NonNull String mobile){\n  if (!TextUtils.isEmpty(mobile) && mobile.length() == 10) {\n    if (mobile.startsWith(\"9\") || mobile.startsWith(\"8\") || mobile.startsWith(\"7\")) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Method to check valid malaysia mobile number"}
{"code": "public static void hideProgressDialog(){\n  hideProgressDialog(DEFAULT_TAG);\n}\n", "nl": "Hide default dialog"}
{"code": "public ScheduledFuture<?> scheduleTaskManager(Runnable r,long delay){\n  return schedule(r,delay);\n}\n", "nl": "TaskManager schedulers"}
{"code": "public void connectNamePanel2AlignmentPane(boolean connect){\n  if (connect)   namesScrollPane.getVerticalScrollBar().setModel(alignmentScrollPane.getVerticalScrollBar().getModel());\n else   namesScrollPane.getVerticalScrollBar().setModel(new DefaultBoundedRangeModel());\n}\n", "nl": "connect or disconnect scrollbar of name panel with that of alignment panel"}
{"code": "@Override public long limit(){\n  return fileLength >>> 3;\n}\n", "nl": "length of array (file length / 8)"}
{"code": "@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  super.onMeasure(heightMeasureSpec,heightMeasureSpec);\n}\n", "nl": "Simply return the same measure as height for width"}
{"code": "public SM_RIFT_ANNOUNCE(int objectId){\n  this.objectId=objectId;\n  this.actionId=5;\n}\n", "nl": "Rift despawn"}
{"code": "public String toString(){\n  StringWriter w=new StringWriter();\n  w.write(\"Storage: \" + TextStoragePolicy.getDescription(textStoragePolicy) + \"\\n\");\n  for (int i=0; i < files.size(); i++) {\n    w.write(\" \" + i + \" -> \"+ files.get(i).getPath()+ \"\\n\");\n  }\n  return w.toString();\n}\n", "nl": "get as string"}
{"code": "public WishlistDataCursor queryWishlistData(long id){\n  return mHelper.queryWishlistData(id);\n}\n", "nl": "WISHLIST DATA QUERIES"}
{"code": "public JCustomTooltip(JComponent src,JComponent content,boolean inter){\n  this.setLayout(new BorderLayout());\n  this.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));\n  this.setComponent(src);\n  this.add(content);\n  setPersistent(inter);\n}\n", "nl": "Create a new JCustomTooltip"}
{"code": "private Date addTimezoneOffsetToDate(Date date){\n  DatePair hourAndMinuteOffset=DateConverter.getCurrentTimeZoneOffset();\n  Calendar calendar=Calendar.getInstance();\n  calendar.setTime(date);\n  calendar.add(Calendar.HOUR,hourAndMinuteOffset.getHour());\n  calendar.add(Calendar.MINUTE,hourAndMinuteOffset.getMinute());\n  return calendar.getTime();\n}\n", "nl": "Adding current time zone offset"}
{"code": "@Override protected void onRestoreInstanceState(Bundle savedInstanceState){\n  super.onRestoreInstanceState(savedInstanceState);\n  ArrayList<DataInfo> MeizhiData=savedInstanceState.getParcelableArrayList(SAVED_INSTANCE_MEIZHI);\n  mainPresenter.getData().addAll(MeizhiData);\n  meizhiRvAdapter.setMeizhiList(mainPresenter.getData());\n  if (mainPresenter.getData().size() == 0)   mainPresenter.loadMeizhi(true);\n}\n", "nl": "Restore Recycler View Instance When Recreate or Configuration Changed"}
{"code": "public void activate(){\n  if (myScreenView != null) {\n    myScreenView.getModel().activate();\n  }\n}\n", "nl": "The editor has been activated"}
{"code": "@VisibleForTesting void subscribeForTesting(){\n  mObservable.subscribe(mObserver);\n}\n", "nl": "Only for test purposes DON'T USE IT!"}
{"code": "public VideoGetCatalogQuery filters(List<VideoGetCatalogFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "List of requested catalog sections"}
{"code": "private void pauseServiceIntent(){\n  Intent intent=new Intent(getApplicationContext(),ScreenDimmer.class);\n  intent.setAction(TAG_PAUSE);\n  startService(intent);\n}\n", "nl": "service helper methods"}
{"code": "public void onSuccess(byte[] binaryData){\n}\n", "nl": "Fired when a request returns successfully, override to handle in your own code"}
{"code": "private void drawItems(Canvas canvas){\n  canvas.save();\n  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;\n  canvas.translate(PADDING,-top + scrollingOffset);\n  itemsLayout.draw(canvas);\n  canvas.restore();\n}\n", "nl": "Draws items"}
{"code": "Node(){\n  key=null;\n  hash=-1;\n  next=prev=this;\n}\n", "nl": "Create the header entry"}
{"code": "public GroupsEditQuery publicCategory(Integer value){\n  return unsafeParam(\"public_category\",value);\n}\n", "nl": "Public page category"}
{"code": "public ErrorHandler skipDefaults(){\n  if (localContext != null) {\n    localContext.get().skipDefaults=true;\n  }\n  return this;\n}\n", "nl": "Skip the default matching actions if any"}
{"code": "public int size(){\n  return size;\n}\n", "nl": "get number of operations"}
{"code": "public void sendEffectIconsTo(Player player){\n  List<Effect> effects=getAbnormalEffects();\n  PacketSendUtility.sendPacket(player,new SM_ABNORMAL_EFFECT(getOwner(),abnormals,effects));\n}\n", "nl": "Used when player see new player"}
{"code": "public static void onReceiveUpgradePatch(Context context,String patchLocation){\n  Tinker.with(context).getPatchListener().onPatchReceived(patchLocation,true);\n}\n", "nl": "new patch file to install, try install them with :patch process"}
{"code": "public static ArrayList<String> jsonArrayStringToArrayList(String jsonString){\n  String modString=jsonString.replaceFirst(\"\\\\[\",\"\");\n  modString=modString.replaceFirst(\"\\\\]\",\"\");\n  modString=modString.replaceAll(\"\\\"\",\"\");\n  String[] elements=modString.split(\"\\\\s*,\\\\s*\");\n  return new ArrayList<>(Arrays.asList(elements));\n}\n", "nl": "Method to take an input json array format string and output an ArrayList"}
{"code": "public static byte[] bitmapToByte(Bitmap b){\n  ByteArrayOutputStream o=new ByteArrayOutputStream();\n  b.compress(Bitmap.CompressFormat.PNG,100,o);\n  return o.toByteArray();\n}\n", "nl": "convert Bitmap to byte array"}
{"code": "public static int apply(Document doc,final ViewerBase viewer,String method,final Distances distances) throws IOException {\n  System.err.println(\"Computing \" + method + \" distances\");\n  double[][] vectors=computeVectors(doc,viewer);\n  int rank=distances.getNtax();\n  computeCorrelationMatrix(rank,vectors,distances);\n  convertCorrelationsToDistances(distances);\n  return vectors.length;\n}\n", "nl": "apply the named computation to the taxonomy"}
{"code": "private boolean initHeader(int appId,String channel){\n  if (!TcHeadrHandle.isInit()) {\n    return TcHeadrHandle.initHeader(mContext,appId,channel);\n  }\n  return false;\n}\n", "nl": "init header"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static boolean isConnectedMobile(Context context){\n  NetworkInfo info=Connectivity.getNetworkInfo(context);\n  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);\n}\n", "nl": "Check if there is any connectivity to a mobile network"}
{"code": "public void incThresholdBreachedCount(){\n  breachedCount++;\n}\n", "nl": "Increments the count of breached thresholds"}
{"code": "public INDArray toRaveledTensor(InputStream is){\n  return toBgr(is).ravel();\n}\n", "nl": "Changes the input stream in to an bgr based raveled(flattened) vector"}
{"code": "void register(Event event){\n  instance.events.put(event.getEvent(),event);\n  log(event.getEvent() + \" registered\");\n}\n", "nl": "Register a new event"}
{"code": "@deprecated public int hashCode(){\n  int result=0;\n  int increment=Math.min(3,this.values.length / 16);\n  for (int i=0; i < this.values.length; i+=increment) {\n    result=result * 37 + this.values[i];\n  }\n  return result;\n}\n", "nl": "/*    "}
{"code": "public <T>T create(Class<T> service){\n  return retrofit.create(service);\n}\n", "nl": "create api instance"}
{"code": "public AuthSignupQuery(VkApiClient client,String firstName,String lastName,int clientId,String clientSecret,String phone){\n  super(client,\"auth.signup\",SignupResponse.class);\n  firstName(firstName);\n  lastName(lastName);\n  clientId(clientId);\n  clientSecret(clientSecret);\n  phone(phone);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public INSECTDictionaryDB(){\n}\n", "nl": "Creates a new instance of INSECTDictionaryDB"}
{"code": "public BoardUnfixTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.unfixTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public ILong2IntegerMap create(IName2IdMap label2id,String fileName,ProgressListener progress) throws IOException, CanceledException {\n  final String name=(new File(fileName)).getName();\n  if (name.equals(\"gi_taxid-March2015X.bin\") || name.equals(\"gi2kegg-Nov2015X.bin\") || name.equals(\"gi2tax-Feb2016.bin\")|| name.equals(\"gi2tax-Feb2016X.bin\"))   NotificationsInSwing.showWarning(\"The mapping file '\" + name + \"' is known to contain errors, please use latest file from the MEGAN6 download page\");\n  if (Long2IntegerBinMap.isBinFile(fileName))   return new Long2IntegerBinMap(fileName);\n else   return new Long2IntegerFileBasedMap(label2id,fileName,progress != null ? progress : new ProgressPercentage());\n}\n", "nl": "create a long to integer map from the named file"}
{"code": "public PhotosGetAlbumsQuery needSystem(Boolean value){\n  return unsafeParam(\"need_system\",value);\n}\n", "nl": "Return system albums with negative IDs"}
{"code": "public void addCategoryLimitations(boolean include,Category... categories){\n  String[] categoryVelocityVarNames=new String[categories.length];\n  for (int i=0; i < categories.length; i++) {\n    categoryVelocityVarNames[i]=categories[i].getCategoryVelocityVarName();\n  }\n  addCategoryLimitations(include,categoryVelocityVarNames);\n}\n", "nl": "Limit the results of the query to certain categories"}
{"code": "@Override protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  Scoop.getInstance().apply(this);\n  setContentView(R.layout.activity_scoop_settings);\n  parseExtras(savedInstanceState);\n  setupActionBar();\n  setupRecyclerView();\n}\n", "nl": "Lifecycle Methods"}
{"code": "public GroupsCreateQuery publicCategory(Integer value){\n  return unsafeParam(\"public_category\",value);\n}\n", "nl": "Set public category"}
{"code": "public static GenericValue create(GenericPK primaryKey){\n  GenericValue newValue=new GenericValue();\n  newValue.init(primaryKey);\n  return newValue;\n}\n", "nl": "Creates new GenericValue from existing GenericValue"}
{"code": "private ShadowEntryHolder createShadowEntry(IEntryCacheInfo pmaster,TypeData pType){\n  IEntryHolder master=pmaster.getEntryHolder(this);\n  int[] backrefIndexPos=pType.createIndexBackreferenceArray(pmaster,master.getEntryData());\n  return !master.isOffHeapEntry() ? EntryHolderFactory.createShadowEntryHolder(master,pmaster.getBackRefs(),backrefIndexPos,pmaster.getLeaseManagerListRef(),pmaster.getLeaseManagerPosition()) : EntryHolderFactory.createShadowEntryHolder(master,pmaster.getBackRefs(),backrefIndexPos,null,pmaster.getLeaseManagerPosition());\n}\n", "nl": "create a shadow entry from a master entry before its update"}
{"code": "@Override public ListenableFuture<MemberUpdateResponse> updateMember(long memberID,List<String> endpoints){\n  MemberUpdateRequest memberUpdateRequest=MemberUpdateRequest.newBuilder().addAllPeerURLs(endpoints).setID(memberID).build();\n  return clusterStub.memberUpdate(memberUpdateRequest);\n}\n", "nl": "update peer addresses of the member"}
{"code": "public BlockList(Map<Integer,BlockedPlayer> initialList){\n  this.blockedList=new ConcurrentHashMap<Integer,BlockedPlayer>(initialList);\n}\n", "nl": "Constructs a new blocked list with the given initial items"}
{"code": "public void startWatch(){\n  _time=_watchdogGroup._timerLogical;\n}\n", "nl": "Start watching"}
{"code": "public void actionPerformed(ActionEvent ev){\n  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),\"Choose color\",null);\n  if (color != null)   execute(\"set color=\" + color.getRed() + \" \"+ color.getGreen()+ \" \"+ color.getBlue()+ \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public boolean isLeafNode(){\n  return true;\n}\n", "nl": "to check whether node in a btree is a leaf node or not"}
{"code": "private boolean isImage(String url){\n  return url.matches(Regex.IMAGE_PATTERN);\n}\n", "nl": "Verifies if the url is an image"}
{"code": "public UsersSearchQuery online(Boolean value){\n  return unsafeParam(\"online\",value);\n}\n", "nl": "Return online only"}
{"code": "public AnnotationAttr(String type,ArrayList elems){\n  this.type=new AsciiCP(type);\n  this.list=elems;\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "public String createAuthorityName(Role role){\n  String roleName=role.getRoleName().toUpperCase();\n  return rolePrefix + roleName;\n}\n", "nl": "Create authority name to be used for authority"}
{"code": "public ParticleSystem(Activity a,int maxParticles,int drawableResId,long timeToLive){\n  this(a,maxParticles,ContextCompat.getDrawable(a,drawableResId),timeToLive,android.R.id.content);\n}\n", "nl": "Creates a particle system with the given parameters"}
{"code": "public boolean isInitValues(){\n  return isInitValue;\n}\n", "nl": "if have default value function"}
{"code": "public static boolean removeFromCache(String imageUri,DiskCache diskCache){\n  File image=diskCache.get(imageUri);\n  return image != null && image.exists() && image.delete();\n}\n", "nl": "Removed cached image file from disk cache (if image was cached in disk cache before)"}
{"code": "public CM_CHECK_NICKNAME(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_CHECK_NICKNAME </tt> packet"}
{"code": "public void testAddActivityNoShow() throws Exception {\n  deleteManifest();\n  myFixture.copyFileToProject(\"intentions/DummyActivity_manifest_after.xml\",\"AndroidManifest.xml\");\n  final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyActivity.java\",\"src/com/example/DummyActivity.java\");\n  myFixture.configureFromExistingVirtualFile(file);\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,ADD_ACTIVITY_TO_MANIFEST);\n  assertNull(action);\n}\n", "nl": "Test that \"add activity\" doesn't show up when activity is already registered"}
{"code": "public static Bitmap scaleImage(Bitmap src,float scaleWidth,float scaleHeight){\n  if (src == null) {\n    return null;\n  }\n  Matrix matrix=new Matrix();\n  matrix.postScale(scaleWidth,scaleHeight);\n  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);\n}\n", "nl": "scale image"}
{"code": "public boolean hasNext(){\n  if (prefetch || isSortTempFileCompressionEnabled) {\n    return this.prefetchRecordsProceesed < this.entryCount;\n  }\n  return this.numberOfObjectRead < this.entryCount;\n}\n", "nl": "below method will be used to check whether any more records are present in file or not"}
{"code": "@RequestMapping(value=\"/servers\",method=RequestMethod.GET) public JsonResponse listServers(){\n  Response<List<ServerInfo>> listResp=clusterService.listServers();\n  if (!listResp.isSuccess()) {\n    Logs.error(\"failed to list all servers, cause: {}\",listResp.getErr());\n    return JsonResponse.notOk(listResp.getErr());\n  }\n  return JsonResponse.ok(listResp.getData());\n}\n", "nl": "List all servers of the cluster"}
{"code": "protected void drawYAxis(Graphics2D gc,Dimension size){\n}\n", "nl": "draw the y-axis"}
{"code": "public void unload() throws StartupException {\n  SplashLoader.close();\n}\n", "nl": "Stop the container"}
{"code": "public int compare(Object o1,Object o2){\n  Split split1=(Split)o1;\n  return split1.compareTo(o2);\n}\n", "nl": "compares two splits"}
{"code": "public IdParser createIdParser(){\n  final IdParser idParser=new IdParser(this);\n  idParser.setAlgorithm(algorithm);\n  return idParser;\n}\n", "nl": "creates a new id parser for this mapper"}
{"code": "@Override public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {\n  return new PSVIElementNSImpl(this,namespaceURI,qualifiedName);\n}\n", "nl": "Create an element with PSVI information"}
{"code": "public FaveGetMarketItemsQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getMarketItems\",GetMarketItemsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && (firstLine.startsWith(\"# FORMAT.Blast\") || firstLine.startsWith(\"# BLAST\") || firstLine.split(\"\\t\").length == 12);\n}\n", "nl": "is file acceptable?"}
{"code": "public MessagesGetChatUsersQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){\n  super(client,\"messages.getChatUsers\",Utils.buildParametrizedType(List.class,UserXtrInvitedBy.class));\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AnnotationDefaultAttr(ElemValPair s){\n  elem=s;\n}\n", "nl": "Note: A signature attr is associated with a <em>class</em>, method or field so you need to create a new SignatureAttr for"}
{"code": "void submit(ProcessAndDisplayImageTask task){\n  initExecutorsIfNeed();\n  taskExecutorForCachedImages.execute(task);\n}\n", "nl": "Submits task to execution pool"}
{"code": "public static void clickButtonYoutube(){\n  RewiMod.getInstance().openUrl(\"https://www.youtube.com/user/rewinside/\");\n}\n", "nl": "Opens a web browser to rewinside's youtube channel"}
{"code": "public final static <T extends Bean>List<T> load(String table,String[] cols,String where,Object[] args,Class<T> clazz){\n  return load(table,cols,where,args,null,-1,-1,clazz);\n}\n", "nl": "Load the data from the RDBMS table, by the where and"}
{"code": "private void createMJPEGFormat(){\n  videoFormat=new VideoFormat(VideoFormat.MJPG,new Dimension(mip.getMWidth(),mip.getMHeight()),Format.NOT_SPECIFIED,Format.byteArray,mip.getFPS());\n}\n", "nl": "Creates the format with MJPEG compression"}
{"code": "public void afterStart(){\n}\n", "nl": "Call back after ICEREST start"}
{"code": "protected FriendsGetRequestsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return response messages from users who have sent a friend request or, if \"suggested\" is set to true, to return a list of suggested friends"}
{"code": "public void lockUserInput(){\n  locked=true;\n  commandManager.setEnableCritical(false);\n}\n", "nl": "ask view to prevent user input"}
{"code": "private void tryScrollBackToTop(){\n  if (!mPtrIndicator.isUnderTouch() && mPtrIndicator.hasLeftStartPosition()) {\n    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);\n  }\n}\n", "nl": "Scroll back to to if is not under touch"}
{"code": "public Builder addColumnsDouble(String... columnNames){\n  for (  String s : columnNames)   addColumnDouble(s);\n  return this;\n}\n", "nl": "Add multiple columns with no restrictions on the allowable values of the columns (other than no NaN/Infinite)"}
{"code": "public boolean isSetServerMessageId(){\n  return this.serverMessageId != null;\n}\n", "nl": "Returns true if field serverMessageId is set (has been assigned a value) and false otherwise"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public GroupsGetMembersQueryWithFields(VkApiClient client,Actor actor,List<UserField> fields){\n  super(client,\"groups.getMembers\",GetMembersFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isSetRequestInfo(){\n  return this.requestInfo != null;\n}\n", "nl": "Returns true if field requestInfo is set (has been assigned a value) and false otherwise"}
{"code": "@Override public void onUIRefreshBegin(PtrFrameLayout frame){\n  mDrawable.setAlpha(255);\n  mDrawable.start();\n}\n", "nl": "perform refreshing UI"}
{"code": "public static int dip2px(Context context,float dipValue){\n  if (context == null) {\n    return 0;\n  }\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(dipValue * scale + 0.5f);\n}\n", "nl": "dip to pixel"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_A_TO_SELF(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200775,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer bound"}
{"code": "public void clear(){\n  preferences.edit().clear().apply();\n}\n", "nl": "Clear SharedPreferences (remove everything)"}
{"code": "public void requestSaveToXML(){\n  updateXml();\n  mySaveXmlTimer.reset();\n}\n", "nl": "Schedule an XML save"}
{"code": "public AuthConfirmQuery password(String value){\n  return unsafeParam(\"password\",value);\n}\n", "nl": "Set password"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array"}
{"code": "public VideoGetCatalogQuery(VkApiClient client){\n  super(client,\"video.getCatalog\",GetCatalogResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean addAbyssSkill(Player player,int skillId,int skillLevel){\n  return addSkill(player,skillId,skillLevel,false,false,PersistentState.NOACTION);\n}\n", "nl": "Add temporary skill which will not be saved in db"}
{"code": "public void removeResultsAvailableHandler(ResultsAvailableHandler handler){\n  onResultsAvailable.remove(handler);\n}\n", "nl": "Removes a handler that is called when information flow results are available"}
{"code": "public boolean isPotion(){\n  return getItemId() == ItemId.ITEM_POTION || getItemId() == ItemId.ITEM_SUPER_POTION || getItemId() == ItemId.ITEM_HYPER_POTION || getItemId() == ItemId.ITEM_MAX_POTION;\n}\n", "nl": "Check if the item it's a potion"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public CM_PING_REQUEST(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_PING_REQUEST </tt> packet"}
{"code": "public boolean removeByObject(T obj){\n  if (getNumSegments() > 1)   throw new RuntimeException(\"ConcurrentSegmentedStoredList::removeByObject not supported for multi segments list\");\n  if (_segments[0].removeByObject(obj)) {\n    sizeUpdater.decrementAndGet(this);\n    return true;\n  }\n  return false;\n}\n", "nl": "given an object scan the list, find it and remove it, returns true if found"}
{"code": "public WallSearchQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"wall.search\",SearchExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isLoading(){\n  return state.equals(LOADING);\n}\n", "nl": "Check if loading state is shown"}
{"code": "public Broker(String host,int port){\n  this.host=host;\n  this.port=port;\n}\n", "nl": "create a broker"}
{"code": "public FriendsAddListQuery(VkApiClient client,UserActor actor,String name){\n  super(client,\"friends.addList\",AddListResponse.class);\n  accessToken(actor.getAccessToken());\n  name(name);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public GroupsIsMemberQueryWithUserIds(VkApiClient client,UserActor actor,String groupId,Integer... userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatus.class));\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void i(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  Log.i(tag,msg,throwable);\n}\n", "nl": "Send an INFO log message"}
{"code": "private void recordNonLocalChange(){\nsynchronized (myLock) {\n    mySeenNonSourceChanges=true;\n    stopFileListener();\n  }\n}\n", "nl": "Called when we've noticed an edit outside of an app module, or in something other than a resource file or a Java file"}
{"code": "public DatabaseGetCitiesQuery(VkApiClient client,UserActor actor,int countryId){\n  super(client,\"database.getCities\",GetCitiesResponse.class);\n  accessToken(actor.getAccessToken());\n  countryId(countryId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public PollsCreateQuery isAnonymous(Boolean value){\n  return unsafeParam(\"is_anonymous\",value);\n}\n", "nl": "Is anonymous poll, participants list is hidden;"}
{"code": "public void uploadBuild(){\n  binary.initPath(apkAbsolutePath);\n  uploadService.sendBuild(null,apkAbsolutePath,apiToken,binary,changeLogTa);\n}\n", "nl": "Uploads the build to test flight, it updates also the UI"}
{"code": "public boolean isLookingForEvent(){\n  return lookingForEvent;\n}\n", "nl": "Is this player looking for an event"}
{"code": "public GroupsSearchQuery(VkApiClient client,UserActor actor,String q){\n  super(client,\"groups.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  q(q);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean isNimbus(){\n  return UIUtils.isNimbus();\n}\n", "nl": "Determines if current L&F is Nimbus or GTK with Nimbus theme"}
{"code": "@NotNull public Emotion findEmotionFromSingleFace(@NotNull InputStream image){\n  List<Emotion> emotions=emotionBuilder.emotionRecognition(image).withResult();\n  if (Utils.isEmpty(emotions) || emotions.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(emotions) ? 0 : emotions.size(),\"a single face was not present\");\n  return emotions.get(0);\n}\n", "nl": "Find a single face with emotion within a given url"}
{"code": "public GroupsEditQuery obsceneWords(String... value){\n  return unsafeParam(\"obscene_words\",value);\n}\n", "nl": "Keywords for stopwords filter"}
{"code": "protected PollsEditQuery pollId(int value){\n  return unsafeParam(\"poll_id\",value);\n}\n", "nl": "Edited poll's id"}
{"code": "public static boolean checkRootPermission(){\n  return execCommand(\"echo root\",true,false,null).result == 0;\n}\n", "nl": "check whether has root permission"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "public static void error(@NonNull String tag,Throwable throwable,String message,Object... args){\n  android.util.Log.e(tag,String.format(Locale.ENGLISH,message,args),throwable);\n}\n", "nl": "Logs with error level and logs stack trace for the throwable"}
{"code": "public OAuth1AccessToken(){\n  super(\"stub\",\"stub\",\"stub\");\n}\n", "nl": "Exists just to make happy some json providers"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public V putIfAbsent(K key,V value,boolean unstableKey){\n  if (value == null)   throw new NullPointerException();\n  int hash=hash(key.hashCode());\n  return segmentFor(hash).put(key,hash,value,true,unstableKey);\n}\n", "nl": "same as putIfAbsent, but key is unstable in the hosting object, so create an pinnedhashentry"}
{"code": "public BoardGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return the \"likes\" field"}
{"code": "@Override public void close(){\n}\n", "nl": "close the array"}
{"code": "public static void inferConstraints(WidgetsScene list){\n  inferConstraints(list.getRoot());\n}\n", "nl": "Given a collection of widgets evaluates probability of a connection and makes connections"}
{"code": "public void move(int newX,int newY){\n  controller.mouseMove(newX,newY);\n}\n", "nl": "Move mouse to a position on screen"}
{"code": "public void write(int a) throws IOException {\n  outs.write(a);\n  position++;\n}\n", "nl": "write a byte"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void writeLine(String str,int start,int len) throws IOException {\n  if (beginningOfLine && len > 0) {\n    writeIndent();\n    beginningOfLine=false;\n  }\n  writer.write(str,start,len);\n}\n", "nl": "Writes out a block of text that contains no newlines"}
{"code": "public AccountLookupContactsQuery fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "@Override public String toString(){\n  return Base64.encodeToString(getConfidentialityKey().getEncoded(),BASE64_FLAGS) + \":\" + Base64.encodeToString(getIntegrityKey().getEncoded(),BASE64_FLAGS);\n}\n", "nl": "Encodes the two keys as a string"}
{"code": "public WallGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return the \"likes\" field"}
{"code": "public static void showInformation(String message){\n  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,10000);\n}\n", "nl": "show an information notation"}
{"code": "public static boolean couldMerge(ItemStack a,ItemStack b){\n  if (a == null || b == null) {\n    return true;\n  }\n  return a.getItem() == b.getItem() && a.getItemDamage() == b.getItemDamage() && sameItemTags(a,b);\n}\n", "nl": "Compare includes NBT and damage value; ignores stack size; nulls can be stacked together"}
{"code": "public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos,int noOfNodesInput){\n  return nodeBlockMapping(blockInfos,noOfNodesInput,null);\n}\n", "nl": "This method will divide the blocks among the nodes as per the data locality"}
{"code": "public CommandBuilder withLongSwitch(String switchName,Object value){\n  withLongSwitch(switchName,value,UnaryOperator.identity());\n  return this;\n}\n", "nl": "add a long switch (--switch=value) with the given name and value"}
{"code": "protected PhotosCopyQuery photoId(int value){\n  return unsafeParam(\"photo_id\",value);\n}\n", "nl": "Photo ID"}
{"code": "public static boolean isDark(@ColorInt int color){\n  float[] hsl=new float[3];\n  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);\n  return isDark(hsl);\n}\n", "nl": "Convert to HSL & check that the lightness value"}
{"code": "public FriendsDeleteQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"friends.delete\",DeleteResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void registerReceiver(Context context,BroadcastReceiver receiver,String... actions){\n  IntentFilter filter=new IntentFilter();\n  for (  String action : actions)   filter.addAction(action);\n  LocalBroadcastManager.getInstance(context).registerReceiver(receiver,filter);\n}\n", "nl": "Registers a BroadcastReceiver that filters intents by the actions specified"}
{"code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null && viewer.getJList().getSelectedValuesList().size() >= 1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void SLDLoaded(LegendOptionData data){\n  if (data != null) {\n    updateLegendOptionData(data);\n    if (legendOptionPanel != null) {\n      legendOptionPanel.updateData(data);\n    }\n  }\n}\n", "nl": "Called when SLD loaded"}
{"code": "public void onEmojiconDeleteEvent(){\n  if (!TextUtils.isEmpty(editText.getText())) {\n    KeyEvent event=new KeyEvent(0,0,0,KeyEvent.KEYCODE_DEL,0,0,0,0,KeyEvent.KEYCODE_ENDCALL);\n    editText.dispatchKeyEvent(event);\n  }\n}\n", "nl": "delete emojicon"}
{"code": "protected void notifyScrollingListenersAboutStart(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingStarted(this);\n  }\n}\n", "nl": "Notifies listeners about starting scrolling"}
{"code": "private void blackmanHarris3s(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.45;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.44959 - 0.49364 * Math.cos(twoPI * i / size) + 0.05677 * Math.cos(2 * twoPI * i / size));\n}\n", "nl": "Fill an array with the values of a 61-dB 3-sample Blackman-Harris window function"}
{"code": "protected BoardGetCommentsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return information about users who posted comments"}
{"code": "private final static byte lobyte(int val){\n  return (byte)(val & 0x000000FF);\n}\n", "nl": "Given a 16 bit value (represented as an int), extract the low eight bits and return them"}
{"code": "public boolean isApplicable(){\n  ChartViewer chartViewer=(ChartViewer)getViewer();\n  return chartViewer.getChartDrawer() != null && chartViewer.getChartDrawer().canShowXAxis();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public OrderByScanResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public synchronized void denyAll(){\n  for (  RequestResponseHandler handler : map.values()) {\n    handler.handle(player,0);\n  }\n  map.clear();\n}\n", "nl": "Automatically responds 0 to all requests, passing the given player as the responder"}
{"code": "public boolean contains(String key){\n  return preferences.contains(key);\n}\n", "nl": "Remove SharedPreferences item with 'key'"}
{"code": "public static final void addAlliance(League league,PlayerAlliance alliance){\n  Preconditions.checkNotNull(league,\"League should not be null\");\n  league.onEvent(new LeagueEnteredEvent(league,alliance));\n}\n", "nl": "Add alliance to league"}
{"code": "public void leftTrim(int numberOfSample){\n  trim(numberOfSample,0);\n}\n", "nl": "Trim the wave data from beginning"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set ignoreUnassigned=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public DataFile2EntityXml(){\n}\n", "nl": "Creates a new instance of DataFile2EntityXml"}
{"code": "public boolean isDecayable(){\n  return (getData() & 0x4) == 0;\n}\n", "nl": "Checks if this leaf block is permanent or can decay when too far from a log"}
{"code": "public BlurDrawable(Window blurredWindow){\n  this(blurredWindow.getDecorView());\n}\n", "nl": "Set for window"}
{"code": "@Override public int readInt(String filePath){\n  FileChannel fileChannel=updateCache(filePath);\n  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.INT_SIZE_IN_BYTE);\n  return byteBffer.getInt();\n}\n", "nl": "This method will be used to read int from file from postion(offset), here length will be always 4 bacause int byte size if 4"}
{"code": "public static <T>ConfiguredElement<T> create(@NotNull FolderConfiguration folderConfiguration,@NotNull T value){\n  return new ConfiguredElement<T>(folderConfiguration,value);\n}\n", "nl": "Factory method to create new ConfiguredElement instances"}
{"code": "public SpaceIteratorAggregatorPartitionResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "public Attr(String name,@Nullable List<Format> formats){\n  this.name=name;\n  this.formats=formats;\n}\n", "nl": "Construct a new attribute"}
{"code": "public String cast(String value){\n  return cast(value,type());\n}\n", "nl": "Returns Java code which provides a cast of the specified value to the type of this property ref"}
{"code": "public double expectedWeightedValue(){\n  return this.weightedProduct;\n}\n", "nl": "Expected value for the testArray defined in UnivariateStatisticAbstractTest"}
{"code": "private void fixRotateOffset(){\n  if (offsetRotate < 0) {\n    offsetRotate=0;\n  }\n  if (offsetRotate > getMaxOffsetDegree()) {\n    offsetRotate=getMaxOffsetDegree();\n  }\n}\n", "nl": "fix the offset rotate angle in case item out of boundary"}
{"code": "public GroupsEditQuery phone(String value){\n  return unsafeParam(\"phone\",value);\n}\n", "nl": "Organizer phone number (for events)"}
{"code": "public Builder countUniqueColumns(String... columns){\n  return add(ReduceOp.CountUnique,columns);\n}\n", "nl": "Reduce the specified columns by counting the number of unique values"}
{"code": "public boolean isInstanceType(){\n  return worldMapTemplate.isInstance();\n}\n", "nl": "Whether this world map is instance type"}
{"code": "public RevisionAwareDifferencer(){\n}\n", "nl": "compare two ResourceEditionNode"}
{"code": "public static void d(Class<?> clazz,String msg){\n  if (isDebug) {\n    Log.d(clazz.getSimpleName(),msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public void ResetAttack(){\n  loop=0;\n}\n", "nl": "init enemy attack"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0,0,0,0,0,0.0455118580441,0.070444173646,0.0896924681582,0.112794186114,0.151439332084};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public void updateModifiers(int modifiers){\n  myMouseInteraction.setIsControlDown(((modifiers & InputEvent.CTRL_DOWN_MASK) != 0) || ((modifiers & InputEvent.CTRL_MASK) != 0));\n  myMouseInteraction.setIsShiftDown(((modifiers & InputEvent.SHIFT_DOWN_MASK) != 0) || ((modifiers & InputEvent.SHIFT_MASK) != 0));\n  myMouseInteraction.setIsAltDown(((modifiers & InputEvent.ALT_DOWN_MASK) != 0) || ((modifiers & InputEvent.ALT_MASK) != 0));\n}\n", "nl": "Update the key modifiers mask"}
{"code": "public boolean isBcontains(BitSet H){\n  BitSet M=((BitSet)B.clone());\n  M.and(H);\n  return M.cardinality() == H.cardinality();\n}\n", "nl": "does B part contain set H?"}
{"code": "@deprecated public StringCharacterIterator(String text){\n  this(text,0);\n}\n", "nl": "/*    "}
{"code": "public double readDouble() throws IOException {\n  read(bytes,0,8);\n  for (int i=0; i < 8; i++)   byteBuffer.put(i,bytes[8 - i - 1]);\n  return byteBuffer.getDouble(0);\n}\n", "nl": "read double, little endian"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public TimeMetaData(String name,TimeZone timeZone){\n  this(name,timeZone,null,null);\n}\n", "nl": "Create a TimeMetaData column with no restriction on the allowable times"}
{"code": "public boolean knowns(AionObject object){\n  return knownObjects.containsKey(object.getObjectId());\n}\n", "nl": "Check if object is known"}
{"code": "public OrdersChangeStateQuery(VkApiClient client,UserActor actor,int orderId,OrdersChangeStateAction action){\n  super(client,\"orders.changeState\",String.class);\n  accessToken(actor.getAccessToken());\n  orderId(orderId);\n  action(action);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected Combo createEditableCombo(Composite parent){\n  Combo combo=new Combo(parent,SWT.NULL);\n  GridData data=new GridData(GridData.FILL_HORIZONTAL);\n  data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;\n  combo.setLayoutData(data);\n  return combo;\n}\n", "nl": "Utility method to create an editable combo box"}
{"code": "public void addBottomResourceBundle(InternalRbmWrapper topInternalRbmWrapper){\n  this.rbmwStack.addToBottom(topInternalRbmWrapper);\n}\n", "nl": "Puts InternalRbmWrapper on the BOTTOM of the stack (bottom meaning will be overriden by higher layers on the stack, ie everything else already there)"}
{"code": "public boolean isValid(){\n  return wind != null && condition != null && !condition.isEmpty();\n}\n", "nl": "Determine the validity of the current weather"}
{"code": "public static long convert(String stringValue){\n  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {\n    return (long)ColumnType.LONG_INT.getMissingValue();\n  }\n  Matcher matcher=COMMA_PATTERN.matcher(stringValue);\n  return Long.parseLong(matcher.replaceAll(\"\"));\n}\n", "nl": "Returns a float that is parsed from the given String <p> We remove any commas before parsing"}
{"code": "public PhotosEditQuery placeStr(String value){\n  return unsafeParam(\"place_str\",value);\n}\n", "nl": "Set place str"}
{"code": "protected void notifyDataChangedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onChanged();\n    }\n  }\n}\n", "nl": "Notifies observers about data changing"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private boolean hasWrappedMethodsForClass(SootClass parentClass,boolean newTaints,boolean killTaints,boolean excludeTaints){\n  if (newTaints && classList.containsKey(parentClass.getName()))   return true;\n  if (excludeTaints && excludeList.containsKey(parentClass.getName()))   return true;\n  if (killTaints && killList.containsKey(parentClass.getName()))   return true;\n  return false;\n}\n", "nl": "Checks whether at least one method in the given class is registered in the taint wrapper"}
{"code": "public AppsGetScoreQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"apps.getScore\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void updateResizeHandlesPositions(ViewTransform viewTransform){\n  for (  ResizeHandle mResizeHandle : mResizeHandles) {\n    mResizeHandle.updatePosition(viewTransform);\n  }\n}\n", "nl": "Update the positions of the resize handles"}
{"code": "public MarketGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... itemIds){\n  super(client,\"market.getById\",GetByIdExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  itemIds(itemIds);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public GroupsIsMemberQuery(VkApiClient client,String groupId){\n  super(client,\"groups.isMember\",BoolInt.class);\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public OPCHardwareAddressImpl(final String pItemName) throws ConfigurationException {\n  this(pItemName,0);\n}\n", "nl": "Create a OPCHardwareAddress object"}
{"code": "public Builder removeColumns(Collection<String> columnNames){\n  return transform(new RemoveColumnsTransform(columnNames.toArray(new String[columnNames.size()])));\n}\n", "nl": "Remove all of the specified columns, by name"}
{"code": "public Vector minus(Vector other){\n  return new Vector(x - other.x,y - other.y);\n}\n", "nl": "Return the vector resulting in this vector minus the values of the other vector"}
{"code": "protected MarketAddQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n", "nl": "Item description"}
{"code": "public boolean contains(R rowKey,C columnKey){\n  if (rowKey == null || columnKey == null)   return false;\n  Map<C,V> row=dataMap.get(rowKey);\n  return row != null && row.containsKey(columnKey);\n}\n", "nl": "does table contain cell"}
{"code": "public AuthCheckPhoneQuery(VkApiClient client,String phone,String clientSecret){\n  super(client,\"auth.checkPhone\",OkResponse.class);\n  phone(phone);\n  clientSecret(clientSecret);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){\n  super.onRequestPermissionsResult(requestCode,permissions,grantResults);\n  contentManager.onRequestPermissionsResult(requestCode,permissions,grantResults);\n}\n", "nl": "need for real time permissions"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Deployment public void testDoubleNestedSimpleSubProcess(){\n  ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"nestedSimpleSubProcess\");\n  Task subProcessTask=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();\n  assertEquals(\"Task in subprocess\",subProcessTask.getName());\n  taskService.complete(subProcessTask.getId());\n  Task taskAfterSubProcesses=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();\n  assertEquals(\"Task after subprocesses\",taskAfterSubProcesses.getName());\n}\n", "nl": "Test case where the simple sub process of previous test cases is nested within two other sub processes"}
{"code": "public void dumpASCII(String path) throws IOException {\n  Writer writer=new FileWriter(path,true);\n  getWave().dump(writer);\n}\n", "nl": "Dumps the wave data associated with this result"}
{"code": "public void sendNoMsgToTarget(Object target){\n  sendToTargetOrType(target.getClass(),null);\n}\n", "nl": "send to recipient directly with has not any message"}
{"code": "public DOMImplementationListImpl(ArrayList params){\n  fImplementations=params;\n}\n", "nl": "Construct a list of DOMImplementations from an ArrayList"}
{"code": "public AudioEditQuery noSearch(Boolean value){\n  return unsafeParam(\"no_search\",value);\n}\n", "nl": "true - audio file will not be available for search false - audio file will be available for search (default)"}
{"code": "public static boolean writeFile(String filePath,String content){\n  return writeFile(filePath,content,false);\n}\n", "nl": "write file, the string will be written to the begin of the file"}
{"code": "protected MarketReportCommentQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Complaint reason"}
{"code": "public void increaseReceiveFinishEventCount(){\n  this.nReceiveFinishEventCount++;\n}\n", "nl": "Increase receive finish count using for meteor game"}
{"code": "private void close(){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   this.supportFinishAfterTransition();\n else   finish();\n}\n", "nl": "Close current activity correctly"}
{"code": "private void startWaveNorthernShieldGenerator1(){\n  sp(233726,174.50981f,251.38982f,292.43088f,(byte)0,1000,\"NorthernShieldGenerator1\");\n  sp(233727,174.9973f,254.4739f,292.3325f,(byte)0,1000,\"NorthernShieldGenerator2\");\n  sp(233857,174.84029f,257.80832f,292.4389f,(byte)0,1000,\"NorthernShieldGenerator3\");\n}\n", "nl": "* Northern Shield Generator Periodic Spawn  *"}
{"code": "public final String toJson(){\n  return getGson().toJson(this);\n}\n", "nl": "Generates out of this class instance a JSON message"}
{"code": "@Override public void onLoad(boolean viewRecreated){\n  super.onLoad(viewRecreated);\n}\n", "nl": "This method is called, when view is ready"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(8).putLong(getLong(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]"}
{"code": "public SlickForm withFields(FormField[] fields){\n  Collections.addAll(this.formFields,fields);\n  return this;\n}\n", "nl": "Adds a new fields to the SlickForm's fields collection"}
{"code": "public CM_CLOSE_DIALOG(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_CM_REQUEST_DIALOG </tt> packet"}
{"code": "public void showEmpty(Drawable emptyImageDrawable,String emptyTextContent,List<Integer> skipIds){\n  switchState(EMPTY,emptyImageDrawable,emptyTextContent,null,null,skipIds);\n}\n", "nl": "Show empty view when there are not data to show"}
{"code": "public UsersSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"users.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void clear(){\n  if (null != columnReverseDictionaryInfo) {\n    columnReverseDictionaryInfo.clear();\n    columnReverseDictionaryInfo=null;\n  }\n}\n", "nl": "This method will release the objects and set default value for primitive types"}
{"code": "public static boolean isValidPassword(@NonNull String password){\n  return !TextUtils.isEmpty(password) && password.length() >= 8 && !(Pattern.compile(PASSWORD_REGEX).matcher(password).matches());\n}\n", "nl": "Method to check valid password"}
{"code": "public void spin(){\n  isSpinning=true;\n  spinHandler.sendEmptyMessage(0);\n}\n", "nl": "Puts the view on spin mode"}
{"code": "public static short quantize(float f,float fMin,float fRange){\n  return ((short)(((double)f - (double)fMin) * 65535.0 / (fRange) - 32768.0));\n}\n", "nl": "Quantize a float variable over the 16bits signed short range"}
{"code": "public final int hashCode(){\n  return super.hashCode();\n}\n", "nl": "Finalizes the hashCode method"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "private static int computeBlastFrame(int frame){\n  return frame <= 2 ? frame + 1 : 2 - frame;\n}\n", "nl": "compute the BLAST frame"}
{"code": "@deprecated public final void reset(char[] chars,int start,int count){\n  if (chars == null) {\n    chars=this.emptyCharArray;\n  }\n  this.text=chars;\n  reset(start,count);\n}\n", "nl": "/*    "}
{"code": "public void updateAllSteps(){\n  Runnable batch=myBatchQueue.poll();\n  while (batch != null) {\n    batch.run();\n    batch=myBatchQueue.poll();\n  }\n}\n", "nl": "Runs a number of batches of callbacks until the invocation queue is depleted"}
{"code": "@Override protected int sizeOf(String key,BitmapDrawable value){\n  final int bitmapSize=getBitmapSize(value) / 1024;\n  return bitmapSize == 0 ? 1 : bitmapSize;\n}\n", "nl": "Measure item size in kilobytes rather than units which is more practical for a bitmap cache"}
{"code": "public static ULong ulong(BigInteger value) throws NumberFormatException {\n  return ULong.valueOf(value);\n}\n", "nl": "Create an <code>unsigned long</code>"}
{"code": "public synchronized ZooKeeperClientBuilder connectionTimeoutMs(int connectionTimeoutMs){\n  this.conectionTimeoutMs=connectionTimeoutMs;\n  return this;\n}\n", "nl": "Set zookeeper connection timeout in milliseconds"}
{"code": "public BoardOpenTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.openTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"move dir=down;\");\n}\n", "nl": "action to be performed"}
{"code": "public boolean isShiftDown(){\n  return mIsShiftDown;\n}\n", "nl": "Accessor for shift down check"}
{"code": "public static void register(String name,AbstractChannel<?> channel){\n  channels.put(name,channel);\n}\n", "nl": "Registers the given channel for the given name"}
{"code": "long decreaseItemCount(Item item,long count,ItemUpdateType updateType,Player actor){\n  return decreaseItemCount(item,count,updateType,QuestStatus.NONE,actor);\n}\n", "nl": "decrease item count and return left count"}
{"code": "public WriteEntriesSpaceOperationResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public boolean runAfter(List tasks,int size){\n  return false;\n}\n", "nl": "No ordering"}
{"code": "public void init(){\n  verticalStepperFormLayout.initialiseVerticalStepperForm(this);\n}\n", "nl": "Set up the form and initialize it"}
{"code": "private boolean hasLogTypeFilters(){\n  return logDisabledTypesMask != 0;\n}\n", "nl": "Check if list is filtering by log type mask"}
{"code": "public void onNetConnected(NetUtils.NetType type){\n}\n", "nl": "when network connected callback"}
{"code": "public MessagesMarkAsReadQuery startMessageId(Integer value){\n  return unsafeParam(\"start_message_id\",value);\n}\n", "nl": "Set start message id"}
{"code": "public static int pairBytesToHashcode(byte[] pairBytes){\n  return (pairBytes[0] & 0xFF) << 8 | (pairBytes[1] & 0xFF);\n}\n", "nl": "Convert bytes to hased pair"}
{"code": "public boolean declaresMethod(String subsignature){\n  checkLevel(SIGNATURES);\n  return declaresMethod(Scene.v().getSubSigNumberer().findOrAdd(subsignature));\n}\n", "nl": "Does this class declare a method with the given subsignature?"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.00240506434076,0.0190372444310,0.0417464784322,0.0736683145538,0.125355951380,0.00240506434076,0.0190372444310,0.0417464784322,0.0736683145538,0.125355951380};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "private static void populate(){\n  geometryMap.put(Point.class,GeometryTypeEnum.POINT);\n  geometryMap.put(MultiPoint.class,GeometryTypeEnum.POINT);\n  geometryMap.put(LineString.class,GeometryTypeEnum.LINE);\n  geometryMap.put(MultiLineString.class,GeometryTypeEnum.LINE);\n  geometryMap.put(Polygon.class,GeometryTypeEnum.POLYGON);\n  geometryMap.put(MultiPolygon.class,GeometryTypeEnum.POLYGON);\n}\n", "nl": "Populate member data"}
{"code": "public MessagesGetHistoryAttachmentsQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "@deprecated protected int writeValueAndType(boolean hasValue,int value,int node){\n}\n", "nl": "/*    "}
{"code": "public static RuleKey forPlainTarget(Label label){\n  return new RuleKey(label);\n}\n", "nl": "Returns a key identifying a plain target"}
{"code": "public MessagesSetChatPhotoQuery(VkApiClient client,UserActor actor,String file){\n  super(client,\"messages.setChatPhoto\",SetChatPhotoResponse.class);\n  accessToken(actor.getAccessToken());\n  file(file);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public UtilsResolveScreenNameQuery(VkApiClient client,String screenName){\n  super(client,\"utils.resolveScreenName\",DomainResolved.class);\n  screenName(screenName);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void openDatabase() throws SQLException {\n  myDataBase=getWritableDatabase();\n}\n", "nl": "Set database instance"}
{"code": "public WallPostQuery signed(Boolean value){\n  return unsafeParam(\"signed\",value);\n}\n", "nl": "Post will be signed with the name of the posting user Only for posts in communities with \"from_group\""}
{"code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  super.destroyView();\n}\n", "nl": "ask view to destroy itself"}
{"code": "public FaveAddLinkQuery(VkApiClient client,UserActor actor,String link){\n  super(client,\"fave.addLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  link(link);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void assertMatches(String errorMessage,String stringToMatch,String regex){\n  assertTrue(errorMessage,stringToMatch.matches(regex));\n}\n", "nl": "Check if provided string matches regex"}
{"code": "public boolean contains(int index){\n  return index >= getFirst() && index <= getLast();\n}\n", "nl": "Tests whether item is contained by range"}
{"code": "public boolean isAllViewersUptodate(){\n  for (  IDirectableViewer viewer : viewers) {\n    if (!viewer.isUptoDate()) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "returns true, if all viewers are uptodate"}
{"code": "public Builder withRationaleDialogMsg(@StringRes int rationaleMsgRes){\n  buildObj.rationaleDialogMsgRes=rationaleMsgRes;\n  buildObj.showRationaleDialog=true;\n  return this;\n}\n", "nl": "Sets rationale dialog message"}
{"code": "public CommitPreparedTransactionSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public void addAll(List<String> stringValues){\n  for (  String stringValue : stringValues) {\n    add(stringValue);\n  }\n}\n", "nl": "Add all the strings in the list to this column"}
{"code": "protected MarketEditAlbumQuery albumId(int value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Collection id"}
{"code": "public CM_MAC_ADDRESS(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_MAC_ADDRESS </tt> packet"}
{"code": "public void showContent(){\n  switchState(CONTENT,null,null,null,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Hide all other states and show content"}
{"code": "@Override public boolean hasFixedPropertiesArray(){\n  return false;\n}\n", "nl": "true if the entry packet has an array of fixed properties"}
{"code": "public void collapse(DefaultMutableTreeNode v){\n  if (v == null)   v=(DefaultMutableTreeNode)fileTree.getModel().getRoot();\n  for (Enumeration descendants=v.depthFirstEnumeration(); descendants.hasMoreElements(); ) {\n    v=(DefaultMutableTreeNode)descendants.nextElement();\n    fileTree.collapsePath(new TreePath(v.getPath()));\n  }\n}\n", "nl": "collapse the given node   or root"}
{"code": "public ProductConfigWrapperException(String message){\n  super(message);\n}\n", "nl": "Creates a new instance of ProductConfigWrapperException"}
{"code": "public void assertContains(Predicate<HarEntry> predicate){\n  assertThat(trafficLogProvider.get(),new TrafficLogContains(Collections.singletonList(predicate)));\n}\n", "nl": "Verifies that traffic log contains at least one entry matching the Predicate"}
{"code": "public EntryClass(Class clazz,EntryClass superclass) throws MarshalException {\n  name=clazz.getName();\n  this.superclass=superclass;\n  ClassMapper.EntryField[] fields=ClassMapper.getFields(clazz);\n  numFields=fields.length;\n  computeHash(fields);\n}\n", "nl": "Should only be called by ClassMapper"}
{"code": "private IOUtils(){\n}\n", "nl": "Cannot create a new instance of IOUtils"}
{"code": "public EncounterResult encounterPokemon() throws LoginFailedException, RemoteServerException {\n  return AsyncHelper.toBlocking(encounterPokemonAsync());\n}\n", "nl": "Encounter pokemon"}
{"code": "public static boolean isUrl(String s){\n  if (isEmpty(s))   return defaultEmptyOK;\n  if (s.indexOf(\"://\") != -1)   return true;\n  return false;\n}\n", "nl": "isUrl returns true if the string contains ://"}
{"code": "public Builder cacheInMemory(){\n  cacheInMemory=true;\n  return this;\n}\n", "nl": "Loaded image will be cached in memory"}
{"code": "public VideoAddToAlbumQuery albumIds(Integer... value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Set album ids"}
{"code": "public boolean canCausePartialRendering(){\n  return !myDryRun;\n}\n", "nl": "If there is an error, can it cause a project that is partially rendered?"}
{"code": "public WallPinQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.pin\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void dismissProgress(){\n  if (progress != null) {\n    progress.dismiss();\n    progress=null;\n  }\n}\n", "nl": "Dismiss and clear progress dialog field"}
{"code": "public static void e(String tag,String msg){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  Log.e(tag,msg);\n}\n", "nl": "Send an ERROR log message"}
{"code": "void clearWeight(NlComponent n){\n  if (mClearWeights == null) {\n    mClearWeights=new ArrayList<NlComponent>();\n  }\n  mClearWeights.add(n);\n}\n", "nl": "Marks that the given node should be cleared when applying the new size"}
{"code": "public static StorableActivityFence during(@ActivityType int... activityTypes){\n  return new StorableActivityFence(activityTypes,DURING_TYPE);\n}\n", "nl": "Creates an storable activity fence which will be valid when the user is doing one of the given activity"}
{"code": "public WallGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... posts){\n  super(client,\"wall.getById\",GetByIdExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  posts(posts);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isGlobalScope(){\n  return true;\n}\n", "nl": "get scope global rather than selected"}
{"code": "public VideoSearchQueryWithExtended sort(VideoSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "private Animation applySlideDownAnimationTo(View view){\n  Animation animation=new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f,Animation.RELATIVE_TO_SELF,0.0f);\n  animation.setDuration(100);\n  animation.setInterpolator(new AccelerateInterpolator());\n  view.startAnimation(animation);\n  return animation;\n}\n", "nl": "Applies a slide down animation relative to itself to the view supplied"}
{"code": "public boolean inheritedParameters(){\n  return this.inheritedParameters;\n}\n", "nl": "Test if we have already inherited our interface parameters"}
{"code": "public void startComponents(){\n  startComponents(true);\n  startComponents(false);\n  _spaceMode=SpaceMode.PRIMARY;\n}\n", "nl": "Start all space components"}
{"code": "@Override public void nodeLeft(final ClusterNode clusterNode){\n  LOGGER.info(\"Detected Terracotta node left cluster: \" + clusterNode.getId());\n}\n", "nl": "A node has left the cluster"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public GenericValue create(GenericValue value) throws GenericEntityException {\n  if (value == null) {\n    return null;\n  }\n  int retVal=genericDAO.insert(value);\n  if (Debug.verboseOn())   Debug.logVerbose(\"Insert Return Value : \" + retVal,module);\n  return value;\n}\n", "nl": "Creates a Entity in the form of a GenericValue and write it to the database"}
{"code": "public void deleteFaceList(@NotNull String faceListId){\n  faceListBuilder.deleteFaceList(faceListId).withNoResult();\n}\n", "nl": "Deletes a faceList"}
{"code": "public static void showError(String message){\n  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,60000);\n}\n", "nl": "show an error notation"}
{"code": "public MarketEditCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"market.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){\n  super(fixNoHttpResponseException,httpPort,httpsPort);\n}\n", "nl": "Creates new SyncHttpClient using given params"}
{"code": "protected void notifyDataInvalidatedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onInvalidated();\n    }\n  }\n}\n", "nl": "Notifies observers about invalidating data"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCache.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "@Override public void do_after_propagation(){\n  for (  HeapInsIntervalManager im : new_pts.values()) {\n    im.flush();\n  }\n  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();\n}\n", "nl": "Remember to clean the is_new flag"}
{"code": "public boolean useSkill(){\n  return useSkill(true,true);\n}\n", "nl": "Skill entry point"}
{"code": "public AuthCheckPhoneQuery authByPhone(Boolean value){\n  return unsafeParam(\"auth_by_phone\",value);\n}\n", "nl": "Set auth by phone"}
{"code": "static boolean isLaunchNameMatched(Launch launch,EmailSenderCase oneCase){\n  List<String> configuredNames=oneCase.getLaunchNames();\n  return (null == configuredNames) || (configuredNames.isEmpty()) || configuredNames.contains(launch.getName());\n}\n", "nl": "Validate matching of finished launch name and project settings for emailing"}
{"code": "private static boolean permissionExists(String permission){\n  Integer minVersion=MIN_SDK_PERMISSIONS.get(permission);\n  return minVersion == null || Build.VERSION.SDK_INT >= minVersion;\n}\n", "nl": "Returns true if the permission exists in this SDK version"}
{"code": "private void safeAddTrap(Body b,Trap newTrap){\n  if (newTrap.getBeginUnit() != newTrap.getEndUnit())   b.getTraps().add(newTrap);\n}\n", "nl": "Adds a new trap to the given body only if the given trap is not empty"}
{"code": "public void put(final CharSequence key,final Object value){\n  this.additionalData.put(key,value);\n}\n", "nl": "Attach a new metadata to the feedback"}
{"code": "public static void checkReady(Player player,TeamCommand eventCode){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new CheckAllianceReadyEvent(alliance,player,eventCode));\n  }\n}\n", "nl": "Check that alliance is ready"}
{"code": "public int append_file1(String appender_file_id,byte[] file_buff,int offset,int length) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.append_file(parts[0],parts[1],file_buff,offset,length);\n}\n", "nl": "append file to storage server (by file buff)"}
{"code": "public static boolean isHttp(String scheme){\n  return scheme.equalsIgnoreCase(\"http\") || scheme.equalsIgnoreCase(\"https\");\n}\n", "nl": "Adjust if the scheme is http or https"}
{"code": "public static void e(Class<?> clazz,String msg){\n  if (isDebug) {\n    Log.e(clazz.getSimpleName(),msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public Decision(Object dDocument,Object oFinalDecision,double dDecisionBelief,Map mDecisionEvidence){\n  Document=dDocument;\n  FinalDecision=oFinalDecision;\n  DecisionBelief=dDecisionBelief;\n  DecisionEvidence=mDecisionEvidence;\n}\n", "nl": "Creates a new instance of Decision concerning a single document"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public String toString(){\n  return \"DummyFreeTTSVoice US-English\";\n}\n", "nl": "Converts this object to a string"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "private void startWaveWesternShieldGenerator1(){\n  sp(233722,258.37912f,176.03621f,325.59268f,(byte)30,1000,\"WesternShieldGenerator1\");\n  sp(233723,255.55922f,176.17963f,325.49332f,(byte)29,1000,\"WesternShieldGenerator2\");\n  sp(233882,252.49738f,176.27466f,325.52942f,(byte)29,1000,\"WesternShieldGenerator3\");\n}\n", "nl": "* Western Shield Generator Periodic Spawn  *"}
{"code": "public MarketDeleteCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"market.deleteComment\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void orderBy(IQueryResultSet<IEntryPacket> entries,List<OrderColumn> orderColumns) throws SQLException {\n  Collections.sort((List<IEntryPacket>)entries,getOrderByComparator(entries,orderColumns));\n}\n", "nl": "Order the results according to the order by clause"}
{"code": "public GenericAttr(CP name,byte data[]){\n  attr_name=name;\n  this.data=data;\n}\n", "nl": "Make up a new attribute"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "public void writeInt(int a) throws IOException {\n  outs.write((byte)(a >> 24));\n  outs.write((byte)(a >> 16));\n  outs.write((byte)(a >> 8));\n  outs.write((byte)(a));\n  position+=4;\n}\n", "nl": "write an int"}
{"code": "public boolean isApplicable(){\n  final LabelsJList list=((ChartViewer)getViewer()).getActiveLabelsJList();\n  return list != null && list.getSelectedIndex() != -1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views"}
{"code": "public static long addItem(Player player,Item sourceItem){\n  return addItem(player,sourceItem.getItemId(),sourceItem.getItemCount(),sourceItem,DEFAULT_UPDATE_PREDICATE);\n}\n", "nl": "Add new item based on all sourceItem values"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  JFrame frame=null;\n  if (getViewer() != null)   frame=getViewer().getFrame();\n  String result=JOptionPane.showInputDialog(frame,\"Set directory:\",System.getProperty(\"user.dir\"));\n  if (result != null && result.trim().length() > 0) {\n    execute(\"set dir='\" + result.trim() + \"';\");\n  }\n}\n", "nl": "action to be performed"}
{"code": "private boolean isLargeEnough(){\n  int x0=leftMargin;\n  int x1=getWidth() - rightMargin;\n  int y0=getHeight() - bottomMargin;\n  int y1=topMargin;\n  return x0 < x1 && y0 > y1;\n}\n", "nl": "is canvas large enough to draw chart?"}
{"code": "public OpenSpacesQueueObject newQueueEntry(String queueName){\n  OpenSpacesQueueObject queueObject=isFifo() ? new OpenSpacesFifoQueueObject() : new OpenSpacesQueueObject();\n  queueObject.setPersistent(isPersistent());\n  queueObject.setEndpointURI(queueName);\n  return queueObject;\n}\n", "nl": "Creates a new entry to put in the queue"}
{"code": "public FriendsGetQueryWithFields(VkApiClient client,UserField... fields){\n  super(client,\"friends.get\",GetFieldsResponse.class);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void sendQueryEnd(){\n  sendJson(Json.object(ACTION,ACTION_QUERY_END));\n}\n", "nl": "Tell the client that there are no more query results"}
{"code": "public static int calculateViewvCPU(int connectionServerCount,int securityServerCount,int vCenterServerCount){\n  final int cs=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.connectionserver.vcpu.default\")) * connectionServerCount;\n  final int ss=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.securityserver.vcpu.default\")) * securityServerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.vcenter.vcpu.default\")) * securityServerCount;\n  final int co=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.composer.vcpu.default\"));\n  return cs + ss + vc+ co;\n}\n", "nl": "Calculate vCPU requirements for deployment"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean drawShadows(){\n  return drawShadows;\n}\n", "nl": "Determine whether shadows are drawn"}
{"code": "public void check(long animationDurationMS){\n  if (state == FLAG_STATE_CHECK) {\n    return;\n  }\n  toggle(animationDurationMS);\n}\n", "nl": "Transition to check status over the given animation duration"}
{"code": "public Matrix abs(){\n  Matrix result=new Matrix(m,n);\n  for (int i=0; i < result.A.length; i++) {\n    for (int j=0; j < result.A[i].length; j++)     result.A[i][j]=Math.abs(A[i][j]);\n  }\n  return result;\n}\n", "nl": "returns a new Matrix object, where each value is set to the absolute value"}
{"code": "public int read(){\n  return bytes[pos++] & 0xFF;\n}\n", "nl": "read a single byte"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  getViewer().selectComponent(getViewer().getMatrixTab());\n}\n", "nl": "action to be performed"}
{"code": "default String classEntityTypeName(IRI classIri){\n  return \"t\" + fromIri(classIri);\n}\n", "nl": "Generate the name of a MM entity type from the IRI of an OWL class"}
{"code": "public InternalEventTracker postEvent(Event event){\n  return eventBus.postEvent(event);\n}\n", "nl": "Convenient method to post an event to the bus"}
{"code": "protected VideoGetAlbumsByVideoQuery videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n", "nl": "Set video id"}
{"code": "public int maxId(){\n  int t=-1;\n  while (true) {\n    int s=bits.nextSetBit(t + 1);\n    if (s == -1)     return t;\n else     t=s;\n  }\n}\n", "nl": "gets the maximal defined taxon id"}
{"code": "public ParticleSystem(Activity a,int maxParticles,int drawableResId,long timeToLive,int parentViewId){\n  this(a,maxParticles,ContextCompat.getDrawable(a,drawableResId),timeToLive,parentViewId);\n}\n", "nl": "Creates a particle system with the given parameters"}
{"code": "public boolean canZoomOutMoreX(){\n  return (mScaleX > mMinScaleX);\n}\n", "nl": "Returns true if the chart is not yet fully zoomed out on the x-axis"}
{"code": "protected void processPauseRequest(){\n  if (mState == State.PLAYING) {\n    mState=State.PAUSED;\n    mPlayer.pause();\n    releaseResources(false);\n  }\n}\n", "nl": "Processes a request to pause the current playback"}
{"code": "public SecureCheckTokenQuery token(String value){\n  return unsafeParam(\"token\",value);\n}\n", "nl": "Client \"access_token\""}
{"code": "@Override public String toString(){\n  return getMessage();\n}\n", "nl": "Return the exception message"}
{"code": "@JsonIgnore public boolean isProcessValueDeadbandEnabled(){\n  if (valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE || valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_RELATIVE || valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE_VALUE_DESCR_CHANGE || valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_RELATIVE_VALUE_DESCR_CHANGE) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Returns true if value-based deadband filtering is enabled for the process"}
{"code": "protected AuthConfirmQuery phone(String value){\n  return unsafeParam(\"phone\",value);\n}\n", "nl": "Set phone"}
{"code": "public FriendsGetAvailableForCallQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"friends.getAvailableForCall\",GetAvailableForCallFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isLegionMember(){\n  return legionMember != null;\n}\n", "nl": "Returns true if has valid LegionMember"}
{"code": "public final int hashCode(){\n  return super.hashCode();\n}\n", "nl": "Finalizes the hashCode method"}
{"code": "public WallGetRepostsQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.getReposts\",GetRepostsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public NotesEditCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"notes.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void deleteImage(){\n  if (cameraBitmapPath != null) {\n    File image=new File(cameraBitmapPath);\n    if (image.exists()) {\n      image.delete();\n    }\n  }\n}\n", "nl": "Deletes the saved camera image"}
{"code": "@Override public void drop_duplicates(){\n  for (  HeapInsIntervalManager im : pt_objs.values()) {\n    im.removeUselessSegments();\n  }\n}\n", "nl": "Discard all the ONE_TO_ONE figures which are covered by the ALL_TO_MANY and MANY_TO_ALL figures"}
{"code": "public Webster(int port) throws BindException {\n  this.port=Integer.getInteger(WEBSTER_PORT,0);\n  initialize();\n}\n", "nl": "Create a new Webster"}
{"code": "public static String formatQuantity(Long quantity){\n  if (quantity == null)   return \"\";\n else   return formatQuantity(quantity.doubleValue());\n}\n", "nl": "Formats an Long representing a quantity into a string"}
{"code": "public DestroyThread(){\n  super(\"DestroyThread\");\n  setDaemon(false);\n}\n", "nl": "Create a non-daemon thread"}
{"code": "public void stopAndGone(){\n  mBasoStatus=BasoStatus.GONE;\n  toggleLayout();\n}\n", "nl": "Hide all views"}
{"code": "public VideoGetQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"video.get\",GetExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean run(String allowed){\n  return run(allowed,\"t\");\n}\n", "nl": "Determine if the argument was provided, which determines if a test should or should not be run"}
{"code": "public RMA3FileModifier(String fileName) throws IOException {\n  super(fileName,READ_WRITE);\n  close();\n}\n", "nl": "construct an RMA3 modifier and read in RMA3 data"}
{"code": "public boolean equalsTransform(ViewTransform transform){\n  if (dx == transform.dx && dy == transform.dy && scale == transform.scale) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Compares this transform with another one"}
{"code": "public static void w(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.w(tag,buildMsg(msg));\n  }\n}\n", "nl": "warning log"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  viewer.setCanceled(false);\n  viewer.setVisible(false);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public Matrix solve(Matrix B){\n  return (m == n ? (new LUDecomposition(this)).solve(B) : (new QRDecomposition(this)).solve(B));\n}\n", "nl": "Solve A*X = B"}
{"code": "public void writeChar(char a) throws IOException {\n  outs.write((byte)(a));\n  outs.write((byte)(a >> 8));\n}\n", "nl": "write char, little endian"}
{"code": "public boolean canZoomOutMoreX(){\n  return (mScaleX > mMinScaleX);\n}\n", "nl": "Returns true if the chart is not yet fully zoomed out on the x-axis"}
{"code": "public VoiceQuality(int numVqParams,int Fs,float skipSize,float winSize){\n  params=new VoiceQualityFileHeader();\n  params.dimension=numVqParams;\n  params.samplingRate=16000;\n  params.skipsize=skipSize;\n  params.winsize=winSize;\n}\n", "nl": "VoiceQuality object containing various vq mesures"}
{"code": "public SpaceHealthStatus(){\n}\n", "nl": "For Externalizable purposes"}
{"code": "public boolean optimizeScanForSingleObject(){\n  return true;\n}\n", "nl": "return true if we can save iterator creation and get a single entry"}
{"code": "public void collapse(TreePath[] paths){\n  for (  TreePath path : paths) {\n    collapse((NodeBase)path.getLastPathComponent());\n  }\n}\n", "nl": "collapse an array of paths"}
{"code": "public UsersGetNearbyQuery timeout(Integer value){\n  return unsafeParam(\"timeout\",value);\n}\n", "nl": "Time when a user disappears from location search results, in seconds"}
{"code": "public GSMessageImpl(){\n  super();\n  setFifo(true);\n  setNOWriteLeaseMode(true);\n  makeTransient();\n}\n", "nl": "Used internally only"}
{"code": "public void delServerService(String serviceName,String group) throws RegistryException {\n  if (registry != null) {\n    registry.delServerService(serviceName,group);\n  }\n  monitor.logEvent(\"PigeonGovernor.delService\",serviceName,\"swimlane=\" + group);\n}\n", "nl": "for governor: manual delete service"}
{"code": "private void initializeCatalogs(boolean privateCatalog){\n  catalog=catalogManager.getCatalog();\n}\n", "nl": "Initialize catalog"}
{"code": "public MessagesRestoreQuery(VkApiClient client,Actor actor,int messageId){\n  super(client,\"messages.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  messageId(messageId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public synchronized void cancel(){\n}\n", "nl": "Cancels currently playing audio"}
{"code": "public void seek(long pos) throws IOException {\n  throw new IOException(\"seek(\" + pos + \"): not supported\");\n}\n", "nl": "seek to the given position"}
{"code": "public static void toast(Context context,String str,int lengthShort){\n  Toast.makeText(context,str,lengthShort).show();\n}\n", "nl": "Show toast"}
{"code": "public AemBubbleMessage waitForAemBubbleMessage(){\n  bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.presenceOfElementLocated(BUBBLE_MSG_BY_SELECTOR));\n  return this;\n}\n", "nl": "Waits for presence of notification message in author mode"}
{"code": "public NotificationsMarkAsViewedQuery(VkApiClient client,UserActor actor){\n  super(client,\"notifications.markAsViewed\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public PhotosGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,PhotoFull.class));\n  accessToken(actor.getAccessToken());\n  photos(photos);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void write(int b) throws IOException {\n  outs.write(b);\n}\n", "nl": "write a byte"}
{"code": "@Deprecated public void showDoneButton(boolean showDone){\n  setProgressButtonEnabled(showDone);\n}\n", "nl": "Shows or hides Done button, replaced with setProgressButtonEnabled"}
{"code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n", "nl": "Apply the size behaviour"}
{"code": "public void notifyMoveObservers(){\n  notifyObservers(ObserverType.MOVE);\n}\n", "nl": "notify that creature moved"}
{"code": "public PhotosCreateAlbumQuery uploadByAdminsOnly(Boolean value){\n  return unsafeParam(\"upload_by_admins_only\",value);\n}\n", "nl": "Set upload by admins only"}
{"code": "@Override public void addDate(String word,Date date){\n  addDateInternal(new Index(word.length()),word,date);\n}\n", "nl": "Adds the given date for the given word"}
{"code": "public String matchPattern(String alias){\n  if (alias != null)   return \"(\" + alias + processLabels(matchLabels,false)+ \")\";\n  return \"(\" + processLabels(matchLabels,false) + \")\";\n}\n", "nl": "Generates a Cypher MATCH pattern for the vertex, example: <p> (alias:Label1:Label2) </p>"}
{"code": "public GroupsEditQuery website(String value){\n  return unsafeParam(\"website\",value);\n}\n", "nl": "Website that will be displayed in the community information field"}
{"code": "private void storeLegionMember(LegionMember legionMember){\n  storeLegionMember(legionMember,false);\n}\n", "nl": "Stores a legion member"}
{"code": "public double estimateEffort(double sloc){\n  double eaf=1;\n  double effortApplied=3.2 * Math.pow(sloc / 1000,1.05) * eaf;\n  return effortApplied;\n}\n", "nl": "Calculate the effort applied using generic COCOMO2 weighted values"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "private void broadcastNewFile(Uri nativeUri){\n  Intent intent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,nativeUri);\n  context.sendBroadcast(intent);\n}\n", "nl": "Send broadcast of new file so files appear over MTP"}
{"code": "public void clearNeighbors(){\n  nodeNeighbors.clear();\n}\n", "nl": "Clear the neighbor list"}
{"code": "private void attachTransaction(QuerySession session,Query query) throws TransactionException, RemoteException, LeaseDeniedException {\n  if ((!session.isAutoCommit() && session.getTransaction() == null) || query.isForceUnderTransaction())   session.setTransaction(createTransaction());\n  session.setQueryHandler(this);\n}\n", "nl": "Attach transaction to the session if needed"}
{"code": "public Builder errorMessageTextColor(int errorMessageTextColor){\n  this.errorMessageTextColor=errorMessageTextColor;\n  return this;\n}\n", "nl": "Set the error message color"}
{"code": "public void hideOverlappingView(int targetViewId){\n  View targetView=mOverlappingViewsMap.get(targetViewId);\n  if (targetView != null) {\n    targetView.clearAnimation();\n    targetView.setVisibility(GONE);\n  }\n}\n", "nl": "Hide overlapping view by ID"}
{"code": "public boolean isDrawCenterTextEnabled(){\n  return mDrawCenterText;\n}\n", "nl": "returns true if drawing the center text is enabled"}
{"code": "@deprecated protected int write(int b){\n  int newLength=this.bytesLength + 1;\n  ensureCapacity(newLength);\n  this.bytesLength=newLength;\n  this.bytes[(this.bytes.length - this.bytesLength)]=((byte)b);\n  return this.bytesLength;\n}\n", "nl": "/*    "}
{"code": "public PhotosGetQueryWithExtended offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Set offset"}
{"code": "private void zzDoEOF(){\n  if (!zzEOFDone) {\n    zzEOFDone=true;\n  }\n}\n", "nl": "Contains user EOF-code, which will be executed exactly once, when the end of file is reached"}
{"code": "JimpleBody(SootMethod m){\n  super(m);\n}\n", "nl": "Construct an empty JimpleBody"}
{"code": "public boolean isApplyGlobalWorldGroups(){\n  return this.applyGlobalWorldGroups;\n}\n", "nl": "Gets if global or non world specific group memberships should be applied"}
{"code": "public AccountSetSilenceModeQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.setSilenceMode\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(UniFrac.TOPOLOGICAL_UNIFRAC);\n}\n", "nl": "this is currently selected?"}
{"code": "private boolean isProxyShared(Properties settings){\n  return Boolean.TRUE.toString().equals(settings.getProperty(\"network.proxy.share_proxy_settings\",\"false\").toLowerCase());\n}\n", "nl": "Checks if the \"share proxy settings\" option is set"}
{"code": "public static EventBuilder on(String event){\n  return new EventBuilder(event,instance);\n}\n", "nl": "Create a new EventBuilder"}
{"code": "private void resetNextDiscSpaceCheck(){\n  nextCheckFallbackData=0;\n}\n", "nl": "Set to zero lines the next check of the disc free space"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void configureUI(){\n  if (myDesignSurface == null) {\n    return;\n  }\n  computeScale(myDesignSurface.getCurrentScreenView(),myDesignSurface.getSize(),myDesignSurface.getContentSize(null));\n  computeOffsets(myDesignSurface.getCurrentScreenView());\n}\n", "nl": "Set up the UI"}
{"code": "public static List<Integer> createColors(Resources r,int[] colors){\n  List<Integer> result=new ArrayList<>();\n  for (  int i : colors) {\n    result.add(r.getColor(i));\n  }\n  return result;\n}\n", "nl": "turn an array of resource-colors (contains resource-id integers) into an array list of actual color integers"}
{"code": "public void addPanel(@NotNull JComponent panel){\n  addLineComponent(panel,myRow++);\n}\n", "nl": "Adds a custom panel that spans the entire width, just set the preferred height on the panel"}
{"code": "public static long parseDateAsEpoch(String dateStr){\n  try {\n    return DateUtils.parseDate(dateStr).getTime();\n  }\n catch (  DateParseException e) {\n    return 0;\n  }\n}\n", "nl": "Parse date in RFC1123 format, and return its value as epoch"}
{"code": "public boolean isRightHalf(){\n  return !isLeftHalf;\n}\n", "nl": "Is this target the right half of a phone?"}
{"code": "public boolean cancelTask(SingleAsyncTask singleAsyncTask,boolean mayInterruptIfRunning){\n  return singleAsyncTask.cancel(mayInterruptIfRunning);\n}\n", "nl": "cancel a singleAsyncTask"}
{"code": "private static BlastMode[] modify(Integer[] order,BlastMode[] array){\n  BlastMode[] tmp=new BlastMode[order.length];\n  int pos=0;\n  for (  Integer id : order) {\n    if (id < array.length)     tmp[pos++]=array[id];\n  }\n  return tmp;\n}\n", "nl": "modify an array according to the given order"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void deleteConcept(String id){\n  try {\n    getGraph().getConcept(id).delete();\n  }\n catch (  ConceptException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "Delete a concept by ID, rethrowing errors as RuntimeExceptions"}
{"code": "public static void showLogin(android.support.v4.app.Fragment fragment,int requestCode){\n  Intent intent=new Intent(fragment.getContext(),LoginActivity.class);\n  fragment.startActivityForResult(intent,requestCode);\n}\n", "nl": "Show the login screen"}
{"code": "public AudioGetPopularQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getPopular\",Utils.buildParametrizedType(List.class,AudioFull.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void removeSpotlightView(){\n  if (listener != null)   listener.onUserClicked(usageId);\n  if (getParent() != null)   ((ViewGroup)getParent()).removeView(this);\n}\n", "nl": "Remove the spotlight view"}
{"code": "@deprecated public boolean isAlias(int index){\n  return ICUResourceBundleReader.RES_GET_TYPE(getTableResource(index)) == 3;\n}\n", "nl": "/*     "}
{"code": "protected void insertTextContent(StringBuffer buf) throws DOMException {\n  String content=getNodeValue();\n  if (content != null) {\n    buf.insert(0,content);\n  }\n}\n", "nl": "internal method taking a StringBuffer in parameter and inserts the text content at the start of the buffer"}
{"code": "public void testParentStylesEmptyCompletion() throws Throwable {\n  doTestCompletionVariants(\"styles_parent_empty.xml\",\"android:\",\"Parent\",\"AppTheme\",\"style1\");\n}\n", "nl": "Checks the completion of parent styles when the attribute is empty"}
{"code": "public void destroyView() throws CanceledException {\n  dir.removeViewer(this);\n  setVisible(false);\n}\n", "nl": "ask view to destroy itself"}
{"code": "public static float invSqrt(float fValue){\n  return (float)(1.0f / Math.sqrt(fValue));\n}\n", "nl": "Returns 1/sqrt(fValue)"}
{"code": "public static float[] pointOnLine(float x0,float y0,float x1,float y1,float ratio){\n  float[] result=new float[2];\n  pointOnLine(x0,y0,x1,y1,ratio,result);\n  return result;\n}\n", "nl": "Get the position on line(x0,y0-x1,y1) based on ratio"}
{"code": "public static Settings init(){\n  return init(DEFAULT_TAG);\n}\n", "nl": "It is used to get the settings object in order to change settings"}
{"code": "private synchronized Object addAndGetSegmentLock(String segmentId){\n  Object segmentLoderLockObject=segmentLockMap.get(segmentId);\n  if (null == segmentLoderLockObject) {\n    segmentLoderLockObject=new Object();\n    segmentLockMap.put(segmentId,segmentLoderLockObject);\n  }\n  return segmentLoderLockObject;\n}\n", "nl": "Below method will be used to get the segment level lock object"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public JSpaceState(){\n  state=STOPPED;\n}\n", "nl": "Create a service state object"}
{"code": "private void addToQueue(Collection<SerialMessage> msgs){\n  if (msgs == null) {\n    return;\n  }\n  for (  SerialMessage serialMessage : msgs) {\n    addToQueue(serialMessage);\n  }\n}\n", "nl": "Move all the messages in a collection to the queue"}
{"code": "public void addInstance(int instanceId,WorldMapInstance instance){\n  if (instanceId == 0) {\n    instanceId=1;\n  }\n  instances.put(instanceId,instance);\n}\n", "nl": "Add instance to map"}
{"code": "@Nullable public ResizeHandler createResizeHandler(@NotNull ViewEditor editor,@NotNull NlComponent component,@Nullable SegmentType horizontalEdgeType,@Nullable SegmentType verticalEdgeType){\n  return null;\n}\n", "nl": "Creates a new resize handler for the given resizable component child of the given layout"}
{"code": "public StatusConsole(int iWidth){\n  Width=iWidth;\n}\n", "nl": "Creates a new instance of StatusConsole"}
{"code": "public boolean isApplicable(){\n  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();\n  return !importBlastDialog.getFormatCBox().getSelectedItem().toString().equalsIgnoreCase(\"daa\");\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected void startZKCluster() throws Exception {\n  zkUtil.startServer();\n  zkc=zkUtil.getZooKeeperClient();\n}\n", "nl": "Start zookeeper cluster"}
{"code": "public XMLStreamException(Throwable th){\n  super(th);\n  nested=th;\n}\n", "nl": "Construct an exception with the assocated exception"}
{"code": "public MessagesEditChatQuery(VkApiClient client,UserActor actor,int chatId,String title){\n  super(client,\"messages.editChat\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Sample(short[] frameData,byte[] residualData){\n  this.frameData=frameData;\n  this.residualData=residualData;\n}\n", "nl": "Constructs a RELP Sample from its component parts"}
{"code": "public boolean loggedIn(){\n  return this.loggedIn;\n}\n", "nl": "Whether or not the login occurred successfully"}
{"code": "public static byte[] pairHashcodeToBytes(int pairHashcode){\n  return new byte[]{(byte)(pairHashcode >> 8),(byte)pairHashcode};\n}\n", "nl": "Convert hashed pair to bytes"}
{"code": "protected Set<D> computeCallToReturnFlowFunction(FlowFunction<D> callToReturnFlowFunction,D d1,D d2){\n  return callToReturnFlowFunction.computeTargets(d2);\n}\n", "nl": "Computes the call-to-return flow function for the given call-site abstraction"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set show-unaligned=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().getAlignmentPanel().setShowUnalignedChars(value);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "public static void writeObjectToFile(String path,Object toWrite,SparkContext sc) throws IOException {\n  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());\n  try (BufferedOutputStream bos=new BufferedOutputStream(fileSystem.create(new Path(path)))){\n    ObjectOutputStream oos=new ObjectOutputStream(bos);\n    oos.writeObject(toWrite);\n  }\n }\n", "nl": "Write an object to HDFS (or local) using default Java object serialization"}
{"code": "private void formWindowClosed(java.awt.event.WindowEvent evt){\n  saveSettings();\n  System.exit(0);\n}\n", "nl": "Saves settings and terminates the application"}
{"code": "protected GroupsGetInvitesQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Set extended"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static void moveFile(String oldPath,String newPath){\n  File fileOld=new File(oldPath);\n  if (fileOld.exists()) {\n    File fileNew=new File(newPath);\n    fileOld.renameTo(fileNew);\n  }\n}\n", "nl": "move file"}
{"code": "public UsersGetFollowersQuery(VkApiClient client){\n  super(client,\"users.getFollowers\",GetFollowersResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public CompletableFuture<Void> delete(){\n  return delete(false);\n}\n", "nl": "Delete the managed ledger associated with this topic"}
{"code": "@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n  PlatformLogicalVersion version=LRMIInvocationContext.getEndpointLogicalVersion();\n  readExternal(in,version);\n}\n", "nl": "Required for Externalizable"}
{"code": "public static Configuration createRuleTag(){\n  Configuration configuration=new Configuration();\n  RuleTag ruleTag=RuleTag.create(\"RuleTag\",Integer.class,\"(#1000 < 0)|(#1000 > 200)[1],true[0]\").id(1500L).build();\n  configuration.addEntity(ruleTag);\n  return configuration;\n}\n", "nl": "RuleTag id: 1500 datTagId: 1000"}
{"code": "@Override public void normalizeDocument(){\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n", "nl": "DOM Level 3"}
{"code": "public boolean isVisible(){\n  return !isDismissed && visible;\n}\n", "nl": "Returns whether this view is visible or not"}
{"code": "public boolean isLocked(){\n  return isLocked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "public void updateFile(OCFile file){\n  setFile(file);\n}\n", "nl": "Update the file of the fragment with file value"}
{"code": "public MarketEditQuery edit(UserActor actor,int ownerId,int itemId,String name,String description,int categoryId,float price,int mainPhotoId){\n  return new MarketEditQuery(getClient(),actor,ownerId,itemId,name,description,categoryId,price,mainPhotoId);\n}\n", "nl": "Edits an item"}
{"code": "protected void writePalette() throws IOException {\n  out.write(colorTab,0,colorTab.length);\n  int n=(3 * 256) - colorTab.length;\n  for (int i=0; i < n; i++) {\n    out.write(0);\n  }\n}\n", "nl": "Writes color table"}
{"code": "public static String printLine(String a,int num){\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < num; i++) {\n    builder.append(a);\n  }\n  return builder.toString();\n}\n", "nl": "Below method will create string like \"***********\""}
{"code": "public final void error(final Object o,final Throwable t){\n  log(Level.ERROR,o,t);\n}\n", "nl": "This method logs the ERROR message"}
{"code": "public int addOrderTerm(GenericValue orderTerm){\n  orderTerms.add(orderTerm);\n  return orderTerms.indexOf(orderTerm);\n}\n", "nl": "Add an orderTerm to the order"}
{"code": "public SpaceTypeDescriptorBuilder storageType(StorageType storageType){\n  if (storageType == null)   throw new IllegalArgumentException(\"Argument cannot be null - 'storageType'.\");\n  if (this._storageType != null && this._storageType != StorageType.DEFAULT && this._storageType != storageType)   throw new IllegalStateException(\"Cannot set storage type to '\" + storageType + \"' - it was already set to '\"+ _storageType+ \"'.\");\n  this._storageType=storageType;\n  return this;\n}\n", "nl": "Sets type's storage type"}
{"code": "public void putBoolean(String key,boolean value){\n  checkForNullKey(key);\n  preferences.edit().putBoolean(key,value).apply();\n}\n", "nl": "Put boolean value into SharedPreferences with 'key' and save"}
{"code": "public AdsCreateAdsQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.createAds\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ChartViewer && ((ChartViewer)getViewer()).getChartDrawer() instanceof BarChartDrawer && !(((ChartViewer)getViewer()).getChartDrawer() instanceof StackedLineChartDrawer);\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static ExpectedCondition<Boolean> hasNodePropertyValue(final Session session,final String nodePath,final String propertyName,final String propertyValue){\n  LOG.debug(\"Checking if node '{}' has property '{}' with value '{}'\",nodePath,propertyName,propertyValue);\n  return null;\n}\n", "nl": "Checks if specified node property has specified value"}
{"code": "public void dumpBinary(DataOutputStream os) throws IOException {\n  os.writeInt(numberOfChannels);\n  os.writeInt(sampleRate);\n  os.writeFloat(coeffMin);\n  os.writeFloat(coeffRange);\n  os.writeFloat(postEmphasis);\n  os.writeInt(residualFold);\n}\n", "nl": "Dump a binary form of the sample rate to the given output stream"}
{"code": "private Experiment createExperiment(){\n  return ExperimentFactory.createExperiment().setDescription(\"Sample Description.\").setStartTime(startTime).setEndTime(endTime).setLabel(PREFIX_EXPERIMENT + System.currentTimeMillis() + count++).setSamplingPercent(samplingPercent).setApplication(ApplicationFactory.defaultApplication());\n}\n", "nl": "Creates a sample basic experiment"}
{"code": "public static UShort ushort(String value) throws NumberFormatException {\n  return value == null ? null : UShort.valueOf(value);\n}\n", "nl": "Create an <code>unsigned short</code>"}
{"code": "public void remove(){\n}\n", "nl": "not implemented"}
{"code": "public View createView(ViewGroup parent){\n  return LayoutInflater.from(parent.getContext()).inflate(R.layout.enls_item_default,parent,false);\n}\n", "nl": "create itemView"}
{"code": "public boolean isSetMessage(){\n  return this.message != null;\n}\n", "nl": "Returns true if field message is set (has been assigned a value) and false otherwise"}
{"code": "public static <T>Set<T> toSet(T obj1,T obj2){\n  Set<T> theSet=new LinkedHashSet<T>();\n  theSet.add(obj1);\n  theSet.add(obj2);\n  return theSet;\n}\n", "nl": "Create a Set from passed objX parameters"}
{"code": "public boolean isStepCompleted(int stepNumber){\n  return completedSteps[stepNumber];\n}\n", "nl": "Determines whether the given step is completed or not"}
{"code": "public GroupsEditQuery eventGroupId(Integer value){\n  return unsafeParam(\"event_group_id\",value);\n}\n", "nl": "Organizer community id (for events only)"}
{"code": "public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,String groupId,Integer... userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatusFull.class));\n  groupId(groupId);\n  extended(true);\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public double cond(){\n  return s[0] / s[Math.min(m,n) - 1];\n}\n", "nl": "Two norm condition number"}
{"code": "public void addActionItem(ActionItem action){\n  actionList.add(action);\n}\n", "nl": "Add action item"}
{"code": "public BoardGetCommentsQuery(VkApiClient client,int groupId,int topicId){\n  super(client,\"board.getComments\",GetCommentsResponse.class);\n  groupId(groupId);\n  topicId(topicId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static String toHex(byte[] data){\n  return new String(Hex.encodeHex(data));\n}\n", "nl": "convert a byte array to hexadecimal"}
{"code": "public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n", "nl": "Adds wheel scrolling listener"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void show(){\n  mContentView.setVisibility(View.VISIBLE);\n}\n", "nl": "show footer"}
{"code": "@RequestMapping(value=ClientUris.UN_REGISTER,method=RequestMethod.GET) public void unRegister(){\n  ClientSession clientSession=ClientContext.get();\n  assert clientSession != null;\n  clientService.unRegisterClient(clientSession.getId());\n}\n", "nl": "Un register the client"}
{"code": "public void release(){\n  if (_entries != null)   _entries.freeSLHolder(_pos);\n  _pos=null;\n  _entries=null;\n}\n", "nl": "Release of this SLHolder resource"}
{"code": "private BezierView buildBezierView(){\n  BezierView bezierView=new BezierView(context,spaceBackgroundColor);\n  bezierView.build(centreContentWight,spaceNavigationHeight - mainContentHeight);\n  return bezierView;\n}\n", "nl": "Creating bezier view with params"}
{"code": "public boolean increment(K key){\n  return adjustValue(key,(int)1);\n}\n", "nl": "Increments the primitive value mapped to key by 1"}
{"code": "public static AuditLevel toLevel(String sArg,Level defaultLevel){\n  return AUDIT;\n}\n", "nl": "Returns custom level for debug type log message"}
{"code": "ReplaceStringQuickFix(@Nullable String name,@Nullable String regexp,@NotNull String newValue){\n  myName=name;\n  myNewValue=newValue;\n  if (regexp != null && regexp.indexOf('(') == -1) {\n    regexp=\"(\" + Pattern.quote(regexp) + \")\";\n  }\n  myRegexp=regexp;\n}\n", "nl": "Creates a new lint quickfix which can replace string contents at the given PSI element"}
{"code": "public static double normalize(double val,double min,double max){\n  if (max < min)   throw new IllegalArgumentException(\"Max must be greather than min\");\n  return (val - min) / (max - min);\n}\n", "nl": "Normalize a value (val - min) / (max - min)"}
{"code": "public int size(){\n  return data.length;\n}\n", "nl": "Data byte size of the wave excluding header size"}
{"code": "public static void cleanInternalCache(Context context){\n  File directory=context.getCacheDir();\n  deleteFilesByDirectory(directory);\n}\n", "nl": "Clear internal cache"}
{"code": "public MessagesSendQuery notification(Boolean value){\n  return unsafeParam(\"notification\",value);\n}\n", "nl": "Set notification"}
{"code": "public static Map<String,Object> returnSuccess(List<String> successMessageList){\n  Map<String,Object> result=returnMessage(ModelService.RESPOND_SUCCESS,null);\n  result.put(ModelService.SUCCESS_MESSAGE_LIST,successMessageList);\n  return result;\n}\n", "nl": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code"}
{"code": "public SM_MAIL_SERVICE(Player player,Letter letter,long time){\n  super(player);\n  this.serviceId=3;\n  this.letter=letter;\n  this.time=time;\n}\n", "nl": "used when reading letter"}
{"code": "@deprecated protected void loadRange(int aRange){\n  this.nextElement=this.set.getRangeStart(aRange);\n  this.endElement=this.set.getRangeEnd(aRange);\n}\n", "nl": "/*    "}
{"code": "@Override public int[] makeInverseCumulativeTestValues(){\n  return new int[]{0,2,3,4,5,5,10,10,10,9,9,10};\n}\n", "nl": "Creates the default inverse cumulative probability density test expected values"}
{"code": "public BoardFixTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.fixTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean hasBlock(){\n  return this.blockClicked != null;\n}\n", "nl": "Check if this event involved a block"}
{"code": "public static Router create(Uri uri){\n  return new Router(uri);\n}\n", "nl": "create Router by uri"}
{"code": "private void invalidShellCommand(){\n  Platform.runLater(null);\n}\n", "nl": "check invalid shell commands"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public String deployProcess(String resourceName){\n  logger.debug(\"Start deploying single process.\");\n  DeploymentBuilder deploymentBuilder=processEngine.getRepositoryService().createDeployment();\n  deploymentBuilder.addClasspathResource(resourceName);\n  Deployment deployment=deploymentBuilder.deploy();\n  logger.debug(\"Process deployed\");\n  return processEngine.getRepositoryService().createProcessDefinitionQuery().deploymentId(deployment.getId()).singleResult().getId();\n}\n", "nl": "Deploys a single process"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static boolean isInitialized(Context ctx){\n  vitamioPackage=ctx.getPackageName();\n  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";\n  return true;\n}\n", "nl": "Check if Vitamio is initialized at this device"}
{"code": "public static Bitmap drawableToBitmap(Drawable drawable){\n  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();\n}\n", "nl": "convert Drawable to Bitmap"}
{"code": "public boolean hasFixedPropertiesArray(){\n  return false;\n}\n", "nl": "true if the entry packet has an array of fixed properties"}
{"code": "public static void saveLocalHistory(IResource resource) throws CoreException {\n  if (resource instanceof IFile && resource.exists()) {\n    if (!resource.isSynchronized(IResource.DEPTH_ZERO))     resource.refreshLocal(IResource.DEPTH_ZERO,null);\n    ((IFile)resource).appendContents(new ByteArrayInputStream(new byte[0]),IResource.KEEP_HISTORY,null);\n  }\n}\n", "nl": "Save local history"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n", "nl": "Removes wheel scrolling listener"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_UPDATE_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300615,value0);\n}\n", "nl": "Quest updated: %0"}
{"code": "public static boolean isConnected(){\n  NetworkInfo info=getNetworkInfos();\n  if (info == null || !info.isConnected()) {\n    return false;\n  }\n  return true;\n}\n", "nl": "Whether or not to connect to the Internet"}
{"code": "public MemcachedCommandHandler(SpaceCache cache,String memcachedVersion,boolean verbosity,int idle,DefaultChannelGroup channelGroup){\n  this.cache=cache;\n  version=memcachedVersion;\n  verbose=verbosity;\n  idle_limit=idle;\n  this.channelGroup=channelGroup;\n}\n", "nl": "Construct the server session handler"}
{"code": "public boolean isEmpty(){\n  return size() == 0;\n}\n", "nl": "True if there are no entries in the counter (false does not mean totalCount > 0)"}
{"code": "public void onDestroy(){\n}\n", "nl": "Called when screen is finally destroyed"}
{"code": "public JsonHttpResponseHandler(String encoding){\n  super(encoding);\n}\n", "nl": "Creates new JsonHttpRespnseHandler with given Json String encoding"}
{"code": "public boolean isIncludeGlobal(){\n  return this.includeGlobal;\n}\n", "nl": "Gets if global or non server specific nodes should be applied"}
{"code": "public Lex(Reader in){\n  this(new PushbackReader(in,2),false);\n}\n", "nl": "Construct a lexical analyzer to analysis a piece of code from a Reader"}
{"code": "public boolean isApplicationExpired(){\n  final Calendar expireDate=Calendar.getInstance();\n  expireDate.set(Integer.valueOf(SETTINGS.getString(\"expirydateyy.setting\")),Integer.valueOf(SETTINGS.getString(\"expirydatemm.setting\")),Integer.valueOf(SETTINGS.getString(\"expirydatedd.setting\")));\n  if (Calendar.getInstance().after(expireDate)) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Expire application"}
{"code": "public AirMapStatusRequirementNotice(JSONObject noticeJson){\n  constructFromJson(noticeJson);\n}\n", "nl": "Initialize an AirMapStatusRequirementNotice from JSON"}
{"code": "public static String nullToBlank(final String string){\n  return string == null ? BLANK : string;\n}\n", "nl": "when string is null return blank string"}
{"code": "BarcodeRow(int width){\n  this.row=new byte[width];\n  currentLocation=0;\n}\n", "nl": "Creates a Barcode row of the width"}
{"code": "public DirectSpaceProxyFactoryImpl(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public void onReturnHome(){\n}\n", "nl": "Perform tasks on Creature return at home"}
{"code": "public void move(Point p){\n  move(p.x,p.y);\n}\n", "nl": "Move mouse to a position on screen"}
{"code": "public void scrollToFinishActivity(){\n  final int childWidth=mContentView.getWidth();\n  int left=0, top=0;\n  left=childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;\n  mDragHelper.smoothSlideViewTo(mContentView,left,top);\n  invalidate();\n}\n", "nl": "Scroll out contentView and finish the activity"}
{"code": "public SQLSchemaMigrator configure(Connection connection){\n  this.connection=connection;\n  this.metadata=new SQLModel(connection);\n  return this;\n}\n", "nl": "Configure the schema migrator with a JDBC connection"}
{"code": "public SM_PET(Pet pet,int subType,int shuggleEmotion){\n  this(0,PetAction.MOOD.getActionId(),0,0,pet);\n  this.shuggleEmotion=shuggleEmotion;\n  this.subType=subType;\n}\n", "nl": "For mood only"}
{"code": "public static void writePbsEntryPacket(PbsOutputStream output,PbsEntryPacket pbsEntry){\n  byte[] array=pbsEntry.getStreamBytes();\n  output.write(array,0,array.length);\n  writeDynamicProperties(output,pbsEntry.getDynamicProperties());\n}\n", "nl": "Writes a pbs entry packet to the stream"}
{"code": "public static boolean enterSafeRegion(@Nullable Object credential){\n  boolean token=sEnabled;\n  if (credential == sCredential) {\n    sEnabled=false;\n  }\n  return token;\n}\n", "nl": "Enters a code region where the sandbox is not needed"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean apply(){\n  setup();\n  setVisible(true);\n  return ok;\n}\n", "nl": "show the window and return true, if not canceled"}
{"code": "public CM_DUEL_REQUEST(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_DUEL_REQUEST</tt> packet"}
{"code": "public PollsGetVotersQuery isBoard(Boolean value){\n  return unsafeParam(\"is_board\",value);\n}\n", "nl": "Set is board"}
{"code": "public MarketSearchQuery rev(Boolean value){\n  return unsafeParam(\"rev\",value);\n}\n", "nl": "Use reverse order"}
{"code": "public BoardDeleteTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.deleteTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Polygon polygon(Point first,Point second,Point third,Point... morePoints){\n  Point[] points=new Point[3 + morePoints.length];\n  points[0]=Assert.argumentNotNull(first,\"first\");\n  points[1]=Assert.argumentNotNull(second,\"second\");\n  points[2]=Assert.argumentNotNull(third,\"third\");\n  for (int i=0; i < morePoints.length; i++)   points[i + 3]=morePoints[i];\n  return polygon(points);\n}\n", "nl": "Creates a Polygon instance from the specified points"}
{"code": "private void requestRemoveNodesStop(){\n  enqueue(new RemoveNodeMessageClass().doRequestStop());\n  logger.debug(\"ZWave controller end exclusion\");\n}\n", "nl": "Terminates the exclusion mode"}
{"code": "@Override public int hashCode(){\n  return super.hashCode();\n}\n", "nl": "This method should no be modified, hashcode in this class is used to ensure that each connection hash unique id"}
{"code": "public MarketAddAlbumQuery mainAlbum(Boolean value){\n  return unsafeParam(\"main_album\",value);\n}\n", "nl": "Set as main"}
{"code": "public static boolean isScreenLocked(Context context){\n  KeyguardManager km=(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE);\n  return km.inKeyguardRestrictedInputMode();\n}\n", "nl": "Check if the screen is locked"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public GroupsEditQuery marketCountry(Integer... value){\n  return unsafeParam(\"market_country\",value);\n}\n", "nl": "Market delivery regions"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@Deployment(resources={\"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.noneTaskProcess.bpmn20.xml\"}) public void testProcessCompleted_StartEnd() throws Exception {\n  this.runtimeService.startProcessInstanceByKey(\"noneTaskProcess\");\n  assertEquals(\"ActivitiEventType.PROCESS_COMPLETED was expected 1 time.\",1,listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());\n}\n", "nl": "Test Start->End process on PROCESS_COMPLETED event"}
{"code": "public void start(Context context,android.support.v4.app.Fragment fragment){\n  start(context,fragment,REQUEST_CROP);\n}\n", "nl": "Send the crop Intent from a support library Fragment"}
{"code": "public String[] upload_appender_file(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String master_filename=null;\n  final String prefix_name=null;\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE,group_name,master_filename,prefix_name,file_ext_name,file_size,callback,meta_list);\n}\n", "nl": "upload appender file to storage server (by callback)"}
{"code": "public void writeTo(OutputStream out) throws IOException {\n  buffer.writeTo(out);\n}\n", "nl": "Write to a file stream"}
{"code": "public int modify_file(String group_name,String appender_filename,long file_offset,byte[] file_buff) throws IOException, MyException {\n  return this.do_modify_file(group_name,appender_filename,file_offset,file_buff.length,new UploadBuff(file_buff,0,file_buff.length));\n}\n", "nl": "modify appender file to storage server (by file buff)"}
{"code": "@Override public int compareTo(@SuppressWarnings(\"NullableProblems\") Fragment other){\n  if (this == other)   return 0;\n  return priority.compareTo(other.getPriority());\n}\n", "nl": "Order Fragment by priority"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public void addTaintPropagationHandler(TaintPropagationHandler handler){\n  this.taintPropagationHandlers.add(handler);\n}\n", "nl": "Adds a handler which is invoked whenever a taint is propagated"}
{"code": "public boolean contains(int level){\n  for (  Expand expand : warehouseExpands) {\n    if (expand.getLevel() == level) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Returns true if list contains level"}
{"code": "public static int skipTabs(byte[] text,int offset,int n){\n  while (n > 0) {\n    if (text[offset] == '\\t')     n--;\n    offset++;\n  }\n  return offset - 1;\n}\n", "nl": "skip a given count of tabs"}
{"code": "public String pushToRestApi() throws IOException {\n  RESTApiHandler restApi=new RESTApiHandler();\n  this.batchUrl=restApi.getRemoteURL(this);\n  return this.batchUrl;\n}\n", "nl": "Push the result to rest api remote url of result"}
{"code": "public static void d(String msg){\n  if (LOG_ENABLE) {\n    Log.d(TAG,buildMsg(msg));\n  }\n}\n", "nl": "debug log"}
{"code": "public byte[] deflateString2ByteArray(String inputString){\n  int length=deflateString2ByteArray(inputString,buffer);\n  byte[] result=new byte[Math.abs(length)];\n  System.arraycopy(buffer,0,result,0,Math.abs(length));\n  return result;\n}\n", "nl": "gets a deflated string"}
{"code": "public NotesCreateCommentQuery(VkApiClient client,UserActor actor,int noteId,String message){\n  super(client,\"notes.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n  message(message);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AppsSendRequestQuery text(String value){\n  return unsafeParam(\"text\",value);\n}\n", "nl": "Request text"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void fireEvent(final String instanceId,String ref,String type,Map<String,Object> params){\n  fireEvent(instanceId,ref,type,params,null);\n}\n", "nl": "FireEvent back to JS"}
{"code": "public void start(){\n  this.prestartAllCoreThreads();\n}\n", "nl": "Start all core threads, causing them to idly wait for work"}
{"code": "public boolean isApplicable(){\n  return getDoc().getNumberOfReads() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public SecureAddAppEventQuery addAppEvent(ServiceActor actor,int userId,int activityId){\n  return new SecureAddAppEventQuery(getClient(),actor,userId,activityId);\n}\n", "nl": "Adds user activity information to an application"}
{"code": "private void swap(Item item1,Item item2){\n  int idx1=item1.idx;\n  int idx2=item2.idx;\n  heap.set(idx2,item1);\n  heap.set(idx1,item2);\n  item1.idx=idx2;\n  item2.idx=idx1;\n}\n", "nl": "Swap two items in the heap"}
{"code": "private NotificationCompat.Builder createNotificationBuilder(){\n  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(getContext());\n  notificationBuilder.setSmallIcon(R.drawable.notification_icon).setAutoCancel(true);\n  notificationBuilder.setColor(getContext().getResources().getColor(R.color.primary));\n  return notificationBuilder;\n}\n", "nl": "Creates a notification builder with some commonly used settings"}
{"code": "public AdsGetClientsQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getClients\",Utils.buildParametrizedType(List.class,Client.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public String toString(long n){\n  StringBuilder buf=new StringBuilder();\n  for (long i=0; i < Math.min(n,length()); i++) {\n    buf.append(\" \").append(get(i));\n  }\n  return buf.toString();\n}\n", "nl": "returns the first n values"}
{"code": "public TokenMarker(){\n}\n", "nl": "Constructs a new Token highlighter"}
{"code": "private void checkMatrixDimensions(Matrix B){\n  if (B.m != m || B.n != n) {\n    throw new IllegalArgumentException(\"Matrix dimensions must agree.\");\n  }\n}\n", "nl": "Check if size(A) == size(B)"}
{"code": "public void jsFnCall(String jsString){\n  showDialog(jsString);\n}\n", "nl": "This function handles call from JS"}
{"code": "static void removeValueStatic(@NotNull GrStatementOwner root,@NotNull BuildFileKey key){\n  GrMethodCall method=getMethodCallByPath(root,key.getPath());\n  if (method != null) {\n    method.delete();\n  }\n}\n", "nl": "Removes the build file value identified by the given key"}
{"code": "private static byte charToByte(char c){\n  return (byte)\"0123456789ABCDEF\".indexOf(c);\n}\n", "nl": "Convert char to byte "}
{"code": "public EntityXmlAssertTest(String caseName,Element mainElement){\n  super(caseName);\n  this.entityXmlUrlString=mainElement.getAttribute(\"entity-xml-url\");\n  this.action=mainElement.getAttribute(\"action\");\n  if (UtilValidate.isEmpty(this.action))   this.action=\"assert\";\n}\n", "nl": "Tests of entity xml"}
{"code": "public IntrospectorPropertyResolver(){\n  super(true);\n}\n", "nl": "Constructs a new IntrospectorPropertyResolver which includes public fields as properties"}
{"code": "@Override public boolean hasObservers(){\n  return hasObservers;\n}\n", "nl": "For checking the DeadEvent"}
{"code": "public static boolean propertyValueEquals(String resource,String name,String compareString){\n  String value=getPropertyValue(resource,name);\n  if (value == null)   return false;\n  return value.trim().equals(compareString);\n}\n", "nl": "Compares the specified property to the compareString, returns true if they are the same, false otherwise"}
{"code": "private static boolean validGeometryFieldName(Expression geometryField){\n  return ((geometryField != null) && (geometryField.toString() != null) && !geometryField.toString().trim().isEmpty());\n}\n", "nl": "Check if geometry field name is valid"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ChartViewer && ((ChartViewer)getViewer()).getChartDrawer() instanceof BarChartDrawer;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected SecureGetUserLevelQuery userIds(List<Integer> value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids"}
{"code": "public AdsDeleteTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,int targetGroupId){\n  super(client,\"ads.deleteTargetGroup\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  targetGroupId(targetGroupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isNull(){\n  return !sourceContent.isSuccess() && extendedTrim(sourceContent.getHtmlCode()).equals(\"\") && !isImage(sourceContent.getFinalUrl());\n}\n", "nl": "Verifies if the content could not be retrieved"}
{"code": "protected PhotosGetByIdQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return additional fields"}
{"code": "UnitType(String name,int start,int count){\n  this.name=name;\n  this.start=start;\n  this.count=count;\n}\n", "nl": "Constructs a UnitType from the given parameters"}
{"code": "public Builder withKeysOnly(boolean keysOnly){\n  this.keysOnly=keysOnly;\n  return this;\n}\n", "nl": "Set the get request to only return keys"}
{"code": "public EntryUnmatchedPacket(OperationID operationID,IEntryHolder originalEntryHolder,IEntryHolder newEntryHolder,ServerTransaction xtn,boolean fromReplication){\n  super(operationID,originalEntryHolder,xtn,0);\n  _newEntryHolder=newEntryHolder;\n  _fromReplication=fromReplication;\n}\n", "nl": "Constructs an EntryArrivedPacket"}
{"code": "public boolean containsEx(int memberObjId){\n  return legionMemberExById.containsKey(memberObjId);\n}\n", "nl": "Returns true if legion is in cached by id"}
{"code": "public boolean isSelectionFindable(){\n  return classificationViewer.getSelectedNodes().size() > 0;\n}\n", "nl": "is a selection find possible"}
{"code": "public NullnessAnalysis(UnitGraph graph){\n  super(graph);\n  doAnalysis();\n}\n", "nl": "Creates a new analysis for the given graph/"}
{"code": "@Override public void onSuccess(int statusCode,Header[] headers,byte[] binaryData){\n  onSuccess(statusCode,binaryData);\n}\n", "nl": "Fired when a request returns successfully, override to handle in your own code"}
{"code": "public VideoSearchQueryWithExtended(VkApiClient client,UserActor actor,String q){\n  super(client,\"video.search\",SearchExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  q(q);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void guardMode(){\n  SummonsService.guardMode(getOwner());\n}\n", "nl": "Change to guard mode"}
{"code": "public static boolean banIp(String ip){\n  return banIp(ip,null);\n}\n", "nl": "Bans ip or mask for infinite period of time"}
{"code": "public Builder type(final java.lang.reflect.Type type){\n  this.propertyType=TypeFactory.valueOf(type);\n  return this;\n}\n", "nl": "Set the type"}
{"code": "public Call postWithJsonBody(String url,JSONObject params,Callback callback){\n  MediaType JSON=MediaType.parse(\"application/json; charset=utf-8\");\n  RequestBody body=RequestBody.create(JSON,params.toString());\n  Request request=new Builder().url(url).post(body).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n", "nl": "Make a POST call with a JSON body"}
{"code": "public boolean isDirty(){\n  return dirty;\n}\n", "nl": "is document dirty"}
{"code": "public void java_lang_reflect_Array_newArray(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){\n  throw new NativeMethodNotSupportedException(method);\n}\n", "nl": "Treat this method as"}
{"code": "public AudioSearchQuery searchOwn(Boolean value){\n  return unsafeParam(\"search_own\",value);\n}\n", "nl": "Set search own"}
{"code": "public FriendsGetListsQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public JMXConnection(String jmxServiceURL,String name){\n  this.jmxServiceURL=jmxServiceURL;\n  this.name=name;\n}\n", "nl": "Construct an instance of the JMXConnection, with all fields initialized"}
{"code": "public static void clickButtonTeamspeakConnect(){\n  RewiMod.getInstance().openUrl(\"ts3server://rewinside.tv\");\n}\n", "nl": "Connects to the teamspeak server"}
{"code": "public static double determinationCoefficient(double[] y1,double[] y2,int n){\n  return Math.pow(correlation(y1,y2),2);\n}\n", "nl": "This returns the determination coefficient of two vectors given a length"}
{"code": "public NewsfeedSaveListQuery saveList(UserActor actor,String title){\n  return new NewsfeedSaveListQuery(getClient(),actor,title);\n}\n", "nl": "Creates and edits user newsfeed lists"}
{"code": "public VideoRemoveFromAlbumQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Set album ids"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isApplicable(){\n  final Document doc=((MainViewer)getDir().getMainViewer()).getDocument();\n  return doc.getNumberOfReads() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected MarketRemoveFromAlbumQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Collections ids to remove item from"}
{"code": "public void updateMatrixSearcher(){\n  updateCurrent();\n}\n", "nl": "rescan the matrix searcher"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof SamplesViewer;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static GenericPK create(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){\n  GenericPK newPK=new GenericPK();\n  newPK.init(delegator,modelEntity,singlePkValue);\n  return newPK;\n}\n", "nl": "Creates new GenericPK from existing Map"}
{"code": "public Builder stringToTimeTransform(String column,String format,DateTimeZone dateTimeZone){\n  return transform(new StringToTimeTransform(column,format,dateTimeZone));\n}\n", "nl": "Convert a String column (containing a date/time String) to a time column (by parsing the date/time String)"}
{"code": "public static GenericPK create(GenericPK value){\n  GenericPK newPK=new GenericPK();\n  newPK.init(value);\n  return newPK;\n}\n", "nl": "Creates new GenericPK from existing GenericPK"}
{"code": "public AddCellToColumnException(Exception e,int columnIndex,long rowNumber,String[] columnNames,String[] line){\n  super(\"Error while addding cell from row \" + rowNumber + \" and column \"+ columnNames[columnIndex]+ \"(position:\"+ columnIndex+ \"): \"+ e.getMessage(),e);\n  this.columnIndex=columnIndex;\n  this.rowNumber=rowNumber;\n  this.columnNames=columnNames;\n  this.line=line;\n}\n", "nl": "Creates a new instance of this Exception"}
{"code": "public void sync() throws IOException {\n  if (dataOutputStream instanceof FSDataOutputStream) {\n    ((FSDataOutputStream)dataOutputStream).hsync();\n  }\n}\n", "nl": "Flush data to HDFS file"}
{"code": "private CarbonDictionaryWriterImpl prepareWriter() throws IOException {\n  initDictionaryDirPaths();\n  return new CarbonDictionaryWriterImpl(this.carbonStorePath,carbonTableIdentifier,columnIdentifier);\n}\n", "nl": "prepare the dictionary writer object"}
{"code": "public boolean isEmpty(){\n  return size() == 0;\n}\n", "nl": "Returns true if the list is empty"}
{"code": "public VideoGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void writeString(PacketBuffer buf,String value){\n  buf.writeInt(value.length());\n  buf.writeString(value);\n}\n", "nl": "Writes a string to the buffer"}
{"code": "public MarketEditAlbumQuery photoId(Integer value){\n  return unsafeParam(\"photo_id\",value);\n}\n", "nl": "Cover photo id"}
{"code": "public void assertContains(TrafficLogPredicate query){\n  assertThat(trafficLogProvider.get(),new TrafficLogContains(query.getPredicates()));\n}\n", "nl": "Verifies that traffic log contains at least one entry matching the TrafficLogPredicate"}
{"code": "public void resetLowThreshold(){\n  this.currentLowThreshold=lowThreshold;\n}\n", "nl": "Reset the currentLowThreshold to tbe original lowThreshold value"}
{"code": "public Webster(String roots) throws BindException {\n  this.port=Integer.getInteger(WEBSTER_PORT,0);\n  initialize(roots);\n}\n", "nl": "Create a new Webster"}
{"code": "public static long parseDateAsEpoch(String dateStr){\n  try {\n    return DateUtils.parseDate(dateStr).getTime();\n  }\n catch (  DateParseException e) {\n    return 0;\n  }\n}\n", "nl": "Parse date in RFC1123 format, and return its value as epoch"}
{"code": "@Override public void onConnected(Session session){\n  startPublishing();\n}\n", "nl": "Session listener"}
{"code": "public void loadAttributeData(String fileName) throws IOException {\n  InputStream ins=ResourceManager.getFileAsStream(fileName);\n  loadAttributeData(ins);\n  ins.close();\n}\n", "nl": "load the id 2 name mapping"}
{"code": "public MessagesAddChatUserQuery(VkApiClient client,UserActor actor,int chatId,int userId){\n  super(client,\"messages.addChatUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public VideoSaveQuery noComments(Boolean value){\n  return unsafeParam(\"no_comments\",value);\n}\n", "nl": "Set no comments"}
{"code": "private Collection<Var> migrateAsResource(String ownerType,ResourceType.DataType columnType,String columnName){\n  String resourceName=namer.resourceName(ownerType,columnName);\n  Var resourceType=var().id(resourceName).datatype(columnType).isa(\"resource-type\");\n  Var hasResource=var().id(ownerType).hasResource(resourceName);\n  return Lists.newArrayList(resourceType,hasResource);\n}\n", "nl": "Migrate a column as a resource type"}
{"code": "public Vector3f interpolate(Vector3f beginVec,Vector3f finalVec,float changeAmnt){\n  this.x=(1 - changeAmnt) * beginVec.x + changeAmnt * finalVec.x;\n  this.y=(1 - changeAmnt) * beginVec.y + changeAmnt * finalVec.y;\n  this.z=(1 - changeAmnt) * beginVec.z + changeAmnt * finalVec.z;\n  return this;\n}\n", "nl": "Sets this vector to the interpolation by changeAmnt from beginVec to finalVec this=(1-changeAmnt)*beginVec + changeAmnt * finalVec"}
{"code": "public boolean isEmpty(){\n  return this == NONE || (left == 0 && top == 0 && right == 0 && bottom == 0);\n}\n", "nl": "Returns true if this margin is empty"}
{"code": "private boolean isBrigadeGeneral(Player player){\n  return player.getLegionMember().isBrigadeGeneral();\n}\n", "nl": "Checks if player is brigade general and returns message if not"}
{"code": "private static double computeJSD(double[] px,double[] py){\n  double[] m=computeMean(px,py);\n  return 0.5 * (computeKLD(px,m) + computeKLD(py,m));\n}\n", "nl": "compute the Jensen-Shannon divergence"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  final String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && (firstLine.contains(\" vs \") || firstLine.contains(\"NO HIT\"));\n}\n", "nl": "is file acceptable?"}
{"code": "public void selectAll(boolean select){\n  classificationViewer.selectAllNodes(select);\n  classificationViewer.repaint();\n}\n", "nl": "set select state of all objects"}
{"code": "@Override public long addUser(User user){\n  return sessionTemplate.insert(NAMESPACE + \".addUser\",user);\n}\n", "nl": "Add new user"}
{"code": "public AccountUnbanUserQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"account.unbanUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static List<Locale> availableLocales(){\n  return LocaleHolder.availableLocaleList;\n}\n", "nl": "Returns a List of available locales sorted by display name"}
{"code": "private static byte[] hexStringToByteArray(String hexString){\n  int len=hexString.length();\n  byte[] data=new byte[len / 2];\n  for (int i=0; i < len; i+=2) {\n    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));\n  }\n  return data;\n}\n", "nl": "Converts hex values from strings to byte array"}
{"code": "public DocumentNGramGaussNormSymWinGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  CorrelationWindow=iCorrelationWindow;\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "@Override public int hashCode(){\n  return _hashCode;\n}\n", "nl": "Returns the calculated hashCode"}
{"code": "public static Call checkCoordinate(Coordinate coordinate,@Nullable Double buffer,@Nullable List<MappingService.AirMapAirspaceType> types,@Nullable List<MappingService.AirMapAirspaceType> ignoredTypes,boolean showWeather,@Nullable Date date,@Nullable AirMapCallback<AirMapStatus> callback){\n  return StatusService.checkCoordinate(coordinate,buffer,types,ignoredTypes,showWeather,date,callback);\n}\n", "nl": "Get a flight status based on a Point and Radius based flight"}
{"code": "public BoxFolder createFolderUnderRoot(String folderName) throws BoxSDKServiceException {\n  return createFolder(folderName,getBoxSDKServiceConfig().getRootFolderId());\n}\n", "nl": "Creates a folder inside the drop folder"}
{"code": "public static Router create(String url){\n  return new Router(Uri.parse(url));\n}\n", "nl": "create Router by url"}
{"code": "public Builder withCountOnly(boolean countOnly){\n  this.countOnly=countOnly;\n  return this;\n}\n", "nl": "Set the get request to only return count of the keys"}
{"code": "@deprecated public String toString(){\n  return toString(0,this.items.size());\n}\n", "nl": "/*     "}
{"code": "public EventBuilder async(){\n  this.event.setAsync(true);\n  return this;\n}\n", "nl": "Run event runnable inside a different thread"}
{"code": "protected final void pressButton(final String action){\n  CommandProcessor.getInstance().executeCommand(getProject(),null,\"\",null);\n}\n", "nl": "Clicks the specified button in current document at the current caret position"}
{"code": "private static ExternalSystem resetOAuthFields(ExternalSystem input){\n  input.setAccessKey(null);\n  return input;\n}\n", "nl": "Reset OAuth authentication fields of external system entity"}
{"code": "public void addLanguage(Long languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n", "nl": "Adds a language limit to the query"}
{"code": "public VideoSearchQuery adult(Boolean value){\n  return unsafeParam(\"adult\",value);\n}\n", "nl": "Disable the Safe Search filter"}
{"code": "protected void shareBySystem(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SYSTEM,getShareData(ShareConstant.SHARE_CHANNEL_SYSTEM),ShareConstant.REQUEST_CODE);\n}\n", "nl": "share more"}
{"code": "public void finishTemplatesSearch(NotifyContext notifyContext){\n  decreaseCounter(notifyContext);\n  _backupLog.clearTriggered(notifyContext.getOperationId());\n}\n", "nl": "Called when the matching search is over"}
{"code": "public boolean isApplicable(){\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  return viewer != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected OrdersGetAmountQuery votes(List<String> value){\n  return unsafeParam(\"votes\",value);\n}\n", "nl": "Set votes"}
{"code": "public DocumentNGramGraph(){\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"close what=others;\");\n}\n", "nl": "action to be performed"}
{"code": "SubTable(Table original){\n  super(original.name(),original.emptyCopy().columns().toArray(new Column[original.columnCount()]));\n}\n", "nl": "Returns a new SubTable from the given table that will include summaries for the given values"}
{"code": "private static boolean isVerticalScreenConfig(int availableWidth,int availableHeight,@NotNull Dimension preferredSize){\n  boolean stackVertically=preferredSize.width > preferredSize.height;\n  if (availableWidth > 10 && availableHeight > 3 * availableWidth / 2) {\n    stackVertically=true;\n  }\n  return stackVertically;\n}\n", "nl": "Returns true if we want to arrange screens vertically instead of horizontally"}
{"code": "public MarketAddQuery deleted(Boolean value){\n  return unsafeParam(\"deleted\",value);\n}\n", "nl": "Item status"}
{"code": "private boolean transactionsIsEmpty(){\n  return loadingJobs.get() + enqueuedJobs.get() == 0;\n}\n", "nl": "Check if all transactions are finished"}
{"code": "public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,UserActor actor,String groupId,List<Integer> userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatusFull.class));\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  extended(true);\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public String directionFromBearing(double bearing){\n  int index=(int)((bearing / 22.5) + 0.5) % 16;\n  return compassDirections[index];\n}\n", "nl": "Converts a bearing into a compass direction"}
{"code": "public static <T>Iterator<T> toIterator(Collection<T> col){\n  if (col == null)   return null;\n else   return col.iterator();\n}\n", "nl": "Get an iterator from a collection, returning null if collection is null"}
{"code": "public static Bitmap drawableToBitmap(Drawable drawable){\n  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();\n}\n", "nl": "convert Drawable to Bitmap"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=diamond;\");\n}\n", "nl": "action to be performed"}
{"code": "public boolean isFullRank(){\n  for (int j=0; j < n; j++) {\n    if (Rdiag[j] == 0)     return false;\n  }\n  return true;\n}\n", "nl": "Is the matrix full rank?"}
{"code": "public int pxToDp(@AndroidCoordinate int px){\n  return (int)(0.5f + px / myDpiFactor);\n}\n", "nl": "Transform android pixels into Dp"}
{"code": "private void addAnnotation(TextContainer textContainer,Issue issue){\n  TMTextUnitVariantCommentAnnotation tmTextUnitVariantCommentAnnotation=new TMTextUnitVariantCommentAnnotation();\n  tmTextUnitVariantCommentAnnotation.setCommentType(TMTextUnitVariantComment.Type.QUALITY_CHECK);\n  tmTextUnitVariantCommentAnnotation.setMessage(issue.getMessage());\n  tmTextUnitVariantCommentAnnotation.setSeverity(TMTextUnitVariantComment.Severity.WARNING);\n  new TMTextUnitVariantCommentAnnotations(textContainer).addAnnotation(tmTextUnitVariantCommentAnnotation);\n}\n", "nl": "Adds an issue annotation on the given text container"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setRetainInstance(true);\n}\n", "nl": "Only called once, since the instance is retained across configuration changes"}
{"code": "protected void writePixels() throws IOException {\n  LZWEncoder encoder=new LZWEncoder(width,height,indexedPixels,colorDepth);\n  encoder.encode(out);\n}\n", "nl": "Encodes and writes pixel data"}
{"code": "public static void recordPageStart(Context context){\n  TcStatSdk.getInstance(context).recordPageStart(context);\n}\n", "nl": "record Page Start"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static boolean isConnected(Context context){\n  NetworkInfo info=Connectivity.getNetworkInfo(context);\n  return (info != null && info.isConnected());\n}\n", "nl": "Check if there is any connectivity"}
{"code": "public boolean exists(String key){\n  return exists(key,false);\n}\n", "nl": "Check existence of config section element"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override protected void initToolbar(Bundle savedInstanceState){\n}\n", "nl": "Initialize the toolbar in the layout"}
{"code": "public boolean isLoggedIn(){\n  AccessToken accessToken=getAccessToken();\n  return accessToken != null && !accessToken.isExpired();\n}\n", "nl": "Check if user is loggedIn"}
{"code": "public ContrastSubfilter(float contrast){\n  this.contrast=contrast;\n}\n", "nl": "Initialise contrast subfilter"}
{"code": "public void addTaintPropagationHandler(TaintPropagationHandler handler){\n  if (this.taintPropagationHandlers == null)   this.taintPropagationHandlers=new HashSet<>();\n  this.taintPropagationHandlers.add(handler);\n}\n", "nl": "Adds a handler which is invoked whenever a taint is propagated"}
{"code": "protected PhotosGetCommentsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Set extended"}
{"code": "public void updateState(final boolean done,final boolean current){\n  mStepDoneIndicator.setVisibility(done ? View.VISIBLE : View.GONE);\n  mStepNumber.setVisibility(!done ? View.VISIBLE : View.GONE);\n  colorViewBackground(done ? mStepDoneIndicator : mStepNumber,done || current);\n  mStepTitle.setTypeface(current ? Typeface.DEFAULT_BOLD : Typeface.DEFAULT);\n  mStepTitle.setAlpha(done || current ? OPAQUE_ALPHA : INACTIVE_STEP_TITLE_ALPHA);\n}\n", "nl": "Updates tab's UI"}
{"code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void shareWeiXin(String liveTitle,String webUrl){\n  String msgTitle=context.getString(R.string.app_name);\n  String msgText=liveTitle + context.getString(R.string.share_str_weixin_title);\n  shareWeiXin(webUrl,msgTitle,msgText);\n}\n", "nl": "Share Weixin"}
{"code": "public WallSearchQueryWithExtended fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public static void enableTrafficAlerts(AirMapTrafficListener listener){\n  getAirMapTrafficService().addListener(listener);\n  getAirMapTrafficService().connect();\n}\n", "nl": "Starts the Traffic Alerts service to receive traffic alerts for the current active flight"}
{"code": "public void addHistory(Legion legion,String text,LegionHistoryType legionHistoryType,int tabId,String description){\n  LegionHistory legionHistory=new LegionHistory(legionHistoryType,text,new Timestamp(System.currentTimeMillis()),tabId,description);\n  legion.addHistory(legionHistory);\n  DAOManager.getDAO(LegionDAO.class).saveNewLegionHistory(legion.getLegionId(),legionHistory);\n  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_TABS(legion.getLegionHistoryByTabId(tabId),tabId));\n}\n", "nl": "This method will add a new history for a legion"}
{"code": "public void recalculateInfluence(){\n  calculateInfluence();\n}\n", "nl": "Recalculates Influence"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed"}
{"code": "public static void d(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg,throwable);\n}\n", "nl": "Send a DEBUG log message"}
{"code": "@RequestMapping(method=RequestMethod.POST,value=\"/api/drops/import\") public ImportDropConfig importDrop(@RequestBody ImportDropConfig importDropConfig) throws Exception {\n  PollableFuture importDropFuture=dropService.importDrop(importDropConfig.getDropId(),importDropConfig.getStatus(),PollableTask.INJECT_CURRENT_TASK);\n  importDropConfig.setPollableTask(importDropFuture.getPollableTask());\n  return importDropConfig;\n}\n", "nl": "WS to start re-importing a drop"}
{"code": "@Override public void clear(){\n  rowMap.clear();\n}\n", "nl": "Clears all rows from this View, leaving the structure in place"}
{"code": "public VideoSearchQuery date(Integer value){\n  return unsafeParam(\"date\",value);\n}\n", "nl": "Set date"}
{"code": "public void replaceLineAt(int pos,String newLines) throws BadLocationException {\n  Element e=getParagraphElement(pos);\n  replace(e.getStartOffset(),getElementLength(e),newLines,null);\n}\n", "nl": "Replace the line at given position with the given string, which can span multiple lines"}
{"code": "protected void failed(Throwable e,Description description){\n}\n", "nl": "Invoked when a test fails"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public FriendsGetRequestsQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getRequests\",GetRequestsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views"}
{"code": "private Uri whichContentStore(){\n  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n    return android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n  }\n else {\n    return android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI;\n  }\n}\n", "nl": "Determine if we are storing the images in internal or external storage"}
{"code": "public void clear(){\n  for (int i=0; i < lastNumber; ++i)   numberToObj[i]=null;\n  lastNumber=0;\n  filledCells=0;\n  objContainer.clear();\n}\n", "nl": "Clear the reference to the objects to help the garbage collection"}
{"code": "public void incThresholdClearedCount(){\n  clearedCount++;\n}\n", "nl": "Increments the count of cleared thresholds"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"copy what=clusterViewer;\");\n}\n", "nl": "action to be performed"}
{"code": "public static ToolbarTapTarget forToolbarNavigationIcon(android.widget.Toolbar toolbar,CharSequence title,@Nullable CharSequence description){\n  return new ToolbarTapTarget(toolbar,true,title,description);\n}\n", "nl": "Return a tap target for the navigation button (back, up, etc) from the given toolbar"}
{"code": "public UpgradePatchRetry(Context context){\n  this.context=context;\n  retryInfoFile=new File(SharePatchFileUtil.getPatchDirectory(context),RETRY_INFO_NAME);\n  tempPatchFile=new File(SharePatchFileUtil.getPatchDirectory(context),TEMP_PATCH_NAME);\n}\n", "nl": "you must set after tinker has installed"}
{"code": "public boolean isApplicable(){\n  ViewerBase viewer=(ViewerBase)getViewer();\n  return viewer.getGraph().getNumberOfNodes() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public UsersGetSubscriptionsQuery(VkApiClient client,UserActor actor){\n  super(client,\"users.getSubscriptions\",GetSubscriptionsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private static String keyForVersion(String name){\n  return \"service_version_\" + name;\n}\n", "nl": "Service name's Version key"}
{"code": "private Map<String,List<ChartObject>> assembleWidgetData(List<ChartObject> input){\n  if (input.isEmpty())   return new HashMap<>();\n  input.stream().forEach(null);\n  Map<String,List<ChartObject>> result=new HashMap<>();\n  result.put(RESULT,input);\n  return result;\n}\n", "nl": "Calculate chart data (Total count of issues) for UI"}
{"code": "public Builder stdevColumns(String... columns){\n  return add(ReduceOp.Stdev,columns);\n}\n", "nl": "Reduce the specified columns by taking the standard deviation of the values"}
{"code": "public LocalCacheDetails(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private void printHelp(){\n  HelpFormatter formatter=new HelpFormatter();\n  formatter.setWidth(140);\n  formatter.printHelp(\"QuerierDriver\",cliOptions);\n}\n", "nl": "Prints out the help message"}
{"code": "public static String execute(String command,File cwd){\n  return SubprocessUttility.execute(command,cwd);\n}\n", "nl": "Execute a command in a specific directory"}
{"code": "public static UInteger valueOf(long value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(value));\n}\n", "nl": "Create an <code>unsigned int</code>"}
{"code": "public static void actions(Context context,Api api,Api.ApiOptions.HasOptions options,Action1<GoogleApiClient> onClientConnected,Action1<Throwable> onError){\n  GoogleApiClientActions.create(context.getApplicationContext(),new ApiWithOptions(api,options),onClientConnected,onError);\n}\n", "nl": "Serve a GoogleApiClient with callback actions"}
{"code": "public static CommandResult execCommand(List<String> commands,boolean isRoot,String path){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true,path);\n}\n", "nl": "execute shell commands, default return result msg"}
{"code": "public PagesGetVersionQuery(VkApiClient client,UserActor actor,int versionId){\n  super(client,\"pages.getVersion\",WikipageFull.class);\n  accessToken(actor.getAccessToken());\n  versionId(versionId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set pc1=2 pc2=3;\");\n}\n", "nl": "action to be performed"}
{"code": "public void deleteItem(final int _index){\n  this.model.remove(_index);\n  notifyItemRemoved(_index);\n}\n", "nl": "Allows to delete an item with a given item index"}
{"code": "public boolean isLocked(){\n  return isLocked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "public BoxFolder createSharedFolder(String folderName) throws BoxSDKServiceException {\n  return createSharedFolder(folderName,getBoxSDKServiceConfig().getRootFolderId());\n}\n", "nl": "Creates a shared folder inside the drop folder"}
{"code": "public static HttpResponse execute(HttpMethod method,String targetUrl,String body) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {\n  return execute(method,targetUrl,body,null);\n}\n", "nl": "Execute an HTTP request"}
{"code": "default String roleParentName(String type){\n  return String.format(ROLE_PARENT,type);\n}\n", "nl": "Get the name of the role the owner of the given type will play"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected void checkKey(Object key){\n  if (!canContainKey(key))   throw new IllegalArgumentException(\"key is not valid for this LeaseMap\");\n}\n", "nl": "Check that the key is valid for this map"}
{"code": "public static String formatPrice(double price){\n  return priceDecimalFormat.format(price);\n}\n", "nl": "Formats a double representing a price into a string"}
{"code": "public INDArray asMatrix(File f) throws IOException {\n  return NDArrayUtil.toNDArray(fromFile(f));\n}\n", "nl": "Convert an image file in to a matrix"}
{"code": "public static SpawnTemplate addNewSpawn(int worldId,int npcId,float x,float y,float z,byte heading,int respawnTime){\n  SpawnTemplate spawnTemplate=createSpawnTemplate(worldId,npcId,x,y,z,heading);\n  spawnTemplate.setRespawnTime(respawnTime);\n  return spawnTemplate;\n}\n", "nl": "Should be used when need to define whether spawn will be deleted after death Using this method spawns will not be saved with //save_spawn command"}
{"code": "public static Account loadAccount(String name){\n  Account account=getAccountDAO().getAccount(name);\n  if (account != null) {\n    account.setAccountTime(getAccountTimeDAO().getAccountTime(account.getId()));\n  }\n  return account;\n}\n", "nl": "Loads account from DB and returns it, or returns null if account was not loaded"}
{"code": "public static boolean isAmericanExpress(String cc){\n  int firstdig=Integer.parseInt(cc.substring(0,1));\n  int seconddig=Integer.parseInt(cc.substring(1,2));\n  if ((cc.length() == 15) && (firstdig == 3) && ((seconddig == 4) || (seconddig == 7)))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid American Express number"}
{"code": "public NewsfeedIgnoreItemQuery(VkApiClient client,UserActor actor,NewsfeedItemType type,int ownerId,int itemId){\n  super(client,\"newsfeed.ignoreItem\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  ownerId(ownerId);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void upOneLevel(){\n  if (this.currentDirectory.getParent() != null)   this.browseTo(this.currentDirectory.getParentFile());\n}\n", "nl": "This function browses up one level according to the field: currentDirectory"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public GroupsGetInvitedUsersQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public static void initManager(Context context){\n  if (mInstance == null) {\n    mInstance=new AssetsDatabaseManager(context);\n  }\n}\n", "nl": "Initialize AssetsDatabaseManager"}
{"code": "@Override public boolean checkCondition(){\n  return !alliance.hasMember(invited.getObjectId());\n}\n", "nl": "Entered player should not be in group yet"}
{"code": "public static boolean fileExists(File file){\n  return file.exists() && !file.isDirectory();\n}\n", "nl": "Check if file exists and is not a directory"}
{"code": "public CombiningCursor queryCombinings(){\n  return mHelper.queryCombinings();\n}\n", "nl": "COMBINING QUERIES"}
{"code": "public boolean isAssociated(int node){\n  return isAssociated(node,0);\n}\n", "nl": "Tests if a node is associated to this group"}
{"code": "@GET @Path(\"/logout\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Log a user out\") @Timed public Response logUserOut(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String tokenHeader){\n  authentication.logOut(tokenHeader);\n  return httpHeader.headers(NO_CONTENT).build();\n}\n", "nl": "Log out user"}
{"code": "public static int dpToPx(int dp){\n  float density=Resources.getSystem().getDisplayMetrics().density;\n  return Math.round(dp * density);\n}\n", "nl": "Convert DP to pixels using the device screen density"}
{"code": "public boolean isDrawCenterTextEnabled(){\n  return mDrawCenterText;\n}\n", "nl": "returns true if drawing the center text is enabled"}
{"code": "public boolean contains(int httpStatusCode){\n  return httpStatusCode >= lowerBound && httpStatusCode <= upperBound;\n}\n", "nl": "Checks if the passed httpStatusCode is contained in given range"}
{"code": "public void hideContent(){\n  for (int i=0; i < getChildCount(); i++) {\n    getChildAt(i).setVisibility(GONE);\n  }\n}\n", "nl": "Sets the Visibility of all children to GONE"}
{"code": "private File makeNewRMAFile(File directory,String fileName){\n  int count=0;\n  while (true) {\n    File meganFile=new File(directory,Basic.replaceFileSuffix(Basic.getFileNameWithoutZipOrGZipSuffix(fileName),(count > 0 ? \"-\" + count : \"\") + \".rma6\"));\n    if (!meganFile.exists())     return meganFile;\n    count++;\n  }\n}\n", "nl": "make a new MEGAN file name"}
{"code": "public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){\n  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;\n  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();\n  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority));\n}\n", "nl": "Creates default implementation of task executor"}
{"code": "public QRDecomposition qr(){\n  return new QRDecomposition(this);\n}\n", "nl": "QR Decomposition"}
{"code": "public static int toIntExact(final long n) throws MathRuntimeException {\n  if (n < Integer.MIN_VALUE || n > Integer.MAX_VALUE) {\n    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW);\n  }\n  return (int)n;\n}\n", "nl": "Convert a long to interger, detecting overflows"}
{"code": "public void registerHandler(String handlerName,BridgeHandler handler){\n  if (handler != null) {\n    messageHandlers.put(handlerName,handler);\n  }\n}\n", "nl": "register handler,so that javascript can call it"}
{"code": "public SM_NPC_INFO(Npc npc,Player player){\n  this._npc=npc;\n  npcTemplate=npc.getObjectTemplate();\n  npcTypeId=npc.getType(player);\n  npcId=npc.getNpcId();\n  creatorId=npc.getCreatorId();\n  masterName=npc.getMasterName();\n}\n", "nl": "Constructs new <tt>SM_NPC_INFO </tt> packet"}
{"code": "protected UsersReportQuery type(UsersReportType value){\n  return unsafeParam(\"type\",value);\n}\n", "nl": "Type of complaint"}
{"code": "public static double convertTempo(double tempo){\n  if (tempo <= 0) {\n    tempo=1;\n  }\n  return ((double)60000000l) / tempo;\n}\n", "nl": "converts<br> 1 - MPQ-Tempo to BPM tempo<br> 2 - BPM tempo to MPQ tempo<br>"}
{"code": "public void startProgress(){\n  mBasoStatus=BasoStatus.PROGRESSING;\n  toggleLayout();\n}\n", "nl": "Show progress bar and progress text below it (if any)"}
{"code": "private void drawShadows(Canvas canvas){\n  int height=(int)(3 * getItemHeight());\n  topShadow.setBounds(0,0,getWidth(),height);\n  topShadow.draw(canvas);\n  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());\n  bottomShadow.draw(canvas);\n}\n", "nl": "Draws shadows on top and bottom of control"}
{"code": "@Override public void onUIRefreshBegin(PtrFrameLayout frame){\n  mDrawable.setAlpha(255);\n  mDrawable.start();\n}\n", "nl": "perform refreshing UI"}
{"code": "public static void updatePhoneNumber(String phoneNumber,@Nullable AirMapCallback<Void> callback){\n  PilotService.updatePhoneNumber(phoneNumber,callback);\n}\n", "nl": "Update the authenticated pilot's phone number"}
{"code": "public void leftClick(int x,int y) throws InterruptedException {\n  click(InputEvent.BUTTON1_MASK,x,y);\n}\n", "nl": "Left click mouse at a point"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show what=selected;\");\n}\n", "nl": "action to be performed"}
{"code": "public void nextGroup() throws SAException {\n  releaseScan();\n  return;\n}\n", "nl": "move to next group-value"}
{"code": "@Override public void onUIRefreshPrepare(PtrFrameLayout frame){\n}\n", "nl": "prepare for loading"}
{"code": "public BlockList(){\n  this(new ConcurrentHashMap<Integer,BlockedPlayer>());\n}\n", "nl": "Constructs a new (empty) blocked list"}
{"code": "protected void dispose(Object obj){\n  if (obj instanceof PoolableThread) {\n    PoolableThread thread=(PoolableThread)obj;\n    thread.cleanStop();\n  }\n}\n", "nl": "Dispose of a resource"}
{"code": "public double cond(){\n  return s[0] / s[Math.min(m,n) - 1];\n}\n", "nl": "Two norm condition number"}
{"code": "public static void infoNotification(final String message){\n  showNotification(message,NotificationType.INFORMATION);\n}\n", "nl": "show a info Notification"}
{"code": "public SpaceConnectionEvent(Object id){\n  _id=id;\n}\n", "nl": "Creates an event with given id"}
{"code": "public PlacesCheckinQuery(VkApiClient client,UserActor actor){\n  super(client,\"places.checkin\",CheckinResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Executor createTaskDistributor(){\n  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,\"uil-pool-d-\"));\n}\n", "nl": "Creates default implementation of task distributor"}
{"code": "public boolean hasNext(){\n  return !isClosed && nextLine != null;\n}\n", "nl": "has next fastA record?"}
{"code": "public void reAddAllItems(@NonNull Collection<? extends MODEL> collection){\n  if (collection.size() == 0) {\n    return;\n  }\n  mInserts.addAll(createEmptyInsertsList(collection.size()));\n  getItems().addAll(collection);\n}\n", "nl": "Add all items without update counters"}
{"code": "public static void log(final String _msg){\n  FirebaseCrash.log(_msg);\n}\n", "nl": "Allows to easily report an event"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public CylinderArea(ZoneName zoneName,int worldId,Point2D center,float radius,float minZ,float maxZ){\n  this(zoneName,worldId,center.getX(),center.getY(),radius,minZ,maxZ);\n}\n", "nl": "Creates new cylinder with given radius"}
{"code": "public RectangleArea(ZoneName zoneName,int worldId,float minX,float minY,float maxX,float maxY,float minZ,float maxZ){\n  super(zoneName,worldId,minZ,maxZ);\n  this.minX=minX;\n  this.maxX=maxX;\n  this.minY=minY;\n  this.maxY=maxY;\n}\n", "nl": "Creates new are from given coords"}
{"code": "public static float[] unQuantize(short[] s,float fMin,float fRange){\n  int len=s.length;\n  float[] ret=new float[len];\n  for (int i=0; i < len; i++)   ret[i]=unQuantize(s[i],fMin,fRange);\n  return (ret);\n}\n", "nl": "Unquantize an array of 16bits signed shorts over a float range"}
{"code": "public void populateAll() throws GeneralException {\n  this.populateUsedEntities();\n  this.populateCalledServices();\n  this.populateTriggeredServiceEcas();\n}\n", "nl": "This must be called after creation from the ArtifactInfoFactory after this class has been put into the global Map in order to avoid recursive initialization"}
{"code": "public static ViewTapTarget forView(View view,CharSequence title){\n  return forView(view,title,null);\n}\n", "nl": "Return a tap target for the specified view"}
{"code": "public AudioDeleteQuery(VkApiClient client,UserActor actor,int audioId,int ownerId){\n  super(client,\"audio.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioId(audioId);\n  ownerId(ownerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MarketGetAlbumsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Amount of albums to return"}
{"code": "private void onDayTimeChange(){\n  WeatherService.getInstance().checkWeathersTime();\n}\n", "nl": "Perform actions upon day time change"}
{"code": "public static IntellijLintClient forBatch(@NotNull Project project,@NotNull Map<Issue,Map<File,List<ProblemData>>> problemMap,@NotNull AnalysisScope scope,@NotNull List<Issue> issues){\n  return new BatchLintClient(project,problemMap,scope,issues);\n}\n", "nl": "Creates a lint client for batch inspections"}
{"code": "public static void initOrBuild(Project project){\n  if (hadInitFreeline(project)) {\n    build(project);\n  }\n else {\n    initFree(project);\n  }\n}\n", "nl": "auto select init or run freeline project"}
{"code": "public boolean isCurrentSet(){\n  return current.get1() >= 0 && current.get1() < table.getGrid().getRowCount() && current.get2() >= 0 && current.get2() < table.getGrid().getColumnCount();\n}\n", "nl": "is the current object set?"}
{"code": "public boolean hasOption(String option){\n  return commandLine.hasOption(option);\n}\n", "nl": "Determine if an option was provided by the user via the CLI"}
{"code": "public UsersReportQuery(VkApiClient client,UserActor actor,int userId,UsersReportType type){\n  super(client,\"users.report\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n  type(type);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public final Abstraction deriveNewAbstractionOnThrow(Stmt throwStmt){\n  assert !this.exceptionThrown;\n  Abstraction abs=clone();\n  abs.currentStmt=throwStmt;\n  abs.sourceContext=null;\n  abs.exceptionThrown=true;\n  return abs;\n}\n", "nl": "Derives a new abstraction that models the current local being thrown as an exception"}
{"code": "public AdsGetOfficeUsersQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getOfficeUsers\",Utils.buildParametrizedType(List.class,Users.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void dropAllCache(){\n  cacheTypeToLRUCacheMap.clear();\n  cacheTypeToCacheMap.clear();\n}\n", "nl": "Below method will be used to clear the cache"}
{"code": "public static float pxToDp(float px){\n  float densityDpi=Resources.getSystem().getDisplayMetrics().densityDpi;\n  return pxToDp(px,densityDpi);\n}\n", "nl": "Convert pixels to DP using the device screen density"}
{"code": "public WallReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"wall.reportComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isLazy(){\n  return mLazy;\n}\n", "nl": "The view is created as needed"}
{"code": "public PacketSpecBuilder with(String id,DataType type){\n  if (types.containsKey(id))   throw new IllegalArgumentException(String.format(\"ID %s is already set to DataType %s\",id,types.get(id)));\n  types.put(id,type);\n  return this;\n}\n", "nl": "Adds a data type with the given ID to the allowed data types for this packet"}
{"code": "public int modify_file(String group_name,String appender_filename,long file_offset,byte[] file_buff,int buffer_offset,int buffer_length) throws IOException, MyException {\n  return this.do_modify_file(group_name,appender_filename,file_offset,buffer_length,new UploadBuff(file_buff,buffer_offset,buffer_length));\n}\n", "nl": "modify appender file to storage server (by file buff)"}
{"code": "public boolean hasDeviceFrame(@Nullable Device device){\n  DeviceData deviceData=getDeviceData(device);\n  if (deviceData == null) {\n    return false;\n  }\n  return !deviceData.getDescriptor().isStretchable();\n}\n", "nl": "Returns true if we have a dedicated frame image for the given device"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.KULCZYNSKI + \";\");\n}\n", "nl": "action to be performed"}
{"code": "private static String format(double value){\n  return String.format(\"%s%s\",SCALE_PREFIX,NumberFormat.getIntegerInstance().format((int)value));\n}\n", "nl": "Format a map scale into a string"}
{"code": "public static void i(String tag,String msg){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  Log.i(tag,msg);\n}\n", "nl": "Send an INFO log message"}
{"code": "public NewsfeedGetBannedQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getBanned\",GetBannedExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void validate(TestItem testItem,SaveLogRQ saveLogRQ){\n  BusinessRule.expect(testItem,Predicates.notNull()).verify(ErrorType.LOGGING_IS_NOT_ALLOWED,Suppliers.formattedSupplier(\"Logging to test item '{}' is not allowed. Probably you try to log for Launch type.\",saveLogRQ.getTestItemId()));\n  BusinessRule.expect(testItem,Preconditions.IN_PROGRESS).verify(ErrorType.REPORTING_ITEM_ALREADY_FINISHED,testItem.getId());\n  BusinessRule.expect(testItem.hasChilds(),Predicates.equalTo(Boolean.FALSE)).verify(ErrorType.LOGGING_IS_NOT_ALLOWED,Suppliers.formattedSupplier(\"Logging to item '{}' with descendants is not permitted\",testItem.getId()));\n  BusinessRule.expect(testItem.getStartTime().before(saveLogRQ.getLogTime()),Predicates.equalTo(Boolean.TRUE)).verify(ErrorType.LOGGING_IS_NOT_ALLOWED,Suppliers.formattedSupplier(\"Log has incorrect log time. Log time should be after parent item's start time.\"));\n  BusinessRule.expect(LogLevel.toLevelOrUnknown(saveLogRQ.getLevel()),Predicates.notNull()).verify(ErrorType.BAD_SAVE_LOG_REQUEST,Suppliers.formattedSupplier(\"Cannot convert '{}' to valid 'LogLevel'\",saveLogRQ.getLevel()));\n}\n", "nl": "Validates business rules related to test item of this log"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String line=Basic.getFirstLineFromFile(new File(fileName));\n  return line != null && line.split(\"\\t\").length == 2 && line.endsWith(\";\");\n}\n", "nl": "is file acceptable?"}
{"code": "protected void onDeleteSuccess(DragFlowLayout dfl,View child,Object data){\n}\n", "nl": "called when delete success"}
{"code": "protected void onBindInsertionViewHolder(RecyclerView.ViewHolder holder,int position){\n  updateInsertClickListener(position,holder.itemView);\n}\n", "nl": "Override this method to update your insertions"}
{"code": "public VideoGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return an additional \"likes\" field"}
{"code": "public static void resetContext(){\n  contexts.set(null);\n}\n", "nl": "Resets the current context"}
{"code": "public AccountSetSilenceModeQuery time(Integer value){\n  return unsafeParam(\"time\",value);\n}\n", "nl": "Set time"}
{"code": "private void openThriftWriter(String dictionaryFile) throws IOException {\n  dictionaryThriftWriter=new ThriftWriter(dictionaryFile,true);\n  dictionaryThriftWriter.open();\n}\n", "nl": "open thrift writer for writing dictionary chunk/meta object"}
{"code": "public boolean contains(int memberObjId){\n  return legionMemberById.containsKey(memberObjId);\n}\n", "nl": "Returns true if legion is in cached by id"}
{"code": "public NewsfeedGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean hasErrors(){\n  return hasErrors;\n}\n", "nl": "Returns true if there were errors"}
{"code": "public void insertGroup(Group group,int position) throws ObjectAlreadyHasException, IndexOutOfBoundsException {\n  assertNotContains(group);\n  groups.add(position,group.getName());\n}\n", "nl": "Inserts a group at a certain position on this track"}
{"code": "public static boolean isNotEmpty(CharSequence str){\n  return !isEmpty(str);\n}\n", "nl": "Check if a string is NOT empty"}
{"code": "public void remoteResourceCopied(ISVNRemoteResource source,ISVNRemoteFolder destination){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.remoteResourceCopied(source,destination);\n  }\n}\n", "nl": "signals all listener that a remote resource has been copied"}
{"code": "public boolean isSetGlobalContext(){\n  return this.globalContext != null;\n}\n", "nl": "Returns true if field globalContext is set (has been assigned a value) and false otherwise"}
{"code": "private static int nextPowerOfTwo(final int i){\n  return Integer.highestOneBit(i) << 1;\n}\n", "nl": "Find the smallest power of two greater than the input value"}
{"code": "public static Float hgToHpa(float hg){\n  return (float)(hg * 33.864);\n}\n", "nl": "Converts pressure in millimeters of mercury (Hg) to hectoPascals (hPa)"}
{"code": "public CompleteLinkClusterer(){\n}\n", "nl": "Creates a new instance of CompleteLinkClusterer"}
{"code": "void clearBridgeSecret(){\n  expectedBridgeSecret=-1;\n}\n", "nl": "Called on page transitions"}
{"code": "private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){\n  return null;\n}\n", "nl": "Compose two functions together into a single function"}
{"code": "public boolean isEmpty(){\n  return !isDefined();\n}\n", "nl": "Checks whether the value does not exist"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override protected void initViews(Bundle savedInstanceState){\n  getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n  Intent intent=getIntent();\n  url=intent.getStringExtra(\"url\");\n  name=intent.getStringExtra(\"name\");\n  photoView=(PhotoView)findViewById(R.id.img);\n  photoView.enable();\n}\n", "nl": "Initialize the view in the layout"}
{"code": "public INSECTFileRawDB(String sPrefix,String sBaseDir){\n  super(sPrefix,sBaseDir);\n}\n", "nl": "Creates a new instance of INSECTFileDB"}
{"code": "public void refreshComplate(){\n  mOnRefreshCompleteListenter.refreshComplete();\n  isLoadingData=false;\n  isLoadingMoreData=false;\n  mHeaderView.getLayoutParams().height=0;\n  getAdapter().notifyDataSetChanged();\n}\n", "nl": "after refresh ,you should call this method on the UI thread"}
{"code": "public ReadTakeEntrySpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "@Override public boolean checkCondition(){\n  return !league.hasMember(invitedAlliance.getObjectId());\n}\n", "nl": "Entered alliance should not be in league yet"}
{"code": "@Override public void onCancel(String callerTag){\n  ComponentsGetter cg=(ComponentsGetter)getActivity();\n  cg.getFileOperationsHelper().removeFiles(mTargetFiles,true);\n}\n", "nl": "Performs the removal of the local copy of the target file"}
{"code": "public boolean isContent(){\n  return state.equals(CONTENT);\n}\n", "nl": "Check if content is shown"}
{"code": "public boolean isAlreadyMatched(){\n  return false;\n}\n", "nl": "is the entry returned already matched against the searching template currently is true if the underlying scan made by CacheManager::EntriesIter"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private void addToQueue(Collection<SerialMessage> msgs,ZWaveCommandClass commandClass,int endpointId){\n  if (msgs == null) {\n    return;\n  }\n  for (  SerialMessage serialMessage : msgs) {\n    addToQueue(node.encapsulate(serialMessage,commandClass,endpointId));\n  }\n}\n", "nl": "Move all the messages in a collection to the queue and encapsulates them"}
{"code": "public CertPinManager(String path,TrustedCertificateStore store) throws PinManagerException {\n  if (path == null) {\n    throw new NullPointerException(\"path == null\");\n  }\n  pinFile=new File(path);\n  certStore=store;\n}\n", "nl": "Test only"}
{"code": "public boolean isCurrentSelected(){\n  return isCurrentSet() && selected.contains(current);\n}\n", "nl": "is the current object selected?"}
{"code": "public AsyncResultFilterEvent(AsyncResult<T> currentResult,AsyncResult<T>[] receivedResults,int totalExpectedResults){\n  this.currentResult=currentResult;\n  this.receivedResults=receivedResults;\n  this.totalExpectedResults=totalExpectedResults;\n}\n", "nl": "Constructs a new async result filter event"}
{"code": "public VideoSearchQuery filters(List<VideoSearchFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Set filters"}
{"code": "public boolean canFindAll(){\n  return true;\n}\n", "nl": "does this searcher support find all?"}
{"code": "public static Var map(Relation relation){\n  if (isHasResourceRelation(relation)) {\n    return var();\n  }\n  Var var=base(relation);\n  var=roleplayers(var,relation);\n  return var;\n}\n", "nl": "Exclude any relations that are mapped to an encountered resource"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set showAminoAcids=true;\");\n}\n", "nl": "action to be performed"}
{"code": "public static int px2dip(Context context,float pxValue){\n  if (context == null) {\n    return 0;\n  }\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(pxValue / scale + 0.5f);\n}\n", "nl": "pixel to dip"}
{"code": "public boolean isGridRowCheckboxSelected(){\n  return gridRow.getAttribute(HtmlTags.Attributes.CLASS).contains(ROW_SELECTED_CLASS);\n}\n", "nl": "Checks if checkbox in AemSidekick grid row is selected"}
{"code": "@Override public void do_after_propagation(){\n  for (  PtInsIntervalManager pim : pt_objs.values()) {\n    pim.flush();\n  }\n  new_pts=new HashMap<AllocNode,PtInsIntervalManager>();\n}\n", "nl": "Remember to clean the is_new flag"}
{"code": "public boolean isStoredProcedure(){\n  if (_expression == null)   return false;\n  String trimmed=_expression.trim();\n  return CALL.matcher(trimmed).matches();\n}\n", "nl": "Returns true if this query is a stored procedure"}
{"code": "@Override public DataRefNode findLastDataBlock(DataRefNode dataRefBlock,IndexKey searchKey){\n  BTreeNode rootNode=(BTreeNode)dataRefBlock;\n  while (!rootNode.isLeafNode()) {\n    rootNode=findLastLeafNode(searchKey,rootNode);\n  }\n  return rootNode;\n}\n", "nl": "Below method will be used to get the last data tentative block based on search key"}
{"code": "public void notifyDotAttackedObservers(Creature creature,Effect effect){\n  notifyObservers(ObserverType.DOT_ATTACKED,creature,effect);\n}\n", "nl": "notify that creature attacked by dot's hit"}
{"code": "public <T>List<T> listItems(SectionKey<T,ListSection<T>> key){\n  List<T> result=Lists.newArrayList();\n  for (  ListSection<T> section : getSections(key)) {\n    result.addAll(section.items());\n  }\n  return result;\n}\n", "nl": "Returns all values from all list sections in the project views, in order"}
{"code": "public void scroll(int itemsToScroll,int time){\n  int distance=itemsToScroll * getItemHeight() - scrollingOffset;\n  scroller.scroll(distance,time);\n}\n", "nl": "Scroll the wheel"}
{"code": "@Override public void updateStateIndex(MutationBatch batch,Experiment experiment) throws ConnectionException {\n  updateStateIndex(batch,experiment.getID(),experiment.getState() != State.DELETED ? ExperimentsKeyspace.ExperimentStateIndexKey.NOT_DELETED : ExperimentsKeyspace.ExperimentStateIndexKey.DELETED);\n}\n", "nl": "Update state index"}
{"code": "private static int snapTop(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int top,ArrayList<SnapCandidate> snapCandidates){\n  return snapVertical(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.TOP),top,snapCandidates);\n}\n", "nl": "Convenience function to snap the top position"}
{"code": "public static void emit(String event,Object... args){\n  if (instance.events.containsKey(event) && !instance.disabled.contains(event)) {\n    instance.events.get(event).run(args);\n    log(event + \" emitted\",args);\n  }\n else   log(event + \" not exist\");\n}\n", "nl": "Emit event"}
{"code": "public AirMapClient(final String apiKey,final String token){\n  this.authToken=token;\n  this.xApiKey=apiKey;\n  clearAndResetHeaders();\n}\n", "nl": "Initialize the client"}
{"code": "public void normal(){\n  mHintView.setVisibility(View.VISIBLE);\n  mProgressBar.setVisibility(View.GONE);\n}\n", "nl": "normal status"}
{"code": "public Builder addColumnsLong(String... names){\n  for (  String s : names)   addColumnLong(s);\n  return this;\n}\n", "nl": "Add multiple long columns, with no restrictions on the allowable values"}
{"code": "public static int[] convertToIntArray(long[] longArray){\n  int[] intArray=new int[longArray.length];\n  for (int i=0; i < longArray.length; i++) {\n    intArray[i]=(int)longArray[i];\n  }\n  return intArray;\n}\n", "nl": "covert the long[] to int[]"}
{"code": "@Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){\n  return cacheOnDisk(cacheOnDisk);\n}\n", "nl": "Sets whether loaded image will be cached on disk"}
{"code": "public NotificationsGetQuery filters(NotificationsGetFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Type of notifications to return"}
{"code": "public SM_QUEST_ACTION(int questId,QuestStatus status,int step){\n  this.action=2;\n  this.questId=questId;\n  this.status=status.value();\n  this.step=step;\n}\n", "nl": "Quest Steps/Finish (2)"}
{"code": "public void encoding(){\n  if (stripe_unit_size % block_nbr != 0) {\n    throw new RuntimeException(\" Cannot  striping. wrong DATA_LENGTH!\");\n  }\n  STAR_encoding_row();\n  STAR_encoding_diag1();\n  STAR_encoding_diag2();\n}\n", "nl": "entry function for encoding"}
{"code": "public static double combination(double n,double r){\n  double nFac=MathUtils.factorial(n);\n  double rFac=MathUtils.factorial(r);\n  double nMinusRFac=MathUtils.factorial((n - r));\n  return nFac / (rFac * nMinusRFac);\n}\n", "nl": "This returns the combination of n choose r"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public AppsGetQuery appIds(List<String> value){\n  return unsafeParam(\"app_ids\",value);\n}\n", "nl": "List of application ID"}
{"code": "private static int snapHeight(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int height,ArrayList<SnapCandidate> snapCandidates){\n  int bottomPosition=widget.getDrawY() + height;\n  bottomPosition=snapVertical(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.BOTTOM),bottomPosition,snapCandidates);\n  height=bottomPosition - widget.getDrawY();\n  return height;\n}\n", "nl": "Convenience function to snap the height"}
{"code": "public VideoSaveQuery wallpost(Boolean value){\n  return unsafeParam(\"wallpost\",value);\n}\n", "nl": "Post the saved video on a user's wall"}
{"code": "protected AccountGetAppPermissionsQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public static final void emoteStartDancing3(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,142,0));\n}\n", "nl": "Npc starts dancing iu 3"}
{"code": "public static double lineDistance(Vec3 lineVec,Vec3 point){\n  double mag=lineVec.lengthVector();\n  Vec3 nPoint=scale(point,-1);\n  return lineVec.crossProduct(nPoint).lengthVector() / mag;\n}\n", "nl": "Return the distance between point and the line defined as passing through the origin and lineVec"}
{"code": "public static long elapsedMilliseconds(Date dateStart,Date dateEnd){\n  return dateEnd.getTime() - dateStart.getTime();\n}\n", "nl": "elapsedMinuted Get the elapsed minutes between two dates"}
{"code": "public int size(){\nsynchronized (contexts) {\n    return contexts.size();\n  }\n}\n", "nl": "Gets the number of key-value context pairs in the set"}
{"code": "@After public void tearDown() throws Exception {\n  dictionaryChunksWrapper=null;\n  expectedData=null;\n  dictionaryChuncks=null;\n}\n", "nl": "release resources"}
{"code": "public boolean isLoadMoreEnabled(){\n  return mLoadMoreEnabled;\n}\n", "nl": "is load more function is enabled"}
{"code": "public Builder cacheOnDisk(boolean cacheOnDisk){\n  this.cacheOnDisk=cacheOnDisk;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached on disk"}
{"code": "@Override public ListenableFuture<LeaseKeepAliveResponse> keepAliveOnce(long leaseId){\n  StreamObserver<LeaseKeepAliveRequest> requestObserver=this.leaseStub.leaseKeepAlive(keepAliveResponseStreamObserver);\n  requestObserver.onNext(newKeepAliveRequest(leaseId));\n  requestObserver.onCompleted();\n  throw new UnsupportedOperationException();\n}\n", "nl": "keep alive one lease only once"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public final void debug(final Object o,final Throwable t){\n  log(Level.DEBUG,o,t);\n}\n", "nl": "This method logs the DEBUG message"}
{"code": "public List<Integer> showDialog(Director defaultDir){\n  setupDialog(defaultDir);\n  getContentPane().validate();\n  setSize(getPreferredSize());\n  setVisible(true);\n  return result;\n}\n", "nl": "show the dialog and choose the projects"}
{"code": "public static ExpectedCondition<Boolean> pageUrlIs(final String url){\n  return null;\n}\n", "nl": "Check if provided url and current url are the same"}
{"code": "public boolean indicateDirtyRead(ITemplateHolder template){\n  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());\n}\n", "nl": "given an entry and a template, return true if dirty-read should be performed"}
{"code": "protected void writeLSD() throws IOException {\n  writeShort(width);\n  writeShort(height);\n  out.write((0x80 | 0x70 | 0x00| palSize));\n  out.write(0);\n  out.write(0);\n}\n", "nl": "Writes Logical Screen Descriptor"}
{"code": "private boolean isValidItemIndex(int index){\n  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());\n}\n", "nl": "Checks whether intem index is valid"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public Object clone(){\n  Split result=new Split();\n  result.copy(this);\n  return result;\n}\n", "nl": "clone this split"}
{"code": "public MarketReorderItemsQuery reorderItems(UserActor actor,int ownerId,int itemId){\n  return new MarketReorderItemsQuery(getClient(),actor,ownerId,itemId);\n}\n", "nl": "Changes item place in a collection"}
{"code": "public PhotosDeleteQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public SecureSetCounterQuery counters(String... value){\n  return unsafeParam(\"counters\",value);\n}\n", "nl": "Set counters"}
{"code": "public boolean isFederatedNamespace(){\n  return this.isFederatedNamespace;\n}\n", "nl": "Whether the namespace is federated namespace"}
{"code": "public MarketSearchQuery q(String value){\n  return unsafeParam(\"q\",value);\n}\n", "nl": "Search query, for example \"pink slippers\""}
{"code": "private static byte charToByte(char c){\n  return (byte)\"0123456789ABCDEF\".indexOf(c);\n}\n", "nl": "Convert char to byte"}
{"code": "public CompleteLinkClusterer(){\n}\n", "nl": "Creates a new instance of CompleteLinkClusterer"}
{"code": "public LUDecomposition lu(){\n  return new LUDecomposition(this);\n}\n", "nl": "LU Decomposition"}
{"code": "public boolean isNavBarTintEnabled(){\n  return mNavBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system navigation bar?"}
{"code": "private void resetPersistenceManager(){\n  persistenceManager=null;\n}\n", "nl": "Removes the reference to the PersistenceManager object"}
{"code": "public boolean contains(T obj){\n  throw new RuntimeException(\"ConcurrentSegmentedStoredList::contains not supported\");\n}\n", "nl": "is this object contained in the SL ?"}
{"code": "public LikesGetListQueryWithExtended(VkApiClient client,LikesType type){\n  super(client,\"likes.getList\",GetListExtendedResponse.class);\n  type(type);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean putFloat(Context context,String key,float value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putFloat(key,value);\n  return editor.commit();\n}\n", "nl": "put float preferences"}
{"code": "public Vector2f interpolate(Vector2f finalVec,float changeAmnt){\n  this.x=(1 - changeAmnt) * this.x + changeAmnt * finalVec.x;\n  this.y=(1 - changeAmnt) * this.y + changeAmnt * finalVec.y;\n  return this;\n}\n", "nl": "Sets this vector to the interpolation by changeAmnt from this to the finalVec this=(1-changeAmnt)*this + changeAmnt * finalVec"}
{"code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n", "nl": "Outputs a debug message if debugging is turned on"}
{"code": "public Array<T> values(){\n  Array<T> out=new JavaArray<>();\n  for (  T value : internalMap.values()) {\n    out.push(value);\n  }\n  return out;\n}\n", "nl": "Returns the values defined in the map"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"show window=message;\");\n  execute(\"list assignmentsToLevels;\");\n}\n", "nl": "action to be performed"}
{"code": "public GroupsIsMemberQuery(VkApiClient client,UserActor actor,String groupId){\n  super(client,\"groups.isMember\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void endAction(MotionEvent me){\n  OnChartGestureListener l=mChart.getOnChartGestureListener();\n  if (l != null) {\n    l.onChartGestureEnd(me,mLastGesture);\n  }\n}\n", "nl": "Calls the OnChartGestureListener to do the end callback"}
{"code": "public SecureSetUserLevelQuery levels(List<String> value){\n  return unsafeParam(\"levels\",value);\n}\n", "nl": "Set levels"}
{"code": "private void drawFireworks(final Canvas canvas){\n  if (!mIsAnimationStarted || mRocketAnimationPercent < 0.95f) {\n    return;\n  }\n  mFireworksDrawer.draw(canvas,canvas.getWidth(),(int)getCurveYStart());\n}\n", "nl": "Fireworks *"}
{"code": "public Chatlog(String link,String user,Date creation){\n  this.link=link;\n  this.user=user;\n  this.creation=creation;\n}\n", "nl": "Constructs a new chatlog with all required information"}
{"code": "protected void init(Visualization vis,String group,Schema schema){\n  setVisualization(vis);\n  setGroup(group);\n  addColumns(schema);\n  if (canGetBoolean(VisualItem.VISIBLE))   index(VisualItem.VISIBLE);\n  if (canGetBoolean(VisualItem.STARTVISIBLE))   index(VisualItem.STARTVISIBLE);\n  if (canGetBoolean(VisualItem.VALIDATED))   index(VisualItem.VALIDATED);\n}\n", "nl": "Initialize this VisualTable"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "public AudioGetCountQuery(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"audio.getCount\",Integer.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static NBTTagList readNBTList(PacketBuffer buf){\n  NBTTagList value=new NBTTagList();\n  for (int i=0; i < buf.readInt(); i++) {\n    value.set(i,buf.readNBTTagCompoundFromBuffer());\n  }\n  return value;\n}\n", "nl": "Reads an NBT list from the buffer"}
{"code": "private void populateConnections(final List<ConfiguredConnectionGroupDetails> groups){\n  rootItem.getChildren().clear();\n  rootItemProperties.getChildren().clear();\n  final List<ConnectionTreeItemProperties> treeItemGroupProperties=new ArrayList<>();\n  final List<ConnectionTreeItemProperties> treeItemConnectionProperties=new ArrayList<>();\n  buildTree(rootItemProperties,treeItemGroupProperties,treeItemConnectionProperties);\n  addToTree(rootItem,rootItemProperties);\n}\n", "nl": "TreeItem contains ConnectionTreeItemProperties ConnectionTreeItemProperties contains either  ConfiguredConnectionDetails ConfiguredConnectionGroupDetails ConfiguredConnectionDetails extends the connection object ConfiguredConnectionGroupDetails extends the group object"}
{"code": "public static String extractCSVOutputLineFreq(String csvOut){\n  String tokens[]=csvOut.split(\",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\",-1);\n  return tokens[0];\n}\n", "nl": "Used for testing -- input is a full csv line: <freq,domain,ip,ts,opt:generic>"}
{"code": "public void hideOverlappingContainer(){\n  mFrameLayoutOverlappingViewContainer.setVisibility(GONE);\n}\n", "nl": "Hide overlapping container, all overlapping view will be hidden"}
{"code": "protected PhotosGetQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return additional \"likes\", \"comments\", and \"tags\" fields"}
{"code": "public Configurator fromUri(Uri uri){\n  return new Configurator(uri.toString(),false);\n}\n", "nl": "Use Uri as the pdf source, for use with content provider"}
{"code": "public VideoGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return an additional \"likes\" field"}
{"code": "public PagesSaveAccessQuery view(PagesSaveAccess value){\n  return unsafeParam(\"view\",value);\n}\n", "nl": "Who can view the wiki page"}
{"code": "final public void println(Object o){\n  print(o + \"<br>\");\n}\n", "nl": "println the object to end-user"}
{"code": "private void resetTimer(){\n  if (mTimer != null) {\n    mTimer.cancel();\n    mTimer.purge();\n    mTimer=null;\n    times_current=0;\n  }\n}\n", "nl": "reset timer"}
{"code": "public void removeClickingListener(OnWheelClickedListener listener){\n  clickingListeners.remove(listener);\n}\n", "nl": "Removes wheel clicking listener"}
{"code": "public String[] upload_appender_file(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE,group_name,null,null,file_ext_name,file_buff.length,new UploadBuff(file_buff,0,file_buff.length),meta_list);\n}\n", "nl": "upload appender file to storage server (by file buff)"}
{"code": "public boolean isDrawSliceTextEnabled(){\n  return mDrawXLabels;\n}\n", "nl": "returns true if drawing x-values is enabled, false if not"}
{"code": "public static void showSoftKeyboard(Context context,View view){\n  view.setFocusable(true);\n  view.setFocusableInTouchMode(true);\n  view.requestFocus();\n  InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\n  inputManager.showSoftInput(view,0);\n}\n", "nl": "Show soft keyboard"}
{"code": "protected void notifyDataChangedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onChanged();\n    }\n  }\n}\n", "nl": "Notifies observers about data changing"}
{"code": "private void validate(String value){\n  for (int i=0; i < validators.size(); i++) {\n    if (!validators.get(i).validate(value)) {\n      onValidationErrorListener.onError(input,inputParent,validators.get(i).getValidationMessage());\n    }\n  }\n}\n", "nl": "Validate the input of the text view validate all validators"}
{"code": "public ServiceTest(String caseName,Element mainElement){\n  super(caseName);\n  this.serviceName=mainElement.getAttribute(\"service-name\");\n}\n", "nl": "Tests of Service"}
{"code": "public void startModification() throws IOException {\n  io=new InputOutputReaderWriter(new File(getFileName()),READ_WRITE);\n  getClassificationsFooter().clear();\n  io.seek(getFileFooter().getClassificationsStart());\n  io.setLength(io.getPosition());\n}\n", "nl": "start the modification process"}
{"code": "public DocumentNGramSymWinDistroGraph(){\n  InitGraphs();\n}\n", "nl": "Creates a new instance of DocumentNGramSymWinDistroGraph"}
{"code": "public GossipDataMessage findPerNodeData(String nodeId,String key){\n  return getGossipManager().findPerNodeGossipData(nodeId,key);\n}\n", "nl": "Retrieve per-node gossip data by key"}
{"code": "public synchronized void resetTime(){\n}\n", "nl": "Resets the audio clock"}
{"code": "private MarkerOptions searchForId(String id){\n  for (  MarkerOptions options : markers) {\n    if (options.getTitle().equals(id)) {\n      return options;\n    }\n  }\n  return null;\n}\n", "nl": "Search for an annotation"}
{"code": "public static String dateToStringWithTime(Date date){\n  return dateToString(date,DATETIME_PATTERN);\n}\n", "nl": "yyyy-MM-dd hh:mm:ss"}
{"code": "public boolean isApplicable(){\n  return (getDoc().getMeganFile().isRMA2File() || getDoc().getMeganFile().isRMA3File()) || (getDoc().getSampleNames().size() > 0 && getDoc().getSampleAttributeTable().get(getDoc().getSampleNames().get(0),SampleAttributeTable.DescriptionAttribute) != null);\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public IDBPersistenceException(final String msg){\n  super(msg);\n}\n", "nl": "Creates an exception with a detailed message"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isSetMethodQpsMap(){\n  return this.methodQpsMap != null;\n}\n", "nl": "Returns true if field methodQpsMap is set (has been assigned a value) and false otherwise"}
{"code": "public void deriveValues(@NotNull ScopedStateStore stateStore,@NotNull Set<ScopedStateStore.Key> modified){\n  myMinSdkCombobox.deriveValues(stateStore,modified);\n}\n", "nl": "Fill in the values that can be derived from the selected min SDK level:"}
{"code": "public static int binaryLogUp(int n_){\n  int k=0;\n  while ((1 << k) < n_)   k++;\n  return k;\n}\n", "nl": "Binary log: finds the smallest power k such that 2^k>=n"}
{"code": "public int addFile(File file,Long fileSize){\n  int fileId=getFileId(file);\n  if (fileSize != null)   fileSizes.set(fileId,fileSize);\n  return fileId;\n}\n", "nl": "add a file, if not already present and explicitly set its size"}
{"code": "@Override public Group apply(String name){\n  return new Group(name,plugin);\n}\n", "nl": "Makes a new group object"}
{"code": "@Nullable public Variant findVariantByName(@NotNull String variantName){\n  return myVariantsByName.get(variantName);\n}\n", "nl": "Returns the specified variant"}
{"code": "public void addCategoryLimitations(boolean include,Category... categories){\n  String[] categoryVelocityVarNames=new String[categories.length];\n  for (int i=0; i < categories.length; i++) {\n    categoryVelocityVarNames[i]=categories[i].getCategoryVelocityVarName();\n  }\n  addCategoryLimitations(include,categoryVelocityVarNames);\n}\n", "nl": "Limit the results of the query to certain categories"}
{"code": "public String addSection(Section section){\n  String tag=UUID.randomUUID().toString();\n  addSection(tag,section);\n  return tag;\n}\n", "nl": "Add a section to this recyclerview with a random tag;"}
{"code": "private ZKLogMetadataForReader(URI uri,String logName,String logIdentifier){\n  super(uri,logName,logIdentifier);\n}\n", "nl": "metadata representation of a log"}
{"code": "public static void recordAppStart(){\n  TcStatSdk.getInstance(context).recordAppStart();\n}\n", "nl": "record App Start"}
{"code": "public void addFooter(@LayoutRes int layoutId){\n  addFooter(layoutId,null);\n}\n", "nl": "Add footer after all items and before TYPE_ABSOLUTE_FOOTER"}
{"code": "public void putLong(String key,long value){\n  checkForNullKey(key);\n  preferences.edit().putLong(key,value).apply();\n}\n", "nl": "Put long value into SharedPreferences with 'key' and save"}
{"code": "public void logStatistics(){\n  for (  QueryStatistic statistic : queryStatistics) {\n    LOGGER.statistic(statistic.getStatistics(queryIWthTask));\n  }\n}\n", "nl": "Below method will be used to log the statistic"}
{"code": "protected void resetXML11() throws XNIException {\n  int count=fXML11Components.size();\n  for (int i=0; i < count; i++) {\n    XMLComponent c=(XMLComponent)fXML11Components.get(i);\n    c.reset(this);\n  }\n}\n", "nl": "reset all components before parsing and namespace context"}
{"code": "private final boolean isItemFilledScreen(){\n  return (getLastVisiblePosition() - getFirstVisiblePosition() + 1) < getCount();\n}\n", "nl": "Gets the visible height of load footer"}
{"code": "public boolean splitsTaxa(BitSet taxa){\n  return A.intersects(taxa) && B.intersects(taxa);\n}\n", "nl": "does the split split the given taxa?"}
{"code": "public AbstractSpaceActionInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "protected Record(ModelRecord modelRecord){\n  if (modelRecord == null)   throw new IllegalArgumentException(\"Cannont create a Record with a null modelRecord parameter\");\n  this.recordName=modelRecord.name;\n  this.modelRecord=modelRecord;\n  this.fields=new HashMap<String,Object>();\n}\n", "nl": "Creates new Record"}
{"code": "public IObjectInfo<T> add(T subject){\n  return addImpl(subject,true);\n}\n", "nl": "store an element"}
{"code": "public byte[] array(){\n  return _tempBuffer;\n}\n", "nl": "Must be called first when the resource is acquired only after ensureCapacity was called"}
{"code": "public AdsGetSuggestionsQueryWithSchools ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n", "nl": "Set ids"}
{"code": "public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){\n}\n", "nl": "Returns when request failed"}
{"code": "public UnregisterReplicationNotificationRequestInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public AccountSetSilenceModeQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id"}
{"code": "public static String computeShannonWeaver(ViewerBase viewer,ProgressListener progressListener) throws IOException, CanceledException {\n  if (viewer instanceof MainViewer)   return toString(computeShannonWeaver((MainViewer)viewer,progressListener));\n else   if (viewer instanceof ClassificationViewer)   return toString(computeShannonWeaver((ClassificationViewer)viewer,progressListener));\n else   return null;\n}\n", "nl": "compute the Shannon-Weaver diversity index in bits"}
{"code": "private int dp2px(float dpValue){\n  final float scale=getContext().getResources().getDisplayMetrics().density;\n  return (int)(dpValue * scale + 0.5f);\n}\n", "nl": "dp to px"}
{"code": "public static boolean writeJson(HttpServletResponse resp,Object msg){\n  return write(resp,\"application/json\",msg);\n}\n", "nl": "write json data to response"}
{"code": "private long wakeupTime(){\n  if (leases.isEmpty())   return Long.MAX_VALUE;\n  return leases.lastKey().actualRenew;\n}\n", "nl": "Return the soonest actual renewal time"}
{"code": "public WallReportPostQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Reason for the complaint"}
{"code": "public static Circle circle(Point center,double radius){\n  return new CircleImpl(center.getX(),center.getY(),radius);\n}\n", "nl": "Creates a Circle instance"}
{"code": "@Override public int next(){\n  moveToNext();\n  return matchesInResult;\n}\n", "nl": "returns the next number of matches found"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static HttpResponse execute(HttpMethod method,String targetUrl) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {\n  return execute(method,targetUrl,null,null);\n}\n", "nl": "Execute an HTTP request without body"}
{"code": "private boolean isIndexExisting(String index){\n  ActionFuture<IndicesExistsResponse> response=client.admin().indices().exists(new IndicesExistsRequest(index));\n  return response.actionGet(1000L).isExists();\n}\n", "nl": "Query the cluster in order to check, whether the given index is  existing"}
{"code": "@NotNull public static String dominantEmotion(@NotNull Emotion emotion){\n  Map<Emotion.EmotionScore,Double> scores=emotion.scores.scores();\n  Emotion.EmotionScore key=scores.entrySet().stream().max(null).get().getKey();\n  return StringUtils.capitalize(key.name());\n}\n", "nl": "Returns the most dominate emotion"}
{"code": "public CylinderArea(ZoneName zoneName,int worldId,float x,float y,float radius,float minZ,float maxZ){\n  super(zoneName,worldId,minZ,maxZ);\n  this.centerX=x;\n  this.centerY=y;\n  this.radius=radius;\n}\n", "nl": "Creates new cylider with given radius"}
{"code": "public void shutdownAll(){\n  ChannelGroupFuture future=channelGroup.close();\n  future.awaitUninterruptibly();\n  loginToClientChannelFactory.releaseExternalResources();\n  nioServer.shutdown();\n}\n", "nl": "Shutdown server"}
{"code": "public MediaFormat(){\n  mMap=new HashMap<String,Object>();\n}\n", "nl": "Creates an empty MediaFormat"}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state"}
{"code": "public void callHandler(String handlerName,String data,CallBackFunction callBack){\n  doSend(handlerName,data,callBack);\n}\n", "nl": "call javascript registered handler"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0,0.0282475249,0.0847425747,0.139825248255,0.167790297906,0.163595540458,0.137420253985,0.103065190489,0.070673273478,0.0450542118422,0.0270325271053,0.0154085404500,0.0084046584273};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public void onLoad(boolean viewRecreated){\n}\n", "nl": "This method is called, when view is ready"}
{"code": "public Builder clearName(){\n  name_=getDefaultInstance().getName();\n  onChanged();\n  return this;\n}\n", "nl": "<code>optional string name = 1;</code>"}
{"code": "public BoardAddTopicQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n", "nl": "For a community: true - to post the topic as by the community false - to post the topic as by the user (default)"}
{"code": "public Iterable<T> asIterable(){\n  return internalArray;\n}\n", "nl": "Java Compatibility"}
{"code": "public void nextGroup() throws SAException {\n  if (_curGroupValue != null) {\n    if (_alreadyUsedGroupValues == null)     _alreadyUsedGroupValues=new HashSet<Object>();\n    _alreadyUsedGroupValues.add(_curGroupValue);\n    _curGroupValue=null;\n  }\n}\n", "nl": "move to next group-value"}
{"code": "public static boolean isConnectedFast(Context context){\n  NetworkInfo info=Connectivity.getNetworkInfo(context);\n  return (info != null && info.isConnected() && Connectivity.isConnectionFast(info.getType(),info.getSubtype()));\n}\n", "nl": "Check if there is fast connectivity"}
{"code": "private static void createDataSchema(boolean hdfs) throws IOException {\n  createDataSchema(null,hdfs);\n}\n", "nl": "Create the test data schema file"}
{"code": "public static void markToken(JTextComponent pane,Token token,SimpleMarker marker){\n  markText(pane,token.start,token.end(),marker);\n}\n", "nl": "add highlights for the given Token on the given pane"}
{"code": "public NullAudioPlayer(){\n}\n", "nl": "Constructs a NullAudioPlayer"}
{"code": "@Override public boolean authenticate(String username,String password,boolean isServiceAuth) throws AuthenticatorException {\n  Debug.logInfo(this.getClass().getName() + \" Authenticator authenticate() -- returning false\",module);\n  return true;\n}\n", "nl": "Method to authenticate a user"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCache.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "public Black2RedGradient(int maxCount){\n  this.maxCount=maxCount;\n  factor=maxCount / Math.log(maxCount);\n}\n", "nl": "setup the green gradient"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n", "nl": "Outputs a debug message if debugging is turned on"}
{"code": "public static void sendMessage(Player player,String msg){\n  sendPacket(player,new SM_MESSAGE(0,null,msg,ChatType.GOLDEN_YELLOW));\n}\n", "nl": "Global message sending"}
{"code": "public void release(final UnsummonType unsummonType){\n  SummonsService.release(getOwner(),unsummonType,isAttacked);\n}\n", "nl": "Release summon"}
{"code": "public static double lerp(double start,double end,double progress){\n  return start - progress * (start - end);\n}\n", "nl": "Linearly interpolates a double value from start to end for given progress"}
{"code": "public AppsGetLeaderboardQuery(VkApiClient client,UserActor actor,AppsGetLeaderboardType type){\n  super(client,\"apps.getLeaderboard\",GetLeaderboardResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@RequestMapping(value=\"/account/reset_password/finish\",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<String> finishPasswordReset(@RequestBody KeyAndPasswordDTO keyAndPassword){\n  if (!checkPasswordLength(keyAndPassword.getNewPassword())) {\n    return new ResponseEntity<>(\"Incorrect password\",HttpStatus.BAD_REQUEST);\n  }\n  return userService.completePasswordReset(keyAndPassword.getNewPassword(),keyAndPassword.getKey()).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));\n}\n", "nl": "POST   /account/reset_password/finish : Finish to reset the password of the user"}
{"code": "private void joinRoom(final Invitation invitation){\n  controller=createController();\n  Games.RealTimeMultiplayer.join(client,RoomConfig.builder(controller).setRoomStatusUpdateListener(controller).setMessageReceivedListener(controller).setVariant(invitation.getVariant()).setInvitationIdToAccept(invitation.getInvitationId()).build());\n}\n", "nl": "on main thread"}
{"code": "private void onDisconnect(){\n  onDisconnect(true);\n}\n", "nl": "This will take care of all work that needs to be done when disconnected"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "public void showTextOnly(){\n  isTextOnlyMode=true;\n}\n", "nl": "Show only text in item"}
{"code": "@Override public void initiateSpeculativeRequest(final ScheduledExecutorService scheduler,final SpeculativeRequestExecutor requestExecutor){\n  issueSpeculativeRequest(scheduler,requestExecutor);\n}\n", "nl": "Initialize the speculative request execution policy"}
{"code": "public SourceDataTag(final Long id,final String name,final boolean control){\n  this(id,name,control,DataTagConstants.MODE_OPERATIONAL,null,null);\n}\n", "nl": "Creates a new SourceDataTag"}
{"code": "public static byte[] translate(byte[] sequence,byte[] alphabet){\n  return translate(sequence,alphabet,0,sequence.length);\n}\n", "nl": "decode sequence to nucleotides or amino acids"}
{"code": "public void removeClickingListener(OnWheelClickedListener listener){\n  clickingListeners.remove(listener);\n}\n", "nl": "Removes wheel clicking listener"}
{"code": "public CartPaymentInfo addPaymentAmount(String id,BigDecimal amount,boolean isSingleUse){\n  return this.addPaymentAmount(id,amount,null,null,isSingleUse,false,true);\n}\n", "nl": "adds a payment method/payment method type"}
{"code": "public void confirm(){\n  okButton.click();\n  verifyIsHidden();\n}\n", "nl": "Method used to confirm changes in the dialog"}
{"code": "public void addClassification(String name,int size,long dumpStart,long dumpEnd,long indexStart,long indexEnd){\n  classificationNames=extend(classificationNames,name);\n  classificationSizes=extend(classificationSizes,size);\n  classificationDumpSectionStart=extend(classificationDumpSectionStart,dumpStart);\n  classificationDumpSectionEnd=extend(classificationDumpSectionEnd,dumpEnd);\n  classificationIndexSectionStart=extend(classificationIndexSectionStart,indexStart);\n  classificationIndexSectionEnd=extend(classificationIndexSectionEnd,indexEnd);\n}\n", "nl": "add a new classification"}
{"code": "public FriendList(Player player){\n  this(player,new ConcurrentLinkedQueue<Friend>());\n}\n", "nl": "Constructs an empty friend list for the given player"}
{"code": "public TournamentPlayer(CKPlayerFactory player,int groupId){\n  this.player=player;\n  this.groupId=groupId;\n  rank=0;\n}\n", "nl": "Create a new tournament player with rank 0;"}
{"code": "private static byte charToByte(char c){\n  return (byte)\"0123456789ABCDEF\".indexOf(c);\n}\n", "nl": "Convert char to byte "}
{"code": "public void printEntrypoints(){\n  if (this.entrypoints == null)   System.out.println(\"Entry points not initialized\");\n else {\n    System.out.println(\"Classes containing entry points:\");\n    for (    String className : entrypoints)     System.out.println(\"\\t\" + className);\n    System.out.println(\"End of Entrypoints\");\n  }\n}\n", "nl": "Prints list of classes containing entry points to stdout"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed"}
{"code": "@POST @Path(\"/login\") @Consumes(APPLICATION_FORM_URLENCODED) @Produces(APPLICATION_JSON) @ApiOperation(value=\"Log a user in\") @Timed public Response logUserIn(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader,@FormParam(\"grant_type\") @DefaultValue(\"client_credentials\") @ApiParam(value=\"please enter client_credentials in this field\") final String grantType){\n  if (!\"client_credentials\".equals(grantType)) {\n    throw new AuthenticationException(\"error, grant_type was not provided\");\n  }\n  return httpHeader.headers().entity(authentication.logIn(authorizationHeader)).build();\n}\n", "nl": "Log in user"}
{"code": "public PhotosGetByIdQuery(VkApiClient client,String... photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,Photo.class));\n  photos(photos);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public SimpleTextDocument(){\n  Graph=new DocumentWordGraph();\n  Histogram=new DocumentWordHistogram();\n}\n", "nl": "Creates a new instance of INSECTWordDocument"}
{"code": "public static void enable(String event){\n  instance.disabled.remove(event);\n  log(event + \" enabled\");\n}\n", "nl": "Enable event (if disabled)"}
{"code": "private static int changeIndexSign(final int index){\n  return -index - 1;\n}\n", "nl": "Change the index sign"}
{"code": "public MarketDeleteQuery delete(UserActor actor,int ownerId,int itemId){\n  return new MarketDeleteQuery(getClient(),actor,ownerId,itemId);\n}\n", "nl": "Deletes an item"}
{"code": "public void reset(){\n  if (mBitmap != null)   mBitmap.recycle();\n}\n", "nl": "Release Memory"}
{"code": "public PhotosCreateAlbumQuery privacyComment(String... value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment"}
{"code": "public synchronized static void ensureSecurityManager(@SuppressWarnings(\"UnusedParameters\") String[] args){\n  SecurityPolicyLoader.load(SystemBoot.class,\"policy.all\");\n  System.setSecurityManager(new RMISecurityManager());\n}\n", "nl": "Utility routine that sets a security manager (if one isn't already present) and the security policy"}
{"code": "public void removeClickingListener(OnWheelClickedListener listener){\n  clickingListeners.remove(listener);\n}\n", "nl": "Removes wheel clicking listener"}
{"code": "@Override public boolean equals(Object o){\n  GameTime other=(GameTime)o;\n  return this.getTime() == other.getTime();\n}\n", "nl": "Compare two game times"}
{"code": "private void onTimeChanged(){\n  sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);\n  if (mOnTimeChangedListener != null) {\n    mOnTimeChangedListener.onTimeChanged(this,getCurrentHour(),getCurrentMinute());\n  }\n}\n", "nl": "Propagate the time change"}
{"code": "public final boolean isOverridingNightMode(){\n  return (myOverride & CFG_NIGHT_MODE) != 0;\n}\n", "nl": "Returns true if the night mode is overridden"}
{"code": "public static AlarmValueImpl createAlarmValue(final Alarm alarm){\n  AlarmValueImpl alarmValueImpl=null;\n  if (alarm != null) {\n    alarmValueImpl=new AlarmValueImpl(alarm.getId(),alarm.getFaultCode(),alarm.getFaultMember(),alarm.getFaultFamily(),alarm.getInfo(),alarm.getTagId(),alarm.getTimestamp(),alarm.isActive());\n  }\n  return alarmValueImpl;\n}\n", "nl": "Creates an <code>AlarmValueImpl</code> object for the given parameters"}
{"code": "private static void read(GigaSpace space,Phrase template){\n  Phrase[] results=space.readMultiple(template);\n  System.out.println(\"read - \" + Arrays.toString(results));\n}\n", "nl": "Read a matching entity from the data-grid Template matching is done by field equality or any if field is null"}
{"code": "@Override public List<String> searchRoleByUserId(String userId){\n  return sessionTemplate.selectList(NAMESPACE + \".searchRoleByUserId\",userId);\n}\n", "nl": "Search user role by user id"}
{"code": "public static final boolean isXMLName(String s,boolean xml11Version){\n  if (s == null) {\n    return false;\n  }\n  if (!xml11Version)   return XMLChar.isValidName(s);\n else   return XML11Char.isXML11ValidName(s);\n}\n", "nl": "Check the string against XML's definition of acceptable names for elements and attributes and so on using the XMLCharacterProperties utility class"}
{"code": "public void stopMoving(){\n  Creature owner=getOwner();\n  World.getInstance().updatePosition(owner,owner.getX(),owner.getY(),owner.getZ(),owner.getHeading());\n  PacketSendUtility.broadcastPacket(owner,new SM_MOVE(owner));\n}\n", "nl": "Stops movements"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"hide what=unSelected;\");\n}\n", "nl": "action to be performed"}
{"code": "public void nextRow() throws SQLException {\n  currentRow.next();\n}\n", "nl": "Move reference within current result set up by one"}
{"code": "public Builder add(String property){\n  properties.add(property);\n  return this;\n}\n", "nl": "Add property you need"}
{"code": "public boolean useAppsecretProof(){\n  return mUseAppsecretProof;\n}\n", "nl": "Return <code>True</code> if appsecret_proof should be passed with graph api calls, otherwise return <code>False</code>"}
{"code": "public NotificationsGetQuery startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n", "nl": "Set start from"}
{"code": "@Deployment public void testSimpleAutomaticSubProcess(){\n  ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"simpleSubProcessAutomatic\");\n  assertTrue(pi.isEnded());\n  assertProcessEnded(pi.getId());\n}\n", "nl": "Same test case as before, but now with all automatic steps"}
{"code": "public MediaFormat(){\n  mMap=new HashMap<String,Object>();\n}\n", "nl": "Creates an empty MediaFormat"}
{"code": "public NotesRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"notes.restoreComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private Locale toLocale(String str){\n  if (str == null)   return null;\n  String[] split=str.split(\"_\");\n  if (split.length == 0)   return new Locale(\"\");\n else   if (split.length == 1)   return new Locale(split[0]);\n else   if (split.length == 2)   return new Locale(split[0],split[1]);\n else   return new Locale(split[0],split[1],split[2]);\n}\n", "nl": "Convert string representation to Locale object"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public MarketCreateCommentQuery message(String value){\n  return unsafeParam(\"message\",value);\n}\n", "nl": "Comment text (required if \"attachments\" parameter is not specified)"}
{"code": "public void syncLocationManager2InfoSection(LocationManager locationManager) throws IOException {\n  if (textStoragePolicy != locationManager.getTextStoragePolicy())   throw new IOException(\"setLocationManager(): attempting to change textStoragePolicy from \" + textStoragePolicy + \" to \"+ locationManager.getTextStoragePolicy());\n  textStoragePolicy=locationManager.getTextStoragePolicy();\n  textFileNames=locationManager.getFileNames();\n  textFileSizes=locationManager.getFileSizes();\n}\n", "nl": "set the location manager"}
{"code": "public T read(PacketBuffer buf){\n  return reader.apply(buf);\n}\n", "nl": "Reads an instance of the data type from the buffer"}
{"code": "public PhotosGetOwnerPhotoUploadServerQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getOwnerPhotoUploadServer\",GetOwnerPhotoUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Builder withRationaleDialogMsg(String rationaleMsg){\n  buildObj.rationaleDialogMsg=rationaleMsg;\n  buildObj.showRationaleDialog=true;\n  return this;\n}\n", "nl": "Sets rationale dialog message"}
{"code": "public MarketCreateCommentQuery createComment(UserActor actor,int ownerId,int itemId){\n  return new MarketCreateCommentQuery(getClient(),actor,ownerId,itemId);\n}\n", "nl": "Creates a new comment for an item"}
{"code": "public static void restartBridge(boolean debug){\n  WXEnvironment.sDebugMode=debug;\n  WXSDKManager.getInstance().restartBridge();\n}\n", "nl": "Model switch, only applicable for developer model"}
{"code": "private boolean matchesPartPhoneNumber(String tokenVal){\n  String n_name=(String)tokenItem.findFeature(\"n.name\");\n  String n_n_name=(String)tokenItem.findFeature(\"n.n.name\");\n  String p_name=(String)tokenItem.findFeature(\"p.name\");\n  String p_p_name=(String)tokenItem.findFeature(\"p.p.name\");\n  boolean matches3DigitsP_name=matches(threeDigitsPattern,p_name);\n  return ((matches(threeDigitsPattern,tokenVal) && ((!matches(digitsPattern,p_name) && matches(threeDigitsPattern,n_name) && matches(fourDigitsPattern,n_n_name)) || (matches(sevenPhoneNumberPattern,n_name)) || (!matches(digitsPattern,p_p_name) && matches3DigitsP_name && matches(fourDigitsPattern,n_name)))) || (matches(fourDigitsPattern,tokenVal) && (!matches(digitsPattern,n_name) && matches3DigitsP_name && matches(threeDigitsPattern,p_p_name))));\n}\n", "nl": "Returns true if the given token matches part of a phone number"}
{"code": "public SourceDataQuality clone() throws CloneNotSupportedException {\n  return (SourceDataQuality)super.clone();\n}\n", "nl": "Return a clone of this SourceDataQuality object"}
{"code": "@Override public void onClick(View v){\n  hide();\n}\n", "nl": "Dismiss button clicked"}
{"code": "public void stop(){\n  this.stopTime=this.world.getTotalWorldTime();\n}\n", "nl": "Stop timing"}
{"code": "@NonNull @Override public CoreContract.Presenter initPresenter(@NonNull final CoreContract.Service service){\n  requireNonNull(service);\n  CoreContract.Presenter presenter=new MessagePresenter(this,service);\n  this.changePresenter(presenter);\n  return presenter;\n}\n", "nl": "To notify the implementor should init the presenter"}
{"code": "@VisibleForTesting public void subscribeForTesting(){\n  mObservable.subscribe(mObserver);\n}\n", "nl": "Only for test purposes DON'T USE IT!"}
{"code": "private boolean lollipopAndAbove(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;\n}\n", "nl": "Checks if the device is running API greater than 21"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static Map<String,Object> updateEmailAddress(DispatchContext ctx,Map<String,? extends Object> context){\n  Map<String,Object> newContext=UtilMisc.makeMapWritable(context);\n  newContext.put(\"infoString\",newContext.get(\"emailAddress\"));\n  newContext.remove(\"emailAddress\");\n  return updateContactMech(ctx,newContext);\n}\n", "nl": "Updates a EmailAddress <b>security check</b>: userLogin partyId must equal partyId, or must have PARTYMGR_UPDATE permission"}
{"code": "public StandardDocumentComparator(){\n  sGraph=new GraphSimilarity();\n  sHistogram=new GraphSimilarity();\n}\n", "nl": "Creates a new instance of StandardComparator"}
{"code": "public static StorableTimeFence inFridayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(FRIDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid on Friday in the given daily time frame"}
{"code": "public VideoGetAlbumsByVideoQuery targetId(Integer value){\n  return unsafeParam(\"target_id\",value);\n}\n", "nl": "Set target id"}
{"code": "public long blockNumber(){\n  return blockNum;\n}\n", "nl": "Returns the block number component of the entry"}
{"code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isBanned(String ip){\n  for (  BannedIP ipBan : banList) {\n    if (ipBan.isActive() && NetworkUtils.checkIPMatching(ipBan.getMask(),ip)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Checks if ip (or mask) is banned"}
{"code": "public void clear(){\n  mAnimations.clear();\n}\n", "nl": "Clear the list of animations that we might have"}
{"code": "public static String joinDash(String input){\n  String[] temp=input.split(\"-\");\n  for (int i=1; i < temp.length; i++) {\n    temp[i]=upperCaseFirstChar(temp[i]);\n  }\n  return join(temp,\"\");\n}\n", "nl": "Transform string from the format \"quick-brown-fox\" into \"quickBrownFox\""}
{"code": "public boolean containsValue(V value){\n  if (value == null)   return false;\n  for (  Map<C,V> row : dataMap.values()) {\n    if (row.containsValue(value))     return true;\n  }\n  return false;\n}\n", "nl": "does table contain given value"}
{"code": "public Builder hideKeyboard(boolean hideKeyboard){\n  this.hideKeyboard=hideKeyboard;\n  return this;\n}\n", "nl": "Specify whether or not the keyboard should be hidden at the beginning"}
{"code": "public boolean isApplicable(){\n  megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();\n  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getChildCount(remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot()) > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected PagesClearCacheQuery url(String value){\n  return unsafeParam(\"url\",value);\n}\n", "nl": "Address of the page where you need to refesh the cached version"}
{"code": "public ClusterInfo(String schema,Integer instanceId,Integer backupId,Integer numberOfInstances,Integer numberOfBackups){\n  this.schema=schema;\n  this.instanceId=instanceId;\n  this.backupId=backupId;\n  this.numberOfInstances=numberOfInstances;\n  this.numberOfBackups=numberOfBackups;\n}\n", "nl": "Constructs a new Cluster info"}
{"code": "public IAssignmentAlgorithm createAssignmentAlgorithm(){\n  return new AssignmentUsingWeightedLCA(cName,refId2weight,ref2weight,taxId2SpeciesId,percentToCover,useIdentityFilter);\n}\n", "nl": "creates a new assignment algorithm use this repeatedly to create multiple assignment algorithms that can be run in parallel"}
{"code": "private void removeLease(long leaseId){\n  if (this.keepAlives.containsKey(leaseId)) {\n    this.keepAlives.remove(leaseId);\n  }\n}\n", "nl": "remove the lease from keep alive map"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private static int probe(final int perturb,final int j){\n  return (j << 2) + j + perturb+ 1;\n}\n", "nl": "Compute next probe for collision resolution"}
{"code": "public boolean isApplicable(){\n  final ChartViewer viewer=(ChartViewer)getViewer();\n  return viewer.getActiveLabelsJList() != null && viewer.getActiveLabelsJList().getSelectedIndex() != -1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public GroupsIsMemberQueryWithExtended(VkApiClient client,UserActor actor,String groupId){\n  super(client,\"groups.isMember\",IsMemberExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void stepStart(LoadableComponentContext context){\n  String info=produceLoadableComponentInfo(context.getConditionContext());\n  LOG.debug(\"Started lodable component condition evaluation: \" + info);\n  progressData.add(new ConditionProgressStep(info));\n}\n", "nl": "Register start of an step evaluation"}
{"code": "public void cancelCast(){\n  isCancelled=true;\n}\n", "nl": "Set this skill as canceled"}
{"code": "private boolean isNullableCoreType(HashSet<String> resolvedTypesSet){\n  if (resolvedTypesSet.size() != 2 || !resolvedTypesSet.contains(Types.strNull)) {\n    return false;\n  }\n  return resolvedTypesSet.contains(Types.strInteger) || resolvedTypesSet.contains(Types.strFloat) || resolvedTypesSet.contains(Types.strResource);\n}\n", "nl": "check if nullable int, float, resource"}
{"code": "public static TapTarget forBounds(Rect bounds,CharSequence title){\n  return forBounds(bounds,title,null);\n}\n", "nl": "Return a tap target for the specified bounds"}
{"code": "public boolean isReadOnly(){\n  return !(isDataPersister() || isBulkDataPersister());\n}\n", "nl": "Returns true is the underlying data source doesn't support data changes"}
{"code": "public void invokeMenuPath(@NotNull String... path){\n  getMenuFixture().invokeMenuPath(path);\n}\n", "nl": "Invokes an action by menu path"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static String formatCurrency(BigDecimal price,String isoCode,Locale locale){\n  return formatCurrency(price,isoCode,locale,-1);\n}\n", "nl": "Formats a BigDecimal into a properly formatted currency string based on isoCode and Locale"}
{"code": "public Builder minColumns(String... columns){\n  return add(ReduceOp.Min,columns);\n}\n", "nl": "Reduce the specified columns by taking the minimum value"}
{"code": "public SourceEditor toggleWrap(){\n  return setWrap(!wrap);\n}\n", "nl": "Toggle line wrap"}
{"code": "long increaseItemCount(Item item,long count,ItemUpdateType updateType,Player actor){\n  long leftCount=item.increaseItemCount(count);\n  ItemPacketService.sendItemPacket(actor,storageType,item,updateType);\n  setPersistentState(PersistentState.UPDATE_REQUIRED);\n  return leftCount;\n}\n", "nl": "increase item count and return left count"}
{"code": "public MessagesGetChatQueryWithChatIdsFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public static boolean canLearnMoreMasterCraftingSkill(Player player){\n  return getTotalMasterCraftingSkills(player) < CraftConfig.MAX_MASTER_CRAFTING_SKILLS;\n}\n", "nl": "Check if player can learn more master crafting skill or not (max is 1)"}
{"code": "public boolean isFollowPeak(){\n  return followPeak;\n}\n", "nl": "Status of the follow-peak"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"zoom what=fit;\");\n}\n", "nl": "action to be performed"}
{"code": "protected void jimplifySpecial(DexBody body){\n  List<Local> parameters=buildParameters(body,false);\n  invocation=Jimple.v().newSpecialInvokeExpr(parameters.get(0),getSootMethodRef(),parameters.subList(1,parameters.size()));\n  body.setDanglingInstruction(this);\n}\n", "nl": "Executes the \"jimplify\" operation for a special invocation"}
{"code": "public static <T>Aggregate<Map<String,Concept>,Map<Concept,T>> group(String varName,Aggregate<? super Map<String,Concept>,T> aggregate){\n  return Aggregates.group(varName,aggregate);\n}\n", "nl": "Create an aggregate that will group a query by a variable name and apply the given aggregate to each group"}
{"code": "@Override public boolean isRunning(){\n  return false;\n}\n", "nl": "Always return false; nothing needs doing at shutd"}
{"code": "protected MarketRemoveFromAlbumQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item identifier"}
{"code": "public static void appendBlocks(DAAHeader header,BlockType type,byte[][] blocks,int[] sizes) throws IOException {\n  BlockType[] types=new BlockType[blocks.length];\n  for (int i=0; i < types.length; i++) {\n    types[i]=type;\n  }\n  appendBlocks(header,types,blocks,sizes);\n}\n", "nl": "append new blocks"}
{"code": "public static float enlarge(float startValue,float endValue,float time){\n  if (startValue > endValue)   throw new IllegalArgumentException(\"Start size can't be larger than end size.\");\n  return startValue + (endValue - startValue) * time;\n}\n", "nl": "Enlarge value from startValue to endValue"}
{"code": "private CrashHandler(){\n}\n", "nl": "Ensure that only one instance of CrashHandler"}
{"code": "public GroupsEditQuery marketCity(List<Integer> value){\n  return unsafeParam(\"market_city\",value);\n}\n", "nl": "Market delivery cities (if only one country is specified)"}
{"code": "public WallGetByIdQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public SecureGetUserLevelQuery(VkApiClient client,ServiceActor actor,int... userIds){\n  super(client,\"secure.getUserLevel\",Utils.buildParametrizedType(List.class,Level.class));\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected AuthConfirmQuery clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n", "nl": "Set client secret"}
{"code": "public final boolean isAlternatingLocale(){\n  return (myAlternate & CFG_LOCALE) != 0;\n}\n", "nl": "Returns true if the locale is alternated"}
{"code": "@Override public void clearDataTags(){\n  sourceDataTags.clear();\n  movingAverages.clear();\n}\n", "nl": "Clears the data tags of this time deadband activator"}
{"code": "public boolean addProcessId(final Long processId){\n  if (processId != null && processId > 0) {\n    return processIds.add(processId);\n  }\n  return false;\n}\n", "nl": "Adds the process id as dependency to this tag"}
{"code": "public static String readStringFromFile(String path,SparkContext sc) throws IOException {\n  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());\n  try (BufferedInputStream bis=new BufferedInputStream(fileSystem.open(new Path(path)))){\n    byte[] asBytes=IOUtils.toByteArray(bis);\n    return new String(asBytes,\"UTF-8\");\n  }\n }\n", "nl": "Read a UTF-8 format String from HDFS (or local)"}
{"code": "@Override public void activate(){\n}\n", "nl": "this tab has been selected"}
{"code": "public void addChangingListener(OnWheelChangedListener listener){\n  changingListeners.add(listener);\n}\n", "nl": "Adds wheel changing listener"}
{"code": "public static String methodNameToFieldName(String methodPrefix,String methodName){\n  return methodNameToFieldName(methodPrefix,methodName,false);\n}\n", "nl": "method name to field name"}
{"code": "public int uninstallSilent(Context context,String packageName){\n  return uninstallSilent(context,packageName,false);\n}\n", "nl": "uninstall package and clear data of app silent by root"}
{"code": "public void connect(List<StompHeader> _headers,boolean reconnect){\n  if (reconnect)   disconnect();\n  if (mConnected)   return;\n  mConnectionProvider.getLifecycleReceiver().subscribe(null);\n  mMessagesSubscription=mConnectionProvider.messages().map(null).subscribe(null);\n}\n", "nl": "If already connected and reconnect=false - nope"}
{"code": "public static void register(String owner,GUIHandler handler){\n  handlers.put(owner,handler);\n}\n", "nl": "Registers the GUI handler for the given owner"}
{"code": "public PhotosSaveWallPhotoQuery server(Integer value){\n  return unsafeParam(\"server\",value);\n}\n", "nl": "Set server"}
{"code": "public static void resume(){\n  TrafficService service=getAirMapTrafficService();\n  if (service != null) {\n    service.connect();\n  }\n}\n", "nl": "This function needs to be called when the application is no longer in the background (onStart, onResume)"}
{"code": "public void unify(Atomic parentAtom){\n  unifyViaAtom(parentAtom);\n  propagateConstraints(parentAtom);\n}\n", "nl": "make child query consistent by performing variable substitution so that parent variables are propagated"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAircraftManufacturer && ((AirMapAircraftManufacturer)o).getId().equals(getId());\n}\n", "nl": "Comparison based on ID"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void writeFileContent(String content,Path path) throws CommandException {\n  try {\n    Files.write(content,path.toFile(),StandardCharsets.UTF_8);\n  }\n catch (  IOException e) {\n    throw new CommandException(\"Cannot write file content in path: \" + path.toString(),e);\n  }\n}\n", "nl": "Writes the content into a file in UTF8"}
{"code": "public MarketGetQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset based on a first matching item to get a certain items subset"}
{"code": "private void checkConfiguration(){\n  if (configuration == null) {\n    throw new IllegalStateException(ERROR_NOT_INIT);\n  }\n}\n", "nl": "Checks if ImageLoader's configuration was initialized"}
{"code": "public ClientGameInformation(String sGameName){\n  super();\n  this.gameName=sGameName;\n  this.playTimes=0;\n  this.win=0;\n  this.defeat=0;\n  this.score=0;\n}\n", "nl": "init The ClientGameInformation Using Game's Name"}
{"code": "public AsyncCatchOptions noMasterBall(boolean skipMasterBall){\n  this.skipMasterBall=skipMasterBall;\n  return this;\n}\n", "nl": "Set whether or not Master balls can be used"}
{"code": "public void click(int mask,int x,int y) throws InterruptedException {\n  move(x,y);\n  click(mask);\n}\n", "nl": "Click mouse with default delay at certain position"}
{"code": "@Override public void load(DictionaryInfo dictionaryInfo,ColumnIdentifier columnIdentifier,long dictionaryChunkStartOffset,long dictionaryChunkEndOffset,boolean loadSortIndex) throws IOException {\n  Iterator<byte[]> columnDictionaryChunkWrapper=load(columnIdentifier,dictionaryChunkStartOffset,dictionaryChunkEndOffset);\n  if (loadSortIndex) {\n    readSortIndexFile(dictionaryInfo,columnIdentifier);\n  }\n  fillDictionaryValuesAndAddToDictionaryChunks(dictionaryInfo,columnDictionaryChunkWrapper);\n}\n", "nl": "This method will load the dictionary data for a given columnIdentifier"}
{"code": "private void connectDB(){\n  mongoClient=new MongoClient(dbHost,dbPort);\n  db=mongoClient.getDatabase(dbName);\n  usersCollection=db.getCollection(\"users\");\n  loginSessionsCollection=db.getCollection(\"logins\");\n}\n", "nl": "Sets up a connection to the MongoDB"}
{"code": "private String number2Full(int time){\n  if (time < 10) {\n    return \"0\" + time;\n  }\n else {\n    return \"\" + time;\n  }\n}\n", "nl": "make the time beauty"}
{"code": "Stream<Concept> insertAll(){\n  return insertAll(new HashMap<>());\n}\n", "nl": "Insert all the Vars"}
{"code": "static void updateFileListener(@NotNull Project project){\n  InstantRunManager manager=get(project);\n  manager.myFileChangeListener.setEnabled(InstantRunSettings.isInstantRunEnabled());\n}\n", "nl": "Synchronizes the file listening state with whether instant run is enabled"}
{"code": "public void removeChangingListener(OnWheelChangedListener listener){\n  changingListeners.remove(listener);\n}\n", "nl": "Removes wheel changing listener"}
{"code": "public static <T>T readRepetitiveObject(ObjectInput in) throws IOException, ClassNotFoundException {\n  if (in instanceof MarshalInputStream)   return (T)((MarshalInputStream)in).readRepetitiveObject();\n  return (T)readObject(in);\n}\n", "nl": "Objects read and written with repetitive must be immutable (cannot be changed as they are kept in underlying map, changing them will affect the next repetitiveRead/Write"}
{"code": "public FactoryConfigurationError(java.lang.Exception e,java.lang.String msg){\n  super(msg);\n  nested=e;\n}\n", "nl": "Construct an exception with a nested inner exception and a message"}
{"code": "public PagesGetVersionQuery needHtml(Boolean value){\n  return unsafeParam(\"need_html\",value);\n}\n", "nl": "Return the page as HTML"}
{"code": "public void remove(){\n}\n", "nl": "not implemented"}
{"code": "public boolean canSet(T value){\n  return isSettable ? internalCanSet(value) : matches(value);\n}\n", "nl": "Return true if the given value can safely/correctly be set/loaded into this AnyVal"}
{"code": "public AuthConfirmQuery(VkApiClient client,int clientId,String clientSecret,String phone,String code){\n  super(client,\"auth.confirm\",ConfirmResponse.class);\n  clientId(clientId);\n  clientSecret(clientSecret);\n  phone(phone);\n  code(code);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Bitmap put(String key,Bitmap value){\n  return cache.put(key,value);\n}\n", "nl": "put bitmap to image cache"}
{"code": "public void clearBasicAuth(){\n  this.httpClient.getCredentialsProvider().clear();\n}\n", "nl": "Removes set basic auth credentials"}
{"code": "public FriendsDeleteListQuery(VkApiClient client,UserActor actor,int listId){\n  super(client,\"friends.deleteList\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  listId(listId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void syncSummary2NetworkFormatting(DataTable megan4Table,ClusterViewer clusterViewer){\n  System.err.println(\"syncSummary2NetworkFormatting(): not implemented\");\n}\n", "nl": "sync summary to network formatting"}
{"code": "public void show(){\n  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();\n  lp.height=LayoutParams.WRAP_CONTENT;\n  mContentView.setLayoutParams(lp);\n}\n", "nl": "show footer"}
{"code": "@Override public String toString(){\n  return \"PointD, x: \" + x + \", y: \"+ y;\n}\n", "nl": "returns a string representation of the object"}
{"code": "private void deleteStorePath(){\n  FileFactory.FileType fileType=FileFactory.getFileType(this.hdfsStorePath);\n  CarbonFile carbonFile=FileFactory.getCarbonFile(this.hdfsStorePath,fileType);\n  deleteRecursiveSilent(carbonFile);\n}\n", "nl": "this method will delete the store path"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static boolean putInt(Context context,String key,int value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putInt(key,value);\n  return editor.commit();\n}\n", "nl": "put int preferences"}
{"code": "public StatusGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"status.get\",Status.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static final void emoteStopAttacking(Npc owner){\n  owner.unsetState(CreatureState.WEAPON_EQUIPPED);\n  if (owner.getTarget() != null && owner.getTarget() instanceof Player) {\n    PacketSendUtility.sendPacket((Player)owner.getTarget(),SM_SYSTEM_MESSAGE.STR_UI_COMBAT_NPC_RETURN(owner.getObjectTemplate().getNameId()));\n  }\n}\n", "nl": "Npc stops attacking"}
{"code": "private void tryScrollBackToTopAfterComplete(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "public AuthSignupQuery testMode(Boolean value){\n  return unsafeParam(\"test_mode\",value);\n}\n", "nl": "true - test mode, in which the user will not be registered and the phone number will not be checked for availability false - default mode (default)"}
{"code": "@NotNull public static ResizePolicy vertical(){\n  return ourVertical;\n}\n", "nl": "Returns a resize policy allowing vertical resizing only"}
{"code": "private static String makeGeoString(List<Coordinate> coordinates){\n  return TextUtils.join(\",\",coordinates);\n}\n", "nl": "Formats a list of Coordinates into WKT format"}
{"code": "public void addEntry(CatchEntry entry){\n  entries.addElement(entry);\n}\n", "nl": "add an entry to the catch table"}
{"code": "public boolean isAutoConnect(){\n  return mAutoConnect;\n}\n", "nl": "Getter returning true if we are in auto connect mode"}
{"code": "Casting(VarAdmin rolePlayer){\n  this.roleType=Optional.empty();\n  this.rolePlayer=rolePlayer;\n}\n", "nl": "A casting without a role type specified"}
{"code": "private byte[] copyOfRange(byte[] source,int from,int to){\n  byte[] range=new byte[to - from];\n  System.arraycopy(source,from,range,0,range.length);\n  return range;\n}\n", "nl": "Base58 helper method"}
{"code": "private void beforeBulkExecution(IReplicationInBatchContext context){\n  if (_operationStatisticsHandler != null) {\n    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());\n    List<BulkItem> bulk=context.getPendingContext();\n    sourceChannelStatistics.addOperationCount(bulk);\n  }\n}\n", "nl": "Invoked before bulk execution in EDS to update mirror statistics"}
{"code": "public Builder withDenyDialogMsg(@StringRes int denyDialogMsgRes){\n  buildObj.denyDialogMsgRes=denyDialogMsgRes;\n  buildObj.showDenyDialog=true;\n  return this;\n}\n", "nl": "Sets deny dialog message"}
{"code": "public static boolean exists(String name){\n  return channels.containsKey(name);\n}\n", "nl": "Checks if a channel with the given name is already registered"}
{"code": "@NotNull public static Color worstContrastColor(@NotNull Color foreground,@NotNull Color background){\n  int backgroundAlpha=background.getAlpha();\n  int r=worstContrastComponent(foreground.getRed(),background.getRed(),backgroundAlpha);\n  int g=worstContrastComponent(foreground.getGreen(),background.getGreen(),backgroundAlpha);\n  int b=worstContrastComponent(foreground.getBlue(),background.getBlue(),backgroundAlpha);\n  return new Color(r,g,b);\n}\n", "nl": "Returns the color that, placed underneath the colors background and foreground, would result in the worst contrast"}
{"code": "public static void debug(){\n  DEBUG=true;\n}\n", "nl": "whether debug"}
{"code": "public static void main(String[] args){\n  Vertx vertx=Vertx.vertx();\n  vertx.deployVerticleObservable(WebServiceExample.class.getName()).subscribe(null,null);\n}\n", "nl": "The main program"}
{"code": "public void attackMode(int targetObjId){\n  VisibleObject obj=getOwner().getKnownList().getObject(targetObjId);\n  if (obj != null && obj instanceof Creature) {\n    SummonsService.attackMode(getOwner());\n  }\n}\n", "nl": "Change to attackMode"}
{"code": "public Builder addColumnDouble(String name,Double minAllowedValue,Double maxAllowedValue,boolean allowNaN,boolean allowInfinite){\n  return addColumn(new DoubleMetaData(name,minAllowedValue,maxAllowedValue,allowNaN,allowInfinite));\n}\n", "nl": "Add a double column with the specified restrictions"}
{"code": "protected void startResetExpiredJobsThread(){\n  if (resetExpiredJobThread == null) {\n    resetExpiredJobThread=new Thread(resetExpiredJobsRunnable);\n  }\n  resetExpiredJobThread.start();\n}\n", "nl": "Starts the reset expired jobs thread"}
{"code": "public boolean documentFitsView(){\n  if (swipeVertical) {\n    return getPageCount() * optimalPageHeight < getHeight();\n  }\n else {\n    return getPageCount() * optimalPageWidth < getWidth();\n  }\n}\n", "nl": "Checks if whole document can be displayed on screen, doesn't include zoom"}
{"code": "public StorageGetKeysQuery(VkApiClient client,UserActor actor){\n  super(client,\"storage.getKeys\",Utils.buildParametrizedType(List.class,String.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static int read(){\n  return KEYS;\n}\n", "nl": "returns the currently pressed keys"}
{"code": "public SM_PLAYER_INFO(Player player,boolean enemy){\n  this.player=player;\n  this.enemy=enemy;\n}\n", "nl": "Constructs new <tt>SM_PLAYER_INFO </tt> packet"}
{"code": "public boolean isAspectPreserving(){\n  return (myFlags & PRESERVE_RATIO) != 0;\n}\n", "nl": "Returns true if this policy requires resizing in an aspect-ratio preserving manner"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void writeByteByteInt(ByteByteInt a) throws IOException {\n  outs.write(a.getByte1());\n  outs.write(a.getByte2());\n  position+=2;\n  writeInt(a.getValue());\n}\n", "nl": "write a byte-byte-int"}
{"code": "public BoardCreateCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "void save(PermissionHolder holder){\n  if (holder instanceof User) {\n    plugin.getDatastore().saveUser(((User)holder),null);\n  }\n  if (holder instanceof Group) {\n    plugin.getDatastore().saveGroup(((Group)holder),null);\n  }\n}\n", "nl": "Utility method for saving a user or group"}
{"code": "public void startFirstSampleTimer(){\n}\n", "nl": "Starts the first sample timer"}
{"code": "@Override public boolean isAllowed(Authentication authentication,Object projectName){\n  return authentication.isAuthenticated() && projectRepository.get().isAssignedToProject((String)projectName,authentication.getName());\n}\n", "nl": "Check whether user assigned to project<br> Or user is ADMIN who is GOD of ReportPortal"}
{"code": "public void addAll(Map<String,String> map){\n  if (map == null) {\n    throw new NullPointerException(\"contexts\");\n  }\n  addAll(map.entrySet());\n}\n", "nl": "Adds the entry set of a map to the set"}
{"code": "public boolean isLoadingMore(){\n  return STATUS.isLoadingMore(mStatus);\n}\n", "nl": "is current status loading more"}
{"code": "private static boolean checkLoaded(){\n  if (manifest == null) {\n    return parse();\n  }\n  return true;\n}\n", "nl": "Checks if there is a Manifest file loaded"}
{"code": "public DecorationCursor queryDecorations(){\n  return mHelper.queryDecorations();\n}\n", "nl": "DECORATION QUERIES"}
{"code": "public static void error(Object message){\n  Gdx.app.error(TAG,String.valueOf(message));\n}\n", "nl": "Logs an error message to the console or logcat"}
{"code": "public PhotosGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n", "nl": "Return an additional \"likes\" field"}
{"code": "public boolean hasFeature(String name){\n  return featureNames.contains(name);\n}\n", "nl": "Indicate whether the feature definition contains the feature with the given name"}
{"code": "public UsersSearchQuery universityChair(Integer value){\n  return unsafeParam(\"university_chair\",value);\n}\n", "nl": "Set university chair"}
{"code": "public Builder countColumns(String... columns){\n  return add(ReduceOp.Count,columns);\n}\n", "nl": "Reduce the specified columns by counting the number of values"}
{"code": "private static boolean matches(Pattern pattern,String label){\n  if (label == null)   label=\"\";\n  Matcher matcher=pattern.matcher(label);\n  return matcher.find();\n}\n", "nl": "does label match pattern?"}
{"code": "public void clearLabels(){\n  sample2label.clear();\n}\n", "nl": "erase labels"}
{"code": "public static void e(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  Log.e(tag,msg,throwable);\n}\n", "nl": "Send an ERROR log message"}
{"code": "public void resume(){\n  engine.resume();\n}\n", "nl": "Resumes waiting \"load&display\" tasks"}
{"code": "public boolean sameObjectId(int objectId){\n  return this.getObjectId() == objectId;\n}\n", "nl": "Checks if object id's are the same"}
{"code": "public static void open(EntityPlayer player,String owner,String guiID,GUIContext context){\n  if (player.worldObj.isRemote) {\n    openClient(player,owner,guiID,context);\n  }\n else {\n    openServer(player,owner,guiID,context);\n  }\n}\n", "nl": "Opens a GUI for the player from the given owner, GUI ID, and context"}
{"code": "protected InternalEventTracker handleEvent(Event event){\n  InternalEventTracker eventTracker=bus.postEvent(event);\n  if (eventTracker.hasErrors()) {\n    eventTracker.getFirstError().printStackTrace();\n  }\n  return eventTracker;\n}\n", "nl": "We're simply posting the event to the provided bus"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected void noteRemoval(K key,V oldValue){\n  for (  CacheListener<K,V> listener : listeners) {\n    listener.noteKeyRemoval(this,key,oldValue);\n  }\n}\n", "nl": "Send a key removal event to all registered listeners"}
{"code": "private <T extends Type,S extends Instance>S putInstance(Optional<String> id,T type,BiFunction<String,T,S> putInstance,Function<T,S> addInstance){\n  return id.map(null).orElseGet(null);\n}\n", "nl": "Put an instance of a type which may or may not have an ID specified"}
{"code": "public static float[] pointOnCircumference(int centerX,int centerY,double angle,double radius){\n  float[] result=new float[2];\n  pointOnCircumference(centerX,centerY,angle,radius,result);\n  return result;\n}\n", "nl": "Calculate point on circumference for circle(centerX, centerY, radius) with angle in radians"}
{"code": "private String toUrl(String testFile) throws MalformedURLException {\n  return new File(TestUtil.TEST_DATA_FOLDER + \"pac\",testFile).toURI().toURL().toString();\n}\n", "nl": "Helper method to build the url to the given test file"}
{"code": "private boolean cIsArithmetic(Character c){\n  return (c == '+' || c == '-' || c == '*' || c == '/');\n}\n", "nl": "Check whether c is an arithmetic (+ - * /) character"}
{"code": "private void drawItems(Canvas canvas){\n  canvas.save();\n  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;\n  canvas.translate(PADDING,-top + scrollingOffset);\n  itemsLayout.draw(canvas);\n  canvas.restore();\n}\n", "nl": "Draws items"}
{"code": "public boolean hasCurve(){\n  return mHasCurve;\n}\n", "nl": "Return true if the connection is represented by a curve"}
{"code": "public boolean hasGeomExecuted(){\n  return hasExecuted;\n}\n", "nl": "Is this a Spark or Geom?"}
{"code": "public static void hideProgressDialogsAll(){\nsynchronized (sLock) {\n    for (    ProgressDialog dialog : sDialogs.keySet()) {\n      if (isAlive(dialog) && dialog.isShowing())       dialog.dismiss();\n    }\n    sDialogs.clear();\n  }\n}\n", "nl": "Hide all dialogs"}
{"code": "private void notifyAdded(List<AirMapTraffic> added){\n  if (added == null || added.isEmpty()) {\n    return;\n  }\n  for (  AirMapTrafficListener listener : listeners) {\n    listener.onAddTraffic(added);\n  }\n}\n", "nl": "Notify the listeners that traffic has been added"}
{"code": "public boolean hasProblems(){\n  return hasErrors() || myFidelityWarnings != null;\n}\n", "nl": "Are there any logged errors or warnings during the render?"}
{"code": "public static void error(@NonNull String tag,String message,Object... args){\n  android.util.Log.e(tag,String.format(Locale.ENGLISH,message,args));\n}\n", "nl": "Logs with error level"}
{"code": "private Map<String,ComplexValue> mapAggregationConvert(Map<String,String> input){\n  return input.entrySet().stream().collect(toMap(null,null));\n}\n", "nl": "Convert Aggregation result into readable map content"}
{"code": "public void pause(){\n}\n", "nl": "Pauses audio output"}
{"code": "public String toString(){\n  return \"AudioOutput\";\n}\n", "nl": "Returns the string form of this object"}
{"code": "public static TransferDevice fromJson(final String json){\n  return getGson().fromJson(json,TransferDeviceImpl.class);\n}\n", "nl": "Deserialises the JSON string into a <code>DeviceTransfer</code> object instance"}
{"code": "public VideoSearchQueryWithExtended date(Integer value){\n  return unsafeParam(\"date\",value);\n}\n", "nl": "Set date"}
{"code": "public void assertTextPresentIgnoreCase(String expected,String actual){\n  assertTextPresent(expected.toLowerCase(),actual.toLowerCase());\n}\n", "nl": "Asserts if the provided text is part of some text, ignoring any uppercase characters"}
{"code": "public void addChildren(final ReadDataLevelNode parent){\n  parent.add(new ReadDataNode(parent.getData()));\n}\n", "nl": "add children to read level data node"}
{"code": "@Override public void onLoadPackageCheckFail(File patchFile,int errorCode){\n  TinkerLog.i(TAG,\"load patch package check fail file path:%s, errorCode:%d\",patchFile.getAbsolutePath(),errorCode);\n  Tinker.with(context).cleanPatch();\n}\n", "nl": "check patch signature, TINKER_ID and meta files"}
{"code": "public UrlValidator(String[] schemes,long options){\n  this(schemes,null,options);\n}\n", "nl": "Behavior of validation is modified by passing in options:"}
{"code": "public DocsGetByIdQuery(VkApiClient client,UserActor actor,List<String> docs){\n  super(client,\"docs.getById\",Utils.buildParametrizedType(List.class,Doc.class));\n  accessToken(actor.getAccessToken());\n  docs(docs);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void initialize(ConnectorContext ctx,List<Map<String,String>> taskConfigs){\n}\n", "nl": "Initialise the connector"}
{"code": "public void useStyle(@NotNull NlDrawingStyle style){\n  myStyle=style;\n}\n", "nl": "Use the given style for subsequent drawing operations"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.BRAYCURTIS);\n}\n", "nl": "this is currently selected?"}
{"code": "protected VirtualFile createFile(String filePath,String... contentLines){\n  return createFile(filePath,Joiner.on(\"\\n\").join(contentLines));\n}\n", "nl": "Creates a file with the specified contents and file path in the test project"}
{"code": "public static void prepareKeysFromSurrogates(DimColumnFilterInfo filterValues,SegmentProperties segmentProperties,CarbonDimension dimension,DimColumnExecuterFilterInfo dimColumnExecuterInfo){\n  byte[][] keysBasedOnFilter=getKeyArray(filterValues,dimension,segmentProperties);\n  dimColumnExecuterInfo.setFilterKeys(keysBasedOnFilter);\n}\n", "nl": "API will prepare the Keys from the surrogates of particular filter resolver"}
{"code": "public SplitSystem apply(ProgressListener progressListener,Taxa taxa,Distances distances) throws CanceledException {\n  progressListener.setTasks(\"Computing non-hierarchical clustering using\",\"Neighbor-Net\");\n  ordering=new int[taxa.size() + 1];\n  if (taxa.size() > 3)   runNeighborNet(progressListener,taxa.size(),setupMatrix(distances),ordering);\n else   return new SplitSystem();\n  return CircularSplitWeights.getWeightedSplits(ordering,distances,\"ols\",true,0.0001f);\n}\n", "nl": "run neighbor-net"}
{"code": "public CreateSiteWindow selectBlueprint(String createdSiteTitle,String createdSiteName,String createdSiteTemplate){\n  typeTitle(createdSiteTitle);\n  typeName(createdSiteName);\n  selectTemplate(createdSiteTemplate);\n  return this;\n}\n", "nl": "Fill data on BluePrint view"}
{"code": "public int findColumn(String name){\n  for (int col=0; col < getColumnCount(); col++)   if (getColumnName(col).equals(name))   return col;\n  return -1;\n}\n", "nl": "get the named column"}
{"code": "public Bindings add(String property,JTextArea textArea,String defaultValue){\n  registerPropertyChangeListener(textArea);\n  return add(new JTextComponentBinding(property,textArea,defaultValue));\n}\n", "nl": "Handles JTextArea"}
{"code": "private void openAppSettings(){\n  Intent intent=new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.fromParts(\"package\",getPackageName(),null));\n  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  startActivity(intent);\n}\n", "nl": "Open app settings screen"}
{"code": "public void registerListener(Condition condition,EventListener listener,int priority){\n  getListenerForCondition(condition,-1).registerListener(listener,priority);\n}\n", "nl": "Registers a listener for a particular condition with a given priority"}
{"code": "public static void xml(String xml){\n  printer.xml(xml);\n}\n", "nl": "Formats the json content and print it"}
{"code": "public static boolean isEquals(Object actual,Object expected){\n  return actual == expected || (actual == null ? expected == null : actual.equals(expected));\n}\n", "nl": "compare two object"}
{"code": "private void addCachedLegionMemberEx(LegionMemberEx legionMemberEx){\n  this.allCachedLegionMembers.addMemberEx(legionMemberEx);\n}\n", "nl": "This method will add a new legion member to the cache"}
{"code": "public RMA6FileModifier(String fileName) throws IOException {\n  super(fileName,READ_WRITE);\n  super.close();\n}\n", "nl": "construct an RMA6 modifier and read in RMA6 data"}
{"code": "@Override public void put(int index,byte[] value){\n  System.arraycopy(value,0,datastore,((index) * sizeOfEachElement),sizeOfEachElement);\n}\n", "nl": "This method will be used to insert mdkey to store"}
{"code": "public CommandManagerFX(IDirector dir,Object viewer,String[] commandsPaths,boolean returnOnCommandNotFound){\n  super(dir,viewer,commandsPaths,returnOnCommandNotFound);\n}\n", "nl": "construct a parser and load all commands found for the given paths"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public void clearCurrentItem(){\n  currentItem=null;\n}\n", "nl": "erase the current label"}
{"code": "public InvalidDescriptionException(final Throwable cause){\n  super(\"Invalid plugin.yml\",cause);\n}\n", "nl": "Constructs a new InvalidDescriptionException based on the given Exception"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "public NewsfeedDeleteBanQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.deleteBan\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private MatchQuery reasonMatchQuery(MatchQuery query){\n  if (!reasoner.getRules().isEmpty()) {\n    return reasoner.resolveToQuery(query);\n  }\n else {\n    return query;\n  }\n}\n", "nl": "Apply reasoner to match query"}
{"code": "public NGramDocumentComparatorAgent(){\n  super();\n}\n", "nl": "Creates a new instance of NGramDocumentComparatorAgent"}
{"code": "void renamedElement(Element oldEl,Element newEl){\n}\n", "nl": "A method to be called when an element has been renamed"}
{"code": "public boolean isTrunkServer(){\n  return this.ifTrunkServer;\n}\n", "nl": "if the trunk server"}
{"code": "public static boolean isMajorRank(int rank){\n  return getInstance().majorRanks.get(rank);\n}\n", "nl": "is this a major KPCOFGS rank?"}
{"code": "@Override public void stop(){\n}\n", "nl": "Stop the connector"}
{"code": "public static boolean isConnectedWifi(Context context){\n  NetworkInfo info=NetworkUtil.getNetworkInfo(context);\n  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);\n}\n", "nl": "Check if there is any connectivity to a Wifi network"}
{"code": "public VideoAddToAlbumQuery targetId(Integer value){\n  return unsafeParam(\"target_id\",value);\n}\n", "nl": "Set target id"}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?"}
{"code": "public boolean isUptoDate(){\n  return this.uptodate;\n}\n", "nl": "is viewer uptodate?"}
{"code": "public int readInt() throws IOException {\n  if (ins.read(bytes,0,4) < 4)   throw new IOException(\"buffer underflow\");\n  return (((int)bytes[0] & 0xFF)) | (((int)bytes[1] & 0xFF) << 8) | (((int)bytes[2] & 0xFF) << 16)| (((int)bytes[3]) << 24);\n}\n", "nl": "read int little endian"}
{"code": "public static void applyDrawableToImageView(Drawable drawable,ImageView view,int color){\n  drawable.mutate().setColorFilter(color,PorterDuff.Mode.MULTIPLY);\n  view.setImageDrawable(drawable);\n}\n", "nl": "Not thread-safe: only call from main thread!"}
{"code": "public void createPage(String parentPath,String title,String template) throws IOException {\n  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(CMD_PROPERTY,CREATE_PAGE_COMMAND).put(CHARSET_PROPERTY,UTF_8).put(PARENT_PATH_PROPERTY,parentPath).put(TITLE_PROPERTY,title).put(TEMPLATE_PROPERTY,template).build()),WCM_COMMAND_URL,PAGE_CREATED_SUCCESS_MESSAGE);\n}\n", "nl": "Create page in provided location"}
{"code": "private static int res(String res){\n  int nextRes=lastRes++;\n  resources.put(nextRes,res);\n  return nextRes;\n}\n", "nl": "Add another resource"}
{"code": "public void showContent(){\n  for (int i=0; i < getChildCount(); i++) {\n    getChildAt(i).setVisibility(VISIBLE);\n  }\n}\n", "nl": "Sets the Visibility of all children to VISIBLE"}
{"code": "public int addSplit(Split split){\n  nsplits++;\n  index2split.put(nsplits,split);\n  split2index.put(split,nsplits);\n  return nsplits;\n}\n", "nl": "add a split"}
{"code": "public AccountSetOnlineQuery voip(Boolean value){\n  return unsafeParam(\"voip\",value);\n}\n", "nl": "Set voip"}
{"code": "private void startWaveSouthernShieldGenerator1(){\n  sp(233724,337.93338f,257.88702f,292.43845f,(byte)60,1000,\"SouthernShieldGenerator1\");\n  sp(233725,338.05304f,254.6424f,292.3325f,(byte)60,1000,\"SouthernShieldGenerator2\");\n  sp(233883,338.13315f,251.34738f,292.48932f,(byte)59,1000,\"SouthernShieldGenerator3\");\n}\n", "nl": "* Southern Shield Generator Periodic Spawn  *"}
{"code": "public GroupsGetQuery filter(GroupsGetFilter... value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Types of communities to return"}
{"code": "public void broadCastEffectsImp(){\n  List<Effect> effects=getAbnormalEffects();\n  PacketSendUtility.broadcastPacket(getOwner(),new SM_ABNORMAL_EFFECT(getOwner(),abnormals,effects));\n}\n", "nl": "Broadcasts current effects to all visible objects"}
{"code": "public void encoding(){\n  if (stripe_unit_size % block_nbr != 0) {\n    throw new RuntimeException(\" Cannot  striping. wrong DATA_LENGTH!\");\n  }\n  STAR_encoding_row();\n  STAR_encoding_diag1();\n  STAR_encoding_diag2();\n}\n", "nl": "entry function for encoding"}
{"code": "public IEntryPacket toEntry(Object key,Object value) throws RemoteException, UnusableEntryException, UnknownTypeException {\n  if (key == null || value == null)   return null;\n  return _converter.toInternal(MapEntryFactory.create(key,value));\n}\n", "nl": "Convert key value to entry"}
{"code": "public int download_file(String group_name,String remote_filename,DownloadCallback callback) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file(group_name,remote_filename,file_offset,download_bytes,callback);\n}\n", "nl": "download file from storage server"}
{"code": "public static boolean putInt(Context context,String key,int value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putInt(key,value);\n  return editor.commit();\n}\n", "nl": "put int preferences"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public ConstrainableTxnMgrProxy(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public void clear(){\n  buf=null;\n  offset=0;\n  length=0;\n}\n", "nl": "clear the values held by this ByteArray"}
{"code": "public Iterator<Pair<Rectangle2D,T>> iterator(){\n  return data.iterator();\n}\n", "nl": "get an iterator over all members"}
{"code": "public int send(OutputStream out) throws IOException {\n  out.write(this.fileBuff,this.offset,this.length);\n  return 0;\n}\n", "nl": "send file content callback function, be called only once when the file uploaded"}
{"code": "public MediaFormat(){\n  mMap=new HashMap<String,Object>();\n}\n", "nl": "Creates an empty MediaFormat"}
{"code": "public static void writeShort(PacketBuffer buf,short value){\n  buf.writeShort(value);\n}\n", "nl": "Writes a short to the buffer"}
{"code": "public boolean isConnected(){\n  return client != null && client.isConnected();\n}\n", "nl": "Determine whether the client is connected"}
{"code": "public static void delete(long uid,String sid){\n  delete(W.create(\"uid\",uid).and(\"sid\",sid));\n}\n", "nl": "delete all the token by the uid and sid"}
{"code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(maxThreadNum == -1 ? numThreads : Math.min(maxThreadNum,numThreads),Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n", "nl": "Creates a new executor object for spawning worker threads"}
{"code": "public JsonMigrator(Loader loader){\n  this.loader=loader;\n}\n", "nl": "Create a JsonMigrator to migrate into the given graph"}
{"code": "public void release(int mask){\n  controller.mouseRelease(mask);\n}\n", "nl": "Release mouse mask"}
{"code": "private void writeFlowPolicy(Document document,Element rootElement){\n  Element flowPolicy=document.createElement(\"flowpolicy\");\n  rootElement.appendChild(flowPolicy);\n  for (  FlowPair pair : this.document.getFlowPolicy())   writeFlowPair(pair,document,flowPolicy);\n}\n", "nl": "Writes out the flow policy component of the RIFL document"}
{"code": "private void stop_notify_1(){\n  bleManager.stopListenCharacterCallback(UUID_NOTIFY_1);\n}\n", "nl": "stop listen notify1"}
{"code": "public void paint(Graphics g){\n  final Graphics2D g2d=(Graphics2D)g;\n  final AffineTransform old=g2d.getTransform();\n  if (color != null)   g2d.setColor(color);\n  g2d.rotate(angleInRadians,centerX,centerY);\n  g2d.drawOval((int)Math.round(centerX - lengthA),(int)Math.round(centerY - lengthB),(int)Math.round(2 * lengthA),(int)Math.round(2 * lengthB));\n  g2d.setTransform(old);\n}\n", "nl": "paint the ellipse"}
{"code": "public void startAction(MotionEvent me){\n  OnChartGestureListener l=mChart.getOnChartGestureListener();\n  if (l != null) {\n    l.onChartGestureStart(me,mLastGesture);\n  }\n}\n", "nl": "Calls the OnChartGestureListener to do the start callback"}
{"code": "public DividerItemDecoration(Context context,int resId){\n  mDivider=ContextCompat.getDrawable(context,resId);\n}\n", "nl": "Custom divider will be used"}
{"code": "@Override public String toString(){\n  return String.format(\"%d:%d\",ledgerId,entryId);\n}\n", "nl": "String representation of virtual cursor - LedgerId:EntryId"}
{"code": "public VideoSearchQueryWithExtended longer(Integer value){\n  return unsafeParam(\"longer\",value);\n}\n", "nl": "Set longer"}
{"code": "public void updateSupplements(){\n  if (subtractedSupplementId == 0 || subtractedSupplementsCount == 0) {\n    return;\n  }\n  this.getInventory().decreaseByItemId(subtractedSupplementId,subtractedSupplementsCount);\n  subtractedSupplementsCount=0;\n  subtractedSupplementId=0;\n}\n", "nl": "Update supplements in queue and clear the queue"}
{"code": "public NewsfeedAddBanQuery groupIds(Integer... value){\n  return unsafeParam(\"group_ids\",value);\n}\n", "nl": "Set group ids"}
{"code": "public MarketGetQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of items to return"}
{"code": "protected boolean hasNextLine(){\n  return pushedBackLine != null || iterator.hasNext();\n}\n", "nl": "is there a next line?"}
{"code": "public void showContent(){\n  switchState(CONTENT,null,null,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Hide all other states and show content"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void addSubFilter(SubFilter subFilter){\n  subFilters.add(subFilter);\n}\n", "nl": "Adds a Subfilter to the Main Filter"}
{"code": "public DOMImplementationListImpl(){\n  fImplementations=new ArrayList();\n}\n", "nl": "Construct an empty list of DOMImplementations"}
{"code": "public EntityQuery cursorForwardOnly(){\n  this.resultSetType=EntityFindOptions.TYPE_FORWARD_ONLY;\n  return this;\n}\n", "nl": "Indicate that the ResultSet object's cursor may move only forward (this is the default behavior)"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed"}
{"code": "private void createItemsLayout(){\n  if (itemsLayout == null) {\n    itemsLayout=new LinearLayout(getContext());\n    itemsLayout.setOrientation(LinearLayout.VERTICAL);\n  }\n}\n", "nl": "Creates item layouts if necessary"}
{"code": "@TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(Context context,Fragment fragment,int requestCode){\n  fragment.startActivityForResult(getIntent(context),requestCode);\n}\n", "nl": "Send the crop Intent with a custom request code"}
{"code": "public void open(){\n  ScreenManager.setScreen(this.inventoryScreen);\n  this.open=true;\n}\n", "nl": "Opens the inventory display"}
{"code": "public static Drawable bitmapToDrawable(Bitmap bitmap){\n  return bitmap == null ? null : new BitmapDrawable(bitmap);\n}\n", "nl": "convert Bitmap to Drawable"}
{"code": "public static void broadcastPacketToLegion(Legion legion,AionServerPacket packet){\n  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {\n    sendPacket(onlineLegionMember,packet);\n  }\n}\n", "nl": "Broadcasts packet to all legion members of a legion"}
{"code": "protected Set<D> computeCallToReturnFlowFunction(FlowFunction<D> callToReturnFlowFunction,D d1,D d2){\n  return callToReturnFlowFunction.computeTargets(d2);\n}\n", "nl": "Computes the call-to-return flow function for the given call-site abstraction"}
{"code": "void modifiedAttrValue(AttrImpl attr,String oldvalue){\n}\n", "nl": "A method to be called when an attribute value has been modified"}
{"code": "boolean checkIfDeltaIsTooLarge(Delta delta){\n  return delta.size() + _archiveDeltaSizeInMemory.getCount() >= MAX_DELTA_ARCHIVE_SIZE;\n}\n", "nl": "This only checks against the completed pending compactions that are in memory currently, but not against the pending compactions that are in progress"}
{"code": "public boolean increment(K key){\n  return adjustValue(key,(short)1);\n}\n", "nl": "Increments the primitive value mapped to key by 1"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public SampleInfo(DataInputStream is) throws IOException {\n  numberOfChannels=is.readInt();\n  sampleRate=is.readInt();\n  coeffMin=is.readFloat();\n  coeffRange=is.readFloat();\n  postEmphasis=is.readFloat();\n  residualFold=is.readInt();\n}\n", "nl": "Constructs a sample info from the given input stream"}
{"code": "public AudioGetByIdQuery(VkApiClient client,UserActor actor,String... audios){\n  super(client,\"audio.getById\",Utils.buildParametrizedType(List.class,AudioFull.class));\n  accessToken(actor.getAccessToken());\n  audios(audios);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public FruchtermanReingoldLayout(String graph,int maxIter){\n  super(graph);\n  m_nodeGroup=PrefuseLib.getGroupName(graph,Graph.NODES);\n  m_edgeGroup=PrefuseLib.getGroupName(graph,Graph.EDGES);\n  this.maxIter=maxIter;\n}\n", "nl": "Create a new FruchtermanReingoldLayout"}
{"code": "public static Map<String,String> parseKeyAndValueToMap(String source){\n  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,true);\n}\n", "nl": "parse key-value pairs to map, ignore empty key, ignore space at the begging or end of key and value"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isApplicable(){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void testTypesHashMapField() throws Exception {\n  AnObject empty=new AnObject();\n  AnObject full=helper.fill(new AnObject());\n  Object value=getPropertyValue(full,\"mapField\");\n  assertTrue(value instanceof HashMap);\n  assertTrue(helper.areEquals(full,full));\n  assertFalse(helper.areEquals(empty,full));\n}\n", "nl": "Test typed Map"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isGlobalFindable(){\n  return classificationViewer.getTree().getNumberOfNodes() > 0;\n}\n", "nl": "is a global find possible?"}
{"code": "public void testAddBroadcastReceiver() throws Exception {\n  final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyReceiver.java\",\"src/com/example/DummyReceiver.java\");\n  myFixture.configureFromExistingVirtualFile(file);\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,\"Add broadcast receiver to manifest\");\n  assertNotNull(action);\n  action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());\n  myFixture.checkResultByFile(\"AndroidManifest.xml\",\"intentions/DummyReceiver_manifest_after.xml\",true);\n}\n", "nl": "Test that \"add broadcast receiver\" quick intention shows up and works"}
{"code": "private String fetchTableName(String query){\n  for (  String tableName : mTableNames) {\n    if (query.contains(tableName)) {\n      return tableName;\n    }\n  }\n  return \"\";\n}\n", "nl": "Fetch the table name from query"}
{"code": "public final void addIDConstraintDecl(XSElementDecl elmDecl,IdentityConstraint decl){\n  elmDecl.addIDConstraint(decl);\n  fGlobalIDConstraintDecls.put(decl.getIdentityConstraintName(),decl);\n}\n", "nl": "register one identity constraint"}
{"code": "public static boolean removeFromCache(String imageUri,DiskCache diskCache){\n  File image=diskCache.get(imageUri);\n  return image != null && image.exists() && image.delete();\n}\n", "nl": "Removed cached image file from disk cache (if image was cached in disk cache before)"}
{"code": "public static <T>List<T> stringToList(String val,Class<T> type){\n  String[] tokens=trim(val).split(\",\");\n  return Arrays.stream(tokens).map(null).collect(Collectors.toList());\n}\n", "nl": "Converts comma separated string to List"}
{"code": "private boolean isViewWasReused(){\n  String currentCacheKey=engine.getLoadingUriForView(imageAware);\n  return !memoryCacheKey.equals(currentCacheKey);\n}\n", "nl": "Checks whether memory cache key (image URI) for current ImageAware is actual"}
{"code": "public GroupsEditQuery marketCountry(List<Integer> value){\n  return unsafeParam(\"market_country\",value);\n}\n", "nl": "Market delivery regions"}
{"code": "private void checkMatrixDimensions(Matrix B){\n  if (B.m != m || B.n != n) {\n    throw new IllegalArgumentException(\"Matrix dimensions must agree.\");\n  }\n}\n", "nl": "Check if size(A) == size(B)"}
{"code": "public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data){\n  return normalize(schema,data,0,1,Collections.<String>emptyList());\n}\n", "nl": "Scale all data  0 to 1"}
{"code": "public void updateDuration(){\n  if (!Double.isNaN(getXmin()) && !Double.isNaN(getXmax())) {\n    setDuration(getXmax() - getXmin());\n  }\n}\n", "nl": "recalculate and set duration based on current start and end times"}
{"code": "public static int dpToPx(float dp,Resources resources){\n  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());\n  return (int)px;\n}\n", "nl": "Convert Dp to Pixel"}
{"code": "public void spin(){\n  lastTimeAnimated=SystemClock.uptimeMillis();\n  isSpinning=true;\n  invalidate();\n}\n", "nl": "Puts the view on spin mode"}
{"code": "public NGramHistoDocument(){\n  Graph=new DocumentNGramGraph();\n  Histogram=new DocumentNGramHistogram();\n}\n", "nl": "Creates a new instance of NGramHistoDocument"}
{"code": "@SuppressWarnings(\"deprecation\") public void exit(Context context,boolean isClearCache){\n  try {\n    finishAllActivity();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n", "nl": "exit System"}
{"code": "public boolean declaresField(String subsignature){\n  checkLevel(SIGNATURES);\n  for (  SootField field : fields)   if (field.getSubSignature().equals(subsignature))   return true;\n  return false;\n}\n", "nl": "Does this class declare a field with the given subsignature?"}
{"code": "public UtilsGetServerTimeQuery(VkApiClient client,UserActor actor){\n  super(client,\"utils.getServerTime\",Integer.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean hasValidCredentials(){\n  return apiKey != null && !apiKey.isEmpty() && authToken != null && !authToken.isEmpty() && hasValidAuthenticatedUser();\n}\n", "nl": "Check if both API key and Auth Token are valid"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static void d(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg,throwable);\n}\n", "nl": "Send a DEBUG log message"}
{"code": "public MessagesGetChatUsersQueryWithChatIds(VkApiClient client,UserActor actor,Integer... chatIds){\n  super(client,\"messages.getChatUsers\",GetChatUsersChatIdsResponse.class);\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public VideoGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id"}
{"code": "public void load(Config config,String args[]) throws StartupException {\n  this.config=config;\n  Thread t=new Thread(this);\n  t.setName(this.toString());\n  t.setDaemon(false);\n  t.run();\n}\n", "nl": "Load a startup class"}
{"code": "public AirMapTrafficProperties(){\n}\n", "nl": "Initialize an AirMapTrafficProperties with default values"}
{"code": "public void disbandLegion(Legion legion){\n  for (  Integer memberObjId : legion.getLegionMembers()) {\n    this.allCachedLegionMembers.remove(getLegionMemberEx(memberObjId));\n  }\n  SiegeService.getInstance().cleanLegionId(legion.getLegionId());\n  updateAfterDisbandLegion(legion);\n  deleteLegionFromDB(legion);\n}\n", "nl": "This method will disband a legion and update all members"}
{"code": "public static byte[] toByteArray(Drawable drawable){\n  return toByteArray(toBitmap(drawable));\n}\n", "nl": "convert Drawable to byte array"}
{"code": "protected void notifyDataInvalidatedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onInvalidated();\n    }\n  }\n}\n", "nl": "Notifies observers about invalidating data"}
{"code": "public boolean isInUpdate(){\n  return docInUpdate;\n}\n", "nl": "are we currently updating the document?"}
{"code": "public static boolean isRestartActivity(){\n  InstantRunConfiguration configuration=InstantRunConfiguration.getInstance();\n  return configuration.RESTART_ACTIVITY;\n}\n", "nl": "Assuming instant run is enabled, does code patching require an activity restart in the given project?"}
{"code": "public boolean isSpawnedByPlayer(){\n  return x != 0 || y != 0 || z != 0;\n}\n", "nl": "Means the player has it spawned, not the game server"}
{"code": "Collection<? extends ClientRequestResult> handleProcessNamesRequest(final ClientRequest clientRequest){\n  Collection<ProcessNameResponse> names=new ArrayList<ProcessNameResponse>();\n  for (  Long processId : processCache.getKeys()) {\n    cern.c2mon.server.common.process.Process process=processCache.get(processId);\n    names.add(new ProcessNameResponseImpl(process.getName()));\n  }\n  return names;\n}\n", "nl": "Inner method which handles the process names request"}
{"code": "public void initAndRecoverFromDataStorage(boolean isWarm) throws RemoteException, CreateException, SpaceComponentsInitializeException {\n  _engine.init(isWarm,true);\n  _statistics=(JSpaceStatistics)getFilterObject(Constants.Statistics.STATISTICS_FILTER_NAME);\n  _workerManager=createWorkerManager();\n  _componentManager=new SpaceComponentManager(this);\n}\n", "nl": "Initialize main space components"}
{"code": "public StatsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"stats.get\",Utils.buildParametrizedType(List.class,Period.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MarketRestoreCommentQuery restoreComment(UserActor actor,int ownerId,int commentId){\n  return new MarketRestoreCommentQuery(getClient(),actor,ownerId,commentId);\n}\n", "nl": "Restores a recently deleted comment"}
{"code": "public DOMErrorImpl(short severity,XMLParseException exception){\n  fSeverity=severity;\n  fException=exception;\n  fLocator=createDOMLocator(exception);\n}\n", "nl": "Exctracts information from XMLParserException)"}
{"code": "public static Html create(String html){\n  return new Html(html);\n}\n", "nl": "create a Html object by html string"}
{"code": "protected GroupsEditQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n", "nl": "Community identifier"}
{"code": "private void drawShadows(Canvas canvas){\n  topShadow.setBounds(0,0,getWidth(),getHeight() / 2);\n  topShadow.draw(canvas);\n  bottomShadow.setBounds(0,getHeight() / 2,getWidth(),getHeight());\n  bottomShadow.draw(canvas);\n}\n", "nl": "Draws shadows on top and bottom of control"}
{"code": "public boolean isApplicable(){\n  ClassificationViewer viewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName(\"KEGG\");\n  return viewer != null && viewer.hasComparableData();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public PhotosEditAlbumQuery privacyComment(String... value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment"}
{"code": "@Override public void onMapReady(MapboxMap mapboxMap){\n  map=mapboxMap;\n  map.setOnMapLongClickListener(this);\n}\n", "nl": "MapBox method that is called when the map is ready"}
{"code": "public static <ParentActivity extends AppCompatActivity & OnNavigationItemSelectedListener>DrawerDelegate attach(@Nullable ParentActivity parent){\n  return attach(parent.getSupportFragmentManager());\n}\n", "nl": "Attach the fragment to hold the drawer and toolbar"}
{"code": "public MessagesSearchDialogsQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.searchDialogs\",Utils.buildParametrizedType(List.class,SearchDialogsResponse.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "void submit(ProcessAndDisplayImageTask task){\n  initExecutorsIfNeed();\n  taskExecutorForCachedImages.execute(task);\n}\n", "nl": "Submits task to execution pool"}
{"code": "public void startAction(MotionEvent me){\n  OnChartGestureListener l=mChart.getOnChartGestureListener();\n  if (l != null)   l.onChartGestureStart(me,mLastGesture);\n}\n", "nl": "Calls the OnChartGestureListener to do the start callback"}
{"code": "public void sendConfirmationEmail(final String subject,final String[] recipients,final String url){\n  MimeMessagePreparator preparator=null;\n  this.send(preparator);\n}\n", "nl": "User creation confirmation email"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show gridLines=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public static Configuration createEquipment(){\n  Configuration configuration=new Configuration();\n  Equipment equipment=Equipment.create(\"E_INI_TEST\",\"handlerClass\").id(15L).statusTag(StatusTag.create(\"E:STATUS\").id(200L).build()).commFaultTag(CommFaultTag.create(\"E:Comm\").id(201L).build()).build();\n  equipment.setProcessId(5L);\n  configuration.addEntity(equipment);\n  return configuration;\n}\n", "nl": "Equipment id: 15 statusTagId: 200 commFaultTagId: 201"}
{"code": "@Override protected void createItemsLayout(){\n  if (mItemsLayout == null) {\n    mItemsLayout=new LinearLayout(getContext());\n    mItemsLayout.setOrientation(LinearLayout.HORIZONTAL);\n  }\n}\n", "nl": "Creates item layouts if necessary"}
{"code": "@Override public boolean autoAddZero(){\n  return false;\n}\n", "nl": "performance improvement: since we start directly at the sources, we do not  need to generate additional taints unconditionally"}
{"code": "public static void initAcceptableFilterList(EntryArrivedRemoteEvent theEvent,int capacity){\n  theEvent.initAcceptableFilterList(capacity);\n}\n", "nl": "init the acceptableFilterList by desired capacity"}
{"code": "protected MarketCreateCommentQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item id"}
{"code": "public BoardGetTopicsQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"board.getTopics\",GetTopicsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public int compareTo(ResourceUsage o){\n  double required=o.limit - o.usage;\n  double available=limit - usage;\n  return Double.compare(available,required);\n}\n", "nl": "this may be wrong since we are comparing available and not the usage"}
{"code": "public static String capitalizeFirstLetter(String original){\n  if (original == null || original.length() == 0) {\n    return original;\n  }\n  return original.substring(0,1).toUpperCase() + original.substring(1).toLowerCase();\n}\n", "nl": "Capital only first letter"}
{"code": "private void sleep(){\n  state=STATE.SLEEPING;\n  this.nextActTime+=(SLEEP_TIME_MS + (int)(SLEEP_FUZZ * rnd.nextDouble())) * MockTimeSource.NANOSECONDS_IN_MILLISECOND;\n}\n", "nl": "Didn't get tokens, sleep for some time"}
{"code": "public void init(final Long aliveTagInterval,final String confName){\n  this.aliveTagInterval=aliveTagInterval;\n  this.confName=confName;\n}\n", "nl": "Init function"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,BucketActivity.class);\n  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n  _context.startActivity(intent);\n}\n", "nl": "Allows to start this activity"}
{"code": "public static NumericSummaryTable create(String tableName){\n  return new NumericSummaryTable(tableName);\n}\n", "nl": "Returns a new, empty table (without rows or columns) with the given name"}
{"code": "public void assignSerializer(JsonSerializer<Object> ser){\n  if (_serializer != null && _serializer != ser) {\n    throw new IllegalStateException(\"Can not override serializer\");\n  }\n  _serializer=ser;\n}\n", "nl": "Method called to assign value serializer for property"}
{"code": "public GenericValue queryOne() throws GenericEntityException {\n  GenericValue result=EntityUtil.getOnly(queryList());\n  return result;\n}\n", "nl": "Executes the EntityQuery and a single result record"}
{"code": "public static ViewAction checkViewAction(ViewAssertion viewAssertion){\n  return ViewActions.actionWithAssertions(new CheckAssertionAction(viewAssertion));\n}\n", "nl": "Perform a check against a view that only allows actions such as a view found by RecyclerViewActions"}
{"code": "public static RespJson buildSuccessResponse(Object data){\n  RespJson respJson=new RespJson();\n  respJson.setCode(ResponseCode.SUCCESS.getCode());\n  respJson.setData(data);\n  respJson.setMsg(StringConstant.EMPTY_STRING);\n  return respJson;\n}\n", "nl": "Construct Success Response"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{1.49599158008e-06,0.000149550440335,0.000933076881878,0.00370933207799,0.0144742330437,1.49599158008e-06,0.000149550440335,0.000933076881878,0.00370933207799,0.0144742330437};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public MarketSearchQuery search(UserActor actor,int ownerId){\n  return new MarketSearchQuery(getClient(),actor,ownerId);\n}\n", "nl": "Searches market items in a community's catalog"}
{"code": "public void delete(PushLog log){\n  configPushLogDao.unBindApp(log);\n  configPushLogDao.delete(log.getId());\n}\n", "nl": "Delete the config"}
{"code": "public void updateWithItemHandler(K key){\n  remove(key);\n  put(key,itemHandler.get(key));\n}\n", "nl": "Updates the given key by calling the itemhandler's get method"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_PING_RESULT(String value0){\n  return new SM_SYSTEM_MESSAGE(1400118,value0);\n}\n", "nl": "Network Status: %0 ms"}
{"code": "public synchronized void recordStatisticsForDriver(QueryStatistic statistic,String queryId){\n}\n", "nl": "Below method will be used to add the statistics"}
{"code": "@Deprecated public ItemStack(final int type){\n  this(type,1);\n}\n", "nl": "Defaults stack size to 1, with no extra data"}
{"code": "@Override public void invalidate(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){\n  carbonLRUCache.remove(getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),CacheType.REVERSE_DICTIONARY));\n}\n", "nl": "This method will remove the cache for a given key"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public DividerItemDecoration(Context context){\n  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);\n  mDivider=styledAttributes.getDrawable(0);\n  styledAttributes.recycle();\n}\n", "nl": "Default divider will be used"}
{"code": "public void onSuccess(int statusCode,Header[] headers,JSONObject response){\n}\n", "nl": "Returns when request succeeds"}
{"code": "@Override public void startExecuting(){\n  if (entity.getGrowingAge() < 1 && !entity.isInLove()) {\n    if (entity instanceof EntityWolf) {\n      if (((EntityWolf)entity).isSitting())       return;\n    }\n    this.entity.getNavigator().tryMoveToXYZ(targetItem.posX,targetItem.posY,targetItem.posZ,1.0F);\n  }\n}\n", "nl": "Execute a one shot task or start executing a continuous task"}
{"code": "public static boolean putFloat(Context context,String key,float value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putFloat(key,value);\n  return editor.commit();\n}\n", "nl": "put float preferences"}
{"code": "public Bindings add(String property,String stateProperty,JToggleButton button,JTextArea textArea){\n  registerPropertyChangeListener(button);\n  registerPropertyChangeListener(textArea);\n  return add(new OptJTextAreaBinding(property,stateProperty,button,textArea));\n}\n", "nl": "Handles Optional JTextArea lists"}
{"code": "public void normal(){\n}\n", "nl": "normal status"}
{"code": "@BindingAdapter({\"items\",\"view_provider\"}) public static void bindRecyclerViewAdapter(RecyclerView recyclerView,Observable<List<ViewModel>> items,ViewProvider viewProvider){\n  RecyclerView.Adapter previousAdapter=recyclerView.getAdapter();\n  BindingUtils.bindAdapterWithDefaultBinder(recyclerView,items,viewProvider);\n  if (previousAdapter != null)   ExampleApplication.getRefWatcher(recyclerView.getContext()).watch(previousAdapter);\n}\n", "nl": "Binding Adapter Wrapper for checking memory leak"}
{"code": "public void characters(char[] ch,int start,int length) throws SAXException {\n  if (elementOn && isItem || elementOn) {\n    elementValue.append(new String(ch,start,length));\n  }\n}\n", "nl": "This is called to get the tags value"}
{"code": "private boolean hasBaseline(){\n  ConstraintAnchor anchor=mWidget.getAnchor(ConstraintAnchor.Type.BASELINE);\n  return anchor != null && anchor.isConnected();\n}\n", "nl": "Returns true if mWidget has a baseline"}
{"code": "public VideoReorderVideosQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){\n  super(client,\"video.reorderVideos\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public SortOrder(){\n}\n", "nl": "This class is never instantiated"}
{"code": "private void addCallbackMethod(String layoutFile,String callback){\n  addToMapSet(callbackMethods,layoutFile,callback);\n  if (includeDependencies.containsKey(layoutFile))   for (  String target : includeDependencies.get(layoutFile))   addCallbackMethod(target,callback);\n}\n", "nl": "Adds a callback method found in an XML file to the result set"}
{"code": "public NotesEditQuery(VkApiClient client,UserActor actor,int noteId,String title,String text){\n  super(client,\"notes.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n  title(title);\n  text(text);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean canFindAll(){\n  return true;\n}\n", "nl": "does this searcher support find all?"}
{"code": "public boolean isAutoRepaint(){\n  return autoRepaint;\n}\n", "nl": "Status of the component auto repainting"}
{"code": "public static boolean writeFile(String filePath,List<String> contentList){\n  return writeFile(filePath,contentList,false);\n}\n", "nl": "write file, the string list will be written to the begin of the file"}
{"code": "protected Set<D> computeNormalFlowFunction(FlowFunction<D> flowFunction,D d1,D d2){\n  return flowFunction.computeTargets(d2);\n}\n", "nl": "Computes the normal flow function for the given set of start and end abstractions-"}
{"code": "public static void json(String json){\n  Logger.json(json);\n}\n", "nl": "Formats the json content and print it"}
{"code": "public static double sigmoid(double x){\n  return 1.0 / (1.0 + Math.pow(Math.E,-x));\n}\n", "nl": "1 / 1 + exp(-x)"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public void close(){\n  if (null != inputStreamReader) {\n    CarbonUtil.closeStreams(inputStreamReader);\n  }\n}\n", "nl": "Below method will be used to clear all the stream"}
{"code": "public SpaceConnectResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public boolean contains(int value){\n  return lastIndexOf(value) >= 0;\n}\n", "nl": "Searches the list for <tt>value</tt>"}
{"code": "public GroupsCreateQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n", "nl": "Community description (ignored fof \"type\"=public)"}
{"code": "public void resetTime(){\n}\n", "nl": "Resets the audio clock"}
{"code": "public Configuration(Sentence sentence,Stack<Integer> stack,Queue<Integer> queue,List<Dependency> arcs){\n  this.sentence=sentence;\n  this.stack=stack;\n  this.queue=queue;\n  this.arcs=arcs;\n}\n", "nl": "Constructs a configuration: (sentence, stack, buffer, arcs)"}
{"code": "public boolean isApplyGlobalGroups(){\n  return this.applyGlobalGroups;\n}\n", "nl": "Gets if global or non server specific group memberships should be applied"}
{"code": "private String generateMapHtml(Map map,User user) throws IOException {\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  BufferedImage image=mapGenerationService.generateMapImageForUser(map,new Date(),null,578,440,user);\n  ImageIO.write(image,\"PNG\",baos);\n  return uploadImage(map.getUid(),baos.toByteArray());\n}\n", "nl": "Returns an absolute URL to an image representing the map input"}
{"code": "public PackageScanner usePatternFactory(PatternFactory factory){\n  this.patternFactory=factory;\n  return this;\n}\n", "nl": "Sets the pattern factory to use"}
{"code": "public void onShutdown(){\n  log.info(\"Starting data save on shutdown.\");\n  legionWhUpdateTask.cancel(false);\n  new LegionWhUpdateTask().run();\n  log.info(\"Data successfully saved.\");\n}\n", "nl": "Save data on shutdown"}
{"code": "public static void w(String tag,String msg){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  Log.w(tag,msg);\n}\n", "nl": "Send a WARNING log message"}
{"code": "public CM_BONUS_TITLE(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_TITLE_BONUS </tt> packet"}
{"code": "public void centerVertically(ConstraintWidget widget){\n  ConstraintAnchor top=getClosestVerticalWidgetAnchor(widget,true);\n  ConstraintAnchor bottom=getClosestVerticalWidgetAnchor(widget,false);\n  widget.connect(widget.getAnchor(ConstraintAnchor.Type.TOP),top,0);\n  widget.connect(widget.getAnchor(ConstraintAnchor.Type.BOTTOM),bottom,0);\n}\n", "nl": "center the given widget vertically"}
{"code": "public void pathValueToPixel(Path path){\n  path.transform(mMatrixValueToPx);\n  path.transform(mViewPortHandler.getMatrixTouch());\n  path.transform(mMatrixOffset);\n}\n", "nl": "transform a path with all the given matrices VERY IMPORTANT: keep order to value-touch-offset"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set colorMismatchesVsConsensus=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "private String readCurrentTime(){\n  SimpleDateFormat sdf=new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP);\n  String date=null;\n  date=sdf.format(new Date());\n  return date;\n}\n", "nl": "returns current time"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set sortreads=\");\n  String which=np.getWordMatchesIgnoringCase(\"alphabetically no\");\n  np.matchIgnoreCase(\";\");\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  inspectorWindow.setSortReadsAlphabetically(which.equalsIgnoreCase(\"alphabetically\"));\n}\n", "nl": "parses the given command and executes it"}
{"code": "public AccountSaveProfileInfoQuery screenName(String value){\n  return unsafeParam(\"screen_name\",value);\n}\n", "nl": "Set screen name"}
{"code": "public void refreshSelectLast(){\n  final int TIME_DELAY_REFRESH_SELECT_LAST=100;\n  handler.removeMessages(HANDLER_MESSAGE_REFRESH_LIST);\n  handler.removeMessages(HANDLER_MESSAGE_SELECT_LAST);\n  handler.sendEmptyMessageDelayed(HANDLER_MESSAGE_REFRESH_LIST,TIME_DELAY_REFRESH_SELECT_LAST);\n  handler.sendEmptyMessageDelayed(HANDLER_MESSAGE_SELECT_LAST,TIME_DELAY_REFRESH_SELECT_LAST);\n}\n", "nl": "refresh and select the last"}
{"code": "public void openThriftReader(String filePath) throws IOException {\n  thriftReader=new ThriftReader(filePath);\n  thriftReader.open();\n}\n", "nl": "Open the thrift reader"}
{"code": "public InvalidPluginException(){\n}\n", "nl": "Constructs a new InvalidPluginException"}
{"code": "public boolean needParticipantsJoin() throws RemoteException {\n  return true;\n}\n", "nl": "returns true if this mgr which requires that the txn participants join into the txn in contrary to a mgr which the participants are known prior to txn propagation"}
{"code": "public DocumentNGramHistogram(int iMinSize,int iMaxSize){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  DataString=\"\";\n  NGramHistogram=new HashMap();\n}\n", "nl": "Creates a new instance of INSECTDocumentNGrams"}
{"code": "public static void i(String msg){\n  if (LOG_ENABLE) {\n    Log.i(TAG,buildMsg(msg));\n  }\n}\n", "nl": "info log"}
{"code": "public void actionPerformed(ActionEvent ev){\n  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),\"Choose label fill color\",null);\n  if (color != null)   execute(\"set labelFillColor=\" + color.getRed() + \" \"+ color.getGreen()+ \" \"+ color.getBlue()+ \";\");\n}\n", "nl": "action to be performed"}
{"code": "public PanControl(int mouseButton,boolean panOverItem){\n  m_button=mouseButton;\n  m_panOverItem=panOverItem;\n}\n", "nl": "Create a new PanControl"}
{"code": "public SimpleModule build(ResourceRegistry resourceRegistry,boolean isClient){\n  SimpleModule simpleModule=new SimpleModule(JSON_API_MODULE_NAME,new Version(1,0,0,null,null,null));\n  simpleModule.addSerializer(new ContainerSerializer(resourceRegistry,isClient)).addSerializer(new DataLinksContainerSerializer(resourceRegistry)).addSerializer(new RelationshipContainerSerializer(resourceRegistry,isClient)).addSerializer(new LinkageContainerSerializer()).addSerializer(new BaseResponseSerializer(resourceRegistry)).addSerializer(new ErrorResponseSerializer());\n  return simpleModule;\n}\n", "nl": "Creates Katharsis Jackson module with all required serializers"}
{"code": "public FaveGetPhotosQuery photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n", "nl": "Set photo sizes"}
{"code": "public GroupsEditQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "Community name"}
{"code": "public static void putFloat(String key,float value){\n  prefs.edit().putFloat(key,value).commit();\n}\n", "nl": "Set a float value in the preferences editor, to be written back once"}
{"code": "private void broadcastToLeagueMembers(final Player player){\n  player.getPlayerAlliance2().getLeague().sendPacket(new SM_MESSAGE(player,message,type));\n}\n", "nl": "Sends message to all league members"}
{"code": "public static boolean isExternalMemoryFull(){\n  return getAvailableExternalMemorySize() - AVALIABLE_EXTERNAL_MEMORY_SIZE < 0;\n}\n", "nl": "Judge whether external memory is full"}
{"code": "protected void resetCommon() throws XNIException {\n  int count=fCommonComponents.size();\n  for (int i=0; i < count; i++) {\n    XMLComponent c=(XMLComponent)fCommonComponents.get(i);\n    c.reset(this);\n  }\n}\n", "nl": "reset all common components before parsing"}
{"code": "public void update(float ipd,float yawHeadDegrees,float pitchHeadDegrees,float rollHeadDegrees,float worldYawOffsetDegrees,float worldPitchOffsetDegrees,float worldRollOffsetDegrees){\n}\n", "nl": "Updates the model with the current head orientation"}
{"code": "public static String format(Object... parts){\n  StringBuilder key=new StringBuilder(DIABLO_NAMESPACE);\n  for (  Object part : parts) {\n    key.append(KEY_DELIMITER).append(part);\n  }\n  return key.toString();\n}\n", "nl": "Format impl key"}
{"code": "public void repaint(){\n  mySceneDraw.repaint();\n}\n", "nl": "Call repaint on the scene draw"}
{"code": "@Override public boolean equals(Object other){\n  if (this == other)   return true;\n  if (other == null || getClass() != other.getClass())   return false;\n  DictionaryColumnUniqueIdentifier that=(DictionaryColumnUniqueIdentifier)other;\n  if (!carbonTableIdentifier.equals(that.carbonTableIdentifier))   return false;\n  return columnIdentifier.equals(that.columnIdentifier);\n}\n", "nl": "overridden equals method"}
{"code": "public INSECTCategoryDB(){\n}\n", "nl": "Creates a new instance of INSECTCategoryDB"}
{"code": "public GroupsGetInvitedUsersQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset to select a certain subset of users"}
{"code": "public boolean isComponentGroupPresent(String groupName){\n  return getComponentGroupNames().contains(groupName);\n}\n", "nl": "This method checks if specified component group is present in Sidekick"}
{"code": "public synchronized void resetTime(){\n}\n", "nl": "Resets the audio clock"}
{"code": "public MarketGetAlbumsQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset based on a first matching item to get a certain items subset"}
{"code": "public PhotosGetCommentsQuery accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n", "nl": "Set access key"}
{"code": "public boolean isLoaded(MapType mapType){\n  return loadedMaps.contains(mapType);\n}\n", "nl": "is the named parsing method loaded"}
{"code": "public static StatelessIntHash murmur3_32(int seed){\n  return Hashes.getStatelessInt(new MurmurHash3Parameters(MurmurHash3Variant.X86_32,seed));\n}\n", "nl": "Returns a hash function implementing the MurmurHash3 algorithm, 32-bit x86 variant, with the given seed value"}
{"code": "public WidgetsGetCommentsQuery order(String value){\n  return unsafeParam(\"order\",value);\n}\n", "nl": "Set order"}
{"code": "public boolean isCentralDB(){\n  return _isCentralDB;\n}\n", "nl": "returns an indication if the underlying DB is a central DB common to several cluster members"}
{"code": "public static String millisToString(long millis){\n  return Strings.millisToString(millis,false);\n}\n", "nl": "Convert time to a string"}
{"code": "static public void check(long got,long expected) throws IOException {\n  if (expected != got)   throw new IOException(\"RMA2 file corrupt? Expected: \" + expected + \", got: \"+ got);\n}\n", "nl": "check whether value read is the same as the value expected"}
{"code": "public void onTargetDismissed(TapTargetView view,boolean userInitiated){\n}\n", "nl": "Signals that the tap target has been dismissed"}
{"code": "public boolean isGameRunning(){\n  return isGameRunning;\n}\n", "nl": "get the state about game Running Boolean"}
{"code": "public MarketGetQueryWithExtended albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Identifier of an album"}
{"code": "protected LeadsCheckUserQuery leadId(int value){\n  return unsafeParam(\"lead_id\",value);\n}\n", "nl": "Set lead id"}
{"code": "public AdsCreateCampaignsQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.createCampaigns\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAircraft && getAircraftId().equals(((AirMapAircraft)o).getAircraftId());\n}\n", "nl": "Comparison based on ID"}
{"code": "@Override public void onDragStateChange(int state){\n}\n", "nl": "STATE_IDLE 0 STATE_DRAGGING 1 STATE_SETTLING 2"}
{"code": "public boolean isMember(int playerObjId){\n  return legionMembers.contains(playerObjId);\n}\n", "nl": "This function checks if object id is in list"}
{"code": "@NotNull private static ModuleDependency addAndroidModule(@NotNull AndroidLibrary library,@NotNull String gradleProjectPath,@NotNull DependencySet dependencies,@NotNull DependencyScope scope,@NotNull Set<File> unique,boolean supportsDependencyGraph){\n  ModuleDependency dependency=new ModuleDependency(gradleProjectPath,scope);\n  dependencies.add(dependency);\n  addTransitiveDependencies(library,dependencies,scope,unique,supportsDependencyGraph);\n  return dependency;\n}\n", "nl": "Add an Android module, along with any recursive library dependencies"}
{"code": "public MessagesCreateChatQuery(VkApiClient client,UserActor actor,int... userIds){\n  super(client,\"messages.createChat\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addDeleted(boolean deleted){\n  query.append(\" +deleted:\" + deleted);\n}\n", "nl": "Adds +deleted to the query"}
{"code": "public double secondsSinceStart(){\n  return (timeSinceStart()) / 1000.0;\n}\n", "nl": "Returns the number of seconds since the timer started"}
{"code": "public void put(String key,Object ser){\n  put(key,ser,null);\n}\n", "nl": "*************** put"}
{"code": "public void showMetrics(){\n}\n", "nl": "Shows metrics for this audio player"}
{"code": "@PickTriggerResult @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2) public int fromDocuments(final boolean pAllowMultiple){\n  return this.triggerPick(this.prepareDocumentsIntent(pAllowMultiple),QiPick.REQ_DOCUMENTS);\n}\n", "nl": "Launch documents pick flow"}
{"code": "public AppsSendRequestQuery key(String value){\n  return unsafeParam(\"key\",value);\n}\n", "nl": "Special string key to be sent with the request"}
{"code": "protected SecureGetUserLevelQuery userIds(int... value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids"}
{"code": "@Override public void readPacketData(PacketBuffer buf) throws IOException {\n  AbstractChannel<?> channel=ChannelManager.get(buf.readInt());\n  packet=channel.read(buf);\n}\n", "nl": "Reads the packet from the given buffer"}
{"code": "protected void onPathPositionUpdate(Path invokedPath,float distance,float[] pos,float[] tan){\n}\n", "nl": "call when path's position changed"}
{"code": "private static boolean isAccented(Item item){\n  return (item.getFeatures().isPresent(\"accent\") || item.getFeatures().isPresent(\"endtone\"));\n}\n", "nl": "Determines if the given item is accented"}
{"code": "public static void endFlight(AirMapFlight flight,AirMapCallback<AirMapFlight> listener){\n  String url=String.format(flightEndUrl,flight.getFlightId());\n  AirMap.getClient().post(url,new GenericOkHttpCallback(listener,AirMapFlight.class));\n}\n", "nl": "End a flight"}
{"code": "public String[] upload_file(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_file(group_name,file_buff,0,file_buff.length,file_ext_name,meta_list);\n}\n", "nl": "upload file to storage server (by file buff)"}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?"}
{"code": "public static String formatQuantity(long quantity){\n  return formatQuantity((double)quantity);\n}\n", "nl": "Formats an int representing a quantity into a string"}
{"code": "public WidgetsGetCommentsQuery pageId(String value){\n  return unsafeParam(\"page_id\",value);\n}\n", "nl": "Set page id"}
{"code": "public boolean isEmptyResult(){\n  return _results.getRowNumber() == 0;\n}\n", "nl": "Gets whether the result is empty"}
{"code": "GitReference resolveReference(String reference) throws RepoException {\n  return new GitReference(this,revParse(reference));\n}\n", "nl": "Resolve a reference"}
{"code": "public final String toString(){\n  if (this.objectData == null) {\n    this.setObjectData(STR_LINE);\n  }\n  return this.objectData;\n}\n", "nl": "Converts a FallbackImpl object into a string representation"}
{"code": "public UsersSearchQuery fromList(List<String> value){\n  return unsafeParam(\"from_list\",value);\n}\n", "nl": "Set from list"}
{"code": "public void destroy(){\n  BackgroundExecutor.cancelAll(\"\",true);\n  UiThreadExecutor.cancelAll(\"\");\n}\n", "nl": "Cancel all current operations"}
{"code": "public AdsGetSuggestionsQuery ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n", "nl": "Set ids"}
{"code": "public SM_QUEST_ACTION(int questId,int status,int step){\n  this.action=1;\n  this.questId=questId;\n  this.status=status;\n  this.step=step;\n}\n", "nl": "Accept Quest(1)"}
{"code": "public void normal(){\n  mHintView.setVisibility(View.VISIBLE);\n  mProgressBar.setVisibility(View.GONE);\n}\n", "nl": "normal status"}
{"code": "private boolean isFieldPackagePrivate(Element attribute){\n  Set<Modifier> modifiers=attribute.getModifiers();\n  return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE);\n}\n", "nl": "Checks if the given field has package-private visibility"}
{"code": "public void logStatistics(){\n}\n", "nl": "Below method will be used to log the statistic"}
{"code": "public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent,List<Integer> skipIds){\n  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,skipIds);\n}\n", "nl": "Show empty view when there are not data to show"}
{"code": "protected void notifyChangingListeners(int oldValue,int newValue){\n  for (  OnWheelChangedListener listener : changingListeners) {\n    listener.onChanged(this,oldValue,newValue);\n  }\n}\n", "nl": "Notifies changing listeners"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed"}
{"code": "public AdsCreateTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,String name){\n  super(client,\"ads.createTargetGroup\",CreateTargetGroupResponse.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  name(name);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static StorableTimeFence inMondayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(MONDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid on Monday in the given daily time frame"}
{"code": "@Override protected void onPreExecute(){\n  mCurrentDialog=IndeterminateProgressDialog.newInstance(R.string.wait_a_moment,false);\n  mCurrentDialog.show(getSupportFragmentManager(),WAIT_DIALOG_TAG);\n}\n", "nl": "Updates the UI before trying the movement"}
{"code": "static <T>AnyVal<Object> anyHeadTail(AnyVal<T> head,ConsList<T> tail){\n  return new AnyConsImpl(null,head,tail,null);\n}\n", "nl": "Return a new AnyVal that matches any head of a list and the given tail of a list"}
{"code": "public static void printLogs(){\n  System.out.println(getLogString());\n}\n", "nl": "Print out the log for checking"}
{"code": "private static int nextPowerOfTwo(final int i){\n  return Integer.highestOneBit(i) << 1;\n}\n", "nl": "Find the smallest power of two greater than the input value"}
{"code": "public void resetHighThreshold(){\n  this.currentHighThreshold=highThreshold;\n}\n", "nl": "Reset the currentHighThreshold to tbe original highThreshold value"}
{"code": "public static String unEscapeString(String str){\n  return unEscapeString(str,ESCAPE_CHAR,COMMA);\n}\n", "nl": "Unescape commas in the string using the default escape char"}
{"code": "public BoardRestoreCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId,int commentId){\n  super(client,\"board.restoreComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "TestType(final String name){\n  this.name=name;\n}\n", "nl": "Set test name"}
{"code": "public void onEmojiconInputEvent(CharSequence emojiContent){\n  editText.append(emojiContent);\n}\n", "nl": "append emoji icon to editText"}
{"code": "public void pls(){\n  mDna.evolve();\n}\n", "nl": "Run the flow"}
{"code": "@deprecated public ComposedCharIter(){\n  this(false,0);\n}\n", "nl": "/*    "}
{"code": "protected boolean isEmpty(){\n  return children.isEmpty() || getItemCount(children) == 0;\n}\n", "nl": "Whether a section's contents are visually empty"}
{"code": "public NewsfeedGetCommentsQuery filters(List<NewsfeedGetCommentsFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Filters to apply"}
{"code": "public double norm2(){\n  return s[0];\n}\n", "nl": "Two norm"}
{"code": "public void decreaseShield(){\n  this.shield--;\n  if (shield <= 0)   this.isDead=true;\n}\n", "nl": "decrease shield if the shield value down then 0, this unit will be dead"}
{"code": "@Override public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n", "nl": "DOM Level 3"}
{"code": "public WidgetsGetCommentsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Set count"}
{"code": "public MarketCreateCommentQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n", "nl": "Set guid"}
{"code": "public WishlistComponentCursor queryWishlistComponents(long id){\n  return mHelper.queryWishlistComponents(id);\n}\n", "nl": "WISHLIST COMPONENT QUERIES"}
{"code": "public StorageGetQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public LeadsMetricHitQuery(VkApiClient client,UserActor actor,String data){\n  super(client,\"leads.metricHit\",MetricHitResponse.class);\n  accessToken(actor.getAccessToken());\n  data(data);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void reportError(String key,Object[] arguments) throws XNIException {\n  throw new XNIException((fErrorReporter.getMessageFormatter(XPointerMessageFormatter.XPOINTER_DOMAIN)).formatMessage(fErrorReporter.getLocale(),key,arguments));\n}\n", "nl": "Reports an XPointer error"}
{"code": "public WriteEntryResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public AgeFileFilter(long cutoff){\n  this(cutoff,true);\n}\n", "nl": "Constructs a new age file filter for files equal to or older than a certain cutoff"}
{"code": "public static int checkTinkerPackage(Context context,int tinkerFlag,File patchFile,ShareSecurityCheck securityCheck){\n  int returnCode=checkSignatureAndTinkerID(context,patchFile,securityCheck);\n  if (returnCode == ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    returnCode=checkPackageAndTinkerFlag(securityCheck,tinkerFlag);\n  }\n  return returnCode;\n}\n", "nl": "thinker package check"}
{"code": "protected void stopListening(){\n  mouseListener.stopListening();\n}\n", "nl": "Stop listening to the mouse for movement"}
{"code": "public SpaceRemoteEvent(){\n  super(EMPTY_STRING,0,0,null);\n}\n", "nl": "Required for Externalizable"}
{"code": "public SecureSetCounterQuery counters(List<String> value){\n  return unsafeParam(\"counters\",value);\n}\n", "nl": "Set counters"}
{"code": "public FaveGetPostsQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getPosts\",GetPostsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean isSdcardExist(){\n  if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED))   return true;\n else   return false;\n}\n", "nl": "check if sdcard exist"}
{"code": "private void sourceIteratorExhaushted(){\n  if (_logger.isLoggable(Level.FINEST))   _logger.finest(\"shared iterator source wrapped iterator is exhausted [\" + _identifier + \"]\");\n  _sourceIteratorExhausted=true;\n}\n", "nl": "Called once the source iterator has no more objects"}
{"code": "public void selectAll(boolean select){\n  if (select) {\n    table.getSelectionModel().selectAll();\n  }\n else {\n    table.getSelectionModel().clearSelection();\n  }\n}\n", "nl": "set select state of all objects"}
{"code": "public SM_RESTORE_CHARACTER(int chaOid,boolean success){\n  this.chaOid=chaOid;\n  this.success=success;\n}\n", "nl": "Constructs new <tt>SM_RESTORE_CHARACTER </tt> packet"}
{"code": "@Override public IString2IntegerMap create(IName2IdMap label2id,String fileName,ProgressListener progress) throws IOException, CanceledException {\n  if (String2IntegerFileBasedABinMap.isTableFile(fileName))   return new String2IntegerFileBasedABinMap(fileName);\n else   return new Accession2IdMap(label2id,fileName,progress);\n}\n", "nl": "create an accession to integer map from the named file"}
{"code": "public void release(){\n  if (_entries != null)   _entries.freeSLHolder(_pos);\n  _pos=null;\n  _entries=null;\n}\n", "nl": "Release of this SLHolder resource"}
{"code": "public final Account removeAccountFromGameServer(int accountId){\n  return accountsOnGameServer.remove(accountId);\n}\n", "nl": "Remove account from this GameServer"}
{"code": "public BoardEditCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId,int commentId){\n  super(client,\"board.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static int calcCount(int totalhosts,int vcclustersize){\n  final Float f=((float)totalhosts / (float)vcclustersize);\n  final int i=(int)Math.ceil(f);\n  return i;\n}\n", "nl": "Calculate cluster size"}
{"code": "private static void dumpAudioTypes(){\n  AudioFileFormat.Type[] types=AudioSystem.getAudioFileTypes();\n  for (int i=0; i < types.length; i++) {\n    System.out.println(types[i].getExtension());\n  }\n}\n", "nl": "Dumps the possible audio output file types"}
{"code": "public void provideStepResult(ConditionStatus status){\n  LOG.debug(\"Evaluated loadable condition \" + progressData.peekLast().getLoadableComponentInfo() + \" with status \"+ status.getMessage());\n  progressData.peekLast().setStepStatus(status);\n}\n", "nl": "Sets the condition evaluation status after evaluation"}
{"code": "public BoardGetCommentsQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void updateDisplayName(){\n  setDisplayName(computeDisplayName());\n}\n", "nl": "Updates the display name in this configuration based on the values and override settings"}
{"code": "public static Table read(String fileName,boolean header,char delimiter) throws IOException {\n  ColumnType[] columnTypes=detectColumnTypes(fileName,header,delimiter);\n  return read(columnTypes,true,delimiter,fileName);\n}\n", "nl": "Retuns the given file after autodetecting the column types, or trying to"}
{"code": "public GroupsEditQuery publicSubcategory(Integer value){\n  return unsafeParam(\"public_subcategory\",value);\n}\n", "nl": "Public page subcategory"}
{"code": "public boolean isSelectionFindable(){\n  return false;\n}\n", "nl": "is a selection find possible"}
{"code": "public Builder showVerticalLineWhenStepsAreCollapsed(boolean showVerticalLineWhenStepsAreCollapsed){\n  this.showVerticalLineWhenStepsAreCollapsed=showVerticalLineWhenStepsAreCollapsed;\n  return this;\n}\n", "nl": "Specify whether or not the vertical lines should be displayed when steps are collapsed"}
{"code": "private Button createRadio(Composite parent,String label,int span){\n  Button button=new Button(parent,SWT.RADIO);\n  button.setText(label);\n  GridData data=new GridData();\n  data.horizontalSpan=span;\n  button.setLayoutData(data);\n  return button;\n}\n", "nl": "creates a radio button"}
{"code": "public static void applyForPermit(AirMapAvailablePermit permit,@Nullable AirMapCallback<AirMapPilotPermit> callback){\n  PermitService.applyForPermit(permit,callback);\n}\n", "nl": "Apply for a permit"}
{"code": "public void parse(XMLInputSource inputSource) throws IOException {\n  config.parse(inputSource);\n}\n", "nl": "Delegates parsing to SchemaParsingConfig"}
{"code": "private void addCachedLegion(Legion legion){\n  this.allCachedLegions.add(legion);\n}\n", "nl": "This method will add a new legion to the cache"}
{"code": "protected void addNameToAST(String name){\n  if (sootNameToAST == null) {\n    sootNameToAST=new HashMap<String,Node>();\n  }\n  sootNameToAST.put(name,astNode);\n}\n", "nl": "add name to AST to map - used mostly for inner and non public top-level classes"}
{"code": "public AccessToken accessToken(String code){\n  return getClient(null);\n}\n", "nl": "<p>Get AccessToken</p>"}
{"code": "public boolean rightAllowed(){\n  return (myFlags & RIGHT_EDGE) != 0;\n}\n", "nl": "Returns true if this policy allows resizing the right edge"}
{"code": "public void testStyleParentRename() throws Throwable {\n  doTestStyleInheritance(\"styles13.xml\",\"styles13_after.xml\",\"myStyle42\");\n}\n", "nl": "Test the renaming of the parent of a style"}
{"code": "public SpaceTypeDescriptorBuilder fifoGroupingProperty(String fifoGroupingPropertyPath){\n  if (fifoGroupingPropertyPath == null)   throw new IllegalArgumentException(\"Argument cannot be null - 'fifoGroupingPropertyPath'.\");\n  if (_fifoGroupingPropertyPath != null)   throw new IllegalStateException(\"Cannot set fifo grouping to '\" + fifoGroupingPropertyPath + \"' - it was already set to '\"+ _fifoGroupingPropertyPath+ \"'.\");\n  validateNoCollectionPath(fifoGroupingPropertyPath);\n  this._fifoGroupingPropertyPath=fifoGroupingPropertyPath;\n  return this;\n}\n", "nl": "Sets the fifo grouping property"}
{"code": "public static ULong ulong(String value) throws NumberFormatException {\n  return value == null ? null : ULong.valueOf(value);\n}\n", "nl": "Create an <code>unsigned long</code>"}
{"code": "protected void loadUnitDatabase(String audioTimelineFileName,String basenameTimelineFileName,String unitFileName) throws IOException, MaryConfigurationException {\n  unitDB=new UnitDatabase();\n  UnitFileReader unitFileReader=new UnitFileReader(unitFileName);\n  TimelineReader audioTimelineReader=loadAudioTimeline(audioTimelineFileName);\n  TimelineReader basenameTimelineReader=new TimelineReader(basenameTimelineFileName);\n  unitDB.load(null,null,unitFileReader,null,audioTimelineReader,basenameTimelineReader,0);\n}\n", "nl": "Load unit database from various relevant files"}
{"code": "@deprecated public TimeZoneFormat freeze(){\n  this._frozen=true;\n  return this;\n}\n", "nl": "/*     "}
{"code": "private void addAnnotationOnTarget(ITextUnit textUnit,Issue issue){\n  TextContainer targetContainer=textUnit.getTarget(targetLocale);\n  addAnnotation(targetContainer,issue);\n}\n", "nl": "Adds an issue annotation on the target of the given text unit"}
{"code": "@RequestMapping(value=\"/clients\",method=RequestMethod.GET) public JsonResponse clients(@RequestParam(\"appId\") Long appId){\n  Response<List<ClientDto>> clientsResp=clusterService.listClients(appId);\n  if (!clientsResp.isSuccess()) {\n    return JsonResponse.notOk(clientsResp.getErr());\n  }\n  return JsonResponse.ok(clientsResp.getData());\n}\n", "nl": "List the clients"}
{"code": "public IResource updateCache(IResource resource,ISVNStatus status){\n  if (resource != null && status != null && status.getTextStatus() != null && !resource.exists() && status.getTextStatus().equals(SVNStatusKind.MISSING) && (status.getLastChangedRevision() == null || status.getLastChangedRevision().getNumber() == -1)) {\n    statusCache.removeStatus(resource);\n    return resource;\n  }\n  return statusCache.addStatus(resource,new LocalResourceStatus(status,getURL(status),checkForReadOnly));\n}\n", "nl": "update the cache using the given statuses"}
{"code": "public static int deleteAccountsCharsFromDB(int accountId){\n  List<Integer> charIds=DAOManager.getDAO(PlayerDAO.class).getPlayerOidsOnAccount(accountId);\n  for (  int playerId : charIds) {\n    deletePlayerFromDB(playerId);\n  }\n  return charIds.size();\n}\n", "nl": "Completely removes player from database"}
{"code": "@Override public boolean hasFixedPropertiesArray(){\n  return false;\n}\n", "nl": "true if the entry packet has an array of fixed properties"}
{"code": "public static void openUrl(Context context,String url){\n  Intent intent=new Intent(Intent.ACTION_VIEW);\n  intent.setData(Uri.parse(url));\n  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  context.startActivity(intent);\n}\n", "nl": "Open URL using system browser"}
{"code": "public void addNeighbor(Integer nodeId){\n  nodeNeighbors.add(nodeId);\n}\n", "nl": "Add a node ID to the neighbor list"}
{"code": "public void removeAllEffects(){\n  this.removeAllEffects(false);\n}\n", "nl": "Removes all effects from controllers and ends them appropriately Passive effect will not be removed"}
{"code": "public void cancelUseItem(){\n}\n", "nl": "Cancel use Item"}
{"code": "public void changeTopic(String topic){\n  skype.changeGroupTopic(this,topic);\n}\n", "nl": "Changes the topic of this group"}
{"code": "public float fractionFilled(){\n  return mWidgetArea / (float)mGroupArea;\n}\n", "nl": "Calculated the fraction of the area filled with widgets"}
{"code": "@Override public void justSelected(){\n  setCachedExpression(generateExpression());\n  checkSymbolIsValid();\n}\n", "nl": "Method called when the field has been selected from a combo box and may need to be initialised"}
{"code": "public static ObjectMapper createObjectMapper(){\n  return new ObjectMapper(new YAMLFactory());\n}\n", "nl": "Creates a configured Jackson object mapper for parsing YAML"}
{"code": "public void chooseDevice(@NotNull String label){\n  JButton menuButton=findToolbarButton(\"The virtual device to render the layout with\");\n  myRobot.click(menuButton);\n  clickPopupMenuItemMatching(new DeviceNameMatcher(label),myToolBar.getComponent(),myRobot);\n}\n", "nl": "Selects a device matching the given label prefix in the configuration toolbar's device menu"}
{"code": "public void callHandler(String handlerName,String data,CallBackFunction callBack){\n  doSend(handlerName,data,callBack);\n}\n", "nl": "call javascript registered handler"}
{"code": "public int id(){\n  return id;\n}\n", "nl": "Return the id associated with this tap target"}
{"code": "public int mouseDragged(MouseEvent e){\n  mIsControlDown=e.isControlDown();\n  mIsShiftDown=e.isShiftDown();\n  mIsAltDown=e.isAltDown();\n  int x=mViewTransform.getAndroidX(e.getX());\n  int y=mViewTransform.getAndroidY(e.getY());\n  return mouseDragged(x,y);\n}\n", "nl": "Mouse dragged handling"}
{"code": "private void makeCacheDirectory(){\n  File cacheDir=new File(CACHE_DIRECTORY);\n  if (!cacheDir.exists()) {\n    cacheDir.mkdir();\n  }\n}\n", "nl": "Creates directory for cache files if it doesn't already exist"}
{"code": "public void reloadData(){\n  loadData();\n}\n", "nl": "example of simple request you do not check already loaded data and loading status"}
{"code": "private void GetPath(int num){\n  sPath=this.map_controler.get_Path(num);\n  if (sPath.get_Start_X() != -99)   position.x=sPath.get_Start_X();\n  if (sPath.get_Start_Y() != -99)   position.y=sPath.get_Start_Y();\n  col=0;\n  GetDir(col);\n}\n", "nl": "get enemy path"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private boolean dictionaryCacheAlreadyExists(CacheType cacheType){\n  return null != cacheTypeToCacheMap.get(cacheType);\n}\n", "nl": "This method will check whether the map already has an entry for given cache type"}
{"code": "public void save(String key,String value){\n  prefs.edit().putString(key,value).apply();\n}\n", "nl": "Save the specified value to the shared preferences"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "public SecureSendNotificationQuery userIds(List<Integer> value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids"}
{"code": "public boolean isContent(){\n  return state.equals(CONTENT);\n}\n", "nl": "Check if content is shown"}
{"code": "public String timerString(String message){\n  return timerString(message,this.getClass().getName());\n}\n", "nl": "Creates a string with information including the passed message, the last passed message and the time since the last call, and the time since the beginning"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public boolean isAcontains(BitSet H){\n  BitSet M=((BitSet)A.clone());\n  M.and(H);\n  return M.cardinality() == H.cardinality();\n}\n", "nl": "does A part contain set H?"}
{"code": "public PlacesGetTypesQuery(VkApiClient client,UserActor actor){\n  super(client,\"places.getTypes\",Utils.buildParametrizedType(List.class,Types.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){\n  super.onSizeChanged(w,h,oldw,oldh);\n  width=w;\n  height=h;\n}\n", "nl": "monitor the size change"}
{"code": "public Color mul(Color color){\n  this.r*=color.r;\n  this.g*=color.g;\n  this.b*=color.b;\n  this.a*=color.a;\n  clamp();\n  return this;\n}\n", "nl": "Multiplies the this color and the given color"}
{"code": "public AirMapStatusRequirementNotice(){\n}\n", "nl": "Initialize an AirMapStatusRequirementNotice with default values"}
{"code": "private static int makeHash(int npcId,int level){\n  return npcId << 8 | level;\n}\n", "nl": "Note:<br> max level is 255"}
{"code": "public static void writeFloat(DataOutputStream dos,boolean isBigEndian,float val) throws IOException {\n  if (!isBigEndian) {\n    writeLittleEndianFloat(dos,val);\n  }\n else {\n    dos.writeFloat(val);\n  }\n}\n", "nl": "Write a float from the output stream, byte-swapping as necessary"}
{"code": "public PhotosSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public int daysCompleteTheTask(){\n  int k=0;\n  for (int i=1; i <= daysOfCurrentMonth(); i++) {\n    k+=data[i] ? 1 : 0;\n  }\n  return k;\n}\n", "nl": "used for MODE_SHOW_DATA_OF_THIS_MONTH"}
{"code": "@Override public boolean isSelected(){\n  return ClassificationManager.isActiveMapper(cName,mapType);\n}\n", "nl": "is selected?"}
{"code": "NewProjectDescriptor withName(@NotNull String name){\n  myName=name;\n  return this;\n}\n", "nl": "Set a new project name to use for the new project"}
{"code": "private void analyzeClass(SootClass sootClass,SootClass lifecycleElement){\n  if (sootClass.getName().startsWith(\"android.\") || sootClass.getName().startsWith(\"java.\"))   return;\n  analyzeClassInterfaceCallbacks(sootClass,sootClass,lifecycleElement);\n}\n", "nl": "Analyzes the given class to find callback methods"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?"}
{"code": "public VideoRemoveFromAlbumQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Set album id"}
{"code": "public static String[] jsonArrayStringToList(String jsonString){\n  String modString=jsonString.replaceFirst(\"\\\\[\",\"\");\n  modString=modString.replaceFirst(\"\\\\]\",\"\");\n  modString=modString.replaceAll(\"\\\"\",\"\");\n  return modString.split(\"\\\\s*,\\\\s*\");\n}\n", "nl": "Method to take an input json array format string and output a String array"}
{"code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null && viewer.getJList().getSelectedValuesList().size() >= 1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void clear(){\nsynchronized (lruCacheMap) {\n    lruCacheMap.clear();\n  }\n}\n", "nl": "This method will empty the level cache"}
{"code": "private void drawCenterRect(Canvas canvas){\n  int center=getHeight() / 2;\n  int offset=getItemHeight() / 2;\n  centerDrawable.setBounds(0,center - offset,getWidth(),center + offset);\n  centerDrawable.draw(canvas);\n}\n", "nl": "Draws rect for current value"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static int[] transformIntArray(Integer[] source){\n  int[] destin=new int[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert Integer array to int array"}
{"code": "public void toAllInRadius(WorldServer world,Vec3d pos,double radius){\n  double maxDistance=radius * radius + radius * radius + radius * radius;\n  toAll(world.getPlayers(EntityPlayerMP.class,null));\n}\n", "nl": "Sends this packet to all the players in the world within the radius"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(2).putShort(get(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]"}
{"code": "public AemSidekick expandSectionIfCollapsed(SidekickSection sidekickSections){\n  final WebElement section=getSectionByName(sidekickSections.getSectionName());\n  bobcatWait.withTimeout(Timeouts.BIG).until(SidekickActions.expandSection(section),Timeouts.SMALL);\n  return this;\n}\n", "nl": "Expands section if collapsed based on provided sidekick section"}
{"code": "public void removeScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.remove(listener);\n}\n", "nl": "Removes wheel scrolling listener"}
{"code": "public void changeBrightness(int value){\n  this.brightness+=value;\n}\n", "nl": "Changes the brightness by the value passed as parameter"}
{"code": "public static Bitmap createScaledBitmap(Bitmap bitmap,float scaleFactor){\n  Matrix m=new Matrix();\n  m.setRectToRect(new RectF(0,0,bitmap.getWidth(),bitmap.getHeight()),new RectF(0,0,bitmap.getWidth() * scaleFactor,bitmap.getHeight() * scaleFactor),Matrix.ScaleToFit.CENTER);\n  return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,true);\n}\n", "nl": "Creates new bitmap by scaling given one"}
{"code": "public void OMTG_ENV_005_Webview_Remote(View view){\n  Intent intent=new Intent(this,OMTG_ENV_005_WebView_Remote.class);\n  startActivity(intent);\n}\n", "nl": "Called when the user clicks the Send button"}
{"code": "public static boolean isSupported(){\n  return Build.VERSION.SDK_INT >= 9;\n}\n", "nl": "Checks if current device supports running Unity Ads"}
{"code": "public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg,String path){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg,path);\n}\n", "nl": "execute shell commands"}
{"code": "public boolean drain(){\n  timer.stop(\"AudioOutput\");\n  return true;\n}\n", "nl": "Waits for all queued audio to be played"}
{"code": "public static Drawable bitmapToDrawable(Bitmap bitmap){\n  return bitmap == null ? null : new BitmapDrawable(bitmap);\n}\n", "nl": "convert Bitmap to Drawable"}
{"code": "public void showError(Drawable errorImageDrawable,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){\n  switchState(ERROR,errorImageDrawable,errorTextContent,errorButtonText,onClickListener,skipIds);\n}\n", "nl": "Show error view with a button when something goes wrong and prompting the user to try again"}
{"code": "public Value mapKey(Value key,Value val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return the map key of the given value"}
{"code": "public static boolean isEditableType(String type){\n  return editableTypes.contains(type);\n}\n", "nl": "This method tells whether the type is editable (means can be created with a String or not)"}
{"code": "protected Bindings createBindings(VariableScope variableScope,boolean storeScriptVariables){\n  return scriptBindingsFactory.createBindings(variableScope,storeScriptVariables);\n}\n", "nl": "override to build a spring aware ScriptingEngines"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean needsUpdatingWhileSaving(){\n  return mNeedsUpdating;\n}\n", "nl": "Check, if this file needs updating"}
{"code": "private SocketChannel createSocket(String host,int port) throws IOException {\n  SocketChannel sockChannel=SocketChannel.open();\n  sockChannel.configureBlocking(true);\n  m_Address=new InetSocketAddress(host,port);\n  LRMIUtilities.initNewSocketProperties(sockChannel);\n  return sockChannel;\n}\n", "nl": "Creates a new Socket"}
{"code": "public ExecuteTaskSpaceOperationResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static Settings init(String tag){\n  printer=new LoggerPrinter();\n  return printer.init(tag);\n}\n", "nl": "It is used to change the tag"}
{"code": "public static <V,V1 extends V,V2 extends V,V3 extends V,V4 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3,String name4,V4 value4){\n  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3,name4,value4);\n}\n", "nl": "Create a map from passed nameX, valueX parameters"}
{"code": "@Override public void clearNodes(){\n  super.clearNodes();\n  getPlugin().getUserManager().giveDefaultIfNeeded(this,false);\n}\n", "nl": "Clear all of the users permission nodes"}
{"code": "public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){\n  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;\n  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();\n  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,\"uil-pool-\"));\n}\n", "nl": "Creates default implementation of task executor"}
{"code": "void renamedAttrNode(Attr oldAt,Attr newAt){\n}\n", "nl": "A method to be called when an attribute node has been renamed"}
{"code": "public void drop(){\n  if (logger.isLoggable(Level.FINEST))   logger.finest(\"Terminating GigaSpacesFaultDetectionHandler \" + \"Thread\");\n  keepAlive=false;\n  interrupt();\n}\n", "nl": "Its all over"}
{"code": "public static <T>void unpublishService(String url) throws RpcException {\n  try {\n    ServicePublisher.unpublishService(url);\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while unpublishing service:\" + url,e);\n  }\n}\n", "nl": "unpublish the service from registry"}
{"code": "public static Integer[] transformIntArray(int[] source){\n  Integer[] destin=new Integer[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert int array to Integer array"}
{"code": "public void destroyView() throws CanceledException {\n  dir.getDocument().getSampleSelection().removeSampleSelectionListener(selectionListener);\n  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());\n  dir.removeViewer(this);\n  frame.dispose();\n}\n", "nl": "ask view to destroy itself"}
{"code": "public void componentResized(ComponentEvent ev){\n  viewer.setSize(viewer.getSize());\n}\n", "nl": "component resized"}
{"code": "public WallEditQuery markAsAds(Boolean value){\n  return unsafeParam(\"mark_as_ads\",value);\n}\n", "nl": "Set mark as ads"}
{"code": "public static float unQuantize(short s,float fMin,float fRange){\n  return ((float)(((s) + 32768.0) * fRange / 65535.0 - fMin));\n}\n", "nl": "Unquantize a 16bits signed short over a float range"}
{"code": "public static boolean isWindowsXPLookAndFeel(){\n  return UIUtils.isWindowsXPLookAndFeel();\n}\n", "nl": "Determines if current L&F is Windows XP LookAndFeel"}
{"code": "public String removeReferenceHeaderFromBlastMatch(String blastText){\n  int index=blastText.indexOf(\"Length\");\n  if (index == -1)   index=blastText.indexOf(\"Score\");\n  if (index > 0)   return blastText.substring(index);\n else   return blastText;\n}\n", "nl": "remove the header from a blast text (but keeping Length statement, if present)"}
{"code": "private void requestAddNodesStop(){\n  enqueue(new AddNodeMessageClass().doRequestStop());\n  logger.debug(\"ZWave controller end inclusion\");\n}\n", "nl": "Terminates the inclusion mode"}
{"code": "@SuppressWarnings(\"unused\") public void enableLastSlideAlphaExitTransition(boolean enableAlphaExitTransition){\n  adapter.addEmptySlide(new LastEmptySlideFragment());\n}\n", "nl": "Set if last screen should be able to exit with alpha transition"}
{"code": "protected UsersGetNearbyQuery longitude(float value){\n  return unsafeParam(\"longitude\",value);\n}\n", "nl": "Geographic longitude of the place a user is located, in degrees (from -180 to 180)"}
{"code": "private static FingerLock createInstance(@NonNull String keyName){\n  FingerLock fragment=new FingerLock();\n  Bundle arguments=new Bundle();\n  arguments.putString(ARG_KEY_NAME,keyName);\n  fragment.setArguments(arguments);\n  return fragment;\n}\n", "nl": "Convenience method to create the library without initialize it"}
{"code": "public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){\n  return scaleImage(org,(float)newWidth / org.getWidth(),(float)newHeight / org.getHeight());\n}\n", "nl": "scale image"}
{"code": "public boolean continueExecuting(){\n  return this.mate.isEntityAlive() && isWillingToMate(mate) && this.spawnBabyDelay < 60;\n}\n", "nl": "Returns whether an in-progress EntityAIBase should continue executing"}
{"code": "public boolean isOpaqueCube(IBlockState state){\n  return false;\n}\n", "nl": "Used to determine ambient occlusion and culling when rebuilding chunks for render"}
{"code": "public static boolean saveConfig(FunktionConfig config,File file) throws IOException {\n  createObjectMapper().writeValue(file,config);\n  return true;\n}\n", "nl": "Saves the configuration as YAML in the given file"}
{"code": "public PrefuseTableModel(Table table){\n  m_table=table;\n}\n", "nl": "Creates a new PrefuseTableModel"}
{"code": "public void addSubEquipmentIds(final Collection<Long> subEquipmentIds){\n  for (  Long subEquipmentId : subEquipmentIds) {\n    addSubEquipmentId(subEquipmentId);\n  }\n}\n", "nl": "Adds all sub equipment id's of that list as dependency to this tag"}
{"code": "public boolean isPluginEnabled(Plugin plugin){\n  if ((plugin != null) && (plugins.contains(plugin))) {\n    return plugin.isEnabled();\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Checks if the given plugin is enabled or not"}
{"code": "public ByteArray(byte[] buf,int offset,int length){\n  this.buf=buf;\n  this.offset=offset;\n  this.length=length;\n}\n", "nl": "Create a ByteArray"}
{"code": "private Stream<String> resolve(String template,Stream<File> files){\n  Stream<Json> json=files.map(null);\n  return partitionedStream(json.iterator()).map(null).map(null);\n}\n", "nl": "Convert native data format to a stream of templates"}
{"code": "public AccountGetInfoQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getInfo\",Info.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean mustAlias(Local val1,Local val2,Stmt position){\n  if (val1 == val2)   return true;\n  if (!(val1.getType() instanceof RefLikeType) || !(val2.getType() instanceof RefLikeType))   return false;\n  LocalMustAliasAnalysis lmaa=strongAliasAnalysis.getUnchecked(cfg.getMethodOf(position));\n  return lmaa.mustAlias(val1,position,val2,position);\n}\n", "nl": "Gets whether the two values must always point to the same runtime object"}
{"code": "public static Map<String,String> strToMap(String str,boolean trim){\n  return strToMap(str,\"|\",trim);\n}\n", "nl": "Creates a Map from an encoded name/value pair string"}
{"code": "synchronized void flushOperations(RTEditText editor){\n  Stack<Operation> undoStack=getUndoStack(editor);\n  Stack<Operation> redoStack=getRedoStack(editor);\n  undoStack.clear();\n  redoStack.clear();\n}\n", "nl": "Flush all operations for a specific rich text editor (method unused at the moment)"}
{"code": "public UsersSearchQuery status(UsersSearchRelation value){\n  return unsafeParam(\"status\",value);\n}\n", "nl": "Relationship status"}
{"code": "public void pause(){\n}\n", "nl": "Pauses audio output"}
{"code": "protected VideoGetQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return an extended response with additional fields"}
{"code": "public synchronized boolean putRequest(int messageId,RequestResponseHandler handler){\n  if (map.containsKey(messageId)) {\n    return false;\n  }\n  map.put(messageId,handler);\n  return true;\n}\n", "nl": "Adds this handler to this messageID, returns false if there already exists one"}
{"code": "public void validate(){\n  byte dlsnVersion=getDlsnVersion();\n  Preconditions.checkArgument(dlsnVersion >= DLSN.VERSION0 && dlsnVersion <= DLSN.VERSION1,\"Unknown dlsn version \" + dlsnVersion);\n  Preconditions.checkArgument(getServerThreads() > 0,\"Invalid number of server threads : \" + getServerThreads());\n  Preconditions.checkArgument(getServerShardId() >= 0,\"Invalid server shard id : \" + getServerShardId());\n}\n", "nl": "Validate the configuration"}
{"code": "public boolean isInvul(){\n  return invul;\n}\n", "nl": "Check is player is invul"}
{"code": "public boolean isApplicable(){\n  return ProjectManager.getNumberOfProjects() == 1 && ((Director)ProjectManager.getProjects().get(0)).getDocument().getNumberOfSamples() == 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_LOCAL_TIME(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1390145,value0,value1);\n}\n", "nl": "Real Time: %0 %1"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=previous;\");\n}\n", "nl": "action to be performed"}
{"code": "public PhotosGetByIdQueryWithExtended photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n", "nl": "Return photo sizes in a special format"}
{"code": "public static StorableTimeFence inInterval(long startTimeMillis,long stopTimeMillis){\n  return new StorableTimeFence(ABSOLUTE,null,startTimeMillis,stopTimeMillis);\n}\n", "nl": "Creates a storable time fence which will be valid in the given absolute time frame"}
{"code": "protected ExecuteStorageFunctionQuery funcV(Integer value){\n  return unsafeParam(\"func_v\",value);\n}\n", "nl": "Function version"}
{"code": "private void requestForDownload(OCFile file){\n  Intent i=new Intent(mContext,FileDownloader.class);\n  i.putExtra(FileDownloader.EXTRA_ACCOUNT,mAccount);\n  i.putExtra(FileDownloader.EXTRA_FILE,file);\n  mContext.startService(i);\n  mTransferWasRequested=true;\n}\n", "nl": "Requests for a download to the FileDownloader service"}
{"code": "public static void callNumber(Context context,String phoneNumber){\n  openDialerActivityWithAction(context,phoneNumber,Intent.ACTION_CALL);\n}\n", "nl": "Makes a call"}
{"code": "public GroupsGetInvitedUsersQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Count of users to return"}
{"code": "public final boolean isAlternatingDevice(){\n  return (myAlternate & CFG_DEVICE) != 0;\n}\n", "nl": "Returns true if the device is alternated"}
{"code": "public static void showWarning(Object parentIgnored,String message){\n  showNotification(title,message,Mode.warning,Pos.BOTTOM_LEFT,60000);\n}\n", "nl": "show a warning notation"}
{"code": "public static void deleteAircraft(AirMapAircraft aircraft,AirMapCallback<Void> listener){\n  String url=String.format(pilotAircraftByIdUrl,AirMap.getUserId(),aircraft.getAircraftId());\n  AirMap.getClient().delete(url,new VoidCallback(listener));\n}\n", "nl": "Delete an aircraft"}
{"code": "@Override public final void confirmEquipmentStateIncorrect(){\n  confirmEquipmentStateIncorrect(null);\n}\n", "nl": "Sends a note to the business layer, to confirm that the equipment is not properly configured, or connected to its data source"}
{"code": "public void scale(Vector3D v){\n  scale(v.get(0),v.get(1),v.get(2));\n}\n", "nl": "scale non-uniformly"}
{"code": "public HectorCassandraClientConfigurer hosts(String hosts){\n  this.hosts=hosts;\n  return this;\n}\n", "nl": "Cassandra hosts"}
{"code": "public static void addAcceptableFilterID(EntryArrivedRemoteEvent theEvent,String filterID){\n  theEvent.addAcceptableFilterID(filterID);\n}\n", "nl": "assume that initAcceptableFilterList() was called before, filterID or TemplateID"}
{"code": "public boolean isSelected(){\n  return getViewer() != null && getViewer().getPcoaTab() != null && getViewer().getPcoaTab().isFlipV();\n}\n", "nl": "this is currently selected?"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set description=\");\n  String description=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  getDoc().getSampleAttributeTable().put(getDoc().getSampleNames().get(0),SampleAttributeTable.DescriptionAttribute,description);\n  getDoc().setDirty(true);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static float exp(float fValue){\n  return (float)Math.exp(fValue);\n}\n", "nl": "Returns E^fValue"}
{"code": "public void clearAll(){\n  if (items != null) {\n    items.clear();\n  }\n  if (emptyItems != null) {\n    emptyItems.clear();\n  }\n}\n", "nl": "Clears all views"}
{"code": "private void do_pts_interval_merge(){\n  for (  HeapInsIntervalManager him : new_pts.values()) {\n    him.mergeFigures(Parameters.max_pts_budget);\n  }\n}\n", "nl": "Merge the context sensitive tuples, and make a single insensitive tuple"}
{"code": "public boolean isApplicable(){\n  ExtractReadsViewer viewer=(ExtractReadsViewer)getParent();\n  return viewer != null && viewer.getMode().equals(ClassificationType.Taxonomy.toString());\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public AppsGetCatalogQuery returnFriends(Boolean value){\n  return unsafeParam(\"return_friends\",value);\n}\n", "nl": "Set return friends"}
{"code": "protected VideoGetAlbumsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return additional information about album privacy settings for the current user"}
{"code": "public boolean isShowDeleteButton(){\n  return mShowDeleteButton;\n}\n", "nl": "Is the delete button shown"}
{"code": "@Override public boolean isValueLineVariableLength(){\n  return mValueLineVariableLength;\n}\n", "nl": "When valuePosition is OutsideSlice, this allows variable line length"}
{"code": "public StorageSetQuery value(String value){\n  return unsafeParam(\"value\",value);\n}\n", "nl": "Set value"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public void stopAnimations(){\n  if (animatorSet != null) {\n    isStopSearchingAnim=true;\n    animatorSet.end();\n    animatorSet.cancel();\n  }\n}\n", "nl": "stop the view's animations"}
{"code": "public AirMapTrafficProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n", "nl": "Initialize an AirMapTrafficProperties from JSON"}
{"code": "private boolean useEquipmentConditionsCheck(){\n  Conditions useEquipConditions=skillTemplate.getUseEquipmentconditions();\n  return useEquipConditions != null ? useEquipConditions.validate(this) : true;\n}\n", "nl": "Check all in use equipment conditions"}
{"code": "public static boolean isGenericTypeAnnotedWithPageObject(Field field){\n  Class<?> genericType=PageObjectProviderHelper.getGenericType(field);\n  return genericType != null && genericType.isAnnotationPresent(PageObject.class);\n}\n", "nl": "Checks if Generic Type of field is annoted with PageObject Annotation"}
{"code": "public boolean contains(ScoutCandidateGroup candidate){\n  return mRect.contains(candidate.mRect);\n}\n", "nl": "does another group contain this group"}
{"code": "public boolean canZoomOutMoreY(){\n  return (mScaleY > mMinScaleY);\n}\n", "nl": "Returns true if the chart is not yet fully zoomed out on the y-axis"}
{"code": "public static <T>Set<T> toSet(T obj1,T obj2,T obj3,T obj4){\n  Set<T> theSet=new LinkedHashSet<T>();\n  theSet.add(obj1);\n  theSet.add(obj2);\n  theSet.add(obj3);\n  theSet.add(obj4);\n  return theSet;\n}\n", "nl": "Create a Set from passed objX parameters"}
{"code": "public void clear(){\n  id2row.clear();\n  clearSelection();\n  while (model.getRowCount() > 0)   model.removeRow(model.getRowCount() - 1);\n  model.getDataVector().clear();\n}\n", "nl": "erase the table"}
{"code": "public GroupsEditPlaceQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.editPlace\",EditPlaceResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public double secondsSinceLast(){\n  return (timeSinceLast()) / 1000.0;\n}\n", "nl": "Returns the number of seconds since the last time timerString was called"}
{"code": "public boolean updateCursor(@NotNull ScreenView screenView,@AndroidCoordinate int x,@AndroidCoordinate int y){\n  return false;\n}\n", "nl": "Allows a ViewGroupHandler to update the mouse cursor"}
{"code": "public MonsterDamageCursor queryMonsterDamage(long id){\n  return mHelper.queryMonsterDamage(id);\n}\n", "nl": "MONSTER DAMAGE QUERIES"}
{"code": "private void startComponents(boolean spaceIsPrimary){\n  for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {\n    ISpaceComponentsHandler handler=iterator.next();\n    handler.startComponents(spaceIsPrimary);\n  }\n}\n", "nl": "Start space components"}
{"code": "public int size(){\n  return listOfFileData.size();\n}\n", "nl": "Return the size"}
{"code": "public boolean isLogSegmentSequenceNumberValidationEnabled(){\n  return this.getBoolean(BKDL_LOGSEGMENT_SEQUENCE_NUMBER_VALIDATION_ENABLED,BKDL_LOGSEGMENT_SEQUENCE_NUMBER_VALIDATION_ENABLED_DEFAULT);\n}\n", "nl": "Whether log segment sequence number validation is enabled?"}
{"code": "public void removeClassLoaderStateListener(Long classLoaderKey,IClassLoaderCacheStateListener listener){\n  ClassLoaderContext classLoaderContext=_classLoaders.get(classLoaderKey);\n  if (classLoaderContext == null)   return;\n  classLoaderContext.removeListener(listener);\n}\n", "nl": "Remove a specific listener from a specific class listener"}
{"code": "@Override public Point3D clone() throws CloneNotSupportedException {\n  return new Point3D(this);\n}\n", "nl": "Clones this point"}
{"code": "public static Bitmap byteToBitmap(byte[] b){\n  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);\n}\n", "nl": "convert byte array to Bitmap"}
{"code": "public boolean hasColumn(String columnName){\n  Integer idx=columnNamesIndex.get(columnName);\n  return idx != null;\n}\n", "nl": "Determine if the schema has a column with the specified name"}
{"code": "public static void e(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.e(tag,buildMsg(msg));\n  }\n}\n", "nl": "error log"}
{"code": "public SQLProcessor(Delegator delegator,GenericHelperInfo helperInfo){\n  this.delegator=delegator;\n  this.helperInfo=helperInfo;\n  this._manualTX=true;\n}\n", "nl": "Construct an object based on the helper/datasource"}
{"code": "private UByte(String value) throws NumberFormatException {\n  this.value=rangeCheck(Short.parseShort(value));\n}\n", "nl": "Create an <code>unsigned byte</code>"}
{"code": "public GoogleAutoCredentialProvider(OkHttpClient httpClient,String username,String password) throws LoginFailedException, RemoteServerException {\n  this.gpsoauth=new Gpsoauth(httpClient);\n  this.username=username;\n  this.tokenInfo=login(username,password);\n  this.time=new SystemTimeImpl();\n}\n", "nl": "Constructs credential provider using username and password"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_GIVEUP(String value0){\n  return new SM_SYSTEM_MESSAGE(1300618,value0);\n}\n", "nl": "Quest failed: %0"}
{"code": "public static ResourcesPoet create(){\n  init();\n  Document document=sDocumentBuilder.newDocument();\n  Element resources=document.createElement(ELEMENT_RESOURCES);\n  document.appendChild(resources);\n  return create(document,resources);\n}\n", "nl": "Create a new builder"}
{"code": "@Override public String toString(){\n  return getName() + \"=\" + \"\\\"\"+ getValue()+ \"\\\"\";\n}\n", "nl": "NON-DOM method for debugging convenience"}
{"code": "default String entityRole(String resourceId){\n  return \"has-\" + resourceId + \"-owner\";\n}\n", "nl": "The name of the entity role type in an entity-role relation representing an OWL data property"}
{"code": "public VideoGetCatalogQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.getCatalog\",GetCatalogResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public String checkin(IResource[] resources,final String comment,boolean keepLocks,final int depth,IProgressMonitor progress) throws TeamException {\n  CheckinResourcesCommand command=new CheckinResourcesCommand(getSVNWorkspaceRoot(),resources,depth,comment,keepLocks);\n  command.run(progress);\n  return command.getPostCommitError();\n}\n", "nl": "Checkin any local changes to given resources"}
{"code": "public static void clearRegistry(){\n  registry.clear();\n}\n", "nl": "Clear the registry"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CMD_WHISHPER_INPUT(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1400008,value1,value0);\n}\n", "nl": "You Whisper to %1: %0"}
{"code": "public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){\n  String type=String.format(\"multifield#%s#%s\",index,itemType);\n  String label=String.format(\"%s#%s\",multifieldLabel,itemLabel);\n  config.add(new ConfigurationEntry(currentTab,type,label,value));\n  return this;\n}\n", "nl": "Adds multifield entry, equivalent of: | tab_name | multifield#index#itemType | multifieldLabel#itemLabel | value |"}
{"code": "@NotNull public static ResizePolicy none(){\n  return ourNone;\n}\n", "nl": "Returns a resize policy not allowing any resizing"}
{"code": "public SourceSinkDefinition(SootMethodAndClass am,Set<AccessPathTuple> baseObjects,Set<AccessPathTuple>[] parameters,Set<AccessPathTuple> returnValues){\n  this.method=am;\n  this.baseObjects=baseObjects == null || baseObjects.isEmpty() ? null : baseObjects;\n  this.parameters=parameters;\n  this.returnValues=returnValues == null || returnValues.isEmpty() ? null : returnValues;\n}\n", "nl": "Creates a new instance of the MethodSourceSinkDefinition class"}
{"code": "public AdsGetSuggestionsQueryWithRegions ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n", "nl": "Set ids"}
{"code": "public MarketReorderAlbumsQuery(VkApiClient client,UserActor actor,int ownerId,int albumId){\n  super(client,\"market.reorderAlbums\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  albumId(albumId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public String toJson() throws JsonGenerationException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.writeValueAsString(this);\n}\n", "nl": "obj --> json"}
{"code": "public static byte[] loadImageFile(File imageLoc) throws IOException {\n  FileInputStream fis=new FileInputStream(imageLoc);\n  byte[] read=new byte[fis.available()];\n  fis.read(read);\n  fis.close();\n  return read;\n}\n", "nl": "Loads a file using the standard Java IO classes"}
{"code": "public PhotosSaveMessagesPhotoQuery hash(String value){\n  return unsafeParam(\"hash\",value);\n}\n", "nl": "Set hash"}
{"code": "public AdsGetBudgetQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getBudget\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public SM_NICKNAME_CHECK_RESPONSE(int value){\n  this.value=value;\n}\n", "nl": "Constructs new <tt>SM_NICKNAME_CHECK_RESPONSE</tt> packet"}
{"code": "public UsersGetFollowersQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"users.getFollowers\",GetFollowersFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void invalidate(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier){\n  carbonLRUCache.remove(getLruCacheKey(dictionaryColumnUniqueIdentifier.getColumnIdentifier().getColumnId(),CacheType.FORWARD_DICTIONARY));\n}\n", "nl": "This method will remove the cache for a given key"}
{"code": "private WelcomeOptions(){\n}\n", "nl": "Creates a new instance of WelcomeOptions"}
{"code": "public boolean findFirst(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,false) > 0;\n}\n", "nl": "Find first instance"}
{"code": "public void remove(){\n  throw new UnsupportedOperationException();\n}\n", "nl": "Throws an UnsupportedOperationException"}
{"code": "public AccountLookupContactsQuery(VkApiClient client,UserActor actor,AccountLookupContactsService service){\n  super(client,\"account.lookupContacts\",LookupResult.class);\n  accessToken(actor.getAccessToken());\n  service(service);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private static boolean isDigit(char ch){\n  return '0' <= ch && ch <= '9';\n}\n", "nl": "TODO: Javadoc"}
{"code": "public AsyncCatchOptions usePokeball(Pokeball pokeBall){\n  this.pokeBall=pokeBall;\n  return this;\n}\n", "nl": "Set a specific Pokeball to use"}
{"code": "@NotNull public List<Face> findEmotionFaces(@NotNull InputStream image){\n  return faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,image).withResult();\n}\n", "nl": "Find a faces within a local image"}
{"code": "public void pause(){\n}\n", "nl": "Pauses audio output"}
{"code": "private void activateToggleSkill(){\n  PacketSendUtility.sendPacket((Player)effector,new SM_SKILL_ACTIVATION(getSkillId(),true));\n}\n", "nl": "Will activate toggle skill and start checking task"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCache.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "public void deleteKey(String publicKey){\n  this.api.deleteApiByPublicKey(publicKey);\n}\n", "nl": "Deletes the public and private key from the system given the public key"}
{"code": "protected String[] upload_file(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final byte cmd=ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE;\n  return this.upload_file(cmd,group_name,local_filename,file_ext_name,meta_list);\n}\n", "nl": "upload file to storage server (by file name)"}
{"code": "public void addCategoryLimitations(boolean include,String... categoryVelocityVarNames){\n  query.append(\" \" + (include ? \"+\" : \"-\") + \"(\");\n  for (  String categoryVelocityVarName : categoryVelocityVarNames) {\n    query.append(\"categories:\" + escapeValue(categoryVelocityVarName) + \" \");\n  }\n  query.append(\")\");\n}\n", "nl": "Limit the results of the query to certain categories"}
{"code": "public boolean isPerLogicalSubjectLockObject(boolean isEvictable){\n  return !isEvictable;\n}\n", "nl": "do we use subject for locking itself ?"}
{"code": "public SM_RECONNECT_KEY(int key){\n  this.key=key;\n}\n", "nl": "Constructs new <tt>SM_RECONNECT_KEY</tt> packet"}
{"code": "public AudioGetQuery needUser(Boolean value){\n  return unsafeParam(\"need_user\",value);\n}\n", "nl": "Return information about users who uploaded audio files"}
{"code": "@SuppressWarnings(\"unused\") public void addSlide(SlideFragment slideFragment){\n  adapter.addItem(slideFragment);\n}\n", "nl": "Add SlideFragment to IntroScreen"}
{"code": "public static void delete(W q){\n  Helper.delete(q,AuthToken.class);\n}\n", "nl": "delete the auth-token by the query"}
{"code": "public static <K,T,V>MultiDimensionalMap<K,T,V> newHashBackedMap(){\n  return new MultiDimensionalMap<>(new HashMap<Pair<K,T>,V>());\n}\n", "nl": "Thread safe hash map impl"}
{"code": "public NotRegexSpacePredicate(String pattern){\n  super(pattern,null);\n  if (pattern == null)   throw new IllegalArgumentException(\"Argument 'pattern' cannot be null.\");\n}\n", "nl": "Creates a scalar predicate using the specified expected value"}
{"code": "public Builder materialDesignInDisabledSteps(boolean materialDesignInDisabledSteps){\n  this.materialDesignInDisabledSteps=materialDesignInDisabledSteps;\n  return this;\n}\n", "nl": "Set whether or not the disabled steps will have a Material Design look"}
{"code": "public WidgetsGetPagesQuery order(String value){\n  return unsafeParam(\"order\",value);\n}\n", "nl": "Set order"}
{"code": "public void onSuccess(int statusCode,Header[] headers,JSONArray response){\n}\n", "nl": "Returns when request succeeds"}
{"code": "public static Drawable toDrawable(Bitmap bitmap){\n  return bitmap == null ? null : new BitmapDrawable(null,bitmap);\n}\n", "nl": "convert Bitmap to Drawable"}
{"code": "public Math_Vector add(double x,double y){\n  this.x+=x;\n  this.y+=y;\n  return this;\n}\n", "nl": "add the value to this Math_Vector"}
{"code": "private void tryScrollBackToTopWhileLoading(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "public WidgetsGetPagesQuery widgetApiId(Integer value){\n  return unsafeParam(\"widget_api_id\",value);\n}\n", "nl": "Set widget api id"}
{"code": "public void recordThrowable(@NotNull Throwable throwable){\n  if (myTraces == null) {\n    myTraces=new ArrayList<Throwable>();\n  }\n  myTraces.add(throwable);\n}\n", "nl": "Record that the given exception was encountered during rendering"}
{"code": "public Patterns(String[] includes,String[] excludes){\n  this.origIncludes=includes;\n  this.origExcludes=excludes;\n}\n", "nl": "Constructs a set of patterns"}
{"code": "public void dump(){\n  dump(new OutputStreamWriter(System.out));\n}\n", "nl": "Dumps this LPCResult to standard out"}
{"code": "public static void clearRecentFiles(){\n  String str=ProgramProperties.get(RECENTFILES,\"\");\n  if (str.length() != 0) {\n    ProgramProperties.put(RECENTFILES,\"\");\n    notifyListChange(RECENTFILES);\n  }\n}\n", "nl": "clears the list of recent files"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public BoardGetTopicsQueryWithExtended(VkApiClient client,int groupId){\n  super(client,\"board.getTopics\",GetTopicsExtendedResponse.class);\n  groupId(groupId);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isEnabled(){\n  return false;\n}\n", "nl": "Flag to test if this Authenticator is enabled"}
{"code": "protected void notifyClickListenersAboutClick(int item){\n  for (  OnWheelClickedListener listener : clickingListeners) {\n    listener.onItemClicked(this,item);\n  }\n}\n", "nl": "Notifies listeners about clicking"}
{"code": "public void deny(PermissionFlag flag,Identity<?> identity,Message message){\n  strictPermission.computeIfAbsent(flag,null).put(identity,new Status(message));\n}\n", "nl": "Directly restrict a flag for an ID, this will take priority over the default permission  and will override the previous direct permission"}
{"code": "public DefaultJsonFeeder(Charset charset){\n  this(charset,1024);\n}\n", "nl": "Constructs a feeder"}
{"code": "private void updateCities(WheelView city,List<VChartPeriod.PeriodsBean> list){\n  periodAdapter=new PeriodAdapter(getActivity(),list);\n  city.setViewAdapter(periodAdapter);\n  city.setCurrentItem(0);\n}\n", "nl": "Updates the city wheel"}
{"code": "public SkillTreeCursor querySkillTrees(){\n  return mHelper.querySkillTrees();\n}\n", "nl": "SKILL TREE QUERIES"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0,0,0,0.00948199951485,0.432056525076,0.381648158697,0.354555726206,0.329513316888,0.298422824228};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public void removeActivity(Activity activity){\n  if (activityStack == null) {\n    activityStack=new Stack<Activity>();\n  }\n  activityStack.remove(activity);\n}\n", "nl": "remove Activity from Stack"}
{"code": "public static void threadSleep(long millis){\n  try {\n    Thread.sleep(millis);\n  }\n catch (  InterruptedException ex) {\n    Log.e(\"Exception\",StringUtils.exceptionStackTraceToString(ex));\n  }\n}\n", "nl": "Makes the thread sleep for some time"}
{"code": "public MessagesMarkAsImportantQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.markAsImportant\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void writeChar(char a) throws IOException {\n  outs.write((byte)(a >> 8));\n  outs.write((byte)(a));\n  position+=2;\n}\n", "nl": "write a char"}
{"code": "public boolean isApplicable(){\n  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX && getViewer().getPcoaTab().isIs3dMode();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void normalize(){\n  normalizeTo(1.0);\n}\n", "nl": "Normalizes the values of the distribution to the range [0,1]"}
{"code": "public void decreaseKinah(long amount,Player actor){\n  decreaseKinah(amount,ItemUpdateType.DEC_KINAH_BUY,actor);\n}\n", "nl": "just decrease kinah without any checks"}
{"code": "public static void sendBroadcast(Context context,String action,Bundle extras){\n  Intent intent=new Intent(action);\n  if (extras != null) {\n    intent.putExtras(extras);\n  }\n  LocalBroadcastManager.getInstance(context).sendBroadcast(intent);\n}\n", "nl": "Sends a local broadcast using an intent with the action and the extras specified"}
{"code": "public MarketSearchQueryWithExtended rev(Boolean value){\n  return unsafeParam(\"rev\",value);\n}\n", "nl": "Use reverse order"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "private void tryScrollBackToTopAfterComplete(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "private ClassName className(TypeElement element){\n  if (element != null) {\n    return ClassName.get(element);\n  }\n  return null;\n}\n", "nl": "Helper Methods"}
{"code": "public static void computeAddresses(PhyloTree tree,Map<Integer,String> id2address,Map<String,Integer> address2id){\n  Node root=tree.getRoot();\n  if (root != null)   buildId2AddressRec(root,\"\",id2address,address2id);\n}\n", "nl": "compute node addresses used to compute LCA"}
{"code": "public IntArrayList data(){\n  return values;\n}\n", "nl": "Returns the integers that back this column"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "private boolean isIssueOnSource(Issue issue){\n  return !(issue.getSourceStart() == 0 && issue.getSourceEnd() == -1);\n}\n", "nl": "Returns whether the given issue is on the text unit's source"}
{"code": "public ClassElemValPair(String name,char kind,String cval){\n  super(name,kind);\n  this.cval=new AsciiCP(cval);\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "private void rebuild(){\n  rebuild(true);\n}\n", "nl": "Rebuild the preview and repaint"}
{"code": "@Override public void undo(Transaction tx){\n}\n", "nl": "Does nothing, because compensation log record is redo-Only"}
{"code": "public Builder withDenyDialogMsg(String denyDialogMsg){\n  buildObj.denyDialogMsg=denyDialogMsg;\n  buildObj.showDenyDialog=true;\n  return this;\n}\n", "nl": "Sets deny dialog message"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "@SubscribeEvent public void walkingPenalty(LivingUpdateEvent event){\n  if (!(event.getEntityLiving() instanceof EntityPlayer))   return;\n  EntityPlayer player=(EntityPlayer)event.getEntityLiving();\n  if (!EntityPlayerExt.isSurvival(player))   return;\n  if (!(player.getFoodStats() instanceof BWMFoodStats))   return;\n  final UUID penaltySpeedUUID=UUID.fromString(\"c5595a67-9410-4fb2-826a-bcaf432c6a6f\");\n  EntityPlayerExt.changeSpeed(player,penaltySpeedUUID,\"Health speed penalty\",EntityPlayerExt.getHealthAndExhaustionModifier(player));\n}\n", "nl": "Walking speed changed according to health/exhaustion/fat"}
{"code": "public static Column mean(DataFrame dataFrame,String columnName){\n  return dataFrame.groupBy(columnName).agg(avg(columnName)).col(columnName);\n}\n", "nl": "Mean for a column"}
{"code": "public void goToPreviousStep(){\n  goToStep(activeStep - 1,false);\n}\n", "nl": "Go to the previous step"}
{"code": "public static String formatAmount(double amount,Locale locale){\n  com.ibm.icu.text.NumberFormat nf=com.ibm.icu.text.NumberFormat.getInstance(locale);\n  nf.setMinimumFractionDigits(2);\n  nf.setMaximumFractionDigits(2);\n  return nf.format(amount);\n}\n", "nl": "Formats a double into a properly formatted string, with two decimals, based on Locale"}
{"code": "public static Map<String,Object> returnSuccess(){\n  return returnMessage(ModelService.RESPOND_SUCCESS,null);\n}\n", "nl": "A small routine used all over to improve code efficiency, make a result map with the message and the success response code"}
{"code": "public boolean isNonsingular(){\n  for (int j=0; j < n; j++) {\n    if (LU[j][j] == 0)     return false;\n  }\n  return true;\n}\n", "nl": "Is the matrix nonsingular?"}
{"code": "public static SM_SYSTEM_MESSAGE STR_GUILD_INTRO(String value0){\n  return new SM_SYSTEM_MESSAGE(1300285,value0);\n}\n", "nl": "Legion Information: %0"}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state"}
{"code": "protected MarketEditQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item id"}
{"code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n", "nl": "make a SAM line"}
{"code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());\n  dir.removeViewer(this);\n  frame.dispose();\n}\n", "nl": "ask view to destroy itself"}
{"code": "public void addListener(ISpaceModeListener listener){\n  _listeners.add(listener);\n}\n", "nl": "Add listener for space availability"}
{"code": "public static final SupervisionEvent fromJson(final String json){\n  return getGson().fromJson(json,SupervisionEventImpl.class);\n}\n", "nl": "Deserialized the JSON string into a <code>SupervisionEvent</code> object instance"}
{"code": "public static WKTGeometry createEmpty(WKTType wktType){\n  WKTGeometry wktGeometry=new WKTGeometry();\n  wktGeometry.setGeometryType(wktType);\n  return wktGeometry;\n}\n", "nl": "Creates the empty WKT geometry"}
{"code": "public AccountGetCountersQuery filter(AccountGetCountersFilter... value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Counters information of which shall be returned"}
{"code": "public ArrayElemValPair(String name,char kind,ArrayList list){\n  super(name,kind);\n  this.list=list;\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "void invokeMenuPath(@NotNull String... path){\n  JMenuItem menuItem=findActionMenuItem(path);\n  assertWithMessage(\"Menu path \\\"\" + Joiner.on(\" -> \").join(path) + \"\\\" is not enabled\").that(menuItem.isEnabled()).isTrue();\n  myRobot.click(menuItem);\n}\n", "nl": "Invokes an action by menu path"}
{"code": "public static ViewTapTarget forView(View view,CharSequence title,@Nullable CharSequence description){\n  return new ViewTapTarget(view,title,description);\n}\n", "nl": "Return a tap target for the specified view"}
{"code": "public ClassPath(@Nonnull Iterable<DexFile> classPath,int api){\n  this(Lists.newArrayList(classPath),api == 17);\n}\n", "nl": "Creates a new ClassPath instance that can load classes from the given dex files"}
{"code": "public OAuth2AccessToken(){\n  super(\"stub\",\"stub\",0,\"stub\",\"stub\",\"stub\");\n  expirationDate=0;\n}\n", "nl": "Exists just to make happy some json providers"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void removeRepurchaseItems(Player player){\n  repurchaseItems.removeAll(player.getObjectId());\n}\n", "nl": "Delete all repurchase items for this player"}
{"code": "public void addWorking(boolean working){\n  query.append(\" +working:\" + working);\n}\n", "nl": "Adds +working to the query"}
{"code": "public boolean isClosed(){\n  return m_closed;\n}\n", "nl": "Determines if the consumer is closed"}
{"code": "public static IProgressMonitor subMonitorFor(IProgressMonitor monitor,int ticks){\n  if (monitor == null)   return new NullProgressMonitor();\n  if (monitor instanceof NullProgressMonitor)   return monitor;\n  return new SubProgressMonitor(monitor,ticks,SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);\n}\n", "nl": "Return a submonitor for monitor"}
{"code": "public GroupByKey(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static GenericValue create(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){\n  GenericValue newValue=new GenericValue();\n  newValue.init(delegator,modelEntity,singlePkValue);\n  return newValue;\n}\n", "nl": "Creates new GenericValue from existing Map"}
{"code": "public Property build(){\n  return build(null);\n}\n", "nl": "Builds the property"}
{"code": "public void showOverlapGraph(Director dir,ProgressListener progress) throws CanceledException {\n  final OverlapGraphViewer overlapGraphViewer=new OverlapGraphViewer(dir,overlapGraph,node2readName,paths);\n  overlapGraphViewer.apply(progress);\n}\n", "nl": "show the overlap graph"}
{"code": "public UsersSearchQuery hasPhoto(Boolean value){\n  return unsafeParam(\"has_photo\",value);\n}\n", "nl": "Return with photo only"}
{"code": "public DocumentNGramGaussNormGraph(){\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "public void validate(List<ValidationException> exceptionList){\n  super.validate(exceptionList);\n  final boolean runAllValidators=Options.v().debug() || Options.v().validate();\n  for (  BodyValidator validator : getValidators()) {\n    if (!validator.isBasicValidator() && !runAllValidators)     continue;\n    validator.validate(this,exceptionList);\n  }\n}\n", "nl": "Validates the jimple body and saves a list of all validation errors"}
{"code": "protected AudioGetByIdQuery audios(List<String> value){\n  return unsafeParam(\"audios\",value);\n}\n", "nl": "Audio file IDs, in the following format: {owner_id}_{audio_id}"}
{"code": "protected void initFileLocation(){\n  PathService pathService=CarbonCommonFactory.getPathService();\n  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(columnIdentifier,this.hdfsStorePath,carbonTableIdentifier);\n  this.columnDictionaryFilePath=carbonTablePath.getDictionaryFilePath(columnIdentifier.getColumnId());\n}\n", "nl": "This method will form the path for dictionary file for a given column"}
{"code": "@Override public void lockPool(){\nsynchronized (fGrammarPool) {\n    fGrammarPool.lockPool();\n  }\n}\n", "nl": "lock the grammar pool"}
{"code": "public Main(){\n}\n", "nl": "Creates a new instance of Main"}
{"code": "public int size(){\n  return this.get().length;\n}\n", "nl": "Returns the number of elements in the underlying array"}
{"code": "public SecureSetUserLevelQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "@Override public boolean isAlreadySorted(){\n  return true;\n}\n", "nl": "sorting is not required for colgroup storage and hence return true"}
{"code": "public static String formatPercentage(BigDecimal percentage){\n  if (percentage == null)   return \"\";\n  return percentageDecimalFormat.format(percentage);\n}\n", "nl": "Formats a BigDecimal representing a percentage into a string"}
{"code": "public boolean arePreviousStepsCompleted(int stepNumber){\n  boolean previousStepsAreCompleted=true;\n  for (int i=(stepNumber - 1); i >= 0 && previousStepsAreCompleted; i--) {\n    previousStepsAreCompleted=completedSteps[i];\n  }\n  return previousStepsAreCompleted;\n}\n", "nl": "Determines if the steps that are previous to the given one are completed"}
{"code": "public static int[] shuffle(int[] intArray){\n  if (intArray == null) {\n    return null;\n  }\n  return shuffle(intArray,getRandom(intArray.length));\n}\n", "nl": "Shuffling algorithm, Randomly permutes the specified int array using a default source of randomness"}
{"code": "public AppsGetQuery appIds(String... value){\n  return unsafeParam(\"app_ids\",value);\n}\n", "nl": "List of application ID"}
{"code": "public void destroyView() throws CanceledException {\n}\n", "nl": "ask view to destroy itself"}
{"code": "public RecyclerView.ViewHolder newInsertionViewHolder(ViewGroup vParent){\n  return HandyHolder.create(this,vParent,mBottomProgressLayoutId).set().isRecyclable(false).asyncInflating(false).rippleEffect(false).init();\n}\n", "nl": "Override this method if you need to bind view getHolder for insertions <p/> viewType == 100500"}
{"code": "public PermissionCallOptions build(){\n  return buildObj;\n}\n", "nl": "Builds instance of PermissifyConfig"}
{"code": "@Override protected int sizeOf(String key,BitmapDrawable value){\n  final int bitmapSize=getBitmapSize(value) / 1024;\n  return bitmapSize == 0 ? 1 : bitmapSize;\n}\n", "nl": "Measure item size in kilobytes rather than units which is more practical for a bitmap cache"}
{"code": "public Future<?> scheduleRestoreTask(CreatureLifeStats<? extends Creature> lifeStats){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new HpMpRestoreTask(lifeStats),1700,DEFAULT_DELAY);\n}\n", "nl": "HP and MP restoring task"}
{"code": "private void checkConfiguration(){\n  if (configuration == null) {\n    throw new IllegalStateException(ERROR_NOT_INIT);\n  }\n}\n", "nl": "Checks if ImageLoader's configuration was initialized"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static long elapsedMSec(long startMsecTime){\n  return (System.currentTimeMillis() - startMsecTime);\n}\n", "nl": "Milliseconds elapsed since the time specified, the input is nanoTime the only conversion happens when computing the elapsed time"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=square;\");\n}\n", "nl": "action to be performed"}
{"code": "private static QueryTask buildRegistryQueryByGroup(String tenantLink){\n  Query groupClause=QueryUtil.addTenantGroupAndUserClause(tenantLink);\n  return buildRegistryQuery(groupClause);\n}\n", "nl": "Create a query to return all RegistryState links within a group or global RegistryState links if the group is null/empty"}
{"code": "public Matrix solveTranspose(Matrix B){\n  return transpose().solve(B.transpose());\n}\n", "nl": "Solve X*A = B, which is also A'*X' = B'"}
{"code": "public void onTimeOut(){\n  staticsManagerImpl.onScheduleTimeOut();\n}\n", "nl": "onTimeOut msg"}
{"code": "public static long stringToMilliseconds(String formattedDate){\n  return stringToMilliseconds(formattedDate,SIMPLE_DATE_FORMAT);\n}\n", "nl": "Create time in milliseconds from a formatted string"}
{"code": "public void putSampleShape(String sampleName,String shape){\n  put(sampleName,HiddenAttribute.Shape,shape);\n}\n", "nl": "set the shape associated with a sample"}
{"code": "public Builder integerMathOp(String column,MathOp mathOp,int scalar){\n  return transform(new IntegerMathOpTransform(column,mathOp,scalar));\n}\n", "nl": "Perform a mathematical operation (add, subtract, scalar max etc) on the specified integer column, with a scalar"}
{"code": "protected void resetXML11() throws XNIException {\n  int count=fXML11Components.size();\n  for (int i=0; i < count; i++) {\n    XMLComponent c=(XMLComponent)fXML11Components.get(i);\n    c.reset(this);\n  }\n}\n", "nl": "reset all components before parsing and namespace context"}
{"code": "public DictionaryMap(DictionaryMap original){\n  for (  Int2ObjectMap.Entry<String> entry : original.keyToValue.int2ObjectEntrySet()) {\n    keyToValue.put(entry.getIntKey(),entry.getValue());\n    valueToKey.put(entry.getValue(),entry.getIntKey());\n  }\n  valueToKey.defaultReturnValue(-1);\n}\n", "nl": "Returns a new DictionaryMap that is a deep copy of the original"}
{"code": "public RegisterReplicationNotificationResponseInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private Player(PlayerCommonData plCommonData){\n  super(plCommonData.getPlayerObjId(),new PlayerController(),null,plCommonData,null);\n  this.playerCommonData=plCommonData;\n  this.playerAccount=new Account(0);\n  this.absStatsHolder=new AbsoluteStatOwner(this,0);\n}\n", "nl": "Used for JUnit tests"}
{"code": "public static Map<String,Object> alwaysFailProcessor(DispatchContext dctx,Map<String,? extends Object> context){\n  Locale locale=(Locale)context.get(\"locale\");\n  return ServiceUtil.returnError(UtilProperties.getMessage(resource,\"AccountingPaymentTestAuthorizationAlwaysFailed\",locale));\n}\n", "nl": "Always fail (error) processor"}
{"code": "private static void populate(){\n  geometryMap.put(Point.class,GeometryTypeEnum.POINT);\n  geometryMap.put(MultiPoint.class,GeometryTypeEnum.POINT);\n  geometryMap.put(LineString.class,GeometryTypeEnum.LINE);\n  geometryMap.put(MultiLineString.class,GeometryTypeEnum.LINE);\n  geometryMap.put(Polygon.class,GeometryTypeEnum.POLYGON);\n  geometryMap.put(MultiPolygon.class,GeometryTypeEnum.POLYGON);\n}\n", "nl": "Populate member data"}
{"code": "public void start(Activity activity,int requestCode){\n  activity.startActivityForResult(getIntent(activity),requestCode);\n}\n", "nl": "Send the crop Intent from an Activity with a custom request code"}
{"code": "public void updateView(){\n  Graphics2D gc=(Graphics2D)getGraphics();\n  Dimension size=new Dimension();\n  draw(gc,size);\n  setPreferredSize(size);\n  revalidate();\n}\n", "nl": "update the view"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void adjustVideoFitTextureView(){\n  Matrix matrix=new Matrix();\n  getTransform(matrix);\n  matrix.setScale(1,1);\n  setTransform(matrix);\n}\n", "nl": "Force adjust video to fit TextureView's width and height"}
{"code": "void checkNotationType(String refName,XSTypeDefinition typeDecl,Element elem){\n  if (typeDecl.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE && ((XSSimpleType)typeDecl).getVariety() == XSSimpleTypeDefinition.VARIETY_ATOMIC && ((XSSimpleType)typeDecl).getPrimitiveKind() == XSSimpleType.PRIMITIVE_NOTATION) {\n    if ((((XSSimpleType)typeDecl).getDefinedFacets() & XSSimpleTypeDefinition.FACET_ENUMERATION) == 0) {\n      reportSchemaError(\"enumeration-required-notation\",new Object[]{typeDecl.getName(),refName,DOMUtil.getLocalName(elem)},elem);\n    }\n  }\n}\n", "nl": "Element/Attribute traversers call this method to check whether the type is NOTATION without enumeration facet"}
{"code": "private void do_pts_interval_merge(){\n  for (  PtInsIntervalManager im : pt_objs.values()) {\n    im.mergeFigures(Parameters.max_pts_budget);\n  }\n}\n", "nl": "Merge the context sensitive tuples, and make a single insensitive tuple"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static RemoteResourceStatus fromBytes(byte[] bytes) throws SVNException {\n  return ((bytes != null) && (bytes.length > 0)) ? new RemoteResourceStatus(bytes) : null;\n}\n", "nl": "Factory method created instance from byte[]"}
{"code": "public FriendList(Player owner,Collection<Friend> newFriends){\n  this.friends=new ConcurrentLinkedQueue<Friend>(newFriends);\n  this.player=owner;\n}\n", "nl": "Constructs a friend list for the given player, with the given friends"}
{"code": "@Override public void stop(BundleContext bc) throws Exception {\n  context=null;\n  logger.debug(\"ZWave binding stopped.\");\n}\n", "nl": "Called whenever the OSGi framework stops our bundle"}
{"code": "public CMULexicon(URL compiledURL,URL addendaURL,URL letterToSoundURL,boolean binary){\n  setLexiconParameters(compiledURL,addendaURL,letterToSoundURL,binary);\n}\n", "nl": "Creates a CMULexicon based upon the given compiled and addenda DBs and the given letter to sound rules"}
{"code": "private static long rangeCheck(long value) throws NumberFormatException {\n  if (value < MIN_VALUE || value > MAX_VALUE) {\n    throw new NumberFormatException(\"Value is out of range : \" + value);\n  }\n  return value;\n}\n", "nl": "Throw exception if value out of range (long version)"}
{"code": "public boolean isLastSplit(){\n  return isLastSplit;\n}\n", "nl": "Is this the last split?"}
{"code": "public void increaseCounts(Map<String,Integer> eventCount,Predicate<String> predicate){\n  increaseEventCount(eventCount,predicate);\n  increaseActionCount(eventCount,predicate);\n}\n", "nl": "this method is used to update the reference count of the actions"}
{"code": "public void addItems(List<Task> _model){\n  this.model.addAll(_model);\n  notifyDataSetChanged();\n}\n", "nl": "Allows to add MULTIPLE items"}
{"code": "public String toString(){\n  String eventClassName=(eventClass == null ? \"<null>\" : eventClass.getName());\n  String eventIDVal=(eventID == null ? \"<null>\" : eventID.toString());\n  return (\"Class: \" + eventClassName + \", eventID: \"+ eventIDVal);\n}\n", "nl": "Produce a String representation of an EventDescriptor"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.KULCZYNSKI);\n}\n", "nl": "this is currently selected?"}
{"code": "public void updateAllUsers(){\n  plugin.doSync(null);\n}\n", "nl": "Reloads the data of all online users"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public ResourcesPoet addStyle(String name,@Nullable String parentRef){\n  return addStyle(name,parentRef,null);\n}\n", "nl": "Add a style to the config"}
{"code": "public static byte[] bitmapToByte(Bitmap b){\n  ByteArrayOutputStream o=new ByteArrayOutputStream();\n  b.compress(Bitmap.CompressFormat.PNG,100,o);\n  return o.toByteArray();\n}\n", "nl": "convert Bitmap to byte array"}
{"code": "public Builder cacheOnDisc(boolean cacheOnDisc){\n  this.cacheOnDisc=cacheOnDisc;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached on disc"}
{"code": "@Override public void unlockPool(){\nsynchronized (fGrammarPool) {\n    fGrammarPool.unlockPool();\n  }\n}\n", "nl": "unlock the grammar pool"}
{"code": "public Builder addColumn(ColumnMetaData metaData){\n  columnMetaData.add(metaData);\n  return this;\n}\n", "nl": "Add a column"}
{"code": "protected double populationStandardDeviation(double[] v){\n  double mean=StatUtils.mean(v);\n  double sum=0;\n  for (  double val : v) {\n    sum+=(val - mean) * (val - mean);\n  }\n  return FastMath.sqrt(sum / v.length);\n}\n", "nl": "Definitional formula for population standard deviation"}
{"code": "@Override public void toggle(){\n  setChecked(!isChecked);\n}\n", "nl": "Change the checked state of the view to the inverse of its current state"}
{"code": "public boolean drain(){\n  return true;\n}\n", "nl": "Waits for all queued audio to be played"}
{"code": "@Override public final void confirmEquipmentStateIncorrect(final String pDescription){\n  sendCommfaultTag(this.equipmentConfiguration.getCommFaultTagId(),equipmentConfiguration.getName(),this.equipmentConfiguration.getCommFaultTagValue(),pDescription);\n  Map<Long,SubEquipmentConfiguration> subEquipmentConfigurations=equipmentConfiguration.getSubEquipmentConfigurations();\n  for (  SubEquipmentConfiguration subEquipmentConfiguration : subEquipmentConfigurations.values()) {\n    sendCommfaultTag(subEquipmentConfiguration.getCommFaultTagId(),subEquipmentConfiguration.getName(),subEquipmentConfiguration.getCommFaultTagValue(),pDescription);\n  }\n}\n", "nl": "Sends a note to the business layer, to confirm that the equipment is not properly configured, or connected to its data source"}
{"code": "public static CommandResult execCommand(String[] commands,boolean isRoot){\n  return execCommand(commands,isRoot,true);\n}\n", "nl": "execute shell commands, default return result msg"}
{"code": "public boolean isDataBindingEnabled(){\n  return myDataBindingEnabled;\n}\n", "nl": "Returns true if this facet includes data binding library"}
{"code": "public static GenericValue create(ModelEntity modelEntity){\n  GenericValue newValue=new GenericValue();\n  newValue.init(modelEntity);\n  return newValue;\n}\n", "nl": "Creates new GenericValue"}
{"code": "@Override public boolean isHighlightFullBarEnabled(){\n  return mHighlightFullBarEnabled;\n}\n", "nl": "Return true the highlight operation is be full-bar oriented, false if single-value"}
{"code": "public static void refreshAccessToken(RefreshTokenListener listener){\n  Auth.refreshAccessToken(getInstance().getContext(),listener);\n}\n", "nl": "Refreshes the pilot's authentication token"}
{"code": "@Override public void onUIRefreshComplete(PtrFrameLayout frame){\n  mDrawable.stop();\n}\n", "nl": "perform UI after refresh"}
{"code": "public boolean isBintersects(BitSet H){\n  return B.intersects(H);\n}\n", "nl": "does B part intersect set H?"}
{"code": "public VideoCreateCommentQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "void clearCache(){\nsynchronized (mCache) {\n    mCache.clear();\n  }\n}\n", "nl": "For unit test only!!!"}
{"code": "public Blast2Alignment(Document doc){\n  this.doc=doc;\n}\n", "nl": "create an aligner for"}
{"code": "public static WorkspaceRoot fromImportSettings(BlazeImportSettings blazeSettings){\n  return new WorkspaceRoot(new File(blazeSettings.getWorkspaceRoot()));\n}\n", "nl": "Get the workspace root for a project"}
{"code": "public boolean removeName(String name){\n  return m_names.remove(name);\n}\n", "nl": "Remove a column name from this projection"}
{"code": "public void extractSamplesTo(Collection<String> samples,DataTable target){\n  Set<String> toDelete=new HashSet<>();\n  toDelete.addAll(sampleNames);\n  toDelete.removeAll(samples);\n  target.copy(this);\n  target.removeSamples(toDelete);\n}\n", "nl": "extract a set of samples to the given target"}
{"code": "private void fireSubEquipmentSupervisionUpdate(final SupervisionEvent supervisionEvent){\n  Set<SupervisionListener> listeners=subEquipmentSupervisionListeners.get(supervisionEvent.getEntityId());\n  if (listeners != null) {\n    for (    SupervisionListener listener : listeners) {\n      listener.onSupervisionUpdate(supervisionEvent);\n    }\n  }\n}\n", "nl": "Inner method to inform all subscribed listeners of the sub equipment supervision event"}
{"code": "public Status(@NotNull Message message){\n  this.message=message;\n}\n", "nl": "Creates a denial status"}
{"code": "public static void commit(boolean beganTransaction) throws GenericTransactionException {\n  if (beganTransaction) {\n    TransactionUtil.commit();\n  }\n}\n", "nl": "Commits the transaction in the current thread IF transactions are available AND if beganTransaction is true"}
{"code": "@Override public List<GenericValue> findAll(String entityName,boolean useCache) throws GenericEntityException {\n  return this.findList(entityName,null,null,null,null,useCache);\n}\n", "nl": "Finds all Generic entities"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set showAminoAcids=false;\");\n}\n", "nl": "action to be performed"}
{"code": "private boolean isArrayType(HashSet<String> resolvedTypesSet){\n  return resolvedTypesSet.size() == 1 && resolvedTypesSet.contains(Types.strArray);\n}\n", "nl": "check if only array type possible"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public VideoReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"video.reportComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void cancelCalls(@NonNull Context context){\n  QueueManager.getInstance(context).getRequestQueue().cancelAll(context);\n}\n", "nl": "cancel any unsent api calls"}
{"code": "public static int min(final int a,final int b){\n  return (a <= b) ? a : b;\n}\n", "nl": "Compute the minimum of two values"}
{"code": "public static String dateToStringWithTime(Date date){\n  return dateToString(date,DATETIME_PATTERN);\n}\n", "nl": "yyyy-MM-dd hh:mm:ss"}
{"code": "public void updateView(){\n  Graphics2D graphics=(Graphics2D)getGraphics();\n  Dimension size=new Dimension();\n  draw(graphics,size);\n  setPreferredSize(size);\n  revalidate();\n}\n", "nl": "rescan the view"}
{"code": "public boolean isApplicable(){\n  try {\n    return getViewer().isPCoATab() && getViewer().getPcoaTab().getPCoA().getEigenValues() != null;\n  }\n catch (  Exception ex) {\n    return false;\n  }\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void clearCache(){\n  ourCache.clear();\n}\n", "nl": "Flush any cached class loaders"}
{"code": "protected void stopZKCluster() throws Exception {\n  zkUtil.killServer();\n}\n", "nl": "Stop zookeeper cluster"}
{"code": "public Transaction(SQLiteDatabase database){\n  mDatabase=database;\n  mIsSuccess=true;\n  mDatabase.beginTransaction();\n}\n", "nl": "Create a new transaction"}
{"code": "public static void showProfile(Fragment fragment,@Nullable HashMap<String,String> extras){\n  showProfile(fragment,AirMap.getUserId(),extras);\n}\n", "nl": "Display the authenticated pilot's profile"}
{"code": "private String buildKey(String accountName,String remotePath){\n  return accountName + remotePath;\n}\n", "nl": "Builds a key to index files"}
{"code": "public static void disableLogging(){\n  DISABLED=true;\n}\n", "nl": "Disables logger, no logs will be passed to LogCat, all log methods will do nothing"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.0689156576706,0.236735653193,0.364074131941,0.481570789649,0.595880479994,0.000133443915657,0.00286681303403,0.00969192007502,0.0242883861471,0.0605491314658};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public static void deleteFlight(AirMapFlight flight,@Nullable AirMapCallback<Void> callback){\n  FlightService.deleteFlight(flight,callback);\n}\n", "nl": "Delete a flight belonging to the logged in pilot"}
{"code": "public void identity(){\n  for (int j=0; j < size(); j++)   for (int i=0; i < size(); i++)   set(i,j,(i == j ? 1 : 0));\n}\n", "nl": "set to identity matrix"}
{"code": "@Deprecated public void onSuccess(String content){\n}\n", "nl": "Fired when a request returns successfully, override to handle in your own code"}
{"code": "public static void clearCache(Context context){\n  cleanExternalCache(context);\n  cleanInternalCache(context);\n}\n", "nl": "Clear cache"}
{"code": "public AudioGetRecommendationsQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getRecommendations\",Utils.buildParametrizedType(List.class,AudioFull.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ProductConfigWrapper(){\n}\n", "nl": "Creates a new instance of ProductConfigWrapper"}
{"code": "public PhotosSaveMarketPhotoQuery(VkApiClient client,UserActor actor,String photo,int server,String hash){\n  super(client,\"photos.saveMarketPhoto\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photo(photo);\n  server(server);\n  hash(hash);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void debugInfo(String msg){\n  debugInfo(\"zhibo\",msg);\n}\n", "nl": "author  hhj TODO"}
{"code": "public MLSAFeatureFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n", "nl": "Create a feature file reader from the given MLSA feature file"}
{"code": "public Builder removeAllColumnsExceptFor(Collection<String> columnNames){\n  return removeAllColumnsExceptFor(columnNames.toArray(new String[columnNames.size()]));\n}\n", "nl": "Remove all columns, except for those that are specified here"}
{"code": "public SearchGetHintsQuery searchGlobal(Boolean value){\n  return unsafeParam(\"search_global\",value);\n}\n", "nl": "The default search results are added to the results of a global search for all users and groups, it can be disabled by passing 0"}
{"code": "public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){\n  super(fixNoHttpResponseException,httpPort,httpsPort);\n}\n", "nl": "Creates new SyncHttpClient using given params"}
{"code": "@deprecated public static boolean isJavaLetter(int cp){\n  return isJavaIdentifierStart(cp);\n}\n", "nl": "/*     "}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public PlacesGetByIdQuery(VkApiClient client,UserActor actor,int... places){\n  super(client,\"places.getById\",Utils.buildParametrizedType(List.class,Place.class));\n  accessToken(actor.getAccessToken());\n  places(places);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Builder cacheInMemory(boolean cacheInMemory){\n  this.cacheInMemory=cacheInMemory;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached in memory"}
{"code": "public VideoGetCatalogSectionQuery(VkApiClient client,UserActor actor,String sectionId,String from){\n  super(client,\"video.getCatalogSection\",GetCatalogSectionResponse.class);\n  accessToken(actor.getAccessToken());\n  sectionId(sectionId);\n  from(from);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private boolean onCheckCanLoadMore(){\n  return mLoadMoreEnabled && !canChildScrollDown() && mHasFooterView&& mLoadMoreTriggerOffset > 0;\n}\n", "nl": "check if it can load more"}
{"code": "private List<Integer> convertToList(int[] data){\n  Integer[] wrapperType=ArrayUtils.toObject(data);\n  return Arrays.asList(wrapperType);\n}\n", "nl": "The method converts the int[] to List<Integer>"}
{"code": "public void onFinish(){\n}\n", "nl": "Override to execute this method on finish intro activity"}
{"code": "private void trigger(int position,float positionOffset){\n  CircleIndicator.this.mCurItemPosition=position;\n  CircleIndicator.this.mCurItemPositionOffset=positionOffset;\n  requestLayout();\n  invalidate();\n}\n", "nl": "trigger to redraw the indicator when the ViewPager's selected item changed!"}
{"code": "private void sendAfterTextChanged(Editable s){\n  if (mListeners != null) {\n    for (int i=0; i < mListeners.size(); i++) {\n      mListeners.get(i).afterTextChanged(s);\n    }\n  }\n}\n", "nl": "Send an after text change event to child listeners"}
{"code": "private <T>UnaryOperator<T> chainOperators(Stream<UnaryOperator<T>> operators){\n  return operators.reduce(UnaryOperator.identity(),null);\n}\n", "nl": "Chain a stream of functions into a single function, which applies each one after the other"}
{"code": "public String makeServiceCall(String url,int method){\n  return this.makeServiceCall(url,method,null);\n}\n", "nl": "Making service call"}
{"code": "public void updatePassword(String username,String password,String newPassword) throws AuthenticatorException {\n  Debug.logInfo(this.getClass().getName() + \" Authenticator updatePassword()\",module);\n}\n", "nl": "Updates a user's password"}
{"code": "private void storeLegionAnnouncements(Legion legion){\n  for (int i=0; i < (legion.getAnnouncementList().size() - 7); i++) {\n    removeAnnouncement(legion.getLegionId(),legion.getAnnouncementList().firstEntry().getKey());\n    legion.removeFirstEntry();\n  }\n}\n", "nl": "This method stores all legion announcements"}
{"code": "private void tryScrollBackToTopWhileLoading(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException, ServletException {\n  HttpServletResponse response=(HttpServletResponse)res;\n  response.setHeader(\"Access-Control-Allow-Origin\",\"*\");\n  response.setHeader(\"Access-Control-Allow-Methods\",\"POST, GET, OPTIONS, DELETE\");\n  response.setHeader(\"Access-Control-Max-Age\",\"3600\");\n  response.setHeader(\"Access-Control-Allow-Headers\",\"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With\");\n  chain.doFilter(req,res);\n}\n", "nl": "CORS Processing"}
{"code": "public static boolean putBoolean(Context context,String key,boolean value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putBoolean(key,value);\n  return editor.commit();\n}\n", "nl": "put boolean preferences"}
{"code": "@Override protected void finalize() throws Throwable {\n  super.finalize();\n  _map.remove(_key,_value);\n}\n", "nl": "Remove any reference to this object from the cache"}
{"code": "public LocalCacheResponseEntryPacket(){\n  throw new IllegalStateException(\"This constructor is required for Externalizable and should not be called directly.\");\n}\n", "nl": "Required for Externalizable"}
{"code": "private static void addStonesStats(Item item,Set<? extends ManaStone> itemStones,CreatureGameStats<?> cgs){\n  if (itemStones == null || itemStones.size() == 0) {\n    return;\n  }\n  for (  ManaStone stone : itemStones) {\n    addStoneStats(item,stone,cgs);\n  }\n}\n", "nl": "All modifiers of stones will be applied to character"}
{"code": "public static boolean isDinersClub(String cc){\n  int firstdig=Integer.parseInt(cc.substring(0,1));\n  int seconddig=Integer.parseInt(cc.substring(1,2));\n  if ((cc.length() == 14) && (firstdig == 3) && ((seconddig == 0) || (seconddig == 6) || (seconddig == 8)))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid Diners Club number"}
{"code": "public boolean isEntryFromPartition(IEntryHolder entryHolder){\n  final Object routingValue=entryHolder.getRoutingValue();\n  if (routingValue == null)   return false;\n  if (!_clusterInfo.isPartitioned())   return true;\n  final int partitionId=PartitionedClusterUtils.getPartitionId(routingValue,_clusterInfo.getNumberOfPartitions());\n  return partitionId == _partitionId;\n}\n", "nl": "return true if entry belongs to the partition of the space, false if entry is not from space partition"}
{"code": "@SafeVarargs public static <T>ConsList<T> List(T... a){\n  if ((a == null) || (a.length == 0)) {\n    return new ConsListImpl<>();\n  }\n  return new ConsListImpl<>(Arrays.asList(a),false);\n}\n", "nl": "Return a new ConsList consisting of the given items"}
{"code": "protected boolean isStringType(Type tp){\n  if (!(tp instanceof RefType))   return false;\n  RefType refType=(RefType)tp;\n  return refType.getClassName().equals(\"java.lang.String\");\n}\n", "nl": "Checks whether the given type is a string"}
{"code": "public void removeAnimation(Animation animation){\n  mAnimations.remove(animation);\n}\n", "nl": "Remove the given animation from the list of running animations"}
{"code": "public Builder integerToCategorical(String columnName,Map<Integer,String> categoryIndexNameMap){\n  return transform(new IntegerToCategoricalTransform(columnName,categoryIndexNameMap));\n}\n", "nl": "Convert the specified column from an integer representation to a categorical representation, given the specified mapping between integer indexes and state names"}
{"code": "public boolean hasLeaseRenewalManager(){\n  return leaseRenewalManager != null;\n}\n", "nl": "Returns <code>true</code> if there is a lease renewal manager associated with this transaction"}
{"code": "public boolean findPrevious(String regularExpression){\n  return findAndUncollapseNext(regularExpression,true,false) > 0;\n}\n", "nl": "Find previous instance"}
{"code": "default String roleChildName(String type){\n  return String.format(ROLE_CHILD,type);\n}\n", "nl": "Get the name of the role the given type will play when it is contained in another type"}
{"code": "public static void replaceContentView(Window window,ViewGroup newContentView){\n  ViewGroup decorView=(ViewGroup)window.getDecorView();\n  View content=decorView.getChildAt(0);\n  decorView.removeView(content);\n  newContentView.addView(content);\n  decorView.addView(newContentView);\n}\n", "nl": "1) using window to get DecorView , 2) remove content view of DecorView, 3) replace with new content"}
{"code": "public boolean isSPD(){\n  return isspd;\n}\n", "nl": "Is the matrix symmetric and positive definite?"}
{"code": "public static String convertTime(int time){\n  time/=1000;\n  int minute=time / 60;\n  int second=time % 60;\n  minute%=60;\n  return String.format(\"%02d:%02d\",minute,second);\n}\n", "nl": "convert time str"}
{"code": "@Override public void clear(){\nsynchronized (fGrammarPool) {\n    fGrammarPool.clear();\n  }\n}\n", "nl": "clear the grammar pool"}
{"code": "public Object[] next(){\n  return getSortedRecordFromFile();\n}\n", "nl": "This method will be used to get the sorted row"}
{"code": "private boolean isMenuDrawerOpen(){\n  if (mDrawerLayout != null) {\n    return mDrawerLayout.isDrawerOpen(MENU_DRAWER_GRAVITY);\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Check to see if the menu drawer is currently open"}
{"code": "private static short rangeCheck(int value) throws NumberFormatException {\n  if (value < MIN_VALUE || value > MAX_VALUE) {\n    throw new NumberFormatException(\"Value is out of range : \" + value);\n  }\n  return (short)value;\n}\n", "nl": "Throw exception if value out of range (int version)"}
{"code": "public BoardGetCommentsQuery sort(BoardGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "private void createItemsLayout(){\n  if (itemsLayout == null) {\n    itemsLayout=new LinearLayout(getContext());\n    itemsLayout.setOrientation(LinearLayout.VERTICAL);\n  }\n}\n", "nl": "Creates item layouts if necessary"}
{"code": "@RequestMapping(value=\"/servers/shutdown\",method=RequestMethod.POST) public JsonResponse shutdownServer(@RequestParam(\"server\") String server){\n  serverService.shutdownServer(server);\n  return JsonResponse.ok(true);\n}\n", "nl": "Shutdown the server"}
{"code": "public static boolean checkContentCanBePulledUp(PtrFrameLayout frame,View content,View header){\n  return !canChildScrollDown(content);\n}\n", "nl": "Default implement for check can perform pull to refresh"}
{"code": "public static void makeSnackBar(View parentView,String str,int length){\n  final Snackbar snackbar=Snackbar.make(parentView,str,length);\n  snackbar.show();\n}\n", "nl": "Show snackbar"}
{"code": "@Override public boolean isFileModified(long fileTimeStamp,long endOffset){\n  boolean isFileModified=false;\n  if (getLastModifiedTime() > fileTimeStamp || getSize() > endOffset) {\n    isFileModified=true;\n  }\n  return isFileModified;\n}\n", "nl": "This method will be used to check whether a file has been modified or not"}
{"code": "@Override public boolean isValueLineVariableLength(){\n  return mValueLineVariableLength;\n}\n", "nl": "When valuePosition is OutsideSlice, this allows variable line length"}
{"code": "protected boolean validate(Object obj){\n  return ((PoolableThread)obj).isAlive();\n}\n", "nl": "Validate a resource"}
{"code": "protected void shareByEmail(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_EMAIL,getShareData(ShareConstant.SHARE_CHANNEL_EMAIL),ShareConstant.REQUEST_CODE);\n}\n", "nl": "share email"}
{"code": "public Point3D(Point2D point,float z){\n  this(point.getX(),point.getY(),z);\n}\n", "nl": "Creates new 3D point from 2D point and z coord"}
{"code": "public static void putString(String key,String value){\n  prefs.edit().putString(key,value).commit();\n}\n", "nl": "Set a String value in the preferences editor, to be written back once"}
{"code": "public static StorableTimeFence inDailyInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(DAILY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid in the given daily time frame"}
{"code": "public Builder cacheInMemory(boolean cacheInMemory){\n  this.cacheInMemory=cacheInMemory;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached in memory"}
{"code": "private UShort(String value) throws NumberFormatException {\n  this.value=Integer.parseInt(value);\n  rangeCheck();\n}\n", "nl": "Create an <code>unsigned short</code>"}
{"code": "public EigenvalueDecomposition eig(){\n  return new EigenvalueDecomposition(this);\n}\n", "nl": "Eigenvalue Decomposition"}
{"code": "@deprecated public VariableField(String string){\n  this(string,false);\n}\n", "nl": "/*     "}
{"code": "private void createMOVFormat(){\n  videoFormat=new VideoFormat(VideoFormat.JPEG,new Dimension(mip.getMWidth(),mip.getMHeight()),Format.NOT_SPECIFIED,Format.byteArray,mip.getFPS());\n}\n", "nl": "Creates the format with JPEG compression"}
{"code": "public static boolean hasRootPermission(){\n  return execCommand(\"echo root\",true,false).result == 0;\n}\n", "nl": "check whether has root permission"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private int computeSize(Map<Integer,Integer[]> integerMap){\n  int count=0;\n  for (  Integer taxonId : integerMap.keySet()) {\n    Integer value=integerMap.get(taxonId)[0];\n    if (value != null)     count+=value;\n  }\n  return count;\n}\n", "nl": "compute the size of the classification"}
{"code": "public static int buff2int(byte[] bs,int offset){\n  return (((int)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 24) | (((int)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 16) | (((int)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 8)| ((int)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3]));\n}\n", "nl": "big-endian buff convert to int"}
{"code": "public static Configuration createProcess(){\n  Configuration configuration=new Configuration();\n  Process process=Process.create(\"P_INI_TEST\").id(5L).statusTag(StatusTag.create(\"P:STATUS\").id(100L).build()).aliveTag(AliveTag.create(\"P:ALIVE\").id(101L).build(),60000).build();\n  configuration.addEntity(process);\n  return configuration;\n}\n", "nl": "Process id: 5 statusTagId: 100 aliveTagId: 101"}
{"code": "Interceptor(){\n  start=0.0f;\n  mid=0.0f;\n  end=0.0f;\n}\n", "nl": "Constructs the default interceptor"}
{"code": "public String toString(){\n  StringBuilder builder=new StringBuilder(\"<\");\n  builder.append(href).append(\">; rel=\").append(relationship);\n  if (type != null)   builder.append(\"; type=\").append(type);\n  return builder.toString();\n}\n", "nl": "To write as link header"}
{"code": "public boolean containsColumn(C columnKey){\n  if (columnKey == null)   return false;\n  for (  Map<C,V> row : dataMap.values()) {\n    if (row.containsKey(columnKey))     return true;\n  }\n  return false;\n}\n", "nl": "column contained?"}
{"code": "public void clearAllRows(){\n  rows=new LinkedList<ChangeLogRow>();\n}\n", "nl": "Clear all rows"}
{"code": "public static WxUserListResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxUserListResult.class);\n}\n", "nl": "json --> obj"}
{"code": "public boolean addListener(IClassLoaderCacheStateListener listener){\n  _specificListeners.add(new WeakReference<IClassLoaderCacheStateListener>(listener));\n  return !_dispatchingRemoved;\n}\n", "nl": "Adds a listener to this class loader removal event"}
{"code": "public static String readString(PacketBuffer buf){\n  return buf.readStringFromBuffer(buf.readInt());\n}\n", "nl": "Reads a string from the buffer"}
{"code": "public static void e(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  Log.e(tag,msg,throwable);\n}\n", "nl": "Send an ERROR log message"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show findToolbar=true;\");\n}\n", "nl": "action to be performed"}
{"code": "private static Integer[] newZeroedIntegerArray(int size){\n  Integer[] result=new Integer[size];\n  for (int i=0; i < size; i++)   result[i]=0;\n  return result;\n}\n", "nl": "create new array with zero entries"}
{"code": "public static int dpToPx(Context context,float dp){\n  return (int)applyDimension(context,TypedValue.COMPLEX_UNIT_DIP,dp);\n}\n", "nl": "dp to px"}
{"code": "public SecureSetUserLevelQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.setUserLevel\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public FriendsGetOnlineQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getOnline\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void pause(){\n}\n", "nl": "Pauses the audio output"}
{"code": "public boolean isApplicable(){\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  return viewer != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private void sendCommitError(String errorMessage){\n  sendJson(Json.object(ACTION,ACTION_COMMIT,ERROR,errorMessage));\n}\n", "nl": "Tell the client about an error during commit"}
{"code": "public final static <T extends Bean>List<T> load(String[] cols,String where,Object[] args,String orderby,int offset,int limit,Class<T> t){\n  Table mapping=(Table)t.getAnnotation(Table.class);\n  if (mapping == null) {\n    if (log.isErrorEnabled())     log.error(\"mapping missed in [\" + t + \"] declaretion\");\n    return null;\n  }\n  return load(mapping.name(),cols,where,args,orderby,offset,limit,t);\n}\n", "nl": "load the list of beans, by the where"}
{"code": "public boolean isEmpty(){\n  return this.optionsTable.isEmpty();\n}\n", "nl": "Determines if list is empty"}
{"code": "public DocumentNGramGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  CorrelationWindow=iCorrelationWindow;\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "public void removeLineAt(int pos) throws BadLocationException {\n  Element e=getParagraphElement(pos);\n  remove(e.getStartOffset(),getElementLength(e));\n}\n", "nl": "Deletes the line at given position"}
{"code": "public PhotosGetTagsQuery accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n", "nl": "Set access key"}
{"code": "public MessagesMarkAsReadQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.markAsRead\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MessagesAllowMessagesFromCommunityQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"messages.allowMessagesFromCommunity\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public boolean checkCondition(){\n  return group.hasMember(player.getObjectId());\n}\n", "nl": "Player should be in group before disconnection"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public TextSpectralSpellPreprocessor(String sArgs){\n  tWords=null;\n  hFoundWords=new Hashtable();\n  sWordMapSem=new Semaphore(1);\n  Args=sArgs.split(\" \");\n}\n", "nl": "Creates a new instance of TextSpectralSpellPreprocessor"}
{"code": "public void shouldAddCurrentTimeZoneOffsetToDate(){\n  addCurrentTimeZoneOffsetToDate=true;\n}\n", "nl": "if you want addCurrentTimeZoneOffset to your date, just call this method"}
{"code": "public static void killSilently(AbstractAI ai2,Creature target){\n  target.getController().onDie(ai2.getOwner());\n}\n", "nl": "Target will die with all notifications using ai's owner as the last attacker"}
{"code": "protected T clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n", "nl": "Set \"client secret\""}
{"code": "public DocsSearchQuery(VkApiClient client,UserActor actor,String q){\n  super(client,\"docs.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  q(q);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isSetStatus(){\n  return __isset_bit_vector.get(__STATUS_ISSET_ID);\n}\n", "nl": "Returns true if field status is set (has been assigned a value) and false otherwise"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.EUCLIDEAN);\n}\n", "nl": "this is currently selected?"}
{"code": "public ResponsePacket visit(SetUseSingleSpace request,QuerySession session){\n  ResponsePacket response=new ResponsePacket();\n  session.setUseRegularSpace(request.isUseSingleSpace());\n  return response;\n}\n", "nl": "Handle set single space [on off] request"}
{"code": "@Override public int hashCode(){\n  int result=info.getFilePath().hashCode();\n  result=31 * result + (int)(info.getBlockOffset() ^ (info.getBlockOffset() >>> 32));\n  result=31 * result + (int)(info.getBlockLength() ^ (info.getBlockLength() >>> 32));\n  result=31 * result + info.getSegmentId().hashCode();\n  return result;\n}\n", "nl": "method to get the hash code"}
{"code": "public void requestAssignSucReturnRoute(int nodeId){\n  enqueue(new AssignSucReturnRouteMessageClass().doRequest(nodeId,getCallbackId()));\n}\n", "nl": "Request the controller to set the return route from a node to the controller"}
{"code": "private void updateBounds(int top,int bottom,int left,int right){\n  bounds.set(left,top,right,bottom);\n}\n", "nl": "update the Bounds of circular"}
{"code": "public static ExpectedCondition<Boolean> heightOfElementGreaterThan(final WebElement element,final int expectedHeight){\n  return null;\n}\n", "nl": "Check if provided element height is greater than expected height"}
{"code": "public boolean isAxisMaxCustom(){\n  return mCustomAxisMax;\n}\n", "nl": "Returns true if the axis maxIndex value has been customized (and is not calculated automatically)"}
{"code": "public boolean haveUnread(){\n  for (  Letter letter : mails.values()) {\n    if (letter.isUnread()) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check whether mailbox contains empty letters"}
{"code": "@Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {\n  double[] pScalesArray={1.0f};\n  double[] tScalesArray={1.0f};\n  return synthesizeUsingF0Modification(backchannelNumber,pScalesArray,tScalesArray,aft);\n}\n", "nl": "Re-synthesize given vocalization using FDPSOLA technology"}
{"code": "@Deployment(resources={\"org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml\"}) public void testIncludeBinaryVariables() throws Exception {\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"oneTaskProcess\",Collections.singletonMap(\"binaryVariable\",(Object)\"It is I, le binary\".getBytes()));\n  processInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).includeProcessVariables().singleResult();\n  assertNotNull(processInstance);\n  byte[] bytes=(byte[])processInstance.getProcessVariables().get(\"binaryVariable\");\n  assertEquals(\"It is I, le binary\",new String(bytes));\n}\n", "nl": "Test confirming fix for ACT-1731"}
{"code": "public static void show(Context context,String message){\n  show(context,message,false);\n}\n", "nl": "show the mDialogTextView"}
{"code": "public CM_RECONNECT_AUTH(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_RECONNECT_AUTH </tt> packet"}
{"code": "public AccountRegisterDeviceQuery registerDevice(UserActor actor,String token,String deviceId){\n  return new AccountRegisterDeviceQuery(getClient(),actor,token,deviceId);\n}\n", "nl": "Subscribes an iOS/Android-based device to receive push notifications"}
{"code": "@Override public void addRange(int start,int end){\n  bitmap.add(start,end);\n}\n", "nl": "Adds to the current bitmap all integers in [rangeStart,rangeEnd)"}
{"code": "@Override public void onBackPressed(){\n  if (folderMode && !isDisplayingFolderView()) {\n    setFolderAdapter();\n    return;\n  }\n  setResult(RESULT_CANCELED);\n  super.onBackPressed();\n}\n", "nl": "When press back button, show folders if view is displaying images"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=triangle;\");\n}\n", "nl": "action to be performed"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set pc1=1 pc2=2;\");\n}\n", "nl": "action to be performed"}
{"code": "public NotSetPositionException(String message,Throwable cause){\n  super(message,cause);\n}\n", "nl": "Creates new error"}
{"code": "public static boolean isMetalLookAndFeel(){\n  return UIUtils.isMetalLookAndFeel();\n}\n", "nl": "Determines if current L&F is MetalLookAndFeel"}
{"code": "private void doInitialize(){\n  initAccessibility();\n  if (null == content) {\n    content=new StartPageContent();\n    add(content,BorderLayout.CENTER);\n    setFocusable(false);\n  }\n}\n", "nl": "#38900 - lazy addition of GUI components"}
{"code": "public static String addToNumberString(String numberString,long addAmount){\n  if (numberString == null)   return null;\n  int origLength=numberString.length();\n  long number=Long.parseLong(numberString);\n  return padNumberString(Long.toString(number + addAmount),origLength);\n}\n", "nl": "Add the number to the string, keeping (padding to min of original length)"}
{"code": "public ResponsePacket visit(SetTransaction request,QuerySession session){\n  ResponsePacket response=new ResponsePacket();\n  session.setTransaction(request.getTransaction());\n  response.setIntResult(0);\n  return response;\n}\n", "nl": "Handle set transaction lease time"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public ServerConfiguration enableDurableWrite(boolean enabled){\n  setProperty(SERVER_DURABLE_WRITE_ENABLED,enabled);\n  return this;\n}\n", "nl": "Set the flag to enable/disable durable write"}
{"code": "public synchronized Map<String,Object> waitForResult(){\n  return this.waitForResult(10);\n}\n", "nl": "Waits for the service to complete"}
{"code": "public static String[] createTags(String cName){\n  String shortTag=Classification.createShortTag(cName);\n  String longTag=cName.toLowerCase() + \"|\";\n  if (shortTag.equals(longTag))   return new String[]{shortTag};\n else   return new String[]{shortTag,longTag};\n}\n", "nl": "create tags for parsing header line"}
{"code": "public AccountSetPushSettingsQuery key(String value){\n  return unsafeParam(\"key\",value);\n}\n", "nl": "Set key"}
{"code": "public BoardAddTopicQuery(VkApiClient client,UserActor actor,int groupId,String title){\n  super(client,\"board.addTopic\",Integer.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Map<String,Object> returnError(List<? extends Object> errorMessageList){\n  return returnProblem(ModelService.RESPOND_ERROR,null,errorMessageList,null,null);\n}\n", "nl": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-0.5001,-0.5,-0.4999,-0.25,-0.0001,0.0,0.0001,0.25,1.0,1.2499,1.25,1.2501};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "@Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {\n  float[] pScalesArray={1.0f};\n  float[] tScalesArray={1.0f};\n  float[] tScalesTimes={1.0f};\n  float[] pScalesTimes={1.0f};\n  return synthesizeUsingF0Modification(backchannelNumber,pScalesArray,pScalesTimes,tScalesArray,tScalesTimes,aft);\n}\n", "nl": "Re-synthesize given vocalization using HNM technology"}
{"code": "public void activateAccount() throws LoginFailedException, RemoteServerException {\n  markTutorial(TutorialStateOuterClass.TutorialState.LEGAL_SCREEN);\n}\n", "nl": "Set the account to legal screen in order to receive valid response"}
{"code": "protected int addUniqueLeafNode(String elementName){\n  int contentSpecIndex=createContentSpec();\n  fContentSpec.setValues(XMLContentSpec.CONTENTSPECNODE_LEAF,elementName,null);\n  setContentSpec(contentSpecIndex,fContentSpec);\n  return contentSpecIndex;\n}\n", "nl": "create an XMLContentSpec for a leaf"}
{"code": "public PlacesGetCheckinsQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public void lockUserInput(){\n  locked=true;\n  tabbedPane.setEnabled(false);\n  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  statusBar.setText2(\"Busy...\");\n  getCommandManager().setEnableCritical(false);\n}\n", "nl": "ask view to prevent user input"}
{"code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void build(Context context,SuggestionValue suggestionValue,List<SuggestionRow> suggestionList){\n  if (nextBuilder != null) {\n    nextBuilder.build(context,suggestionValue,suggestionList);\n  }\n}\n", "nl": "Build the suggestion list based on the suggestion value"}
{"code": "public void updateProfile(GetPlayerResponse playerResponse){\n  updateProfile(playerResponse.getPlayerData());\n}\n", "nl": "Update the profile with the given response"}
{"code": "private void onPostScrollToPosition(int pos){\n  if (pos < 0)   return;\n  checkLastSticky(pos);\n}\n", "nl": "Call after onPostScrollToPosition"}
{"code": "public void clearCache(){\n  cachedCatchable.clear();\n  cachedMapObjects.getNearbyPokemons().clear();\n  cachedMapObjects.getCatchablePokemons().clear();\n  cachedMapObjects.getWildPokemons().clear();\n  cachedMapObjects.getDecimatedSpawnPoints().clear();\n  cachedMapObjects.getSpawnPoints().clear();\n}\n", "nl": "Clear map objects cache"}
{"code": "public PhotosGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ResourcesPoet addInteger(String name,Integer value){\n  addInteger(name,String.valueOf(value));\n  return this;\n}\n", "nl": "Add an integer to the config"}
{"code": "private Entry findEntryDo(Lease lease){\n  Entry e=findLeaseFromIterator(leases.values().iterator(),lease);\n  if (e == null)   e=findLeaseFromIterator(leaseInRenew.iterator(),lease);\n  return e;\n}\n", "nl": "Find a lease entry, or null"}
{"code": "@deprecated public boolean isOfType(RegionType type){\n  return this.type.equals(type);\n}\n", "nl": "/*    "}
{"code": "private void tryScrollBackToTop(){\n  if (!mPtrIndicator.isUnderTouch()) {\n    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);\n  }\n}\n", "nl": "Scroll back to to if is not under touch"}
{"code": "private static double computeCorrelationDistances(int n,float[] seriesA,float[] seriesB){\n  return 1 - Correlation.computePersonsCorrelationCoefficent(n,seriesA,seriesB);\n}\n", "nl": "compute correlation distance between two series"}
{"code": "public void resume(){\n  engine.resume();\n}\n", "nl": "Resumes waiting \"load&display\" tasks"}
{"code": "public void useTimings(boolean use){\n  useTimings=use;\n}\n", "nl": "Sets whether or not per event timing code should be used"}
{"code": "public GroupsEditQuery screenName(String value){\n  return unsafeParam(\"screen_name\",value);\n}\n", "nl": "Community screen name"}
{"code": "public boolean optimizeScanForSingleObject(){\n  return false;\n}\n", "nl": "return true if we can save iterator creation and get a single entry"}
{"code": "public Iterator iterator(){\n  return split2index.keySet().iterator();\n}\n", "nl": "gets an getLetterCodeIterator over all splits"}
{"code": "public NewsfeedGetBannedQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getBanned\",GetBannedResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public final void unload(T t){\n  if (t != null) {\n    objects.invalidate(t.getId());\n  }\n}\n", "nl": "Removes and unloads the object from the manager"}
{"code": "private static String decode(String pathElement){\n  try {\n    return URLDecoder.decode(pathElement,Charsets.UTF_8.name());\n  }\n catch (  UnsupportedEncodingException e) {\n    throw Throwables.propagate(e);\n  }\n}\n", "nl": "URL decodes a path element"}
{"code": "public TShortObjectIterator(TShortObjectHashMap<V> map){\n  super(map);\n  this._map=map;\n}\n", "nl": "Creates an iterator over the specified map"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public static long nowInMillis(){\n  return System.currentTimeMillis();\n}\n", "nl": "Current time from some fixed base time - so useful for cross machine comparison"}
{"code": "public void testSmallApiParent(){\n  doTestForParentApi(\"android:Theme.Light\",\"apiParentTestAfter2\");\n}\n", "nl": "Tests setting a parent defined for api < projectMinApi"}
{"code": "public boolean declaresMethod(String name,List<Type> parameterTypes){\n  checkLevel(SIGNATURES);\n  for (  SootMethod method : methodList) {\n    if (method.getName().equals(name) && method.getParameterTypes().equals(parameterTypes))     return true;\n  }\n  return false;\n}\n", "nl": "Does this class declare a method with the given name and parameter types?"}
{"code": "private void renewPlayerRanking(Race race){\n  List<SM_ABYSS_RANKING_PLAYERS> newlyCalculated;\n  newlyCalculated=generatePacketsForRace(race);\n  players.remove(race);\n  players.put(race,newlyCalculated);\n}\n", "nl": "Renews the player ranking by race"}
{"code": "public static String nowDateString(String format){\n  SimpleDateFormat df=new SimpleDateFormat(format);\n  return df.format(new Date());\n}\n", "nl": "Return a string formatted as format"}
{"code": "private void showError(String message){\n  Toast.makeText(getContext(),message,Toast.LENGTH_SHORT).show();\n}\n", "nl": "Shows the error in UI"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_UPDATE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300619,value0);\n}\n", "nl": "Quest updated: %0"}
{"code": "BarcodeRow(int width){\n  this.row=new byte[width];\n  currentLocation=0;\n}\n", "nl": "Creates a Barcode row of the width"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"@HD\");\n}\n", "nl": "is file acceptable?"}
{"code": "@Override public void clear(){\n  datastore=new byte[this.totalNumberOfElements * this.sizeOfEachElement];\n}\n", "nl": "This method will clear the store and create the new empty store"}
{"code": "public DefaultSyntaxKit(Lexer lexer){\n  super();\n  this.lexer=lexer;\n}\n", "nl": "Create a new Kit for the given language"}
{"code": "public Skill(SkillTemplate skillTemplate,Player effector,Creature firstTarget){\n  this(skillTemplate,effector,effector.getSkillList().getSkillLevel(skillTemplate.getSkillId()),firstTarget,null);\n}\n", "nl": "Each skill is a separate object upon invocation Skill level will be populated from player SkillList"}
{"code": "public void put(String name,int id){\n  name2id.put(name,id);\n  id2name.put(id,name);\n}\n", "nl": "put a name and id"}
{"code": "public FaveGetUsersQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getUsers\",GetUsersResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void startStreamingConsumption(long timeout){\n  jssc.start();\n  if (timeout < 0)   jssc.awaitTermination();\n else   jssc.awaitTermination(timeout);\n}\n", "nl": "Starts the streaming consumption"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.BRAYCURTIS + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public Vector3f interpolate(Vector3f finalVec,float changeAmnt){\n  this.x=(1 - changeAmnt) * this.x + changeAmnt * finalVec.x;\n  this.y=(1 - changeAmnt) * this.y + changeAmnt * finalVec.y;\n  this.z=(1 - changeAmnt) * this.z + changeAmnt * finalVec.z;\n  return this;\n}\n", "nl": "Sets this vector to the interpolation by changeAmnt from this to the finalVec this=(1-changeAmnt)*this + changeAmnt * finalVec"}
{"code": "public static void assertEquals(double expected[],double observed[],double tolerance){\n  assertEquals(\"Array comparison failure\",expected,observed,tolerance);\n}\n", "nl": "Verifies that two double arrays have equal entries, up to tolerance"}
{"code": "public SM_PET(int actionId,Collection<PetCommonData> pets){\n  this.actionId=actionId;\n  this.pets=pets;\n}\n", "nl": "For listing all pets on this character"}
{"code": "public void writeFloat(float a) throws IOException {\n  writeInt(Float.floatToIntBits(a));\n}\n", "nl": "write a float"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set fontSize=decrease;\");\n}\n", "nl": "action to be performed"}
{"code": "private void initData(){\n  for (int i=0; i < 2; i++) {\n    List<String> url=new ArrayList<>();\n    url.add(\"http://g.hiphotos.baidu.com/image/pic/item/c75c10385343fbf25431e823b27eca8065388f95.jpg\");\n    url.add(\"http://g.hiphotos.baidu.com/image/pic/item/960a304e251f95ca2f34115acd177f3e6609521d.jpg\");\n    mLists.add(url);\n  }\n}\n", "nl": "init Data"}
{"code": "public static void resetSingleUse(Context context,String showcaseID){\n  PrefsManager.resetShowcase(context,showcaseID);\n}\n", "nl": "Static helper method for resetting single use flag"}
{"code": "public boolean hasOption(String option){\n  return commandLine.hasOption(option);\n}\n", "nl": "Determine if an option was provided by the user via the CLI"}
{"code": "public static void writeObjectToFile(String path,Object toWrite,JavaSparkContext sc) throws IOException {\n  writeObjectToFile(path,toWrite,sc.sc());\n}\n", "nl": "Write an object to HDFS (or local) using default Java object serialization"}
{"code": "public DividerItemDecoration(Context context){\n  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);\n  mDivider=styledAttributes.getDrawable(0);\n  styledAttributes.recycle();\n}\n", "nl": "Default divider will be used"}
{"code": "public Builder considerExifParams(boolean considerExifParams){\n  this.considerExifParams=considerExifParams;\n  return this;\n}\n", "nl": "Sets whether ImageLoader will consider EXIF parameters of JPEG image (rotate, flip)"}
{"code": "public NewsfeedGetSuggestedSourcesQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getSuggestedSources\",GetSuggestedSourcesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void onConfigurationChanged(Configuration newConfig){\n  super.onConfigurationChanged(newConfig);\n  orientationBasedUI(newConfig.orientation);\n}\n", "nl": "Config recyclerView when configuration changed"}
{"code": "public String toString(){\n  return format;\n}\n", "nl": "gets the format string"}
{"code": "public static void w(String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.w(TAG,buildMsg(msg),e);\n  }\n}\n", "nl": "warning log"}
{"code": "public static int sp2px(Context context,float spValue){\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(spValue * scale + 0.5f);\n}\n", "nl": "convert sp to px"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "@Override public void onError(AirMapException e){\n  onDisconnect(false);\n}\n", "nl": "Called when there was an error retrieving the current flight"}
{"code": "protected AuthSignupQuery clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n", "nl": "Set client secret"}
{"code": "@deprecated public CompactByteArray(String indexArray,String valueArray){\n  this(Utility.RLEStringToCharArray(indexArray),Utility.RLEStringToByteArray(valueArray));\n}\n", "nl": "/*    "}
{"code": "private UShort(int value) throws NumberFormatException {\n  this.value=value;\n  rangeCheck();\n}\n", "nl": "Create an <code>unsigned short</code>"}
{"code": "static Matrix createMatrix(Border border,Bitmap bitmap,float extraSize){\n  return createMatrix(border,bitmap.getWidth(),bitmap.getHeight(),extraSize);\n}\n", "nl": "create a matrix which let bitmap centerCrop in the border rect"}
{"code": "protected void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){\n}\n", "nl": "Override this method to update your headers"}
{"code": "public void addScrollingListener(OnWheelScrollListener listener){\n  scrollingListeners.add(listener);\n}\n", "nl": "Adds wheel scrolling listener"}
{"code": "public ExternalizableServerEntry(){\n}\n", "nl": "Required for Externalizable and ISwapExternalizable"}
{"code": "public SecureSendNotificationQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public static void addPosTag(soot.tagkit.Host host,polyglot.util.Position pos){\n  if (pos != null) {\n    addPosTag(host,pos.column(),pos.endColumn());\n  }\n}\n", "nl": "Position Tag Adder"}
{"code": "public CharacterIdChannelPair(){\n}\n", "nl": "only for externalisation"}
{"code": "public CholeskyDecomposition chol(){\n  return new CholeskyDecomposition(this);\n}\n", "nl": "Cholesky Decomposition"}
{"code": "public RegexFileFilter(Pattern pattern){\n  if (pattern == null) {\n    throw new IllegalArgumentException(\"Pattern is missing\");\n  }\n  this.pattern=pattern;\n}\n", "nl": "Construct a new regular expression filter for a compiled regular expression"}
{"code": "@Override public String version(){\n  return PostgreSQLSinkConnector.VERSION;\n}\n", "nl": "Return connector version"}
{"code": "public static ULong valueOf(BigInteger value) throws NumberFormatException {\n  return new ULong(value);\n}\n", "nl": "Create an <code>unsigned long</code>"}
{"code": "public static void log(TeamException e){\n  log(e.getStatus());\n}\n", "nl": "Convenience method for logging SVNExceptions to the plugin log"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "protected MarketAddQuery categoryId(int value){\n  return unsafeParam(\"category_id\",value);\n}\n", "nl": "Item category id"}
{"code": "public boolean isSelected(int fId){\n  Node v=getANode(fId);\n  return v != null && getSelected(v);\n}\n", "nl": "is node with this f id selected?"}
{"code": "private static byte charToByte(char c){\n  return (byte)\"0123456789ABCDEF\".indexOf(c);\n}\n", "nl": "Convert char to byte"}
{"code": "private void integerToByteArray(int value,byte[] b,int offset){\n  b[offset]=(byte)(value & 0xFF);\n  b[offset + 1]=(byte)(value >> 8 & 0xFF);\n  b[offset + 2]=(byte)(value >> 16 & 0xFF);\n  b[offset + 3]=(byte)(value >> 24 & 0xFF);\n}\n", "nl": "Convert integer value to bytes"}
{"code": "public void assertMatches(String stringToMatch,String regex){\n  assertMatches(\"\",stringToMatch,regex);\n}\n", "nl": "Check if provided string matches regex"}
{"code": "protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){\n  this.fontRendererObj.drawString(I18n.format(\"container.crafting\",new Object[0]),97,8,4210752);\n}\n", "nl": "Draw the foreground layer for the GuiContainer (everything in front of the items)"}
{"code": "public static final void removeAlliance(PlayerAlliance alliance){\n  if (alliance != null) {\n    League league=alliance.getLeague();\n    Preconditions.checkNotNull(league,\"League should not be null\");\n    league.onEvent(new LeagueLeftEvent(league,alliance));\n  }\n}\n", "nl": "Remove alliance from league (normal leave)"}
{"code": "public WallCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n", "nl": "Post the comment as from the community;"}
{"code": "private static boolean contains(String group,String member){\n  String quote=Pattern.quote(member);\n  Pattern pattern=Pattern.compile(\",\" + quote + \"$|^\"+ quote+ \",|^\"+ quote+ \"$\"+ \"|,\"+ quote+ \",\");\n  Matcher matcher=pattern.matcher(group);\n  return matcher.find();\n}\n", "nl": "Return true if find \",member,\" | \",member$\" | \"^member,\" | \"^member$\""}
{"code": "private void startSession(Session session,Json json){\n  String namespace=json.at(NAMESPACE).asString();\n  MindmapsGraph graph=getGraph.apply(namespace);\n  GraqlSession graqlSession=new GraqlSession(session,graph);\n  sessions.put(session,graqlSession);\n}\n", "nl": "Start a new Graql shell session"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void shutdown() throws TeamException {\n  commentsManager.saveCommentHistory();\n  commentsManager.saveCommentTemplates();\n  keyFilesManager.saveKeyFilesHistory();\n}\n", "nl": "Called when plugin is stopped"}
{"code": "public ResourcesPoet addComment(String comment){\n  Comment commentNode=document.createComment(comment);\n  resourceElement.appendChild(commentNode);\n  return this;\n}\n", "nl": "Add a comment to the config"}
{"code": "public static void applyForPermit(AirMapAvailablePermit permit,AirMapCallback<AirMapPilotPermit> listener){\n  String url=String.format(permitApplyUrl,permit.getId());\n  AirMap.getClient().postWithJsonBody(url,permit.getAsParams(),new GenericOkHttpCallback(listener,AirMapPilotPermit.class));\n}\n", "nl": "Apply for a permit"}
{"code": "public static void addPropertiesListListener(PropertiesListListener listener){\n  if (!propertieslistListeners.contains(listener)) {\nsynchronized (propertieslistListeners) {\n      propertieslistListeners.add(listener);\n    }\n  }\n}\n", "nl": "add recent file listener"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public SQLDataMigrator graph(MindmapsGraph graph){\n  this.graph=graph;\n  return this;\n}\n", "nl": "Set a graph from which to get information"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "private static int try_warning(int count,String s,String e){\n  print(\">    \" + s + \"*** warning ***\\n>      Message: \"+ e+ \"\\n\");\n  return ++count;\n}\n", "nl": "Print appropriate messages for unsuccessful outcome try"}
{"code": "protected MarketEditQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n", "nl": "New description"}
{"code": "public void saveMappingToFile(String fileName) throws IOException {\n  System.err.println(\"Writing name2id map to file: \" + fileName);\n  try (Writer w=new FileWriter(fileName)){\n    writeMapping(w);\n  }\n   System.err.println(\"Done (\" + id2name.size() + \" entries)\");\n}\n", "nl": "save mapping to file"}
{"code": "public final void createView(WXVContainer parent,int index){\n  if (!isLazy()) {\n    createViewImpl(parent,index);\n  }\n}\n", "nl": "create view"}
{"code": "public GUIHandler registerContainer(String id,Function<GUIContext,Container> creator){\n  containers.put(id,creator);\n  return this;\n}\n", "nl": "Registers a container creator for the given ID"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void writeStringToFile(String path,String toWrite,SparkContext sc) throws IOException {\n  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());\n  try (BufferedOutputStream bos=new BufferedOutputStream(fileSystem.create(new Path(path)))){\n    bos.write(toWrite.getBytes(\"UTF-8\"));\n  }\n }\n", "nl": "Write a String to a file (on HDFS or local) in UTF-8 format"}
{"code": "public static void copyToClipboard(String s){\n  StringSelection stringSelection=new StringSelection(s);\n  Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n  clipboard.setContents(stringSelection,null);\n}\n", "nl": "Copy a string to clipboard"}
{"code": "public ViewActionSeparator(){\n  this(-1);\n}\n", "nl": "Creates a separator"}
{"code": "@deprecated public int hashCode(){\n  return this.text.hashCode() ^ this.pos ^ this.begin^ this.end;\n}\n", "nl": "/*    "}
{"code": "private double sigmoid(double x){\n  x=12.0 * x - 6.0;\n  return (1.0 / (1.0 + Math.exp(-1.0 * x)));\n}\n", "nl": "Computes a normalized sigmoid"}
{"code": "@Override public RecordReader createReader(InputSplit split,Configuration conf) throws IOException, InterruptedException {\n  RecordReader reader=new ListStringRecordReader();\n  reader.initialize(conf,split);\n  return reader;\n}\n", "nl": "Creates a reader from an input split"}
{"code": "private static void increaseKinahAmount(Player player,long price){\n  player.getInventory().increaseKinah(price);\n}\n", "nl": "This method will increase the kinah amount of a player"}
{"code": "public void removeOnItemTouchListener(RecyclerView.OnItemTouchListener listener){\n  mRecycler.removeOnItemTouchListener(listener);\n}\n", "nl": "Remove the onItemTouchListener for the recycler"}
{"code": "public VideoSearchQuery(VkApiClient client,UserActor actor,String q){\n  super(client,\"video.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  q(q);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@NotNull public static String dominantEmotionWithScore(@NotNull Emotion emotion){\n  Map.Entry<Emotion.EmotionScore,Double> scoreVal=emotion.scores.scores().entrySet().stream().max(null).get();\n  return String.format(\"%s:%.2f\",StringUtils.capitalize(scoreVal.getKey().name()),scoreVal.getValue());\n}\n", "nl": "Returns the most dominate emotion and the score"}
{"code": "private void eatImage(){\n  if (getBitePosition()) {\n    setBittenImage();\n  }\n}\n", "nl": "chomp some foodie goodness!"}
{"code": "public ChunkManager(World world,long seed){\n  this.world=world;\n  loadSeed(seed);\n  generateTerrain();\n  this.random=new Random();\n}\n", "nl": "Used when loading a new world"}
{"code": "public String toJson() throws JsonGenerationException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.writeValueAsString(this);\n}\n", "nl": "obj --> json"}
{"code": "@deprecated protected int write(int unit){\n  int newLength=this.charsLength + 1;\n  ensureCapacity(newLength);\n  this.charsLength=newLength;\n  this.chars[(this.chars.length - this.charsLength)]=((char)unit);\n  return this.charsLength;\n}\n", "nl": "/*    "}
{"code": "private static String keyForPayload(String name){\n  return \"service_payload_\" + name;\n}\n", "nl": "Service additional payload key"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set mode=\" + (Comparer.COMPARISON_MODE.RELATIVE) + \";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.getCommandManager().updateEnableState();\n}\n", "nl": "action to be performed"}
{"code": "public Builder renameColumn(String oldName,String newName){\n  return transform(new RenameColumnsTransform(oldName,newName));\n}\n", "nl": "Rename a single column"}
{"code": "public Vector add(Vector other){\n  return new Vector(x + other.x,y + other.y);\n}\n", "nl": "Add to this vector the given vector"}
{"code": "public void gossipSharedData(SharedGossipDataMessage message){\n  gossipManager.gossipSharedData(message);\n}\n", "nl": "Gossip shared data"}
{"code": "public FriendsGetListsQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getLists\",GetListsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void resetInitialIfExistSearchActive(){\n  _initialIfExistSearchActive=false;\n}\n", "nl": "reset the _initialIfExistSearchActive indicator"}
{"code": "default String objectPropertyName(IRI propIri){\n  return \"op-\" + fromIri(propIri);\n}\n", "nl": "Generate the name of a MM relation type from the IRI of an OWL object property"}
{"code": "public void broadcastHate(int value){\n  for (  VisibleObject visibleObject : getOwner().getKnownList().getKnownObjects().values()) {\n    if (visibleObject instanceof Creature) {\n      ((Creature)visibleObject).getAggroList().notifyHate(getOwner(),value);\n    }\n  }\n}\n", "nl": "Notify hate value to all visible creatures"}
{"code": "public GenericAttr(String name,byte data[]){\n  attr_name=new AsciiCP(name);\n  this.data=data;\n}\n", "nl": "Make up a new attribute"}
{"code": "public FriendsGetMutualQuery order(FriendsGetMutualOrder value){\n  return unsafeParam(\"order\",value);\n}\n", "nl": "Sort order"}
{"code": "public static boolean isLeapYear(int year){\n  return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\n", "nl": "Check for a leap year"}
{"code": "private boolean isDistanceToRootCache(Direction direction){\n  int directionOrdinal=direction.getDirection();\n  Float f=mDistToRootCache[directionOrdinal];\n  if (f < 0) {\n    return false;\n  }\n  return true;\n}\n", "nl": "is the distance to the Root Cached"}
{"code": "public FriendsGetQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"friends.get\",GetFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private static boolean hasHorizontalConstraints(@NotNull ConstraintWidget widget){\n  ConstraintAnchor left=widget.getAnchor(ConstraintAnchor.Type.LEFT);\n  ConstraintAnchor right=widget.getAnchor(ConstraintAnchor.Type.RIGHT);\n  return (left != null && left.isConnected()) || (right != null && right.isConnected());\n}\n", "nl": "Return true if the widget has horizontal constraints"}
{"code": "public void refreshCalendar(){\n  TextView title=(TextView)rootView.findViewById(R.id.title);\n  refreshDays();\n  title.setText(android.text.format.DateFormat.format(CalendarUtils.getCalendarMonthTitleFormat(),month));\n}\n", "nl": "refresh current month"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static String extractCSVOutputByFieldNum(String csvOut,int fieldNum){\n  String tokens[]=csvOut.split(\",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\",-1);\n  return tokens[fieldNum];\n}\n", "nl": "Used for testing"}
{"code": "public static boolean isAquaLookAndFeel(){\n  return UIUtils.isAquaLookAndFeel();\n}\n", "nl": "Determines if current L&F is AquaLookAndFeel"}
{"code": "public PackageScanner useClassLoader(ClassLoader classLoader){\n  this.classLoader=classLoader;\n  return this;\n}\n", "nl": "Sets the classloader to scan"}
{"code": "@Override public String toString(){\n  String json=gson.toJson(this);\n  log.debug(json);\n  return json;\n}\n", "nl": "JSON representation of the EsAlarm"}
{"code": "public AccountSetNameInMenuQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"account.setNameInMenu\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"show gridLines=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof ChartViewer) {\n    ((ChartViewer)getViewer()).setShowVerticalGridLines(show);\n  }\n}\n", "nl": "parses the given command and executes it"}
{"code": "public DefaultQueryExtensionPathInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static List<JSONObject> createJSONInput(FileSystem fs){\n  String inputJSONFile=SystemConfiguration.getProperty(DistributedTestDriver.JSON_PIR_INPUT_FILE_PROPERTY);\n  logger.info(\"PIR JSON input being created at \" + inputJSONFile);\n  List<JSONObject> dataElementsJSON=createJSONDataElements();\n  HDFS.writeFile(dataElementsJSON,fs,inputJSONFile,true);\n  logger.info(\"PIR JSON input successfully created!\");\n  return dataElementsJSON;\n}\n", "nl": "Creates JSON input and writes to hdfs"}
{"code": "@Override public boolean isNullMeasureValue(int ordinal){\n  return isNullMeasureValue(ordinal,rowMapping[currentRow]);\n}\n", "nl": "Below method will be used to to check whether measure value is null or for a measure"}
{"code": "protected MarketRestoreCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n", "nl": "Deleted comment id"}
{"code": "public FriendsGetAppUsersQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getAppUsers\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static int findNextIndexNonZero(double[] contour,int current){\n  for (int i=current + 1; i < contour.length; i++) {\n    if (contour[i] != 0) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "nl": "To find next NonZero index in a given array"}
{"code": "public AudioAddQuery(VkApiClient client,UserActor actor,int audioId,int ownerId){\n  super(client,\"audio.add\",Integer.class);\n  accessToken(actor.getAccessToken());\n  audioId(audioId);\n  ownerId(ownerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public PacketBuffer write(PacketBuffer buf){\n  values.forEach(null);\n  return buf;\n}\n", "nl": "Writes this packet to the given buffer"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "is viewer currently locked?"}
{"code": "public AppsGetCatalogQuery platform(AppsPlatform value){\n  return unsafeParam(\"platform\",value);\n}\n", "nl": "Set platform"}
{"code": "public EntryUpdatedPacket(OperationID operationID,IEntryHolder originalEntryHolder,IEntryHolder newEntryHolder,IEntryHolder notifyEH,ServerTransaction xtn,boolean fromReplication,boolean notifyMatch,boolean notifyRematch){\n  super(operationID,newEntryHolder,xtn,0);\n  _originalEntryHolder=originalEntryHolder;\n  _notifyEH=notifyEH;\n  _fromReplication=fromReplication;\n  _notifyMatched=notifyMatch;\n  _notifyRematched=notifyRematch;\n}\n", "nl": "Constructs an EntryUpdatedPacket"}
{"code": "public NewsfeedAddBanQuery userIds(Integer... value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids"}
{"code": "public void loading(){\n  mHintView.setVisibility(View.GONE);\n  mProgressBar.setVisibility(View.VISIBLE);\n}\n", "nl": "loading status"}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state"}
{"code": "public void removeAtMeGroup(String groupId){\n  if (atMeGroupList.contains(groupId)) {\n    atMeGroupList.remove(groupId);\n    EasePreferenceManager.getInstance().setAtMeGroups(atMeGroupList);\n  }\n}\n", "nl": "remove group from the list"}
{"code": "public PublicKey(byte[] pub,Cryptography crypto){\n  this.pub=pub;\n  this.crypto=crypto;\n}\n", "nl": "Create from uncompressed binary representation"}
{"code": "public DeviceInfo(DeviceInfos deviceInfos){\n  this();\n  deviceInfoBuilder.setAndroidBoardName(deviceInfos.getAndroidBoardName()).setAndroidBootloader(deviceInfos.getAndroidBootloader()).setDeviceBrand(deviceInfos.getDeviceBrand()).setDeviceId(deviceInfos.getDeviceId()).setDeviceModel(deviceInfos.getDeviceModel()).setDeviceModelBoot(deviceInfos.getDeviceModelBoot()).setDeviceModelIdentifier(deviceInfos.getDeviceModelIdentifier()).setFirmwareBrand(deviceInfos.getFirmwareBrand()).setFirmwareFingerprint(deviceInfos.getFirmwareFingerprint()).setFirmwareTags(deviceInfos.getFirmwareTags()).setFirmwareType(deviceInfos.getFirmwareType()).setHardwareManufacturer(deviceInfos.getHardwareManufacturer()).setHardwareModel(deviceInfos.getHardwareModel());\n}\n", "nl": "Create a device info with already existing device infos"}
{"code": "public EnumElemValPair(String name,char kind,String tval,String cval){\n  super(name,kind);\n  this.tval=new AsciiCP(tval);\n  this.cval=new AsciiCP(cval);\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "public static ArrayList<String> matches(String text){\n  return matches(text,ALL);\n}\n", "nl": "It finds urls inside the text and return the matched ones"}
{"code": "public static GroupMapping createSpecificMapping(String... specificGroups){\n  return new GroupMapping(specificGroups);\n}\n", "nl": "Create a group mapping representing specific named groups"}
{"code": "private LRMIInvocationContext snapshot(){\n  LRMIInvocationContext newContext=_nextContext == null ? new LRMIInvocationContext() : _nextContext;\n  newContext._previousContext=this;\n  return newContext;\n}\n", "nl": "Snapshot current state and returns a new context which can be restored to the previous snapshot by calling restore"}
{"code": "public LikesGetListQuery friendsOnly(Boolean value){\n  return unsafeParam(\"friends_only\",value);\n}\n", "nl": "Return only the current user's friends"}
{"code": "public MarketSearchQueryWithExtended(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"market.search\",SearchExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public float readFloat() throws IOException {\n  read(bytes,0,4);\n  for (int i=0; i < 4; i++)   byteBuffer.put(i,bytes[4 - i - 1]);\n  return byteBuffer.getFloat(0);\n}\n", "nl": "read float, little endian"}
{"code": "public AbstractInfoflow(BiDirICFGFactory icfgFactory){\n  if (icfgFactory == null)   this.icfgFactory=new DefaultBiDiICFGFactory();\n else   this.icfgFactory=icfgFactory;\n}\n", "nl": "Creates a new instance of the abstract info flow problem"}
{"code": "public PhotosEditAlbumQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "private void AttackPath(int kind,int num,int aKind){\n  enemys[kind][num].begin_Attack(aKind);\n}\n", "nl": "decide Attack Path when Enemy state is Attack"}
{"code": "public void clearReads(){\n  dataTable.clear();\n  setNumberReads(0);\n}\n", "nl": "erase all reads"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0,0.341417152147,0.512125728221,0.625931445604,0.71128573364,0.77956916407,0.836472022761,0.885245901639,0.927923045658,0.965858284785,1d,1d};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "private HttpURLConnection acquireNextHost(){\n  String host=nextHost();\n  while (!availability.get(host).tryAcquire()) {\n    host=nextHost();\n  }\n  return getHost(host,POST);\n}\n", "nl": "Block until there is a host available"}
{"code": "public Element makeXmlElement(Document document){\n  return makeXmlElement(document,null);\n}\n", "nl": "Makes an XML Element object with an attribute for each field of the entity"}
{"code": "private void createChunkList(){\n  this.oneDictionaryChunkList=new ArrayList<ByteBuffer>(dictionary_one_chunk_size);\n  chunk_count++;\n}\n", "nl": "initialise one dictionary size chunk list and increment chunk count"}
{"code": "public static float convert(String stringValue){\n  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {\n    return MISSING_VALUE;\n  }\n  Matcher matcher=COMMA_PATTERN.matcher(stringValue);\n  return Float.parseFloat(matcher.replaceAll(\"\"));\n}\n", "nl": "Returns a float that is parsed from the given String <p> We remove any commas before parsing"}
{"code": "public static void startClock(){\n  if (clockStarted) {\n    throw new IllegalStateException(\"Clock is already started\");\n  }\n  updater=new GameTimeUpdater(getGameTime());\n  ThreadPoolManager.getInstance().scheduleAtFixedRate(updater,0,5000);\n  clockStarted=true;\n}\n", "nl": "Starts the counter that increases the clock every tick"}
{"code": "public <T>void send(T message){\n  sendToTargetOrType(message,null,null);\n}\n", "nl": "send the message type of T, all receiver can receive the message"}
{"code": "public void addEquipmentIds(final Collection<Long> equipmentIds){\n  for (  Long equipmentId : equipmentIds) {\n    addEquipmentId(equipmentId);\n  }\n}\n", "nl": "Adds all equipment id's of that list as dependency to this tag"}
{"code": "public DatabaseGetStreetsByIdQuery(VkApiClient client,int... streetIds){\n  super(client,\"database.getStreetsById\",Utils.buildParametrizedType(List.class,Street.class));\n  streetIds(streetIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Builder alphaOfDisabledElements(float alpha){\n  this.alphaOfDisabledElements=alpha;\n  return this;\n}\n", "nl": "Set the alpha level of disabled elements"}
{"code": "public ConfigDialog switchTab(String tabLabel){\n  if (!tabs.isEmpty()) {\n    tabs.stream().filter(null).findFirst().orElseThrow(null).click();\n  }\n  return this;\n}\n", "nl": "Method used to change actual opened tab on a dialog"}
{"code": "public static DateTimeUnit fromJodaDateTime(DateTime dateTime){\n  return new DateTimeUnit(dateTime.getYear(),dateTime.getMonthOfYear(),dateTime.getDayOfMonth(),dateTime.getDayOfWeek());\n}\n", "nl": "Converts from Joda-Time DateTime to DateUnit"}
{"code": "public void putObject(String key,Object obj,Gson gson){\n  checkForNullKey(key);\n  putString(key,gson.toJson(obj));\n}\n", "nl": "Put ObJect any type into SharedPrefrences with 'key' and save"}
{"code": "void refreshFinish(int width,int height){\n  mWXSDKInstance.onRefreshSuccess(width,height);\n}\n", "nl": "weex refresh finish"}
{"code": "public static boolean isNetworkAvailable(Context context){\n  ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n  if (null == manager)   return false;\n  NetworkInfo info=manager.getActiveNetworkInfo();\n  if (null == info || !info.isAvailable())   return false;\n  return true;\n}\n", "nl": "check NetworkAvailable"}
{"code": "public int size(){\n  return playerTemplates.size();\n}\n", "nl": "Size of player templates"}
{"code": "public static void enableSvcs(boolean enable){\n  ServiceDispatcher.enableSvcs=enable;\n}\n", "nl": "Enables/Disables the startup services globally (this will not effect any dispatchers already running)"}
{"code": "public void dumpASCII(){\n  dumpASCII(new OutputStreamWriter(System.out));\n}\n", "nl": "Dumps the wave data associated with this result"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array"}
{"code": "private void drawShadows(Canvas canvas){\n  int height=(int)(3 * getItemHeight());\n  topShadow.setBounds(0,0,getWidth(),height);\n  topShadow.draw(canvas);\n  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());\n  bottomShadow.draw(canvas);\n}\n", "nl": "Draws shadows on top and bottom of control"}
{"code": "public StartNavigator(Activity activity){\n  this.activity=activity;\n}\n", "nl": "Create StartNavigation"}
{"code": "public static void json(String json){\n  printer.json(json);\n}\n", "nl": "Formats the json content and print it"}
{"code": "public MessagesGetChatQueryWithChatIds(VkApiClient client,UserActor actor,List<Integer> chatIds){\n  super(client,\"messages.getChat\",Utils.buildParametrizedType(List.class,Chat.class));\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void dumpRelations(String title){\n  dump(new PrintWriter(System.out),0,title,true);\n}\n", "nl": "Dumps the utterance in textual form"}
{"code": "public static ServiceClient createServiceClient(TrustManager trustManager,KeyManager keyManager,int requestPayloadSizeLimit){\n  return createServiceClient(CertificateUtil.createSSLContext(trustManager,keyManager),requestPayloadSizeLimit);\n}\n", "nl": "Create a ServiceClient instance using the given TrustManager, KeyManager and requestPayloadSizeLimit"}
{"code": "public AppsGetQuery appId(Integer value){\n  return unsafeParam(\"app_id\",value);\n}\n", "nl": "Application ID"}
{"code": "public void addCategory(String category){\n  if (TextUtils.isEmpty(category))   return;\n  mIntent.addCategory(category);\n}\n", "nl": "Add category to Intent"}
{"code": "public static void addStrut(JComponent b,int layout,int size){\n  if (size < 1)   return;\n  b.add(getAxis(b,layout) == BoxLayout.X_AXIS ? Box.createHorizontalStrut(size) : Box.createVerticalStrut(size));\n}\n", "nl": "Add a strut, or rigid spacing, to a UI component"}
{"code": "protected void startAuthenticationAndInjectCsrfToken(HttpRequest request){\n  logger.debug(\"Authenticate because no session is found in cookie store or it doesn't match with the one used to get the CSRF token we have.\");\n  startAuthenticationFlow();\n  logger.debug(\"Injecting CSRF token\");\n  injectCsrfTokenIntoHeader(request,latestCsrfToken);\n}\n", "nl": "Starts authentication flow and inject csrf token"}
{"code": "@Deprecated public void showDoneButton(boolean showDone){\n  setProgressButtonEnabled(showDone);\n}\n", "nl": "Shows or hides Done button, replaced with setProgressButtonEnabled"}
{"code": "public ResourcesPoet addInteger(String name,String value){\n  Element bool=document.createElement(\"integer\");\n  bool.setAttribute(\"name\",name);\n  bool.appendChild(document.createTextNode(String.valueOf(value)));\n  resourceElement.appendChild(bool);\n  return this;\n}\n", "nl": "Add an integer to the config"}
{"code": "public Builder clearMessage(){\n  message_=getDefaultInstance().getMessage();\n  onChanged();\n  return this;\n}\n", "nl": "<code>optional string message = 1;</code>"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array"}
{"code": "private Unsigned(){\n}\n", "nl": "No instances"}
{"code": "private static void addToArray(Integer[] sum,int[] add){\n  for (int i=0; i < add.length; i++) {\n    sum[i]+=add[i];\n  }\n}\n", "nl": "add all values to sum"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.getJList().clearSelection();\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static boolean propertyValueEqualsIgnoreCase(String resource,String name,String compareString){\n  String value=getPropertyValue(resource,name);\n  if (value == null)   return false;\n  return value.trim().equalsIgnoreCase(compareString);\n}\n", "nl": "Compares Ignoring Case the specified property to the compareString, returns true if they are the same, false otherwise"}
{"code": "public boolean isSink(){\n  return this.sinkSource == SinkSource.Sink || this.sinkSource == SinkSource.Both;\n}\n", "nl": "Checks whether this definition models a sink"}
{"code": "public boolean isAbnormalState(AbnormalState id){\n  int state=abnormals & id.getId();\n  return state > 0 && state <= id.getId();\n}\n", "nl": "Used for compound abnormal state checks"}
{"code": "public NotEqualsSpacePredicate(Object expectedValue){\n  super(expectedValue,null);\n}\n", "nl": "Creates a scalar predicate using the specified expected value"}
{"code": "public Builder addColumnString(String name,String regex,Integer minAllowableLength,Integer maxAllowableLength){\n  return addColumn(new StringMetaData(name,regex,minAllowableLength,maxAllowableLength));\n}\n", "nl": "Add a String column with the specified restrictions"}
{"code": "public static StatisticLevel toLevel(int val,Level defaultLevel){\n  return STATISTIC;\n}\n", "nl": "Returns custom level for debug type log message"}
{"code": "public PhotosReportCommentQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Reason for the complaint"}
{"code": "public static boolean isNetworkTypeCellular(String networkType){\n  return networkType.equals(\"MOBILE\");\n}\n", "nl": "Check if connected to cellular provider"}
{"code": "public GermanLexicon(URL compiledURL,URL addendaURL,URL letterToSoundURL,boolean binary){\n  setLexiconParameters(compiledURL,addendaURL,letterToSoundURL,binary);\n}\n", "nl": "Creates a GermanLexicon based upon the given compiled and addenda DBs and the given letter to sound rules"}
{"code": "public boolean isModified(){\n  return _modified;\n}\n", "nl": "Any of the components modified?"}
{"code": "public ContentletQuery addHost(Host host){\n  return addHost(host.getIdentifier());\n}\n", "nl": "Adds a host limit to the query"}
{"code": "public void clear(){\n  mRoot=null;\n  if (mSelection != null) {\n    mSelection.clear();\n  }\n  mWidgets.clear();\n}\n", "nl": "Clear the scene"}
{"code": "public static void closePrivateStore(Player activePlayer){\n  activePlayer.setStore(null);\n  activePlayer.unsetState(CreatureState.PRIVATE_SHOP);\n  PacketSendUtility.broadcastPacket(activePlayer,new SM_EMOTION(activePlayer,EmotionType.CLOSE_PRIVATESHOP,0,0),true);\n}\n", "nl": "This method will destroy the player's store"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0,0,0,0,0.0594218160072,0.0436977691036,0.0508364857798,0.054873528325,0.0587182664085,0.0636229042785};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static String computeSimpsonReciprocal(ViewerBase viewer,ProgressListener progressListener) throws IOException, CanceledException {\n  if (viewer instanceof MainViewer)   return toString(computeSimpsonReciprocal((MainViewer)viewer,progressListener));\n else   if (viewer instanceof ClassificationViewer)   return toString(computeSimpsonReciprocal((ClassificationViewer)viewer,progressListener));\n else   return null;\n}\n", "nl": "compute the Shannon-Weaver diversity index in bits"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static Date stringToDate(String formattedDate){\n  return stringToDate(formattedDate,SIMPLE_DATE_FORMAT);\n}\n", "nl": "Create a date from formatted string"}
{"code": "public CMUTimeLexicon(){\n  super(\"cmutimelex\");\n}\n", "nl": "Creates a default CMUTimeLexicon which is a binary lexicon"}
{"code": "public void sendNoMsgToTargetWithToken(Object token,Object target){\n  sendToTargetOrType(target.getClass(),token);\n}\n", "nl": "send message to target with token,when a receiver has register with same token,it will receive this msg"}
{"code": "@Override public boolean storeSkills(Player player){\n  List<PlayerSkillEntry> skillsActive=Lists.newArrayList(player.getSkillList().getAllSkills());\n  List<PlayerSkillEntry> skillsDeleted=Lists.newArrayList(player.getSkillList().getDeletedSkills());\n  store(player,skillsActive);\n  store(player,skillsDeleted);\n  return true;\n}\n", "nl": "Stores all player skills according to their persistence state"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public java.util.Calendar toJdkCalendar(){\n  return toJodaDateTime().toGregorianCalendar();\n}\n", "nl": "Converts dateUnit to JDK Calendar"}
{"code": "public boolean removeByObject(T obj){\n  return removeByObject_impl(obj);\n}\n", "nl": "given an object scan the list, find it and remove it, returns true if found"}
{"code": "public EqualizeHistTransform(){\n  this(new Random(1234),CV_BGR2GRAY);\n}\n", "nl": "Default transforms histogram equalization for CV_BGR2GRAY (grayscale)"}
{"code": "public boolean hasUpdateListeners(){\n  boolean isEmpty=!listeners.isEmpty();\n  return isEmpty;\n}\n", "nl": "Returns information whether the tag has any update listeners registered or not"}
{"code": "public static <K,V>boolean putMapNotNullKeyAndValue(Map<K,V> map,K key,V value){\n  if (map == null || key == null || value == null) {\n    return false;\n  }\n  map.put(key,value);\n  return true;\n}\n", "nl": "add key-value pair to map, both key and value need not null"}
{"code": "public void sendStatus(ServiceStatus serverStatus,String status){\n  NotificationMessage<StatusReport> message=new NotificationMessage<>();\n  message.setMethod(LSPMethods.LANGUAGE_STATUS.getMethod());\n  message.setParams(new StatusReport().withMessage(status).withType(serverStatus.name()));\n  send(message);\n}\n", "nl": "Sends a status to the client to be presented to users"}
{"code": "public static File createParentDirIfNotExists(String filePath){\n  File file=new File(filePath);\n  file.getParentFile().mkdirs();\n  return file;\n}\n", "nl": "Create a directory if needed"}
{"code": "public PhotosGetCommentsQueryWithExtended fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public boolean isOrientationSpecificLayout(){\n  return myEditedConfig.getScreenOrientationQualifier() != null;\n}\n", "nl": "Returns true if the current layout is orientation-specific"}
{"code": "public AdsDeleteAdsQuery(VkApiClient client,UserActor actor,int accountId,String ids){\n  super(client,\"ads.deleteAds\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  ids(ids);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public MapperKey(Type<?> aType,Type<?> bType){\n  this.aType=(Type<Object>)aType;\n  this.bType=(Type<Object>)bType;\n}\n", "nl": "Constructs a new MapperKey instance"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public SM_QUEST_ACTION(int questId,int timer){\n  this.action=4;\n  this.questId=questId;\n  this.timer=timer;\n  this.step=0;\n}\n", "nl": "Display Timer(4)"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MACRO_MSG_PROCESS(String value0,String value1,String value2){\n  return new SM_SYSTEM_MESSAGE(1300921,value0,value1,value2);\n}\n", "nl": "%0: Level %1 (%2)"}
{"code": "public WallGetCommentsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Set extended"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.HELLINGER + \";\");\n}\n", "nl": "action to be performed"}
{"code": "boolean casNext(Node<K,V> cmp,Node<K,V> val){\n  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);\n}\n", "nl": "compareAndSet next field"}
{"code": "public static String sha3(String hexInput){\n  byte[] bytes=Numeric.hexStringToByteArray(hexInput);\n  byte[] result=sha3(bytes);\n  return Numeric.toHexString(result);\n}\n", "nl": "Keccak-256 hash function"}
{"code": "public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){\n  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,skipIds);\n}\n", "nl": "Show error view with a button when something goes wrong and prompting the user to try again"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static Module load(int id){\n  return modules.get(id);\n}\n", "nl": "load the module by id"}
{"code": "public void leftTrim(int numberOfSample){\n  trim(numberOfSample,0);\n}\n", "nl": "Trim the wave data from beginning"}
{"code": "private void GetDir(int col){\n  dir=sPath.get_Directions()[col];\n  len=sPath.get_Lens()[col];\n  sx=this.map_controler.get_Direc_Dis_X(dir);\n  sy=this.map_controler.get_Direc_Dis_Y(dir);\n}\n", "nl": "get enemy direction"}
{"code": "private void initSkinLoader(){\n  setUpSkinFile();\n  SkinManager.getInstance().init(this);\n  SkinManager.getInstance().loadSkin();\n}\n", "nl": "Must call init first"}
{"code": "@NonNull public static StorableFence and(@NonNull StorableFence... fences){\n  return StorableFence.and(Arrays.asList(fences));\n}\n", "nl": "Creates a meta storable fence which is a logical 'and' of all the given fences"}
{"code": "public void flush(){\n  getDiskCache().flush();\n}\n", "nl": "Flush the disk cache used for storing Bitmaps"}
{"code": "public void loadConf(DistributedLogConfiguration baseConf){\n  addConfiguration(baseConf);\n}\n", "nl": "You can load configuration from other configuration"}
{"code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n", "nl": "Creates a new executor object for spawning worker threads"}
{"code": "public synchronized void resetTime(){\n}\n", "nl": "Resets the audio clock"}
{"code": "public PhotosGetQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Set count"}
{"code": "private void showNotification(int id,NotificationCompat.Builder builder){\n  ((NotificationManager)getContext().getSystemService(Context.NOTIFICATION_SERVICE)).notify(id,builder.build());\n}\n", "nl": "Builds and shows the notification"}
{"code": "public PhotosEditQuery latitude(Float value){\n  return unsafeParam(\"latitude\",value);\n}\n", "nl": "Set latitude"}
{"code": "@Override public boolean isNullMeasureValue(int ordinal){\n  return isNullMeasureValue(ordinal,currentRow);\n}\n", "nl": "Below method will be used to to check whether measure value is null or for a measure"}
{"code": "public PagesSaveQuery(VkApiClient client,UserActor actor){\n  super(client,\"pages.save\",Integer.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static QrCodeResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,QrCodeResult.class);\n}\n", "nl": "json --> obj"}
{"code": "static <T>AnyVal<T> lit(T matchValue){\n  return new AnyVal<T>(matchValue,false,false){\n  }\n;\n}\n", "nl": "Returns a new AnyVal that matches the given literal value"}
{"code": "public Builder displayBottomNavigation(boolean displayBottomNavigationBar){\n  this.displayBottomNavigation=displayBottomNavigationBar;\n  return this;\n}\n", "nl": "Set whether or not the bottom navigation bar will be displayed"}
{"code": "public StorageGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"storage.get\",String.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void convertAndFillByteBufferListToByteArrayList(List<byte[]> dictionaryValues,List<ByteBuffer> dictionaryValueBufferList){\n  for (  ByteBuffer buffer : dictionaryValueBufferList) {\n    int length=buffer.limit();\n    byte[] value=new byte[length];\n    buffer.get(value,0,value.length);\n    dictionaryValues.add(value);\n  }\n}\n", "nl": "This method will convert and fill list of byte buffer to list of byte array"}
{"code": "public static TagConfig fromJson(final String json){\n  return GsonFactory.createGson().fromJson(json,TagConfig.class);\n}\n", "nl": "Deserialized the JSON string into a <code>TagConfig</code> object instance"}
{"code": "void ensureOpen() throws IllegalStateException {\n  if (m_closed) {\n    throw new IllegalStateException(\"Forbidden call on a closed session.\");\n  }\n}\n", "nl": "Verifies that the session isn't closed"}
{"code": "private void checkInit(){\n  if (!mInitialized)   throw new IllegalStateException(\"Scoop needs to be initialized first!\");\n}\n", "nl": "Verify the initialization state of the utility"}
{"code": "public static boolean is2G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && (activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_EDGE || activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_GPRS || activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_CDMA)) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Net is 2G"}
{"code": "public static StorableTimeFence inThursdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(THURSDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid on Thursday in the given daily time frame"}
{"code": "public static final Scheduler sharedInstance(){\n  return INSTANCE;\n}\n", "nl": "Singleton accessor"}
{"code": "public void putSampleLabel(String sampleName,String label){\n  put(sampleName,SampleAttributeTable.HiddenAttribute.Label,label);\n}\n", "nl": "put the label to be used for the sample"}
{"code": "public void addEmojiconGroup(EaseEmojiconGroupEntity groupEntity){\n  emojiconGroupList.add(groupEntity);\n  pagerView.addEmojiconGroup(groupEntity,true);\n  tabBar.addTab(groupEntity.getIcon());\n}\n", "nl": "add emojicon group"}
{"code": "public LeadsStartQuery(VkApiClient client,int leadId,String secret){\n  super(client,\"leads.start\",Start.class);\n  leadId(leadId);\n  secret(secret);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected VideoRemoveFromAlbumQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Set owner id"}
{"code": "public DirectedGraph(){\n}\n", "nl": "Build a new empty directed graph"}
{"code": "public static <T>void unpublishService(ProviderConfig<T> providerConfig) throws RpcException {\n  try {\n    ServicePublisher.unpublishService(providerConfig);\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while unpublishing service:\" + providerConfig,e);\n  }\n}\n", "nl": "unpublish the service from registry"}
{"code": "private void writeDomainAssignment(Document document,Element rootElement){\n  Element domainAssignment=document.createElement(\"domainassignment\");\n  rootElement.appendChild(domainAssignment);\n  for (  SourceSinkDomPair spec : this.document.getDomainAssignment())   writeSourceSinkDomPair(spec,document,domainAssignment);\n}\n", "nl": "Writes out the domains assignments section of the RIFL document"}
{"code": "public static String formatPrice(BigDecimal price){\n  if (price == null)   return \"\";\n  return priceDecimalFormat.format(price);\n}\n", "nl": "Formats a BigDecimal representing a price into a string"}
{"code": "public Builder addColumnInteger(String name){\n  return addColumn(new IntegerMetaData(name));\n}\n", "nl": "Add an integer column with no restrictions on the allowable values"}
{"code": "protected void notifyDataInvalidatedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onInvalidated();\n    }\n  }\n}\n", "nl": "Notifies observers about invalidating data"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(8).putLong(get(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]"}
{"code": "@Override public boolean isId(){\n  return isIdAttribute();\n}\n", "nl": "DOM Level 3: isId"}
{"code": "public Socket connect() throws IOException {\n  Socket sock=new Socket();\n  sock.setReuseAddress(true);\n  sock.setSoTimeout(ClientGlobal.g_network_timeout);\n  sock.connect(new InetSocketAddress(this.ip_addr,this.port),ClientGlobal.g_connect_timeout);\n  return sock;\n}\n", "nl": "connect to server"}
{"code": "public MarketAddQuery photoIds(Integer... value){\n  return unsafeParam(\"photo_ids\",value);\n}\n", "nl": "Ids of additional photos"}
{"code": "public static void removeAllTrafficListeners(){\n  getAirMapTrafficService().removeAllListeners();\n}\n", "nl": "Removes all traffic callbacks"}
{"code": "public int modify_file(String group_name,String appender_filename,long file_offset,long modify_size,UploadCallback callback) throws IOException, MyException {\n  return this.do_modify_file(group_name,appender_filename,file_offset,modify_size,callback);\n}\n", "nl": "modify appender file to storage server (by callback)"}
{"code": "public boolean needParticipantsJoin(){\n  return true;\n}\n", "nl": "returns true if this mgr which requires that the txn participants join into the txn in contrary to a mgr which the participants are known prior to txn propagation"}
{"code": "public VideoSaveQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment"}
{"code": "public boolean viable(){\n  return (mWidgetArea + mGapArea) / (float)mGroupArea > .40f;\n}\n", "nl": "quick test if this would even make a good candidate group"}
{"code": "public KeyAlreadySetException(String message,Throwable cause){\n  super(message,cause);\n}\n", "nl": "Creates new error"}
{"code": "public static void w(String tag,String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.w(tag,buildMsg(msg),e);\n  }\n}\n", "nl": "warning log"}
{"code": "public void write(PacketBuffer buf,T value){\n  writer.accept(buf,value);\n}\n", "nl": "Writes an instance of the data type to the buffer"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public GroupsGetInvitedUsersQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.getInvitedUsers\",GetInvitedUsersResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void removeColumnListener(ColumnListener listener){\n  m_listeners.remove(listener);\n}\n", "nl": "Removes a listener, causing it to no longer be notified of changes"}
{"code": "public VideoSearchQuery longer(Integer value){\n  return unsafeParam(\"longer\",value);\n}\n", "nl": "Set longer"}
{"code": "public void loadConf(Configuration otherConf){\n  addConfiguration(otherConf);\n}\n", "nl": "Load configuration from other configuration object"}
{"code": "public static void error(@Nullable Class<?> caller,String message,Object... args){\n  android.util.Log.e(tag(caller),String.format(Locale.ENGLISH,message,args));\n}\n", "nl": "Logs with error level"}
{"code": "public void resume(){\n}\n", "nl": "Resumes audio output"}
{"code": "protected boolean isStopped(){\n  return stopped;\n}\n", "nl": "Return the running state of the connection"}
{"code": "public ArrayDataType(Class<T[]> clazz,DataType<T> baseType){\n  super(clazz,null,null);\n}\n", "nl": "Creates a new array data type"}
{"code": "private void writeDomainPair(DomPair pair,Document document,Element parentElement){\n  Element domPair=document.createElement(\"dompair\");\n  parentElement.appendChild(domPair);\n  writeDomainSpec(pair.getFirstDomain(),document,domPair);\n  writeDomainSpec(pair.getSecondDomain(),document,domPair);\n}\n", "nl": "Writes out a domain pair object for the use inside the domain hierarchy"}
{"code": "public CatchOptions useBestBall(boolean useBestPokeball){\n  this.useBestPokeball=useBestPokeball;\n  return this;\n}\n", "nl": "Set using the best available ball"}
{"code": "public void zoomToSelection(){\n  graphView.zoomToSelection();\n}\n", "nl": "zoom to selection"}
{"code": "private void createRGBFormat(){\n  videoFormat=new RGBFormat(new Dimension(mip.getMWidth(),mip.getMHeight()),width * height,int[].class,mip.getFPS(),32,0x00ff0000,0x0000ff00,0x000000ff,1,width,Format.FALSE,RGBFormat.BIG_ENDIAN);\n}\n", "nl": "Creates an rgb format"}
{"code": "public boolean equals(Split split){\n  return (A.equals(split.A) && B.equals(split.B)) || (A.equals(split.B) && B.equals(split.A));\n}\n", "nl": "are the two splits equalOverShorterOfBoth as set bipartitionings (ignoring weights)"}
{"code": "private static File createReserveDiskCacheDir(Context context){\n  File cacheDir=StorageUtils.getCacheDirectory(context,false);\n  File individualDir=new File(cacheDir,\"uil-images\");\n  if (individualDir.exists() || individualDir.mkdir()) {\n    cacheDir=individualDir;\n  }\n  return cacheDir;\n}\n", "nl": "Creates reserve disk cache folder which will be used if primary disk cache folder becomes unavailable"}
{"code": "public void shareWeiXin(String webUrl,String msgTitle,String msgText){\n  shareToWeiXin(webUrl,msgTitle,msgText);\n}\n", "nl": "Share Wei Xin"}
{"code": "public void scroll(int itemsToScroll,int time){\n  int distance=itemsToScroll * getItemHeight() - scrollingOffset;\n  scroller.scroll(distance,time);\n}\n", "nl": "Scroll the wheel"}
{"code": "public static <T>IStoredList<T> createHashList(){\n  return new HashedSimpleLockIStoredList<T>(false);\n}\n", "nl": "Create Hashed StoredList"}
{"code": "public Builder removeAllColumnsExceptFor(String... columnNames){\n  return transform(new RemoveAllColumnsExceptForTransform(columnNames));\n}\n", "nl": "Remove all columns, except for those that are specified here"}
{"code": "private Metrics createMetricsByDimension(ObjectName objectName){\n  Map<String,String> dimensionMap=Maps.newHashMap();\n  dimensionMap.put(\"MBean\",objectName.toString());\n  return Metrics.create(dimensionMap);\n}\n", "nl": "Creates a MBean dimension key for metrics"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "private static void decreaseItemFromPlayer(Player seller,Item item,TradeItem tradeItem){\n  seller.getInventory().decreaseItemCount(item,tradeItem.getCount());\n  seller.getStore().getTradeItemByObjId(item.getObjectId()).decreaseCount(tradeItem.getCount());\n}\n", "nl": "Decrease item count and update inventory"}
{"code": "public void activate(){\n}\n", "nl": "this tab has been selected"}
{"code": "public Collection<String> targetFields(){\n  return new ArrayList<String>(fldVals.keySet());\n}\n", "nl": "Returns the fields whose values will be modified"}
{"code": "public void keyReleased(KeyEvent ke){\n  if ((ke.getModifiers() & InputEvent.SHIFT_MASK) != 0) {\n    viewer.resetCursor();\n  }\n}\n", "nl": "Key released"}
{"code": "public MarketAddAlbumQuery photoId(Integer value){\n  return unsafeParam(\"photo_id\",value);\n}\n", "nl": "Collection cover photo id"}
{"code": "public INSECTFileDB(String sPrefix,String sBaseDir){\n  if (sPrefix == null)   Prefix=\"\";\n else   Prefix=sPrefix;\n  if (sBaseDir == null)   BaseDir=\"./\";\n else   BaseDir=sBaseDir;\n}\n", "nl": "Creates a new instance of INSECTFileDB"}
{"code": "protected FaveRemoveLinkQuery linkId(String value){\n  return unsafeParam(\"link_id\",value);\n}\n", "nl": "Set link id"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set show-unaligned=\" + !isSelected() + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public boolean isReleased(){\n  return mReleased;\n}\n", "nl": "Indicates whether this distributor has been released"}
{"code": "public long timeSinceStart(){\n  long currentTime=System.currentTimeMillis();\n  return currentTime - startTime;\n}\n", "nl": "Returns the number of milliseconds since the timer started"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set summarized=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  ((ExtractReadsViewer)getViewer()).setIncludeSummarized(value);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static Date stringToDate(String formattedDate,SimpleDateFormat dateFormat){\n  return new Date(stringToMilliseconds(formattedDate,dateFormat));\n}\n", "nl": "Create a date from formatted string with specific date format"}
{"code": "public static void debugLongInfo(String str){\n  debugLongInfo(DEFAULT_TAG,str);\n}\n", "nl": "author  hhj TODO"}
{"code": "private void writeDomainHierarchy(Document document,Element rootElement){\n  Element domainHierarchy=document.createElement(\"domainhierarchy\");\n  rootElement.appendChild(domainHierarchy);\n  for (  DomPair pair : this.document.getDomainHierarchy())   writeDomainPair(pair,document,domainHierarchy);\n}\n", "nl": "Writes out the domain hierarchy component of the RIFL document"}
{"code": "public PacketWrapper(AbstractChannel channel,AbstractPacket packet){\n  this.channel=channel;\n  this.packet=packet;\n}\n", "nl": "Creates a new wrapper packet"}
{"code": "public void actionPerformed(ActionEvent ev){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();\n  if (samples.size() > 0)   execute(\"set nodeShape=none sample='\" + Basic.toString(samples,\"' '\") + \"';\");\n}\n", "nl": "action to be performed"}
{"code": "public MarketRestoreQuery restore(UserActor actor,int ownerId,int itemId){\n  return new MarketRestoreQuery(getClient(),actor,ownerId,itemId);\n}\n", "nl": "Restores recently deleted item"}
{"code": "public static boolean isSystemProp(String propertyValue){\n  int fIndex=propertyValue.indexOf(\"${\");\n  int lIndex=propertyValue.lastIndexOf(\"}\");\n  return (fIndex != -1 && lIndex != -1);\n}\n", "nl": "This method checks if value has format of system property"}
{"code": "public void lockUserInput(){\n}\n", "nl": "ask view to prevent user input"}
{"code": "public QRDecomposition qr(){\n  return new QRDecomposition(this);\n}\n", "nl": "QR Decomposition"}
{"code": "public boolean contains(Local local){\n  if (leftLocal.toString().equals(local.toString()) || rightLocal.toString().equals(local.toString())) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Method checks whether local occurs in the left or right side of the localpair different semantics than the usual contains method which checks something in a list"}
{"code": "public FriendsGetRequestsQueryWithExtended sort(FriendsGetRequestsSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public void show(){\n  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();\n  lp.height=LayoutParams.WRAP_CONTENT;\n  mContentView.setLayoutParams(lp);\n}\n", "nl": "show footer"}
{"code": "public AccountSetSilenceModeQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n", "nl": "Set device id"}
{"code": "public static ServiceClient createServiceClient(TrustManager trustManager,KeyManager keyManager){\n  return createServiceClient(CertificateUtil.createSSLContext(trustManager,keyManager));\n}\n", "nl": "Create a ServiceClient instance using the given TrustManager and KeyManager"}
{"code": "public MarketAddAlbumQuery addAlbum(UserActor actor,int ownerId,String title){\n  return new MarketAddAlbumQuery(getClient(),actor,ownerId,title);\n}\n", "nl": "Creates new collection of items"}
{"code": "public static String readString(DataInput in) throws IOException {\n  int length=WritableUtils.readVInt(in);\n  byte[] bytes=new byte[length];\n  in.readFully(bytes,0,length);\n  return decode(bytes);\n}\n", "nl": "Read a UTF8 encoded string from in"}
{"code": "public boolean gotoLast(){\n  currentTaxonIterator=null;\n  currentTaxonId=null;\n  return isCurrentSet();\n}\n", "nl": "goto the last object Not implemented"}
{"code": "public static void drawButtonRewiConnect(RewiButtonConnectType connectType,IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){\n  if (!visible)   return;\n  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);\n  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);\n  getTextureHandler().bindModTexture(\"textures/misc/\" + (connectType == RewiButtonConnectType.MINECRAFT ? \"rewiHead16\" : \"teamspeak256\") + \".png\");\n  getGlStateManager().color(1.0F,1.0F,1.0F);\n  drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14);\n}\n", "nl": "Draws a small button with the skin face of rewinside on it"}
{"code": "public void putDelegate(Object key,X509TrustManager newDelegate){\n  delegates.put(key,newDelegate);\n}\n", "nl": "Add a delegate identified by the given unique key (can be used to remove it later)"}
{"code": "public void reset(){\n  for (int i=0; i < measureDataChunk.length; i++) {\n    this.measureDataChunk[i]=null;\n  }\n  for (int i=0; i < dimensionDataChunk.length; i++) {\n    this.dimensionDataChunk[i]=null;\n  }\n}\n", "nl": "To reset the measure chunk and dimension chunk array"}
{"code": "@Singleton @Provides Retrofit provideRetrofit(){\n  HttpLoggingInterceptor interceptor=new HttpLoggingInterceptor();\n  interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);\n  OkHttpClient client=new OkHttpClient.Builder().addInterceptor(interceptor).build();\n  Retrofit retrofit=new Retrofit.Builder().baseUrl(\"https://api.github.com/\").client(client).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).build();\n  return retrofit;\n}\n", "nl": "Logging Levels for debugging: BODY, HEADER"}
{"code": "public MessagesMarkAsImportantQuery important(Boolean value){\n  return unsafeParam(\"important\",value);\n}\n", "nl": "\"true\" - to add a star (mark as important) \"false\" - to remove the star"}
{"code": "public boolean isFooter(int position){\n  return position < getItemCount() && position >= getItemCount() - mFootViews.size();\n}\n", "nl": "jude is foot view"}
{"code": "@Override public Packet read(PacketBuffer buf){\n  PacketSpec spec=getSpec(buf.readInt());\n  Packet packet=new Packet(new PacketBuilder(this,spec));\n  packet.read(buf);\n  return packet;\n}\n", "nl": "Reads a packet from the given buffer"}
{"code": "public int size(){\n  return data.length;\n}\n", "nl": "Data byte size of the wave excluding header size"}
{"code": "public RegisterLocalViewSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public Matrix timesEquals(double s){\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      A[i][j]=s * A[i][j];\n    }\n  }\n  return this;\n}\n", "nl": "Multiply a matrix by a scalar in place, A = s*A"}
{"code": "@Deployment(resources={\"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.noEndProcess.bpmn20.xml\"}) public void testProcessCompleted_NoEnd() throws Exception {\n  ProcessInstance noEndProcess=this.runtimeService.startProcessInstanceByKey(\"noEndProcess\");\n  Task task=taskService.createTaskQuery().processInstanceId(noEndProcess.getId()).singleResult();\n  taskService.complete(task.getId());\n  assertEquals(\"ActivitiEventType.PROCESS_COMPLETED was expected 1 time.\",1,listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());\n}\n", "nl": "Test Start->User Task process on PROCESS_COMPLETED event"}
{"code": "@RequestMapping(value=\"/configs\",method=RequestMethod.POST) public JsonResponse saveConfig(@RequestParam(\"appId\") Long appId,@RequestParam(\"name\") String name,@RequestParam(\"value\") String value){\n  Response<Long> saveResp=configService.save(appId,name,value);\n  if (!saveResp.isSuccess()) {\n    Logs.error(\"failed to save config(appId={}, name={}, value={}), cause: {}\",appId,name,value,saveResp.getErr());\n    return JsonResponse.notOk(saveResp.getErr());\n  }\n  return JsonResponse.ok(saveResp.getData());\n}\n", "nl": "Save the config"}
{"code": "public String toStringMultiLine(boolean interpolate){\n  ConfigurationNodeVisitor visitor=new ToStringMultiLineVisitor();\n  getRootNode().visit(visitor);\n  return visitor.toString();\n}\n", "nl": "Returns the entire configuration as a multiline representation"}
{"code": "private void mapGUI(){\n  this.btnRelativeLayoutTest=(Button)findViewById(R.id.btnRelativeLayout);\n  this.btnRelativeLayoutTest.setOnClickListener(btnRelativeLayoutOnClickListener);\n  this.btnLinearLayoutTest=(Button)findViewById(R.id.btnLinearLayout);\n  this.btnLinearLayoutTest.setOnClickListener(btnLinearLayoutOnClickListener);\n  this.btnFrameLayoutTest=(Button)findViewById(R.id.btnFrameLayout);\n  this.btnFrameLayoutTest.setOnClickListener(btnFrameLayoutOnClickListener);\n}\n", "nl": "Maps Graphical User Interface"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public MarketAddToAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,int... albumIds){\n  super(client,\"market.addToAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  albumIds(albumIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ElemValPair(String name,char kind){\n  this.name=new AsciiCP(name);\n  this.kind=(byte)kind;\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "public synchronized void close(){\n}\n", "nl": "Closes this audio player"}
{"code": "public boolean isPrimitive(){\n  return !isBinaryObject() && !isCollection() && !isSymbol()&& !isNull();\n}\n", "nl": "Determine if this object is a primitive value"}
{"code": "private double[] calculateDifferences(final double[] x,final double[] y){\n  final double[] z=new double[x.length];\n  for (int i=0; i < x.length; ++i) {\n    z[i]=y[i] - x[i];\n  }\n  return z;\n}\n", "nl": "Calculates y[i] - x[i] for all i"}
{"code": "public EmptySearchViewerFilter(){\n}\n", "nl": "Construct a new EmptySearchViewerFilter"}
{"code": "public static void json(String json){\n  printer.json(json);\n}\n", "nl": "Formats the json content and print it"}
{"code": "@Override protected void onNewIntent(Intent intent){\n  super.onNewIntent(intent);\n  if (this.appView != null)   this.appView.onNewIntent(intent);\n}\n", "nl": "Called when the activity receives a new intent"}
{"code": "public CreatePageWindow selectNthTemplate(int i){\n  templatesList.get(i).click();\n  return this;\n}\n", "nl": "Selects nth template from the list in CreatePageWindow"}
{"code": "public AdsGetSuggestionsQueryWithCities ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n", "nl": "Set ids"}
{"code": "public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){\n  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;\n  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;\n  return this;\n}\n", "nl": "Sets options for memory cache"}
{"code": "public MarketEditCommentQuery message(String value){\n  return unsafeParam(\"message\",value);\n}\n", "nl": "New comment text (required if \"attachments\" are not specified) <p> 2048 symbols max"}
{"code": "private void broadcastNewFile(Uri nativeUri){\n  Intent intent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,nativeUri);\n  context.sendBroadcast(intent);\n}\n", "nl": "Send broadcast of new file so files appear over MTP"}
{"code": "public static int v(Object tag,String msg){\n  return isPrint ? android.util.Log.v(tag.getClass().getSimpleName(),msg) : -1;\n}\n", "nl": "TAG use Object Tag"}
{"code": "public boolean isFullyZoomedOut(){\n  return mViewPortHandler.isFullyZoomedOut();\n}\n", "nl": "if the chart is fully zoomed out, return true"}
{"code": "public AppsSendRequestQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"apps.sendRequest\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static ToolbarTapTarget forToolbarMenuItem(Toolbar toolbar,@IdRes int menuItemId,CharSequence title){\n  return forToolbarMenuItem(toolbar,menuItemId,title,null);\n}\n", "nl": "Return a tap target for the menu item from the given toolbar"}
{"code": "public static DateTimeUnit fromJodaDateTime(DateTime dateTime,boolean iso8601){\n  DateTimeUnit dateTimeUnit=new DateTimeUnit(iso8601);\n  dateTimeUnit.setDate(dateTime.getYear(),dateTime.getMonthOfYear(),dateTime.getDayOfMonth());\n  dateTimeUnit.setDayOfWeek(dateTime.getDayOfWeek());\n  dateTimeUnit.setTime(dateTime.getHourOfDay(),dateTime.getMinuteOfHour(),dateTime.getSecondOfMinute(),dateTime.getMillisOfSecond());\n  dateTimeUnit.setTimeZone(dateTime.getZone().toTimeZone());\n  return dateTimeUnit;\n}\n", "nl": "Converts from Joda-Time DateTime to DateUnit"}
{"code": "public void actionPerformed(ActionEvent ev){\n  String fontName=ProgramProperties.get(\"Font\",\"Arial-PLAIN-12\");\n  fontName=JOptionPane.showInputDialog(\"Enter font\",fontName);\n  if (fontName != null) {\n    execute(\"set font='\" + fontName + \"';\");\n    ProgramProperties.put(\"Font\",fontName);\n  }\n}\n", "nl": "action to be performed"}
{"code": "public static int modulateAlpha(int colorAlpha,int alpha){\n  int scale=alpha + (alpha >> 7);\n  return colorAlpha * scale >> 8;\n}\n", "nl": "Modulate the colorAlpha to new alpha"}
{"code": "protected WallGetByIdQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return user and community objects needed to display posts"}
{"code": "public AsyncCatchOptions useRazzberries(boolean useRazzBerries){\n  this.useRazzBerry=useRazzBerries ? 1 : 0;\n  return this;\n}\n", "nl": "Enable or disable the use of razzberries"}
{"code": "public GroupsAddLinkQuery(VkApiClient client,UserActor actor,int groupId,String link){\n  super(client,\"groups.addLink\",GroupLink.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  link(link);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void closeMenuDrawer(){\n  if (mDrawerLayout != null) {\n    mDrawerLayout.closeDrawer(MENU_DRAWER_GRAVITY);\n  }\n}\n", "nl": "Used to close the menu drawer"}
{"code": "public static IProgressMonitor subMonitorFor(IProgressMonitor monitor,int ticks,int style){\n  if (monitor == null)   return new NullProgressMonitor();\n  if (monitor instanceof NullProgressMonitor)   return monitor;\n  return new SubProgressMonitor(monitor,ticks,style);\n}\n", "nl": "Return a submonitor for monitor"}
{"code": "public static void ensureTreeIsLoaded(String name){\n  get(name,true);\n}\n", "nl": "ensure that the tree and mapping for the named classification are loaded"}
{"code": "public Reader(RecordStream recordStream,DataInputStream in,long startSequenceId){\n  this(recordStream,in,startSequenceId,true);\n}\n", "nl": "Construct the reader"}
{"code": "public final boolean isAlternatingTarget(){\n  return (myAlternate & CFG_TARGET) != 0;\n}\n", "nl": "Returns true if the target is alternated"}
{"code": "public UsersSearchQuery sort(UsersSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "protected void assertEquals(String msg,Fraction[] m,Fraction[] n){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors have different lengths\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i],n[i]);\n  }\n}\n", "nl": "verifies that two vectors are close (sup norm)"}
{"code": "private void appendPermittedContentType(ContentType contentType){\n  if (permittedContentTypesMask == ContentType.ANY.getFlagValue()) {\n    permittedContentTypesMask=contentType.getFlagValue();\n  }\n else {\n    permittedContentTypesMask|=contentType.getFlagValue();\n  }\n}\n", "nl": "Appends new content type value to permitted list (depending on the current permitted content types)"}
{"code": "public CompletableFuture<Integer> unloadServiceUnit(ServiceUnitId serviceUnit){\n  CompletableFuture<Integer> result=new CompletableFuture<Integer>();\n  List<CompletableFuture<Void>> closeFutures=Lists.newArrayList();\n  topics.forEach(null);\n  CompletableFuture<Void> aggregator=FutureUtil.waitForAll(closeFutures);\n  aggregator.thenAccept(null).exceptionally(null);\n  return result;\n}\n", "nl": "Unload all the topic served by the broker service under the given service unit"}
{"code": "public void resetHeaders(){\n  headers.clear();\n}\n", "nl": "Reset the headers"}
{"code": "private void addToken(String tokenStr){\n  Integer tokenInt=(Integer)fTokenNames.get(tokenStr);\n  if (tokenInt == null) {\n    tokenInt=new Integer(fTokenNames.size());\n    fTokenNames.put(tokenInt,tokenStr);\n  }\n  addToken(tokenInt.intValue());\n}\n", "nl": "Add the specified string as a token"}
{"code": "public static void add(Matrix a,Matrix b,Matrix result){\n  for (int i=0; i < a.rows; i++) {\n    for (int j=0; j < a.cols; j++) {\n      result.set(i,j,a.get(i,j) + b.get(i,j));\n    }\n  }\n}\n", "nl": "Adds a and b matrices and stores result in result matrix result = a + b"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isPerformingBlockingOperation(){\n  return (!mServiceHandler.mPendingOperations.isEmpty());\n}\n", "nl": "TODO - IMPORTANT: update implementation when more operations are moved into the service"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isAxisMinCustom(){\n  return mCustomAxisMin;\n}\n", "nl": "Returns true if the axis minIndex value has been customized (and is not calculated automatically)"}
{"code": "public Matrix solveTranspose(Matrix B){\n  return transpose().solve(B.transpose());\n}\n", "nl": "Solve X*A = B, which is also A'*X' = B'"}
{"code": "public MarketGetCommentsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "\"true\" - comments will be returned as numbered objects, in addition lists of \"profiles\" and \"groups\" objects will be returned"}
{"code": "public ResourceId parseResourceId(int resourceId){\n  return new ResourceId((resourceId & 0xFF000000) >> 24,(resourceId & 0x00FF0000) >> 16,resourceId & 0x0000FFFF);\n}\n", "nl": "Parses an Android resource ID into its components"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCache.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "public SVNSynchronizeParticipant(){\n  super();\n}\n", "nl": "No arg contructor used for creation of persisted participant after startup"}
{"code": "@Override public void startExecuting(){\n  this.theEntityCreature.getNavigator().tryMoveToXYZ(this.randPosX,this.randPosY,this.randPosZ,this.speed);\n}\n", "nl": "Execute a one shot task or start executing a continuous task"}
{"code": "float readBoost(Element el){\n  NodeList list=el.getElementsByTagName(\"boost\");\n  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_BOOST;\n  return Float.parseFloat(list.item(0).getFirstChild().getNodeValue());\n}\n", "nl": "read optional field boost"}
{"code": "public double calcAngleWithRatios(Entry p1,Entry p2){\n  float dx=p2.getXIndex() * mDeltaRatio - p1.getXIndex() * mDeltaRatio;\n  float dy=p2.getVal() * mScaleRatio - p1.getVal() * mScaleRatio;\n  return Math.atan2(dy,dx) * 180.0 / Math.PI;\n}\n", "nl": "calculates the angle between two Entries (points) in the chart taking ratios into consideration"}
{"code": "protected AppsSendRequestQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Id of the user to send a request"}
{"code": "public DocsDeleteQuery(VkApiClient client,UserActor actor,int ownerId,int docId){\n  super(client,\"docs.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  docId(docId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public StorageGetQuery keys(List<String> value){\n  return unsafeParam(\"keys\",value);\n}\n", "nl": "Set keys"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set keep1=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setKeep1(value);\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.857104827257,1.64649737269,2.17973074725,2.7326367935,3.48953912565,26.1244815584,20.0902350297,17.5345461395,15.5073130559,13.3615661365};\n}\n", "nl": "Creates the default cumulative probability distribution test input values"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "public static int extractLowSignedNibble(int value){\n  return (value << 28) >> 28;\n}\n", "nl": "Extracts the low signed 4-bit nibble from the least significant byte of the given value"}
{"code": "public V remove(R rowKey,C columnKey){\n  if (rowKey == null || columnKey == null)   return null;\n  Map<C,V> row=row(rowKey);\n  if (row == null)   return null;\n  V oldValue=get(rowKey,columnKey);\n  row.remove(columnKey);\n  return oldValue;\n}\n", "nl": "removes the given cell, returns the old value or null"}
{"code": "public PagesGetTitlesQuery(VkApiClient client,UserActor actor){\n  super(client,\"pages.getTitles\",Utils.buildParametrizedType(List.class,Wikipage.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void monitorReplicationStateForModifyingOperation(Transaction transaction){\n  if (transaction != null)   return;\n  monitorReplicationState();\n}\n", "nl": "delegate redo log monitoring"}
{"code": "public boolean isGlobalFindable(){\n  return table.getGrid().getRowCount() > 0;\n}\n", "nl": "is a global find possible?"}
{"code": "public static void showError(String message,long milliseconds){\n  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,milliseconds);\n}\n", "nl": "show an error notation"}
{"code": "private void siftUp(Item item){\n  Item parent=getParent(item);\n  while (item.idx > 0 && parent.position.compareTo(item.position) > 0) {\n    swap(item,parent);\n    parent=getParent(item);\n  }\n}\n", "nl": "Push the item up towards the the root of the tree (lowest reading position)"}
{"code": "public MessagesGetHistoryQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.getHistory\",GetHistoryResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static StorableTimeFence inWednesdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(WEDNESDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid on Wednesday in the given daily time frame"}
{"code": "public static boolean isHighSurrogate(int c){\n  return (0xD800 <= c && c <= 0xDBFF);\n}\n", "nl": "Returns whether the given character is a high surrogate"}
{"code": "@Override public void onStreamReceived(Session session,Stream stream){\n  if (mSubscriber == null) {\n    startSubscribing(stream);\n    sendEvent(Events.EVENT_SUBSCRIBE_START,Arguments.createMap());\n  }\n}\n", "nl": "Session listener"}
{"code": "private void zzDoEOF() throws java.io.IOException {\n  if (!zzEOFDone) {\n    zzEOFDone=true;\n    yyclose();\n  }\n}\n", "nl": "Contains user EOF-code, which will be executed exactly once, when the end of file is reached"}
{"code": "public void updateEnableStateSwingItems(){\n  if (SwingUtilities.isEventDispatchThread())   super.updateEnableState();\n}\n", "nl": "update the enable state for only the Swing menu items"}
{"code": "private void loadInstantUploadVideoPath(){\n  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n  mUploadVideoPath=appPrefs.getString(\"instant_video_upload_path\",getString(R.string.instant_upload_path));\n  mPrefInstantVideoUploadPath.setSummary(mUploadVideoPath);\n}\n", "nl": "Load upload video path set on preferences"}
{"code": "public Session store(long expired){\n  this.setExpired(expired);\n  if (!Cache.set(\"session/\" + sid,this)) {\n    log.error(\"set session failed !\",new Exception(\"store session failed\"));\n  }\n  return this;\n}\n", "nl": "store the session with the expired"}
{"code": "@deprecated public Object parseObject(String source,ParsePosition pos){\n  return parse(source,pos);\n}\n", "nl": "/*     "}
{"code": "public boolean hasTag(String aName){\n  return (searchForTag(aName) != -1);\n}\n", "nl": "look if this host has a tag named <code>aName</code>"}
{"code": "@Override public void stop() throws ContainerException {\n  this.pollTimer.shutdown();\n  Debug.logWarning(\"stop JavaMail poller\",module);\n}\n", "nl": "Stop the container"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(4).putInt(getInt(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]"}
{"code": "public void stop(){\n  mBasoStatus=BasoStatus.ERROR;\n  toggleLayout();\n}\n", "nl": "Show stopped layout"}
{"code": "public IntElemValPair(String name,char kind,int val){\n  super(name,kind);\n  this.val=new IntegerCP(val);\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "public Builder removeColumns(String... columnNames){\n  return transform(new RemoveColumnsTransform(columnNames));\n}\n", "nl": "Remove all of the specified columns, by name"}
{"code": "public AdsUpdateClientsQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.updateClients\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected MarketDeleteAlbumQuery albumId(int value){\n  return unsafeParam(\"album_id\",value);\n}\n", "nl": "Collection id"}
{"code": "public void reset(){\n  fSubGroupsB.clear();\n  fSubGroups.clear();\n}\n", "nl": "clear the internal registry of substitutionGroup information"}
{"code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "public static String formatQuantity(double quantity){\n  return quantityDecimalFormat.format(quantity);\n}\n", "nl": "Formats an double representing a quantity into a string"}
{"code": "static String leftTrim(String str,int len){\n  return str.substring(str.length() - len);\n}\n", "nl": "Left trim a string to a fixed length"}
{"code": "public void close() throws CanceledException {\n  notifyDestroyViewer();\n}\n", "nl": "close everything directed by this director"}
{"code": "public ModelKeyMap findKeyMapByRelated(String relFieldName){\n  for (  ModelKeyMap keyMap : keyMaps) {\n    if (keyMap.getRelFieldName().equals(relFieldName))     return keyMap;\n  }\n  return null;\n}\n", "nl": "Find a KeyMap with the specified relFieldName"}
{"code": "public GroupsLeaveQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.leave\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void suspend(){\n  TrafficService service=getAirMapTrafficService();\n  if (service != null && service.isConnected()) {\n    service.disconnect();\n  }\n}\n", "nl": "This function should be called when the application enters the background (onDestroy, onStop, onPause)"}
{"code": "public double quadraticMean(){\n  return NumericReduceUtils.quadraticMean.reduce(this);\n}\n", "nl": "Returns the quadraticMean, aka the root-mean-square, for all values in this column"}
{"code": "protected boolean isAwareOf(VisibleObject newObject){\n  return true;\n}\n", "nl": "Whether knownlist owner aware of found object (should be kept in knownlist)"}
{"code": "protected XMLGrammarParser(SymbolTable symbolTable){\n  super((XMLParserConfiguration)ObjectFactory.createObject(\"mf.org.apache.xerces.xni.parser.XMLParserConfiguration\",\"mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration\"));\n  fConfiguration.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY,symbolTable);\n}\n", "nl": "Construct an XMLGrammarParser with the specified symbol table"}
{"code": "public static double distFrom(Point start,Point end){\n  return distFrom(start.getLatitude(),start.getLongitude(),end.getLatitude(),end.getLongitude());\n}\n", "nl": "Dist between coordinates"}
{"code": "public NotesEditQuery privacyComment(String... value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment"}
{"code": "public void unlockUserInput(){\n  getCommandManager().setEnableCritical(true);\n  searchManager.getFindDialogAsToolBar().setEnableCritical(true);\n  frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n  isLocked=false;\n  statusBar.setText2(\"\");\n}\n", "nl": "ask view to allow user input"}
{"code": "public VocalizationIntonationReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n", "nl": "Create a unit file reader from the given unit file"}
{"code": "public static byte[] decrypt(final SecretKeySpec key,final byte[] iv,final byte[] decodedCipherText) throws GeneralSecurityException {\n  final Cipher cipher=Cipher.getInstance(AES_MODE);\n  IvParameterSpec ivSpec=new IvParameterSpec(iv);\n  cipher.init(Cipher.DECRYPT_MODE,key,ivSpec);\n  byte[] decryptedBytes=cipher.doFinal(decodedCipherText);\n  return decryptedBytes;\n}\n", "nl": "More flexible AES decrypt that doesn't encode"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getSelectedBlock().selectAll();\n}\n", "nl": "parses the given command and executes it"}
{"code": "public InfoflowResults runInfoflow(){\n  return runInfoflow(null);\n}\n", "nl": "Runs the data flow analysis"}
{"code": "public FriendsGetOnlineQueryWithMobile onlineMobile(Boolean value){\n  return unsafeParam(\"online_mobile\",value);\n}\n", "nl": "Return an additional \"online_mobile\" field"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void updateFile(OCFile file){\n  setFile(file);\n}\n", "nl": "Update the file of the fragment with file value"}
{"code": "public static String combineSetMethodName(String fieldName){\n  return \"set\" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);\n}\n", "nl": "combine a set-method name from field name"}
{"code": "private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,TokenStream tokens){\n  GraqlErrorListener errorListener=new GraqlErrorListener(tokens.getText());\n  return parseQueryFragment(parseRule,visit,errorListener,tokens);\n}\n", "nl": "Parse any part of a Graql query"}
{"code": "public void dismissLoadingDialog(){\n  final Fragment frag=getActivity().getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);\n  if (frag != null) {\n    LoadingDialog loading=(LoadingDialog)frag;\n    loading.dismissAllowingStateLoss();\n  }\n}\n", "nl": "Dismiss loading dialog"}
{"code": "private void localRedisConnect(){\n  if (this.localJedis == null) {\n    logger.info(\"Connecting to Redis.\");\n    this.localJedis=JedisUtils.connect(REDIS_ADDRESS,REDIS_PORT);\n  }\n}\n", "nl": "A wrapper function around JedisUtils to connect to Redis"}
{"code": "public static int readByte(byte b,boolean signed){\n  if (signed) {\n    return b;\n  }\n else {\n    return b & 0xFF;\n  }\n}\n", "nl": "Reads a signed/unsigned byte"}
{"code": "public static boolean isIgnoredPermission(String permission){\n  if (permission == null) {\n    return false;\n  }\n  return getIgnoredPermissions().contains(permission);\n}\n", "nl": "Lets see if we already ignore this permission"}
{"code": "@Override public List<RoleModule> searchRoleModule(RoleModule roleModule){\n  return sessionTemplate.selectList(NAMESPACE + \".searchRoleModule\",roleModule);\n}\n", "nl": "Search role module mapping by params"}
{"code": "public boolean isSetOldGC(){\n  return __isset_bit_vector.get(__OLDGC_ISSET_ID);\n}\n", "nl": "Returns true if field oldGC is set (has been assigned a value) and false otherwise"}
{"code": "public synchronized void resetTime(){\n}\n", "nl": "Resets the time for this audio stream to zero"}
{"code": "public void configConstant(ConstantLoader constantLoader){\n}\n", "nl": "Config constant"}
{"code": "public boolean disableCharacteristicNotify(){\n  return disableCharacteristicNotify(getCharacteristic());\n}\n", "nl": "stop notify"}
{"code": "public static int v(String tag,Object... msg){\n  return isPrint ? android.util.Log.v(tag,getLogMessage(msg)) : -1;\n}\n", "nl": "Log with object list"}
{"code": "public FriendsGetSuggestionsQuery filter(List<FriendsGetSuggestionsFilter> value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Types of potential friends to return"}
{"code": "public void unregisterOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener){\n  preferences.unregisterOnSharedPreferenceChangeListener(listener);\n}\n", "nl": "Unregister SharedPreferences change listener"}
{"code": "@deprecated public UScriptRun(char[] chars){\n  reset(chars);\n}\n", "nl": "/*    "}
{"code": "public SlickForm withProcessingLabel(String label){\n  this.endTag=label;\n  return this;\n}\n", "nl": "Changes the form's is label when its doing background work"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "public EventBuilder maxPriority(){\n  this.event.setPriority(Thread.MAX_PRIORITY);\n  return this;\n}\n", "nl": "Use max priority in thread execution"}
{"code": "public TapTarget transparentTarget(boolean transparent){\n  this.transparentTarget=transparent;\n  return this;\n}\n", "nl": "Specify whether the target should be transparent"}
{"code": "public static boolean match(final String string,final int offset,final String query){\n  if (string.length() - offset < query.length())   return false;\n  for (int i=0; i < query.length(); i++) {\n    if (string.charAt(offset + i) != query.charAt(i))     return false;\n  }\n  return true;\n}\n", "nl": "does the query match the string starting at the offset"}
{"code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isWithinWorld(int x,int y){\n  return x >= 0 && y >= 0 && x < (CHUNKS_X * Chunk.CHUNK_SIZE) && y < (CHUNKS_Y * Chunk.CHUNK_SIZE);\n}\n", "nl": "Gets the tile position given a vector position"}
{"code": "@Override public BKAsyncLogWriter startAsyncLogSegmentNonPartitioned() throws IOException {\n  return (BKAsyncLogWriter)FutureUtils.result(openAsyncLogWriter());\n}\n", "nl": "Begin writing to the log stream identified by the name"}
{"code": "public NewsfeedGetBannedQueryWithExtended nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public InfoflowResults analyzeAPKFile(String fileName) throws IOException, XmlPullParserException {\n  return analyzeAPKFile(fileName,false);\n}\n", "nl": "Analyzes the given APK file for data flows"}
{"code": "public static void removeMarkers(JTextComponent editorPane){\n  removeMarkers(editorPane,null);\n}\n", "nl": "Remove all the markers from an JEditorPane"}
{"code": "public boolean equals(Object object){\n  return object instanceof Split && equals((Split)object);\n}\n", "nl": "are the two splits equalOverShorterOfBoth as set bipartitionings (ignoring weights)"}
{"code": "public void register(Object listener){\n  eventBus.register(listener);\n  Logs.info(\"register an listener({})\",listener);\n}\n", "nl": "Register the listener"}
{"code": "private void startScrolling(){\n  if (!isScrollingPerformed) {\n    isScrollingPerformed=true;\n    notifyScrollingListenersAboutStart();\n  }\n}\n", "nl": "Starts scrolling"}
{"code": "public GSConnectionFactoryImpl(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public DocumentNGramGaussNormGraph(){\n  InitGraphs();\n}\n", "nl": "Creates a new instance of INSECTDocumentGraph"}
{"code": "public VideoGetCatalogSectionQuery(VkApiClient client,String sectionId,String from){\n  super(client,\"video.getCatalogSection\",GetCatalogSectionResponse.class);\n  sectionId(sectionId);\n  from(from);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void sendMessageFirebase(){\n  ChatModel model=new ChatModel(userModel,edMessage.getText().toString(),Calendar.getInstance().getTime().getTime() + \"\",null);\n  mFirebaseDatabaseReference.child(CHAT_REFERENCE).push().setValue(model);\n  edMessage.setText(null);\n}\n", "nl": "Enviar msg de texto simples para chat"}
{"code": "public boolean isCurrentSelected(){\n  return isCurrentSet() && toSelectTaxonIds.contains(currentTaxonId);\n}\n", "nl": "is the current object selected?"}
{"code": "public static GenericEntity createGenericEntity(ModelEntity modelEntity){\n  if (modelEntity == null) {\n    throw new IllegalArgumentException(\"Cannot create a GenericEntity with a null modelEntity parameter\");\n  }\n  GenericEntity newEntity=new GenericEntity();\n  newEntity.init(modelEntity);\n  return newEntity;\n}\n", "nl": "Creates new GenericEntity"}
{"code": "protected AuthCheckPhoneQuery clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n", "nl": "Set client secret"}
{"code": "public RegisterReplicationNotificationRequestInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public ArrayList<ConstraintWidget> buildList(ScoutWidget[] list){\n  ArrayList<ConstraintWidget> ret=new ArrayList<>();\n  for (int i=mContainSet.nextSetBit(0); i >= 0; i=mContainSet.nextSetBit(i + 1)) {\n    ret.add(list[i].mConstraintWidget);\n  }\n  return ret;\n}\n", "nl": "build list of constraintWidgets from the ScoutWidget list"}
{"code": "public SerialMessage allOnMessage(){\n  logger.debug(\"NODE {}: Switch All - Creating All On message.\",getNode().getNodeId());\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessageType.Request,SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessagePriority.Set);\n  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_ALL_ON};\n  result.setMessagePayload(newPayload);\n  return result;\n}\n", "nl": "Create the All On message"}
{"code": "private void checkMatrixDimensions(Matrix B){\n  if (B.m != m || B.n != n) {\n    throw new IllegalArgumentException(\"Matrix dimensions must agree.\");\n  }\n}\n", "nl": "Check if size(A) == size(B)"}
{"code": "private static void initWatchdog(){\n  if (_shutdown)   return;\n  if (null == _config)   _config=ServiceConfigLoader.getTransportConfiguration();\n  int timeoutResolution=Integer.parseInt(System.getProperty(SystemProperties.WATCHDOG_TIMEOUT_RESOLUTION,SystemProperties.WATCHDOG_TIMEOUT_RESOLUTION_DEFAULT));\n  boolean protocolValidationEnabled=((NIOConfiguration)_config).isProtocolValidationEnabled();\n  _watchdog=new Watchdog(WATCHDOG,_config.getWatchdogRequestTimeout(),_config.getWatchdogListeningTimeout(),_config.getWatchdogIdleConnectionTimeout(),timeoutResolution,protocolValidationEnabled);\n  _watchdog.start();\n}\n", "nl": "Initializes the Watchdog from System properties"}
{"code": "public void upDateProgress(float progress){\n  setProgressInternal(progress);\n}\n", "nl": "update progress"}
{"code": "public PartOfSpeechTagger(){\n}\n", "nl": "Constructs a PartOfSpeechTagger"}
{"code": "public FriendsGetOnlineQuery onlineMobile(Boolean value){\n  return unsafeParam(\"online_mobile\",value);\n}\n", "nl": "Return an additional \"online_mobile\" field"}
{"code": "public static void clearAllCaches(){\n  for (  UtilCache<?,?> cache : utilCacheTable.values()) {\n    cache.clear();\n  }\n}\n", "nl": "Removes all elements from this cache"}
{"code": "public void registerListener(Condition condition,EventListener listener){\n  getListenerForCondition(condition,-1).registerListener(listener);\n}\n", "nl": "Registers a listener for a particular condition with no special priority"}
{"code": "public static List<Window> windows(List<String> words,int windowSize){\n  List<Window> ret=new ArrayList<>();\n  for (int i=0; i < words.size(); i++)   ret.add(windowForWordInPosition(windowSize,i,words));\n  return ret;\n}\n", "nl": "Constructs a list of window of size windowSize"}
{"code": "public BoardGetCommentsQueryWithExtended(VkApiClient client,int groupId,int topicId){\n  super(client,\"board.getComments\",GetCommentsExtendedResponse.class);\n  groupId(groupId);\n  topicId(topicId);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean isSystemApplication(Context context){\n  if (context == null) {\n    return false;\n  }\n  return isSystemApplication(context,context.getPackageName());\n}\n", "nl": "whether context is system application"}
{"code": "@OnClick({R.id.primary1,R.id.primary2,R.id.primary3,R.id.primary4,R.id.primary5,R.id.primary6}) void onPrimaryColorClicked(View view){\n  Button btn=(Button)view;\n  int tintColor=btn.getBackgroundTintList().getDefaultColor();\n  Scoop.sugarCone().update(Toppings.PRIMARY,tintColor);\n}\n", "nl": "Listener Methods"}
{"code": "@ObjectiveCName(\"addEntry:index:\") public List addEntry(String entry,int index){\n  java.util.List<String> entries=this.getEntries();\n  entries.add(index,entry);\n  this.updateList(entries);\n  return this;\n}\n", "nl": "Add an entry at a certain index into the list"}
{"code": "public boolean isSetThreadNum(){\n  return __isset_bit_vector.get(__THREADNUM_ISSET_ID);\n}\n", "nl": "Returns true if field threadNum is set (has been assigned a value) and false otherwise"}
{"code": "public static int skipAs(String stmt,int offset){\n  offset=ParseUtil.move(stmt,offset,0);\n  if (stmt.length() > offset + \"AS\".length() && (stmt.charAt(offset) == 'A' || stmt.charAt(offset) == 'a') && (stmt.charAt(offset + 1) == 'S' || stmt.charAt(offset + 1) == 's') && (stmt.charAt(offset + 2) == ' ' || stmt.charAt(offset + 2) == '\\r' || stmt.charAt(offset + 2) == '\\n' || stmt.charAt(offset + 2) == '\\t' || stmt.charAt(offset + 2) == '/' || stmt.charAt(offset + 2) == '#')) {\n    offset=ParseUtil.move(stmt,offset + 2,0);\n  }\n  return offset;\n}\n", "nl": "<code>SELECT LAST_INSERT_ID() AS id</code>"}
{"code": "public static synchronized Scope build(LIPermission... permissions){\n  return new Scope(permissions);\n}\n", "nl": "build a Scope with the list of desired permissions"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "public RegisterReplicationLocalViewRequestInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public SpectralSpellInteroperator(String sInputFile,String[] sArgs){\n  InputFile=sInputFile;\n  Args=sArgs;\n}\n", "nl": "Creates a new instance of SpectralSpellInteroperator"}
{"code": "public void downloadFile(TRSHttpRequest request,TRSFileDownloadHttpCallback callback){\n  mProvider.downloadFile(request,callback);\n}\n", "nl": "Download File from Server"}
{"code": "public GroupByResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private Bitmap addThumbnailToCache(String imageKey,Bitmap bitmap,String path,int px){\n  Bitmap thumbnail=ThumbnailUtils.extractThumbnail(bitmap,px,px);\n  thumbnail=BitmapUtils.rotateImage(thumbnail,path);\n  addBitmapToCache(imageKey,thumbnail);\n  return thumbnail;\n}\n", "nl": "Add thumbnail to cache"}
{"code": "public int numberOfObjects(){\n  return numberOfObjects;\n}\n", "nl": "how many objects are there?"}
{"code": "public boolean isFullyZoomedOut(){\n  return (isFullyZoomedOutX() && isFullyZoomedOutY());\n}\n", "nl": "if the chart is fully zoomed out, return true"}
{"code": "public void close(){\n  this.open=false;\n}\n", "nl": "Closes the inventory display"}
{"code": "public static User load(long id){\n  return Helper.load(id,User.class);\n}\n", "nl": "Load the user object by id"}
{"code": "public static long parseDateAsEpoch(String dateStr){\n  try {\n    return DateUtils.parseDate(dateStr).getTime();\n  }\n catch (  DateParseException e) {\n    return 0;\n  }\n}\n", "nl": "Parse date in RFC1123 format, and return its value as epoch"}
{"code": "private void processDownloadedImage(RequestContext context,File tempFile,CompletionHandler imageCompletionHandler){\n  Operation fileReadOp=Operation.createPatch(null).setContextId(context.request.getRequestId()).setCompletion(null);\n  FileUtils.readFileAndComplete(fileReadOp,tempFile);\n}\n", "nl": "read the temp file containing the downloaded image from the file system and proceed with imageCompletionHandler"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set networkdata=\" + ClassificationType.Taxonomy + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public int addOrIncreaseItem(String productId,BigDecimal selectedAmount,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> features,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,String itemGroupNumber,String parentProductId,LocalDispatcher dispatcher) throws CartItemModifyException, ItemNotFoundException {\n  return addOrIncreaseItem(productId,selectedAmount,quantity,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,features,attributes,null,prodCatalogId,configWrapper,itemType,itemGroupNumber,parentProductId,dispatcher);\n}\n", "nl": "add rental (with accommodation) item to cart "}
{"code": "public void click(int mask,int delay) throws InterruptedException {\n  hold(mask,delay);\n}\n", "nl": "Click a mouse mask with delay"}
{"code": "@Override public void startDocument() throws SAXException {\n  baseURIStack.push(catalog.getCurrentBase());\n  overrideStack.push(catalog.getDefaultOverride());\n  return;\n}\n", "nl": "The SAX <code>startDocument</code>"}
{"code": "public Page(FileChannel fc,int blockNum,int pageNum){\n  this(fc,blockNum,pageNum,true);\n}\n", "nl": "Create a new page using fc with at offset blockNum with virtual page number pageNum"}
{"code": "public void deleteLegionMember(int playerObjId){\n  legionMembers.remove(new Integer(playerObjId));\n}\n", "nl": "Delete a legionMember from the legionMembers list"}
{"code": "@Override public String toString(){\n  return \"Reading{\" + \"mDatabaseTag='\" + mDatabaseTag + '\\''+ \", mTimestampMillis=\"+ mTimestampMillis+ \", mValue=\"+ mValue+ '}';\n}\n", "nl": "Results are only meant to be useful in test failure reports"}
{"code": "public void removeChangingListener(OnWheelChangedListener listener){\n  changingListeners.remove(listener);\n}\n", "nl": "Removes wheel changing listener"}
{"code": "protected void drawGridBackground(Canvas c){\n  if (mDrawGridBackground) {\n    c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint);\n  }\n  if (mDrawBorders) {\n    c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint);\n  }\n}\n", "nl": "draws the grid background"}
{"code": "void insertAfter(Node pred){\n  Node succ=pred.next;\n  next=succ;\n  prev=pred;\n  pred.next=this;\n  succ.prev=this;\n}\n", "nl": "Inserts this node between <code>pred</code> and its successor"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public MarketReorderAlbumsQuery reorderAlbums(UserActor actor,int ownerId,int albumId){\n  return new MarketReorderAlbumsQuery(getClient(),actor,ownerId,albumId);\n}\n", "nl": "Reorders the collections list"}
{"code": "@Override public INDArray asRowVector(File f) throws IOException {\n  return asMatrix(f).ravel();\n}\n", "nl": "Convert a file to a row vector"}
{"code": "public NativeAdView(ThemedReactContext context){\n  super(context);\n  mEventEmitter=context.getJSModule(RCTEventEmitter.class);\n}\n", "nl": "Creates new NativeAdView instance and retrieves event emitter"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public String[] upload_file(String group_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE,group_name,null,null,file_ext_name,length,new UploadBuff(file_buff,offset,length),meta_list);\n}\n", "nl": "upload file to storage server (by file buff)"}
{"code": "public QuestCursor queryQuests(){\n  return mHelper.queryQuests();\n}\n", "nl": "QUEST QUERIES"}
{"code": "public EditorFixture enterText(@NotNull final String text){\n  Component component=getFocusedEditor();\n  if (component != null) {\n    robot.enterText(text);\n  }\n  return this;\n}\n", "nl": "Type the given text into the editor"}
{"code": "private void reset(){\n  rootNode.removeAllChildren();\n  treeModel.reload();\n}\n", "nl": "Reset the tree structure"}
{"code": "public void switchToUrl(IResource resource,final SVNUrl svnUrl,final SVNRevision svnRevision,IProgressMonitor progress) throws TeamException {\n  SwitchToUrlCommand command=new SwitchToUrlCommand(getSVNWorkspaceRoot(),resource,svnUrl,svnRevision);\n  command.run(progress);\n}\n", "nl": "Switch URL for selected resource"}
{"code": "public V put(K key,V value,long expireTimeMillis){\n  return putInternal(key,value,TimeUnit.NANOSECONDS.convert(expireTimeMillis,TimeUnit.MILLISECONDS));\n}\n", "nl": "Puts or loads the passed element into the cache"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array"}
{"code": "protected void reset() throws XNIException {\n}\n", "nl": "reset all components before parsing"}
{"code": "public static <T extends Component>void waitUntilGone(@NotNull Robot robot,@NotNull Container root,@NotNull GenericTypeMatcher<T> matcher){\n  String typeName=matcher.supportedType().getSimpleName();\n  Wait.minutes(2).expecting(\"absence of matching \" + typeName).until(null);\n}\n", "nl": "Waits until no components match the given criteria under the given root"}
{"code": "public String[] upload_appender_file(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_appender_file(group_name,local_filename,file_ext_name,meta_list);\n}\n", "nl": "upload appender file to storage server (by file name)"}
{"code": "public void restart() throws RemoteException {\n  ((IInternalRemoteJSpaceAdmin)adminImpl).restart();\n}\n", "nl": "IRemoteJSpaceAdmin interface"}
{"code": "public static void main(String[] args){\n}\n", "nl": "<p>Title:main</p> <p>Description:<p>"}
{"code": "@Override public boolean supports(AuthenticationToken token){\n  return super.supports(token) || (_anonymousId != null && AnonymousToken.isAnonymous(token));\n}\n", "nl": "Override the parent method to also accept anonymous tokens"}
{"code": "public CartPaymentInfo addPaymentAmount(String id,BigDecimal amount){\n  return this.addPaymentAmount(id,amount,false);\n}\n", "nl": "adds a payment method/payment method type"}
{"code": "public Entry(long renew,long renewalRTT){\n  this.renew=renew;\n  id=Long.MAX_VALUE;\n  lease=null;\n  listener=null;\n  this.renewalRTT=renewalRTT;\n}\n", "nl": "Create a fake entry for tailMap"}
{"code": "@Override public void clear(){\n  decrementAccessCount();\n}\n", "nl": "This method will release the objects and set default value for primitive types"}
{"code": "public MarketDeleteAlbumQuery deleteAlbum(UserActor actor,int ownerId,int albumId){\n  return new MarketDeleteAlbumQuery(getClient(),actor,ownerId,albumId);\n}\n", "nl": "Deletes a collection of items"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set contract-gaps=\" + !isSelected() + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public int generateDirectSurrogateKey(String memberStr){\n  SimpleDateFormat timeParser=new SimpleDateFormat(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.CARBON_TIMESTAMP_FORMAT,CarbonCommonConstants.CARBON_TIMESTAMP_DEFAULT_FORMAT));\n  timeParser.setLenient(false);\n  if (null == memberStr || memberStr.trim().isEmpty() || memberStr.equals(CarbonCommonConstants.MEMBER_DEFAULT_VAL)) {\n    return 1;\n  }\n  return getDirectSurrogateForMember(memberStr,timeParser);\n}\n", "nl": "The method take member String as input and converts and returns the dictionary key"}
{"code": "public SharedIteratorSQLDataProviderDecorator(SQLDataProvider<T> sqlDataProvider,long timeToLive){\n  _sqlDataProvider=sqlDataProvider;\n  _timeToLive=timeToLive;\n  _queryToSources=new ConcurrentHashMap<SQLQuery<T>,SharedDataIteratorSource<T>>();\n  _sourcesToQuery=new ConcurrentHashMap<SharedDataIteratorSource<T>,SQLQuery<T>>();\n}\n", "nl": "Create a new instance"}
{"code": "public void logout(){\n  setAuthToken(null);\n  userId=null;\n  getClient().clearAndResetHeaders();\n}\n", "nl": "Logs the user out"}
{"code": "public static void showWarning(String message){\n  showNotification(title,message,Mode.warning,Pos.BOTTOM_LEFT,60000);\n}\n", "nl": "show a warning notation"}
{"code": "public NewsfeedGetQuery filters(List<NewsfeedGetFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Filters to apply"}
{"code": "public static boolean isNotEmpty(String str){\n  return !isEmpty(str);\n}\n", "nl": "Check if string is not empty"}
{"code": "public static UByte ubyte(int value) throws NumberFormatException {\n  return UByte.valueOf(value);\n}\n", "nl": "Create an <code>unsigned byte</code>"}
{"code": "public static <T>void addService(Class<T> serviceInterface,T service) throws RpcException {\n  addService(null,serviceInterface,service,ServerConfig.DEFAULT_PORT);\n}\n", "nl": "add the service to pigeon and publish the service to registry"}
{"code": "public AudioGetPopularQuery onlyEng(Boolean value){\n  return unsafeParam(\"only_eng\",value);\n}\n", "nl": "Return only foreign audio files"}
{"code": "public static void addRecentFile(File file){\n  addRecentFile(file.getPath());\n}\n", "nl": "add a file to the recent files list"}
{"code": "public void testJBrowserHtml() throws Exception {\n  FetcherJBrowser fetcherJBrowser=TestUtils.newInstance(FetcherJBrowser.class,\"fetcher.jbrowser\");\n  Resource resource=new Resource(\"http://nutch.apache.org\",\"nutch.apache.org\",TestUtils.JOB_CONTEXT);\n  System.out.println(fetcherJBrowser.fetch(resource).getResponseCode());\n}\n", "nl": "Test HTML pages should be served through Jbrowser"}
{"code": "public GroupsBanUserQuery commentVisible(Boolean value){\n  return unsafeParam(\"comment_visible\",value);\n}\n", "nl": "true - text of comment will be visible to the user false - text of comment will be invisible to the user (default)"}
{"code": "@Override public void notifyOnError(){\n  scheduleBackgroundRead();\n}\n", "nl": "Triggered when the background activity encounters an exception"}
{"code": "public int size(){\n  return children.size();\n}\n", "nl": "Returns the number of items in the list"}
{"code": "public String toString(){\n  return new String(super.toString() + \" with current value: \" + getStateLabel(getValue()));\n}\n", "nl": "Provides a string representation of the control"}
{"code": "public NativeImageLoader(int height,int width){\n  this.height=height;\n  this.width=width;\n}\n", "nl": "Instantiate an image with the given height and width"}
{"code": "private void widgetChanged(){\n  configureUI();\n  repaint();\n}\n", "nl": "Called when mWidget is being changed"}
{"code": "public boolean isAsynchronous(){\n  return m_asynch;\n}\n", "nl": "Indicates if this ImageFactory loads images asynchronously (true by default)"}
{"code": "public static void showMessageWindow(){\n  if (ProgramProperties.isUseGUI() && MessageWindow.getInstance() != null) {\n    MessageWindow.getInstance().getFrame().setVisible(true);\n    MessageWindow.getInstance().getFrame().setState(JFrame.NORMAL);\n    MessageWindow.getInstance().getFrame().toFront();\n    MessageWindow.getInstance().startCapturingOutput();\n  }\n}\n", "nl": "show the message window"}
{"code": "private void loadDictionaryData(DictionaryInfo dictionaryInfo,DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,long dictionaryChunkStartOffset,long dictionaryChunkEndOffset,boolean loadSortIndex) throws IOException {\n  DictionaryCacheLoader dictionaryCacheLoader=new DictionaryCacheLoaderImpl(dictionaryColumnUniqueIdentifier.getCarbonTableIdentifier(),carbonStorePath);\n  dictionaryCacheLoader.load(dictionaryInfo,dictionaryColumnUniqueIdentifier.getColumnIdentifier(),dictionaryChunkStartOffset,dictionaryChunkEndOffset,loadSortIndex);\n}\n", "nl": "This method will check and load the dictionary file in memory for a given column"}
{"code": "public static String formatDateLong(Context context,Date date){\n  DateFormat dateFormat=android.text.format.DateFormat.getLongDateFormat(context);\n  return dateFormat.format(date);\n}\n", "nl": "Convert Date to string with long format"}
{"code": "public static Column var(DataFrame dataFrame,String columnName){\n  return dataFrame.groupBy(columnName).agg(functions.variance(columnName)).col(columnName);\n}\n", "nl": "Standard deviation for a column"}
{"code": "public Result(int event){\n  this(event,null);\n}\n", "nl": "Create a new result"}
{"code": "@Strippable(side=Side.CLIENT) public GUIHandler registerGUI(String id,Function<GUIContext,GuiScreen> creator){\n  guis.put(id,creator);\n  return this;\n}\n", "nl": "Registers a GUI creator for the given ID"}
{"code": "@Override public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {\n  executor.execute(this,space,txn,readModifier,max);\n}\n", "nl": "Accept the query executor"}
{"code": "private Coordinate projectedCoordinate(AirMapTraffic traffic){\n  long elapsedTime=(new Date().getTime() - traffic.getRecordedTime().getTime()) / 1000;\n  double metersPerSecond=traffic.getGroundSpeedKt() * 0.514444;\n  double distanceTraveled=metersPerSecond * elapsedTime;\n  return getCoordinateFromBearingAndDistance(traffic.getInitialCoordinate(),traffic.getTrueHeading(),distanceTraveled);\n}\n", "nl": "Get a projected coordinate from an AirMapTraffic's bearing and ground speed"}
{"code": "public void showContent(List<Integer> skipIds){\n  switchState(CONTENT,null,null,null,null,skipIds);\n}\n", "nl": "Hide all other states and show content"}
{"code": "public boolean isApplyGroups(){\n  return this.applyGroups;\n}\n", "nl": "Gets if parent groups should be applied"}
{"code": "public boolean isUnderFear(){\n  return isAbnormalSet(AbnormalState.FEAR);\n}\n", "nl": "return true if creature is under Fear effect"}
{"code": "public UsersIsAppUserQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "protected MarketRestoreQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Deleted item id"}
{"code": "private static byte charToByte(char c){\n  return (byte)\"0123456789ABCDEF\".indexOf(c);\n}\n", "nl": "Convert char to byte"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "static int rootDistanceX(ConstraintWidget widget){\n  int rootWidth=widget.getParent().getWidth();\n  int aX=widget.getX();\n  int aWidth=widget.getWidth();\n  return Math.min(aX,rootWidth - (aX + aWidth));\n}\n", "nl": "Get the distance to widget's parent in X"}
{"code": "public MessagesGetLongPollHistoryQuery onlines(Boolean value){\n  return unsafeParam(\"onlines\",value);\n}\n", "nl": "Return user onlines"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public List<Face> findFaces(@NotNull String imageUrl){\n  return faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,imageUrl).withResult();\n}\n", "nl": "Find faces within a given url"}
{"code": "public MessagesGetChatQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public boolean isApplicable(){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  return samplesViewer != null && samplesViewer.getSamplesTable().getNumberOfSelectedSamples() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static int myUserId(){\n  return getUserId(VClientImpl.getClient().getVUid());\n}\n", "nl": "Returns the user id of the current process"}
{"code": "double ComputeRx(NetNode z,NetNode Cx,NetNode Cy,double[][] D,NetNode netNodes){\n  double Rx=0.0;\n  for (NetNode p=netNodes.next; p != null; p=p.next) {\n    if (p == Cx || p == Cx.nbr || p == Cy || p == Cy.nbr || p.nbr == null)     Rx+=D[z.id][p.id];\n else     Rx+=D[z.id][p.id] / 2.0;\n  }\n  return Rx;\n}\n", "nl": "Computes the Rx"}
{"code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public Builder buttonBackgroundColor(int buttonBackgroundColor){\n  this.buttonBackgroundColor=buttonBackgroundColor;\n  return this;\n}\n", "nl": "Set the background colour of the buttons"}
{"code": "public UtilsCheckLinkQuery(VkApiClient client,String url){\n  super(client,\"utils.checkLink\",LinkChecked.class);\n  url(url);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void write(byte[] bytes,int offset,int len) throws IOException {\n  outs.write(bytes,offset,len);\n}\n", "nl": "write bytes"}
{"code": "@Override public void forceUpdate(){\n  previousScalingType=null;\n}\n", "nl": "force update"}
{"code": "public static byte[] bitmapToByte(Bitmap b){\n  ByteArrayOutputStream o=new ByteArrayOutputStream();\n  b.compress(Bitmap.CompressFormat.PNG,100,o);\n  return o.toByteArray();\n}\n", "nl": "convert Bitmap to byte array"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public LeadsGetStatsQuery(VkApiClient client,UserActor actor,int leadId){\n  super(client,\"leads.getStats\",Lead.class);\n  accessToken(actor.getAccessToken());\n  leadId(leadId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public double pace(double f){\n  return (f == 0.0 || f == 1.0 ? f : sigmoid(f));\n}\n", "nl": "Pacing function providing slow-in, slow-out animation"}
{"code": "public boolean drawShadows(){\n  return drawShadows;\n}\n", "nl": "Determine whether shadows are drawn"}
{"code": "public void addSequence(String name,String text,String toolTip,String unalignedPrefix,int leadingGaps,String block,int trailingGaps,String unalignedSuffix){\n  lanes.add(new Lane(this,name,text,toolTip,unalignedPrefix,leadingGaps,block,trailingGaps,unalignedSuffix));\n}\n", "nl": "adds a sequence to the alignment"}
{"code": "public static boolean isExternalStorageReadable(){\n  String state=Environment.getExternalStorageState();\n  return Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state);\n}\n", "nl": "Check if external storage is readable or not"}
{"code": "public void deleteByAppId(Long appId){\n  List<Config> configs=configDao.listByAppId(appId,0,0);\n  if (configs != null && !configs.isEmpty()) {\n    for (    Config config : configs) {\n      delete(config);\n    }\n  }\n}\n", "nl": "Delete the config of the app"}
{"code": "public void removeSwipeListener(SwipeListener listener){\n  if (mListeners == null) {\n    return;\n  }\n  mListeners.remove(listener);\n}\n", "nl": "Removes a listener from the set of listeners"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array"}
{"code": "public SyntaxTester(){\n  DefaultSyntaxKit.initKit();\n  initComponents();\n  jCmbLangs.setModel(new DefaultComboBoxModel(DefaultSyntaxKit.getContentTypes()));\n  jCmbLangs.setSelectedItem(\"text/java\");\n  new CaretMonitor(jEdtTest,lblCaretPos);\n}\n", "nl": "Creates new form Tester"}
{"code": "@deprecated public LocaleMatcher(LocalePriorityList languagePriorityList,LanguageMatcherData matcherData){\n  this.matcherData=matcherData;\n  for (  ULocale language : languagePriorityList) {\n    add(language,languagePriorityList.getWeight(language));\n  }\n  Iterator<ULocale> it=languagePriorityList.iterator();\n  this.defaultLanguage=(it.hasNext() ? (ULocale)it.next() : null);\n}\n", "nl": "/*    "}
{"code": "private void apply(Activity activity,@StyleRes int theme){\n  activity.setTheme(theme);\n  int color=AttrUtils.getColorAttr(activity,android.R.attr.colorBackground);\n  activity.getWindow().setBackgroundDrawable(new ColorDrawable(color));\n}\n", "nl": "Apply the desired theme to an activity and it's window"}
{"code": "public void addStatistics(String message,long currentTime){\n  this.timeTaken=currentTime - startTime;\n  this.message=message;\n}\n", "nl": "below method will be used to add the statistic"}
{"code": "private void updateSymbols(){\n  if (rendererList != null) {\n    for (    RenderSymbolInterface renderer : rendererList) {\n      renderer.renderSymbol();\n    }\n  }\n}\n", "nl": "Refresh the drawing of any symbols in renderers"}
{"code": "public void cancel(){\n  request.cancel();\n}\n", "nl": "Cancel this request"}
{"code": "public PlacesSearchQuery(VkApiClient client,UserActor actor,float latitude,float longitude){\n  super(client,\"places.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  latitude(latitude);\n  longitude(longitude);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Activity currentActivity(){\n  Activity activity=activityStack.lastElement();\n  return activity;\n}\n", "nl": "get current activity from Stack"}
{"code": "private byte[] updateMinMaxForNoDictionary(byte[] valueWithLength){\n  ByteBuffer buffer=ByteBuffer.wrap(valueWithLength);\n  byte[] actualValue=new byte[buffer.getShort()];\n  buffer.get(actualValue);\n  return actualValue;\n}\n", "nl": "Below method will be used to update the min or max value by removing the length from it"}
{"code": "public boolean isChanged(SampleAttributeTable sampleAttributeTable){\n  if (originalBytes == null)   return false;\n  byte[] currentBytes=sampleAttributeTable.getBytes();\n  if (originalBytes.length != currentBytes.length)   return true;\n  for (int i=0; i < originalBytes.length; i++)   if (originalBytes[i] != currentBytes[i])   return true;\n  return false;\n}\n", "nl": "has the data changed?"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getSelectedBlock().clear();\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public CsClientPacket handle(ByteBuffer data,ChatServerConnection client){\n  State state=client.getState();\n  int id=data.get() & 0xff;\n  return getPacket(state,id,data,client);\n}\n", "nl": "Reads one packet from given ByteBuffer"}
{"code": "private boolean coordIsCalendarCell(float y){\n  return y > cellHeight;\n}\n", "nl": "y is bigger than the head of the calendar, meaning that the coordination may represent a day of the calendar"}
{"code": "public MD5State(MD5State from){\n  this();\n  int i;\n  for (i=0; i < buffer.length; i++)   this.buffer[i]=from.buffer[i];\n  for (i=0; i < state.length; i++)   this.state[i]=from.state[i];\n  this.count=from.count;\n}\n", "nl": "Create this State as a copy of another state"}
{"code": "public BafASMBackend(SootClass sc,int javaVersion){\n  super(sc,javaVersion);\n}\n", "nl": "Creates a new BafASMBackend with a given enforced java version"}
{"code": "@NonNull private static String tag(@Nullable Class<?> caller){\n  return caller == null ? \"\" : caller.getSimpleName().replaceAll(\"\\\\$\",\"\");\n}\n", "nl": "Generates a log tag using the caller reference's class name"}
{"code": "@Override public double[] makeDensityTestValues(){\n  double d=1 / 1.75;\n  return new double[]{0,d,d,d,d,d,d,d,d,d,d,0};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static UInteger uint(long value) throws NumberFormatException {\n  return UInteger.valueOf(value);\n}\n", "nl": "Create an <code>unsigned int</code>"}
{"code": "@Override public void handle(Packet packet){\n  packet.handle();\n}\n", "nl": "Handles a packet"}
{"code": "public static DmnRestUrlBuilder usingBaseUrl(String baseUrl){\n  if (baseUrl == null)   throw new ActivitiDmnIllegalArgumentException(\"baseUrl can not be null\");\n  if (baseUrl.endsWith(\"/\"))   baseUrl=baseUrl.substring(0,baseUrl.length() - 1);\n  return new DmnRestUrlBuilder(baseUrl);\n}\n", "nl": "Uses baseUrl as the base URL"}
{"code": "public void clearPayments(){\n  this.expireSingleUsePayments();\n  paymentInfo.clear();\n}\n", "nl": "clears all payment method/payment method types"}
{"code": "private void stopPulling(){\n  eventDispatcher.unRegister(this);\n  asyncContext.complete();\n  if (pullingTimeoutFuture != null) {\n    pullingTimeoutFuture.cancel(false);\n  }\n}\n", "nl": "stop current pulling task"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public String toString(){\n  StringBuilder builder=new StringBuilder(\"<\");\n  builder.append(href).append(\">; rel=\").append(relationship);\n  if (type != null)   builder.append(\"; type=\").append(type);\n  return builder.toString();\n}\n", "nl": "To write as link header"}
{"code": "public MarketReorderItemsQuery after(Integer value){\n  return unsafeParam(\"after\",value);\n}\n", "nl": "Id of an item to place current item after it"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static int writeString(DataOutput out,String s) throws IOException {\n  ByteBuffer bytes=encode(s);\n  int length=bytes.limit();\n  WritableUtils.writeVInt(out,length);\n  out.write(bytes.array(),0,length);\n  return length;\n}\n", "nl": "Write a UTF8 encoded string to out"}
{"code": "public Interceptor[] buildMethodInterceptors(Method method){\n  Interceptors before=method.getAnnotation(Interceptors.class);\n  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;\n}\n", "nl": "Build interceptors of Method"}
{"code": "public boolean findNext(String regularExpression){\n  return findFirst(regularExpression);\n}\n", "nl": "Find next instance"}
{"code": "public void open(){\n  open=true;\n}\n", "nl": "Call this to start accepting events"}
{"code": "public ImageResizer(Context context,int imageWidth,int imageHeight){\n  super(context);\n  setImageSize(imageWidth,imageHeight);\n}\n", "nl": "Initialize providing a single target image size (used for both width and height);"}
{"code": "private String makeSAM(String queryName,String referenceLine){\n  return queryName + \"\\t0\\t\" + referenceLine+ \"\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:100\\t\\n\";\n}\n", "nl": "make a SAM line"}
{"code": "@Override public boolean onPaint(ViewTransform transform,Graphics2D g){\n  boolean needsRepaint=super.onPaint(transform,g);\n  if (isSelected()) {\n    ConstraintTableLayout table=(ConstraintTableLayout)mWidget;\n    WidgetDraw.drawTableControls(transform,g,table);\n  }\n  return needsRepaint;\n}\n", "nl": "Override the default paint method to draw the table controls when selected"}
{"code": "public static boolean isWindows(){\n  return SystemInfo.isWindows;\n}\n", "nl": "os system is windows or other"}
{"code": "public FriendsSearchQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"friends.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public GroupsGetInvitesQuery(VkApiClient client,UserActor actor){\n  super(client,\"groups.getInvites\",GetInvitesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void validateRelationType(RelationTypeImpl relationType){\n  if (!ValidateGlobalRules.validateHasMinimumRoles(relationType))   errorsFound.add(ErrorMessage.VALIDATION_RELATION_TYPE.getMessage(relationType.getId()));\n}\n", "nl": "Validation rules exclusive to relation types"}
{"code": "public void increaseWin(){\n  this.win++;\n}\n", "nl": "this function increase the number about win; (+1)"}
{"code": "public VideoGetQueryWithExtended videos(List<String> value){\n  return unsafeParam(\"videos\",value);\n}\n", "nl": "Video IDs"}
{"code": "public static void sendPacket(Player player,AionServerPacket packet){\n  if (player.getClientConnection() != null) {\n    player.getClientConnection().sendPacket(packet);\n  }\n}\n", "nl": "Send packet to this player"}
{"code": "public void testHighExistingApiParent(){\n  doTestForParentApi(\"android:Theme.Holo.NoActionBar.TranslucentDecor\",\"apiParentTestAfter5\");\n}\n", "nl": "Tests setting a parent with api that has an associated values folder"}
{"code": "public State(int state){\n  this(JSpaceState.convertToString(Integer.valueOf(state)));\n}\n", "nl": "Construct a State"}
{"code": "public static <T>Single<T> single(GoogleApiClientSingle<T> single){\n  return Single.create(single);\n}\n", "nl": "Serve a Single GoogleApiClient"}
{"code": "public boolean success(){\n  return this.success;\n}\n", "nl": "Whether or not the RPC completed"}
{"code": "public synchronized void closeNow(){\n  if (!_closed) {\n    _referenceCount=0;\n    closeDataStore();\n  }\n}\n", "nl": "Force the DataStore to close immediately"}
{"code": "public synchronized void resume(){\n}\n", "nl": "Resumes audio output"}
{"code": "private boolean filterEntry(ConsoleEntry entry){\n  if ((logDisabledTypesMask & getMask(entry.type)) != 0) {\n    return false;\n  }\n  return length(filterText) == 0 || containsIgnoreCase(entry.message,filterText);\n}\n", "nl": "Checks if entry passes the current filter"}
{"code": "public boolean gotoLast(){\n  current.set1(table.getGrid().getRowCount() - 1);\n  current.set2(table.getGrid().getColumnCount() - 1);\n  return isCurrentSet();\n}\n", "nl": "goto the last object"}
{"code": "public static Record createRecord(ModelRecord modelRecord) throws DataFileException {\n  Record record=new Record(modelRecord);\n  return record;\n}\n", "nl": "Creates new Record"}
{"code": "public void logError(final ActionResult result){\n  for (  Message msg : result.getMessages()) {\n    if (Message.ERROR.equals(msg.getType())) {\n      logWarning(msg.getText() + \", continuing\");\n    }\n  }\n}\n", "nl": "Used for copying error messages from other ActionResult object, when action is called within other action, as they do not throw exceptions"}
{"code": "public static void delete(String event){\n  instance.events.remove(event);\n  log(event + \" deleted\");\n}\n", "nl": "Delete event"}
{"code": "public Builder sumColumns(String... columns){\n  return add(ReduceOp.Sum,columns);\n}\n", "nl": "Reduce the specified columns by taking the sum of values"}
{"code": "public Builder cacheOnDisk(boolean cacheOnDisk){\n  this.cacheOnDisk=cacheOnDisk;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached on disk"}
{"code": "public boolean isOptional(){\n  return this.optionalParams;\n}\n", "nl": "Returns true of the parameters for this service are to be included as optional"}
{"code": "public boolean isApplicable(){\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  return viewer != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private List<ResultSinkInfo> findSinkByMethodSignature(String sinkSignature){\n  List<ResultSinkInfo> sinkVals=new ArrayList<ResultSinkInfo>();\n  for (  ResultSinkInfo si : this.results.keySet())   if (si.getSink().containsInvokeExpr()) {\n    InvokeExpr expr=si.getSink().getInvokeExpr();\n    if (expr.getMethod().getSignature().equals(sinkSignature))     sinkVals.add(si);\n  }\n  return sinkVals;\n}\n", "nl": "Finds the entry for a sink method with the given signature"}
{"code": "public LeadsCheckUserQuery(VkApiClient client,UserActor actor,int leadId){\n  super(client,\"leads.checkUser\",Checked.class);\n  accessToken(actor.getAccessToken());\n  leadId(leadId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n", "nl": "Apply the size behaviour"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void onDialogRequest(Player player){\n}\n", "nl": "This method should be overriden in more specific controllers"}
{"code": "public void removeListener(@NotNull ConfigurationListener listener){\n  if (myListeners != null) {\n    myListeners.remove(listener);\n    if (myListeners.isEmpty()) {\n      myListeners=null;\n    }\n  }\n}\n", "nl": "Removes a listener such that it is no longer notified of changes"}
{"code": "protected void notifyClickListenersAboutClick(int item){\n  for (  OnWheelClickedListener listener : clickingListeners) {\n    listener.onItemClicked(this,item);\n  }\n}\n", "nl": "Notifies listeners about clicking"}
{"code": "public static boolean refreshAccountsLastMac(int accountId,String address){\n  return getAccountDAO().updateLastMac(accountId,address);\n}\n", "nl": "Refresh last_mac of account"}
{"code": "public static boolean isExternalMemoryAvailable(){\n  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);\n}\n", "nl": "Judge whether external momory is available"}
{"code": "public synchronized boolean isDragging(){\n  return isDragging;\n}\n", "nl": "Checks if a dragging operation is currently happening"}
{"code": "public int calculateDeltaSize(int vmfullclonesize,int vmrefreshrate){\n  final int i=(vmfullclonesize * vmrefreshrate) / 100;\n  return i;\n}\n", "nl": "Calculate size of delta size"}
{"code": "public boolean isActive(){\n  return timeEnd == null || timeEnd.getTime() > System.currentTimeMillis();\n}\n", "nl": "Checks if ban is still active"}
{"code": "public void releaseScan() throws SAException {\n  if (_SAiter != null)   _SAiter.close();\n}\n", "nl": "release SLHolder for this scan"}
{"code": "public static double atan(double x){\n  return atan(x,0.0,false);\n}\n", "nl": "Arctangent function"}
{"code": "public Bitmap put(String key,Bitmap value){\n  return cache.put(key,value);\n}\n", "nl": "put bitmap to image cache"}
{"code": "public boolean isCheckLower(){\n  return lowerCheck;\n}\n", "nl": "Needs lower bound check?"}
{"code": "public JsonObject toJson(){\n  JsonObject json=new JsonObject();\n  json.put(\"request\",request.toJson());\n  if (template != null) {\n    json.put(\"template\",template);\n  }\n  return json;\n}\n", "nl": "Convert this to JSON"}
{"code": "@Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,FilterChain chain,Authentication authResult) throws IOException, ServletException {\n  super.successfulAuthentication(request,response,chain,authResult);\n  chain.doFilter(request,response);\n}\n", "nl": "Pass authentication"}
{"code": "public UrlValidator(String[] schemes,long options){\n  this(schemes,null,options);\n}\n", "nl": "Behavior of validation is modified by passing in options:"}
{"code": "public boolean isSecretAttribute(String attribute){\n  return attribute.startsWith(\"@\");\n}\n", "nl": "is this a secret attribute (such as color etc)"}
{"code": "public MarketReportQuery report(UserActor actor,int ownerId,int itemId,ReportReason reason){\n  return new MarketReportQuery(getClient(),actor,ownerId,itemId,reason);\n}\n", "nl": "Sends a complaint to the item"}
{"code": "public static boolean isValueLinkCard(String stPassed){\n  if (isEmpty(stPassed))   return defaultEmptyOK;\n  String st=stripCharsInBag(stPassed,creditCardDelimiters);\n  if (st.length() == 16 && (st.startsWith(\"7\") || st.startsWith(\"6\"))) {\n    return true;\n  }\n  return false;\n}\n", "nl": "Check to see if a card number is a valid ValueLink Gift Card"}
{"code": "public AccountSetPushSettingsQuery value(List<String> value){\n  return unsafeParam(\"value\",value);\n}\n", "nl": "Set value"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public StringElemValPair(String name,char kind,String val){\n  super(name,kind);\n  this.val=new AsciiCP(val);\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "public int validate(int actual,int max,int min,int defaultVal){\n  if (actual <= max && actual >= min) {\n    return actual;\n  }\n  return defaultVal;\n}\n", "nl": "Validate the restrictions"}
{"code": "public CM_CASTSPELL(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_CM_REQUEST_DIALOG </tt> packet"}
{"code": "public boolean isDrawHoleEnabled(){\n  return mDrawHole;\n}\n", "nl": "returns true if the hole in the center of the pie-chart is set to be visible, false if not"}
{"code": "public FriendsGetSuggestionsQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getSuggestions\",GetSuggestionsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public PhotosGetCommentsQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public synchronized void removeListener(ISpaceModeListener listener){\n  _primarySpaceModeListeners.removeListener(listener);\n}\n", "nl": "Remove listener for space availability"}
{"code": "public void addLanguage(Integer languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n", "nl": "Adds a language limit to the query"}
{"code": "public static Polygon polygon(Collection<Point> points){\n  return polygon(points.toArray(new Point[points.size()]));\n}\n", "nl": "Creates a Polygon instance from the specified points"}
{"code": "protected VideoAddToAlbumQuery videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n", "nl": "Set video id"}
{"code": "protected void notifyScrollingListenersAboutStart(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingStarted(this);\n  }\n}\n", "nl": "Notifies listeners about starting scrolling"}
{"code": "public static String createShortTag(String cName){\n  if (cName.equalsIgnoreCase(Taxonomy))   return \"tax|\";\n else   if (cName.equalsIgnoreCase(\"interpro2go\"))   return \"IPR|\";\n else   if (cName.equalsIgnoreCase(\"eggnog\"))   return \"cog|\";\n else   return cName.toLowerCase() + \"|\";\n}\n", "nl": "create short tag for writing header line"}
{"code": "private static void createStore(Player activePlayer){\n  if (activePlayer.isInState(CreatureState.RESTING)) {\n    return;\n  }\n  activePlayer.setStore(new PrivateStore(activePlayer));\n  activePlayer.setState(CreatureState.PRIVATE_SHOP);\n  PacketSendUtility.broadcastPacket(activePlayer,new SM_EMOTION(activePlayer,EmotionType.OPEN_PRIVATESHOP,0,0),true);\n}\n", "nl": "This method will create the player's store"}
{"code": "protected void notifyScrollingListenersAboutEnd(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingFinished(this);\n  }\n}\n", "nl": "Notifies listeners about ending scrolling"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void configure(int resamplingSize,int repeatitions,int p_left,boolean useSecond,boolean optionWarningOnBoundary,int seed){\n  this.resamplingSize=resamplingSize;\n  this.repeatitions=repeatitions;\n  this.p_left=p_left;\n  this.useSecond=useSecond;\n  this.optionWarningOnBoundary=optionWarningOnBoundary;\n  if (seed != 0)   random.setSeed(seed);\n}\n", "nl": "configure a comparison"}
{"code": "private boolean isFinisher(RemoteOperationResult failedResult){\n  if (failedResult != null) {\n    RemoteOperationResult.ResultCode code=failedResult.getCode();\n    return (code.equals(RemoteOperationResult.ResultCode.SSL_ERROR) || code.equals(RemoteOperationResult.ResultCode.SSL_RECOVERABLE_PEER_UNVERIFIED) || code.equals(RemoteOperationResult.ResultCode.BAD_OC_VERSION)|| code.equals(RemoteOperationResult.ResultCode.INSTANCE_NOT_CONFIGURED));\n  }\n  return false;\n}\n", "nl": "Checks if a failed result should terminate the synchronization process immediately, according to OUR OWN POLICY"}
{"code": "public void activatePage(String assetPath) throws IOException {\n  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(PATH_PROPERTY,assetPath).put(CMD_PROPERTY,ACTIVATE).put(CHARSET_PROPERTY,UTF_8).build()),REPLICATE_URL,REPLICATION_STARTED_MESSAGE + assetPath);\n}\n", "nl": "Activates provided asset"}
{"code": "public static String extractCSVOutputLineDomain(String csvOut){\n  String tokens[]=csvOut.split(\",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\",-1);\n  return tokens[1];\n}\n", "nl": "Used for testing -- input is a full csv line: <freq,domain,ip,ts,opt:generic>"}
{"code": "public void printLf0Mean(){\n  printVectors(lf0Mean,lf0Variance);\n}\n", "nl": "Print mean and variance of each state"}
{"code": "public ResizeImageTransform(Random random,int newWidth,int newHeight){\n  super(random);\n  this.newWidth=newWidth;\n  this.newHeight=newHeight;\n  converter=new OpenCVFrameConverter.ToMat();\n}\n", "nl": "Returns new ResizeImageTransform object"}
{"code": "public MessagesGetHistoryAttachmentsQuery mediaType(MessagesGetHistoryAttachmentsType value){\n  return unsafeParam(\"media_type\",value);\n}\n", "nl": "Type of media files to return"}
{"code": "private void decrementAccessCount(){\n  if (accessCount.get() > 0) {\n    accessCount.decrementAndGet();\n  }\n}\n", "nl": "This method will decrement the access count for a column by 1 whenever a column usage is complete"}
{"code": "public void forceUpdate(){\n}\n", "nl": "force update"}
{"code": "public boolean isServiceUnitPreAllocated(String suName){\n  return this.preAllocatedBundles.contains(suName);\n}\n", "nl": "Check if a ServiceUnit is pre-allocated to this ResourceUnit"}
{"code": "public final void fatal(final Object o){\n  log(Level.FATAL,o);\n}\n", "nl": "This method logs the FATAL message"}
{"code": "public static <T>void removeService(ProviderConfig<T> providerConfig) throws RpcException {\n  removeService(providerConfig.getUrl());\n}\n", "nl": "remove the service from pigeon, including unregister this service from registry"}
{"code": "public void registerCache(ICache cache){\n  if (null != cache) {\n    mCaches.add(cache);\n  }\n}\n", "nl": "Register additional readable cache"}
{"code": "@Override public boolean hasFixedPropertiesArray(){\n  return true;\n}\n", "nl": "true if the entry packet has an array of fixed properties"}
{"code": "public NotesGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"notes.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addAnnotation(Annotation annotation){\n  this.addAnnotations(new Annotation[]{annotation});\n}\n", "nl": "add a single annotation to the map is a private method"}
{"code": "public boolean supports(@MagicConstant(flagsFromClass=Features.class) int capability){\n  IAndroidTarget target=getTarget();\n  if (target != null) {\n    return RenderService.supportsCapability(getModule(),target,capability);\n  }\n  return false;\n}\n", "nl": "Returns true if this configuration supports the given rendering capability"}
{"code": "protected void drawYLabels(Canvas c,float fixedPosition,float[] positions,float offset){\n  for (int i=0; i < mYAxis.mEntryCount; i++) {\n    String text=mYAxis.getFormattedLabel(i);\n    if (!mYAxis.isDrawTopYLabelEntryEnabled() && i >= mYAxis.mEntryCount - 1)     return;\n    c.drawText(text,fixedPosition,positions[i * 2 + 1] + offset,mAxisLabelPaint);\n  }\n}\n", "nl": "draws the y-labels on the specified x-position"}
{"code": "private boolean isPaused(){\n  return paused;\n}\n", "nl": "Returns true if we are in pause mode"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.isAllowAminoAcids() && !viewer.isShowAminoAcids();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static Executor createExecutor(int threadPoolSize,int threadPriority,QueueProcessingType tasksProcessingType){\n  boolean lifo=tasksProcessingType == QueueProcessingType.LIFO;\n  BlockingQueue<Runnable> taskQueue=lifo ? new LIFOLinkedBlockingDeque<Runnable>() : new LinkedBlockingQueue<Runnable>();\n  return new ThreadPoolExecutor(threadPoolSize,threadPoolSize,0L,TimeUnit.MILLISECONDS,taskQueue,createThreadFactory(threadPriority,\"uil-pool-\"));\n}\n", "nl": "Creates default implementation of task executor"}
{"code": "public static void v(String msg){\n  if (LOG_ENABLE) {\n    Log.v(TAG,buildMsg(msg));\n  }\n}\n", "nl": "verbose log"}
{"code": "public UsersGetSubscriptionsQuery(VkApiClient client){\n  super(client,\"users.getSubscriptions\",GetSubscriptionsResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isApplicable(){\n  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isFilterLogTypeEnabled(int type){\n  return (logDisabledTypesMask & getMask(type)) == 0;\n}\n", "nl": "Checks if log type is enabled"}
{"code": "public void attachView(final V view){\n  detachView();\n  mPresenter.attachView(view);\n}\n", "nl": "attaches the new view and takes care for removing the old view when one is attached"}
{"code": "public SensorInfo(SensorInfos sensorInfos){\n  this();\n  sensorInfoBuilder.setTimestampSnapshot(sensorInfos.getTimestampSnapshot()).setAccelerometerAxes(sensorInfos.getAccelerometerAxes()).setAccelNormalizedX(sensorInfos.getAccelNormalizedX()).setAccelNormalizedY(sensorInfos.getAccelNormalizedY()).setAccelNormalizedZ(sensorInfos.getAccelNormalizedZ()).setAccelRawX(sensorInfos.getAccelRawX()).setAccelRawY(sensorInfos.getAccelRawY()).setAccelRawZ(sensorInfos.getAccelRawZ()).setAngleNormalizedX(sensorInfos.getAngleNormalizedX()).setAngleNormalizedY(sensorInfos.getAngleNormalizedY()).setAngleNormalizedZ(sensorInfos.getAngleNormalizedZ()).setGyroscopeRawX(sensorInfos.getGyroscopeRawX()).setGyroscopeRawY(sensorInfos.getGyroscopeRawY()).setGyroscopeRawZ(sensorInfos.getGyroscopeRawZ()).build();\n}\n", "nl": "Create a sensor info with already existing sensor infos"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCache.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "public static final void addPlayer(PlayerGroup group,Player player){\n  Preconditions.checkNotNull(group,\"Group should not be null\");\n  group.onEvent(new PlayerEnteredEvent(group,player));\n}\n", "nl": "Add player to group"}
{"code": "public boolean isServiceSelected(){\n  return tabbedPane != null && tabbedPane.getSelectedComponent() != null && tabbedPane.getSelectedComponent() instanceof ServicePanel;\n}\n", "nl": "is the currently selected panel a service panel?"}
{"code": "private void resurrection(){\n  mNotificationManager.cancel(R.string.uploader_upload_in_progress_ticker);\n}\n", "nl": "Service clean-up when restarted after being killed"}
{"code": "public void checkForNullValue(String value){\n  if (value == null) {\n    throw new NullPointerException();\n  }\n}\n", "nl": "null keys would corrupt the shared pref file and make them unreadable this is a preventive measure"}
{"code": "protected NewsfeedUnignoreItemQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item identifier"}
{"code": "@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {\n}\n", "nl": "A notation declaration"}
{"code": "private void cacheRootDistance(Direction d,float value){\n  mDistToRootCache[d.getDirection()]=value;\n}\n", "nl": "Get the cache distance to the root"}
{"code": "public boolean hasNext(){\n  return this.fileCounter > 0;\n}\n", "nl": "This method will be used to check whether any more element is present or not"}
{"code": "public DatabaseGetCountriesQuery(VkApiClient client){\n  super(client,\"database.getCountries\",GetCountriesResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean isWifiEnabled(Context context){\n  ConnectivityManager mgrConn=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  TelephonyManager mgrTel=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);\n  return ((mgrConn.getActiveNetworkInfo() != null && mgrConn.getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED) || mgrTel.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);\n}\n", "nl": "is wifi on"}
{"code": "public boolean isDown(){\n  if (mLocalPath != null && mLocalPath.length() > 0) {\n    File file=new File(mLocalPath);\n    return (file.exists());\n  }\n  return false;\n}\n", "nl": "Use this to check if this file is available locally"}
{"code": "public static int dpToPx(Context context,float dpValue){\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(dpValue * scale + 0.5f);\n}\n", "nl": "Convert DP to PX"}
{"code": "public void removeRewrittenEntryIndication(String uid){\n  if (_reWrittenEntries != null)   _reWrittenEntries.remove(uid);\n}\n", "nl": "remove reWritten entry indication if exists"}
{"code": "public DatabaseGetFacultiesQuery(VkApiClient client,UserActor actor,int universityId){\n  super(client,\"database.getFaculties\",GetFacultiesResponse.class);\n  accessToken(actor.getAccessToken());\n  universityId(universityId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void writeShort(int value) throws IOException {\n  out.write(value & 0xff);\n  out.write((value >> 8) & 0xff);\n}\n", "nl": "Write 16-bit value to output stream, LSB first"}
{"code": "private Object writeReplace(){\n  return wrapped;\n}\n", "nl": "returns the exception to marshal"}
{"code": "public static boolean isAValuesDirectory(String directoryName){\n  if (directoryName == null) {\n    throw new NullPointerException(\"directoryName can not be null\");\n  }\n  return directoryName.equals(\"values\") || directoryName.startsWith(\"values-\");\n}\n", "nl": "is a value directory"}
{"code": "private void finish(){\n  getActivity().onBackPressed();\n}\n", "nl": "Finishes the preview"}
{"code": "public FriendsAreFriendsQuery(VkApiClient client,UserActor actor,int... userIds){\n  super(client,\"friends.areFriends\",Utils.buildParametrizedType(List.class,FriendStatus.class));\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public HornMelodiesCursor queryMelodiesFromNotes(String notes){\n  return mHelper.queryMelodiesFromNotes(notes);\n}\n", "nl": "MELODY QUERIES"}
{"code": "public void onTargetCancel(TapTargetView view){\n  view.dismiss(false);\n}\n", "nl": "If cancelable, signals that the user has clicked outside of the outer circle"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof IViewerWithFindToolBar;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public WallGetByIdQueryWithExtended(VkApiClient client,String... posts){\n  super(client,\"wall.getById\",GetByIdExtendedResponse.class);\n  posts(posts);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public Node adoptNode(Node source) throws DOMException {\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n", "nl": "DOM Level 3"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.ByStart.toString() + \";zoom axis=both what=fit;\");\n}\n", "nl": "action to be performed"}
{"code": "public SecureSendNotificationQuery(VkApiClient client,ServiceActor actor,String message){\n  super(client,\"secure.sendNotification\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n  message(message);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n", "nl": "check is3G"}
{"code": "@deprecated public static boolean equalsChars(CharSequence a,CharSequence b){\n  return (a.length() == b.length()) && (compare(a,b) == 0);\n}\n", "nl": "/*    "}
{"code": "OMTG_ENV_005_JS_Interface(Context c){\n  mContext=c;\n}\n", "nl": "Instantiate the interface and set the context"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void updateView(){\n  updateGraph();\n  embedGraph();\n}\n", "nl": "update the view"}
{"code": "public void initializeChildDimensionsList(int childDimension){\n  listOfChildDimensions=new ArrayList<CarbonDimension>(childDimension);\n}\n", "nl": "this method will initialize list based on number of child dimensions Count"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set fontSize=increase;\");\n}\n", "nl": "action to be performed"}
{"code": "public static void initInstance(Properties properties){\n  if (instance == null) {\n    instance=new CloseVoteFinder(properties);\n  }\n}\n", "nl": "Init the instance"}
{"code": "public void rightTrim(double second){\n  trim(0,second);\n}\n", "nl": "Trim the wave data from ending"}
{"code": "private void addCachedLegionMember(LegionMember legionMember){\n  this.allCachedLegionMembers.addMember(legionMember);\n}\n", "nl": "This method will add a new legion member to the cache"}
{"code": "private void initRealmConfiguration(){\n  RealmConfiguration realmConfiguration=new RealmConfiguration.Builder(this).build();\n  Realm.setDefaultConfiguration(realmConfiguration);\n}\n", "nl": "Initialise the realm configuration"}
{"code": "@DataProvider(name=\"ExperimentAAndB\") public static Object[][] experimentAAndB(){\n  return new Object[][]{new Object[]{\"{\\\"applicationName\\\": \\\"qbo\\\", \\\"label\\\": \\\"exp_a_\" + time + \"\\\",\"+ \"\\\"samplingPercent\\\": 1.0, \\\"startTime\\\": \\\"\"+ dateTime.minusDays(1).format(formatter)+ \"\\\", \"+ \"\\\"endTime\\\": \\\"\"+ dateTime.plusDays(1).format(formatter)+ \"\\\", \\\"description\\\": \\\"some description\\\"}\"},new Object[]{\"{\\\"applicationName\\\": \\\"qbo\\\", \\\"label\\\": \\\"exp_b_\" + time + \"\\\",\"+ \"\\\"samplingPercent\\\": 1.0, \\\"startTime\\\": \\\"\"+ dateTime.minusDays(3).format(formatter)+ \"\\\", \"+ \"\\\"endTime\\\": \\\"\"+ dateTime.plusDays(8).format(formatter)+ \"\\\", \\\"description\\\": \\\"some description\\\"}\"}};\n}\n", "nl": "This is a shared Experiment that derived from the python integration test exp_a and exp_b only label is different from the original definition by appending a time to it"}
{"code": "public static void sortByOriginalOrder(final Alignment alignment){\n  alignment.resetOrder();\n}\n", "nl": "sort by original order"}
{"code": "public boolean isSelected(String series,String className){\n  if (isSelectedBasedOnSeries)   return selectedSeries.contains(series);\n else   return selectedClasses.contains(className);\n}\n", "nl": "is series selected and  isSelectedBasedOnSeries==true or className selected and isSelectedBasedOnSeries==false? Logic is flipped if transposed is set"}
{"code": "public static Point randomStep(Point point){\n  point.setLongitude(point.getLongitude() + randomStep());\n  point.setLatitude(point.getLatitude() + randomStep());\n  return point;\n}\n", "nl": "Random step to a coordinate object"}
{"code": "public NewsfeedSearchQuery startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n", "nl": "Set start from"}
{"code": "public static void removeUIdFromSetOfOpenFiles(String name,long uId){\n  final Pair<String,Long> pair=new Pair<>(name,uId);\n  Integer count=openFiles.get(pair);\n  if (count == null || count < 2) {\n    openFiles.keySet().remove(pair);\n  }\n else   openFiles.put(pair,count - 1);\n}\n", "nl": "removes the UID of a file from the set of open files"}
{"code": "public void loadAndParseRClass(){\n  myClassLoader.loadAndParseRClassSilently();\n}\n", "nl": "Load and parse the R class such that resource references in the layout rendering can refer to local resources properly"}
{"code": "public INSECTMemoryDB(){\n  ObjectMap=new HashMap();\n}\n", "nl": "Creates a new instance of INSECTMemoryDB"}
{"code": "public static WxBatchGetMaterialResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxBatchGetMaterialResult.class);\n}\n", "nl": "json --> obj"}
{"code": "public ExecuteStorageFunctionQuery(VkApiClient client,Actor actor,String storageFunctionName){\n  super(client,\"execute.\" + storageFunctionName,JsonElement.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected PhotosCopyQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Photo's owner ID"}
{"code": "public LeadsStartQuery(VkApiClient client,UserActor actor,int leadId,String secret){\n  super(client,\"leads.start\",Start.class);\n  accessToken(actor.getAccessToken());\n  leadId(leadId);\n  secret(secret);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public UrlSpaceConfigurer primaryBackupListener(ISpaceModeListener primaryBackupListener){\n  validate();\n  urlSpaceFactoryBean.setPrimaryBackupListener(primaryBackupListener);\n  return this;\n}\n", "nl": "Sets a custom primary backup listener"}
{"code": "private void checkConfiguration(){\n  if (configuration == null) {\n    throw new IllegalStateException(ERROR_NOT_INIT);\n  }\n}\n", "nl": "Checks if ImageLoader's configuration was initialized"}
{"code": "void processIntent(Intent intent){\n  Parcelable[] rawMsgs=intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);\n  NdefMessage msg=(NdefMessage)rawMsgs[0];\n  Match newMatch=SerializationUtils.deserialize(msg.getRecords()[0].getPayload());\n  Toast.makeText(getApplicationContext(),\"NAME : \" + newMatch.getTarget().getNickname(),Toast.LENGTH_LONG).show();\n}\n", "nl": "Parses the NDEF Message from the intent and prints to the TextView"}
{"code": "public static void syncImmediately(Context context){\n  Bundle bundle=new Bundle();\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);\n  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.content_authority),bundle);\n}\n", "nl": "Helper method to have the sync adapter sync immediately"}
{"code": "public void writeIntoMARYPTCfile(String ptcFileName) throws IOException {\n  PitchReaderWriter.write_pitch_file(ptcFileName,this.contour,(float)this.header.windowSizeInSeconds,(float)this.header.skipSizeInSeconds,this.header.fs);\n}\n", "nl": "write contour into a lf0 file in MARY PTC format"}
{"code": "public MessagesSetActivityQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.setActivity\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static <T>void addService(String url,Class<T> serviceInterface,T service) throws RpcException {\n  addService(url,serviceInterface,service,ServerConfig.DEFAULT_PORT);\n}\n", "nl": "add the service to pigeon and publish the service to registry"}
{"code": "@Override @Nullable public Object findTemplateSource(@NotNull String name) throws IOException {\n  File file=resolveName(name);\n  TemplateSource templateSource=TemplateSource.open(file);\n  pushTemplateFolder(file.getParentFile());\n  return templateSource;\n}\n", "nl": "This method is called directly from Freemarker"}
{"code": "public OrdersGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"orders.get\",Utils.buildParametrizedType(List.class,Order.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static List<Integer> convertToIntegerList(int[] array){\n  List<Integer> integers=new ArrayList<Integer>();\n  for (int i=0; i < array.length; i++) {\n    integers.add(array[i]);\n  }\n  return integers;\n}\n", "nl": "Convert int array to Integer list"}
{"code": "private boolean containsPhoneDescendants(List<Element> tokensAndBoundaries){\n  for (  Element element : tokensAndBoundaries) {\n    if (element.getTagName().equals(MaryXML.TOKEN) && element.getElementsByTagName(MaryXML.PHONE).getLength() > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Check if the List of Elements contains any TOKENS that have PHONE descendants"}
{"code": "public void actionPerformed(ActionEvent ev){\n  String[] methods=new String[]{ClassificationType.Taxonomy.toString(),\"SEED\",\"KEGG\"};\n  ClusterViewer viewer=getViewer();\n  String data=(String)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set Data\",\"Set Data\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),methods,viewer.getDataType());\n  if (data != null)   execute(\"set networkData=\" + data + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public final boolean hasIDConstraints(){\n  return fGlobalIDConstraintDecls.getLength() > 0;\n}\n", "nl": "get one identity constraint"}
{"code": "public void disconnect(){\n  socket.disconnect();\n}\n", "nl": "Disconnects from the telemetry service"}
{"code": "private void clearInvestigatedIssues(List<FailReferenceResource> issues){\n  issuesRepository.delete(issues);\n}\n", "nl": "Clear failReferences repository"}
{"code": "public DatabaseGetStreetsByIdQuery(VkApiClient client,UserActor actor,int... streetIds){\n  super(client,\"database.getStreetsById\",Utils.buildParametrizedType(List.class,Street.class));\n  accessToken(actor.getAccessToken());\n  streetIds(streetIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "default String individualEntityName(IRI individualIri){\n  return \"e\" + fromIri(individualIri);\n}\n", "nl": "Generate the name of a MM entity from the IRI of an OWL individual"}
{"code": "public ASBSetCursor queryASBSets(){\n  return mHelper.queryASBSets();\n}\n", "nl": "ARMOR SET BUILDER QUERIES"}
{"code": "public String missingMergeTipText(){\n  return \"Distribute counts for missing values. Counts are distributed \" + \"across other values in proportion to their frequency. Otherwise, \" + \"missing is treated as a separate value.\";\n}\n", "nl": "Returns the tip text for this property"}
{"code": "public void damageEntity(float x,float y,float damage){\n  for (  TexturedEntity entity : entities) {\n    if (entity instanceof LivingEntity && entity.getBounds().overlaps(new Rectangle(x,y,0,0))) {\n      ((LivingEntity)entity).damage(damage);\n      break;\n    }\n  }\n}\n", "nl": "Damages a single entity at the given position"}
{"code": "public static void addPosTag(soot.tagkit.Host host,int sc,int ec){\n  host.addTag(new soot.tagkit.SourcePositionTag(sc,ec));\n}\n", "nl": "Position Tag Adder"}
{"code": "public void decreaseCount(long decreaseCount){\n  if (decreaseCount < count) {\n    this.count=count - decreaseCount;\n  }\n}\n", "nl": "This method will decrease the current count"}
{"code": "@Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {\n  return synthesize(backchannelNumber,aft);\n}\n", "nl": "Re-synthesize given vocalization using MLSA (it is same as synthesize())"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=none;\");\n}\n", "nl": "action to be performed"}
{"code": "public Builder stepTitleTextColor(int stepTitleTextColor){\n  this.stepTitleTextColor=stepTitleTextColor;\n  return this;\n}\n", "nl": "Set the text color of the step title"}
{"code": "public Builder stepSubtitleTextColor(int stepSubtitleTextColor){\n  this.stepSubtitleTextColor=stepSubtitleTextColor;\n  return this;\n}\n", "nl": "Set the text color of the step subtitle"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getLength() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isColumnar(int colGroup){\n  return columnarStore[colGroup];\n}\n", "nl": "check if given column group is columnar"}
{"code": "public boolean mayAlias(Value val1,Value val2){\n  if (!AccessPath.canContainValue(val1) || !AccessPath.canContainValue(val2))   return false;\n  if (val1 instanceof Constant || val2 instanceof Constant)   return false;\n  if (val1 == val2)   return true;\n  if (aliasingStrategy.isInteractive())   return aliasingStrategy.mayAlias(new AccessPath(val1,false),new AccessPath(val2,false));\n  return false;\n}\n", "nl": "Gets whether two values may potentially point to the same runtime object"}
{"code": "public VideoGetAlbumByIdQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"video.getAlbumById\",VideoAlbumFull.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void write(DataOutput out) throws IOException {\n  WritableUtils.writeVInt(out,length);\n  out.write(bytes,0,length);\n}\n", "nl": "serialize write this object to out length uses zero-compressed encoding"}
{"code": "public boolean isSetHeartbeatInfo(){\n  return this.heartbeatInfo != null;\n}\n", "nl": "Returns true if field heartbeatInfo is set (has been assigned a value) and false otherwise"}
{"code": "public AsyncCatchOptions useSmartSelect(boolean smartSelect){\n  this.smartSelect=smartSelect;\n  return this;\n}\n", "nl": "Set whether or not to use adaptive ball selection"}
{"code": "public static String replaceString(String mainString,String oldString,String newString){\n  return StringUtil.replaceString(mainString,oldString,newString);\n}\n", "nl": "Replaces all occurances of oldString in mainString with newString"}
{"code": "@Override public void initialize(ConnectorContext ctx){\n}\n", "nl": "Initialise the connector"}
{"code": "public static void onPlayerLogout(Player player){\n  ChatServer.getInstance().sendPlayerLogout(player);\n}\n", "nl": "Disonnect from chat server"}
{"code": "private static void drawCustomSizeRect(int xPos,int yPos,int texX,int texY,int width,int height){\n  getGuiHandler().drawModalRectWithCustomSizedTexture(xPos,yPos,texX,texY,width,height,width,height);\n}\n", "nl": "Shortcut method for drawing a scaled textured rectangle"}
{"code": "public static void installToStorage(Context context){\n  mContext=context;\n  new Thread(runnable).start();\n}\n", "nl": "Copies the alarms to shared storage in a separate thread"}
{"code": "public int modify_file1(String appender_file_id,long file_offset,long modify_size,UploadCallback callback) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.modify_file(parts[0],parts[1],file_offset,modify_size,callback);\n}\n", "nl": "modify appender file to storage server (by callback)"}
{"code": "public boolean filterOut(final SAMRecord first,final SAMRecord second){\n  throw new UnsupportedOperationException(\"Paired *Filter not implemented!\");\n}\n", "nl": "Determines whether a pair of SAMRecord matches this filter"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void updateCurrentEdition(){\n  try {\n    getHistoryTableProvider().setRemoteResource((ISVNRemoteFile)SVNWorkspaceRoot.getBaseResourceFor(resource));\n  }\n catch (  TeamException e) {\n    handle(e);\n  }\n}\n", "nl": "sets the file for the historyTableProvider Used when file is changed (updated to a revision)"}
{"code": "public int size(){\n  return mails.size();\n}\n", "nl": "Current size of mailbox"}
{"code": "private void selectRow(int row){\n  spreadsheetView.getSelectionModel().select(row,spreadsheetView.getColumns().get(0));\n}\n", "nl": "select the given row"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public PhotosCreateAlbumQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "public String verifyTestItemDefinedIssueType(final String type,final Project.Configuration settings){\n  StatisticSubType defined=settings.getByLocator(type);\n  expect(settings.getByLocator(type),notNull()).verify(ISSUE_TYPE_NOT_FOUND,type);\n  return defined.getLocator();\n}\n", "nl": "Verifies that provided test item issue type is valid, and test item domain object could be processed correctly"}
{"code": "public void hold(int mask,int duration) throws InterruptedException {\n  controller.mousePress(mask);\n  if (duration >= 0) {\n    Thread.sleep(duration);\n    controller.mouseRelease(mask);\n  }\n}\n", "nl": "Hold mouse for certain duration"}
{"code": "Status readStatus(Element el){\n  NodeList list=el.getElementsByTagName(\"status\");\n  if (list == null || list.getLength() == 0)   return DomainSuffix.DEFAULT_STATUS;\n  return Status.valueOf(list.item(0).getFirstChild().getNodeValue());\n}\n", "nl": "read optional field status"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getDataType().equalsIgnoreCase(ClassificationType.Taxonomy.toString());\n}\n", "nl": "this is currently selected?"}
{"code": "public static void log(Object message){\n  Gdx.app.log(TAG,String.valueOf(message));\n}\n", "nl": "Logs a message to the console or logcat"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set networkData=\");\n  String dataType=np.getWordMatchesIgnoringCase(ClassificationType.Taxonomy + \" \" + ClassificationType.SEED+ \" \"+ ClassificationType.KEGG+ \" \"+ ClassificationType.COG);\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.setDataType(dataType);\n  viewer.updateDistances();\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static void verifyWhichActivityToSwitch(Context mContext,String source,String dest){\n  UserInfoActivity.start(mContext,dest);\n}\n", "nl": "to determine which activity we should switch to"}
{"code": "public A wrap(T instance){\n  return wrapper.apply(instance);\n}\n", "nl": "Wrap a real instance into an aliased instance"}
{"code": "public static void endFlight(AirMapFlight flight,@Nullable AirMapCallback<AirMapFlight> callback){\n  FlightService.endFlight(flight,callback);\n}\n", "nl": "End a flight belonging to the logged in pilot"}
{"code": "public static Map<String,Object> sendOrderBackorderNotification(DispatchContext ctx,Map<String,? extends Object> context){\n  return sendOrderNotificationScreen(ctx,context,\"PRDS_ODR_BACKORDER\");\n}\n", "nl": "Service to email a customer with order changes"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set networkdata=\" + ClassificationType.SEED + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public void configHandler(HandlerLoader handlerLoader){\n}\n", "nl": "Config handler"}
{"code": "public Map<K,V> pop(){\n  if (this.stackList.size() > 1) {\n    return stackList.remove(0);\n  }\n else {\n    return null;\n  }\n}\n", "nl": "Remove and returns the Map from the top of the stack; if there is only one Map on the stack it returns null and does not remove it"}
{"code": "public static LineString lineString(Point first,Point second,Point... morePoints){\n  Point[] points=new Point[2 + morePoints.length];\n  points[0]=Assert.argumentNotNull(first,\"first\");\n  points[1]=Assert.argumentNotNull(second,\"second\");\n  for (int i=0; i < morePoints.length; i++)   points[i + 2]=morePoints[i];\n  return lineString(points);\n}\n", "nl": "Creates a LineString instance from the specified points"}
{"code": "public MessagesGetLongPollHistoryQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "@Override public void channelDisconnected(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {\n  log.info(\"Channel disconnected IP: \" + inetAddress.getHostAddress());\n}\n", "nl": "Invoked when a Channel was disconnected from its remote peer"}
{"code": "public static double log2(double x){\n  return Math.log(x) / LOG2;\n}\n", "nl": "The base 2 logarithm of the input value"}
{"code": "public Call post(String url,Callback callback){\n  return post(url,null,callback);\n}\n", "nl": "Make a POST call with no params"}
{"code": "public static void disableLogging(){\n  DISABLED=true;\n}\n", "nl": "Disables logger, no logs will be passed to LogCat, all log methods will do nothing"}
{"code": "public MacroList(){\n  this.macrosses=new HashMap<Integer,String>(12);\n}\n", "nl": "Creates an empty macro list"}
{"code": "@Override public MeasureColumnDataChunk[] readMeasureChunks(FileHolder fileReader,int... blockIndexes){\n  MeasureColumnDataChunk[] datChunk=new MeasureColumnDataChunk[values.length];\n  for (int i=0; i < blockIndexes.length; i++) {\n    datChunk[blockIndexes[i]]=readMeasureChunk(fileReader,blockIndexes[i]);\n  }\n  return datChunk;\n}\n", "nl": "Method to read the blocks data based on block indexes"}
{"code": "@Override public int hashCode(){\n  return JsonNull.class.hashCode();\n}\n", "nl": "All instances of JsonNull have the same hash code since they are indistinguishable"}
{"code": "public PhotosGetByIdQuery(VkApiClient client,UserActor actor,List<String> photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photos(photos);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static Map<String,List<List<Distributable>>> nodeBlockTaskMapping(List<Distributable> blockInfos,int noOfNodesInput,int parallelism,List<String> activeNode){\n  Map<String,List<Distributable>> mapOfNodes=CarbonLoaderUtil.nodeBlockMapping(blockInfos,noOfNodesInput,activeNode);\n  int taskPerNode=parallelism / mapOfNodes.size();\n  int noOfTasksPerNode=taskPerNode == 0 ? 1 : taskPerNode;\n  return assignBlocksToTasksPerNode(mapOfNodes,noOfTasksPerNode);\n}\n", "nl": "This method will divide the blocks among the tasks of the nodes as per the data locality"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public OpenSpacesQueueObject newQueueTemplate(String queueName){\n  OpenSpacesQueueObject queueObject=isFifo() ? new OpenSpacesFifoQueueObject() : new OpenSpacesQueueObject();\n  queueObject.setPersistent(isPersistent());\n  queueObject.setEndpointURI(queueName);\n  return queueObject;\n}\n", "nl": "Creates a new template for querying the queue"}
{"code": "public GroupsGetBannedQuery fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "@NotNull public static byte[] rewriteClass(@NotNull byte[] classData,int layoutlibApi){\n  int current=getCurrentClassVersion();\n  return rewriteClass(classData,current,0,layoutlibApi);\n}\n", "nl": "Rewrites the given class to a version runnable on the current JDK"}
{"code": "@Override protected void onPreExecute(){\n  mCurrentDialog=IndeterminateProgressDialog.newInstance(R.string.wait_a_moment,false);\n  mCurrentDialog.show(getSupportFragmentManager(),WAIT_DIALOG_TAG);\n  findViewById(R.id.ok).setEnabled(false);\n}\n", "nl": "Updates the UI before trying the movement"}
{"code": "@Override public Attr createAttributeNS(String namespaceURI,String qualifiedName) throws DOMException {\n  return new PSVIAttrNSImpl(this,namespaceURI,qualifiedName);\n}\n", "nl": "Create an attribute with PSVI information"}
{"code": "public void executeLsPacket(Runnable pkt){\n  execute(pkt);\n}\n", "nl": "Executes a loginServer packet task"}
{"code": "protected void notifyScrollingListenersAboutEnd(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingFinished(this);\n  }\n}\n", "nl": "Notifies listeners about ending scrolling"}
{"code": "public static PathMapping create(Pattern pattern,Path path,Method method){\n  PathMapping e=new PathMapping();\n  e.pattern=pattern;\n  e.path=path;\n  e.method=method;\n  return e;\n}\n", "nl": "Creates the Pathmapping"}
{"code": "@Override public String toString(){\n  StringBuilder str=new StringBuilder();\n  str.append(\"xmin = \" + getXmin() + \" \\n\");\n  str.append(\"xmax = \" + getXmax() + \" \\n\");\n  str.append(\"text = \\\"\" + getText() + \"\\\" \\n\");\n  return str.toString();\n}\n", "nl": "string representation of interval, used for TextGrid output"}
{"code": "public LongFilePutter(File file,long limit) throws IOException {\n  this(file,limit,false);\n}\n", "nl": "constructs a long file putter using the given file and limit"}
{"code": "public void rightClick(int delay) throws InterruptedException {\n  click(InputEvent.BUTTON3_MASK,delay);\n}\n", "nl": "Right click with certain delay"}
{"code": "public void requestSetFailedNode(int nodeId){\n  enqueue(new ReplaceFailedNodeMessageClass().doRequest(nodeId));\n}\n", "nl": "Marks a node as failed"}
{"code": "public void establishRelation(AtomicQuery aq){\n  Atomic aqAtom=aq.getAtom();\n  if (atom.getTypeId().equals(aqAtom.getTypeId())) {\n    if (atom.isRelation() && aqAtom.getRoleVarTypeMap().size() > atom.getRoleVarTypeMap().size())     aq.addChild(this);\n else     this.addChild(aq);\n  }\n}\n", "nl": "establishes parent-child (if there is one) relation between this and aq query the relation expresses the relative level of specificity between queries with the parent being more specific"}
{"code": "public boolean isAnimate(){\n  return animate;\n}\n", "nl": "currently blinking?"}
{"code": "public WyporiumTradeCursor queryWyporiumTrades(){\n  return mHelper.queryWyporiumTrades();\n}\n", "nl": "WYPORIUM TRADE DATA QUERIES"}
{"code": "public void addClickingListener(OnWheelClickedListener listener){\n  clickingListeners.add(listener);\n}\n", "nl": "Adds wheel clicking listener"}
{"code": "protected MarketEditCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n", "nl": "Comment id"}
{"code": "public static String collapseNewlines(String str){\n  return collapseCharacter(str,'\\n');\n}\n", "nl": "Remove/collapse multiple newline characters"}
{"code": "public static int v(String tag,String msg,Throwable tr){\n  return isPrint && msg != null ? android.util.Log.v(tag,msg,tr) : -1;\n}\n", "nl": "Log with Throwable"}
{"code": "private void initData(Context context){\n  gestureDetector=new GestureDetector(context,gestureListener);\n  gestureDetector.setIsLongpressEnabled(false);\n  LABEL_OFFSET=DensityUtil.dip2px(context,LABEL_OFFSET_DIP);\n  scroller=new Scroller(context);\n}\n", "nl": "Initializes class data"}
{"code": "public void refreshSeekTo(int position){\n  handler.sendMessage(handler.obtainMessage(HANDLER_MESSAGE_REFRESH_LIST));\n  android.os.Message msg=handler.obtainMessage(HANDLER_MESSAGE_SEEK_TO);\n  msg.arg1=position;\n  handler.sendMessage(msg);\n}\n", "nl": "refresh and seek to the position"}
{"code": "public static String store(String name,InputStream in) throws IOException {\n  String id=id();\n  store(X.EMPTY,id,name,X.EMPTY,0,in.available(),in,-1,true,-1);\n  return id;\n}\n", "nl": "store the input stream to the repo, and return id"}
{"code": "@deprecated public static boolean isSingleField(String skeleton){\n  char first=skeleton.charAt(0);\n  for (int i=1; i < skeleton.length(); i++) {\n    if (skeleton.charAt(i) != first)     return false;\n  }\n  return true;\n}\n", "nl": "/*     "}
{"code": "private boolean containsPan(){\n  return component.containsGesture(HighLevelGesture.PAN_START) || component.containsGesture(HighLevelGesture.PAN_MOVE) || component.containsGesture(HighLevelGesture.PAN_END);\n}\n", "nl": "Tell whether component contains pan gesture"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapStatusAdvisoryRule && getId().equals(((AirMapStatusAdvisoryRule)o).getId());\n}\n", "nl": "Comparison based on ID"}
{"code": "public PhotosGetQueryWithExtended rev(Boolean value){\n  return unsafeParam(\"rev\",value);\n}\n", "nl": "Return photos in reverse chronological order"}
{"code": "public WallCreateCommentQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.createComment\",CreateCommentResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isExclusiveReadLockOperation(){\n  return ((_templateOperation == SpaceOperations.READ || _templateOperation == SpaceOperations.READ_IE) && ReadModifiers.isExclusiveReadLock(_operationModifiers) && getXidOriginatedTransaction() != null);\n}\n", "nl": "return indication if the template is exclusive read-lock operation"}
{"code": "public void actionPerformed(ActionEvent ev){\n  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),\"Choose label color\",null);\n  if (color != null)   execute(\"set labelColor=\" + color.getRed() + \" \"+ color.getGreen()+ \" \"+ color.getBlue()+ \";\");\n}\n", "nl": "action to be performed"}
{"code": "public static void fill(Matrix a,double value){\n  for (int i=0; i < a.rows; i++) {\n    for (int j=0; j < a.cols; j++) {\n      a.set(i,j,value);\n    }\n  }\n}\n", "nl": "Fills  matrix with value"}
{"code": "@Override public void onPaint(ViewTransform transform,Graphics2D g){\n  for (  Animation animation : mAnimations) {\n    animation.setProgress(getProgress());\n    animation.onPaint(transform,g);\n  }\n}\n", "nl": "Play the animations in our set"}
{"code": "public FaveGetPhotosQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getPhotos\",GetPhotosResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static final void emoteStartDancing4(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,19,0));\n}\n", "nl": "Npc starts dancing iu 4"}
{"code": "public static int weekNumber(Timestamp input){\n  return weekNumber(input,TimeZone.getDefault(),Locale.getDefault());\n}\n", "nl": "returns a week number in a year for a Timestamp input"}
{"code": "@Override public void write(PacketBuffer buf,Packet packet){\n  buf.writeInt(getID(packet.spec));\n}\n", "nl": "Writes the given packet to the buffer"}
{"code": "public static INDArray toArray(Collection<Writable> record){\n  return toArray(record,record.size());\n}\n", "nl": "Convert a record to an ndarray"}
{"code": "public void resetCircleColors(){\n  if (mCircleColors == null) {\n    mCircleColors=new ArrayList<>();\n  }\n  mCircleColors.clear();\n}\n", "nl": "resets the circle-colors array and creates a new one"}
{"code": "private void deactivateToggleSkill(){\n  PacketSendUtility.sendPacket((Player)effector,new SM_SKILL_ACTIVATION(getSkillId(),false));\n}\n", "nl": "Will deactivate toggle skill and stop checking task"}
{"code": "public boolean isStatusBarTintEnabled(){\n  return mStatusBarTintEnabled;\n}\n", "nl": "Is tinting enabled for the system status bar?"}
{"code": "public static void verifyPhoneToken(String token,@Nullable AirMapCallback<Void> callback){\n  PilotService.verifyToken(token,callback);\n}\n", "nl": "Verify that the text message the pilot received was the correct one"}
{"code": "public void createInFile(String filePath) throws IOException {\n  this.inFile=new ExifInterface(filePath);\n}\n", "nl": "The file before it is compressed"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set colorMismatchesVsReference=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public PanOptions build(){\n  PanOptions options=new PanOptions();\n  options.animate=this.animate;\n  options.duration=this.duration;\n  options.easeLinearity=this.easeLinearity;\n  options.noMoveStart=this.noMoveStart;\n  return options;\n}\n", "nl": "Builds the PanOptions new instance"}
{"code": "public static <S,T>Aggregate<S,Map<String,T>> select(ImmutableSet<NamedAggregate<? super S,? extends T>> aggregates){\n  return new SelectAggregate<>(aggregates);\n}\n", "nl": "An aggregate that combines several aggregates together into a map (where keys are the names of the aggregates)"}
{"code": "@Override public long limit(){\n  return fileLength >>> 2;\n}\n", "nl": "length of array (file length / 4)"}
{"code": "public String expandString(String original){\n  return FlexibleStringExpander.expandString(original,getBindings());\n}\n", "nl": "Expands environment variables delimited with ${}"}
{"code": "public AppsGetCatalogQuery filter(AppsGetCatalogFilter value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Set filter"}
{"code": "@RequestMapping(method=RequestMethod.POST,value=\"{clientVersion}/orgUnits/{id}/dataSets\") @ResponseBody public String saveDataSetValues(@PathVariable int id,@RequestBody DataSetValue dataSetValue) throws NotAllowedException {\n  facilityReportingService.saveDataSetValues(getUnit(id),dataSetValue);\n  return DATASET_REPORT_UPLOADED;\n}\n", "nl": "Save a facility report for unit"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public PhotosGetAllQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAll\",GetAllExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ReplicateLaterWindow fillDay(String date){\n  dateField.sendKeys(date);\n  return this;\n}\n", "nl": "Puts date in date field"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "@Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){\n  return cacheOnDisk(cacheOnDisk);\n}\n", "nl": "Sets whether loaded image will be cached on disk"}
{"code": "public void computeId2Data(int numberOfDatasets,Map<Integer,Integer[]> id2counts,Map<Integer,NodeData> id2data){\n  id2data.clear();\n  if (id2counts != null) {\n    if (ClassificationManager.isTaxonomy(getName()))     computeTaxonomyId2DataRec(numberOfDatasets,getRoot(),id2counts,id2data);\n else     computeId2DataRec(numberOfDatasets,getRoot(),id2counts,new HashMap<Integer,Set<Integer>>(),id2data);\n  }\n}\n", "nl": "computes the id2data map"}
{"code": "private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){\n  if (null == tableLockMap.get(absoluteTableIdentifier)) {\n    tableLockMap.put(absoluteTableIdentifier,new Object());\n  }\n}\n", "nl": "Method to add table level lock if lock is not present for the table"}
{"code": "public static TapTarget forBounds(Rect bounds,CharSequence title,@Nullable CharSequence description){\n  return new TapTarget(bounds,title,description);\n}\n", "nl": "Return a tap target for the specified bounds"}
{"code": "public Single<Void> writeUserInDatabase(final String _userId,final String _name){\n  User user=new User(_name);\n  DatabaseReference targetChild=this.firebaseDatabase.getReference().child(FIREBASE_CHILD_KEY_USERS).child(_userId);\n  return observeSingleValue(targetChild.setValue(user));\n}\n", "nl": "Allows to write a user in the database"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static <T>Iterable<T> Iterable(){\n  return null;\n}\n", "nl": "Return a new empty iterable"}
{"code": "public DocsSaveQuery(VkApiClient client,Actor actor,String file){\n  super(client,\"docs.save\",Doc.class);\n  accessToken(actor.getAccessToken());\n  file(file);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void putAll(Table<R,C,V> table){\n  for (  R rowKey : table.rowKeySet()) {\n    Map<C,V> row=table.row(rowKey);\n    for (    C columnKey : row.keySet()) {\n      put(rowKey,columnKey,row.get(columnKey));\n    }\n  }\n}\n", "nl": "put all values"}
{"code": "public boolean isSwipeEnable(){\n  return swipeEnable;\n}\n", "nl": "Open the swipe function of the Item?"}
{"code": "@Override protected void initToolbar(Bundle savedInstanceState){\n}\n", "nl": "Initialize the toolbar in the layout"}
{"code": "@Override public IAssignmentAlgorithm createAssignmentAlgorithm(){\n  return new AssignmentUsingLCA(cName);\n}\n", "nl": "creates an assignment algorithm"}
{"code": "protected boolean isXml(HttpServletRequest request){\n  String type=request.getContentType();\n  type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;\n  if (request.getPathInfo().endsWith(\".xml\")) {\n    type=MediaType.APPLICATION_XML_VALUE;\n  }\n  return isCompatibleWith(type,MediaType.APPLICATION_XML);\n}\n", "nl": "Are we receiving XML data?"}
{"code": "private boolean canLeave(Player activePlayer){\n  if (isBrigadeGeneral(activePlayer)) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_LEAVE_MASTER_CANT_LEAVE_BEFORE_CHANGE_MASTER);\n    return false;\n  }\n  return true;\n}\n", "nl": "This method checks all restrictions for leaving"}
{"code": "public Call post(String url,Map<String,String> params,Callback callback){\n  Request request=new Builder().url(url).post(bodyFromMap(params)).tag(url).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n", "nl": "Make a POST call with params"}
{"code": "public WallGetByIdQueryWithExtended(VkApiClient client,List<String> posts){\n  super(client,\"wall.getById\",GetByIdExtendedResponse.class);\n  posts(posts);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showGroups=\" + (!isSelected()) + \" style=convexHulls;\");\n}\n", "nl": "action to be performed"}
{"code": "public static boolean isArrowKey(KeyEvent e){\n  int code=e.getKeyCode();\n  return code >= KeyEvent.VK_LEFT && code <= KeyEvent.VK_DOWN;\n}\n", "nl": "Returns true if the specified key event maps to one of the 4 keyboard arrows (non-numeric keypad)"}
{"code": "public synchronized void cancelConflictingJobs(CopyJob newJob) throws IOException {\n  for (  CopyJob job : queue) {\n    if (job.conflicts(newJob)) {\n      node.message(\"top: now cancel existing conflicting job=\" + job + \" due to newJob=\"+ newJob);\n      job.cancel(\"conflicts with new job\",null);\n    }\n  }\n}\n", "nl": "Cancels any existing jobs that are copying the same file names as this one"}
{"code": "private void runPCoA(final PCoA pcoa) throws CanceledException {\n  ProgressListener progressListener=clusterViewer.getDir().getDocument().getProgressListener();\n  if (progressListener == null)   progressListener=new ProgressSilent();\n  pcoa.calculateClassicMDS(progressListener);\n}\n", "nl": "run the MDS code"}
{"code": "public void addService(AXmlNode node){\n  if (services.isEmpty())   services=new ArrayList<AXmlNode>();\n  services.add(node);\n}\n", "nl": "Adds a new service to the manifest"}
{"code": "@deprecated public static boolean isCanonical(String id){\n  return canonicalize(id).equals(id);\n}\n", "nl": "/*    "}
{"code": "public static FilteringEventBus buildFilteringEventBusOnMainLoop(EventDispatcher eventDispatcher){\n  FilteringEventBus b=new FilteringEventBus(new DelegatingEventDispatcher(eventDispatcher,mainLoopDispatcher));\n  b.start();\n  return b;\n}\n", "nl": "Builds an event bus with the given dispatcher that will function on the main loop"}
{"code": "public void addAssociation(int node,int endpoint){\n  if (isAssociated(node,endpoint)) {\n    return;\n  }\n  ZWaveAssociation newAssociation=new ZWaveAssociation(node,endpoint);\n  associations.add(newAssociation);\n}\n", "nl": "Adds an association node and endpoint"}
{"code": "protected LuaObject(LuaState L,String globalName){\nsynchronized (L) {\n    this.L=L;\n    L.getGlobal(globalName);\n    registerValue(-1);\n    L.pop(1);\n  }\n}\n", "nl": "Creates a reference to an object in the variable globalName"}
{"code": "@Override public Track apply(String name){\n  return new Track(name);\n}\n", "nl": "Makes a new track object"}
{"code": "private boolean isAlreadySetup(RetrieveAndRank service){\n  SolrClusters clusters=service.getSolrClusters().execute();\n  return clusters.getSolrClusters().size() > 0 ? true : false;\n}\n", "nl": "Makes a call to get the number of clusters, if it is > 0 then we assume the setup has already been done and we skip it"}
{"code": "public boolean contains(int index){\n  return index >= getFirst() && index <= getLast();\n}\n", "nl": "Tests whether item is contained by range"}
{"code": "@Override public boolean hasNext() throws IOException {\n  return positionInList < list.size();\n}\n", "nl": "is there more data?"}
{"code": "public void followRedirects(boolean followRedirects){\n  this.followRedirects=followRedirects;\n}\n", "nl": "Enables this request to follow redirect 3xx codes (default true)"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getReference() != null && viewer.getAlignment().getReference().getLength() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void noiseTexture(Framebuffer target){\n  copy(mNoiseTexture,target);\n}\n", "nl": "DEBUG method to check if noise texture is ok"}
{"code": "public static Bitmap drawableToBitmap(Drawable drawable){\n  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();\n}\n", "nl": "convert Drawable to Bitmap"}
{"code": "private void resetBlockletProcessingCount(){\n  blockletProcessingCount.set(0);\n}\n", "nl": "This method will reset the block processing count"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public ItemStack(final Material type){\n  this(type,1);\n}\n", "nl": "Defaults stack size to 1, with no extra data"}
{"code": "public boolean isSetSendTime(){\n  return __isset_bit_vector.get(__SENDTIME_ISSET_ID);\n}\n", "nl": "Returns true if field sendTime is set (has been assigned a value) and false otherwise"}
{"code": "public double featureCost(Target target,Unit unit,String featureName){\n  return featureCost(target,unit,featureName,featureDefinition,weightFunction);\n}\n", "nl": "Compute the goodness-of-fit between given unit and given target for a given feature"}
{"code": "public static void showBrand(Player player,int targetObjId,int brandId){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new ShowBrandEvent<PlayerAlliance>(alliance,targetObjId,brandId));\n  }\n}\n", "nl": "Show specific mark on top of player"}
{"code": "public AdsGetRejectionReasonQuery(VkApiClient client,UserActor actor,int accountId,int adId){\n  super(client,\"ads.getRejectionReason\",RejectReason.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  adId(adId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void remove(){\n}\n", "nl": "not implemented"}
{"code": "@ObjectiveCName(\"subscribe:\") public List subscribe(ListChangedListener listChangedListener){\n  return this.subscribe(listChangedListener,false);\n}\n", "nl": "Notifies the user whenever the list has changed"}
{"code": "static <T>AnyVal<Object> headAnyTail(T head,AnyVal<? extends List<? extends T>> tail){\n  return new AnyConsImpl(head,null,null,tail);\n}\n", "nl": "Return a new AnyVal that matches the given head of a list and any tail of a list"}
{"code": "public AccountGetActiveOffersQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getActiveOffers\",GetActiveOffersResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public JsonHttpResponseHandler(String encoding){\n  super(encoding);\n}\n", "nl": "Creates new JsonHttpRespnseHandler with given Json String encoding"}
{"code": "protected Udb82DatabaseType(){\n}\n", "nl": "Extendable Singleton"}
{"code": "public boolean canZoomInMoreY(){\n  return (mScaleY < mMaxScaleY);\n}\n", "nl": "Returns true if the chart is not yet fully zoomed in on the y-axis"}
{"code": "public AccountGetCountersQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getCounters\",AccountCounters.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public SimpleNotifyContainerConfigurer eventListenerAnnotation(Object eventListener){\n  AnnotationEventListenerAdapter annotationEventListenerAdapter=new AnnotationEventListenerAdapter();\n  annotationEventListenerAdapter.setDelegate(eventListener);\n  annotationEventListenerAdapter.afterPropertiesSet();\n  notifyEventListenerContainer.setEventListener(annotationEventListenerAdapter);\n  return this;\n}\n", "nl": "Sets an event listener that uses annotations"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0.0282475249,0.1129900996,0.252815347855,0.420605645761,0.584201186219,0.721621440204,0.824686630693,0.895359904171,0.940414116013,0.967446643119,0.982855183569,0.991259841996};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public PhotosGetQueryWithExtended photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n", "nl": "Return photo sizes in a special format"}
{"code": "protected VideoAddToAlbumQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Set owner id"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public static Bitmap scaleImage(Bitmap src,float scaleWidth,float scaleHeight){\n  if (src == null) {\n    return null;\n  }\n  Matrix matrix=new Matrix();\n  matrix.postScale(scaleWidth,scaleHeight);\n  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);\n}\n", "nl": "scale image"}
{"code": "public SimpleRegression(){\n  this(true);\n}\n", "nl": "Create an empty SimpleRegression instance"}
{"code": "@Override public boolean needParticipantsJoin() throws RemoteException {\n  return mgr.needParticipantsJoin();\n}\n", "nl": "returns true if this  the txn participants need to join it in contrary to a xtn which the participants are known prior to txn propagation"}
{"code": "public void stopScrolling(){\n  scroller.stopScrolling();\n}\n", "nl": "Stops scrolling"}
{"code": "private boolean isOwner(NamespaceBundle nsBundle){\n  if (pulsar != null) {\n    return pulsar.getNamespaceService().getOwnershipCache().getOwnedServiceUnit(nsBundle) != null;\n  }\n  return false;\n}\n", "nl": "checks if the local broker is the owner of the namespace bundle"}
{"code": "public static Map<String,Object> returnError(String errorMessage,List<? extends Object> errorMessageList){\n  return returnProblem(ModelService.RESPOND_ERROR,errorMessage,errorMessageList,null,null);\n}\n", "nl": "A small routine used all over to improve code efficiency, make a result map with the message and the error response code"}
{"code": "public static DataFrame normalize(DataFrame dataFrame,List<String> skipColumns){\n  return normalize(dataFrame,0,1,skipColumns);\n}\n", "nl": "Scale based on min,max"}
{"code": "public double quadraticMean(){\n  return NumericReduceUtils.quadraticMean.reduce(this);\n}\n", "nl": "Returns the quadraticMean, aka the root-mean-square, for all values in this column"}
{"code": "@Nullable public Boolean isFramed(){\n  if (myScaledImage == null) {\n    return null;\n  }\n  return myThumbnailHasFrame;\n}\n", "nl": "Does the current image have a device frame around it? Returns true, false, or null if no image computed yet"}
{"code": "public void addLanguage(Long languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n", "nl": "Adds a language limit to the query"}
{"code": "private void throwArrayIndexOutOfBoundsException(int itemIndex){\n  throw new ArrayIndexOutOfBoundsException(\"Your item index can't be 0 or greater than space item size,\" + \" your items size is \" + spaceItems.size() + \", your current index is :\"+ itemIndex);\n}\n", "nl": "Throw Array Index Out Of Bounds Exception"}
{"code": "public BoardEditTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId,String title){\n  super(client,\"board.editTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public FriendsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public byte[] encryptViaKek(byte[] content){\n  return cryptoViaKek(content,Cipher.ENCRYPT_MODE);\n}\n", "nl": "Use the KEK to encrypt a value usually the MWK"}
{"code": "public CSVRecordReader(int skipNumLines,String delimiter){\n  this.skipNumLines=skipNumLines;\n  this.delimiter=delimiter;\n}\n", "nl": "Skip lines and use delimiter"}
{"code": "public VideoCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n", "nl": "Post the comment from a community name (only if \"owner_id\" less than 0)"}
{"code": "public CMUTimeVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){\n  super(name,gender,age,description,locale,domain,organization,lexicon,database);\n}\n", "nl": "Creates a simple cluster unit voice"}
{"code": "public void rightClick(int x,int y) throws InterruptedException {\n  click(InputEvent.BUTTON3_MASK,x,y);\n}\n", "nl": "Right click mouse at a point"}
{"code": "public TapTarget descriptionTextColor(@ColorRes int color){\n  this.descriptionTextColor=color;\n  return this;\n}\n", "nl": "Specify the color resource for the description text"}
{"code": "public DocumentQuery addSort(Sort sort){\n  this.sorts.add(Objects.requireNonNull(sort,\"Sort is required\"));\n  return this;\n}\n", "nl": "Add the order how the result will returned"}
{"code": "@Deprecated public ItemStack(final int type,final int amount){\n  this(type,amount,(short)0);\n}\n", "nl": "An item stack with no extra data"}
{"code": "public boolean contains(int index){\n  return index >= getFirst() && index <= getLast();\n}\n", "nl": "Tests whether item is contained by range"}
{"code": "public void start(Context context,android.support.v4.app.Fragment fragment,int requestCode){\n  fragment.startActivityForResult(getIntent(context),requestCode);\n}\n", "nl": "Send the crop Intent with a custom request code"}
{"code": "public URLImageParser(Context context,TextView textView,String cookie,String referer){\n  this.context=context;\n  this.textView=textView;\n  this.cookie=cookie;\n  this.referer=referer;\n}\n", "nl": "Construct the URLImageParser which will execute AsyncTask and refresh the container"}
{"code": "private void openActivity(Class activityToOpen){\n  Intent intent=new Intent(this,activityToOpen);\n  startActivity(intent);\n}\n", "nl": "Open and activity"}
{"code": "private static Entry findLeaseFromIterator(Iterator<Entry> iter,Lease lease){\n  while (iter.hasNext()) {\n    Entry e=iter.next();\n    if (e.lease.equals(lease))     return e;\n  }\n  return null;\n}\n", "nl": "Find a lease entry, or null"}
{"code": "public static String formatSpelledOutAmount(double amount,Locale locale){\n  com.ibm.icu.text.NumberFormat nf=new com.ibm.icu.text.RuleBasedNumberFormat(locale,com.ibm.icu.text.RuleBasedNumberFormat.SPELLOUT);\n  return nf.format(amount);\n}\n", "nl": "Formats a double into a properly spelled out number string based on Locale"}
{"code": "public static Metrics create(Map<String,String> dimensionMap){\n  Map<String,String> map=Maps.newTreeMap();\n  map.putAll(dimensionMap);\n  return new Metrics(Collections.unmodifiableMap(map));\n}\n", "nl": "Creates a metrics object with the dimensions map immutable"}
{"code": "@RequestMapping(value=ClientUris.REGISTER,method=RequestMethod.GET) public Boolean register(@RequestParam(\"clientId\") String clientId,@RequestParam(\"appName\") String appName,@RequestParam(\"appKey\") String appKey,@RequestParam(\"clientPid\") Integer clientPid,HttpServletRequest req){\n  Response<Boolean> routeResp=clientService.registerClient(clientId,appName,appKey,req.getRemoteAddr(),clientPid);\n  if (!routeResp.isSuccess()) {\n    return Boolean.FALSE;\n  }\n  return Boolean.TRUE;\n}\n", "nl": "Register the client"}
{"code": "private void initUsingMainDB(String A) throws SQLException {\n  stmt.executeQuery(\"use \" + A);\n}\n", "nl": "init main DB"}
{"code": "public static void shutdown(){\n  if (mPool != null) {\n    mPool.shutdown();\n    mPool=null;\n  }\n}\n", "nl": "Shutdown thread pool"}
{"code": "public DirectedGraph(Node rootNode,FeatureDefinition featDef,Properties properties){\n  this.rootNode=rootNode;\n  this.featDef=featDef;\n  this.properties=properties;\n}\n", "nl": "Build a new graph with the given node as the root node"}
{"code": "public GroupByAggregator(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static void cleanup(){\n  Helper.delete(W.create().and(\"expired\",System.currentTimeMillis(),W.OP_LT),AuthToken.class);\n}\n", "nl": "cleanup the expired token"}
{"code": "public boolean isMenuPathEnabled(String... path){\n  boolean isEnabled=findActionMenuItem(path).isEnabled();\n  myRobot.pressAndReleaseKey(KeyEvent.VK_ESCAPE);\n  return isEnabled;\n}\n", "nl": "Returns whether a menu path is enabled"}
{"code": "public void addInitialSeeds(Unit unit,Set<Abstraction> seeds){\n  if (this.initialSeeds.containsKey(unit))   this.initialSeeds.get(unit).addAll(seeds);\n else   this.initialSeeds.put(unit,new HashSet<Abstraction>(seeds));\n}\n", "nl": "Adds the given initial seeds to the information flow problem"}
{"code": "void startTransaction(Transaction transaction,boolean resume){\n}\n", "nl": "Start new transaction on this session"}
{"code": "public static String dateToString(Date date){\n  return dateToString(date,SIMPLE_DATE_FORMAT);\n}\n", "nl": "Create a formatted date"}
{"code": "@Override public void put(long index,int value){\n  if (index + 1 >= limit)   limit=index + 1;\n  map.put(index,value);\n  if (!mustWriteOnClose)   mustWriteOnClose=true;\n}\n", "nl": "puts value for given index"}
{"code": "@Override public void releaseScan() throws SAException {\n}\n", "nl": "release SLHolder for this scan"}
{"code": "public ImageFixture withMaxDifference(double percent){\n  myMaxPercentDifference=percent;\n  return this;\n}\n", "nl": "Sets the maximum difference percentage (by default, 5%) in image comparisons"}
{"code": "public static boolean writeJson(JsonRootNode node,File file){\n  return FileUtility.writeToFile(new StringBuffer(JSONUtility.jsonToString(node)),file,false);\n}\n", "nl": "Write a JSON content into a file"}
{"code": "public GermanLexicon(String basename){\n  this(basename,true);\n}\n", "nl": "Creates the CMU Lexicon which is a binary lexicon"}
{"code": "@JsonIgnore public boolean isValid(){\n  if (this.msgRateIn > 0.0 && this.msgRateOut > 0.0 && this.bandwidthIn > 0.0 && this.bandwidthOut > 0.0 && this.memory > 0.0) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "Check if this is a valid quota definition"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  int taxId=((MainViewer)getViewer()).getSelectedIds().iterator().next();\n  String command=\"show histogram taxonId=\" + taxId + \";\";\n  execute(command);\n}\n", "nl": "action to be performed"}
{"code": "public Observable<Object> toMainThreadObserverable(LifecycleTransformer lifecycleTransformer){\n  return _bus.observeOn(AndroidSchedulers.mainThread()).compose(lifecycleTransformer);\n}\n", "nl": "designation use the MainThread, whatever the 'send' method use"}
{"code": "private synchronized void init(){\n  _identityMethodCache=Collections.synchronizedMap(new IdentityHashMap<IMethod,IMethod>());\n}\n", "nl": "init not serializable stub structures Flush to main memory once completed (must be called after _methodMapping is initialized)"}
{"code": "public static double tf(int count){\n  return count > 0 ? 1 + Math.log10(count) : 0;\n}\n", "nl": "Term frequency: 1+ log10(count)"}
{"code": "public void fireSyncToViewer(){\n  syncListener.syncList2Viewer(getEnabledLabels());\n}\n", "nl": "syncs the selection in this list to the viewer"}
{"code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public SpaceTypeDescriptorHolder(){\n  super();\n}\n", "nl": "Required for Externalizable"}
{"code": "public AudioAddAlbumQuery(VkApiClient client,UserActor actor,String title){\n  super(client,\"audio.addAlbum\",AddAlbumResponse.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void notifyFailed(Throwable exception) throws RuntimeException {\n  exec.shutdownNow();\n  LOGGER.error(exception);\n  throw new RuntimeException(exception);\n}\n", "nl": "Below method will be called if any thread fails during execution"}
{"code": "public PollsGetVotersQuery(VkApiClient client,UserActor actor,int pollId,int... answerIds){\n  super(client,\"polls.getVoters\",Utils.buildParametrizedType(List.class,Voters.class));\n  accessToken(actor.getAccessToken());\n  pollId(pollId);\n  answerIds(answerIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){\n  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;\n  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;\n  return this;\n}\n", "nl": "Sets options for memory cache"}
{"code": "public void toggleDividerVisibility(boolean show){\n  mStepDivider.setVisibility(show ? VISIBLE : GONE);\n}\n", "nl": "Changes the visibility of the horizontal line in the tab"}
{"code": "public boolean isEmpty(){\n  return state.equals(EMPTY);\n}\n", "nl": "Check if empty state is shown"}
{"code": "public void onDespawn(){\n}\n", "nl": "Properly despawn object"}
{"code": "@Override public void close(){\n}\n", "nl": "close the array"}
{"code": "public double calcAngle(Entry p1,Entry p2){\n  float dx=p2.getXIndex() - p1.getXIndex();\n  float dy=p2.getVal() - p1.getVal();\n  return Math.atan2(dy,dx) * 180.0 / Math.PI;\n}\n", "nl": "calculates the angle between two Entries (points) in the chart"}
{"code": "public Door(final TreeSpecies species,BlockFace face,boolean isOpen){\n  this(getWoodDoorOfSpecies(species),face,isOpen);\n}\n", "nl": "Constructs the bottom half of a wooden door of the given species, facing the specified direction and set to open or closed"}
{"code": "public AudioGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (fileName.startsWith(\"!!!\"))   return true;\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"BLASTX\");\n}\n", "nl": "is file acceptable?"}
{"code": "public AlreadySpawnedException(Throwable cause){\n  super(cause);\n}\n", "nl": "Creates new error"}
{"code": "public void delete(App app){\n  appDao.unIndex(app);\n  appDao.delete(app.getId());\n  configManager.deleteByAppId(app.getId());\n  configDao.unIndexByAppId(app.getId());\n  configDao.deleteBindOfApp(app.getId());\n}\n", "nl": "Delete the app"}
{"code": "private boolean gzipped(String contentEncoding){\n  return contentEncoding != null && contentEncoding.toLowerCase().contains(\"gzip\");\n}\n", "nl": "Is gzipped?"}
{"code": "public double reduce(String numericColumnName,NumericReduceFunction function){\n  Column column=column(numericColumnName);\n  return function.reduce(column.subset(rowMap).toDoubleArray());\n}\n", "nl": "Returns the result of applying the given function to the specified column"}
{"code": "public void removeViewModel(int key,Context context){\n  getFragment(context).remove(key);\n}\n", "nl": "Remove a ViewModel from the specified key"}
{"code": "public void onPause(){\n}\n", "nl": "Called when view is paused"}
{"code": "@deprecated public final void reset(String str,int start,int count){\n  char[] chars=null;\n  if (str != null) {\n    chars=str.toCharArray();\n  }\n  reset(chars,start,count);\n}\n", "nl": "/*    "}
{"code": "public AppsGetFriendsListQuery(VkApiClient client,UserActor actor){\n  super(client,\"apps.getFriendsList\",GetFriendsListResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static int spToPx(Context context,float spValue){\n  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;\n  return (int)(spValue * fontScale + 0.5f);\n}\n", "nl": "Convert SP to PX"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setVisible(false);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isDrawHighlightArrowEnabled(){\n  return mDrawHighlightArrow;\n}\n", "nl": "returns true if drawing the highlighting arrow is enabled, false if not"}
{"code": "public void addLanguage(Integer languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n", "nl": "Adds a language limit to the query"}
{"code": "public StatelessSection(int headerResourceId,int footerResourceId,int itemResourceId){\n  this(headerResourceId,itemResourceId);\n  this.footerResourceId=footerResourceId;\n  this.hasFooter=true;\n}\n", "nl": "Create a Section object with loading/failed states, a custom header and footer"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static void xml(String xml){\n  Logger.xml(xml);\n}\n", "nl": "Formats the json content and print it"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public MarketSearchQueryWithExtended tags(Integer... value){\n  return unsafeParam(\"tags\",value);\n}\n", "nl": "Comma-separated tag ids list"}
{"code": "public static void computeConstraints(ScoutWidget[] list){\n  ScoutProbabilities table=new ScoutProbabilities();\n  table.computeConstraints(list);\n  table.applyConstraints(list);\n}\n", "nl": "This calculates a constraint tables and applies them to the widgets TODO break up into creation of a constraint table and apply"}
{"code": "public Object putResource(Object key,Object value){\n  return (objectCache.put(key,value));\n}\n", "nl": "Return the resource for the specified key"}
{"code": "public PrivateStore(Player owner){\n  this.owner=owner;\n  this.items=new LinkedHashMap<Integer,TradePSItem>();\n}\n", "nl": "This method binds a player to the store and creates a list of items"}
{"code": "protected MarketAddToAlbumQuery albumIds(int... value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Collections ids to add  item to"}
{"code": "public AdsDeleteClientsQuery(VkApiClient client,UserActor actor,int accountId,String ids){\n  super(client,\"ads.deleteClients\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  ids(ids);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean containsGroup(String group){\n  return groups.contains(group);\n}\n", "nl": "Checks if a group features on this track"}
{"code": "public PollsEditQuery question(String value){\n  return unsafeParam(\"question\",value);\n}\n", "nl": "New question text"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public Future<?> scheduleRespawn(){\n  if (!getOwner().getSpawn().isNoRespawn()) {\n    return RespawnService.scheduleRespawnTask(getOwner());\n  }\n  return null;\n}\n", "nl": "Schedule respawn of npc In instances - no npc respawn"}
{"code": "@Override public void incrementAccessCount(){\n  accessCount.incrementAndGet();\n}\n", "nl": "This method will increment the access count for a column by 1 whenever a column is getting used in query or incremental data load"}
{"code": "public VideoGetAlbumsQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"video.getAlbums\",GetAlbumsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private ZKLogMetadataForWriter(URI uri,String logName,String logIdentifier,Versioned<byte[]> maxLSSNData,Versioned<byte[]> maxTxIdData,Versioned<byte[]> allocationData){\n  super(uri,logName,logIdentifier);\n  this.maxLSSNData=maxLSSNData;\n  this.maxTxIdData=maxTxIdData;\n  this.allocationData=allocationData;\n}\n", "nl": "metadata representation of a log"}
{"code": "private soot.Local createLocal(polyglot.types.LocalInstance localInst){\n  soot.Type sootType=Util.getSootType(localInst.type());\n  String name=localInst.name();\n  soot.Local sootLocal=createLocal(name,sootType);\n  localsMap.put(new polyglot.util.IdentityKey(localInst),sootLocal);\n  return sootLocal;\n}\n", "nl": "Local Creation"}
{"code": "public static Bitmap byteToBitmap(byte[] b){\n  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);\n}\n", "nl": "convert byte array to Bitmap"}
{"code": "public Pair<String,String> next(String firstWordInHeader){\n  while (hasNext()) {\n    Pair<String,String> pair=next();\n    if (Basic.getFirstWord(Basic.swallowLeadingGreaterSign(pair.get1())).equals(firstWordInHeader))     return pair;\n  }\n  return null;\n}\n", "nl": "gets the next fastA record for the given first word"}
{"code": "private synchronized int _activityCount(){\n  return m_activities.size();\n}\n", "nl": "Returns the number of scheduled activities"}
{"code": "public final boolean equals(Object obj){\n  return super.equals(obj);\n}\n", "nl": "Finalizes the equals method"}
{"code": "public static AlertDialog showOneButtonsDialog(final Activity activity,final String title,final String text,final String buttonText,final DialogInterface.OnClickListener buttonListener){\n  if (activity == null || activity.isFinishing()) {\n    return null;\n  }\n  return new AlertDialog.Builder(activity).setTitle(title).setMessage(text).setPositiveButton(buttonText,buttonListener).show();\n}\n", "nl": "Show an Alert Dialog with one button"}
{"code": "public boolean isSelected(final int position){\n  return getSelectedItems().contains(position);\n}\n", "nl": "Indicates if the item at position position is selected"}
{"code": "public static void dieSilently(AbstractAI ai2,Creature attacker){\n  ai2.getOwner().getController().onDie(attacker);\n}\n", "nl": "AI's owner will die from specified attacker"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set ignoreUnassigned=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setIgnoreNoHits(value);\n}\n", "nl": "parses the given command and executes it"}
{"code": "private void createRecordHolderQueue(File[] listFiles){\n  this.recordHolderHeap=new PriorityQueue<SortTempFileChunkHolder>(listFiles.length);\n}\n", "nl": "This method will be used to create the heap which will be used to hold the chunk of data"}
{"code": "@GlobalCallback(PlayerAllianceDisbandCallback.class) public static void disband(PlayerAlliance alliance){\n  Preconditions.checkState(alliance.onlineMembers() <= 1,\"Can't disband alliance with more than one online member\");\n  alliances.remove(alliance.getTeamId());\n  alliance.onEvent(new AllianceDisbandEvent(alliance));\n}\n", "nl": "Disband alliance after minimum of members has been reached"}
{"code": "private static boolean isAlpha(char p_char){\n  return ((p_char >= 'a' && p_char <= 'z') || (p_char >= 'A' && p_char <= 'Z'));\n}\n", "nl": "Determine whether a char is an alphabetic character: a-z or A-Z"}
{"code": "public void showLoading(List<Integer> skipIds){\n  switchState(LOADING,null,null,null,null,skipIds);\n}\n", "nl": "Hide content and show the progress bar"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"add file=\");\n  final String fileName=np.getAbsoluteFileName();\n  np.matchIgnoreCase(\";\");\n  Basic.checkFileReadableNonEmpty(fileName);\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.addFile(fileName);\n}\n", "nl": "parses the given command and executes it"}
{"code": "private void changeSelfIntro(Player activePlayer,String newSelfIntro){\n  if (legionRestrictions.canChangeSelfIntro(activePlayer,newSelfIntro)) {\n    LegionMember legionMember=activePlayer.getLegionMember();\n    legionMember.setSelfIntro(newSelfIntro);\n    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_UPDATE_SELF_INTRO(activePlayer.getObjectId(),newSelfIntro));\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_WRITE_INTRO_DONE);\n  }\n}\n", "nl": "This method will handle the changement of a self intro"}
{"code": "private float angle(TouchState s){\n  return (float)Math.toDegrees(Math.atan2(s.yDown - s.yCurrent,s.xDown - s.xCurrent));\n}\n", "nl": "Angle between the current touch coordinates and the down coordinates"}
{"code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.0115379817652,0.0415948507811,0.0665060119842,0.0919455953114,0.121472591024,0.000433630076361,0.00412780610309,0.00999340341045,0.0193246438937,0.0368460089216};\n}\n", "nl": "Creates the default probability density test expected values"}
{"code": "public void closeStream(){\n  CarbonUtil.closeStreams(stream);\n  executorService.shutdown();\n}\n", "nl": "Below method will be used to close streams"}
{"code": "public void showLoading(){\n  switchState(LOADING,null,null,null,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Hide content and show the progress bar"}
{"code": "public Hashtable batchGet(ObjectInfo objInfo,String[] keys,Map failKeys) throws MyException {\n  return this.batchGet(objInfo,keys,failKeys,ProtoCommon.FDHT_EXPIRES_NONE);\n}\n", "nl": "get multi keys"}
{"code": "public UsersGetFollowersQueryWithFields(VkApiClient client,List<UserField> fields){\n  super(client,\"users.getFollowers\",GetFollowersFieldsResponse.class);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AdsGetTargetingStatsQuery(VkApiClient client,UserActor actor,int accountId,String linkUrl){\n  super(client,\"ads.getTargetingStats\",TargStats.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  linkUrl(linkUrl);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public String toString(String charsetName) throws UnsupportedEncodingException {\n  return new String(this.get(),0,this.getCount(),charsetName);\n}\n", "nl": "Convert the byte buffer to a string an specific character encoding"}
{"code": "public static DistributedLogClientBuilder newBuilder(){\n  return new DistributedLogClientBuilder();\n}\n", "nl": "Create a client builder"}
{"code": "public HNMFeatureFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n", "nl": "Create a feature file reader from the given HNM feature file"}
{"code": "public static boolean putLong(Context context,String key,long value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putLong(key,value);\n  return editor.commit();\n}\n", "nl": "put long preferences"}
{"code": "LockHandle(LockManager lockManager,Transaction tx,Object key){\n  this.lockManager=lockManager;\n  this.tx=tx;\n  this.key=key;\n}\n", "nl": "Constructs a new Lock Handle"}
{"code": "public static String extendedTrim(String content){\n  return content.replaceAll(\"\\\\s+\",\" \").replace(\"\\n\",\" \").replace(\"\\r\",\" \").trim();\n}\n", "nl": "Removes extra spaces and trim the string"}
{"code": "public NGramCorrelationForm(){\n  initComponents();\n}\n", "nl": "Creates new form NGramCorrelationForm"}
{"code": "@Override public void addDictionaryChunk(List<byte[]> dictionaryChunk){\n  dictionaryChunks.add(dictionaryChunk);\n  if (null == dictionaryByteArrayToSurrogateKeyMap) {\n    createDictionaryByteArrayToSurrogateKeyMap(dictionaryChunk.size());\n  }\n  addDataToDictionaryMap();\n}\n", "nl": "This method will add a new dictionary chunk to existing list of dictionary chunks"}
{"code": "public Authentication(String email,String password){\n  this.email=email;\n  this.password=password;\n}\n", "nl": "Used for login"}
{"code": "public Builder insertAfter(String columnName){\n  this.insertAfter=columnName;\n  return this;\n}\n", "nl": "Where should the new columns be inserted? By default, they will be inserted after the source column"}
{"code": "public NewsfeedSearchQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.search\",SearchExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public int size(){\n  return size;\n}\n", "nl": "get size"}
{"code": "public void leftTrim(double second){\n  trim(second,0);\n}\n", "nl": "Trim the wave data from beginning"}
{"code": "private void prepareDataSet(){\n  dataSet1=Arrays.asList(new String[]{\"a\",\"b\"});\n  dataSet2=Arrays.asList(new String[]{\"c\",\"d\"});\n  dataSet3=Arrays.asList(new String[]{\"e\",\"f\"});\n}\n", "nl": "prepare the dataset required for running test cases"}
{"code": "public static void showString(String title,String content){\n  JTextArea area=new JTextArea(content);\n  area.setEditable(false);\n  JScrollPane scroll=new JScrollPane(area);\n  scroll.setPreferredSize(new Dimension(500,300));\n  JOptionPane.showMessageDialog(null,scroll,title,JOptionPane.INFORMATION_MESSAGE);\n}\n", "nl": "Display a string (can be long) inside a message dialogue"}
{"code": "public void push(){\n  Map<K,V> newMap=new HashMap<K,V>();\n  this.stackList.add(0,newMap);\n}\n", "nl": "Puts a new Map on the top of the stack"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public MarketGetQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n", "nl": "Number of items to return"}
{"code": "private void blackmanHarris4s(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.4;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.40217 - 0.49703 * Math.cos(twoPI * i / size) + 0.09392 * Math.cos(2 * twoPI * i / size) - 0.00183 * Math.cos(3 * twoPI * i / size));\n}\n", "nl": "Fill an array with the values of a 74-dB 4-sample Blackman-Harris window function"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public boolean isSetStatus(){\n  return __isset_bit_vector.get(__STATUS_ISSET_ID);\n}\n", "nl": "Returns true if field status is set (has been assigned a value) and false otherwise"}
{"code": "private void loadInstantUploadPath(){\n  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n  mUploadPath=appPrefs.getString(\"instant_upload_path\",getString(R.string.instant_upload_path));\n  mPrefInstantUploadPath.setSummary(mUploadPath);\n}\n", "nl": "Load upload path set on preferences"}
{"code": "public VideoGetCatalogQuery filters(VideoGetCatalogFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "List of requested catalog sections"}
{"code": "protected MarketGetAlbumsQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Identifier of an items owner community"}
{"code": "@deprecated public static boolean isSpace(int ch){\n  return (ch <= 32) && ((ch == 32) || (ch == 9) || (ch == 10)|| (ch == 12)|| (ch == 13));\n}\n", "nl": "/*     "}
{"code": "public boolean isApplicable(){\n  if (getViewer() instanceof ClusterViewer) {\n    final ClusterViewer clusterViewer=(ClusterViewer)getViewer();\n    return clusterViewer.isPCoATab() && clusterViewer.getGraphView().getSelectedNodes().size() >= 1;\n  }\n else   return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public CMUVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon){\n  super(name,gender,age,description,locale,domain,organization);\n  setLexicon(lexicon);\n}\n", "nl": "Creates a simple voice"}
{"code": "public DataFile(ModelDataFile modelDataFile){\n  this.modelDataFile=modelDataFile;\n}\n", "nl": "Construct a DataFile object setting the model, does not load it"}
{"code": "public AccountGetInfoQuery fields(AccountGetInfoField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void dismissLoadingDialog(){\n  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);\n  if (frag != null) {\n    LoadingDialog loading=(LoadingDialog)frag;\n    loading.dismissAllowingStateLoss();\n  }\n}\n", "nl": "Dismiss loading dialog"}
{"code": "public void addClickingListener(OnWheelClickedListener listener){\n  clickingListeners.add(listener);\n}\n", "nl": "Adds wheel clicking listener"}
{"code": "public byte[] generateNonceForEncapsulationMessage(){\n  return generateNonceBytes();\n}\n", "nl": "Generates a nonce that isn't stored anywhere"}
{"code": "public Scoop bind(Object obj,int toppingId,View view,@Nullable ColorAdapter colorAdapter){\n  return bind(obj,toppingId,view,colorAdapter,null);\n}\n", "nl": "Bind a view to a topping on a given object with a specified color adapter"}
{"code": "private void deleteLegionMemberFromDB(LegionMemberEx legionMember){\n  this.allCachedLegionMembers.remove(legionMember);\n  DAOManager.getDAO(LegionMemberDAO.class).deleteLegionMember(legionMember.getObjectId());\n  Legion legion=legionMember.getLegion();\n  legion.deleteLegionMember(legionMember.getObjectId());\n  addHistory(legion,legionMember.getName(),LegionHistoryType.KICK);\n}\n", "nl": "This method will remove the legion member from cache and the database"}
{"code": "private void writeLine(char[] chars,int start,int len) throws IOException {\n  if (beginningOfLine && len > 0) {\n    writeIndent();\n    beginningOfLine=false;\n  }\n  writer.write(chars,start,len);\n}\n", "nl": "Writes out a block of text that contains no newlines"}
{"code": "public static Object readObject(InputStream in) throws IOException, ClassNotFoundException {\n  ObjectInputStreamExt objIn=new ObjectInputStreamExt(in);\n  Object result=objIn.readObject();\n  return result;\n}\n", "nl": "read an object from an InputStream"}
{"code": "@Deprecated public Builder cacheOnDisc(){\n  return cacheOnDisk(true);\n}\n", "nl": "Loaded image will be cached on disk"}
{"code": "public static boolean isSectionExpanded(WebElement section){\n  boolean isExpanded=false;\n  if (!section.getAttribute(HtmlTags.Attributes.CLASS).contains(COLLAPSED_CLASS)) {\n    isExpanded=true;\n  }\n  return isExpanded;\n}\n", "nl": "Checks if section in sidekick is expanded based on section WebElement"}
{"code": "public WagonCARTReader(LeafNode.LeafType leafType){\n  this.leafType=leafType;\n}\n", "nl": "When creating a WagonCARTReader provide a tree type"}
{"code": "public State(String state){\n  if (state == null)   throw new NullPointerException(\"state is null\");\n  this.state=state.intern();\n}\n", "nl": "Construct a State"}
{"code": "private void updateMembersOfDisbandLegion(Legion legion,int unixTime){\n  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {\n    PacketSendUtility.sendPacket(onlineLegionMember,new SM_LEGION_UPDATE_MEMBER(onlineLegionMember,1300303,unixTime + \"\"));\n    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x06,unixTime));\n  }\n}\n", "nl": "This method will send a packet to every legion member and update them about the disband"}
{"code": "public ApiResult createKeys(){\n  String publicKey=\"APIK-\" + RandomStringUtils.randomAlphanumeric(27);\n  String privateKey=RandomStringUtils.randomAlphanumeric(32);\n  ApiResult apiResult=new ApiResult(-1,publicKey,privateKey,Values.EMPTYSTRING,Values.EMPTYSTRING);\n  this.api.saveApi(apiResult);\n  return apiResult;\n}\n", "nl": "Creates a public and private key with access to the API TODO allow creation of permissions for keys"}
{"code": "public Webster(int port,String roots,String bindAddress,int minThreads,int maxThreads) throws BindException {\n  this.port=port;\n  this.minThreads=minThreads;\n  this.maxThreads=maxThreads;\n  initialize(roots,bindAddress);\n}\n", "nl": "Create a new Webster"}
{"code": "protected PsiFile createPsiFile(String filePath,String... contentLines){\n  return getPsiFile(createFile(filePath,contentLines));\n}\n", "nl": "Creates a file with the specified contents and file path in the test project"}
{"code": "public void doUndo(){\n  if (undo.canUndo()) {\n    undo.undo();\n    parse();\n  }\n}\n", "nl": "Perform an undo action, if possible"}
{"code": "public void removeGroup(String group) throws ObjectLacksException {\n  assertContains(group);\n  groups.remove(group);\n}\n", "nl": "Removes a group from this track"}
{"code": "public static SecretKey generateBlowfishKey(){\n  return blowfishKeyGen.generateKey();\n}\n", "nl": "Generate and return blowfish key"}
{"code": "public AudioGetAlbumsQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getAlbums\",GetAlbumsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void init(){\n  calcMinMax();\n}\n", "nl": "performs all kinds of initialization calculations, such as minIndex-maxIndex and value count and sum"}
{"code": "public MediaFormat(){\n  mMap=new HashMap<String,Object>();\n}\n", "nl": "Creates an empty MediaFormat"}
{"code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n", "nl": "make a SAM line"}
{"code": "private static boolean isDigitOrPeriod(char ch){\n  return isDigit(ch) || ch == '.';\n}\n", "nl": "TODO: Javadoc"}
{"code": "public static <V,V1 extends V,V2 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2){\n  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2);\n}\n", "nl": "Create a map from passed nameX, valueX parameters"}
{"code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n", "nl": "Creates the default cumulative probability density test input values"}
{"code": "public void logMessage(MessageType type,String msg){\n  NotificationMessage<LogMessageParams> message=new NotificationMessage<>();\n  message.setMethod(LSPMethods.WINDOW_LOGMESSAGE.getMethod());\n  message.setParams(new LogMessageParams().withMessage(msg).withType(type.getType()));\n  send(message);\n}\n", "nl": "Sends the logMessage message back to the client as a notification"}
{"code": "@deprecated public static boolean isLeapYear(int year){\n  int x=(year * 12 + 17) % 19;\n  return x >= (x < 0 ? -7 : 12);\n}\n", "nl": "/*    "}
{"code": "public DocumentWordGraph(){\n  MinSize=1;\n  MaxSize=2;\n  CorrelationWindow=3;\n  InitGraphs();\n}\n", "nl": "Creates a new instance of DocumentWordGraph"}
{"code": "private void verifyOverrideRulesForConnectivity(){\n  if ((mConnectedLayout != 0 && mDisconnectedLayout == 0)) {\n    throw new RuntimeException(\"Error inflating custom connectivity layout. \" + \"Have you forgot to override the disconnected layout ?\");\n  }\n  if ((mConnectedLayout == 0 && mDisconnectedLayout != 0)) {\n    throw new RuntimeException(\"Error inflating custom connectivity layout. \" + \"Have you forgot to override the connected layout ?\");\n  }\n}\n", "nl": "Verify if both disconnected and connected layout have been overridden, otherwise throw an error"}
{"code": "public VignetteSubfilter(Context context,int alpha){\n  this.context=context;\n  this.alpha=alpha;\n}\n", "nl": "Initialise Vignette subfilter"}
{"code": "public ConfigDialog openDialog(){\n  select().clickOption(ToolbarOptions.CONFIGURE);\n  configDialog.verifyIsDisplayed();\n  return configDialog;\n}\n", "nl": "Method opens dialog to enable further configuration by single fields"}
{"code": "public boolean greaterOrEquals(PlatformLogicalVersion otherVersion){\n  return !lessThan(otherVersion);\n}\n", "nl": "Returns true if this logical version is greater or equals to the other ( >= )"}
{"code": "public void destroyView() throws CanceledException {\n  super.destroyView();\n}\n", "nl": "ask view to destroy itself"}
{"code": "private void BUFF_IdeScale(){\n  applyEffect(21744,getOwner());\n}\n", "nl": "Destroyer Kunax Skill's AI"}
{"code": "public void updateContactList(List<User> contactInfoList){\n  for (  User u : contactInfoList) {\n    contactList.put(u.getUsername(),u);\n  }\n  ArrayList<User> mList=new ArrayList<User>();\n  mList.addAll(contactList.values());\n  ((DemoHXSDKModel)getModel()).saveContactList(mList);\n}\n", "nl": "update User cach And db"}
{"code": "public boolean isEnabled(){\n  return false;\n}\n", "nl": "This method to be implemented by the extending class"}
{"code": "public int size(){\n  return this.get().length;\n}\n", "nl": "Returns the number of elements in the underlying array"}
{"code": "public WordEvaluatorAdapter(){\n}\n", "nl": "Creates a new instance of WordEvaluatorAdapter"}
{"code": "public GetEntryTypeDescriptorSpaceOperationResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public void execute(String command){\n  dir.execute(command,getCommandManager());\n}\n", "nl": "execute a command"}
{"code": "public String toString(){\n  return path.toString();\n}\n", "nl": "Returns the string representation of the object"}
{"code": "private int findInsertionIndex(final int key){\n  return findInsertionIndex(keys,states,key,mask);\n}\n", "nl": "Find the index at which a key should be inserted"}
{"code": "@Deprecated private boolean isDefinedAccent(String accentAttribute){\n  if (\"H*\".equals(accentAttribute))   return true;\n  if (\"L*\".equals(accentAttribute))   return true;\n  if (\"L*+H\".equals(accentAttribute))   return true;\n  if (\"L*+!H\".equals(accentAttribute))   return true;\n  if (\"L+H*\".equals(accentAttribute))   return true;\n  return \"!H*\".equals(accentAttribute);\n}\n", "nl": "To verify whether the 'accent' contour shape defined or not"}
{"code": "@SuppressWarnings(\"deprecation\") @Override public void onFailure(int statusCode,Header[] headers,byte[] binaryData,Throwable error){\n  onFailure(statusCode,error,null);\n}\n", "nl": "Fired when a request fails to complete, override to handle in your own code"}
{"code": "public void startFirstSampleTimer(){\n  timer.start(\"firstAudio\");\n  firstSample=true;\n  if (audioMetrics) {\n    timer.start(\"firstPlay\");\n    firstPlay=true;\n  }\n}\n", "nl": "Starts the first sample timer"}
{"code": "public SpectralSpellInteroperator(String sExecutable,String sInputFile,String[] sArgs){\n  this(sInputFile,sArgs);\n  SSpellExecutable=sExecutable;\n}\n", "nl": "Creates a new instance of SpectralSpellInteroperator"}
{"code": "public void selectAll(boolean select){\n  mainViewer.selectAllNodes(select);\n  mainViewer.repaint();\n}\n", "nl": "set select state of all objects"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  if (getViewer() instanceof GroupsViewer) {\n    GroupsViewer viewer=(GroupsViewer)getViewer();\n    viewer.getGroupsPanel().addNewGroup(-1);\n  }\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static void multiply(Matrix a,double b,Matrix result){\n  for (int i=0; i < a.rows; i++) {\n    for (int j=0; j < a.cols; j++) {\n      result.set(i,j,a.get(i,j) * b);\n    }\n  }\n}\n", "nl": "Multiply with scalar"}
{"code": "public void rightTrim(int numberOfSample){\n  trim(0,numberOfSample);\n}\n", "nl": "Trim the wave data from ending"}
{"code": "public AemSidekick clickComponentGroupToggle(String groupName){\n  final Map<String,WebElement> groupByNames=getGroupsByNames();\n  if (groupByNames.containsKey(groupName)) {\n    groupByNames.get(groupName).findElement(By.cssSelector(SECTION_TOGGLE_CSS)).click();\n  }\n  return this;\n}\n", "nl": "This method expands/collapses specified component group"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public MessagesGetHistoryAttachmentsQuery photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n", "nl": "Return photo sizes in a special format"}
{"code": "private void checkIsInitialized(){\n  Preconditions.checkNotNull(fileSystemDropExporterConfig,getClass().getSimpleName() + \" must be initialized first\");\n}\n", "nl": "Checks that the exporter has been initialized"}
{"code": "private void turnOnTracks(int trackCode){\n  for (int i=0; i < this.tracks.length; i++) {\n    if ((1 << i & trackCode) != 0) {\n      this.tracks[i].setLowAnim(TextureAnimationDrawer.trackAnim);\n    }\n  }\n}\n", "nl": "Sets the blink animation to all tracks that match trackCode"}
{"code": "public Builder cacheInMemory(boolean cacheInMemory){\n  this.cacheInMemory=cacheInMemory;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached in memory"}
{"code": "public void requestPermissions(int requestCode){\n}\n", "nl": "Called by the Plugin Manager when we need to actually request permissions"}
{"code": "public Entry copy(){\n  return new Entry(x,y,data);\n}\n", "nl": "returns an exact copy of the entry"}
{"code": "public void dismissLoadingDialog(){\n  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);\n  if (frag != null) {\n    Log_OC.d(TAG,\"dismiss loading dialog\");\n    LoadingDialog loading=(LoadingDialog)frag;\n    loading.dismissAllowingStateLoss();\n  }\n}\n", "nl": "Dismiss loading dialog"}
{"code": "protected void writeString(String s) throws IOException {\n  for (int i=0; i < s.length(); i++) {\n    out.write((byte)s.charAt(i));\n  }\n}\n", "nl": "Writes string to output stream"}
{"code": "public FaveGetVideosQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getVideos\",GetVideosResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private boolean isViewWasReused(){\n  String currentCacheKey=engine.getLoadingUriForView(imageAware);\n  return !memoryCacheKey.equals(currentCacheKey);\n}\n", "nl": "Checks whether memory cache key (image URI) for current ImageAware is actual"}
{"code": "protected void assertClose(RealMatrix m,RealMatrix n,double tolerance){\n  Assert.assertTrue(m.subtract(n).getNorm() < tolerance);\n}\n", "nl": "verifies that two matrices are close (1-norm)"}
{"code": "public VideoSaveQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "public void addToTemplateContext(String name,Object value){\n  if (templateContext == null) {\n    templateContext=FastMap.newInstance();\n  }\n  templateContext.put(name,value);\n}\n", "nl": "Adds an object to the FTL survey template context"}
{"code": "public void deactivate(){\n}\n", "nl": "this tab has been deselected"}
{"code": "public static boolean isValidAndroidPackageName(@NotNull String name){\n  return validateAndroidPackageName(name) == null;\n}\n", "nl": "Checks if the given name is a valid Android application package (which has additional requirements beyond a normal Java package)"}
{"code": "public void cancel(){\n  cancelButton.click();\n}\n", "nl": "Cancels the dialog"}
{"code": "public FriendsGetOnlineQuery order(FriendsGetOnlineOrder value){\n  return unsafeParam(\"order\",value);\n}\n", "nl": "Sort order"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.GOODALL_NORMALIZED);\n}\n", "nl": "this is currently selected?"}
{"code": "@Override public int compareTo(BrokerItem o){\n  return itemUniqueId > o.getItemUniqueId() ? 1 : -1;\n}\n", "nl": "Default sorting: using itemUniqueId"}
{"code": "public PolyArea(ZoneName zoneName,int worldId,Collection<Point2D> points,float zMin,float zMax){\n  this(zoneName,worldId,points.toArray(new Point2D[points.size()]),zMin,zMax);\n}\n", "nl": "Creates new area from given points"}
{"code": "void displayText(String text){\n  sdf=new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\");\n  dt=new Date();\n  textArea.appendText(sdf.format(dt) + \">>\" + text+ \"\\n\");\n}\n", "nl": "display the TXT on the textArea in the server"}
{"code": "@Override public String toString(){\n  return \"Flavor{\" + \"mName='\" + mName + '\\''+ \", mStyleResource=\"+ mStyleResource+ \", mDialogStyleResource=\"+ mDialogStyleResource+ \", mIsDayNight=\"+ mIsDayNight+ '}';\n}\n", "nl": "Base Methods"}
{"code": "private boolean lollipopAndAbove(){\n  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;\n}\n", "nl": "Checks if the device is running API greater than 21"}
{"code": "public KernelShutdownHook(){\n  super(\"KernelShutdownHook\");\n}\n", "nl": "Creates a new KernelShutdownHook"}
{"code": "public void resetLegionMember(){\n  setLegionMember(null);\n}\n", "nl": "Removes legion from player"}
{"code": "public static void createRMA6FileFromBLAST(String creator,String blastFile,BlastFileFormat format,String queryFile,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {\n  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,format,doc.getBlastMode(),new String[]{blastFile},new String[]{queryFile},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);\n  rma6Creator.parseFiles(progressListener);\n}\n", "nl": "create an RMA6 file from a BLAST file"}
{"code": "@Override public ListenableFuture<LeaseRevokeResponse> revoke(long leaseId){\n  LeaseRevokeRequest leaseRevokeRequest=LeaseRevokeRequest.newBuilder().setID(leaseId).build();\n  return this.leaseFutureStub.leaseRevoke(leaseRevokeRequest);\n}\n", "nl": "revoke one lease and the key bind to this lease will be removed"}
{"code": "public double cond(){\n  return s[0] / s[Math.min(m,n) - 1];\n}\n", "nl": "Two norm condition number"}
{"code": "public static String escape(String url,String encoding) throws UnsupportedEncodingException {\n  return escape(url,encoding,false);\n}\n", "nl": "escaped an url, and will not escape \"?\",\"=\" and escaped characters"}
{"code": "public static final void emoteStartReturning(Npc owner){\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));\n}\n", "nl": "Npc starts returning to spawn location"}
{"code": "public void oneShot(View emiter,int numParticles){\n  oneShot(emiter,numParticles,new LinearInterpolator());\n}\n", "nl": "Launches particles in one Shot"}
{"code": "public float length(){\n  return (float)waveHeader.getSubChunk2Size() / waveHeader.getByteRate();\n}\n", "nl": "Length of the wave in second"}
{"code": "public void removeAll(){\n  DotCacheAdministrator cache=CacheLocator.getCacheAdministrator();\n  cache.flushGroup(groupName);\n}\n", "nl": "Removes all items from the cache"}
{"code": "public GroupsGetMembersQuery(VkApiClient client){\n  super(client,\"groups.getMembers\",GetMembersResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public SecureSendNotificationQuery userIds(Integer... value){\n  return unsafeParam(\"user_ids\",value);\n}\n", "nl": "Set user ids"}
{"code": "@Override public void onConnectionCreated(Session session,Connection connection){\n  WritableMap payload=Arguments.createMap();\n  payload.putString(\"connectionId\",connection.getConnectionId());\n  payload.putString(\"creationTime\",connection.getCreationTime().toString());\n  payload.putString(\"data\",connection.getData());\n  sendEvent(Events.EVENT_CLIENT_CONNECTED,payload);\n}\n", "nl": "Connection listener"}
{"code": "public static void showShareDialog(Activity activity,SparseArray<ShareEntity> data,int requestCode){\n  showShareDialog(activity,ShareConstant.SHARE_CHANNEL_ALL,data,requestCode);\n}\n", "nl": "data is sparsearray"}
{"code": "public void unSubscribeTopic(String topicName){\n  if (PrefsHelper.hasFCMToken(mContext)) {\n    FirebaseMessaging.getInstance().unsubscribeFromTopic(topicName);\n  }\n}\n", "nl": "Unsucbsribe from topic"}
{"code": "@deprecated public void dump(){\n  this.fRData.dump();\n}\n", "nl": "/*     "}
{"code": "protected EventsEnvelope makeEventEnvelope(Assignment assignment,Event event){\n  return new EventsEnvelope(assignment,event,transactionFactory.newTransaction());\n}\n", "nl": "Helper method to instantiate events envelope"}
{"code": "public MailPreviewForm(){\n  initComponents();\n}\n", "nl": "Creates new form MailPreviewForm"}
{"code": "private void disconnectProducers(PersistentTopic persistentTopic){\n  List<CompletableFuture<Void>> futures=Lists.newArrayList();\n  ConcurrentOpenHashSet<Producer> producers=persistentTopic.getProducers();\n  producers.forEach(null);\n  FutureUtil.waitForAll(futures).thenRun(null).exceptionally(null);\n}\n", "nl": "Disconnect producers on given topic"}
{"code": "public void clear(){\n  n=0;\n  Arrays.fill(sums,0.0);\n  Arrays.fill(productsSums,0.0);\n}\n", "nl": "Clears the internal state of the Statistic"}
{"code": "public GroupsCreateQuery create(UserActor actor,String title){\n  return new GroupsCreateQuery(getClient(),actor,title);\n}\n", "nl": "Creates a new community"}
{"code": "private String createName(polyglot.ast.ProcedureDecl procedure){\n  return procedure.name();\n}\n", "nl": "Procedure Declaration Helper Methods creates procedure name"}
{"code": "private void compareDictionaryData(List<String> actual,List<String> expected){\n  assertTrue(expected.size() == actual.size());\n  for (int i=0; i < actual.size(); i++) {\n    assertTrue(actual.get(i).equals(expected.get(i)));\n  }\n}\n", "nl": "this method will validate the dictionary data"}
{"code": "public AddTypeIndexesRequestInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public final void debug(final Object o){\n  log(Level.DEBUG,o);\n}\n", "nl": "This method logs the DEBUG message"}
{"code": "public static int extractLowUnsignedNibble(int value){\n  return value & 0x0F;\n}\n", "nl": "Extracts the low unsigned 4-bit nibble from the least significant byte of the given value"}
{"code": "public NGramHistoDocument(){\n  Graph=new DocumentNGramGraph();\n  Histogram=new DocumentNGramHistogram();\n}\n", "nl": "Creates a new instance of NGramHistoDocument"}
{"code": "public ConditionParameterizedTest(String fieldName,Condition condition,String toFind){\n  this.condition=condition;\n  this.toFind=toFind;\n  this.fieldName=fieldName;\n}\n", "nl": "Parameters list"}
{"code": "public static void showSoftKeyboard(Activity activity){\n  showSoftKeyboard(activity,null);\n}\n", "nl": "Show soft keyboard"}
{"code": "public boolean isEmpty(){\n  return size() == 0;\n}\n", "nl": "Returns true if the list is empty"}
{"code": "public static <E>Type<E> valueOf(final Class<E> rawType,final java.lang.reflect.Type... actualTypeArguments){\n  if (rawType == null) {\n    return null;\n  }\n else {\n    return (Type<E>)intern((Class<E>)rawType,actualTypeArguments,new HashSet<java.lang.reflect.Type>());\n  }\n}\n", "nl": "Resolve the Type value of the given raw Class type, filling the type parameters with the provided actual type arguments"}
{"code": "public static void pickImage(Context context,android.support.v4.app.Fragment fragment,int requestCode){\n  try {\n    fragment.startActivityForResult(getImagePicker(),requestCode);\n  }\n catch (  ActivityNotFoundException e) {\n    showImagePickerError(context);\n  }\n}\n", "nl": "Pick image from a support library Fragment with a custom request code"}
{"code": "public IntFileGetterPagedMemory(File file) throws IOException {\n  this.file=file;\n  limit=file.length() / 4;\n  System.err.println(\"Opening file: \" + file);\n  raf=new RandomAccessFile(file,\"r\");\n  data=new int[(int)((limit >>> PAGE_BITS)) + 1][];\n  length0=(int)(Math.min(limit,1 << PAGE_BITS));\n}\n", "nl": "long file getter in memory"}
{"code": "public WallGetByIdQuery(VkApiClient client,UserActor actor,List<String> posts){\n  super(client,\"wall.getById\",Utils.buildParametrizedType(List.class,WallpostFull.class));\n  accessToken(actor.getAccessToken());\n  posts(posts);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void validateDictionaryMetadata(CarbonDictionaryColumnMetaChunk actual,CarbonDictionaryColumnMetaChunk expected){\n  assertTrue(expected.getMin_surrogate_key() == actual.getMin_surrogate_key());\n  assertTrue(expected.getMax_surrogate_key() == actual.getMax_surrogate_key());\n  assertTrue(expected.getStart_offset() == actual.getStart_offset());\n  assertTrue(expected.getEnd_offset() == actual.getEnd_offset());\n  assertTrue(expected.getChunk_count() == actual.getChunk_count());\n}\n", "nl": "this method will validate the dictionary chunk metadata"}
{"code": "public AudioSearchQuery lyrics(Boolean value){\n  return unsafeParam(\"lyrics\",value);\n}\n", "nl": "Return only audio files that have associated lyrics"}
{"code": "public Components(Map<String,ComponentDescription> descriptions){\n  this.descriptions=descriptions;\n}\n", "nl": "Constructs Components object"}
{"code": "public static void stopLocalZkServer(){\n  try {\n    stopLocalZkServer(true);\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Failed to stop ZK: \" + e);\n  }\n}\n", "nl": "Stops a local Zk instance, deleting its data directory"}
{"code": "public MarketCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n", "nl": "true - comment will be published on behalf of a community, false - on behalf of a user (by default)"}
{"code": "public UsersSearchQuery fromList(String... value){\n  return unsafeParam(\"from_list\",value);\n}\n", "nl": "Set from list"}
{"code": "public FaveAddGroupQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"fave.addGroup\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public CM_RESTORE_CHARACTER(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_RESTORE_CHARACTER </tt> packet"}
{"code": "public static void init(PresenterStorage storage){\n  mInstance=new PresenterFactory(storage);\n}\n", "nl": "Enter point of PresenterFactory"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showTriPlot=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  viewer.setVisible(false);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void addDeleted(boolean deleted){\n  query.append(\" +deleted:\" + deleted);\n}\n", "nl": "Adds +deleted to the query"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCache.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "public static Bitmap rotateImage(Bitmap source,float angle){\n  Bitmap retVal;\n  Matrix matrix=new Matrix();\n  matrix.postRotate(angle);\n  retVal=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),matrix,true);\n  return retVal;\n}\n", "nl": "Rotate the bitmap if the image is in landscape camera"}
{"code": "protected Set<D> computeCallFlowFunction(FlowFunction<D> callFlowFunction,D d1,D d2){\n  return callFlowFunction.computeTargets(d2);\n}\n", "nl": "Computes the call flow function for the given call-site abstraction"}
{"code": "private K lowestKey(){\n  FastConcurrentSkipListMap.Node<K,V> n=loNode();\n  if (isBeforeEnd(n))   return n.key;\n else   throw new NoSuchElementException();\n}\n", "nl": "Returns lowest absolute key (ignoring directonality)"}
{"code": "public WriteEntrySpaceOperationResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public Iterator iterator(){\n  return name2index.keySet().iterator();\n}\n", "nl": "gets an getLetterCodeIterator over all taxon names"}
{"code": "public ColumnQuery addCondition(ColumnCondition condition) throws NullPointerException {\n  this.conditions.add(Objects.requireNonNull(condition,\"condition is required\"));\n  return this;\n}\n", "nl": "Add a new condition in the query"}
{"code": "@NotNull public NlConfigurationToolbarFixture requireOrientation(@NotNull String name){\n  Wait.seconds(30).expecting(\"configuration to be updated\").until(null);\n  return this;\n}\n", "nl": "Requires the orientation name to be the given name (typically Portrait or Landscape)"}
{"code": "public int read() throws IOException {\n  return ins.read();\n}\n", "nl": "read byte"}
{"code": "protected void drawXAxis(Graphics2D gc){\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));\n  gc.setColor(Color.BLACK);\n  int x=5;\n  int y=getHeight() - bottomMargin + 25;\n  gc.drawString(getChartData().getClassesLabel(),x,y);\n}\n", "nl": "draw the x axis"}
{"code": "public PlayerLevelUpRewards(final LevelUpRewardsResponse response){\n  this.rewards=response.getItemsAwardedList();\n  this.unlockedItems=response.getItemsUnlockedList();\n  this.status=(rewards.isEmpty() ? Status.ALREADY_ACCEPTED : Status.NEW);\n}\n", "nl": "Create a new result object based on a server response"}
{"code": "public static BuildSystem defaultBuildSystem(){\n  return BuildSystemProvider.defaultBuildSystem().buildSystem();\n}\n", "nl": "The default build system"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public Response doGet(String url){\n  return doGet(url,null);\n}\n", "nl": "Does a HTTP GET with an empty body"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void putDouble(String key,double value){\n  checkForNullKey(key);\n  putString(key,String.valueOf(value));\n}\n", "nl": "Put double value into SharedPreferences with 'key' and save"}
{"code": "public FriendsGetMutualQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getMutual\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private static long calculateBrokerCapacity(ResourceQuota defaultQuota,double usableCPU,double usableMem,double usableBandwidthOut,double usableBandwidthIn){\n  double cpuCapacity=(usableCPU / cpuUsageByMsgRate) / (defaultQuota.getMsgRateIn() + defaultQuota.getMsgRateOut());\n  double memCapacity=usableMem / defaultQuota.getMemory();\n  double bandwidthOutCapacity=usableBandwidthOut / defaultQuota.getBandwidthOut();\n  double bandwidthInCapacity=usableBandwidthIn / defaultQuota.getBandwidthIn();\n  double capacity=Math.min(cpuCapacity,Math.min(memCapacity,Math.min(bandwidthOutCapacity,bandwidthInCapacity)));\n  return (long)Math.max(capacity,0);\n}\n", "nl": "Calculate how many bundles could be handle with the specified resources"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public void close(BaseServerPacket packet){\n  channel.write(packet).addListener(ChannelFutureListener.CLOSE);\n}\n", "nl": "Closes the channel but ensures that packet is send before close"}
{"code": "public void addOverlappingView(View view,int width,int height){\n  mFrameLayoutOverlappingViewContainer.addView(view,width,height);\n  mOverlappingViewsMap.put(view.getId(),view);\n}\n", "nl": "Add overlapping view and place it into overlapping container"}
{"code": "private JProperties(){\n}\n", "nl": "Don't let anyone instantiate this class"}
{"code": "public void addTableBlockInfoList(String task,List<TableBlockInfo> tableBlockInfoList){\n  taskBlockInfoMapping.put(task,tableBlockInfoList);\n}\n", "nl": "maps TableBlockInfoList to respective task"}
{"code": "public void delay(int duration) throws InterruptedException {\n  blockingWait(duration);\n}\n", "nl": "A short alias for blockingWait"}
{"code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void removeFirstEntry(){\n  this.announcementList.remove(this.announcementList.firstEntry().getKey());\n}\n", "nl": "This method removes the first entry"}
{"code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n", "nl": "check is3G"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public SimpleNotifyContainerConfigurer eventListenerMethod(Object eventListener,String methodName){\n  MethodEventListenerAdapter methodEventListenerAdapter=new MethodEventListenerAdapter();\n  methodEventListenerAdapter.setDelegate(eventListener);\n  methodEventListenerAdapter.setMethodName(methodName);\n  methodEventListenerAdapter.afterPropertiesSet();\n  notifyEventListenerContainer.setEventListener(methodEventListenerAdapter);\n  return this;\n}\n", "nl": "Sets an event listener that uses method name as an adapter"}
{"code": "public static int convertToColorInt(String a,String r,String g,String b,boolean useAlpha){\n  int alpha=useAlpha ? Integer.parseInt(a,16) : 0xff;\n  int red=Integer.parseInt(r,16);\n  int green=Integer.parseInt(g,16);\n  int blue=Integer.parseInt(b,16);\n  return Color.argb(useAlpha ? alpha : -1,red,green,blue);\n}\n", "nl": "Concerts a String color (#ff882465) to an int color"}
{"code": "public boolean isLegionMember(){\n  return legionMember != null;\n}\n", "nl": "Returns true if player is a legion member"}
{"code": "@deprecated public int compareTo(Region other){\n  return this.id.compareTo(other.id);\n}\n", "nl": "/*    "}
{"code": "private synchronized void addLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){\n  if (null == tableLockMap.get(absoluteTableIdentifier)) {\n    tableLockMap.put(absoluteTableIdentifier,new Object());\n  }\n}\n", "nl": "Below code is to add table lock map which will be used to add"}
{"code": "public static boolean isNetworkAvailable(Context mContext){\n  ConnectivityManager connectivityManager=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n  return connectivityManager.getActiveNetworkInfo() != null && connectivityManager.getActiveNetworkInfo().isConnectedOrConnecting();\n}\n", "nl": "Check Network availability"}
{"code": "public UsersGetNearbyQuery radius(UsersGetNearbyRadius value){\n  return unsafeParam(\"radius\",value);\n}\n", "nl": "Search zone radius type"}
{"code": "public <T,R>void sendToTarget(T message,R target){\n  sendToTargetOrType(message,target.getClass(),null);\n}\n", "nl": "send message to recipient directly"}
{"code": "public static UByte ubyte(long value) throws NumberFormatException {\n  return UByte.valueOf(value);\n}\n", "nl": "Create an <code>unsigned byte</code>"}
{"code": "public String toString(){\n  return \"JavaStreamingAudioPlayer\";\n}\n", "nl": "Returns the name of this audioplayer"}
{"code": "public Builder renameColumns(List<String> oldNames,List<String> newNames){\n  return transform(new RenameColumnsTransform(oldNames,newNames));\n}\n", "nl": "Rename multiple columns"}
{"code": "protected AccountBanUserQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "private boolean isViewWasReused(){\n  String currentCacheKey=engine.getLoadingUriForView(imageAware);\n  return !memoryCacheKey.equals(currentCacheKey);\n}\n", "nl": "Checks whether memory cache key (image URI) for current ImageAware is actual"}
{"code": "boolean hasPublishPermissions(){\n  return mHasPublishPermissions;\n}\n", "nl": "Return <code>True</code> if 'PUBLISH' permissions are defined"}
{"code": "public boolean isApplicable(){\n  ClassificationViewer viewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName(\"SEED\");\n  return viewer != null && viewer.hasComparableData();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public VideoReorderAlbumsQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"video.reorderAlbums\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public NewsfeedGetListsQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getLists\",GetListsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public INSECTFileRawDB(String sPrefix,String sBaseDir){\n  super(sPrefix,sBaseDir);\n}\n", "nl": "Creates a new instance of INSECTFileDB"}
{"code": "public Crop asSquare(){\n  cropIntent.putExtra(Extra.ASPECT_X,1);\n  cropIntent.putExtra(Extra.ASPECT_Y,1);\n  return this;\n}\n", "nl": "Crop area with fixed 1:1 aspect ratio"}
{"code": "private boolean trafficExpired(AirMapTraffic traffic){\n  int timeInterval=30;\n  return new Date(traffic.getIncomingTime().getTime() + timeInterval * 1000).before(new Date());\n}\n", "nl": "Checks if the traffic is older than the validity interval"}
{"code": "public void connect(List<StompHeader> _headers){\n  connect(_headers,false);\n}\n", "nl": "Connect without reconnect if connected"}
{"code": "public MatchBlockRMA2Formatter(String format){\n  this.format=format;\n  decode(format);\n}\n", "nl": "constructs an instance and sets to the given format"}
{"code": "private static String[] makeColumnNames(ColumnType types[]){\n  String[] header=new String[types.length];\n  for (int i=0; i < types.length; i++) {\n    header[i]=\"C\" + i;\n  }\n  return header;\n}\n", "nl": "Provides placeholder column names for when the file read has no header"}
{"code": "public static Settings init(String tag){\n  printer=new LoggerPrinter();\n  return printer.init(tag);\n}\n", "nl": "It is used to change the tag"}
{"code": "@deprecated public CompactCharArray(String indexArray,String valueArray){\n  this(Utility.RLEStringToCharArray(indexArray),Utility.RLEStringToCharArray(valueArray));\n}\n", "nl": "/*    "}
{"code": "public static void i(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  Log.i(tag,msg,throwable);\n}\n", "nl": "Send an INFO log message"}
{"code": "public static WxMenu fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxMenu.class);\n}\n", "nl": "json --> obj"}
{"code": "public Result(int event,Object value){\n  this.event=event;\n  this.value=value;\n}\n", "nl": "Create a new result"}
{"code": "@deprecated public String toRules(boolean escapeUnprintable){\n  return this.data.ruleSet.toRules(escapeUnprintable);\n}\n", "nl": "/*    "}
{"code": "public static int pxToSp(Context context,float pxValue){\n  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;\n  return (int)(pxValue / fontScale + 0.5f);\n}\n", "nl": "Convert PX to SP"}
{"code": "public _AidlLexer(java.io.Reader in){\n  this.zzReader=in;\n}\n", "nl": "Creates a new scanner"}
{"code": "@NotNull public static String listToString(@NotNull JListFixture list){\n  return listToString(list,0,Integer.MAX_VALUE,40);\n}\n", "nl": "Pretty-prints the given list fixture"}
{"code": "public static <T>T make(Class<T> shieldClass,RSHub rsHub){\n  return inst.make(shieldClass,rsHub,RSHub.class);\n}\n", "nl": "Helper static method to generate Shield Instances"}
{"code": "@Override public List<UserRole> searchUserRole(UserRole userRole){\n  return sessionTemplate.selectList(NAMESPACE + \".searchUserRole\",userRole);\n}\n", "nl": "Search user role mappings by params"}
{"code": "public GroupsGetCallbackServerSettingsQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.getCallbackServerSettings\",GetCallbackServerSettingsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void f(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_FATAL) {\n    return;\n  }\n  Log.wtf(tag,msg,throwable);\n}\n", "nl": "Send a FATAL ERROR log message"}
{"code": "public XIntArray(long size){\n  this((byte)(Math.min(30,1 + Math.max(10,(int)(Math.log(size) / Math.log(2))))));\n  int segment=(int)(size >>> SEGMENT_BITS);\n  grow(segment + 1);\n}\n", "nl": "constructs a new array of the given size"}
{"code": "public boolean containsSinkMethod(String sinkSignature){\n  return !findSinkByMethodSignature(sinkSignature).isEmpty();\n}\n", "nl": "Checks whether this result object contains a sink with the given method signature"}
{"code": "public void addOverlappingView(View view,int index,ViewGroup.LayoutParams params){\n  mFrameLayoutOverlappingViewContainer.addView(view,index,params);\n  mOverlappingViewsMap.put(view.getId(),view);\n}\n", "nl": "Add overlapping view and place it into overlapping container"}
{"code": "void replacingData(NodeImpl node){\n}\n", "nl": "A method to be called when a character data node is about to be replaced"}
{"code": "protected void notifyDataChangedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onChanged();\n    }\n  }\n}\n", "nl": "Notifies observers about data changing"}
{"code": "public AccountGetInfoQuery fields(List<AccountGetInfoField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public ThresholdValues(double lowThreshold,double highThreshold){\n  this.lowThreshold=lowThreshold;\n  this.currentLowThreshold=lowThreshold;\n  this.highThreshold=highThreshold;\n  this.currentHighThreshold=highThreshold;\n}\n", "nl": "Create a new ThresholdValues"}
{"code": "@Deprecated public Builder cacheOnDisc(){\n  return cacheOnDisk(true);\n}\n", "nl": "Loaded image will be cached on disk"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCache.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "public boolean addEquipmentId(final Long equipmentId){\n  if (equipmentId != null && equipmentId > 0) {\n    return equipmentIds.add(equipmentId);\n  }\n  return false;\n}\n", "nl": "Adds the equipment id as dependency to this tag"}
{"code": "public FloatColumn log1p(){\n  FloatColumn newColumn=FloatColumn.create(name() + \"[1og1p]\",size());\n  for (  float value : this) {\n    newColumn.add((float)Math.log1p(value));\n  }\n  return newColumn;\n}\n", "nl": "Returns the natural log of the values in this column, after adding 1 to each so that zero values don't return -Infinity"}
{"code": "private Stream<MultiTraversal> addRelatesPattern(String start,String casting,VarAdmin rolePlayer){\n  String other=rolePlayer.getName();\n  return Stream.of(MultiTraversal.create(Fragment.create(null,EDGE_BOUNDED,start,casting),Fragment.create(null,EDGE_UNBOUNDED,casting,start)),MultiTraversal.create(Fragment.create(null,EDGE_UNIQUE,casting,other),Fragment.create(null,EDGE_BOUNDED,other,casting)));\n}\n", "nl": "Add some patterns where this variable is a relation and the given variable is a roleplayer of that relation"}
{"code": "public void removeViewer(IDirectableViewer viewer){\n  viewers.remove(viewer);\n  directorListeners.remove(viewer);\n  ProjectManager.projectWindowChanged(this,viewer,false);\n  if (viewers.isEmpty())   ProjectManager.removeProject(this);\n}\n", "nl": "remove a viewer from this doc"}
{"code": "public static void checkCanceled(IProgressMonitor monitor){\n  if (monitor.isCanceled())   throw new OperationCanceledException();\n}\n", "nl": "Progress monitor helpers"}
{"code": "public static int[] transformIntArray(Integer[] source){\n  int[] destin=new int[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert Integer array to int array"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public PhotosGetByIdQuery(VkApiClient client,List<String> photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,Photo.class));\n  photos(photos);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void softRestart(){\n  if (mediaPlayer != null) {\n    resetPlayer();\n    prepare();\n  }\n}\n", "nl": "Restarts player in the soft way (didn't release all resurces and callbacks)"}
{"code": "public BoardGetTopicsQuery preview(BoardGetTopicsPreview value){\n  return unsafeParam(\"preview\",value);\n}\n", "nl": "Set preview"}
{"code": "private void updateStoreLocation(){\n  loadFolderLoc=CarbonDataProcessorUtil.getLocalDataFolderLocation(meta.getDatabaseName(),meta.getTableName(),meta.getTaskNo(),meta.getPartitionID(),meta.getSegmentId() + \"\",false);\n}\n", "nl": "Load Store location"}
{"code": "public static void initManager(Context context){\n  if (mInstance == null) {\n    mInstance=new AssetsDatabaseManager(context);\n  }\n}\n", "nl": "Initialize AssetsDatabaseManager"}
{"code": "@Override public boolean accept(File directory,String fileName){\n  if (fileName.startsWith(\"!!!\"))   return true;\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"BLASTP\");\n}\n", "nl": "is file acceptable?"}
{"code": "public void addHostAndIncludeSystemHost(String hostIdentifier){\n  query.append(\" +(conhost:SYSTEM_HOST conhost:\" + hostIdentifier + \")\");\n}\n", "nl": "Adds a host limit to the query (given host AND System HOST"}
{"code": "public LUDecomposition lu(){\n  return new LUDecomposition(this);\n}\n", "nl": "LU Decomposition"}
{"code": "public MarketEditAlbumQuery editAlbum(UserActor actor,int ownerId,int albumId,String title){\n  return new MarketEditAlbumQuery(getClient(),actor,ownerId,albumId,title);\n}\n", "nl": "Edits a collection of items"}
{"code": "public AppsGetCatalogQuery(VkApiClient client,UserActor actor,int count){\n  super(client,\"apps.getCatalog\",GetCatalogResponse.class);\n  accessToken(actor.getAccessToken());\n  count(count);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public DOMStringListImpl(ArrayList params){\n  fStrings=params;\n}\n", "nl": "Construct a DOMStringListImpl from an ArrayList"}
{"code": "public void scale(double scaleFactor){\n  for (  K key : keySet()) {\n    Counter<V> counts=getCounter(key);\n    counts.scale(scaleFactor);\n  }\n}\n", "nl": "Scale all entries in <code>CounterMap</code> by <code>scaleFactor</code>"}
{"code": "public boolean isApplicable(){\n  return getViewer() != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void createSite(){\n  creteSiteButton.click();\n}\n", "nl": "Confirms last step"}
{"code": "public static long retryInfinitelyLong(final Callable<Long> callable){\n  return longResponseRetryer.retryInfinitely(callable);\n}\n", "nl": "Long Response Retryer"}
{"code": "public static void disable(String event){\n  instance.disabled.add(event);\n  log(event + \" disabled\");\n}\n", "nl": "Disable event (if enabled)"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getNumberOfSequences() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected MsSqlDatabaseType(){\n}\n", "nl": "Extendable Singleton"}
{"code": "public InventoryException(){\n  super();\n}\n", "nl": "Creates a new instance of InventoryException"}
{"code": "public static long min(final long a,final long b){\n  return (a <= b) ? a : b;\n}\n", "nl": "Compute the minimum of two values"}
{"code": "public Builder stepNumberBackgroundColor(int stepNumberBackgroundColor){\n  this.stepNumberBackgroundColor=stepNumberBackgroundColor;\n  return this;\n}\n", "nl": "Set the background color of the left circles"}
{"code": "BitSetIterator(long[] bits){\n  this.bits=bits;\n  index=0;\n  while (index < bits.length && bits[index] == 0L)   index++;\n  if (index < bits.length)   save=bits[index];\n}\n", "nl": "Creates a new BitSetIterator"}
{"code": "public long readLong() throws IOException {\n  if (ins.read(bytes,0,8) < 8)   throw new IOException(\"buffer underflow\");\n  return (((long)bytes[0] & 0xFF)) | (((long)bytes[1] & 0xFF) << 8) | (((long)bytes[2] & 0xFF) << 16)| (((long)bytes[3] & 0xFF) << 24)| (((long)bytes[4] & 0xFF) << 32)| (((long)bytes[5] & 0xFF) << 40)| (((long)bytes[6] & 0xFF) << 48)| (((long)bytes[7] & 0xFF) << 56);\n}\n", "nl": "read long, little endian"}
{"code": "public boolean isBatchingAckTrackerEmpty(){\n  return batchMessageAckTracker.isEmpty();\n}\n", "nl": "helper method that returns current state of data structure used to track acks for batch messages"}
{"code": "public String[] upload_file(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_file(group_name,local_filename,file_ext_name,meta_list);\n}\n", "nl": "upload file to storage server (by file name)"}
{"code": "public static boolean canUseWarehouse(Player player){\n  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canUseWarehouse.ordinal()]) {\n    if (!restrictions.canUseWarehouse(player)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "nl": "Check whether player can use warehouse"}
{"code": "public void configPlugin(PluginLoader pluginLoader){\n}\n", "nl": "Config plugin"}
{"code": "private void drawShadows(Canvas canvas){\n  int height=(int)(3 * getItemHeight());\n  topShadow.setBounds(0,0,getWidth(),height);\n  topShadow.draw(canvas);\n  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());\n  bottomShadow.draw(canvas);\n}\n", "nl": "Draws shadows on top and bottom of control"}
{"code": "public float computeAlignmentBitScore(int rawScore){\n  return (float)((lambda * rawScore - lnK) / LN_2);\n}\n", "nl": "compute the bit score from a raw score"}
{"code": "public static void skipFields(@Nonnull DexReader reader,int count){\n  for (int i=0; i < count; i++) {\n    reader.skipUleb128();\n    reader.skipUleb128();\n  }\n}\n", "nl": "Skips the reader over the specified number of encoded_field structures"}
{"code": "public void add(Animation animation){\n  mAnimations.add(animation);\n}\n", "nl": "Add an animation to the AnimationSet"}
{"code": "public FriendsGetRequestsQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"friends.getRequests\",GetRequestsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void initializeWith(IntArrayList list,DictionaryMap map){\n  for (  int key : list) {\n    add(map.get(key));\n  }\n}\n", "nl": "Initializes this Column with the given values for performance"}
{"code": "public ClusterInfo(){\n}\n", "nl": "Constructs a new cluster info with null values on all the fields"}
{"code": "@Override public void endEffect(Effect effect){\n  Creature effected=effect.getEffected();\n  effected.getGameStats().endEffect(effect);\n}\n", "nl": "Will be called from effect controller when effect ends"}
{"code": "@Override public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static Optional<RefreshToken> create(RawAccessJwtToken token,String signingKey){\n  Jws<Claims> claims=token.parseClaims(signingKey);\n  List<String> scopes=claims.getBody().get(\"scopes\",List.class);\n  if (scopes == null || scopes.isEmpty() || !scopes.stream().filter(null).findFirst().isPresent()) {\n    return Optional.empty();\n  }\n  return Optional.of(new RefreshToken(claims));\n}\n", "nl": "Creates and validates Refresh token"}
{"code": "public PlacesGetCheckinsQuery(VkApiClient client,UserActor actor){\n  super(client,\"places.getCheckins\",GetCheckinsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void removeAttribute(String attribute){\n  if (table.columnKeySet().contains(attribute)) {\n    attributeOrder.remove(attribute);\n    attribute2type.keySet().remove(attribute);\n    table.removeColumn(attribute);\n  }\n}\n", "nl": "remove an attribute"}
{"code": "public void clear(){\n  _listeners.clear();\n}\n", "nl": "Remove all listeners"}
{"code": "public Schema build(){\n  return new Schema(this);\n}\n", "nl": "Create the Schema"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.isUseColors();\n}\n", "nl": "this is currently selected?"}
{"code": "public String addItemGroup(String groupName,String parentGroupNumber){\n  ShoppingCart.ShoppingCartItemGroup parentGroup=this.getItemGroupByNumber(parentGroupNumber);\n  ShoppingCart.ShoppingCartItemGroup newGroup=new ShoppingCart.ShoppingCartItemGroup(this.nextGroupNumber,groupName,parentGroup);\n  this.nextGroupNumber++;\n  this.itemGroupByNumberMap.put(newGroup.getGroupNumber(),newGroup);\n  return newGroup.getGroupNumber();\n}\n", "nl": "Creates a new Item Group and returns the groupNumber that represents it"}
{"code": "public static StorableHeadphoneFence unplugging(){\n  return new StorableHeadphoneFence(UNPLUGGING);\n}\n", "nl": "Creates a storable headphone fence which will be valid (during around 5seconds) when headphones unplugged from the device"}
{"code": "public static CommandResult execCommand(String command,boolean isRoot,String path){\n  return execCommand(new String[]{command},isRoot,true,path);\n}\n", "nl": "execute shell command, default return result msg"}
{"code": "public DriverConfiguration(final String propertyContext){\n  super();\n  properties=create(checkNotNull(propertyContext));\n}\n", "nl": "Create an instance bound to the property context"}
{"code": "public void onTaskStop(int taskId,String reason){\n  PlayerTransferTask task=this.tasks.remove(taskId);\n  task.status=PlayerTransferTask.STATUS_ERROR;\n  task.comment=reason;\n  this.dao.update(task);\n}\n", "nl": "When source server refuse to do transfer with reason"}
{"code": "@Override public final void writePos(final Point s){\n  writeShort(s.x);\n  writeShort(s.y);\n}\n", "nl": "Writes a 2D 4 byte position information"}
{"code": "public static boolean isNetworkAvailable(Context context){\n  ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n  if (null == manager)   return false;\n  NetworkInfo info=manager.getActiveNetworkInfo();\n  if (null == info || !info.isAvailable())   return false;\n  return true;\n}\n", "nl": "check NetworkAvailable"}
{"code": "public void addSample(String sample,int sampleSize,int srcId,BlastMode blastMode,Map<String,Map<Integer,Integer[]>> classification2class2counts){\n  getDataTable().addSample(sample,sampleSize,blastMode,srcId,classification2class2counts);\n}\n", "nl": "add named sample to given document"}
{"code": "public String toString(){\n  return \"CMUClusterUnitVoice\";\n}\n", "nl": "Converts this object to a string"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void blockingWait(int duration) throws InterruptedException {\n  Thread.sleep(duration);\n}\n", "nl": "Blocking wait the current action for an amount of time"}
{"code": "public BrightnessSubfilter(int brightness){\n  this.brightness=brightness;\n}\n", "nl": "Takes Brightness of the image"}
{"code": "public MessagesGetLongPollServerQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.getLongPollServer\",LongpollParams.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ComponentConfigBuilder addItemInFieldset(String fieldsetLabel,String itemType,String itemLabel,String value){\n  String type=String.format(\"fieldset#%s\",itemType);\n  String label=String.format(\"%s#%s\",fieldsetLabel,itemLabel);\n  config.add(new ConfigurationEntry(currentTab,type,label,value));\n  return this;\n}\n", "nl": "Adds fieldset entry, equivalent of: | tab_name | fieldset#itemType | multifieldLabel#itemLabel | value |"}
{"code": "@Deployment public void testWhitespaceInExpression(){\n  runtimeService.startProcessInstanceByKey(\"inclusiveWhiteSpaceInExpression\",CollectionUtil.singletonMap(\"input\",1));\n}\n", "nl": "Test for bug ACT-10: whitespaces/newlines in expressions lead to exceptions"}
{"code": "public int rank(){\n  return new SingularValueDecomposition(this).rank();\n}\n", "nl": "Matrix rank"}
{"code": "public ObjectName preRegister(MBeanServer mbs,ObjectName objName) throws Exception {\n  m_mbeanServer=mbs;\n  return objName;\n}\n", "nl": "Implements of MBeanRegistration interface"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean canPowerUp(){\n  return getCandy() >= getCandyCostsForPowerup() && api.getPlayerProfile().getCurrency(PlayerProfile.Currency.STARDUST) >= getStardustCostsForPowerup();\n}\n", "nl": "Check if can powers up this pokemon"}
{"code": "public PhotosGetAlbumsQuery needCovers(Boolean value){\n  return unsafeParam(\"need_covers\",value);\n}\n", "nl": "Return an additional \"thumb_src\" field"}
{"code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n", "nl": "check is3G"}
{"code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n", "nl": "Apply the size behaviour"}
{"code": "private void addRequiredLibs(StringBuilder classpath){\n  for (  File f : BootIOUtils.listFiles(new File(gsLibRequired))) {\n    if (f.getName().contains(XapModules.DATA_GRID.getJarFileName()) || f.getName().contains(XapModules.CORE_REFLECTIONS_ASM.getJarFileName())) {\n      continue;\n    }\n    classpath.append(f.getAbsolutePath()).append(File.pathSeparator);\n  }\n}\n", "nl": "add all jars under lib/required"}
{"code": "void executeQuery(){\n  queryExecutor.submit(null);\n}\n", "nl": "Execute the Graql query described in the given JSON request"}
{"code": "public void stop() throws ContainerException {\n  bsh=null;\n}\n", "nl": "Stop the container"}
{"code": "public static DmnRestUrlBuilder fromRequest(HttpServletRequest request){\n  return usingBaseUrl(ServletUriComponentsBuilder.fromServletMapping(request).build().toUriString());\n}\n", "nl": "Extracts the base URL from the request"}
{"code": "public static void removeNode(String url){\n  url2node.remove(url);\n}\n", "nl": "remove the node"}
{"code": "public PhotosDeleteAlbumQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"photos.deleteAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static String toTree(@NotNull List<NlComponent> roots,boolean includeIdentity){\n  StringBuilder sb=new StringBuilder(200);\n  for (  NlComponent root : roots) {\n    describe(sb,root,0,includeIdentity);\n  }\n  return sb.toString().trim();\n}\n", "nl": "Dumps out the component tree, recursively"}
{"code": "private static void deleteFilesByDirectory(File directory){\n  if (directory != null && directory.exists() && directory.isDirectory())   for (  File item : directory.listFiles())   item.delete();\n}\n", "nl": "Delete all files in given directory"}
{"code": "public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight){\n  final BitmapFactory.Options options=new BitmapFactory.Options();\n  options.inJustDecodeBounds=true;\n  BitmapFactory.decodeResource(res,resId,options);\n  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);\n  options.inJustDecodeBounds=false;\n  return BitmapFactory.decodeResource(res,resId,options);\n}\n", "nl": "Decode a given drawable resource with the specified dimensions"}
{"code": "public Builder cacheOnDisc(){\n  cacheOnDisc=true;\n  return this;\n}\n", "nl": "Loaded image will be cached on disc"}
{"code": "public WriteEntrySpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "private void compareSurrogateKeyData(List<String> data,Dictionary reverseDictionary){\n  int surrogateKey=0;\n  for (int i=0; i < data.size(); i++) {\n    surrogateKey++;\n    assertTrue(surrogateKey == reverseDictionary.getSurrogateKey(data.get(i)));\n  }\n}\n", "nl": "This method will compare the actual data with expected data"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public IntrospectorPropertyResolver(boolean includePublicFields){\n  super(includePublicFields);\n}\n", "nl": "Constructs a new IntrospectorPropertyResolver that processes transient fields (backward compatibility)"}
{"code": "public void onRespawn(){\n}\n", "nl": "Properly respawn object"}
{"code": "public void onProgress(int bytesWritten,int totalSize){\n}\n", "nl": "Fired when the request progress, override to handle in your own code"}
{"code": "protected MarketEditAlbumQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n", "nl": "Collection title"}
{"code": "public static boolean isNetworkAvailable(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();\n  return activeNetworkInfo != null && activeNetworkInfo.isConnected();\n}\n", "nl": "Check if there is an active network"}
{"code": "public AccountSaveProfileInfoQuery maidenName(String value){\n  return unsafeParam(\"maiden_name\",value);\n}\n", "nl": "User maiden name (female only)"}
{"code": "public static void saveSkinPath(Context context,String path){\n  SkinPreferencesUtils.putString(context,PREF_CUSTOM_SKIN_PATH,path);\n}\n", "nl": "save the skin's path"}
{"code": "public static <K,T,V>MultiDimensionalMap<K,T,V> newThreadSafeTreeBackedMap(){\n  return new MultiDimensionalMap<>(new ConcurrentSkipListMap<Pair<K,T>,V>());\n}\n", "nl": "Thread safe sorted map implementation"}
{"code": "public boolean isPinchZoomEnabled(){\n  return mPinchZoomEnabled;\n}\n", "nl": "returns true if pinch-zoom is enabled, false if not"}
{"code": "public static JsonRootNode readJSON(File file){\n  StringBuffer strings=FileUtility.readFromFile(file);\n  return jsonFromString(strings.toString());\n}\n", "nl": "Read a JSON file and return a JSON object"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  action.actionPerformed(ev);\n}\n", "nl": "action to be performed"}
{"code": "public void clearMemoryCache(){\n  checkConfiguration();\n  configuration.memoryCache.clear();\n}\n", "nl": "Clears memory cache"}
{"code": "public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static StorableTimeFence inSundayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(SUNDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid on Sunday in the given daily time frame"}
{"code": "public static RespJson buildFailureResponse(String errorMsg){\n  RespJson respJson=new RespJson();\n  respJson.setCode(ResponseCode.FAILURE.getCode());\n  respJson.setMsg(errorMsg);\n  return respJson;\n}\n", "nl": "Construct Failure Response"}
{"code": "public RecordMergeStrategyException(){\n  this(null);\n}\n", "nl": "Use when you don't need any merge conflict data"}
{"code": "public void onSuccess(int statusCode,byte[] binaryData){\n  onSuccess(binaryData);\n}\n", "nl": "Fired when a request returns successfully, override to handle in your own code"}
{"code": "public static boolean isEmpty(String string){\n  if (null == string)   return true;\n  return string.equals(EMPTY);\n}\n", "nl": "Check if the given string is empty or null"}
{"code": "public UsersGetFollowersQueryWithFields(VkApiClient client,UserField... fields){\n  super(client,\"users.getFollowers\",GetFollowersFieldsResponse.class);\n  fields(fields);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isMemorySpace(){\n  return _isMemorySA;\n}\n", "nl": "is this space a memory space ?"}
{"code": "public ImageResizer(Context context,int imageWidth,int imageHeight){\n  super(context);\n  setImageSize(imageWidth,imageHeight);\n}\n", "nl": "Initialize providing a single target image size (used for both width and height);"}
{"code": "public void discardP2Set(){\n  p2set=null;\n}\n", "nl": "Delete current points-to set and make a new one"}
{"code": "public void showMetrics(){\n}\n", "nl": "Shows metrics for this audio player"}
{"code": "public GroupsReorderLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){\n  super(client,\"groups.reorderLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  linkId(linkId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void remove(String sid){\n  String id=\"//captcha/\" + sid;\n  Cache.remove(id);\n}\n", "nl": "remove the captcha code for sid"}
{"code": "public AccountRegisterDeviceQuery deviceYear(Integer value){\n  return unsafeParam(\"device_year\",value);\n}\n", "nl": "Set device year"}
{"code": "public AccountLookupContactsQuery fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public void zoomToFit(){\n  graphView.fitGraphToWindow();\n}\n", "nl": "zoom to fit"}
{"code": "public AccountSetInfoQuery name(String value){\n  return unsafeParam(\"name\",value);\n}\n", "nl": "Set name"}
{"code": "public AbstractInfoflow(){\n  this(null);\n}\n", "nl": "Creates a new instance of the abstract info flow problem"}
{"code": "public void registerListener(Condition condition,int cPriority,EventListener listener,int lPriority){\n  getListenerForCondition(condition,cPriority).registerListener(listener,lPriority);\n}\n", "nl": "Registers a listener for a particular condition with a given priority for the condition listener and the final listener"}
{"code": "public MessagesDeleteQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public AnnotElemValPair(String name,char kind,AnnotationAttr attr){\n  super(name,kind);\n  this.attr=attr;\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "public GameTime plus(GameTime gt){\n  return new GameTime(this.getTime() + gt.getTime());\n}\n", "nl": "Add the given game time to this game time"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void showInformation(String message,long milliseconds){\n  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,milliseconds);\n}\n", "nl": "show an information notation"}
{"code": "public InvalidPluginException(final String message){\n  super(message);\n}\n", "nl": "Constructs a new InvalidPluginException with the specified detail message"}
{"code": "public void rightClick(){\n  myRobot.click(mySurface,getMidPoint(),MouseButton.RIGHT_BUTTON,1);\n  myRobot.waitForIdle();\n}\n", "nl": "Right clicks s in the middle of the view"}
{"code": "public MarketAddToAlbumQuery addToAlbum(UserActor actor,int ownerId,int itemId,int... albumIds){\n  return new MarketAddToAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);\n}\n", "nl": "Adds an item to one or multiple collections"}
{"code": "@Nullable public static NlComponent findComponent(@NotNull ScreenView view,@SwingCoordinate int swingX,@SwingCoordinate int swingY){\n  return view.getModel().findLeafAt(getAndroidX(view,swingX),getAndroidY(view,swingY),false);\n}\n", "nl": "Returns the component at the given (x,y) coordinate in the Swing coordinate system"}
{"code": "public void resetCount(){\n  progress=0;\n  setText(\"0%\");\n  invalidate();\n}\n", "nl": "Reset the count (in increment mode)"}
{"code": "public EntityQuery(Delegator delegator){\n  this.delegator=delegator;\n}\n", "nl": "Construct an EntityQuery object for use against the specified Delegator"}
{"code": "public int findAll(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,true);\n}\n", "nl": "Selects all occurrences of text in document, subject to options and constraints of document type"}
{"code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "public RemoteVideoInfo(String title,int durationMillis,PlayerState state,int currentTimeMillis,String errorMessage){\n  this.title=title;\n  this.durationMillis=durationMillis;\n  this.state=state;\n  this.currentTimeMillis=currentTimeMillis;\n  this.errorMessage=errorMessage;\n}\n", "nl": "Create a new RemoteVideoInfo"}
{"code": "public ReadTakeEntrySpaceOperationResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public AuthConfirmQuery testMode(Boolean value){\n  return unsafeParam(\"test_mode\",value);\n}\n", "nl": "Set test mode"}
{"code": "public AccountUnregisterDeviceQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.unregisterDevice\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void trim(double leftTrimSecond,double rightTrimSecond){\n  int sampleRate=waveHeader.getSampleRate();\n  int bitsPerSample=waveHeader.getBitsPerSample();\n  int channels=waveHeader.getChannels();\n  int leftTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * leftTrimSecond);\n  int rightTrimNumberOfSample=(int)(sampleRate * bitsPerSample / 8 * channels * rightTrimSecond);\n  trim(leftTrimNumberOfSample,rightTrimNumberOfSample);\n}\n", "nl": "Trim the wave data"}
{"code": "public void show(){\n  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();\n  lp.height=LayoutParams.WRAP_CONTENT;\n  mContentView.setLayoutParams(lp);\n}\n", "nl": "show footer"}
{"code": "public UsersGetSubscriptionsQueryWithExtended(VkApiClient client){\n  super(client,\"users.getSubscriptions\",GetSubscriptionsExtendedResponse.class);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public double max(){\n  return m_max;\n}\n", "nl": "Get upper end of histogram range"}
{"code": "public CommandManagerFX(IDirector dir,Object viewer,String[] commandsPaths){\n  this(dir,viewer,commandsPaths,false);\n}\n", "nl": "construct a parser and load all commands found for the given paths"}
{"code": "public static boolean isMetaTempo(MidiMessage midiMsg){\n  if (midiMsg.getLength() != 6 || midiMsg.getStatus() != MetaMessage.META) {\n    return false;\n  }\n  byte[] msg=midiMsg.getMessage();\n  return ((msg[1] & 0xFF) == META_TEMPO_TYPE) && (msg[2] == 3);\n}\n", "nl": "return if the given message is a meta tempo message"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static WxMaterialCountResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxMaterialCountResult.class);\n}\n", "nl": "json --> obj"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  final ClusterViewer viewer=getViewer();\n  viewer.updateGraph();\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isDomainSuffix(String extension){\n  return domains.containsKey(extension);\n}\n", "nl": "return whether the extension is a registered domain entry"}
{"code": "public static int locToBlock(double loc){\n  return NumberConversions.floor(loc);\n}\n", "nl": "Safely converts a double (location coordinate) to an int (block coordinate)"}
{"code": "public static boolean writeFile(String filePath,InputStream stream){\n  return writeFile(filePath,stream,false);\n}\n", "nl": "write file, the bytes will be written to the begin of the file"}
{"code": "public MarketAddQuery photoIds(List<Integer> value){\n  return unsafeParam(\"photo_ids\",value);\n}\n", "nl": "Ids of additional photos"}
{"code": "public Vec2d(double x,double y){\n  set(x,y);\n}\n", "nl": "Construct instance with (x, y) values set to passed parameters"}
{"code": "protected void notifyChangingListeners(int oldValue,int newValue){\n  for (  OnWheelChangedListener listener : changingListeners) {\n    listener.onChanged(this,oldValue,newValue);\n  }\n}\n", "nl": "Notifies changing listeners"}
{"code": "public Sample(){\n  initComponents();\n}\n", "nl": "Creates new form Sample"}
{"code": "@deprecated public LanguageMatcherData addDistance(String desired,String supported,int percent,boolean oneway){\n  return addDistance(desired,supported,percent,oneway,null);\n}\n", "nl": "/*    "}
{"code": "public VirtualEntryIntrospector(){\n  throw new IllegalStateException(\"This constructor is required for Externalizable and should not be called directly.\");\n}\n", "nl": "Required for Externalizable"}
{"code": "private void drawShadows(Canvas canvas){\n  int height=(int)(3 * getItemHeight());\n  topShadow.setBounds(0,0,getWidth(),height);\n  topShadow.draw(canvas);\n  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());\n  bottomShadow.draw(canvas);\n}\n", "nl": "Draws shadows on top and bottom of control"}
{"code": "public AdsGetFloodStatsQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getFloodStats\",FloodStats.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public String addUser(String user,String password,boolean isAdmin){\n  ResponseEntity<String> response=restTemplate.exchange(url + RMAControllerMappings.ADD_USER_MAPPING + \"userName=\"+ user+ \"&password=\"+ password+ \"&isAdmin=\"+ isAdmin,HttpMethod.GET,request,String.class);\n  return response.getBody();\n}\n", "nl": "Add a single user"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@ColorInt public int extractPrimaryDarkColorFrom(Context context){\n  return extractIntAttribute(context,PRIMARY_DARK);\n}\n", "nl": "Extracts the colorPrimaryDark color attribute of the passing Context's theme"}
{"code": "@ObjectiveCName(\"subscribeWithListEntryChangedListener:\") public List subscribe(ListEntryChangedListener listEntryChangedListener){\n  this.listEntryChangedListeners.add(listEntryChangedListener);\n  if (this.listEntryChangedListeners.size() == 0) {\n    this.record.subscribe(this.recordListeners);\n  }\n  return this;\n}\n", "nl": "Notifies the user whenever the list has changed"}
{"code": "public ScratchoffController attach(View scratchableLayout,View behindView){\n  safelyStopProcessors();\n  this.scratchableLayout=scratchableLayout;\n  this.behindView=behindView;\n  return reset();\n}\n", "nl": "Attach the controller to the specified Views"}
{"code": "public Door(final Material type,boolean isHingeRight){\n  super(type);\n  setTopHalf(true);\n  setHinge(isHingeRight);\n}\n", "nl": "Constructs the top half of door of the given material type and with the hinge on the left or right"}
{"code": "public String toString(){\n  return \"JavaClipAudioPlayer\";\n}\n", "nl": "Returns the name of this audio player"}
{"code": "public static void createFlight(AirMapFlight flight,@Nullable AirMapCallback<AirMapFlight> callback){\n  FlightService.createFlight(flight,callback);\n}\n", "nl": "Create a flight for the pilot"}
{"code": "public static boolean isNimbusLookAndFeel(){\n  return UIUtils.isNimbusLookAndFeel();\n}\n", "nl": "Determines if current L&F is Nimbus"}
{"code": "public final void trace(final Object o){\n  log(Level.TRACE,o);\n}\n", "nl": "This method logs the TRACE message"}
{"code": "public void actionPerformed(ActionEvent ev){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();\n  if (samples.size() > 0)   execute(\"set nodeShape=triangle sample='\" + Basic.toString(samples,\"' '\") + \"';\");\n}\n", "nl": "action to be performed"}
{"code": "public Builder duplicateColumn(String column,String newName){\n  return transform(new DuplicateColumnsTransform(Collections.singletonList(column),Collections.singletonList(newName)));\n}\n", "nl": "Duplicate a single column"}
{"code": "public ShapedMaterialRecipe(int width,int height,List<Predicate<ItemStack>> matchers,ItemStack output){\n  this.width=width;\n  this.height=height;\n  this.size=width * height;\n  this.matchers=matchers;\n  this.output=output;\n}\n", "nl": "Creates a new shaped material recipe"}
{"code": "public Decision(Object dDocument,Object oFinalDecision,double dDecisionBelief,Map mDecisionEvidence){\n  Document=dDocument;\n  FinalDecision=oFinalDecision;\n  DecisionBelief=dDecisionBelief;\n  DecisionEvidence=mDecisionEvidence;\n}\n", "nl": "Creates a new instance of Decision concerning a single document"}
{"code": "private void computeIntsForThisZoomLevel(){\n  int halfHeight=(getMeasuredHeight() / 2) - 1;\n  mHeightsAtThisZoomLevel=new int[mLenByZoomLevel[mZoomLevel]];\n  for (int i=0; i < mLenByZoomLevel[mZoomLevel]; i++) {\n    mHeightsAtThisZoomLevel[i]=(int)(mValuesByZoomLevel[mZoomLevel][i] * halfHeight);\n  }\n}\n", "nl": "Called the first time we need to draw when the zoom level has changed or the screen is resized"}
{"code": "public <T>T inject(Class<T> clazz,Object object){\n  return inject(clazz,frameMap.get(object));\n}\n", "nl": "Retrieve framePath from the parameter object and then call inject(Class&lt;T&gt; clazz, FramePath framePath)"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static float spToPx(float sp){\n  float scaledDensity=Resources.getSystem().getDisplayMetrics().scaledDensity;\n  return Math.round(sp * scaledDensity);\n}\n", "nl": "Convert SP to pixels using the device screen density"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed"}
{"code": "public static void hide(int tabId,int notificationId){\n  MediaNotificationManager manager=getManager(notificationId);\n  if (manager == null)   return;\n  manager.hideNotification(tabId);\n}\n", "nl": "Hides the notification for the specified tabId and notificationId"}
{"code": "public boolean isApplicable(){\n  ChartViewer chartViewer=(ChartViewer)getViewer();\n  LabelsJList list=chartViewer.getActiveLabelsJList();\n  return list != null && !list.isSelectionEmpty();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isApplicable(){\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  return viewer != null && viewer.selectedTaxon != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean isAncestor(Node ancestor,Node node){\n  Node p=node;\n  while ((p=p.getParentNode()) != null) {\n    if (ancestor == p)     return true;\n  }\n  return false;\n}\n", "nl": "Verify if <code>ancestor</code> is an ancestor of <code>node</code>"}
{"code": "public void init(MissionInit minit){\n  initBusses();\n  this.stateMachine=new ServerStateMachine(ServerState.WAITING_FOR_MOD_READY,minit);\n}\n", "nl": "Called when creating an integrated server"}
{"code": "private Map<String,List<ChartObject>> convertResult(Map<String,List<ChartObject>> initial){\n  if (initial.size() == 0)   return new HashMap<>();\n  for (  Map.Entry<String,List<ChartObject>> entry : initial.entrySet()) {\n    entry.getValue().stream().forEach(null);\n  }\n  return initial;\n}\n", "nl": "Convert database query result to chart data"}
{"code": "public int append_file1(String appender_file_id,String local_filename) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.append_file(parts[0],parts[1],local_filename);\n}\n", "nl": "append file to storage server (by file name)"}
{"code": "public void removeFromAggregate(int row,VisualItem member){\n  validRowCheck(row,true);\n  int ar=getAggregatedRow(row,member);\n  if (ar >= 0) {\n    m_aggregated.removeRow(ar);\n    fireTableEvent(row,row,EventConstants.ALL_COLUMNS,EventConstants.UPDATE);\n  }\n}\n", "nl": "Remove an item from the aggregation at the given row"}
{"code": "public static long readStartFooterSection(IInputReaderOutputWriter reader) throws IOException {\n  reader.seek(reader.length() - 16);\n  return reader.readLong();\n}\n", "nl": "reads the start of the footer section"}
{"code": "public MessagesGetChatQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.getChat\",Chat.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void putString(String key,String value){\n  checkForNullKey(key);\n  checkForNullValue(value);\n  preferences.edit().putString(key,value).apply();\n}\n", "nl": "Put String value into SharedPreferences with 'key' and save"}
{"code": "private void processCandidateForUnaassign(Iterable<User> users,String projectName){\n  List<User> updated=StreamSupport.stream(users.spliterator(),false).filter(null).map(null).collect(toList());\n  userRepository.save(updated);\n}\n", "nl": "Validate candidates for unassign from projects, and update default project if it required"}
{"code": "public DividerItemDecoration(Context context){\n  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);\n  mDivider=styledAttributes.getDrawable(0);\n  styledAttributes.recycle();\n}\n", "nl": "Default divider will be used"}
{"code": "protected void assertClose(String msg,FieldMatrix<Fraction> m,FieldMatrix<Fraction> n,double tolerance){\n  for (int i=0; i < m.getRowDimension(); i++) {\n    for (int j=0; j < m.getColumnDimension(); j++) {\n      Assert.assertEquals(msg,m.getEntry(i,j).doubleValue(),n.getEntry(i,j).doubleValue(),tolerance);\n    }\n  }\n}\n", "nl": "verifies that two matrices are close (1-norm)"}
{"code": "public void write(Writer w) throws IOException {\n  boolean useOriginal=(originalData != null && disabledSamples.size() > 0);\n  write(w,useOriginal);\n}\n", "nl": "write the datatable"}
{"code": "public static void onSimpleFinishTalk(NpcAI2 npcAI,Creature creature){\n  Npc owner=npcAI.getOwner();\n  if (owner.isTargeting(creature.getObjectId()) && npcAI.setSubStateIfNot(AISubState.NONE)) {\n    owner.setTarget(null);\n  }\n}\n", "nl": "No SM_LOOKATOBJECT broadcast"}
{"code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowGroupsAsEllipses();\n}\n", "nl": "this is currently selected?"}
{"code": "public DTW(double[][] signal,double[][] reference,String distanceFunction){\n  this.signal=signal;\n  this.reference=reference;\n  this.distanceFunction=distanceFunction;\n  setCost(dpDistance());\n}\n", "nl": "Dynamic time warping (DTW) cost signal and reference distanceFunction = {\"Euclidean\" or \"Absolute\"}"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static final boolean isValidType(final short valueDeadbandType){\n  return valueDeadbandType >= DEADBAND_NONE && valueDeadbandType <= DEADBAND_PROCESS_RELATIVE_VALUE_DESCR_CHANGE;\n}\n", "nl": "Check whether a parameter is a valid deadband"}
{"code": "protected void writePalette() throws IOException {\n  out.write(colorTab,0,colorTab.length);\n  int n=(3 * 256) - colorTab.length;\n  for (int i=0; i < n; i++) {\n    out.write(0);\n  }\n}\n", "nl": "Writes color table"}
{"code": "public String toString(){\n  return \"FileAudioPlayer\";\n}\n", "nl": "Returns the name of this audioplayer"}
{"code": "@NotNull public Emotion findEmotionSingleFace(@NotNull String image){\n  List<Emotion> emotions=emotionBuilder.emotionRecognition(image).withResult();\n  if (Utils.isEmpty(emotions) || emotions.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(emotions) ? 0 : emotions.size(),\"a single face was not present\");\n  return emotions.get(0);\n}\n", "nl": "Find a faces within a local image"}
{"code": "public LeadsMetricHitQuery(VkApiClient client,String data){\n  super(client,\"leads.metricHit\",MetricHitResponse.class);\n  data(data);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCellEditable(int row,int column){\n  return false;\n}\n", "nl": "don't allow editing of anything"}
{"code": "public void addToWeightList(double weight){\n  weightList.add(weight);\n}\n", "nl": "add weight to list of weights"}
{"code": "public static boolean isInitialized(Context ctx){\n  vitamioPackage=ctx.getPackageName();\n  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";\n  return true;\n}\n", "nl": "Check if Vitamio is initialized at this device"}
{"code": "protected final void fireColumnEvent(int idx,float prev){\n  Object[] lstnrs=m_listeners.getArray();\n  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);\n}\n", "nl": "Notifies all registered listeners of a column UPDATE event"}
{"code": "public void addChangingListener(OnWheelChangedListener listener){\n  changingListeners.add(listener);\n}\n", "nl": "Adds wheel changing listener"}
{"code": "public boolean isConnected(Direction direction){\n  return mConstraintWidget.getAnchor(lookupType(direction)).isConnected();\n}\n", "nl": "is the widet connected in that direction"}
{"code": "public void remove(){\n  throw new UnsupportedOperationException(\"Remove not supported\");\n}\n", "nl": "Throws an UnsupportedOperationException"}
{"code": "public DatabaseGetSchoolsQuery(VkApiClient client,UserActor actor,int cityId){\n  super(client,\"database.getSchools\",GetSchoolsResponse.class);\n  accessToken(actor.getAccessToken());\n  cityId(cityId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public WallUnpinQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.unpin\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected VirtualFile createFile(String filePath){\n  return testFixture.getTempDirFixture().createFile(filePath);\n}\n", "nl": "Creates a file with the specified contents and file path in the test project"}
{"code": "public NullnessAssumptionAnalysis(UnitGraph graph){\n  super(graph);\n  doAnalysis();\n}\n", "nl": "Creates a new analysis for the given graph/"}
{"code": "public static ExpectedCondition<Boolean> hasNodeProperty(final Session session,final String nodePath,final String propertyName){\n  LOG.debug(\"Checking if node '{}' has property '{}'\",nodePath,propertyName);\n  return null;\n}\n", "nl": "Checks if node has specified property"}
{"code": "public boolean isEmpty(){\n  return (geometryType == null) || segmentList.isEmpty();\n}\n", "nl": "Checks if WKT shape empty, no type set and no multi shapes/segments set"}
{"code": "public NewsfeedGetRecommendedQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public static Object invokeStaticMethod(Class<?> clazz,String name) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n  return invokeStaticMethod(clazz,name,null,null);\n}\n", "nl": "invoke static method without arguments"}
{"code": "public Optional<Message> can(@NotNull PermissionFlag action){\n  return Optional.ofNullable(mark(generalPermissions.get(action),action));\n}\n", "nl": "Checks if a flag is granted by default"}
{"code": "public MarketDeleteAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int albumId){\n  super(client,\"market.deleteAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  albumId(albumId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void write(byte[] bytes,int offset,int length) throws IOException {\n  outs.write(bytes,offset,length);\n  position+=length;\n}\n", "nl": "write bytes"}
{"code": "private void drawSolidProgress(Canvas canvas){\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f,false,mProgressBackgroundPaint);\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f * getProgress() / getMax(),true,mProgressPaint);\n}\n", "nl": "Just draw arc"}
{"code": "public DatabaseGetSchoolClassesQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getSchoolClasses\",Utils.buildParametrizedType(List.class,Utils.buildParametrizedType(List.class,JsonObject.class)));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected DocsDeleteQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Set owner id"}
{"code": "String readCountryName(Element el) throws IOException {\n  NodeList list=el.getElementsByTagName(\"country\");\n  if (list == null || list.getLength() == 0)   throw new IOException(\"Country name should be given\");\n  return list.item(0).getNodeValue();\n}\n", "nl": "read field countryname"}
{"code": "public static void startMentoring(Player player){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new PlayerStartMentoringEvent(group,player));\n  }\n}\n", "nl": "Start mentoring in group"}
{"code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n", "nl": "Creates the default cumulative probability density test input values"}
{"code": "private void createConnection(String server){\n  Properties props=System.getProperties();\n  props.put(\"mail.smtp.host\",server);\n  LOG.debug(\"createConnection() - The connection with the mail server has been created\");\n  this.session=Session.getInstance(props,null);\n}\n", "nl": "It creates a connection to the specified mail server"}
{"code": "@SuppressWarnings(\"unchecked\") public static void isPossibleToRead(Acl acl,String userModifier,String projectName){\n  BusinessRule.expect(acl,Predicates.or(Preconditions.isOwner(userModifier),Preconditions.isSharedTo(projectName))).verify(ErrorType.UNABLE_MODIFY_SHARABLE_RESOURCE,Suppliers.formattedSupplier(\"User '{}' isn't owner of resource and resource isn't shared to project '{}'.\",userModifier,projectName));\n}\n", "nl": "Validate is specified acl owned by specified user or is shared to specified project"}
{"code": "public String[] upload_file(byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_file(group_name,file_buff,offset,length,file_ext_name,meta_list);\n}\n", "nl": "upload file to storage server (by file buff)"}
{"code": "public XSNamedMapImpl(String namespace,SymbolHash map){\n  fNamespaces=new String[]{namespace};\n  fMaps=new SymbolHash[]{map};\n  fNSNum=1;\n}\n", "nl": "Construct an XSNamedMap implementation for one namespace"}
{"code": "public void output(Node input,OutputStream destination) throws TransformerException {\n  output(new DOMSource(input),new StreamResult(destination));\n}\n", "nl": "Output a DOM node to a specified destination"}
{"code": "private void tryScrollBackToTopAbortRefresh(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@SuppressWarnings(\"unchecked\") public static <T>T fromXml(Class<T> clazz,String xml){\n  T object=(T)CLASS_2_XSTREAM_INSTANCE.get(clazz).fromXML(xml);\n  return object;\n}\n", "nl": "xml -> pojo"}
{"code": "public OrdersGetAmountQuery(VkApiClient client,UserActor actor,int userId,List<String> votes){\n  super(client,\"orders.getAmount\",Amount.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n  votes(votes);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void sendJson(Json json){\n  try {\n    session.getRemote().sendString(json.toString());\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n", "nl": "Send the given JSON to the client"}
{"code": "@Override public int regionOffset(String dataCenter){\n  return Math.abs(reverse(\"Dynomite\").hashCode());\n}\n", "nl": "Due to warm bootstrap feature, we make region offset to be the same for all DCs and will support different offsets later"}
{"code": "public StartViewModel(AppPreferences preferences){\n  this.preferences=preferences;\n}\n", "nl": "Create StartViewModel with preferences"}
{"code": "public static PostsFragment newInstance(){\n  return new PostsFragment();\n}\n", "nl": "Factory method to instantiate Fragment"}
{"code": "public EventDrivenScriptingProxyConfigurer(GigaSpace gigaSpace){\n  remotingConfigurer=new EventDrivenRemotingProxyConfigurer<ScriptingExecutor>(gigaSpace,ScriptingExecutor.class).metaArgumentsHandler(new ScriptingMetaArgumentsHandler()).remoteInvocationAspect(new LazyLoadingRemoteInvocationAspect()).remoteRoutingHandler(new ScriptingRemoteRoutingHandler());\n}\n", "nl": "Creates a new <code>AsyncScriptingProxyConfigurer</code> on top of the given space"}
{"code": "public LpCoeffs(double[] oneMinusA,double gain){\n  this.oneMinusA=oneMinusA;\n  this.gain=gain;\n  this.lsf=null;\n  this.lpcc=null;\n  this.lprefc=null;\n}\n", "nl": "Create a set of LPC coefficients"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setCanceled(false);\n  viewer.setVisible(false);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void start(Activity activity){\n  start(activity,REQUEST_CROP);\n}\n", "nl": "Send the crop Intent from an Activity"}
{"code": "public static final void updateAlliance(Player player,PlayerAllianceEvent allianceEvent){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new PlayerAllianceUpdateEvent(alliance,player,allianceEvent));\n  }\n}\n", "nl": "Update alliance members to some event of player"}
{"code": "public void close() throws IOException {\n  outs.close();\n}\n", "nl": "close this stream"}
{"code": "public NewsfeedGetCommentsQuery filters(NewsfeedGetCommentsFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n", "nl": "Filters to apply"}
{"code": "public NewsfeedDeleteBanQuery groupIds(Integer... value){\n  return unsafeParam(\"group_ids\",value);\n}\n", "nl": "Set group ids"}
{"code": "private void addPaths(){\n  addPath(new ConfigureAndroidProjectPath(getDisposable()));\n  for (  NewFormFactorModulePath path : NewFormFactorModulePath.getAvailableFormFactorModulePaths(getDisposable())) {\n    addPath(path);\n  }\n  addPath(new ConfigureCppSupportPath(getDisposable()));\n}\n", "nl": "Add the steps for this wizard"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set mode=\" + (Comparer.COMPARISON_MODE.ABSOLUTE) + \";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.getCommandManager().updateEnableState();\n}\n", "nl": "action to be performed"}
{"code": "public double angle(S2Point va){\n  return Math.atan2(crossProd(this,va).norm(),this.dotProd(va));\n}\n", "nl": "Return the angle between two vectors in radians"}
{"code": "public PagesGetHistoryQuery(VkApiClient client,UserActor actor,int pageId){\n  super(client,\"pages.getHistory\",Utils.buildParametrizedType(List.class,WikipageVersion.class));\n  accessToken(actor.getAccessToken());\n  pageId(pageId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean isRemoteFile(String localFileName){\n  return localFileName.contains(\"::\");\n}\n", "nl": "does this file name have the syntax of a remote file?"}
{"code": "public IObjectInfo<T> add(T subject){\n  return insert(subject);\n}\n", "nl": "store an element"}
{"code": "private void AttackAll(){\n  for (int i=0; i < 6; i++) {\n    for (int j=0; j < 8; j++) {\n      if (enemys[i][j].get_Statue() == PangPangEnemy.SYNC)       AttackPath(i,j,rnd.nextInt(10) + 1);\n    }\n  }\n}\n", "nl": "all of enemy Attack mode"}
{"code": "public static void resetAll(Context context){\n  PrefsManager.resetAll(context);\n}\n", "nl": "Static helper method for resetting all single use flags"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapPilot && getPilotId().equals(((AirMapPilot)o).getPilotId());\n}\n", "nl": "Comparison based on ID"}
{"code": "protected void testAssertMappedValues(double[] d,Object[][] map,Double tolerance){\n  for (  Object[] o : map) {\n    EstimationType e=(EstimationType)o[0];\n    double expected=(Double)o[1];\n    double result=getTestMedian(e).evaluate(d);\n    assertEquals(\"expected[\" + e + \"] = \"+ expected+ \" but was = \"+ result,expected,result,tolerance);\n  }\n}\n", "nl": "Simple test assertion utility method"}
{"code": "private long calcLastProcessedkey(){\n  ReplicationInContext replicationInContext=getReplicationInContext();\n  ReplicationBlobstoreBulkContext replicationBlobstoreBulkContext=replicationInContext.getReplicationBlobstoreBulkContext();\n  if (replicationBlobstoreBulkContext != null && replicationBlobstoreBulkContext.getBlobStoreReplicationBulkConsumeHelper() != null) {\n    return replicationBlobstoreBulkContext.getBlobStoreReplicationBulkConsumeHelper().getLastProcessedKey();\n  }\n  return _lastProcessedKey;\n}\n", "nl": "calculate the last processed key, in case of blobstore bulks will return the last flushed entry key"}
{"code": "public QueryResponse query(String userQuery) throws Exception {\n  RetrieveAndRank service=new RetrieveAndRank();\n  HttpSolrClient solrClient=HttpSolrClientUtils.getSolrClient(service.getSolrUrl(CLUSTER_ID),USERNAME,PASSWORD);\n  logger.info(Messages.getString(\"Query.PASS_CLUSTER_DETAILS\"));\n  final SolrQuery query=new SolrQuery(userQuery).setFields(Constants.SCHEMA_FIELD_ID,Constants.SCHEMA_FIELD_BODY,Constants.SCHEMA_FIELD_TITLE,Constants.SCHEMA_FIELD_CONFIDENCE,Constants.SCHEMA_FIELD_SOURCE_URL).setHighlight(true).setHighlightFragsize(150).setHighlightSnippets(1).setParam(\"hl.fl\",Constants.SCHEMA_FIELD_BODY).setRows(Constants.RESULTS_TO_FETCH).setRequestHandler(\"/fcselect\").setParam(\"ranker_id\",RANKER_ID);\n  logger.info(Messages.getString(\"Query.QUERY_SOLR_RANKER\"));\n  return solrClient.query(COLLECTION_NAME,query);\n}\n", "nl": "Use the Watson Developer Cloud SDK to send the user's query to the retrive and rank service"}
{"code": "public Activity put(String key,Activity activity){\n  return (Activity)m_map.put(key,activity);\n}\n", "nl": "Associates the given key with the given Activity"}
{"code": "public static StorableHeadphoneFence during(int state){\n  return new StorableHeadphoneFence(STATE,state);\n}\n", "nl": "Creates a storable headphone fence which will be valid when the headphones are in the specified state"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void broadcastFromGm(final Player player){\n  PacketSendUtility.broadcastPacket(player,new SM_MESSAGE(player,message,type),true);\n}\n", "nl": "Sends message to all players from admin"}
{"code": "public String toString(){\n  return \"MbrolaAudioOutput\";\n}\n", "nl": "Returns the string form of this object"}
{"code": "public static AndroidMethod createFromSignature(String signature){\n  if (!signature.startsWith(\"<\"))   signature=\"<\" + signature;\n  if (!signature.endsWith(\">\"))   signature=signature + \">\";\n  SootMethodAndClass smac=SootMethodRepresentationParser.v().parseSootMethodString(signature);\n  return new AndroidMethod(smac.getMethodName(),smac.getParameters(),smac.getReturnType(),smac.getClassName());\n}\n", "nl": "Static method to create AndroidMethod from Soot method signature"}
{"code": "protected MarketReportCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n", "nl": "Comment id"}
{"code": "public void addProvider(AXmlNode node){\n  if (providers.isEmpty())   providers=new ArrayList<AXmlNode>();\n  providers.add(node);\n}\n", "nl": "Adds a new provider to the manifest"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public int hashCode(){\n  return this.getColumnSchema().getColumnUniqueId().hashCode();\n}\n", "nl": "hash code"}
{"code": "public VideoGetNewTagsQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.getNewTags\",GetNewTagsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public long addOrder(Order order){\n  return sessionTemplate.insert(NAMESPACE + \".addOrder\",order);\n}\n", "nl": "Add new order"}
{"code": "protected LikesGetListQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return extended information about users and communities from the \"Likes\" list"}
{"code": "@Override public long readLong(String filePath,long offset){\n  FileChannel fileChannel=updateCache(filePath);\n  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.LONG_SIZE_IN_BYTE,offset);\n  return byteBffer.getLong();\n}\n", "nl": "This method will be used to read long from file from postion(offset), here length will be always 8 bacause int byte size is 8"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public VideoRestoreQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean load(String where,Object[] args,String orderby,Bean b){\n  Table mapping=(Table)b.getClass().getAnnotation(Table.class);\n  if (mapping == null) {\n    if (log.isErrorEnabled())     log.error(\"mapping missed in [\" + b.getClass() + \"] declaretion\");\n    return false;\n  }\n  return load(mapping.name(),where,args,orderby,b);\n}\n", "nl": "load the data in this Bean"}
{"code": "public void addChangingListener(OnWheelChangedListener listener){\n  changingListeners.add(listener);\n}\n", "nl": "Adds wheel changing listener"}
{"code": "public final Abstraction deriveNewAbstractionOnCatch(Value taint){\n  assert this.exceptionThrown;\n  Abstraction abs=deriveNewAbstractionMutable(new AccessPath(taint,true),null);\n  abs.exceptionThrown=false;\n  return abs;\n}\n", "nl": "Derives a new abstraction that models the current local being caught as an exception"}
{"code": "public static void i(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.i(tag,buildMsg(msg));\n  }\n}\n", "nl": "info log"}
{"code": "public static String slurpFile(String filename) throws IOException {\n  return slurpReader(new FileReader(filename));\n}\n", "nl": "Returns all the text in the given file"}
{"code": "public boolean isDeny(){\n  return message != null;\n}\n", "nl": "A check to be used as method reference"}
{"code": "void parseFinish(){\n  mChildren=mCurrentGroup.getChildren();\n}\n", "nl": "Ensure there is at least one animation for every path in group (linking them by names) Build the \"current\" path based on the first group"}
{"code": "@deprecated public byte elementAt(char index){\n  return this.values[((this.indices[(index >> '\\007')] & 0xFFFF) + (index & 0x7F))];\n}\n", "nl": "/*    "}
{"code": "public NotesDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"notes.deleteComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static long parseDateAsEpoch(String dateStr){\n  try {\n    return DateUtils.parseDate(dateStr).getTime();\n  }\n catch (  DateParseException e) {\n    return 0;\n  }\n}\n", "nl": "Parse date in RFC1123 format, and return its value as epoch"}
{"code": "public boolean isApplicable(){\n  ChartViewer chartViewer=(ChartViewer)getViewer();\n  return chartViewer.getChartDrawer() != null && chartViewer.getChartDrawer().canShowXAxis();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "protected void drawGridBackground(Canvas c){\n  if (mDrawGridBackground) {\n    c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint);\n  }\n  if (mDrawBorders) {\n    c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint);\n  }\n}\n", "nl": "draws the grid background"}
{"code": "private void signOut(){\n  mFirebaseAuth.signOut();\n  Auth.GoogleSignInApi.signOut(mGoogleApiClient);\n  startActivity(new Intent(this,LoginActivity.class));\n  finish();\n}\n", "nl": "Sign Out no login"}
{"code": "public void clearPayment(String id){\n  CartPaymentInfo inf=this.getPaymentInfo(id);\n  paymentInfo.remove(inf);\n}\n", "nl": "removes a specific payment method/payment method type"}
{"code": "public MessagesSearchQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id"}
{"code": "public static Long[] transformLongArray(long[] source){\n  Long[] destin=new Long[source.length];\n  for (int i=0; i < source.length; i++) {\n    destin[i]=source[i];\n  }\n  return destin;\n}\n", "nl": "convert long array to Long array"}
{"code": "public WallRepostQuery(VkApiClient client,UserActor actor,String object){\n  super(client,\"wall.repost\",RepostResponse.class);\n  accessToken(actor.getAccessToken());\n  object(object);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public GroupsCreateQuery(VkApiClient client,UserActor actor,String title){\n  super(client,\"groups.create\",Group.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Deprecated public static void disableLogging(){\n  writeLogs(false);\n}\n", "nl": "Disables logger, no logs will be passed to LogCat, all log methods will do nothing"}
{"code": "public static void checkSubtractionCompatible(final AnyMatrix left,final AnyMatrix right) throws MathIllegalArgumentException {\n  if ((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension())) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH_2x2,left.getRowDimension(),left.getColumnDimension(),right.getRowDimension(),right.getColumnDimension());\n  }\n}\n", "nl": "Check if matrices are subtraction compatible"}
{"code": "public static final void updateGroup(Player player,GroupEvent groupEvent){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new PlayerGroupUpdateEvent(group,player,groupEvent));\n  }\n}\n", "nl": "Update group members to some event of player"}
{"code": "public WallSearchQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public static boolean supports(String db,int majorVersion,int minorVersion){\n  return MYSQL_DB_NAME.equals(db) && majorVersion == 5;\n}\n", "nl": "Returns true only if DB supports MySQL5"}
{"code": "public PhotosReportQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Reason for the complaint"}
{"code": "public AdsImportTargetContactsQuery(VkApiClient client,UserActor actor,int accountId,int targetGroupId,String contacts){\n  super(client,\"ads.importTargetContacts\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  targetGroupId(targetGroupId);\n  contacts(contacts);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void resetCircleColors(){\n  mCircleColors=new ArrayList<Integer>();\n}\n", "nl": "resets the circle-colors array and creates a new one"}
{"code": "private boolean sameQuery(byte[] a,byte[] b){\n  int top=Math.min(a.length,b.length);\n  for (int i=0; i < top; i++) {\n    if (a[i] != b[i])     return false;\n    if (a[i] == '\\t')     return true;\n  }\n  return a.length == b.length;\n}\n", "nl": "are the two strings identical up until the first tab"}
{"code": "public static void changeViceCaptain(Player player,AssignType assignType){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new AssignViceCaptainEvent(alliance,player,assignType));\n  }\n}\n", "nl": "Change vice captain position of player (promote, demote)"}
{"code": "public void reset(byte[] buf,int offset,int length){\n  this.buf=buf;\n  this.offset=offset;\n  this.length=length;\n}\n", "nl": "reset values"}
{"code": "private static Rectangle[] buildRectList(BitSet subset,Rectangle[] rectList){\n  Rectangle[] inside=new Rectangle[subset.cardinality()];\n  int count=0;\n  for (int i=subset.nextSetBit(0); i >= 0; i=subset.nextSetBit(i + 1)) {\n    inside[count++]=new Rectangle(rectList[i]);\n  }\n  return inside;\n}\n", "nl": "given a subset build a rectangle list of the subset of the original rectangle list"}
{"code": "protected void notifyChangingListeners(int oldValue,int newValue){\n  for (  OnWheelChangedListener listener : changingListeners) {\n    listener.onChanged(this,oldValue,newValue);\n  }\n}\n", "nl": "Notifies changing listeners"}
{"code": "private void sendOnTextChanged(CharSequence s,int start,int before,int count){\n  if (mListeners != null) {\n    for (int i=0; i < mListeners.size(); i++) {\n      mListeners.get(i).onTextChanged(s,start,before,count);\n    }\n  }\n}\n", "nl": "Send an on text change event to child listeners"}
{"code": "public GroupsEditQuery marketCity(Integer... value){\n  return unsafeParam(\"market_city\",value);\n}\n", "nl": "Market delivery cities (if only one country is specified)"}
{"code": "public int dpToPx(@AndroidDpCoordinate int dp){\n  return (int)(0.5f + dp * myDpiFactor);\n}\n", "nl": "Transform android Dp into android pixels"}
{"code": "public ThresholdValues(double[] range){\n  if (range.length != 2)   throw new IllegalArgumentException(\"range must be 2 elements\");\n  if (range[0] >= range[1])   throw new IllegalArgumentException(\"range is not valid\");\n  this.lowThreshold=range[0];\n  this.currentLowThreshold=lowThreshold;\n  this.highThreshold=range[1];\n  this.currentHighThreshold=highThreshold;\n}\n", "nl": "Create a new ThresholdValues"}
{"code": "private boolean isValidItemIndex(int index){\n  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());\n}\n", "nl": "Checks whether intem index is valid"}
{"code": "public static void hideSoftKeyboard(Context context,View view){\n  view.clearFocus();\n  InputMethodManager inputmanger=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\n  inputmanger.hideSoftInputFromWindow(view.getWindowToken(),0);\n}\n", "nl": "Hide soft keyboard"}
{"code": "NewProjectDescriptor withBriefNames(){\n  withActivity(\"A\").withCompanyDomain(\"C\").withName(\"P\").withPackageName(\"a.b\");\n  return this;\n}\n", "nl": "Picks brief names in order to make the test execute faster (less slow typing in name text fields)"}
{"code": "public SQLDataMigrator configure(Connection connection){\n  this.connection=connection;\n  this.metadata=new SQLModel(connection);\n  return this;\n}\n", "nl": "Configure the data migrator with a JDBC connection"}
{"code": "public static void useDarkTheme(boolean flag){\n  isDarkThemeEnable=flag;\n}\n", "nl": "use current dark theme"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_PLAYING_TIME(String value0){\n  return new SM_SYSTEM_MESSAGE(1390213,value0);\n}\n", "nl": "Playing Time: %0"}
{"code": "@ObjectiveCName(\"addEntry:\") public List addEntry(String entry){\n  java.util.List<String> entries=this.getEntries();\n  entries.add(entry);\n  this.updateList(entries);\n  return this;\n}\n", "nl": "Add an entry to the end of the list"}
{"code": "public ColumnQuery addSort(Sort sort) throws NullPointerException {\n  this.sorts.add(Objects.requireNonNull(sort,\"Sort is required\"));\n  return this;\n}\n", "nl": "Add the order how the result will returned"}
{"code": "public void rightClick(int x,int y,int delay) throws InterruptedException {\n  move(x,y);\n  click(InputEvent.BUTTON3_MASK,delay);\n}\n", "nl": "Right click mouse at a point with specified delay"}
{"code": "public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){\n  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;\n}\n", "nl": "add distinct entry to list"}
{"code": "public synchronized void resume(){\n}\n", "nl": "Resumes audio output"}
{"code": "private final void writeOP(int value){\n  int op=Crypt.encodeOpcodec(value);\n  buf.putShort((short)(op));\n  buf.put(Crypt.staticServerPacketCode);\n  buf.putShort((short)(~op));\n}\n", "nl": "Write packet opcodec and two additional bytes"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private boolean isViewWasReused(){\n  String currentCacheKey=engine.getLoadingUriForView(imageAware);\n  return !memoryCacheKey.equals(currentCacheKey);\n}\n", "nl": "Checks whether memory cache key (image URI) for current ImageAware is actual"}
{"code": "protected void removeKeyFromLRUCache(Cache cacheObject){\n  for (int i=0; i < columnIdentifiers.length; i++) {\n    DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier=createDictionaryColumnUniqueIdentifier(columnIdentifiers[i]);\n    cacheObject.invalidate(dictionaryColumnUniqueIdentifier);\n  }\n}\n", "nl": "This method will remove the column identifiers from lru cache"}
{"code": "@Override public boolean supportsFifoOrder(){\n  return true;\n}\n", "nl": "equality matching preserves fifo order"}
{"code": "public NotesEditQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "public static void stopWavFile(){\n  m_clip.stop();\n  m_clip.flush();\n  m_clip.close();\n}\n", "nl": "Stop wav play back"}
{"code": "public static Column min(DataFrame dataFrame,String columnName){\n  return dataFrame.groupBy(columnName).agg(functions.min(columnName)).col(columnName);\n}\n", "nl": "MIn for a column"}
{"code": "public DirectedGraph(Node rootNode,FeatureDefinition featDef){\n  this(rootNode,featDef,null);\n}\n", "nl": "Build a new graph with the given node as the root node"}
{"code": "private void dump(final Thread thread,final Throwable exception){\n  if (isWriting) {\n    return;\n  }\n  isWriting=true;\n  SharePref.saveLastCrashLog(mContext,mWriter.write(thread,exception));\n  isWriting=false;\n}\n", "nl": "dump the crash log"}
{"code": "public void flush() throws IOException {\n  outs.flush();\n}\n", "nl": "flush the current stream"}
{"code": "public boolean isDrawValueAboveBarEnabled(){\n  return mDrawValueAboveBar;\n}\n", "nl": "returns true if drawing values above bars is enabled, false if not"}
{"code": "protected MarketDeleteCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n", "nl": "Comment id"}
{"code": "public boolean hasManaStones(){\n  return manaStones != null && manaStones.size() > 0;\n}\n", "nl": "Check manastones without initialization"}
{"code": "public boolean isHealthy(){\n  return (healthIssueErrors == null || healthIssueErrors.length == 0);\n}\n", "nl": "Gets whether the space is unhealthy"}
{"code": "protected void assertClose(String msg,double[] m,double[] n,double tolerance){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors not same length\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i],n[i],tolerance);\n  }\n}\n", "nl": "verifies that two vectors are close (sup norm)"}
{"code": "public boolean isEmpty(){\n  return priorityQueue.isEmpty();\n}\n", "nl": "Is queue is Empty"}
{"code": "public void bumpSongCount(final long songId){\n  if (songId < 0) {\n    return;\n  }\n  final SQLiteDatabase database=mMusicDatabase.getWritableDatabase();\n  updateExistingRow(database,songId,true);\n}\n", "nl": "Increases the play count of a song by 1"}
{"code": "AssignmentsImpl(AssignmentsRepository assignmentRepository,MutexRepository mutRepository){\n  repository=null;\n  mutexRepository=mutRepository;\n  assignmentsRepository=assignmentRepository;\n  random=null;\n}\n", "nl": "Helper for unit tests"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public ConditionNegativeTest(String fieldName,Condition condition,String toFind){\n  this.condition=condition;\n  this.toFind=toFind;\n  this.fieldName=fieldName;\n}\n", "nl": "Parameters list"}
{"code": "@POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value=\"Submit feedback\") @Timed public Response postFeedback(@ApiParam(name=\"userFeedback\",value=\"Please see model example\",required=true) final UserFeedback userFeedback,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  userFeedback.setUsername(authorization.getUser(authorizationHeader));\n  feedback.createUserFeedback(userFeedback);\n  return httpHeader.headers(CREATED).build();\n}\n", "nl": "Post feedback from user"}
{"code": "public MonsterToQuestCursor queryMonsterToQuestMonster(long id){\n  return mHelper.queryMonsterToQuestMonster(id);\n}\n", "nl": "MONSTER TO QUEST QUERIES"}
{"code": "@Override public void onIntroduceType(IntroduceTypeData introduceTypeData){\n  SpaceSynchronizationEndpoint endpointInterceptor=getEndpoint(introduceTypeData.getTypeDescriptor().getTypeName());\n  if (endpointInterceptor != null)   endpointInterceptor.onIntroduceType(introduceTypeData);\n}\n", "nl": "delegate the introduce type event to the corresponding interceptor"}
{"code": "public static Object nullToBlank(Object object){\n  if (object == null) {\n    return StringUtil.BLANK;\n  }\n  return object;\n}\n", "nl": "when object is null return blank,when the object is not null it return object;"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=none;\");\n}\n", "nl": "action to be performed"}
{"code": "public static boolean isStorageExists(){\n  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n    return true;\n  }\n  return false;\n}\n", "nl": "whether the external storage (SDCard) exists"}
{"code": "public DatabaseGetCitiesByIdQuery(VkApiClient client){\n  super(client,\"database.getCitiesById\",Utils.buildParametrizedType(List.class,BaseObject.class));\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void d(String tag,String msg){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg);\n}\n", "nl": "Send a DEBUG log message"}
{"code": "public void updatePositions(ViewTransform viewTransform){\n  for (  ConstraintWidget widget : mWidgets.values()) {\n    widget.updateDrawPosition();\n    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();\n    WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();\n    widgetInteraction.updatePosition(viewTransform);\n  }\n}\n", "nl": "Make sure the positions of the interaction targets are correctly updated"}
{"code": "public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);\n}\n", "nl": "execute shell commands"}
{"code": "public static Map<String,Object> sendOrderConfirmNotification(DispatchContext ctx,Map<String,? extends Object> context){\n  return sendOrderNotificationScreen(ctx,context,\"PRDS_ODR_CONFIRM\");\n}\n", "nl": "Service to email a customer with initial order confirmation"}
{"code": "public LogEntries(LogProcessType processType,long pid,String hostName,String hostAddress){\n  this(processType,new ArrayList<LogEntry>(0),0,pid,0,hostName,hostAddress);\n}\n", "nl": "Empty LogEntries"}
{"code": "private void prefixSearch(String query){\n  m_curNode=m_trie.find(query);\n  if (m_curNode != null) {\n    Iterator iter=trieIterator();\n    while (iter.hasNext())     addInternal((Tuple)iter.next());\n  }\n}\n", "nl": "Issues a prefix search and collects the results"}
{"code": "public AirMapStatus(){\n}\n", "nl": "Initialize an AirMapStatus with default values"}
{"code": "public void removeListener(CacheListener<K,V> listener){\n  listeners.remove(listener);\n}\n", "nl": "Removes an event listener for key removals"}
{"code": "public void init(FMLInitializationEvent event){\n  initBusses();\n  this.stateMachine=new ServerStateMachine(ServerState.WAITING_FOR_MOD_READY);\n}\n", "nl": "Called when creating a dedicated server"}
{"code": "@Override public IAssignmentAlgorithm createAssignmentAlgorithm(){\n  return assignmentUsingBestHit;\n}\n", "nl": "creates an assignment algorithm"}
{"code": "public CompareWithBaseRevisionAction(){\n  super(SVNRevision.BASE);\n}\n", "nl": "Creates a new compare action that will compare against the BASE revision"}
{"code": "@Override public List<Role> searchRole(Role role){\n  return sessionTemplate.selectList(NAMESPACE + \".searchRole\",role);\n}\n", "nl": "Search role by params"}
{"code": "public SecureAddAppEventQuery(VkApiClient client,ServiceActor actor,int userId,int activityId){\n  super(client,\"secure.addAppEvent\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n  userId(userId);\n  activityId(activityId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void sendDelayedTimeDeadbandValues(){\n  equipmentLogger.debug(\"Sending all time deadband delayed values to the server\");\n  this.equipmentTimeDeadband.sendDelayedTimeDeadbandValues();\n}\n", "nl": "Sends all through timedeadband delayed values immediately"}
{"code": "public String formatQueryString(String query){\n  if (this.ANDMATCH) {\n    return this.formatQueryStringAndDefault(query);\n  }\n  return this.formatQueryStringOrDefault(query);\n}\n", "nl": "Parse the query and escape it as per Lucene but without affecting search operators such as AND OR and NOT"}
{"code": "public Complex(double real,double imaginary){\n  this.real=real;\n  this.imaginary=imaginary;\n}\n", "nl": "Construct a complex from a real and imaginary value"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=previous;\");\n}\n", "nl": "action to be performed"}
{"code": "protected boolean hasDropExportStart(Drop drop){\n  return drop.getDropExporterConfig() != null;\n}\n", "nl": "Check if the export has started"}
{"code": "public BinaryHttpResponseHandler(){\n  super();\n}\n", "nl": "Creates a new BinaryHttpResponseHandler"}
{"code": "public static int calculateXenStorage(int deliveryControllerCount,int vCenterServerCount){\n  final int dc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.controller.storage.default\")) * deliveryControllerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.vcenter.storage.default\")) * vCenterServerCount;\n  return dc + vc;\n}\n", "nl": "Calculate XenDesktop storage requirements for deployment"}
{"code": "public MessagesCreateChatQuery(VkApiClient client,UserActor actor,List<Integer> userIds){\n  super(client,\"messages.createChat\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Dictionary(String sName,int iMaxWordSize){\n  WordDefs=new HashSet();\n  Name=sName;\n  MaxWordSize=iMaxWordSize;\n}\n", "nl": "Creates a new instance of Dictionary"}
{"code": "public void apply(ProgressListener progressListener) throws CanceledException {\n  resamplingMethod.apply(progressListener);\n}\n", "nl": "apply the calculation"}
{"code": "public void remoteResourceDeleted(ISVNRemoteResource resource){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.remoteResourceDeleted(resource);\n  }\n}\n", "nl": "signals all listener that a remote resource has been created"}
{"code": "public boolean isLured(){\n  return encounterKind == EncounterKind.DISK;\n}\n", "nl": "Return true when the catchable pokemon is a lured pokemon"}
{"code": "public boolean resultToContext(){\n  return this.resultToContext;\n}\n", "nl": "Returns true if the results of this service are to go back into the context"}
{"code": "public static Color updateBrightness(Color color,float factor){\n  float[] hsb=new float[3];\n  Color.RGBtoHSB(color.getRed(),color.getGreen(),color.getBlue(),hsb);\n  return new Color(Color.HSBtoRGB(hsb[0],hsb[1],Math.min(1.0f,hsb[2] * factor)));\n}\n", "nl": "Utility function returning a new color with an updated brightness"}
{"code": "public void actionPerformed(ActionEvent ev){\n}\n", "nl": "action to be performed"}
{"code": "public void testHighNewApiParent(){\n  doTestForParentApi(\"android:Theme.Holo.NoActionBar.Overscan\",\"apiParentTestAfter4\");\n  myFixture.checkResultByFile(\"res/values-v18/styles.xml\",\"themeEditor/apiParentTestAfter4/stylesApi-v18.xml\",true);\n}\n", "nl": "Tests setting a parent with api that has no associated values folder"}
{"code": "public void createMaterialZoneTemplate(Spatial geometry,int regionId,int worldId,int materialId){\n  geometry.setName(geometry.getName() + \"_\" + regionId);\n  createMaterialZoneTemplate(geometry,worldId,materialId,false);\n}\n", "nl": "Method for dynamic zone template creation for geometries; could be saved later in XML"}
{"code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200928,skilltarget);\n}\n", "nl": "[%SkillTarget] is no longer bound"}
{"code": "public static boolean isSeqTransactionGT(long xtn1,long xtn2){\n  if (xtn1 != UNKNOWN_FIFO_XTN && xtn2 != UNKNOWN_FIFO_XTN && (xtn1 > xtn2 || (xtn1 < xtn2 && xtn2 - xtn1 > 1000000)))   return true;\n else   return false;\n}\n", "nl": "method returns true if xtn1 is sequentially GT xtn2"}
{"code": "public <T>List<T> listScalarItems(SectionKey<T,ScalarSection<T>> key){\n  List<T> result=Lists.newArrayList();\n  for (  ScalarSection<T> section : getSections(key)) {\n    result.add(section.getValue());\n  }\n  return result;\n}\n", "nl": "Returns all values from all scalar sections in the project views, in order"}
{"code": "public void addHeader(@LayoutRes int layoutId){\n  addHeader(layoutId,null);\n}\n", "nl": "Add header before all items and after TYPE_ABSOLUTE_HEADER"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public void reload(){\n  this.kek=null;\n  this.mwk=null;\n  this.mwkIndex=null;\n}\n", "nl": "Reloads the keys in the object cache; use this when re-creating keys"}
{"code": "protected MarketGetAlbumByIdQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Collections identifiers to obtain data from"}
{"code": "public static ConfigItem create(Config config){\n  ConfigItem configItem=new ConfigItem();\n  configItem.setName(config.getName());\n  configItem.setValue(config.getValue());\n  configItem.setMd5(config.getMd5());\n  return configItem;\n}\n", "nl": "Create config item from config"}
{"code": "public static boolean propertyValueEqualsIgnoreCase(URL url,String name,String compareString){\n  String value=getPropertyValue(url,name);\n  if (value == null)   return false;\n  return value.trim().equalsIgnoreCase(compareString);\n}\n", "nl": "Compares Ignoring Case the specified property to the compareString, returns true if they are the same, false otherwise"}
{"code": "private boolean isValidItemIndex(int index){\n  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());\n}\n", "nl": "Checks whether intem index is valid"}
{"code": "public String removeContactMech(String contactMechPurposeTypeId){\n  return contactMechIdsMap.remove(contactMechPurposeTypeId);\n}\n", "nl": "Remove the contactMechId from this item given the contactMechPurposeTypeId"}
{"code": "public CatchOptions useSmartSelect(boolean smartSelect){\n  this.smartSelect=smartSelect;\n  return this;\n}\n", "nl": "Set whether or not to use adaptive ball selection"}
{"code": "public char charAt(int position){\n  if (s != null && position >= 0 && position < s.length()) {\n    return s.charAt(position);\n  }\n  return 0;\n}\n", "nl": "get the char by the absolute position"}
{"code": "public String savePhotoInMemoryDevice(Bitmap bitmap,String photoName,boolean autoIncrementNameByDate){\n  return writePhotoFile(bitmap,photoName,\"MAGICAL CAMERA\",PNG,autoIncrementNameByDate);\n}\n", "nl": "* This methods save the photo in memory device with diferents params *"}
{"code": "private void addSpanWatcher(){\n  Spannable spannable=getText();\n  if (spannable.getSpans(0,spannable.length(),getClass()) != null) {\n    spannable.setSpan(this,0,spannable.length(),Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n  }\n}\n", "nl": "Add a SpanWatcher for the Changeable implementation"}
{"code": "private static boolean isWidgetInsideConstraintLayout(@NotNull ConstraintWidget widget){\n  ConstraintWidget parent=widget.getParent();\n  if (parent == null) {\n    return false;\n  }\n  return parent instanceof ConstraintWidgetContainer;\n}\n", "nl": "Returns true if the widget is a direct child of a ConstraintLayout"}
{"code": "public V remove(Object key){\n  return this.removeInternal(key,true);\n}\n", "nl": "Removes an element from the cache according to the specified key"}
{"code": "public void onStartMove(){\n  getOwner().getObserveController().notifyMoveObservers();\n  notifyAIOnMove();\n}\n", "nl": "Perform tasks on Creature starting to move"}
{"code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "static boolean isFieldFull(){\n  for (int y=0; y < field_size; y++) {\n    for (int x=0; x < field_size; x++) {\n      if (field[x][y] == dotEmpty)       return false;\n    }\n  }\n  return true;\n}\n", "nl": "Checking for a draw: whole field is filled?"}
{"code": "public GroupsGetInvitesQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"groups.getInvites\",GetInvitesExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static boolean putString(Context context,String key,String value){\n  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);\n  SharedPreferences.Editor editor=settings.edit();\n  editor.putString(key,value);\n  return editor.commit();\n}\n", "nl": "put string preferences"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(4).putFloat(get(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]"}
{"code": "@Override public boolean checkCondition(){\n  return team.hasMember(leavedPlayer.getObjectId());\n}\n", "nl": "Player should be in team to broadcast this event"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set aminoAcidColors=\");\n  String value=np.getWordMatchesIgnoringCase(Basic.toString(ColorSchemeAminoAcids.getNames(),\" \"));\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.setAminoAcidColoringScheme(value);\n  viewer.setShowAminoAcids(viewer.isShowAminoAcids());\n}\n", "nl": "parses the given command and executes it"}
{"code": "public DatabaseGetFacultiesQuery(VkApiClient client,int universityId){\n  super(client,\"database.getFaculties\",GetFacultiesResponse.class);\n  universityId(universityId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Color sub(Color color){\n  this.r-=color.r;\n  this.g-=color.g;\n  this.b-=color.b;\n  this.a-=color.a;\n  clamp();\n  return this;\n}\n", "nl": "Subtracts the given color from this color"}
{"code": "public void onNetDisConnect(){\n}\n", "nl": "when network disconnected callback"}
{"code": "static public String convertUncompressedByteArray2String(int size,byte[] bytes){\n  StringBuilder buf=new StringBuilder(size);\n  for (  byte b : bytes)   buf.append((char)b);\n  return buf.toString();\n}\n", "nl": "* convert an uncompressed array of bytes to a string"}
{"code": "public CommandManagerFX(IDirector dir,IDirectableViewer viewer,String commandsPath,boolean returnOnCommandNotFound){\n  this(dir,viewer,new String[]{commandsPath},returnOnCommandNotFound);\n}\n", "nl": "construct a parser and load all commands found for the given path"}
{"code": "public static byte[] pairHashcodeToBytes(int pairHashcode){\n  return new byte[]{(byte)(pairHashcode >> 8),(byte)pairHashcode};\n}\n", "nl": "Convert hashed pair to bytes"}
{"code": "private void afterFailedBulkExecution(IReplicationInBatchContext context){\n  if (_operationStatisticsHandler != null) {\n    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());\n    List<BulkItem> bulk=context.getPendingContext();\n    sourceChannelStatistics.addFailedOperationCount(bulk);\n  }\n}\n", "nl": "Invoked after bulk execution in EDS to update mirror statistics"}
{"code": "public void clearMemoryCache(){\n  checkConfiguration();\n  configuration.memoryCache.clear();\n}\n", "nl": "Clears memory cache"}
{"code": "public Value simpleCaseExpression(Value caseOperand,Expression[] exp,Value val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a simple case expression"}
{"code": "@Override public void close(){\n  SimulationRunContext.getEventCalendar().clear();\n  SimulationRunContext.removeEventCalendar();\n  SimulationRunContext.removeProcessEngine();\n}\n", "nl": "do not affect existing engine"}
{"code": "@Deprecated public void onFailure(int statusCode,Header[] headers,Throwable error,String content){\n  onFailure(statusCode,error,content);\n}\n", "nl": "Fired when a request fails to complete, override to handle in your own code"}
{"code": "public void actionPerformed(ActionEvent ev){\n  final ClusterViewer viewer=getViewer();\n  final String method=(String)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set Ecological Index\",\"Set Ecological Index\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),METHODS,viewer.getEcologicalIndex());\n  if (method != null)   executeImmediately(\"set index=\" + method + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public static void debug(){\n  DEBUG=true;\n}\n", "nl": "whether debug"}
{"code": "private void updateButtons(){\n  myHostWizard.updateButtons(myGuestWizard.onLastStep().get(),myGuestWizard.canGoForward().get(),!myGuestWizard.canGoBack().get());\n}\n", "nl": "Update the buttons on the host wizard to reflect the state of the guest wizard"}
{"code": "public static RuleKey forDependency(RuleIdeInfo rule,Label dep){\n  return new RuleKey(dep);\n}\n", "nl": "Returns a key identifying dep for a dependency rule -> dep"}
{"code": "public boolean gotoFirst(){\n  current.set1(0);\n  current.set2(0);\n  return isCurrentSet();\n}\n", "nl": "goto the first object"}
{"code": "public MediaPlayerWrapperImpl(Context context){\n  super(new MediaPlayer(),context);\n}\n", "nl": "Can custom MediaPlayer here"}
{"code": "public static long retryInfinitelyInt(final Callable<Integer> callable){\n  return intResponseRetryer.retryInfinitely(callable);\n}\n", "nl": "Integer Response Retryer"}
{"code": "public void resetShipBeforeDateIfAfter(Timestamp newShipBeforeDate){\n  if (newShipBeforeDate != null) {\n    if ((this.shipBeforeDate == null) || (!this.shipBeforeDate.before(newShipBeforeDate))) {\n      this.shipBeforeDate=newShipBeforeDate;\n    }\n  }\n}\n", "nl": "Reset the ship group's shipBeforeDate if it is after the parameter"}
{"code": "static public String streamToString(InputStream in) throws IOException {\n  StringBuffer out=new StringBuffer();\n  byte[] b=new byte[4096];\n  for (int n; (n=in.read(b)) != -1; ) {\n    out.append(new String(b,0,n));\n  }\n  return out.toString();\n}\n", "nl": "Read an input stream into a string"}
{"code": "private static String stringRepeat(String str,int times){\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < times; ++i) {\n    builder.append(str);\n  }\n  return builder.toString();\n}\n", "nl": "Repeats str"}
{"code": "public AccountChangePasswordQuery(VkApiClient client,UserActor actor,String newPassword){\n  super(client,\"account.changePassword\",ChangePasswordResponse.class);\n  accessToken(actor.getAccessToken());\n  newPassword(newPassword);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void addToIncluded(Document document){\n  document.addInclude(this);\n}\n", "nl": "Add resource as included resource and attach the document to this resource"}
{"code": "public NewsfeedGetQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public static String makeString(Object obj1){\n  if (obj1 != null)   return obj1.toString();\n else   return \"\";\n}\n", "nl": "Checks to see if the passed Object is null, if it is returns an empty but non-null string, otherwise calls toString() on the object"}
{"code": "public static ConstraintWidget[] inferTableList(WidgetsScene list){\n  for (  ConstraintWidget widget : list.getWidgets()) {\n    widget.resetAnchors();\n  }\n  return inferTableList(list.getRoot());\n}\n", "nl": "Given a collection of widgets evaluates probability of a connection and makes connections"}
{"code": "public static String makeLogTag(Class cls){\n  return makeLogTag(cls.getSimpleName());\n}\n", "nl": "Don't use this when obfuscating class names!"}
{"code": "public void terminateTimer(){\n  timer.cancel();\n  running=false;\n}\n", "nl": "This method is used for timer's termination"}
{"code": "private void sendBeforeTextChanged(CharSequence s,int start,int count,int after){\n  if (mListeners != null) {\n    for (int i=0; i < mListeners.size(); i++) {\n      mListeners.get(i).beforeTextChanged(s,start,count,after);\n    }\n  }\n}\n", "nl": "Send an before text change event to child listeners"}
{"code": "@Override public boolean isSilence(){\n  throw new IllegalStateException(\"This method should not be called for DiphoneTargets.\");\n}\n", "nl": "Determine whether this target is a silence target"}
{"code": "@Deprecated public Builder cacheInMemory(){\n  cacheInMemory=true;\n  return this;\n}\n", "nl": "Loaded image will be cached in memory"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public WallRepostQuery markAsAds(Boolean value){\n  return unsafeParam(\"mark_as_ads\",value);\n}\n", "nl": "Set mark as ads"}
{"code": "@Nullable public Interaction createInteraction(@NotNull ScreenView screenView,@NotNull NlComponent layout){\n  return null;\n}\n", "nl": "Creates a new complete interaction for this view"}
{"code": "private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){\n  if (entity != null) {\n    requestBase.setEntity(entity);\n  }\n  return requestBase;\n}\n", "nl": "Applicable only to HttpRequest methods extending HttpEntityEnclosingRequestBase, which is for example not DELETE"}
{"code": "static public double[] runProportionTest(double x1,double n1,double x2,double n2){\n  SignificanceTestForTwoDatasets test=new SignificanceTestForTwoDatasets(x1,n1,x2,n2);\n  double[] res=new double[2];\n  res[0]=test.getChi_SquareValueWithContinuityCorrectionTwoTailed();\n  res[1]=test.getPValueForProportionTest();\n  return res;\n}\n", "nl": "calculate chi-square and p value for two proprotions"}
{"code": "public boolean isRefreshing(){\n  return STATUS.isRefreshing(mStatus);\n}\n", "nl": "is current status refreshing"}
{"code": "public static Object invokeMethod(Class<?> clazz,Object obj,String name) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n  return invokeMethod(clazz,obj,name,null,null);\n}\n", "nl": "invoke method without arguments"}
{"code": "public Bubble(int width,int height,int topMargin,int bubbleColour){\n  popped=false;\n  paint=new Paint();\n  paint.setColor(bubbleColour);\n  paint.setStyle(Paint.Style.FILL);\n  paint.setAntiAlias(true);\n  recycle(true,width,height,topMargin);\n}\n", "nl": "Create a bubble, passing in width & height of view"}
{"code": "public WallDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"wall.deleteComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected UsersGetSubscriptionsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return a combined list of users and communities"}
{"code": "public static List<List<Writable>> sample(int count,JavaRDD<List<Writable>> data){\n  return data.takeSample(false,count);\n}\n", "nl": "Randomly sample a set of examples"}
{"code": "public boolean addRegex(final String regex){\n  if (regex != null && !regex.isEmpty()) {\n    return regexList.add(regex);\n  }\n  return false;\n}\n", "nl": "Adds (tag) name or a regular search expression"}
{"code": "public MultiFileAudioPlayer(String baseName,AudioFileFormat.Type type){\n  this.baseName=baseName;\n  this.outputType=type;\n  debug=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.debug\");\n}\n", "nl": "Constructs a MultiFileAudioPlayer"}
{"code": "public static void display(byte[] b){\n  for (int i=0; i < b.length; i++) {\n    System.out.print((char)b[i]);\n  }\n  System.out.println();\n}\n", "nl": "debug display array"}
{"code": "private MouseGesture processCurrentData() throws IOException {\n  int size=coordinates.size();\n  return mouseGestureRecognizer.classifyGesture(coordinates,size);\n}\n", "nl": "Process currently stored points and detect any gesture"}
{"code": "public TrafficLogPredicate(Predicate<HarEntry> entry){\n  this.predicates.add(entry);\n}\n", "nl": "Creates a TrafficLogPredicate instance containing single HarEntry predicate"}
{"code": "public boolean absolute(int row) throws SQLException {\n  throw new SQLException(\"Command not Supported!\",\"GSP\",-132);\n}\n", "nl": "TYPE_FORWARD_ONLY mode only"}
{"code": "public ChiSquareTest(){\n  super();\n}\n", "nl": "Construct a ChiSquareTest"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean isApplicable(){\n  if (getViewer() instanceof ViewerBase)   return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n else   return getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getGraphView() != null && ((ClusterViewer)getViewer()).getGraphView().getGraph().getNumberOfNodes() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void clear(){\n  this.results.clear();\n}\n", "nl": "Removes all results from the data structure"}
{"code": "public boolean isApplicable(){\n  return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isResizable(){\n  return (myFlags & ANY) != 0;\n}\n", "nl": "Returns true if this policy allows resizing in at least one direction"}
{"code": "public Observable<String> streamGetGithubInfoForEachMember(List<String> listOfUserName){\n  return Observable.just(listOfUserName).flatMap(githubMemberFunctions.observeEachItem()).flatMap(githubMemberFunctions.getGithubMember()).map(githubMemberFunctions.getNumberOfFollowers()).reduce(githubMemberFunctions.aggregateString()).subscribeOn(schedulerSubscribeOn).observeOn(schedulerObserveOn);\n}\n", "nl": "Stream that get Github info for each member of list of user"}
{"code": "@GET @Path(\"/verifyToken\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Verify user's authorization\") @Timed public Response verifyToken(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String tokenHeader){\n  return httpHeader.headers().entity(authentication.verifyToken(tokenHeader)).build();\n}\n", "nl": "Verify token"}
{"code": "public NewsfeedGetRecommendedQuery startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n", "nl": "Set start from"}
{"code": "public void readBody(DataInput dataIn) throws IOException {\n  try {\n    Body=SerializationHelper.readObject((InputStream)dataIn);\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IOException(ex.toString());\n  }\n}\n", "nl": "Used to help build the body from an input stream"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set show-consensus=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().setShowConsensus(value);\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static boolean isLoaded(String name,IdMapper.MapType mapType){\n  return name2classification.get(name) != null && get(name,true).getIdMapper().isLoaded(mapType);\n}\n", "nl": "is the named parsing method loaded"}
{"code": "public void expand(DefaultMutableTreeNode v){\n  if (v == null)   v=this.root;\n  for (Enumeration descendants=v.breadthFirstEnumeration(); descendants.hasMoreElements(); ) {\n    v=(DefaultMutableTreeNode)descendants.nextElement();\n    this.tree.expandPath(new TreePath(v.getPath()));\n  }\n}\n", "nl": "expand the given node"}
{"code": "public int batchSet(ObjectInfo objInfo,Map keyValues,Map failKeys) throws MyException {\n  return this.batchSet(objInfo,keyValues,failKeys,ProtoCommon.FDHT_EXPIRES_NEVER);\n}\n", "nl": "set values of multi keys"}
{"code": "private void displayLegionMessage(Player targetPlayer,Entry<Timestamp,String> currentAnnouncement){\n  if (currentAnnouncement != null) {\n    PacketSendUtility.sendPacket(targetPlayer,SM_SYSTEM_MESSAGE.STR_GUILD_NOTICE(currentAnnouncement.getValue(),(int)(currentAnnouncement.getKey().getTime() / 1000)));\n  }\n}\n", "nl": "Displays current legion announcement"}
{"code": "public static void writePbsEntryPacketObjectArray(PbsOutputStream output,Object[] objects){\n  if (objects != null) {\n    output.writeInt(objects.length);\n    for (    Object entry : objects)     writePbsEntryPacket(output,(PbsEntryPacket)entry);\n  }\n else   output.writeInt(-1);\n}\n", "nl": "Write an object array of pbs entries to the stream"}
{"code": "public Builder cacheInMemory(boolean cacheInMemory){\n  this.cacheInMemory=cacheInMemory;\n  return this;\n}\n", "nl": "Sets whether loaded image will be cached in memory"}
{"code": "public AccountSetOfflineQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.setOffline\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public PhotosGetCommentsQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "private static boolean noResourceIncludedFieldsSpecified(IncludedFieldsParams typeIncludedFields){\n  return typeIncludedFields == null || typeIncludedFields.getParams().isEmpty();\n}\n", "nl": "Checks if a value has included fields for a resource"}
{"code": "@Deprecated public Builder cacheInMemory(){\n  cacheInMemory=true;\n  return this;\n}\n", "nl": "Loaded image will be cached in memory"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static void startLocalZkServer(){\n  try {\n    startLocalZkServer(DEFAULT_ZK_TEST_PORT);\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Failed to start ZK: \" + e);\n  }\n}\n", "nl": "Starts an empty local Zk instance on the default port"}
{"code": "protected MarketRemoveFromAlbumQuery albumIds(int... value){\n  return unsafeParam(\"album_ids\",value);\n}\n", "nl": "Collections ids to remove item from"}
{"code": "public static void writeStringToFile(String path,String toWrite,JavaSparkContext sc) throws IOException {\n  writeStringToFile(path,toWrite,sc.sc());\n}\n", "nl": "Write a String to a file (on HDFS or local) in UTF-8 format"}
{"code": "@Override public final synchronized void write(int ib) throws IOException {\n  dis.write(ib);\n}\n", "nl": "This method writes only one byte, even though it says int (non-Javadoc)"}
{"code": "public static void log(IStatus status){\n  SVNUIPlugin.getPlugin().getLog().log(status);\n}\n", "nl": "Convenience method for logging statuses to the plugin log"}
{"code": "public boolean isApplicable(){\n  final Document doc=((MainViewer)getDir().getMainViewer()).getDocument();\n  return doc.getNumberOfReads() > 0 && doc.getMeganFile().hasDataConnector();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private void stopCheckingStatus(){\n  executor.shutdownNow();\n  executor=Executors.newSingleThreadExecutor();\n  future=null;\n}\n", "nl": "Re-sets the executor and indicates the system is no longer checking the status of the transactions"}
{"code": "public void callback(String instanceId,String callback,String data){\n  callback(instanceId,callback,data,false);\n}\n", "nl": "Invoke JavaScript callback"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "final public static long updateCollection(Object id,V v,Class<? extends Bean> t,boolean adding){\n  String collection=getCollection(t);\n  if (collection != null && !\"none\".equals(collection)) {\n    return updateCollection(collection,id,v,adding);\n  }\n  return -1;\n}\n", "nl": "update the mongo data"}
{"code": "public NewsfeedGetMentionsQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n", "nl": "Set owner id"}
{"code": "FloatList(){\n  value=0.0F;\n  next=null;\n  prev=null;\n}\n", "nl": "Creates a new node"}
{"code": "public TextUnit createTextUnit(Long id,String name,String source,String note){\n  return createTextUnit(id,name,source,note,null,null,null);\n}\n", "nl": "Creates a textUnit to be used later to generate a XLIFF"}
{"code": "public static float calculatePercent(int downloadSize,int fileSize){\n  float num=(float)downloadSize / fileSize;\n  float percent=((float)(int)(num * 1000)) / 10;\n  return percent;\n}\n", "nl": "Download percentage calculation"}
{"code": "public AccountLookupContactsQuery mycontact(String value){\n  return unsafeParam(\"mycontact\",value);\n}\n", "nl": "Contact of a current user on a specified service"}
{"code": "public final boolean isOverridingTarget(){\n  return (myOverride & CFG_TARGET) != 0;\n}\n", "nl": "Returns true if the target is overridden"}
{"code": "private static void writeStringToOutput(String str,DataOutput out) throws IOException {\n  out.writeInt(str.length());\n  out.writeChars(str);\n}\n", "nl": "Write the given String to the given data output (Replacement for writeUTF)"}
{"code": "public Disk accelerate(Vector acceleration){\n  return new Disk(position,speed.add(acceleration),radius);\n}\n", "nl": "Modify the disk speed adding an acceleration vector"}
{"code": "public boolean isApplicable(){\n  for (  IDirector dir : ProjectManager.getProjects()) {\n    if (dir.getDirty())     return false;\n  }\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public Point3D(float x,float y,float z){\n  this.x=x;\n  this.y=y;\n  this.z=z;\n}\n", "nl": "Creates new 3d point with given coords"}
{"code": "public CompareWithHeadRevisionAction(){\n  super(SVNRevision.HEAD);\n}\n", "nl": "Creates a new compare action that will compare against the HEAD revision"}
{"code": "public static String millisecondsToString(long milliseconds){\n  return millisecondsToString(milliseconds,SIMPLE_DATE_FORMAT);\n}\n", "nl": "return date string from milliseconds"}
{"code": "public void typeRepeat(int key,int count) throws InterruptedException {\n  if (count <= 0) {\n    return;\n  }\n  for (int i=0; i < count; i++) {\n    type(key);\n  }\n}\n", "nl": "Type a key multiple times"}
{"code": "private Experiment createExperiment(String startTime,String endTime,String expSuffix){\n  return ExperimentFactory.createExperiment().setStartTime(startTime).setEndTime(endTime).setLabel(PREFIX_EXPERIMENT + TIMESTAMP_STR + expSuffix).setSamplingPercent(SAMPLING_PERCENT).setApplication(ApplicationFactory.createApplication().setName(PREFIX_APPLICATION + TIMESTAMP_STR));\n}\n", "nl": "Creates the experiment with provided startTime , endTime and experiment Label"}
{"code": "public boolean hasKey(String key){\n  return internalMap.containsKey(key);\n}\n", "nl": "Returns is the supplied key is set in the map"}
{"code": "private Stream<MultiTraversal> addRelatesPattern(String start,String casting,VarAdmin roleType,VarAdmin rolePlayer){\n  String roletypeName=roleType.getName();\n  String roleplayerName=rolePlayer.getName();\n  return Stream.of(MultiTraversal.create(Fragment.create(null,EDGE_BOUNDED,start,casting),Fragment.create(null,EDGE_UNBOUNDED,casting,start)),MultiTraversal.create(Fragment.create(null,EDGE_UNIQUE,casting,roleplayerName),Fragment.create(null,EDGE_BOUNDED,roleplayerName,casting)),MultiTraversal.create(Fragment.create(null,EDGE_UNIQUE,casting,roletypeName),Fragment.create(null,EDGE_UNBOUNDED,roletypeName,casting)));\n}\n", "nl": "Add some patterns where this variable is a relation relating the given roleplayer as the given roletype"}
{"code": "@RequestMapping(value=\"/train\",method=RequestMethod.GET) public String trainAndSave(){\n  String model=ClusteringService.train();\n  redis.opsForValue().set(key,model);\n  return model;\n}\n", "nl": "Trains the clustering algorithm"}
{"code": "public GroupsGetQuery filter(List<GroupsGetFilter> value){\n  return unsafeParam(\"filter\",value);\n}\n", "nl": "Types of communities to return"}
{"code": "private boolean resultExists(List<CodeMatchResult> lst,int value){\n  for (  CodeMatchResult s : lst) {\n    if (s.getLineNumber() == value) {\n      return true;\n    }\n  }\n  return false;\n}\n", "nl": "Helper to check if result exists in the collection based on line number"}
{"code": "public gaj(){\n}\n", "nl": "Creates a new instance of gaj"}
{"code": "public void show(){\n  if (!isVisible) {\n    textView.setVisibility(VISIBLE);\n    textView.startAnimation(fadeIn);\n    isVisible=true;\n  }\n}\n", "nl": "Starts fade in animation and shows text view"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"detach remoteServer=\");\n  final String url=np.getWordFileNamePunctuation();\n  np.matchIgnoreCase(\";\");\n  if (((megan.remote.RemoteServiceBrowser)getViewer()).closeRemoteService(url))   System.err.println(\"Service closed: \" + url);\n else   NotificationsInSwing.showError(getViewer().getFrame(),\"Failed to close service: \" + url);\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public void warning(SAXParseException exception){\n  warningCount++;\n  if (showWarnings && (errorCount + warningCount < maxMessages)) {\n    message(\"Warning\",exception);\n  }\n}\n", "nl": "SAX2 API"}
{"code": "public CM_MAY_LOGIN_INTO_GAME(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_MAY_LOGIN_INTO_GAME </tt> packet"}
{"code": "public static S2LatLngRect empty(){\n  return new S2LatLngRect(R1Interval.empty(),S1Interval.empty());\n}\n", "nl": "The canonical empty rectangle"}
{"code": "public PhotosSaveMarketAlbumPhotoQuery(VkApiClient client,UserActor actor,int groupId,String photo,int server,String hash){\n  super(client,\"photos.saveMarketAlbumPhoto\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  photo(photo);\n  server(server);\n  hash(hash);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static SpaceTypeDescriptor fromSerializableForm(Serializable versionedSerializableForm){\n  if (!(versionedSerializableForm instanceof TypeDescVersionedSerializable))   throw new IllegalArgumentException(\"wrapper must be an instance of \" + TypeDescVersionedSerializable.class.getName());\n  return ((TypeDescVersionedSerializable)versionedSerializableForm).getTypeDesc();\n}\n", "nl": "Reads the version header for the given serializable form and returned a SpaceTypeDescriptor matching that version"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static boolean hasNode(String url){\n  return url2node.containsKey(url);\n}\n", "nl": "does  node for this URL exist"}
{"code": "private boolean isValidItemIndex(int index){\n  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());\n}\n", "nl": "Checks whether intem index is valid"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"compute diversityRatio kmer=25 step=25 mindepth=10;\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public void releaseScan() throws SAException {\n  try {\n    if (iterator != null)     iterator.close();\n  }\n catch (  Exception ex) {\n    throw new SAException(ex);\n  }\n}\n", "nl": "release SLHolder for this scan"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show gapBetweenBars=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=circle;\");\n}\n", "nl": "action to be performed"}
{"code": "public static int randomNumberBetween(double begin,double end,RandomGenerator rng){\n  if (begin > end)   throw new IllegalArgumentException(\"Begin must not be less than end\");\n  return (int)begin + (int)(rng.nextDouble() * ((end - begin) + 1));\n}\n", "nl": "Generates a random integer between the specified numbers"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean selectedPicture(String headerName){\n  Intent intent=new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n  intent.setType(\"image/*\");\n  this.activity.startActivityForResult(Intent.createChooser(intent,(!headerName.equals(\"\") ? headerName : \"Magical Camera\")),SELECT_PHOTO);\n  return true;\n}\n", "nl": "This call the intent to selected the picture"}
{"code": "private void calcStackSize(List<BarEntry> yVals){\n  for (int i=0; i < yVals.size(); i++) {\n    float[] vals=yVals.get(i).getVals();\n    if (vals != null && vals.length > mStackSize)     mStackSize=vals.length;\n  }\n}\n", "nl": "calculates the maximum stacksize that occurs in the Entries array of this DataSet"}
{"code": "public void releaseAll(){\n  controller.mouseRelease(InputEvent.BUTTON1_MASK);\n  controller.mouseRelease(InputEvent.BUTTON2_MASK);\n  controller.mouseRelease(InputEvent.BUTTON3_MASK);\n}\n", "nl": "Release 3 primary mouse masks: 1, 2, and 3"}
{"code": "public void makeOneTimeUse(){\n  used=new AtomicBoolean(false);\n}\n", "nl": "Make this observer usable exactly one time"}
{"code": "public static void pickImage(Context context,android.support.v4.app.Fragment fragment){\n  pickImage(context,fragment,REQUEST_PICK);\n}\n", "nl": "Pick image from a support library Fragment"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public Class<? extends Task> taskClass(){\n  return PostgreSQLSinkTask.class;\n}\n", "nl": "Returns class of task"}
{"code": "@NonNull public Optional<T> or(@NonNull Optional<T> alternative){\n  return isDefined() ? this : alternative;\n}\n", "nl": "Changes this to given alternative if the value does not exist, just returns itself if the value exists"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static void show(Context context){\n  show(context,null,false);\n}\n", "nl": "show the mDialogTextView"}
{"code": "public void removeFifoXtnInfoForEntry(IEntryHolder eh){\n  FifoXtnEntryInfo Xe=new FifoXtnEntryInfo(eh.getUID(),eh.getSCN(),eh.getOrder());\n  _terminatingXtnsEntries.remove(Xe);\n}\n", "nl": "remove fifo xtn info for entry MUST be called  when entry is locked"}
{"code": "@deprecated public final TimeZone parse(String text,ParsePosition pos){\n  return parse(Style.GENERIC_LOCATION,text,pos,true,null);\n}\n", "nl": "/*     "}
{"code": "public static Edit fromString(String string) throws IOException {\n  return parse(new NexusStreamParser(new StringReader(string)));\n}\n", "nl": "attempts to parse an edit string"}
{"code": "private Bitmap addThumbnailToCache(String imageKey,Bitmap bitmap,String path,int px){\n  Bitmap thumbnail=ThumbnailUtils.extractThumbnail(bitmap,px,px);\n  thumbnail=BitmapUtils.rotateImage(thumbnail,path);\n  addBitmapToCache(imageKey,thumbnail);\n  return thumbnail;\n}\n", "nl": "Add thumbnail to cache"}
{"code": "public static String formatCurrency(BigDecimal price,String isoCode,Locale locale,int maximumFractionDigits){\n  return formatCurrency(price.doubleValue(),isoCode,locale,maximumFractionDigits);\n}\n", "nl": "Formats a BigDecimal into a properly formatted currency string based on isoCode and Locale"}
{"code": "public Calculable(String id,double value,long when){\n  this(id,value);\n  setWhen(when);\n}\n", "nl": "Create a new Calculable"}
{"code": "@Override public int hashCode(){\n  int result=carbonTableIdentifier.hashCode();\n  result=31 * result + columnIdentifier.hashCode();\n  return result;\n}\n", "nl": "overridden hashcode method"}
{"code": "public VideoCreateCommentQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n", "nl": "Set guid"}
{"code": "public StorageSetQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n", "nl": "Set user id"}
{"code": "public static void xml(String xml){\n  printer.xml(xml);\n}\n", "nl": "Formats the json content and print it"}
{"code": "public AdsGetTargetGroupsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Set extended"}
{"code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0d,0.001d,0.010d,0.025d,0.050d,0.3413d,0.3415d,0.999d,0.990d,0.975d,0.950d,0.900d,1d};\n}\n", "nl": "Creates the default inverse cumulative probability test input values"}
{"code": "private long factorial(int n){\n  long result=1;\n  for (int i=2; i <= n; i++) {\n    result*=i;\n  }\n  return result;\n}\n", "nl": "Exact direct multiplication implementation to test against"}
{"code": "@Override public List<User> searchUser(User user){\n  return sessionTemplate.selectList(NAMESPACE + \".searchUser\",user);\n}\n", "nl": "Search user by params"}
{"code": "public AdsGetAccountsQuery(VkApiClient client,UserActor actor){\n  super(client,\"ads.getAccounts\",Utils.buildParametrizedType(List.class,Account.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void showDialog(JTextComponent target){\n  if (dlg == null) {\n    dlg=new ReplaceDialog(target,FindReplaceActions.this);\n  }\n  dlg.setVisible(true);\n}\n", "nl": "Show the dialog"}
{"code": "@Deprecated public Builder cacheOnDisc(){\n  return cacheOnDisk(true);\n}\n", "nl": "Loaded image will be cached on disk"}
{"code": "private static Integer[] modify(Integer[] order,Integer[] array){\n  Integer[] tmp=new Integer[order.length];\n  int pos=0;\n  for (  Integer id : order) {\n    if (id < array.length)     tmp[pos++]=array[id];\n  }\n  return tmp;\n}\n", "nl": "modify an array according to the given order"}
{"code": "private void createBody(soot.SootMethod sootMethod){\n  body=soot.jimple.Jimple.v().newBody(sootMethod);\n  sootMethod.setActiveBody(body);\n}\n", "nl": "create body and make it be active"}
{"code": "public ParticleSystem(Activity a,int maxParticles,int drawableResId,long timeToLive,ViewGroup parentView){\n  this(parentView,maxParticles,ContextCompat.getDrawable(a,drawableResId),timeToLive);\n}\n", "nl": "Creates a particle system with the given parameters"}
{"code": "public static String removeSpaces(String str){\n  return removeRegex(str,\"[\\\\ ]\");\n}\n", "nl": "Removes all spaces from a string"}
{"code": "public MarketEditCommentQuery editComment(UserActor actor,int ownerId,int commentId){\n  return new MarketEditCommentQuery(getClient(),actor,ownerId,commentId);\n}\n", "nl": "Chages item comment's text"}
{"code": "private boolean hasSideEffectsOrCallsSink(SootMethod method){\n  return hasSideEffectsOrCallsSink(method,new HashSet<SootMethod>());\n}\n", "nl": "Checks whether the given method or one of its transitive callees has side-effects or calls a sink method"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public CMULexicon(String basename){\n  this(basename,true);\n}\n", "nl": "Creates the CMU Lexicon which is a binary lexicon"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set groupNodes=none;\");\n}\n", "nl": "action to be performed"}
{"code": "public PhotosGetAlbumsCountQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAlbumsCount\",Integer.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public WallSearchQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public String convertToLowerCase(String table){\n  return table.toLowerCase();\n}\n", "nl": "returns the given string in lowercase"}
{"code": "public static void w(String tag,String msg){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  Log.w(tag,msg);\n}\n", "nl": "Send a WARNING log message"}
{"code": "@Override public final void validate() throws ConfigurationException {\n  if (opcItemName == null) {\n    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,\"Parameter \\\"opcItemName\\\" must not be null\");\n  }\n}\n", "nl": "Validates the configuration of the hardwareAddress"}
{"code": "public void post(Object event){\n  eventBus.post(event);\n  Logs.info(\"published an event({})\",event);\n}\n", "nl": "Post an event"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_COMPLETE_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300616,value0);\n}\n", "nl": "Quest complete: %0"}
{"code": "@Override public void undo(Transaction tx){\n}\n", "nl": "Does nothing, because compensation log record is redo-Only"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "protected final boolean isClosed(){\n  return m_closed;\n}\n", "nl": "Check if the session is closed"}
{"code": "public boolean isPartitionedSpace(){\n  return _clusterInfo.isPartitioned();\n}\n", "nl": "return true if space is part of a partitioned cluster"}
{"code": "static void fwPrint(String s,int size){\n  s+=\"                                             \";\n  s=s.substring(0,size);\n  System.out.print(s);\n}\n", "nl": "print a string that is a fixed width of size used in debugging"}
{"code": "private void addToExceptionList(soot.jimple.Stmt from,soot.jimple.Stmt to,soot.jimple.Stmt with,soot.SootClass exceptionClass){\n  if (exceptionTable == null) {\n    exceptionTable=new ArrayList<Trap>();\n  }\n  soot.Trap trap=soot.jimple.Jimple.v().newTrap(exceptionClass,from,to,with);\n  exceptionTable.add(trap);\n}\n", "nl": "add exceptions to a list that gets added at end of method"}
{"code": "@Override public void onBindViewHolder(T holder,int position){\n  ItemIndex index=getItemIndex(position);\n  onBindViewHolderItemType(holder,index,index.getType());\n}\n", "nl": "onBind Methinds overwrite each one to bind during execution"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.ByName.toString() + \";zoom axis=both what=fit;\");\n}\n", "nl": "action to be performed"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_CHECK_INSTANCE_COOL_TIME(){\n  return new SM_SYSTEM_MESSAGE(1400032);\n}\n", "nl": "%0: %1(%2)"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.0,0.0,0.0001,0.25 / 1.75,0.4999 / 1.75,0.5 / 1.75,0.5001 / 1.75,0.75 / 1.75,1.5 / 1.75,1.7499 / 1.75,1.0,1.0};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public void selectAll(boolean select){\n  dir.getMainViewer().selectAllNodes(select);\n}\n", "nl": "set select state of all objects"}
{"code": "public void clear(AbsoluteTableIdentifier absoluteTableIdentifier){\n  tableLockMap.remove(absoluteTableIdentifier);\n  tableBlocksMap.remove(absoluteTableIdentifier);\n}\n", "nl": "remove all the details of a table this will be used in case of drop table"}
{"code": "private void removeKey(String key){\n  Cacheable cacheable=lruCacheMap.get(key);\n  if (null != cacheable) {\n    currentSize=currentSize - cacheable.getMemorySize();\n  }\n  lruCacheMap.remove(key);\n  LOGGER.info(\"Removed level entry from InMemory level lru cache :: \" + key);\n}\n", "nl": "This method will remove the key from lru cache"}
{"code": "public StorageSetQuery(VkApiClient client,UserActor actor,String key){\n  super(client,\"storage.set\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  key(key);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public EncryptionKeyPair(int baseKey){\n  this.baseKey=baseKey;\n  this.keys=new byte[2][];\n  this.keys[SERVER]=new byte[]{(byte)(baseKey & 0xff),(byte)((baseKey >> 8) & 0xff),(byte)((baseKey >> 16) & 0xff),(byte)((baseKey >> 24) & 0xff),(byte)0xa1,(byte)0x6c,(byte)0x54,(byte)0x87};\n  this.keys[CLIENT]=new byte[this.keys[SERVER].length];\n  System.arraycopy(this.keys[SERVER],0,this.keys[CLIENT],0,this.keys[SERVER].length);\n  this.lastUpdate=System.currentTimeMillis();\n}\n", "nl": "Initializes client/server encryption keys based on baseKey"}
{"code": "public void addNewSpawnMap(SpawnMap spawnMap){\n  if (templates == null) {\n    templates=new ArrayList<SpawnMap>();\n  }\n  templates.add(spawnMap);\n}\n", "nl": "Used by Event Service to add additional spawns"}
{"code": "public void registerListener(Condition condition,int cPriority,EventListener listener){\n  getListenerForCondition(condition,cPriority).registerListener(listener);\n}\n", "nl": "Registers a listener for a particular condition with a given priority for the condition listener"}
{"code": "public ByteBuffer toByteBuffer(){\n  ByteBuffer buff=ByteBuffer.allocate(totalsize).put(prefix);\n  for (int i=0; i < content.size(); ++i)   buff.put(content.get(i));\n  return buff;\n}\n", "nl": "Convert this Ciptext to a ByteBuffer"}
{"code": "public void stopUsingGPS(){\n  if (locationManager != null) {\n    locationManager.removeUpdates(LocationTracker.this);\n  }\n}\n", "nl": "Stop using GPS listener Calling this function will stop using GPS in your app"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set useColors=\");\n  boolean useColors=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.setUseColors(useColors);\n}\n", "nl": "parses the given command and executes it"}
{"code": "protected GroupsIsMemberQueryWithUserIdsExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Return an extended response with additional fields"}
{"code": "public Builder stepsSubtitles(String[] stepsSubtitles){\n  this.stepsSubtitles=stepsSubtitles;\n  return this;\n}\n", "nl": "Set the subtitles of the steps"}
{"code": "@Override public void onPaint(ViewTransform transform,Graphics2D g){\n  int alpha=getPulsatingAlpha(getProgress());\n  Color color=new Color(mTextColor.getRed(),mTextColor.getGreen(),mTextColor.getBlue(),alpha);\n  g.setColor(color);\n  g.drawString(mText,mCanvasWidth - mTextWidth,mTextHeight);\n}\n", "nl": "Paint method for the animation"}
{"code": "void build(int bezierWidth,int bezierHeight){\n  this.bezierWidth=bezierWidth;\n  this.bezierHeight=bezierHeight;\n}\n", "nl": "Build bezier view with given width and height"}
{"code": "private void onConnect(){\n  connectionState=ConnectionState.Connected;\n  checkForUpdatedFlight=true;\n  subscribe(String.format(trafficAlertChannel,flightId));\n  subscribe(String.format(situationalAwarenessChannel,flightId));\n}\n", "nl": "When connected, subscribe to the necessary channels to get properly notified"}
{"code": "public OrdersGetByIdQuery(VkApiClient client,UserActor actor){\n  super(client,\"orders.getById\",Utils.buildParametrizedType(List.class,Order.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private static boolean isSingleFileScope(EnumSet<Scope> scopes){\n  if (scopes.size() != 1) {\n    return false;\n  }\n  final Scope scope=scopes.iterator().next();\n  return scope == Scope.JAVA_FILE || scope == Scope.RESOURCE_FILE || scope == Scope.MANIFEST || scope == Scope.PROGUARD_FILE || scope == Scope.OTHER;\n}\n", "nl": "Returns true if the given analysis scope is adequate for single-file analysis"}
{"code": "public AdsGetTargetingStatsQuery adPlatform(String value){\n  return unsafeParam(\"ad_platform\",value);\n}\n", "nl": "Set ad platform"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static void createRMA6FileFromBLASTPair(String creator,String blastFile1,String blastFile2,BlastFileFormat format,String queryFile1,String queryFile2,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {\n  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,format,doc.getBlastMode(),new String[]{blastFile1,blastFile2},new String[]{queryFile1,queryFile2},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);\n  rma6Creator.parseFiles(progressListener);\n}\n", "nl": "create an RMA6 file from a pair of BLAST files"}
{"code": "public static Record createRecord(ModelRecord modelRecord,Map<String,Object> fields) throws DataFileException {\n  Record record=new Record(modelRecord,fields);\n  return record;\n}\n", "nl": "Creates new Record from existing fields Map"}
{"code": "private String removeIllegalFileCharacters(String string){\n  return string.replaceAll(\"/|\\\\\\\\|:|\\\\*|\\\\?|\\\"|<|>|\\\\||\\\\s\",\"\");\n}\n", "nl": "Removes all illegal file characters <tt>/\\:*?\"<>|</tt>"}
{"code": "public GroupsEditManagerQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.editManager\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void onSecondaryPointerUp(MotionEvent ev){\n  final int pointerIndex=MotionEventCompat.getActionIndex(ev);\n  final int pointerId=MotionEventCompat.getPointerId(ev,pointerIndex);\n  if (pointerId == mActivePointerId) {\n    final int newPointerIndex=pointerIndex == 0 ? 1 : 0;\n    mActivePointerId=MotionEventCompat.getPointerId(ev,newPointerIndex);\n  }\n}\n", "nl": "on not active finger up"}
{"code": "@RequestMapping(method=RequestMethod.POST,value=\"{clientVersion}/orgUnits/{id}/activities\") @ResponseBody public String saveActivityReport(@PathVariable int id,@RequestBody ActivityValue activityValue) throws NotAllowedException {\n  activityReportingService.saveActivityReport(getUnit(id),activityValue,0);\n  return ACTIVITY_REPORT_UPLOADED;\n}\n", "nl": "Save activity report for unit"}
{"code": "public X509KeyManager removeDelegate(String alias){\n  return delegates.remove(alias);\n}\n", "nl": "Remove a previously added delegate"}
{"code": "public void resourceCreated(ISVNRemoteFolder parent,String resourceName){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceCreated(parent,resourceName);\n  }\n}\n", "nl": "A resource has been deleted"}
{"code": "private static boolean ensureCurrent(LeasedResource resource){\n  return resource.getExpiration() > SystemTime.timeMillis();\n}\n", "nl": "Utility method that check for valid resource"}
{"code": "public PhotosGetQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"photos.get\",GetExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void closeThriftWriter(){\n  if (null != dictionaryThriftWriter) {\n    dictionaryThriftWriter.close();\n  }\n}\n", "nl": "close dictionary thrift writer"}
{"code": "public void connect(){\n  connect(null);\n}\n", "nl": "Connect without reconnect if connected"}
{"code": "protected void checkArray(String msg,Fraction[] m,Fraction[] n){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors have different lengths\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i],n[i]);\n  }\n}\n", "nl": "verifies that two vectors are equals"}
{"code": "public static int convertDPItoPixels(Context context,int dpi){\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(dpi * scale + 0.5f);\n}\n", "nl": "Convert a size in dp to a size in pixels"}
{"code": "public static StorableHeadphoneFence pluggingIn(){\n  return new StorableHeadphoneFence(PLUGGING_IN);\n}\n", "nl": "Creates a storable headphone fence which will be valid (during around 5seconds) when headphones are plugged in to the device"}
{"code": "public VideoSearchQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n", "nl": "Set extended"}
{"code": "public boolean hasErrors(){\n  return myHaveExceptions || myMessages != null || myClassesWithIncorrectFormat != null || myBrokenClasses != null || myMissingClasses != null || myMissingSize || myMissingFragments != null;\n}\n", "nl": "Are there any logged errors during the render? (warnings are ignored)"}
{"code": "public boolean isApplicable(){\n  return ClassificationManager.get(getViewer().getClassName(),false).getId2Rank().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void ae(String str1,String str2){\n  assertEquals(str1,str2);\n}\n", "nl": "Short for assertEquals"}
{"code": "public void putViewModel(int key,MvvmViewModel cacheViewModel,Context context){\n  getFragment(context).put(key,cacheViewModel);\n}\n", "nl": "Put a ViewModel into the cache"}
{"code": "private boolean accessPathMatches(AccessPath sourceAccessPath,AccessPathTuple apt){\n  if (apt.getFields() == null || apt.getFields().length == 0 || sourceAccessPath == null)   return true;\n  for (int i=0; i < apt.getFields().length; i++) {\n    if (i >= sourceAccessPath.getFieldCount())     return sourceAccessPath.getTaintSubFields();\n    if (!sourceAccessPath.getFields()[i].getName().equals(apt.getFields()[i]))     return false;\n  }\n  return true;\n}\n", "nl": "Checks whether the given access path matches the given definition"}
{"code": "private void blackmanHarris4sMin(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.36;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));\n}\n", "nl": "Fill an array with the values of a minimum 4-sample Blackman-Harris window function"}
{"code": "@Override public void onUIRefreshBegin(PtrFrameLayout frame){\n  mDrawable.setAlpha(255);\n  mDrawable.start();\n}\n", "nl": "perform refreshing UI"}
{"code": "public boolean hasErrors(){\n  return errorDescription != null;\n}\n", "nl": "Returns <code>true</code> if there were errors while reading tokens"}
{"code": "public static void sendFCMTokenToServer(Context context,boolean sent){\n  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());\n  pref.edit().putBoolean(SENT_TOKEN_TO_SERVER,sent).apply();\n}\n", "nl": "Check if token is null"}
{"code": "public void logStatisticsAsTableExecutor(){\n}\n", "nl": "Below method will be used to show statistic log as table"}
{"code": "public AirMapSpecialUseProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n", "nl": "Initialize an AirMapSpecialUseProperties from JSON"}
{"code": "public void add(PushLog log){\n  configPushLogDao.save(log);\n  if (!configPushLogDao.bindApp(log)) {\n    Logs.error(\"failed to bind app of log({})\",log);\n  }\n}\n", "nl": "Save the config"}
{"code": "final public void deny(){\n  deny(null,null);\n}\n", "nl": "show deny page to end-user <br> if the request is AJAX, then response json back to front"}
{"code": "private boolean hasSideEffectsOrReadsThis(SootMethod method){\n  return hasSideEffectsOrReadsThis(method,new HashSet<SootMethod>());\n}\n", "nl": "Checks whether the given method or one of its transitive callees has side-effects or calls a sink method"}
{"code": "public void scroll(int itemsToScroll,int time){\n  int distance=itemsToScroll * getItemHeight() - scrollingOffset;\n  scroller.scroll(distance,time);\n}\n", "nl": "Scroll the wheel"}
{"code": "public LikesGetListQuery(VkApiClient client,UserActor actor,LikesType type){\n  super(client,\"likes.getList\",GetListResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static IProgressMonitor monitorFor(IProgressMonitor monitor){\n  if (monitor == null)   return new NullProgressMonitor();\n  return monitor;\n}\n", "nl": "Return a NullProgressMonitor if monitor is null or monitor itself otherwise"}
{"code": "public void remove(){\n}\n", "nl": "not implemented"}
{"code": "protected void init(){\n  checkLegal();\n  calcYValueCount();\n  calcMinMax(0,mYValCount);\n  calcXValMaximumLength();\n}\n", "nl": "performs all kinds of initialization calculations, such as min-max and value count and sum"}
{"code": "public MessagesIsMessagesFromGroupAllowedQuery(VkApiClient client,Actor actor,int groupId,int userId){\n  super(client,\"messages.isMessagesFromGroupAllowed\",IsMessagesFromGroupAllowedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public NotesEditQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n", "nl": "Set privacy comment"}
{"code": "public boolean isSetRootMessageId(){\n  return this.rootMessageId != null;\n}\n", "nl": "Returns true if field rootMessageId is set (has been assigned a value) and false otherwise"}
{"code": "public boolean isFacade(){\n  return _facade;\n}\n", "nl": "Returns if this is a facade"}
{"code": "public VideoGetAlbumsByVideoQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){\n  super(client,\"video.getAlbumsByVideo\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private boolean isDisplayingFolderView(){\n  return (folderMode && (recyclerView.getAdapter() == null || recyclerView.getAdapter() instanceof FolderPickerAdapter));\n}\n", "nl": "Check if displaying folders view"}
{"code": "public Builder stepNumberTextColor(int stepNumberTextColor){\n  this.stepNumberTextColor=stepNumberTextColor;\n  return this;\n}\n", "nl": "Set the text color of the left circles"}
{"code": "public boolean rename(IFileManagerComposite composite){\n  return false;\n}\n", "nl": "Renames the File/Folders"}
{"code": "public boolean isLoading(){\n  return state.equals(LOADING);\n}\n", "nl": "Check if loading state is shown"}
{"code": "public AionClientPacket handle(ByteBuffer data,AionConnection client){\n  State state=client.getState();\n  int id=data.getShort() & 0xffff;\n  data.position(data.position() + 3);\n  return getPacket(state,id,data,client);\n}\n", "nl": "Reads one packet from given ByteBuffer"}
{"code": "public static double ssError(double[] predictedValues,double[] targetAttribute){\n  double ret=0;\n  for (int i=0; i < predictedValues.length; i++) {\n    ret+=Math.pow(targetAttribute[i] - predictedValues[i],2);\n  }\n  return ret;\n}\n", "nl": "How much of the variance is NOT explained by the regression"}
{"code": "public ColorOverlaySubfilter(int depth,float red,float green,float blue){\n  this.colorOverlayDepth=depth;\n  this.colorOverlayRed=red;\n  this.colorOverlayBlue=blue;\n  this.colorOverlayGreen=green;\n}\n", "nl": "Initialize Color Overlay Subfilter"}
{"code": "public boolean hasSpecificGroups(){\n  return _specificGroups != null;\n}\n", "nl": "Gets if this mapping has specific groups or it is representing all groups"}
{"code": "public static boolean isExternalStorageWritable(){\n  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());\n}\n", "nl": "Check if external storage is writable or not"}
{"code": "public static boolean isInTinkerPatchServiceProcess(Context context){\n  String process=getProcessName(context);\n  String service=TinkerServiceInternals.getTinkerPatchServiceName(context);\n  if (service == null || service.length() == 0) {\n    return false;\n  }\n  return process.equals(service);\n}\n", "nl": "add service cache"}
{"code": "public XIntArray(byte bits){\n  segments=new int[0][];\n  SEGMENT_BITS=bits;\n  SEGMENT_SIZE=(1 << (SEGMENT_BITS));\n  SEGMENT_MASK=SEGMENT_SIZE - 1;\n}\n", "nl": "constructs a new array using the given number of bits as segmentation key (in the range 10 to 30)"}
{"code": "public PlayerLocale(){\n  GetPlayerMessageOuterClass.GetPlayerMessage.PlayerLocale.Builder builder=GetPlayerMessageOuterClass.GetPlayerMessage.PlayerLocale.newBuilder();\n  builder.setCountry(Locale.getDefault().getCountry()).setLanguage(Locale.getDefault().getLanguage());\n  playerLocale=builder.build();\n}\n", "nl": "Contructor to use the default Locale"}
{"code": "public void stopExecution(){\n  interrupt();\n}\n", "nl": "Stop the thread's execution by interrupting it without marking the flag as not alive"}
{"code": "public void pushDirname(File directory){\n  if (!directory.isDirectory()) {\n    throw new IllegalArgumentException(\"Only directories may be pushed!\");\n  }\n  mDirectories.insert(directory.getName(),0);\n  mCurrentDir=directory;\n}\n", "nl": "Pushes a directory to the drop down list"}
{"code": "@Override public void reset(){\n  dataIter=delimitedData.iterator();\n}\n", "nl": "Reset record reader iterator"}
{"code": "public static void apply(Taxa taxa,Distances distances,PhyloTreeView treeView){\n  if (instance == null)   instance=new UPGMA();\n  instance.computeUPMATree(taxa,distances,treeView.getPhyloTree());\n  instance.embedTree(treeView);\n}\n", "nl": "apply the UPGMA algorithm"}
{"code": "public PhotosGetCommentsQueryWithExtended accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n", "nl": "Set access key"}
{"code": "public int addAdjustment(GenericValue adjustment){\n  itemAdjustments.add(adjustment);\n  return itemAdjustments.indexOf(adjustment);\n}\n", "nl": "Add an adjustment to the order item; don't worry about setting the orderId, orderItemSeqId or orderAdjustmentId; they will be set when the order is created"}
{"code": "public WidgetsGetCommentsQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Set fields"}
{"code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showAxes=\" + (!isSelected()) + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public GroupsIsMemberQueryWithUserIds(VkApiClient client,String groupId,List<Integer> userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatus.class));\n  groupId(groupId);\n  userIds(userIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void load(String fileName,String mode) throws IOException {\n  this.fileName=fileName;\n  this.readerWriter=new InputOutputReaderWriter(fileName,mode);\n  headerSectionRMA6.read(readerWriter);\n  readerWriter.seek(FooterSectionRMA6.readStartFooterSection(readerWriter));\n  footerSectionRMA6.read(readerWriter);\n}\n", "nl": "load an existing file"}
{"code": "public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){\n  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));\n  if (headers != null)   request.setHeaders(headers);\n  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);\n}\n", "nl": "Perform a HTTP HEAD request and track the Android Context which initiated the request with customized headers"}
{"code": "public void addAnnouncementToList(Timestamp unixTime,String announcement){\n  this.announcementList.put(unixTime,announcement);\n}\n", "nl": "This method will add a new announcement to the list"}
{"code": "public MessagesGetByIdQuery(VkApiClient client,Actor actor,int... messageIds){\n  super(client,\"messages.getById\",GetByIdResponse.class);\n  accessToken(actor.getAccessToken());\n  messageIds(messageIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void repositoryRemoved(ISVNRepositoryLocation repository){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.repositoryRemoved(repository);\n  }\n}\n", "nl": "signals all listener that we have removed a repository"}
{"code": "@Override @Test public void testInverseCumulativeProbabilities(){\n  RealDistribution dist=getDistribution();\n  for (  double x : getCumulativeTestValues()) {\n    assertEquals(1,dist.inverseCumulativeProbability(x),0);\n  }\n}\n", "nl": "Override default test, verifying that inverse cum is constant"}
{"code": "public void dumpBinary(DataOutputStream os) throws IOException {\n  sampleInfo.dumpBinary(os);\n  os.writeInt(samples.length);\n  for (int i=0; i < samples.length; i++) {\n    samples[i].dumpBinary(os);\n  }\n}\n", "nl": "Dumps this sample set to the given stream"}
{"code": "public static Bitmap normalize(Context context,Uri selectedImage,int maxWidth,int maxHeight){\n  Bitmap bm;\n  bm=getImageResized(context,selectedImage,maxWidth,maxHeight);\n  bm=getImageRotatedByMetadata(context,bm,selectedImage);\n  return bm;\n}\n", "nl": "Normalize a bitmap to specific size"}
{"code": "public static void hideSoftKeyboard(Activity activity){\n  View view=activity.getWindow().peekDecorView();\n  if (view != null) {\n    InputMethodManager inputmanger=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);\n    inputmanger.hideSoftInputFromWindow(view.getWindowToken(),0);\n  }\n}\n", "nl": "Hide soft keyboard"}
{"code": "private boolean stopIndicate(){\n  return bleManager.stopIndicate(UUID_SERVICE,UUID_INDICATE);\n}\n", "nl": "stop indicate"}
{"code": "public Builder addColumnCategorical(String name,List<String> stateNames){\n  return addColumn(new CategoricalMetaData(name,stateNames));\n}\n", "nl": "Add a Categorical column, with the specified state names"}
{"code": "public void resetTracking(){\n  totalTime=0;\n  drawCycles=0;\n}\n", "nl": "RESET PERFORMANCE TRACKING FIELDS"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set useLCA=\" + (!isSelected()) + \" cName=\"+ cName+ \";\");\n}\n", "nl": "action to be performed"}
{"code": "public PhotosEditAlbumQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"photos.editAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static char highSurrogate(int c){\n  return (char)(((c - 0x00010000) >> 10) + 0xD800);\n}\n", "nl": "Returns the high surrogate of a supplemental character"}
{"code": "public static boolean isWindowsLookAndFeel(){\n  return UIUtils.isWindowsLookAndFeel();\n}\n", "nl": "Determines if current L&F is WindowsLookAndFeel"}
{"code": "public static String millisToString(long millis){\n  return Strings.millisToString(millis,false);\n}\n", "nl": "Convert time to a string"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void showError(Drawable errorImageDrawable,String errorTextContent,String errorButtonText,OnClickListener onClickListener){\n  switchState(ERROR,errorImageDrawable,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());\n}\n", "nl": "Show error view with a button when something goes wrong and prompting the user to try again"}
{"code": "public static int byteToUInt(byte b){\n  return b & 0xFF;\n}\n", "nl": "Returns the unsigned value of a byte"}
{"code": "@Override public void undo(Transaction tx){\n  LogSeqNum lsn=tx.recoveryMgr().logLogicalAbort(this.txNum,this.lsn);\n  VanillaDb.logMgr().flush(lsn);\n}\n", "nl": "Appends a Logical Abort Record to indicate the logical operation has be aborted"}
{"code": "public void hold(int key,int duration) throws InterruptedException {\n  press(key);\n  if (duration >= 0) {\n    Thread.sleep(duration);\n  }\n  release(key);\n}\n", "nl": "Hold a key for a certain duration"}
{"code": "public static boolean isDarkTheme(Context context,boolean current){\n  return resolveBoolean(context,R.attr.themeDark,current);\n}\n", "nl": "Gets dialog type (Light/Dark) from current theme"}
{"code": "public UsersSearchQuery sex(UsersSearchSex value){\n  return unsafeParam(\"sex\",value);\n}\n", "nl": "Set sex"}
{"code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n", "nl": "Creates a new executor object for spawning worker threads"}
{"code": "protected void moveToPrimary(){\n  beforeSpaceModeChange(SpaceMode.PRIMARY);\n  setSpaceMode(SpaceMode.PRIMARY);\n  afterSpaceModeChange(SpaceMode.PRIMARY);\n}\n", "nl": "Change space mode to primary"}
{"code": "public boolean separates(BitSet H){\n  return A.intersects(H) && B.intersects(H);\n}\n", "nl": "returns true, if split separates the given set of taxa"}
{"code": "public void testAddActivity() throws Exception {\n  final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyActivity.java\",\"src/com/example/DummyActivity.java\");\n  myFixture.configureFromExistingVirtualFile(file);\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,ADD_ACTIVITY_TO_MANIFEST);\n  assertNotNull(action);\n  action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());\n  myFixture.checkResultByFile(\"AndroidManifest.xml\",\"intentions/DummyActivity_manifest_after.xml\",true);\n}\n", "nl": "Test that \"add activity\" quick intention does show up and works"}
{"code": "public ImportCSVWindow(JFrame parent){\n  super();\n  if (parent != null)   setLocationRelativeTo(parent);\n else   setLocation(300,300);\n  setSize(330,450);\n  setModal(true);\n}\n", "nl": "setup and display the import csv window"}
{"code": "public NotesAddQuery(VkApiClient client,UserActor actor,String title,String text){\n  super(client,\"notes.add\",Integer.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n  text(text);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void inflateConnectedBackground(){\n  if (mConnectedBackground != R.color.connected_color) {\n    connectivityView.setBackgroundColor(ColorUtil.getColorWrapper(mContext,mConnectedBackground));\n  }\n}\n", "nl": "Set the connectivity background color when phone is connected"}
{"code": "public static void warnInfo(String msg){\n  warnInfo(\"zhibo\",msg);\n}\n", "nl": "author  hhj TODO"}
{"code": "public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {\n  executor.execute(this,space,txn,readModifier,max);\n}\n", "nl": "Accept the query executor"}
{"code": "public FixedSizeSwapRedoLogFile(FixedSizeSwapRedoLogFileConfig config){\n  this._memoryMaxPackets=config.getMemoryMaxPackets();\n  this._externalStorage=config.getRedoLogFileStorage();\n  this._fetchBatchSize=config.getFetchBatchSize();\n  if (_logger.isLoggable(Level.CONFIG)) {\n    _logger.config(\"FixedSizeSwapRedoLogFile created:\" + \"\\n\\tmemoryMaxPackets = \" + _memoryMaxPackets + \"\\n\\tfetchBatchSize = \"+ _fetchBatchSize);\n  }\n}\n", "nl": "Constructs a fixed size swap redo log file"}
{"code": "public void clickDropDownOption(SiteAdminButtons button){\n  webDriver.findElement(button.getLocator()).click();\n}\n", "nl": "Clicks on button in dropdown on Siteadmin action bar"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public String revParse(String ref) throws RepoException {\n  return simpleCommand(\"rev-parse\",ref).getStdout().trim();\n}\n", "nl": "Resolves a git reference to the SHA-1 reference"}
{"code": "public static Bitmap scaleImage(Bitmap org,float scaleWidth,float scaleHeight){\n  if (org == null) {\n    return null;\n  }\n  Matrix matrix=new Matrix();\n  matrix.postScale(scaleWidth,scaleHeight);\n  return Bitmap.createBitmap(org,0,0,org.getWidth(),org.getHeight(),matrix,true);\n}\n", "nl": "scale image"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static boolean removeFromCache(String imageUri,DiscCacheAware discCache){\n  File image=discCache.get(imageUri);\n  return image.delete();\n}\n", "nl": "Removed cached image file from disc cache (if image was cached in disc cache before)"}
{"code": "protected MarketGetByIdQueryWithExtended itemIds(String... value){\n  return unsafeParam(\"item_ids\",value);\n}\n", "nl": "Items ID"}
{"code": "protected boolean isMockTarget(){\n  return mockDockerHost != null;\n}\n", "nl": "Is the test targeting a mock docker server or a real one?"}
{"code": "public static String filterMessage(String message){\n  for (  String word : message.split(\" \")) {\n    if (isForbiddenWord(word)) {\n      message=message.replace(word,ENCODED_BAD_WORD);\n    }\n  }\n  return message;\n}\n", "nl": "Filters chatmessages"}
{"code": "public boolean isReady(){\n  return this.record.isReady();\n}\n", "nl": "Return whether the list data has been loaded from the server"}
{"code": "public SenseComparator(){\n}\n", "nl": "Creates a new instance of SenseComparator"}
{"code": "public static boolean isEmpty(String str){\n  if (str == null || str.length() == 0 || str.equalsIgnoreCase(\"null\") || str.isEmpty() || str.equals(\"\")) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n", "nl": "return if str is empty"}
{"code": "@deprecated public int codePointLength(CharSequence s){\n  return Character.codePointCount(s,0,s.length());\n}\n", "nl": "/*    "}
{"code": "public void reset(){\n  resetStatus();\n}\n", "nl": "call it when you want to reset all;"}
{"code": "public static Observable<GoogleApiClient> observable(Context context,Api api,Api.ApiOptions.HasOptions options){\n  return GoogleApiClientObservable.create(context.getApplicationContext(),new ApiWithOptions(api,options));\n}\n", "nl": "Serve an Observable GoogleApiClient"}
{"code": "public boolean supportsSeek(){\n  return false;\n}\n", "nl": "seek is not supported"}
{"code": "public static void removeMacro(Player player,int macroOrder){\n  if (player.getMacroList().removeMacro(macroOrder)) {\n    DAOManager.getDAO(PlayerMacrossesDAO.class).deleteMacro(player.getObjectId(),macroOrder);\n  }\n}\n", "nl": "Remove macro with specified index from specified player"}
{"code": "private boolean canChangeAnnouncement(LegionMember legionMember,String announcement){\n  return legionMember.hasRights(LegionPermissionsMask.EDIT) && (announcement.isEmpty() || isValidAnnouncement(announcement));\n}\n", "nl": "This method checks all restrictions for changing announcements"}
{"code": "private void hideLoading(){\n  progressBar.setVisibility(View.GONE);\n  recyclerView.setVisibility(View.VISIBLE);\n  emptyTextView.setVisibility(View.GONE);\n}\n", "nl": "Hide progressbar when data loaded"}
{"code": "@SuppressWarnings(\"deprecation\") @Override public void onSuccess(int statusCode,Header[] headers,String responseBody){\n  onSuccess(statusCode,responseBody);\n}\n", "nl": "Fired when a request returns successfully, override to handle in your own code"}
{"code": "public Builder considerExifParams(boolean considerExifParams){\n  this.considerExifParams=considerExifParams;\n  return this;\n}\n", "nl": "Sets whether ImageLoader will consider EXIF parameters of JPEG image (rotate, flip)"}
{"code": "public static Uri buildItemUri(long _id){\n  return BASE_URI.buildUpon().appendPath(\"items\").appendPath(Long.toString(_id)).build();\n}\n", "nl": "Matches: /items/[_id]/"}
{"code": "public MarketGetQuery(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"market.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void removeLoadedServiceUnit(String suName,ResourceQuota quota){\n  if (this.loadedBundles.remove(suName)) {\n    this.allocatedQuota.substract(quota);\n    estimateLoadPercentage();\n  }\n}\n", "nl": "Remove a service unit from the loaded bundle list"}
{"code": "public MarketReorderItemsQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.reorderItems\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void close() throws IOException {\n  if (classDumpReader != null)   classDumpReader.close();\n}\n", "nl": "close associated file or database"}
{"code": "public PhotosEditQuery longitude(Float value){\n  return unsafeParam(\"longitude\",value);\n}\n", "nl": "Set longitude"}
{"code": "private NumericSummaryTable(String name){\n  super(name);\n}\n", "nl": "Returns a new Table initialized with the given names and columns"}
{"code": "public VideoEditQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public PollsCreateQuery(VkApiClient client,UserActor actor){\n  super(client,\"polls.create\",Poll.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void notifyListener() throws RemoteException, UnknownEventException {\n  NotifyTemplateHolder template=(NotifyTemplateHolder)getEntryHolder();\n  RemoteEventListener listener=template.getREListener();\n  if (listener != null) {\n    if (LRMIUtilities.isRemoteProxy(listener))     LRMIInvocationContext.enableCustomPriorityForNextInvocation();\n    listener.notify(getRemoteEvent());\n  }\n}\n", "nl": "Send notification to the client"}
{"code": "public ClassAnnotator(URL[] codebase,Properties props){\n  if (props != null)   properties.putAll(props);\n  setAnnotationURLs(codebase);\n}\n", "nl": "Constructs a new ClassAnnotator for the specified codebase URLs"}
{"code": "public void put(String sample,String attribute,Object value){\n  if (!sampleOrder.contains(sample))   sampleOrder.add(sample);\n  if (!attributeOrder.contains(attribute))   attributeOrder.add(attribute);\n  table.put(sample,attribute,value);\n}\n", "nl": "put a value in the table"}
{"code": "@deprecated protected int handleGetLimit(int field,int limitType){\n  if ((isAmeteAlemEra()) && (field == 0)) {\n    return 0;\n  }\n  return super.handleGetLimit(field,limitType);\n}\n", "nl": "/*    "}
{"code": "@Override public boolean hasNext(){\n  return lengthOfFirstOfNext > 0 || samIterator.hasNext();\n}\n", "nl": "is there next?"}
{"code": "public static String formatPercent(int downloadSize,int fileSize){\n  float num=(float)downloadSize / fileSize;\n  float percent=((float)(int)(num * 1000)) / 10;\n  return String.valueOf(percent + \"%\");\n}\n", "nl": "Format the download percent"}
{"code": "public static void w(String msg){\n  if (LOG_ENABLE) {\n    Log.w(TAG,buildMsg(msg));\n  }\n}\n", "nl": "warning log"}
{"code": "protected MarketEditQuery categoryId(int value){\n  return unsafeParam(\"category_id\",value);\n}\n", "nl": "Item category id"}
{"code": "public static void main(String[] args){\n  byte[] json_chunk1=\"{\\\"name\\\":\\\"El\".getBytes(StandardCharsets.UTF_8);\n  byte[] json_chunk2=\"vis\\\"}\".getBytes(StandardCharsets.UTF_8);\n  Observable.just(json_chunk1,json_chunk2).lift(new JsonParserOperator()).toBlocking().forEach(null);\n}\n", "nl": "The main program"}
{"code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase && ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static boolean checkPermission(Fragment fragment,String... permissions){\n  return PermissionUtils.getDeniedPermissions(fragment,permissions).length <= 0;\n}\n", "nl": "Check permissions;"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "void start(){\n  this.scheduleAckTimeout();\n  this.sendListen();\n}\n", "nl": "Send the listen request to the server"}
{"code": "public void resume(){\n  engine.resume();\n}\n", "nl": "Resumes waiting \"load&display\" tasks"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public Iterator childEdges(Node n){\n  return super.outEdges(n);\n}\n", "nl": "Get an iterator over the edges connecting child nodes to a given parent"}
{"code": "public static void w(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_WARNING) {\n    return;\n  }\n  Log.w(tag,msg,throwable);\n}\n", "nl": "Send a WARNING log message"}
{"code": "public boolean isPlayToken(){\n  return playToken;\n}\n", "nl": "get the player Token"}
{"code": "public static void debug(@NonNull String tag,String message,Object... args){\n  android.util.Log.d(tag,String.format(Locale.ENGLISH,message,args));\n}\n", "nl": "Logs with debug level"}
{"code": "protected boolean checkReversedObjectInRange(VisibleObject newObject){\n  return false;\n}\n", "nl": "Check can be overriden if new object has different known range and that value should be used"}
{"code": "public String[] upload_file(String group_name,String master_filename,String prefix_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  if ((group_name == null || group_name.length() == 0) || (master_filename == null || master_filename.length() == 0) || (prefix_name == null)) {\n    throw new MyException(\"invalid arguement\");\n  }\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,length,new UploadBuff(file_buff,offset,length),meta_list);\n}\n", "nl": "upload file to storage server (by file buff, slave file mode)"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void unregisterDrop(Npc npc){\n  Integer npcObjId=npc.getObjectId();\n  Map<Integer,DropNpc> dropRegmap=DropRegistrationService.getInstance().getDropRegistrationMap();\n  DropRegistrationService.getInstance().getCurrentDropMap().remove(npcObjId);\n  if (dropRegmap.containsKey(npcObjId)) {\n    dropRegmap.remove(npcObjId);\n  }\n}\n", "nl": "After NPC respawns - drop should be unregistered //TODO more correct - on despawn"}
{"code": "public void zoomToSelection(){\n  graphView.zoomToSelection();\n}\n", "nl": "zoom to selection"}
{"code": "public void addLanguage(String languageId){\n  query.append(\" +languageId:\" + languageId);\n}\n", "nl": "Adds a language limit to the query"}
{"code": "public Value coalesceExpression(Value[] val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n", "nl": "Return a coalesce expression"}
{"code": "@Override protected void initToolbar(Bundle savedInstanceState){\n}\n", "nl": "Initialize the toolbar in the layout"}
{"code": "private SignificanceTestForTwoDatasets(double x1,double n1,double x2,double n2){\n  this.x1=x1;\n  this.n1=n1;\n  this.x2=x2;\n  this.n2=n2;\n}\n", "nl": "construct instance to perform proportion test"}
{"code": "@Transactional public AssetExtraction createAssetExtraction(Asset asset,PollableTask pollableTask){\n  AssetExtraction assetExtraction=new AssetExtraction();\n  assetExtraction.setAsset(asset);\n  assetExtraction.setContentMd5(asset.getContentMd5());\n  assetExtraction.setPollableTask(pollableTask);\n  assetExtractionRepository.save(assetExtraction);\n  return assetExtraction;\n}\n", "nl": "Creates an AssetExtraction associated to the given asset"}
{"code": "public void addClickingListener(OnWheelClickedListener listener){\n  clickingListeners.add(listener);\n}\n", "nl": "Adds wheel clicking listener"}
{"code": "private LogEntry(ISVNLogMessage logMessage,ISVNResource resource,ISVNRemoteResource remoteResource,Alias[] tags){\n  this.logMessage=logMessage;\n  this.remoteResource=remoteResource;\n  this.resource=resource;\n  this.tags=tags;\n}\n", "nl": "creates a LogEntry"}
{"code": "public void addOnItemTouchListener(RecyclerView.OnItemTouchListener listener){\n  mRecycler.addOnItemTouchListener(listener);\n}\n", "nl": "Add the onItemTouchListener for the recycler"}
{"code": "public Crop withMaxSize(int width,int height){\n  cropIntent.putExtra(Extra.MAX_X,width);\n  cropIntent.putExtra(Extra.MAX_Y,height);\n  return this;\n}\n", "nl": "Set maximum crop size"}
{"code": "private boolean shouldBurnFat(){\n  return this.getSaturationLevel() > (float)((this.getFoodLevel() + 5) / 6) * 2.0F;\n}\n", "nl": "Should the player burn fat (saturation) instead of hunger (level) ?"}
{"code": "public void dumpASCII(Writer writer){\n  Wave wave=getWave();\n  wave.dump(writer);\n}\n", "nl": "Dumps the wave out to the given stream"}
{"code": "public MessagesSendQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n", "nl": "Set peer id"}
{"code": "public boolean isInWorld(VisibleObject object){\n  return allObjects.containsKey(object.getObjectId());\n}\n", "nl": "Check whether object is in world"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public void saveToFile(String fileName) throws IOException {\n  System.err.println(\"Saving tree to file: \" + fileName);\n  try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){\n    write(w,false);\n    w.write(\";\\n\");\n  }\n   System.err.println(\"done (\" + getNumberOfNodes() + \" nodes)\");\n}\n", "nl": "save to file"}
{"code": "public GroupsGetInvitedUsersQuery fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n", "nl": "Additional fields list to return"}
{"code": "@Override public boolean isEnemyFrom(Player player){\n  int worldId=getPosition().getMapId();\n  return player.getRace() != this.ownerRace;\n}\n", "nl": "Required so that the enemy race can attack the Kisk!"}
{"code": "public boolean isApplicable(){\n  return getDoc().getNumberOfReads() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private static void sendFailureSelfPatch(StatefulService service,Throwable e){\n  StatefulTaskDocument body=new StatefulTaskDocument();\n  body.taskInfo=new TaskState();\n  body.taskInfo.stage=TaskStage.FAILED;\n  body.taskInfo.failure=Utils.toServiceErrorResponse(e);\n  service.logWarning(\"Operation failed: %s\",Utils.toString(e));\n  sendPatch(service,body);\n}\n", "nl": "Send a failure patch to the specified service"}
{"code": "@Override public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {\n  return new InputSource(new StringReader(\"\"));\n}\n", "nl": "resolve an entity"}
{"code": "@Override public void onTaskLoadSuccess(final List<Task> list){\n  mTaskAdapter.setColorId(ThemeUtils.getResourceId(this,R.attr.colorAccent));\n  mTaskAdapter.setLast(mPresenter.getComic().getLast());\n  mTaskAdapter.addAll(list);\n  mPresenter.sortTask(list);\n}\n", "nl": "init: load task -> sort task"}
{"code": "public static void removeService(String url) throws RpcException {\n  try {\n    ServicePublisher.removeService(url);\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while removing service:\" + url,e);\n  }\n}\n", "nl": "remove the service from pigeon, including unregister this service from registry"}
{"code": "public SM_CHARACTER_LIST(int playOk2){\n  this.playOk2=playOk2;\n}\n", "nl": "Constructs new <tt>SM_CHARACTER_LIST </tt> packet"}
{"code": "private String appendClasspath(String appPath,String libPath){\n  String s=(appPath != null && !appPath.isEmpty()) ? appPath : \"\";\n  if (libPath != null && !libPath.isEmpty()) {\n    if (!s.isEmpty())     s+=File.pathSeparator;\n    s+=libPath;\n  }\n  return s;\n}\n", "nl": "Appends two elements to build a classpath"}
{"code": "public static boolean isConnectedByWifi(){\n  NetworkInfo info=getNetworkInfos();\n  return info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI;\n}\n", "nl": "Determine whether to use wifi"}
{"code": "public static double abs1(Z z){\n  return Math.abs(z.re) + Math.abs(z.im);\n}\n", "nl": "Computes the 1-norm of a Z"}
{"code": "public MarketGetByIdQuery(VkApiClient client,UserActor actor,String... itemIds){\n  super(client,\"market.getById\",GetByIdResponse.class);\n  accessToken(actor.getAccessToken());\n  itemIds(itemIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static ActionEntry from(Matcher matcher,Action action){\n  return new ActionEntry(matcher,action);\n}\n", "nl": "Convenience method for creating an ActionEntry"}
{"code": "public Single<Void> writeTaskInDatabase(final Task _task){\n  final String key=this.getChildReference().push().getKey();\n  _task.setId(key);\n  return observeSingleValue(getChildReference().child(key).setValue(_task));\n}\n", "nl": "Allows to create/write a task in the database"}
{"code": "public void click(){\n  new ComponentDriver(myRobot).click(mySurface,getMidPoint());\n  myRobot.waitForIdle();\n}\n", "nl": "Click in the middle of the view (typically selects it)"}
{"code": "void updateFinish(){\n  mWXSDKInstance.onUpdateFinish();\n}\n", "nl": "weex refresh finish"}
{"code": "public boolean isApplicable(){\n  return ((MainViewer)getViewer()).getSelectedIds().size() == 1;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public boolean isApplicable(){\n  MainViewer mainViewer=(MainViewer)getDir().getViewerByClass(MainViewer.class);\n  return mainViewer != null && mainViewer.hasComparableData();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static Color fadeToColor(Color source,Color target,float ratio){\n  int r=(int)((1 - ratio) * source.getRed() + ratio * target.getRed());\n  int g=(int)((1 - ratio) * source.getGreen() + ratio * target.getGreen());\n  int b=(int)((1 - ratio) * source.getBlue() + ratio * target.getBlue());\n  int a=(int)((1 - ratio) * source.getAlpha() + ratio * target.getAlpha());\n  return new Color(r,g,b,a);\n}\n", "nl": "Utility function returning a new color faded to a target color"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public CronTimer(DayOfWeek dayofweek,int hour,int minute,int sec){\n  cronExpression=sec + \" \" + minute+ \" \"+ hour+ \" * * \"+ dayofweek;\n}\n", "nl": "Weekly cron jobs"}
{"code": "public ExecuteCodeQuery code(Actor actor,String code){\n  return new ExecuteCodeQuery(getClient(),actor,code);\n}\n", "nl": "Execute by code"}
{"code": "private void skipPastNewline(){\n  while (!builder.eof()) {\n    if (matches(ProjectViewTokenType.NEWLINE)) {\n      return;\n    }\n    builder.advanceLexer();\n  }\n}\n", "nl": "Skip to the start of the next line"}
{"code": "protected PsiFile createPsiFile(String filePath){\n  return getPsiFile(testFixture.getTempDirFixture().createFile(filePath));\n}\n", "nl": "Creates a file with the specified contents and file path in the test project"}
{"code": "public int compareTo(Entry e){\n  if (this == e)   return 0;\n  if (renew < e.renew || (renew == e.renew && id < e.id))   return 1;\n  return -1;\n}\n", "nl": "Sort by decreasing renew time, secondary sort by decreasing id"}
{"code": "public WallPostQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.post\",PostResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public Plural(Quantity quantity,String value){\n  this.value=value;\n  this.quantity=quantity;\n}\n", "nl": "Construct a new plural"}
{"code": "public GreenGradient(int maxCount){\n  this.maxCount=maxCount;\n  factor=maxCount / Math.log(maxCount);\n}\n", "nl": "setup the green gradient"}
{"code": "public boolean isLoaded(){\n  return size() > 0;\n}\n", "nl": "has the table been loaded"}
{"code": "public static int dpToPixel(Context c,int dp){\n  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,c.getResources().getDisplayMetrics());\n}\n", "nl": "Convert DP units to pixels"}
{"code": "public static ILogEntry[] createLogEntriesFrom(ISVNRemoteFolder remoteFolder,ISVNLogMessage[] logMessages,Tags[] tags){\n  ILogEntry[] result=new ILogEntry[logMessages.length];\n  for (int i=0; i < logMessages.length; i++) {\n    result[i]=new LogEntry(logMessages[i],remoteFolder,null,(tags[i] != null) ? tags[i].getTags() : null);\n  }\n  return result;\n}\n", "nl": "create the LogEntry for the logMessages"}
{"code": "@Override public int hashCode(){\n  if (null != xxHash32) {\n    return xxHash32.hash(data,0,data.length,0);\n  }\n  int result=Arrays.hashCode(data);\n  result=31 * result;\n  return result;\n}\n", "nl": "This method will calculate the hash code for given data"}
{"code": "public Hash(byte[] hash){\n  if (hash.length != 32) {\n    throw new IllegalArgumentException(\"Digest length must be 32 bytes for Hash\");\n  }\n  this.bytes=new byte[32];\n  System.arraycopy(hash,0,this.bytes,0,32);\n}\n", "nl": "create a Hash from a digest"}
{"code": "public CreateSiteWindow selectNthTemplate(int i){\n  templatesList.get(i).click();\n  return this;\n}\n", "nl": "Selects nth template from the list in CreatePageWindow"}
{"code": "private void next(SegmentedListIterator<T> iter){\n  iter._curElement=null;\n  if (iter._currSegmentScanCount < 0)   return;\n  if (iter._headToTail)   next_down(iter);\n else   next_up(iter);\n}\n", "nl": "get the next element in scan order"}
{"code": "public boolean contains(Node n){\n  if (bitVector != null && bitVector.contains(n))   return true;\n  if (overflow.contains(n))   return true;\n  return false;\n}\n", "nl": "When the overflow list overflows, the maximum number of elements that may remain in the overflow list (the rest are moved into the base bit vector)"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void drawItems(Canvas canvas){\n  canvas.save();\n  int top=(currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;\n  canvas.translate(PADDING,-top + scrollingOffset);\n  itemsLayout.draw(canvas);\n  canvas.restore();\n}\n", "nl": "Draws items"}
{"code": "public Distribution(){\n  hDistro=new TreeMap();\n}\n", "nl": "Creates a new instance of Distribution"}
{"code": "private void tryToGetAudioFocus(){\n  if (mAudioFocus != AudioFocus.FOCUS && mAudioManager != null && (AudioManager.AUDIOFOCUS_REQUEST_GRANTED == mAudioManager.requestAudioFocus(this,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN))) {\n    mAudioFocus=AudioFocus.FOCUS;\n  }\n}\n", "nl": "Requests the audio focus to the Audio Manager"}
{"code": "public void releaseScan() throws SAException {\n}\n", "nl": "release SLHolder for this scan"}
{"code": "public String toString(){\n  return \"PostLexicalAnalyzer\";\n}\n", "nl": "Returns the string representation of the object"}
{"code": "public boolean isFifoSearch(){\n  return _fifoTemplate && (_uidToOperateBy == null && (_multipleUids == null || _multipleUids.length == 0));\n}\n", "nl": "is template relevant for fifo blocking in initial search ?"}
{"code": "private void readFromVersion2Stream(StatusFromBytesStream dis) throws IOException {\n  file=new File(dis.readUTF());\n}\n", "nl": "Just for backwards compatibility with workspaces stored with previous versions"}
{"code": "private final boolean peekReportEntity(){\n  return fPEReport[fPEDepth - 1];\n}\n", "nl": "look at the top of the stack"}
{"code": "public char charOf(int offset){\n  return charAt(pos + offset);\n}\n", "nl": "get the char by offset refer the current position"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "private void increaseActionCount(Map<String,Integer> eventCounts,Predicate<String> predicate){\n  eventCounts.forEach(null);\n}\n", "nl": "this method is used to update the reference count of the actions"}
{"code": "public int GetEnemyCount(){\n  return this.enemy_ToTal_Cnt;\n}\n", "nl": "get enemy count information"}
{"code": "public static void w(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.w(tag,buildMsg(msg));\n  }\n}\n", "nl": "warning log"}
{"code": "public int indexOf(Split split){\n  Integer index=(Integer)split2index.get(split);\n  if (index == null)   return -1;\n else   return index;\n}\n", "nl": "gets the index of the split, if present, otherwise -1"}
{"code": "private Object[] next() throws CarbonSortKeyAndGroupByException {\n  return getSortedRecordFromFile();\n}\n", "nl": "This method will be used to get the sorted row"}
{"code": "public boolean isApplicable(){\n  if (getViewer() instanceof ViewerBase)   return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n else   return getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getGraphView() != null && ((ClusterViewer)getViewer()).getGraphView().getGraph().getNumberOfNodes() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public ContentletQuery addHost(String hostIdentifier){\n  query.append(\" +conhost:\" + hostIdentifier);\n  return this;\n}\n", "nl": "Adds a host limit to the query"}
{"code": "public static void returnSelector(Selector s){\nsynchronized (selectors) {\n    selectors.push(s);\n    if (selectors.size() == 1)     selectors.notify();\n  }\n}\n", "nl": "Return the <code>Selector</code> to the cache"}
{"code": "public static long parseDateAsEpoch(String dateStr){\n  try {\n    return DateUtils.parseDate(dateStr).getTime();\n  }\n catch (  DateParseException e) {\n    return 0;\n  }\n}\n", "nl": "Parse date in RFC1123 format, and return its value as epoch"}
{"code": "public int append_file(String group_name,String appender_filename,long file_size,UploadCallback callback) throws IOException, MyException {\n  return this.do_append_file(group_name,appender_filename,file_size,callback);\n}\n", "nl": "append file to storage server (by callback)"}
{"code": "public ImageFixture(){\n}\n", "nl": "Creates a new image fixture with the default thumbnail sizes and default image delta percentage"}
{"code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "protected String nextLine(){\n  if (pushedBackLine != null) {\n    String result=pushedBackLine;\n    pushedBackLine=null;\n    return result;\n  }\n else   return iterator.next();\n}\n", "nl": "gets the next line"}
{"code": "public boolean isEmpty(){\n  return size() == 0;\n}\n", "nl": "True if there are no entries in the CounterMap (false does not mean totalCount > 0)"}
{"code": "private static String keyForSet(String name){\n  return \"service_set_\" + name;\n}\n", "nl": "Service set's key"}
{"code": "public MarketGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "If of a comment to start a list from (details below)"}
{"code": "public void saveSelectedFeatures(PrintWriter toSopFile){\n  for (int j=0; j < coeffs.length; j++)   toSopFile.print(coeffs[j] + \" \" + factors[j]+ \" \");\n  toSopFile.println();\n}\n", "nl": "First line vowel coefficients plus factors, second line consonant coefficients plus factors"}
{"code": "public static void mergeServiceDocuments(ServiceDocument copyTo,ServiceDocument copyFrom){\n  mergeServiceDocuments(copyTo,copyFrom,SHALLOW_MERGE_STRATEGY);\n}\n", "nl": "Perform shallow merge of ServiceDocuments using reflection"}
{"code": "public String toString(){\n  SimpleDateFormat df=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n  return \"source_ip_addr = \" + this.source_ip_addr + \", \"+ \"file_size = \"+ this.file_size+ \", \"+ \"create_timestamp = \"+ df.format(this.create_timestamp)+ \", \"+ \"crc32 = \"+ this.crc32;\n}\n", "nl": "to string"}
{"code": "@Override public void drop_duplicates(){\n  for (Iterator<AllocNode> it=pt_objs.keySet().iterator(); it.hasNext(); ) {\n    PtInsIntervalManager im=pt_objs.get(it.next());\n    im.removeUselessSegments();\n  }\n}\n", "nl": "Discard all context sensitive tuples which are covered by insensitive ones"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static ToolbarTapTarget forToolbarNavigationIcon(Toolbar toolbar,CharSequence title,@Nullable CharSequence description){\n  return new ToolbarTapTarget(toolbar,true,title,description);\n}\n", "nl": "Return a tap target for the navigation button (back, up, etc) from the given toolbar"}
{"code": "@Override public void parse(String aLine) throws IOException {\n  String[] tokens=aLine.trim().split(\"\\t\");\n  parse(tokens,tokens.length);\n}\n", "nl": "parse a line of SAM format"}
{"code": "public static boolean isWifiEnabled(Context context){\n  ConnectivityManager mgrConn=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  TelephonyManager mgrTel=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);\n  return ((mgrConn.getActiveNetworkInfo() != null && mgrConn.getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED) || mgrTel.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS);\n}\n", "nl": "is wifi on"}
{"code": "@Override public long length(){\n  return data.size();\n}\n", "nl": "Length of the split"}
{"code": "public boolean isSubsetOf(PointsToBitVector other){\n  BitVector andResult=BitVector.and(this,other);\n  return andResult.equals(this);\n}\n", "nl": "Returns true iff other is a subset of this bitvector"}
{"code": "@deprecated public String toString(){\n  return this.id;\n}\n", "nl": "/*    "}
{"code": "public boolean isFullRank(){\n  for (int j=0; j < n; j++) {\n    if (Rdiag[j] == 0)     return false;\n  }\n  return true;\n}\n", "nl": "Is the matrix full rank?"}
{"code": "public SerialMessage stopLevelChangeMessage(final String type){\n  logger.debug(\"NODE {}: Creating new message for application command SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE\",this.getNode().getNodeId());\n  SerialMessage result=new SerialMessage(this.getNode().getNodeId(),SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessageType.Request,SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessagePriority.Set);\n  byte[] newPayload={(byte)this.getNode().getNodeId(),2,(byte)CommandClass.SWITCH_MULTILEVEL.getKey(),(byte)0x05};\n  result.setMessagePayload(newPayload);\n  return result;\n}\n", "nl": "Gets a SerialMessage with the SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE command"}
{"code": "public void close(){\n  closed=true;\n}\n", "nl": "Will close this event for modification, except for header data"}
{"code": "public static void clearImageView(final ImageView _imageView){\n  Glide.clear(_imageView);\n}\n", "nl": "Allows to clear a given ImageView Note: Usefull if used in RecyclerViews/ListViews and so on"}
{"code": "@Override public ListenableFuture<MemberRemoveResponse> removeMember(long memberID){\n  MemberRemoveRequest memberRemoveRequest=MemberRemoveRequest.newBuilder().setID(memberID).build();\n  return clusterStub.memberRemove(memberRemoveRequest);\n}\n", "nl": "removes an existing member from the cluster"}
{"code": "public void apply() throws CanceledException, IOException, ParserConfigurationException, SAXException {\n  if (saxParserFactory == null)   saxParserFactory=SAXParserFactory.newInstance();\n  SAXParser saxParser=saxParserFactory.newSAXParser();\n  saxParser.parse(Basic.getInputStreamPossiblyZIPorGZIP(blastFile.getPath()),this);\n}\n", "nl": "apply the parser"}
{"code": "public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){\n  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;\n}\n", "nl": "add distinct entry to list"}
{"code": "public boolean isBinary(){\n  return isBinary;\n}\n", "nl": "Returns the mode of the file (ascii or binary)"}
{"code": "public GSXAConnectionFactoryImpl(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public static <T>Set<T> toSet(T obj1){\n  Set<T> theSet=new LinkedHashSet<T>();\n  theSet.add(obj1);\n  return theSet;\n}\n", "nl": "Create a Set from passed objX parameters"}
{"code": "@NotNull public Emotion findEmotionFromSingleFace(@NotNull String imageUrl){\n  List<Emotion> emotions=emotionBuilder.emotionRecognition(imageUrl).withResult();\n  if (Utils.isEmpty(emotions) || emotions.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(emotions) ? 0 : emotions.size(),\"a single face was not present\");\n  return emotions.get(0);\n}\n", "nl": "Find a single face with emotion within a given url"}
{"code": "public static void putBoolean(String key,boolean value){\n  prefs.edit().putBoolean(key,value).commit();\n}\n", "nl": "Set a boolean value in the preferences editor, to be written back"}
{"code": "public static LazyElement parse(String str) throws LazyException {\n  if (str.startsWith(\"[\")) {\n    return new LazyArray(str);\n  }\n else {\n    return new LazyObject(str);\n  }\n}\n", "nl": "Parses a string and returns either a LazyObject or LazyArray"}
{"code": "public void deletePage(String path) throws IOException {\n  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(CMD_PROPERTY,DELETE_PAGE_COMMAND).put(CHARSET_PROPERTY,UTF_8).put(PATH_PROPERTY,path.toLowerCase()).build()),WCM_COMMAND_URL,String.format(PAGE_DELETED_SUCCESS_MESSAGE_FORMAT,path.toLowerCase()));\n}\n", "nl": "Delete page from provided location"}
{"code": "public static Paint newCornerPaint(@NonNull Resources resources){\n  final Paint paint=new Paint();\n  paint.setStyle(Paint.Style.STROKE);\n  paint.setStrokeWidth(resources.getDimension(R.dimen.corner_thickness));\n  paint.setColor(resources.getColor(R.color.corner));\n  return paint;\n}\n", "nl": "Creates the Paint object for drawing the corners of the border"}
{"code": "public void addActivity(AXmlNode node){\n  if (activities.isEmpty())   activities=new ArrayList<AXmlNode>();\n  activities.add(node);\n}\n", "nl": "Adds a new activity to the manifest"}
{"code": "private boolean isTestMode(){\n  return ((System.getProperty(\"c2mon.server.testMode\")) != null && (System.getProperty(\"c2mon.server.testMode\").equals(\"true\")));\n}\n", "nl": "Checks if the TEST mode is on"}
{"code": "public static String encrypt16bits(String message) throws Exception {\n  SecretKeySpec skeySpec=new SecretKeySpec(Settings.sEncryptKey.getBytes(),\"AES\");\n  Cipher cipher=Cipher.getInstance(\"AES\");\n  cipher.init(Cipher.ENCRYPT_MODE,skeySpec);\n  byte[] encrypted=cipher.doFinal(message.getBytes());\n  return Hex.encodeHexString(encrypted);\n}\n", "nl": "this method change the message String to encrypt String using 32bits AES"}
{"code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_COMPLETE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300620,value0);\n}\n", "nl": "Quest complete: %0"}
{"code": "static void changeViewVisibilityGone(View view){\n  if (view != null && view.getVisibility() == View.VISIBLE)   view.setVisibility(View.GONE);\n}\n", "nl": "Change view visibility"}
{"code": "@Override public RecordReader createReader(InputSplit split) throws IOException, InterruptedException {\n  RecordReader reader=new ListStringRecordReader();\n  reader.initialize(split);\n  return reader;\n}\n", "nl": "Creates a reader from an input split"}
{"code": "private void computeTaintPaths(final Set<AbstractionAtSink> res){\n  IAbstractionPathBuilder builder=this.pathBuilderFactory.createPathBuilder(maxThreadNum,iCfg);\n  builder.computeTaintPaths(res);\n  this.results=builder.getResults();\n  builder.shutdown();\n}\n", "nl": "Computes the path of tainted data between the source and the sink"}
{"code": "public void sendDelayedTimeDeadbandValues(){\n  this.equipmentLogger.debug(\"sendDelayedTimeDeadbandValues - Sending all time deadband delayed values to the server\");\n  this.equipmentSenderValid.sendDelayedTimeDeadbandValues();\n}\n", "nl": "Sends all through timedeadband delayed values immediately"}
{"code": "public boolean isGameEnd(){\n  return isGameEnd;\n}\n", "nl": "get the state about game end Boolean"}
{"code": "public static void clickButtonRewiModWebsite(){\n  RewiMod.getInstance().openUrl(\"https://rewinside.tv/Thread/57412-Offiziell-RewiMod/\");\n}\n", "nl": "Opens the browser to the Official RewiMod Website"}
{"code": "public boolean isAintersects(BitSet H){\n  return A.intersects(H);\n}\n", "nl": "does A part intersect set H?"}
{"code": "public void reset(){\n  localDeque.clear();\n  localDeque.push(new FramePath());\n}\n", "nl": "Resetting the stack frame means clearing it and putting there the default frame"}
{"code": "public static void registerClass(Class<?> clazz){\n  registrations.add(clazz);\n}\n", "nl": "only supposed to be called at startup time"}
{"code": "public static void put(Context context,String fileName,String key,Object ser){\n  put(context,fileName,key,ser,null);\n}\n", "nl": "*************** put"}
{"code": "public VideoReportQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n", "nl": "Reason for the complaint"}
{"code": "public DatabaseGetCitiesByIdQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getCitiesById\",Utils.buildParametrizedType(List.class,BaseObject.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void afterMemberAdded(MemberAddedEvent memberAddedEvent){\n}\n", "nl": "Called after target member is added"}
{"code": "public final boolean between(int iNum,int iMin,int iMax){\n  return (iNum >= iMin) && (iNum <= iMax);\n}\n", "nl": "This function returns true when the iNum is between the limits [iMin,iMax]"}
{"code": "public void unlockUserInput(){\n  commandManager.setEnableCritical(true);\n  locked=false;\n}\n", "nl": "ask view to allow user input"}
{"code": "public static final void attackMode(final Summon summon){\n  summon.setMode(SummonMode.ATTACK);\n  Player master=summon.getMaster();\n  PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_ATTACK_MODE(summon.getNameId()));\n  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));\n  summon.getLifeStats().cancelRestoreTask();\n}\n", "nl": "Change to attackMode"}
{"code": "public WallGetQueryWithExtended(VkApiClient client){\n  super(client,\"wall.get\",GetExtendedResponse.class);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void initData(Context context){\n  scroller=new WheelScroller(getContext(),scrollingListener);\n}\n", "nl": "Initializes class data"}
{"code": "public float computeAlignmentExpected(int queryLength,int rawScore){\n  double bitScore=(float)((lambda * rawScore - lnK) / LN_2);\n  return (float)(((double)getDbLetters() * queryLength * Math.pow(2,-bitScore)));\n}\n", "nl": "compute expected value"}
{"code": "public VideoGetTagsQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.getTags\",Utils.buildParametrizedType(List.class,VideoTag.class));\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void removeAll(String key){\n  if (key == null) {\n    throw new NullPointerException(\"key\");\n  }\nsynchronized (contexts) {\n    contexts.removeIf(null);\n  }\n}\n", "nl": "Removes all pairs with the given key"}
{"code": "public static String collapseSpaces(String str){\n  return collapseCharacter(str,' ');\n}\n", "nl": "Remove/collapse multiple spaces"}
{"code": "public static void storeEvent(){\n  if (event == null) {\n    return;\n  }\n  StaticsAgent.storeObject(event);\n}\n", "nl": "storeEvent Activity destory call"}
{"code": "public EventBuilder onUi(Activity activity){\n  this.event.setActivity(activity);\n  this.event.setOnUi(true);\n  return this;\n}\n", "nl": "Run runnable inside Main Thread UI"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "public static DmnRestUrlBuilder fromCurrentRequest(){\n  return usingBaseUrl(ServletUriComponentsBuilder.fromCurrentServletMapping().build().toUriString());\n}\n", "nl": "Extracts the base URL from current request"}
{"code": "public List<ModelEntity> induceModelFromDb(Collection<String> messages){\n  DatabaseUtil dbUtil=new DatabaseUtil(this.helperInfo);\n  return dbUtil.induceModelFromDb(messages);\n}\n", "nl": "Creates a list of ModelEntity objects based on meta data from the database"}
{"code": "public void writeThrift(TBase indexObject) throws IOException {\n  thriftWriter.write(indexObject);\n}\n", "nl": "It writes thrift object to file"}
{"code": "@deprecated public Object parseObject(String source,ParsePosition parse_pos){\n  throw new UnsupportedOperationException(\"parsing is not supported\");\n}\n", "nl": "/*     "}
{"code": "public Table<R,C,V> copy(){\n  final Table<R,C,V> copy=new Table<>();\n  for (  R row : rowKeySet())   for (  C col : columnKeySet())   copy.put(row,col,get(row,col));\n  return copy;\n}\n", "nl": "returns a copy"}
{"code": "public static void deletePlayerFromDB(int playerId){\n  DAOManager.getDAO(InventoryDAO.class).deletePlayerItems(playerId);\n  DAOManager.getDAO(PlayerDAO.class).deletePlayer(playerId);\n  DAOManager.getDAO(PlayerGameStatsDAO.class).deletePlayerGameStat(playerId);\n}\n", "nl": "Completely removes player from database"}
{"code": "public Point3D(){\n}\n", "nl": "Creates new point with coords 0, 0, 0"}
{"code": "public void updateMemberInfo(Player player){\n  PacketSendUtility.broadcastPacketToLegion(player.getLegion(),new SM_LEGION_UPDATE_MEMBER(player,0,\"\"));\n}\n", "nl": "This method will update all players about the level/class change"}
{"code": "protected Property(final String name,final String getter,final String setter,final Type<?> type,final Type<?> elementType){\n  super();\n  this.name=name;\n  this.getter=getter;\n  this.setter=setter;\n  this.type=type;\n  this.elementType=defaultElementType(type,elementType);\n}\n", "nl": "Constructs a new Property instance"}
{"code": "public synchronized void addListenerAndNotify(ISpaceModeListener listener) throws RemoteException {\n  SpaceMode currentSpaceMode=_spaceMode;\n  listener.beforeSpaceModeChange(currentSpaceMode);\n  listener.afterSpaceModeChange(currentSpaceMode);\n  _primarySpaceModeListeners.addListener(listener);\n}\n", "nl": "Add listener for space availability and notify the listener with the current space mode"}
{"code": "public static void enableJM(boolean enable){\n  ServiceDispatcher.enableJM=enable;\n}\n", "nl": "Enables/Disables the Job Manager/Scheduler globally (this will not effect any dispatchers already running)"}
{"code": "public SemiVariance(final Direction direction){\n  this(true,direction);\n}\n", "nl": "Constructs a SemiVariance with the specified <code>Direction</code> property and default (true) <code>biasCorrected</code> property"}
{"code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n", "nl": "Outputs a debug message if debugging is turned on"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"zoom axis=horizontal what=in;\");\n}\n", "nl": "action to be performed"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.EUCLIDEAN + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n", "nl": "is there more data?"}
{"code": "@NotNull public ImageOverlayBuilder mergeImage(@NotNull BufferedImage mergeImage,@NotNull MergeImagesFilter.Position position){\n  MergeImagesFilter mergeImagesFilter=new MergeImagesFilter(mergeImage,SMALL_PADDING,position);\n  bufferedImage=mergeImagesFilter.applyFilter(bufferedImage);\n  return this;\n}\n", "nl": "Merges another image onto the base image (to the right)"}
{"code": "public ShapelessMaterialRecipe(ItemStack output,List<Predicate<ItemStack>> matchers){\n  this.output=output;\n  this.matchers=matchers;\n}\n", "nl": "Creates a new shapeless material recipe"}
{"code": "public PhotosMoveQuery(VkApiClient client,UserActor actor,int targetAlbumId,int photoId){\n  super(client,\"photos.move\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  targetAlbumId(targetAlbumId);\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void drawRing(Canvas canvas,Rect bounds){\n  final RectF arcBounds=mTempBounds;\n  final Ring ring=mRing;\n  arcBounds.set(bounds);\n  arcBounds.inset(ring.strokeInset,ring.strokeInset);\n  canvas.drawArc(arcBounds,ring.start,ring.sweep,false,mPaint);\n}\n", "nl": "draw the ring"}
{"code": "public void addResultsAvailableHandler(ResultsAvailableHandler handler){\n  this.onResultsAvailable.add(handler);\n}\n", "nl": "Adds a handler that is called when information flow results are available"}
{"code": "public SM_DELETE_CHARACTER(int playerObjId,int deletionTime){\n  this.playerObjId=playerObjId;\n  this.deletionTime=deletionTime;\n}\n", "nl": "Constructs new <tt>SM_DELETE_CHARACTER </tt> packet"}
{"code": "public static void i(String tag,String msg){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  Log.i(tag,msg);\n}\n", "nl": "Send an INFO log message"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public PhotosRemoveTagQuery(VkApiClient client,UserActor actor,int photoId,int tagId){\n  super(client,\"photos.removeTag\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n  tagId(tagId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void prepare(Context context,ServerTransaction xtn,ArrayList<IEntryHolder> locked_entries,boolean singleParticipant,Map<String,Object> partialUpdatesAndInPlaceUpdatesInfo,boolean shouldReplicate) throws SAException {\n}\n", "nl": "Performs prepare to transaction- write to SA all new entries under the xtn, mark taken entries under the xtn"}
{"code": "public void addGlobalSimpleTypeDecl(XSSimpleType decl){\n  fGlobalTypeDecls.put(decl.getName(),decl);\n  if (decl instanceof XSSimpleTypeDecl) {\n    ((XSSimpleTypeDecl)decl).setNamespaceItem(this);\n  }\n}\n", "nl": "register one global simple type"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set magnifier=\" + !isSelected() + \";\");\n}\n", "nl": "action to be performed"}
{"code": "@Override public void createFacade(String table,FacadeOptions facadeOptions,Audit audit){\n  checkLegalTableName(table);\n  checkNotNull(facadeOptions,\"facadeDefinition\");\n  checkNotNull(audit,\"audit\");\n  _tableDao.createFacade(table,facadeOptions,audit);\n}\n", "nl": "Facade related methods"}
{"code": "@RequestMapping(value={\"/error\",\"/accessdenied\"},method=RequestMethod.GET) public String returnErrorView(HttpSession session){\n  Exception ex=(Exception)session.getAttribute(\"SPRING_SECURITY_LAST_EXCEPTION\");\n  ex.printStackTrace();\n  return \"error\";\n}\n", "nl": "All errors are going to be redirected to the following page"}
{"code": "public WallGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.getComments\",GetCommentsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n  extended(true);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public static void loadContent(Activity context){\n  FragmentPlaces.loadPlacesList(context);\n  FragmentDisasters.loadDisastersList(context);\n  FragmentGoodActs.loadGoodActsList(context);\n}\n", "nl": "Load all info from the JSONs and display content"}
{"code": "public void withRecorderController(String tag,Consumer<RecorderController> c){\n  c.take(getRecorderController());\n}\n", "nl": "Request action to be taken when the RecorderController is connected"}
{"code": "public ChangeSet addAllToCollection(String path,Serializable... newItems){\n  return addAllToCollection(path,Arrays.asList(newItems));\n}\n", "nl": "Adds the given items to a collection property"}
{"code": "protected void updateData(List<Object[]> listBasedResult){\n  if (tableBlockExecutionInfos.isFixedKeyUpdateRequired()) {\n    updateKeyWithLatestBlockKeygenerator(listBasedResult);\n  }\n}\n", "nl": "Below method will used to get the result"}
{"code": "private boolean isLegalIndex(int i){\n  return !isIllegalIndex(i);\n}\n", "nl": "whether the index is legal"}
{"code": "public StringListImpl(String[] array,int length){\n  fArray=array;\n  fLength=length;\n  fVector=null;\n}\n", "nl": "Construct an XSObjectList implementation"}
{"code": "@Override public int readInt(String filePath,long offset){\n  FileChannel fileChannel=updateCache(filePath);\n  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.INT_SIZE_IN_BYTE,offset);\n  return byteBffer.getInt();\n}\n", "nl": "This method will be used to read int from file from postion(offset), here length will be always 4 bacause int byte size if 4"}
{"code": "public void removeGroup(Group group) throws ObjectLacksException {\n  removeGroup(group.getName());\n}\n", "nl": "Removes a group from this track"}
{"code": "private void addOptionalSecurityLibs(StringBuilder classpath){\n  addLibs(classpath,Locator.getLibOptionalSecurity());\n}\n", "nl": "add all jars under lib/optional/security"}
{"code": "protected void notifyScrollingListenersAboutStart(){\n  for (  OnWheelScrollListener listener : scrollingListeners) {\n    listener.onScrollingStarted(this);\n  }\n}\n", "nl": "Notifies listeners about starting scrolling"}
{"code": "public static SM_SYSTEM_MESSAGE STR_CURRENT_EXCLUDES(int num0){\n  return new SM_SYSTEM_MESSAGE(1300634,num0);\n}\n", "nl": "Blocked users: %num0 users"}
{"code": "public static SM_SYSTEM_MESSAGE STR_MSG_READ_TODAY_WORDS(String value0){\n  return new SM_SYSTEM_MESSAGE(1390124,value0);\n}\n", "nl": "Your Note: %0"}
{"code": "protected MarketDeleteQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n", "nl": "Item id"}
{"code": "private boolean validValue(Object value){\n  return value != null && !value.toString().isEmpty();\n}\n", "nl": "Test if an object is a valid Mindmaps value"}
{"code": "public static void d(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg,throwable);\n}\n", "nl": "Send a DEBUG log message"}
{"code": "public UrlSpaceConfigurer attributeStore(AttributeStore attributeStore){\n  validate();\n  urlSpaceFactoryBean.attributeStore(attributeStore);\n  return this;\n}\n", "nl": "Sets an attribute store"}
{"code": "@Override public long addRole(Role role){\n  return sessionTemplate.insert(NAMESPACE + \".addRole\",role);\n}\n", "nl": "Add new role"}
{"code": "final boolean casRight(Index<K,V> cmp,Index<K,V> val){\n  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);\n}\n", "nl": "compareAndSet right field"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public int numberOfObjects(){\n  return table.getGrid().getRowCount() * table.getGrid().getColumnCount();\n}\n", "nl": "how many objects are there?"}
{"code": "private boolean storeNewAnnouncement(int legionId,Timestamp currentTime,String message){\n  return DAOManager.getDAO(LegionDAO.class).saveNewAnnouncement(legionId,currentTime,message);\n}\n", "nl": "Stores newly created announcement"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public PollsAddVoteQuery isBoard(Boolean value){\n  return unsafeParam(\"is_board\",value);\n}\n", "nl": "Set is board"}
{"code": "public BoardGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n", "nl": "Set start comment id"}
{"code": "public void addHostAndIncludeSystemHost(String hostIdentifier){\n  query.append(\" +(conhost:SYSTEM_HOST conhost:\" + hostIdentifier + \")\");\n}\n", "nl": "Adds a host limit to the query (given host AND System HOST"}
{"code": "public AirMapStatusAdvisory(JSONObject advisoryJson){\n  constructFromJson(advisoryJson);\n}\n", "nl": "Initialize an AirMapStatusAdvisory from JSON"}
{"code": "public DOMStringListImpl(Vector params){\n  fStrings=new ArrayList(params);\n}\n", "nl": "Construct a DOMStringListImpl from a Vector"}
{"code": "private void buildSubMenu(SysMenu fatherMenu,List<Module> modules){\n  fatherMenu.setSubMenus(new ArrayList<SysMenu>());\n  for (  Module module : modules) {\n    if (module.getParent() != null && fatherMenu.getId() == module.getParent().longValue())     fatherMenu.getSubMenus().add(buildMenuFromModule(module));\n  }\n}\n", "nl": "Build sub menus"}
{"code": "public ResourcesPoet addId(String id){\n  Element bool=document.createElement(\"item\");\n  bool.setAttribute(\"name\",id);\n  bool.setAttribute(\"type\",\"id\");\n  resourceElement.appendChild(bool);\n  return this;\n}\n", "nl": "Add an id to the config"}
{"code": "public static String[][] invert(final String[][] array){\n  final String[][] newarray=new String[array.length][2];\n  for (int i=0; i < array.length; i++) {\n    newarray[i][0]=array[i][1];\n    newarray[i][1]=array[i][0];\n  }\n  return newarray;\n}\n", "nl": "Used to invert an escape array into an unescape array"}
{"code": "public boolean hasFusionStones(){\n  return fusionStones != null && fusionStones.size() > 0;\n}\n", "nl": "Check fusionstones without initialization"}
{"code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n", "nl": "Writes the given bytes to the audio stream"}
{"code": "public static Patterns packages(String[] includes,String[] excludes){\n  return new Patterns(includes,excludes);\n}\n", "nl": "Sets the package patterns to scan"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public JsonParser(JsonFeeder feeder){\n  stack=new byte[16];\n  top=-1;\n  state=GO;\n  push(MODE_DONE);\n  this.feeder=feeder;\n}\n", "nl": "Constructs the JSON parser"}
{"code": "public CM_START_LOOT(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_CM_REQUEST_DIALOG </tt> packet"}
{"code": "public void init(){\n  this.sEnteredRoom=\" \";\n  this.gameStartSet=false;\n  this.playToken=false;\n}\n", "nl": "init the client information"}
{"code": "public MessagesGetChatUsersQueryWithFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public static double log10(double x){\n  return Math.log(x) / LOG10;\n}\n", "nl": "The base 10 logarithm of the input value"}
{"code": "public static JavaRDD<List<List<Writable>>> normalizeSequence(Schema schema,JavaRDD<List<List<Writable>>> data,double min,double max){\n  return normalizeSequence(schema,data,min,max,null);\n}\n", "nl": "Normalize each column of a sequence, based on min/max"}
{"code": "public synchronized void clear(){\n  this.nonEmptyReverseLookup=new MyConcurrentHashMap<PathEdge<N,D>,D>();\n}\n", "nl": "Removes all jump functions"}
{"code": "public AudioDeleteAlbumQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"audio.deleteAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Deprecated public int verbosity(){\n  return getVerbosity();\n}\n", "nl": "What is the current verbosity?"}
{"code": "public jflex(java.io.Reader in){\n  this.zzReader=in;\n}\n", "nl": "Creates a new scanner"}
{"code": "public boolean match(String name){\n  return getMatch(name) != null;\n}\n", "nl": "returns true if name matches one of the patterns"}
{"code": "public void clearCache(){\n  DiskLruCache.clearCache(mCacheDir);\n}\n", "nl": "Removes all disk cache entries from this instance cache dir"}
{"code": "public void writeSizedPrefixedBytes(byte[] bytes,int offset,int length) throws IOException {\n  writeInt(length);\n  write(bytes,offset,length);\n}\n", "nl": "write size-prefixed bytes"}
{"code": "@ExceptionHandler(TypeNotFoundException.class) @ResponseStatus(value=HttpStatus.NOT_FOUND) public @ResponseBody ErrorResponse resolveTypeDescriptorNotFoundException(TypeNotFoundException e) throws IOException {\n  if (logger.isLoggable(Level.FINE))   logger.fine(\"type descriptor for typeName: \" + e.getTypeName() + \" not found, returning error response\");\n  return new ErrorResponse(new ErrorMessage(\"Type: \" + e.getTypeName() + \" is not registered in space\"));\n}\n", "nl": "TypeNotFoundException Handler, returns an error response to the client"}
{"code": "public final void yybegin(int newState){\n  zzLexicalState=newState;\n}\n", "nl": "Enters a new lexical state"}
{"code": "@NotNull public List<Face> findFaces(@NotNull InputStream image){\n  return faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,image).withResult();\n}\n", "nl": "Find a faces within a local image"}
{"code": "@NotNull public static Configuration create(@NotNull Configuration base,@NotNull VirtualFile file){\n  Configuration configuration=base.clone();\n  LocalResourceRepository resources=AppResourceRepository.getAppResources(base.getModule(),true);\n  ConfigurationMatcher matcher=new ConfigurationMatcher(configuration,resources,file);\n  configuration.getEditedConfig().set(FolderConfiguration.getConfigForFolder(file.getParent().getName()));\n  matcher.adaptConfigSelection(true);\n  return configuration;\n}\n", "nl": "Creates a configuration suitable for the given file"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private void loadPosts(){\n  PostsFragment.this.showProgress(true);\n  RxFirebaseDatabase.getInstance().observeValueEvent(firebaseRef).subscribe(new GetPostsSubscriber());\n}\n", "nl": "Load the posts"}
{"code": "public synchronized void recordStatistics(QueryStatistic statistic){\n}\n", "nl": "Below method will be used to add the statistics"}
{"code": "public Door(final Material type,BlockFace face,boolean isOpen){\n  super(type);\n  setTopHalf(false);\n  setFacingDirection(face);\n  setOpen(isOpen);\n}\n", "nl": "Constructs the bottom half of a door of the given material type, facing the specified direction and set to open or closed"}
{"code": "public void scroll(int itemsToScroll,int time){\n  int distance=itemsToScroll * getItemHeight() - scrollingOffset;\n  scroller.scroll(distance,time);\n}\n", "nl": "Scroll the wheel"}
{"code": "public static boolean isCarteBlanche(String cc){\n  return isDinersClub(cc);\n}\n", "nl": "Checks to see if the cc number is a valid Carte Blanche number"}
{"code": "public static int Integer(int min,int max){\n  return random.nextInt(max - min + 1) + min;\n}\n", "nl": "Random integer betweeb a-b"}
{"code": "public DockerPortMapping withHostPort(int hostPort){\n  DockerPortMapping newMapping=new DockerPortMapping();\n  newMapping.protocol=protocol;\n  newMapping.containerPort=containerPort;\n  newMapping.hostIp=hostIp;\n  newMapping.hostPort=String.valueOf(hostPort);\n  return newMapping;\n}\n", "nl": "Create a copy of this mapping with the given host port"}
{"code": "public static void w(String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.w(TAG,buildMsg(msg),e);\n  }\n}\n", "nl": "warning log"}
{"code": "public Conductor(Body[] trainAnchorList,Track[] tracksList,Array<Player> players){\n  super(null,null,null,EntityType.DEFAULT,null);\n  this.players=players;\n  trainAnchors=trainAnchorList;\n  tracks=tracksList;\n  this.setDifficultyMods();\n  initializeConductor();\n}\n", "nl": "Creates a new Conductor object"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  execute(\"zoom selected;\");\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public void apply(NexusStreamParser np) throws Exception {\n}\n", "nl": "parses the given command and executes it"}
{"code": "@Override public synchronized void close(){\n  if (myDataBase != null)   myDataBase.close();\n  super.close();\n}\n", "nl": "Close database"}
{"code": "public EntityQuery from(DynamicViewEntity dynamicViewEntity){\n  this.dynamicViewEntity=dynamicViewEntity;\n  this.entityName=null;\n  return this;\n}\n", "nl": "Set the entity to query against"}
{"code": "public boolean isOwnerOnly(){\n  return owner;\n}\n", "nl": "Can the object be used only by the owner or visitors too"}
{"code": "public boolean deleteStorage(String groupName,String storageIpAddr) throws IOException {\n  return this.deleteStorage(ClientGlobal.g_tracker_group,groupName,storageIpAddr);\n}\n", "nl": "delete a storage server from the global FastDFS cluster"}
{"code": "public EmbeddedSpaceConfigurer leaderSelector(LeaderSelectorConfig leaderSelectorConfig){\n  validate();\n  factoryBean.leaderSelectorConfig(leaderSelectorConfig);\n  return this;\n}\n", "nl": "Sets an attribute store"}
{"code": "public static <T>T fromMap(Map<?,?> fromMap,Class<T> targetType){\n  return mapper.convertValue(fromMap,targetType);\n}\n", "nl": "Deserialize the map to an object"}
{"code": "public HadoopFileSystemStore(FileSystem fs,SerializationService serial){\n  super(serial);\n  hadoopFileSystem=fs;\n}\n", "nl": "Creates a new storage service on the given HDFS file system using the given serializer"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.001d,0.01d,0.025d,0.05d,0.1d,0.999d,0.990d,0.975d,0.950d,0.900d};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public void actionPerformed(ActionEvent ev){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();\n  if (samples.size() > 0)   execute(\"set nodeShape=circle sample='\" + Basic.toString(samples,\"' '\") + \"';\");\n}\n", "nl": "action to be performed"}
{"code": "protected void assertNoCurrentVariantSet(String errorMessage,List<Long> localeIds,Long tmTextUnitId){\n  for (  Long localeId : localeIds) {\n    TMTextUnitCurrentVariant currentVariant=tmTextUnitCurrentVariantRepository.findByLocale_IdAndTmTextUnit_Id(localeId,tmTextUnitId);\n    assertNull(errorMessage,currentVariant);\n  }\n}\n", "nl": "Asserts that there is a current variant associated to the given tmTextUnit and locales"}
{"code": "public static void createRMA6FileFromDAAPair(String creator,String daaFile1,String daaFile2,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {\n  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,BlastFileFormat.DAA,doc.getBlastMode(),new String[]{daaFile1,daaFile2},new String[]{},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);\n  rma6Creator.parseFiles(progressListener);\n}\n", "nl": "create an RMA6 file from a pair of DAA files"}
{"code": "public Bindings add(String property,JTextComponent c){\n  registerPropertyChangeListener(c);\n  return add(new JTextComponentBinding(property,c,\"\"));\n}\n", "nl": "Handles JEditorPane, JTextArea, JTextField"}
{"code": "public double cond(){\n  return new SingularValueDecomposition(this).cond();\n}\n", "nl": "Matrix condition (2 norm)"}
{"code": "public CM_ENTER_WORLD(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_ENTER_WORLD </tt> packet"}
{"code": "public void addParamClone(ModelParam param){\n  if (param != null) {\n    ModelParam newParam=new ModelParam(param);\n    addParam(newParam);\n  }\n}\n", "nl": "Adds a clone of a parameter definition to this service"}
{"code": "@Override public byte[] asBytes(int rowNumber){\n  return ByteBuffer.allocate(4).putInt(get(rowNumber)).array();\n}\n", "nl": "Returns the contents of the cell at rowNumber as a byte[]"}
{"code": "protected Object invokeRemote(Object proxy,final IMethod method,Object[] args) throws Throwable {\n  ProxyInvocationHandler remoteInvocationHandler=getInvocationHandler();\n  return remoteInvocationHandler.invoke(proxy,method,args);\n}\n", "nl": "performs remote invocation method"}
{"code": "public double norm2(){\n  return s[0];\n}\n", "nl": "Two norm"}
{"code": "public DatabaseGetChairsQuery(VkApiClient client,UserActor actor,int facultyId){\n  super(client,\"database.getChairs\",GetChairsResponse.class);\n  accessToken(actor.getAccessToken());\n  facultyId(facultyId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public Builder elementType(final Type<?> elementType){\n  this.elementType=elementType;\n  return this;\n}\n", "nl": "Set the element type"}
{"code": "public static byte[] hash(byte[] data){\n  return hash(data,0,data.length);\n}\n", "nl": "SHA256 hash of arbitrary data"}
{"code": "public void visitPhpMethod(Method method){\n  final PhpLanguageLevel phpVersion=PhpProjectConfigurationFacade.getInstance(holder.getProject()).getLanguageLevel();\n  if (phpVersion.hasFeature(PhpLanguageFeature.SCALAR_TYPE_HINTS)) {\n    return;\n  }\n  this.checkParameters(method.getParameters(),method);\n}\n", "nl": "TODO: checkReferenceReturnedByCallable - ternary operator, argument usages ?"}
{"code": "private boolean isMergePoint(N target){\n  if (icfg.isStartPoint(target))   return true;\n  List<N> preds=icfg.getPredsOf(target);\n  int size=preds.size();\n  if (size > 1)   return true;\n  if (size > 0)   for (  N pred : preds)   if (icfg.isCallStmt(pred))   return true;\n  return false;\n}\n", "nl": "Gets whether the given unit is a merge point in the ICFG"}
{"code": "private void layout(int width,int height){\n  int itemsWidth=width - 2 * PADDING;\n  itemsLayout.layout(0,0,itemsWidth,height);\n}\n", "nl": "Sets layouts width and height"}
{"code": "public Builder addColumnCategorical(String name,String... stateNames){\n  return addColumn(new CategoricalMetaData(name,stateNames));\n}\n", "nl": "Add a Categorical column, with the specified state names"}
{"code": "public smaliFlexLexer(java.io.Reader in){\n  this.zzReader=in;\n}\n", "nl": "Creates a new scanner"}
{"code": "public PhotosCreateAlbumQuery(VkApiClient client,UserActor actor,String title){\n  super(client,\"photos.createAlbum\",PhotoAlbumFull.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "synchronized public void terminate(){\n  if (isTerminated())   return;\n  _namingCache.terminate();\n  _isTerminated=true;\n  if (threadPool != null)   threadPool.shutdown();\n  if (_logger.isLoggable(Level.FINE))   _logger.fine(toString() + \" terminated.\");\n}\n", "nl": "terminate the split brain controller"}
{"code": "public boolean isDrawInsideEnabled(){\n  return mDrawInside;\n}\n", "nl": "returns whether the legend will draw inside the chart or outside"}
{"code": "public Column removeColumn(String field){\n  int idx=m_names.indexOf(field);\n  if (idx < 0) {\n    throw new IllegalArgumentException(\"No such column.\");\n  }\n  return removeColumn(idx);\n}\n", "nl": "Remove a data field from this table"}
{"code": "public void createPage(String title,String exactTemplateName){\n  typeTitle(title);\n  selectTemplate(exactTemplateName);\n  confirm();\n}\n", "nl": "Fills the title field,"}
{"code": "public Builder addStringDerivedColumn(String columnName,String format,DateTimeZone timeZone){\n  derivedColumns.add(new DerivedColumn(columnName,ColumnType.String,format,timeZone,null));\n  return this;\n}\n", "nl": "Add a String column (for example, human readable format), derived from the time"}
{"code": "@NotNull public VerificationSet verifyFaces(@NotNull String face1Url,@NotNull String face2Url){\n  Face firstFace=findSingleFace(face1Url);\n  Face secondFace=findSingleFace(face2Url);\n  Verification verification=faceTaskBuilder.verifyFace(firstFace.faceId,secondFace.faceId).withResult();\n  return new VerificationSet(firstFace,secondFace,verification);\n}\n", "nl": "Verifies 2 different faces to see if they are the same person"}
{"code": "public void onCreate(){\n}\n", "nl": "IMPORTANT OpenGL is initialized already"}
{"code": "public SpectralSpellInteroperator(String sExecutable,String sInputFile,String[] sArgs){\n  this(sInputFile,sArgs);\n  SSpellExecutable=sExecutable;\n}\n", "nl": "Creates a new instance of SpectralSpellInteroperator"}
{"code": "public void addTask(TaskId taskId,Future<?> task){\n  cancelTask(taskId);\n  tasks.put(taskId.ordinal(),task);\n}\n", "nl": "If task already exist - it will be canceled"}
{"code": "public AppsGetCatalogQuery genreId(Integer value){\n  return unsafeParam(\"genre_id\",value);\n}\n", "nl": "Set genre id"}
{"code": "public void begin(int size){\n}\n", "nl": "Starts the output of a set of data"}
{"code": "public RequestHandle head(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){\n  HttpUriRequest request=new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params));\n  if (headers != null)   request.setHeaders(headers);\n  return sendRequest(httpClient,httpContext,request,null,responseHandler,context);\n}\n", "nl": "Perform a HTTP HEAD request and track the Android Context which initiated the request with customized headers"}
{"code": "public NewsfeedUnignoreItemQuery(VkApiClient client,UserActor actor,NewsfeedItemType type,int ownerId,int itemId){\n  super(client,\"newsfeed.unignoreItem\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  ownerId(ownerId);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private void writeHeader() throws IOException {\n  String headerJson=new ExportFileHeader(FORMAT_VERSION).writeStream();\n  String headerString=headerJson.substring(0,headerJson.lastIndexOf(RIGHT_BRACE.charAt(0)));\n  out.write(headerString.getBytes(UTF_8));\n  out.write(SEPARATOR_NEWLINE);\n  out.write(ENTRIES_START.getBytes(UTF_8));\n}\n", "nl": "An example output is as follows: {\"name\":\"DynamoDB-export\", \"version\":3, \"entries\":["}
{"code": "public static boolean inbetween(int x1,int y1,int x2,int y2,int width,int height){\n  return x2 >= x1 && y2 >= y1 && x2 < x1 + width && y2 < y1 + height;\n}\n", "nl": "Checks if the given Coordinates are inbetween the other given Coordinates"}
{"code": "Collection<? extends ClientRequestResult> handleRetrieveConfigurationsRequest(final ClientRequest configurationRequest,final Session session,final Destination replyDestination){\n  if (configurationRequest.getRequestParameter() != null) {\n    return configurationLoader.getConfigurationReports(configurationRequest.getRequestParameter());\n  }\n else {\n    return configurationLoader.getConfigurationReports();\n  }\n}\n", "nl": "Inner method which handles a request to retrieve configuration reports"}
{"code": "@Override public void forceUpdate(){\n  dataMatrix.clear();\n}\n", "nl": "force update"}
{"code": "public boolean isApplicable(){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  return inspectorWindow != null;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public FloatElemValPair(String name,char kind,float val){\n  super(name,kind);\n  this.val=new FloatCP(val);\n}\n", "nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for"}
{"code": "private Boolean specialLessThan(PlatformLogicalVersion otherVersion){\n  return null;\n}\n", "nl": "Handle special cases of version, by default return null to mark a non special case"}
{"code": "public boolean isFirstTimeUser(){\n  return getPreference(\"firstTimeUser\",true);\n}\n", "nl": "Use this method to know whether user is a first time user or not"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapPilotPermitCustomProperty && getId().equals(((AirMapPilotPermitCustomProperty)o).getId());\n}\n", "nl": "Comparison based on ID"}
{"code": "public MarketGetCommentsQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void executeLsPacket(Runnable pkt){\n  execute(pkt);\n}\n", "nl": "Executes a loginServer packet task"}
{"code": "@Override public void onUserCancel(){\n  if (checkCB != null) {\n    checkCB.onUserCancel();\n  }\n  Recycler.release(this);\n}\n", "nl": "will be never invoke"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array"}
{"code": "public void moveTo(int offset){\n  cursor=offset;\n}\n", "nl": "Moves the cursor to a new location"}
{"code": "public NotesEditQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n", "nl": "Set privacy view"}
{"code": "public VideoRecordReader(int height,int width,List<String> labels){\n  this(height,width,false);\n  this.labels=labels;\n}\n", "nl": "Load the record reader with the given height and width"}
{"code": "private void addLegionMember(Legion legion,Player player){\n  addLegionMember(legion,player,LegionRank.VOLUNTEER);\n}\n", "nl": "This method will add a new legion member to a legion with VOLUNTEER rank"}
{"code": "public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent){\n  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Show empty view when there are not data to show"}
{"code": "public MarketEditAlbumQuery mainAlbum(Boolean value){\n  return unsafeParam(\"main_album\",value);\n}\n", "nl": "Set main album"}
{"code": "public PhotosGetCommentsQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public List<GenericValue> queryList() throws GenericEntityException {\n  return query(null);\n}\n", "nl": "Executes the EntityQuery and returns a list of results"}
{"code": "public void fire(){\n}\n", "nl": "Have the boss fire - Override"}
{"code": "private void skipToNewlineToken(){\n  while (!builder.eof()) {\n    if (currentToken() == ProjectViewTokenType.NEWLINE) {\n      return;\n    }\n    builder.advanceLexer();\n  }\n}\n", "nl": "Skip to the end of the current line"}
{"code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCacheManager.newFile(key));\n}\n", "nl": "Cache for a stream"}
{"code": "public boolean isUptoDate(){\n  return isUptoDate;\n}\n", "nl": "is viewer uptodate?"}
{"code": "public DocumentNGramDistroGraph(){\n  InitGraphs();\n}\n", "nl": "Creates a new instance of DocumentNGramDistroGraph"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=all;\");\n}\n", "nl": "action to be performed"}
{"code": "public void releaseScan(){\n  if (!_singleObjectResult && _pos != null)   _list.freeSLHolder(_pos);\n}\n", "nl": "release SLHolder for this scan"}
{"code": "public static CommandResult execCommand(String command,boolean isRoot){\n  return execCommand(new String[]{command},isRoot,true);\n}\n", "nl": "execute shell command, default return result msg"}
{"code": "public Point2D convertReferenceToWindow(Point2D refPoint){\n  if (scrollBackReferenceRect == null)   return null;\n else   return new Point2D.Double(Math.round(refPoint.getX() * scrollBackReferenceRect.getWidth() + scrollBackReferenceRect.getX()),Math.round(refPoint.getY() * scrollBackReferenceRect.getHeight() + scrollBackReferenceRect.getY()));\n}\n", "nl": "converts a point from reference coordinates to window coordinates"}
{"code": "public void initialise() throws CarbonDataWriterException {\n  fileManager=new FileManager();\n  fileManager.setName(new File(this.storeLocation).getName());\n  setWritingConfiguration();\n}\n", "nl": "This method will be used to get and update the step properties which will required to run this step"}
{"code": "public long length() throws IOException {\n  return position;\n}\n", "nl": "get length of file"}
{"code": "@deprecated public char next(){\n  if (this.nextChar == -1) {\n    findNextChar();\n  }\n  this.curChar=this.nextChar;\n  this.nextChar=-1;\n  return (char)this.curChar;\n}\n", "nl": "/*    "}
{"code": "private void parse(BufferedReader reader){\n  this.messages.clear();\n  reader.lines().map(null).filter(null).forEach(null);\n}\n", "nl": "Parses the Language File"}
{"code": "@Override CoreDocumentImpl ownerDocument(){\n  return ownerDocument;\n}\n", "nl": "same as above but returns internal type and this one is not overridden by CoreDocumentImpl to return null"}
{"code": "public AuthRestoreQuery(VkApiClient client,UserActor actor,String phone){\n  super(client,\"auth.restore\",RestoreResponse.class);\n  accessToken(actor.getAccessToken());\n  phone(phone);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public DatabaseGetStreetsByIdQuery(VkApiClient client,UserActor actor,List<Integer> streetIds){\n  super(client,\"database.getStreetsById\",Utils.buildParametrizedType(List.class,Street.class));\n  accessToken(actor.getAccessToken());\n  streetIds(streetIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public CM_DELETE_CHARACTER(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_DELETE_CHARACTER </tt> packet"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public static Drawable bitmapToDrawable(Bitmap bitmap){\n  return bitmap == null ? null : new BitmapDrawable(bitmap);\n}\n", "nl": "convert Bitmap to Drawable"}
{"code": "public boolean isAliasCI(Local l1,Local l2){\n  PointsToSet pts1=geomPts.reachingObjects(l1);\n  PointsToSet pts2=geomPts.reachingObjects(l2);\n  return pts1.hasNonEmptyIntersection(pts2);\n}\n", "nl": "Are the two pointers an alias with context insensitive points-to information?"}
{"code": "public static void clearAllMemory(){\n  ImageLoader.getInstance().getConfig().cache.clearMemory();\n  ImageLoader.getInstance().getConfig().cache.clearDiskMemory();\n}\n", "nl": "clear all memory"}
{"code": "private void tryScrollBackToTopAfterComplete(){\n  tryScrollBackToTop();\n}\n", "nl": "just make easier to understand"}
{"code": "private boolean isTransactionWithLease(ServerTransaction txn){\n  return txn.getLease() != Long.MAX_VALUE && txn.getLease() != 0;\n}\n", "nl": "Returns true if given transaction is a  timed transaction"}
{"code": "public static String clearLastViewedCategories(HttpServletRequest request,HttpServletResponse response){\n  HttpSession session=request.getSession();\n  if (session != null) {\n    session.setAttribute(\"lastViewedCategories\",FastList.newInstance());\n  }\n  return \"success\";\n}\n", "nl": "Event to clear the last viewed categories"}
{"code": "public static void useSkill(AbstractAI ai2,int skillId){\n  ai2.getOwner().getController().useSkill(skillId);\n}\n", "nl": "Use skill or add intention to use (will be implemented later)"}
{"code": "public void check(){\n  check(ANIMATION_DURATION_MS);\n}\n", "nl": "Transition to check status"}
{"code": "public long validate(long actual,long max,long min,long defaultVal){\n  if (actual <= max && actual >= min) {\n    return actual;\n  }\n  return defaultVal;\n}\n", "nl": "Validate the restrictions"}
{"code": "public RegisterTypeDescriptorResponseInfo(){\n}\n", "nl": "Required for Externalizable"}
{"code": "protected Builder owningType(final Type<?> owningType){\n  this.owningType=owningType;\n  return this;\n}\n", "nl": "Sets the owning type"}
{"code": "private void deactivateObjects(){\n  for (  VisibleObject visObject : objects.values()) {\n    if (visObject instanceof Creature && !(SiegeConfig.BALAUR_AUTO_ASSAULT && visObject instanceof SiegeNpc) && !((Creature)visObject).isFlag()&& !((Creature)visObject).isRaidMonster()) {\n      Creature creature=(Creature)visObject;\n      creature.getAi2().onGeneralEvent(AIEventType.DEACTIVATE);\n    }\n  }\n}\n", "nl": "Send DEACTIVATE event to all objects with AI2"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "public ExecutorScriptingProxyConfigurer(GigaSpace gigaSpace){\n  remotingConfigurer=new ExecutorRemotingProxyConfigurer<ScriptingExecutor>(gigaSpace,ScriptingExecutor.class).metaArgumentsHandler(new ScriptingMetaArgumentsHandler()).remoteInvocationAspect(new LazyLoadingRemoteInvocationAspect()).remoteRoutingHandler(new ScriptingRemoteRoutingHandler());\n}\n", "nl": "Creates a new <code>ExecutorScriptingProxyConfigurer</code> on top of the given space"}
{"code": "public long logSize(){\n  return logBytes;\n}\n", "nl": "Returns the current size of the incremental update log file in bytes;"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public boolean prepare(){\n  if (songs.isEmpty())   return false;\n  if (playingIndex == NO_POSITION) {\n    playingIndex=0;\n  }\n  return true;\n}\n", "nl": "Prepare to play"}
{"code": "public void actionPerformed(ActionEvent ev){\n  Integer[] choices=new Integer[]{0,1,2,3,4,5,6,7,8,9,10,20,40};\n  Integer result=(Integer)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set node size\",\"Set node size\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),choices,choices[1]);\n  if (result != null)   execute(\"set nodeSize=\" + result + \";\");\n}\n", "nl": "action to be performed"}
{"code": "public static <T>void filter(Collection<T> src_,Predicate<T> pred_,List<T> result_){\n  for (  T t : src_) {\n    if (pred_.test(t)) {\n      result_.add(t);\n    }\n  }\n}\n", "nl": "Filter a collection according to some predicate, placing the result in a List"}
{"code": "private void createItemsLayout(){\n  if (itemsLayout == null) {\n    itemsLayout=new LinearLayout(getContext());\n    itemsLayout.setOrientation(LinearLayout.VERTICAL);\n  }\n}\n", "nl": "Creates item layouts if necessary"}
{"code": "public void clearAccountsOnGameServer(){\n  accountsOnGameServer.clear();\n}\n", "nl": "Clears all accounts on this gameServer"}
{"code": "public boolean isLocked(){\n  return locked;\n}\n", "nl": "returns true, if currently locked"}
{"code": "public void updateView(String what){\n  if (getClassification().getName().equals(\"null\")) {\n    classification=ClassificationManager.get(Classification.Taxonomy,true);\n    getViewerJTree().update();\n  }\n  super.updateView(what);\n  updateStatusBar();\n}\n", "nl": "update view"}
{"code": "private static void addChildrenBlockIndex(Set<Integer> blockIndexes,CarbonDimension dimension){\n  for (int i=0; i < dimension.numberOfChild(); i++) {\n    addChildrenBlockIndex(blockIndexes,dimension.getListOfChildDimensions().get(i));\n    blockIndexes.add(dimension.getListOfChildDimensions().get(i).getOrdinal());\n  }\n}\n", "nl": "Below method will be used to add the children block index this will be basically for complex dimension which will have children"}
{"code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void updateGestureRotation(float x,float y){\n  mChart.setRotationAngle(mChart.getAngleForPoint(x,y) - mStartAngle);\n}\n", "nl": "updates the view rotation depending on the given touch position, also takes the starting angle into consideration"}
{"code": "public void assertTextPresentIgnoreCase(String expected,String actual){\n  assertTextPresent(expected.toLowerCase(),actual.toLowerCase());\n}\n", "nl": "Asserts if the provided text is part of some text, ignoring any uppercase characters"}
{"code": "public static JavaRDD<List<Writable>> executeJoin(Join join,JavaRDD<List<Writable>> left,JavaRDD<List<Writable>> right){\n  JavaPairRDD<List<Writable>,JoinValue> leftJV=left.mapToPair(new MapToJoinValuesFunction(true,join));\n  JavaPairRDD<List<Writable>,JoinValue> rightJV=right.mapToPair(new MapToJoinValuesFunction(false,join));\n  JavaPairRDD<List<Writable>,JoinValue> both=leftJV.union(rightJV);\n  JavaPairRDD<List<Writable>,Iterable<JoinValue>> grouped=both.groupByKey();\n  return grouped.flatMap(new ExecuteJoinFlatMapFunction(join));\n}\n", "nl": "Execute a join on the specified data"}
{"code": "public static RecyclerView.ViewHolder createViewHolder(ViewGroup parent){\n  View view=LayoutInflater.from(parent.getContext()).inflate(R.layout.item_message,null);\n  return new MessageHolder(view);\n}\n", "nl": "for RecyclerView"}
{"code": "public void incrementProgress(){\n  isSpinning=false;\n  progress++;\n  setText(Math.round(((float)progress / 360) * 100) + \"%\");\n  spinHandler.sendEmptyMessage(0);\n}\n", "nl": "Increment the progress by 1 (of 360)"}
{"code": "public boolean isDrawInsideEnabled(){\n  return mDrawInside;\n}\n", "nl": "returns whether the legend will draw inside the chart or outside"}
{"code": "@Override public void forceUpdate(){\n  dataMatrix.clear();\n}\n", "nl": "force update"}
{"code": "public void clearCounters(){\n  this.hitCount.set(0);\n  this.missCountNotFound.set(0);\n  this.missCountExpired.set(0);\n  this.missCountSoftRef.set(0);\n  this.removeHitCount.set(0);\n  this.removeMissCount.set(0);\n}\n", "nl": "Clears the hit and miss counters"}
{"code": "public static Uri buildDirUri(){\n  return BASE_URI.buildUpon().appendPath(\"items\").build();\n}\n", "nl": "Matches: /items/"}
{"code": "public DatabaseGetStreetsByIdQuery(VkApiClient client,List<Integer> streetIds){\n  super(client,\"database.getStreetsById\",Utils.buildParametrizedType(List.class,Street.class));\n  streetIds(streetIds);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public DocsGetUploadServerQuery(VkApiClient client,UserActor actor){\n  super(client,\"docs.getUploadServer\",GetUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void notifySkilluseObservers(Skill skill){\n  notifyObservers(ObserverType.SKILLUSE,skill);\n}\n", "nl": "notify that creature used a skill"}
{"code": "public boolean isInfinite(){\n  return !isNaN() && (Double.isInfinite(x.getReal()) || Double.isInfinite(y.getReal()) || Double.isInfinite(z.getReal()));\n}\n", "nl": "Returns true if any coordinate of this vector is infinite and none are NaN; false otherwise"}
{"code": "public EqualizeHistTransform(Random random,int conversionCode){\n  super(random);\n  this.conversionCode=conversionCode;\n  converter=new OpenCVFrameConverter.ToMat();\n}\n", "nl": "Return contrast normalized object"}
{"code": "public void close() throws SAException {\n}\n", "nl": "Cleans up open resources"}
{"code": "public void clearSelection(){\n  List<Integer> selection=getSelectedItems();\n  mSelectedItems.clear();\n  for (  Integer i : selection) {\n    notifyItemChanged(i);\n  }\n}\n", "nl": "Clear the selection status for all items"}
{"code": "public static void w(String tag,String msg){\n  if (isDebug) {\n    Log.w(tag,msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public void actionPerformed(ActionEvent ev){\n  execute(\"load taxonomyFile=ncbi.tre mapfile=ncbi.map;collapse level=2;\");\n}\n", "nl": "action to be performed"}
{"code": "public void reset(){\n  count=0;\n  totalTime=0;\n}\n", "nl": "Resets the call count and total time for this listener"}
{"code": "public StreamGithubMember githubMember(){\n  return this.streamGithubMember;\n}\n", "nl": "Stream that handle Github features"}
{"code": "private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){\n  if (entity != null) {\n    requestBase.setEntity(entity);\n  }\n  return requestBase;\n}\n", "nl": "Applicable only to HttpRequest methods extending HttpEntityEnclosingRequestBase, which is for example not DELETE"}
{"code": "protected void notifyAIOnMove(){\n  MovementNotifyTask.getInstance().add(getOwner());\n}\n", "nl": "Notify everyone in knownlist about move event"}
{"code": "public boolean isApplicable(){\n  ExtractReadsViewer extractReadsViewer=(ExtractReadsViewer)getParent();\n  Document doc=((Director)getDir()).getDocument();\n  return extractReadsViewer != null && doc.getNumberOfReads() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "@Override public int fillConvertedChunkData(int rowId,int columnIndex,int[] row,KeyStructureInfo restructuringInfo){\n  return columnIndex + 1;\n}\n", "nl": "Converts to column dictionary integer value"}
{"code": "public WallGetCommentsQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public EntryCreatedRS startRootItem(String projectName,StartTestItemRQ rq){\n  Launch launch=launchRepository.loadStatusProjectRefAndStartTime(rq.getLaunchId());\n  validate(projectName,rq,launch);\n  TestItem item=testItemBuilder.get().addStartItemRequest(rq).addStatus(Status.IN_PROGRESS).addLaunch(launch).build();\n  testItemRepository.save(item);\n  return new EntryCreatedRS(item.getId());\n}\n", "nl": "Starts root item and related to the specific launch"}
{"code": "public Coord add(Coord coord){\n  return new Coord(x + coord.x,y + coord.y);\n}\n", "nl": "Add this coord instance to another one to return the sum of the coords"}
{"code": "private static synchronized void createAutoAddJob(IProject project){\n  Job j=new AutoAddJob(project);\n  j.setSystem(true);\n  j.setPriority(Job.SHORT);\n  j.setRule(ResourcesPlugin.getWorkspace().getRoot());\n  j.schedule();\n}\n", "nl": "Create and schedule an auto-add job"}
{"code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n", "nl": "Creates the default cumulative probability density test input values"}
{"code": "@Override public int hashCode(){\n  return (fNamespace == null) ? 0 : fNamespace.hashCode();\n}\n", "nl": "Returns the hash code of this grammar"}
{"code": "public static Map<String,String> strToMap(String str){\n  return strToMap(str,\"|\",false);\n}\n", "nl": "Creates a Map from an encoded name/value pair string"}
{"code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapTrafficProperties && getAircraftId().equals(((AirMapTrafficProperties)o).getAircraftId());\n}\n", "nl": "Comparison based on Aircraft ID"}
{"code": "public UsersGetFollowersQueryWithFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n", "nl": "Case for declension of user name and surname"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void execute(EventCallback callback){\n  this.event.setCallback(callback);\n  instance.register(event);\n}\n", "nl": "Runnable to run on event"}
{"code": "public LsClientPacket handle(ByteBuffer data,LoginServerConnection client){\n  State state=client.getState();\n  int id=data.get() & 0xff;\n  return getPacket(state,id,data,client);\n}\n", "nl": "Reads one packet from given ByteBuffer"}
{"code": "final public static long updateCollection(String collection,Object id,V v,boolean adding){\n  BasicDBObject q=new BasicDBObject().append(X.ID,id);\n  return updateCollection(collection,q,v);\n}\n", "nl": "update the mongo data"}
{"code": "public static MutableContextSet fromMap(Map<String,String> map){\n  MutableContextSet set=new MutableContextSet();\n  set.addAll(map);\n  return set;\n}\n", "nl": "Creates a MutableContextSet from an existing map"}
{"code": "private int dp2px(float dpValue){\n  final float scale=getContext().getResources().getDisplayMetrics().density;\n  return (int)(dpValue * scale + 0.5f);\n}\n", "nl": "dp to px"}
{"code": "public void addClickingListener(OnWheelClickedListener listener){\n  clickingListeners.add(listener);\n}\n", "nl": "Adds wheel clicking listener"}
{"code": "public void handle(Context context,String input,String lastToken,SuggestionValue suggestionValue){\n  if (nextHandler != null) {\n    nextHandler.handle(context,input,lastToken,suggestionValue);\n  }\n}\n", "nl": "Interprets the input and converts it to SuggestionValue which can be used to build the suggestion list"}
{"code": "public void drawChart(Graphics2D gc){\n  colorByClasses=true;\n  colorBySeries=false;\n  doDraw(gc);\n}\n", "nl": "draw a Radial Chart"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void forEach(StringMap.ForEachFn<T> forEachFn){\n  for (  String key : internalMap.keySet()) {\n    forEachFn.forEach(internalMap.get(key),key,this);\n  }\n}\n", "nl": "Invokes the given callback for each key / value pair in the map"}
{"code": "public void mouseDragged(@AndroidCoordinate int x,@AndroidCoordinate int y){\n  if (myMouseInteraction != null) {\n    myMouseInteraction.mouseDragged(pxToDp(x),pxToDp(y));\n  }\n}\n", "nl": "Handles mouse drag in the user interaction with our model"}
{"code": "public DLSN positionOnTheNextLedger(){\n  return new DLSN(logSegmentSequenceNo + 1,0,0);\n}\n", "nl": "Positions to a DLSN greater than the current value - this may not correspond to an actual LogRecord, its just used by the positioning logic to position the reader"}
{"code": "static void renderModel(@NotNull ConstraintModel model){\n  model.getNlModel().requestRender();\n}\n", "nl": "Utility function to render the current model to layoutlib"}
{"code": "public void testApp(){\n  assertTrue(true);\n}\n", "nl": "Rigourous Test :-)"}
{"code": "@Override public void forceUpdate(){\n  zScores.clear();\n}\n", "nl": "force update"}
{"code": "public boolean isDefined(){\n  return value != null && this instanceof Some;\n}\n", "nl": "Checks whether the value exists"}
{"code": "public static <V>boolean addListNotNullValue(List<V> sourceList,V value){\n  return (sourceList != null && value != null) ? sourceList.add(value) : false;\n}\n", "nl": "add not null entry to list"}
{"code": "@Override protected float evaluate(Target target){\n  return Float.NaN;\n}\n", "nl": "For boundaries, this does nothing;"}
{"code": "public static ExpectedCondition<Boolean> elementHasAttributeWithValue(final WebElement element,final String attributeName,final String attributeValue){\n  return null;\n}\n", "nl": "Check if element has attribute with provided value"}
{"code": "public static void printThread(String tag,String msg){\n  if (IS_DEBUG_OF_THREAD) {\n    Log.w(tag,\"### \" + msg + \" -> \"+ \"{name: \"+ Thread.currentThread().getName()+ \" , \"+ \"id:\"+ Thread.currentThread().getId()+ \"}\");\n  }\n}\n", "nl": "the print thread information <br> 2015-4-29"}
{"code": "@CheckReturnValue public AddCmd files(String... files){\n  return files(ImmutableList.copyOf(files));\n}\n", "nl": "Configure the files to add to the index"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public void testQueryWithPagination() throws Exception {\n  TaskQuery query=taskService.createTaskQuery();\n  assertEquals(10,query.count());\n  assertEquals(2,query.listPage(0,2).size());\n  query=taskService.createTaskQuery().excludeSubtasks();\n  assertEquals(3,query.count());\n  assertEquals(1,query.listPage(0,1).size());\n}\n", "nl": "test for task inclusion/exclusion (no other filters, no sort)"}
{"code": "public AuthConfirmQuery(VkApiClient client,UserActor actor,int clientId,String clientSecret,String phone,String code){\n  super(client,\"auth.confirm\",ConfirmResponse.class);\n  accessToken(actor.getAccessToken());\n  clientId(clientId);\n  clientSecret(clientSecret);\n  phone(phone);\n  code(code);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public ButtonFactory(String buttonTexture,int width,int height,Point disabledStart,Point enabledStart,Point hoveredStart){\n  this.buttonTexture=buttonTexture;\n  this.width=width;\n  this.height=height;\n  this.disabledStart=disabledStart;\n  this.enabledStart=enabledStart;\n  this.hoveredStart=hoveredStart;\n}\n", "nl": "Instantiates ButtonFactory"}
{"code": "public static void e(String tag,String msg){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  Log.e(tag,msg);\n}\n", "nl": "Send an ERROR log message"}
{"code": "static void removeTextChangedListener(TextView textView,TextWatcher watcher){\n  textView.removeTextChangedListener(watcher);\n}\n", "nl": "Default modifier for removing text change listener"}
{"code": "public static boolean canRemoveItem(Player player,Item item){\n  ItemTemplate it=item.getItemTemplate();\n  if (it.getCategory() == ItemCategory.QUEST) {\n    return true;\n  }\n  return true;\n}\n", "nl": "Check, whether the item can be removed"}
{"code": "public ChangeEntriesSpaceOperationRequest(){\n}\n", "nl": "Required for Externalizable"}
{"code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};\n}\n", "nl": "Creates the default cumulative probability density test expected values"}
{"code": "public long length() throws IOException {\n  return position;\n}\n", "nl": "get current length of file"}
{"code": "public static void i(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_INFO) {\n    return;\n  }\n  Log.i(tag,msg,throwable);\n}\n", "nl": "Send an INFO log message"}
{"code": "public Bindings add(String property,JRadioButton[] cs){\n  registerPropertyChangeListener(cs);\n  return add(new JRadioButtonBinding(property,cs,0));\n}\n", "nl": "Handles JRadioButton"}
{"code": "public boolean supportsSeek() throws IOException {\n  return false;\n}\n", "nl": "supports seek?"}
{"code": "public synchronized void waitForLastSpace() throws InterruptedException {\n  if (!_activeSpaces.isEmpty())   return;\n  _currentSpaceState=StartupState.WAITING;\n  wait();\n  changeState(StartupState.NOT_LAST);\n}\n", "nl": "Wait for the last space to start"}
{"code": "void incrementRefCounter(){\nsynchronized (mutex) {\n    refCounter++;\n  }\n}\n", "nl": "Increment the references"}
{"code": "private ExecutorUtils(){\n}\n", "nl": "avoid construction"}
{"code": "public Builder addColumnLong(String name){\n  return addColumn(new LongMetaData(name));\n}\n", "nl": "Add a Long column, with no restrictions on the min/max values"}
{"code": "private static boolean npcCanExpandLevel(WarehouseExpandTemplate clist,int level){\n  return clist.contains(level);\n}\n", "nl": "Checks if npc can expand level"}
{"code": "@Override public JavaDStream<INDArray> createStream(){\n  JavaPairInputDStream<String,String> messages=KafkaUtils.createStream(jssc,zkHost,\"canova\",Collections.singletonMap(kafkaTopic,kafkaPartitions));\n  JavaDStream<INDArray> dataset=messages.flatMap(new NDArrayFlatMap(recordToDataSetFunction)).cache();\n  return dataset;\n}\n", "nl": "Create the streaming result"}
{"code": "private SqlReservedWords(){\n}\n", "nl": "Utility class - no instances allowed"}
{"code": "public AppTest(String testName){\n  super(testName);\n}\n", "nl": "Create the test case"}
{"code": "public static PhasedBackoffWaitStrategy withLiteLock(long spinTimeout,long yieldTimeout,TimeUnit units){\n  return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new LiteBlockingWaitStrategy());\n}\n", "nl": "Block with wait/notifyAll semantics"}
{"code": "void finishScrolling(){\n  if (isScrollingPerformed) {\n    notifyScrollingListenersAboutEnd();\n    isScrollingPerformed=false;\n  }\n  invalidateLayouts();\n  invalidate();\n}\n", "nl": "Finishes scrolling"}
{"code": "public boolean isApplicable(){\n  return true;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public JMXDetailsPanel(){\n  initComponents();\n  postInit();\n}\n", "nl": "Creates new form JMXDetailsPanel"}
{"code": "private void sendQueryError(String errorMessage){\n  Iterable<String> splitError=Splitter.fixedLength(QUERY_CHUNK_SIZE).split(errorMessage + \"\\n\");\n  for (  String errorChunk : splitError) {\n    sendJson(Json.object(ACTION,ACTION_ERROR,ERROR,errorChunk));\n  }\n  sendJson(Json.object(ACTION,ACTION_QUERY_END));\n}\n", "nl": "Tell the client about an error in their query"}
{"code": "@VisibleForTesting static boolean isTagsMatched(Launch launch,EmailSenderCase oneCase){\n  return !(null != oneCase.getTags() && !oneCase.getTags().isEmpty()) || null != launch.getTags() && oneCase.getTags().containsAll(launch.getTags());\n}\n", "nl": "Validate matching of finished launch tags and project settings for emailing"}
{"code": "@RequestMapping(method=RequestMethod.POST,value=\"orgUnits/{id}/dataSets\") @ResponseBody public String saveDataSetValues2_8(@PathVariable int id,@RequestBody DataSetValue dataSetValue) throws NotAllowedException {\n  facilityReportingService.saveDataSetValues(getUnit(id),dataSetValue);\n  return DATASET_REPORT_UPLOADED;\n}\n", "nl": "Save a facility report for unit"}
{"code": "public FriendsGetMutualQuery targetUids(List<Integer> value){\n  return unsafeParam(\"target_uids\",value);\n}\n", "nl": "Set target uids"}
{"code": "public CM_DIALOG_SELECT(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n", "nl": "Constructs new instance of <tt>CM_CM_REQUEST_DIALOG </tt> packet"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public boolean isCritical(){\n  return false;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public Builder appendStringColumnTransform(String column,String toAppend){\n  return transform(new AppendStringColumnTransform(column,toAppend));\n}\n", "nl": "Append a String to a specified column"}
{"code": "@Override public IAssignmentAlgorithm createAssignmentAlgorithm(){\n  return new AssignmentUsingLCAForTaxonomy(cName,usePercentIdentityFilter);\n}\n", "nl": "creates an assignment algorithm"}
{"code": "public PhotosGetUserPhotosQuery sort(PhotosGetUserPhotosSort value){\n  return unsafeParam(\"sort\",value);\n}\n", "nl": "Sort order"}
{"code": "public void onDialogSelect(int dialogId,Player player,int questId,int extendedRewardIndex){\n}\n", "nl": "Handle Dialog_Select"}
{"code": "public CommandBuilder withArguments(String... arguments){\n  this.arguments.addAll(Arrays.asList(arguments));\n  return this;\n}\n", "nl": "Add arguments"}
{"code": "public static DefaultColumnEntity of(String name,List<Column> columns){\n  DefaultColumnEntity columnEntity=new DefaultColumnEntity(name);\n  columnEntity.addAll(columns);\n  return columnEntity;\n}\n", "nl": "Creates a column family instance"}
{"code": "public static String identity(String str){\n  return Normalizer.normalize(str.trim().toLowerCase(),Normalizer.Form.NFD).replaceAll(\"[^a-z0-9]\",\"\");\n}\n", "nl": "Converts a name to a case-insensitive with simple chars id"}
{"code": "public static int nextNewLine(byte[] text,int offset){\n  while (offset < text.length) {\n    if (text[offset] == '\\n')     return offset;\n else     offset++;\n  }\n  return offset;\n}\n", "nl": "gets the position of the next newline character"}
{"code": "public boolean isAttributeDeprecated(){\n  final String doc=getDocValue(null);\n  return doc != null && StringUtil.containsIgnoreCase(doc,\"deprecated\");\n}\n", "nl": "Checks whether attribute is deprecated by looking up \"deprecated\" in its documenting comment"}
{"code": "public INDArray toBgr(BufferedImage image){\n  if (image == null)   throw new IllegalStateException(\"Unable to load image\");\n  image=scalingIfNeed(image,false);\n  return toINDArrayBGR(image);\n}\n", "nl": "Convert an BufferedImage to an bgr spectrum image"}
{"code": "private void sendAutocomplete(Autocomplete autocomplete){\n  sendJson(Json.object(ACTION,ACTION_AUTOCOMPLETE,AUTOCOMPLETE_CANDIDATES,autocomplete.getCandidates(),AUTOCOMPLETE_CURSOR,autocomplete.getCursorPosition()));\n}\n", "nl": "Send the given autocomplete results to the client"}
{"code": "public DatabaseGetChairsQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n", "nl": "Offset required to get a certain subset of chairs"}
{"code": "protected void saveState(StartupState state) throws IOException {\n  createStateFileIfNotExists();\n  BufferedWriter writer=new BufferedWriter(new FileWriter(_stateFile));\n  writer.write(state.toString());\n  writer.flush();\n}\n", "nl": "Save space state"}
{"code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getLength() > 0;\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "public static void e(String tag,String msg,Throwable throwable){\n  if (sLevel > LEVEL_ERROR) {\n    return;\n  }\n  Log.e(tag,msg,throwable);\n}\n", "nl": "Send an ERROR log message"}
{"code": "public EulerAngle subtract(double x,double y,double z){\n  return add(-x,-y,-z);\n}\n", "nl": "Creates a new EulerAngle which is the result of subtracting the x, y, z components to this EulerAngle"}
{"code": "void changeBackgroundColor(int backgroundColor){\n  this.backgroundColor=backgroundColor;\n  invalidate();\n}\n", "nl": "Change bezier view background color"}
{"code": "private void addSpanWatcher(){\n  Spannable spannable=getText();\n  if (spannable.getSpans(0,spannable.length(),getClass()) != null) {\n    spannable.setSpan(this,0,spannable.length(),Spanned.SPAN_INCLUSIVE_INCLUSIVE);\n  }\n}\n", "nl": "Add a SpanWatcher for the Changeable implementation"}
{"code": "public void initialize(LocalDispatcher dispatcher){\n  this.dispatcher=dispatcher;\n  this.delegator=dispatcher.getDelegator();\n  Debug.logInfo(this.getClass().getName() + \" Authenticator initialized\",module);\n}\n", "nl": "Method called when authenticator is first initialized (the delegator object can be obtained from the LocalDispatcher)"}
{"code": "public static void moveFile(File srcFile,File destFile){\n  boolean rename=srcFile.renameTo(destFile);\n  if (!rename) {\n    copyFile(srcFile.getAbsolutePath(),destFile.getAbsolutePath());\n    deleteFile(srcFile.getAbsolutePath());\n  }\n}\n", "nl": "move file"}
{"code": "private void initData(Context context){\n  scroller=new WheelScroller(getContext(),scrollingListener);\n}\n", "nl": "Initializes class data"}
{"code": "public int executeUpdate(String sql) throws SQLException {\n  init();\n  if (sql.trim().toUpperCase().startsWith(\"SELECT\"))   throw new SQLException(\"Cannot call SELECT with executeUpdate. Use executeQuery instead\",\"GSP\",-143);\n  ResponsePacket response=connection.sendStatement(sql);\n  updateCount=response.getIntResult();\n  return updateCount;\n}\n", "nl": "Execute non-select queries"}
{"code": "public boolean isSetTraceInfo(){\n  return this.traceInfo != null;\n}\n", "nl": "Returns true if field traceInfo is set (has been assigned a value) and false otherwise"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  super.destroyView();\n}\n", "nl": "ask view to destroy itself"}
{"code": "public static SparseMatrix loadSparseMatrix(String filename) throws IOException, IllegalFormatException {\n  return loadSparseMatrix(new File(filename));\n}\n", "nl": "The first line of the input file should be \"rows cols\", and the following line should be \"rowIndex colIndex value\""}
{"code": "public static final void onPlayerLogin(Player player){\n  for (  PlayerGroup group : groups.values()) {\n    PlayerGroupMember member=group.getMember(player.getObjectId());\n    if (member != null) {\n      group.onEvent(new PlayerConnectedEvent(group,player));\n    }\n  }\n}\n", "nl": "Player entered world - search for non expired group"}
{"code": "public static boolean isDiscover(String cc){\n  String first4digs=cc.substring(0,4);\n  if ((cc.length() == 16) && (first4digs.equals(\"6011\")))   return isCreditCard(cc);\n  return false;\n}\n", "nl": "Checks to see if the cc number is a valid Discover number"}
{"code": "protected MockZooKeeper createMockZooKeeper() throws Exception {\n  MockZooKeeper zk=MockZooKeeper.newInstance(MoreExecutors.sameThreadExecutor());\n  ZkUtils.createFullPathOptimistic(zk,LOADBALANCE_BROKERS_ROOT,\"\".getBytes(ZookeeperClientFactoryImpl.ENCODING_SCHEME),ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  return zk;\n}\n", "nl": "Create MockZookeeper instance"}
{"code": "public SharedDataIteratorSource(Object identifier,ISourceDataIteratorProvider<T> sourceDataIteratorProvider,long timeToLive){\n  if (sourceDataIteratorProvider == null)   throw new IllegalArgumentException(\"sourceDataIteratorProvider cannot be null\");\n  _identifier=identifier;\n  _sourceDataIteratorProvider=sourceDataIteratorProvider;\n  _timeToLive=timeToLive;\n  _createdTime=SystemTime.timeMillis();\n}\n", "nl": "Construct a new source"}
{"code": "protected void clearDictionary(List<Dictionary> dictionaryList){\n  for (  Dictionary dictionary : dictionaryList) {\n    dictionary.clear();\n  }\n}\n", "nl": "This method will update the dictionary acceess count which is required for its removal from column LRU cache"}
{"code": "public static boolean hasEncoding(List<Encoding> encodings,Encoding encoding){\n  return encodings.contains(encoding);\n}\n", "nl": "Below method will be used to check whether particular encoding is present in the dimension or not"}
{"code": "public static SM_SYSTEM_MESSAGE STR_LIST_USER(String value0){\n  return new SM_SYSTEM_MESSAGE(1300641,value0);\n}\n", "nl": "Current users: %0"}
{"code": "public UsersGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"users.get\",Utils.buildParametrizedType(List.class,UserXtrCounters.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n", "nl": "action to be performed"}
{"code": "public static boolean checkRootPermission(){\n  return execCommand(\"echo root\",true,false).result == 0;\n}\n", "nl": "check whether has root permission"}
{"code": "public SimpleTextHistoDocument(){\n  Graph=new DocumentWordGraph();\n  Histogram=new DocumentWordHistogram();\n}\n", "nl": "Creates a new instance of SimpleTextHistoDocument"}
{"code": "public MessagesSearchQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "NewProjectDescriptor withCompanyDomain(@NotNull String domain){\n  myDomain=domain;\n  return this;\n}\n", "nl": "Set a custom company domain to enter in the new project wizard"}
{"code": "@Override public void finish() throws QueryExecutionException {\n  if (null != queryProperties.executorService) {\n    queryProperties.executorService.shutdownNow();\n  }\n}\n", "nl": "Below method will be used to finish the execution"}
{"code": "public static StorableTimeFence inTuesdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(TUESDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n", "nl": "Creates a storable time fence which will be valid on Tuesday in the given daily time frame"}
{"code": "public PhotosSaveQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.save\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "protected void notifyDataInvalidatedEvent(){\n  if (datasetObservers != null) {\n    for (    DataSetObserver observer : datasetObservers) {\n      observer.onInvalidated();\n    }\n  }\n}\n", "nl": "Notifies observers about invalidating data"}
{"code": "protected synchronized int assignDocTypeNumber(){\n  return ++docAndDoctypeCounter;\n}\n", "nl": "NON-DOM:  increment document/doctype counter"}
{"code": "public void addFriend(Friend friend){\n  friends.add(friend);\n}\n", "nl": "Adds the given friend to the list<br /> To add a friend in the database, see <tt>PlayerService</tt>"}
{"code": "public Color mixDyes(DyeColor... colors){\n  Validate.noNullElements(colors,\"Colors cannot be null\");\n  Color[] toPass=new Color[colors.length];\n  for (int i=0; i < colors.length; i++) {\n    toPass[i]=colors[i].getColor();\n  }\n  return mixColors(toPass);\n}\n", "nl": "Creates a new color with its RGB components changed as if it was dyed with the colors passed in, replicating vanilla workbench dyeing"}
{"code": "public static ActAction act(float delta){\n  ActAction action=action(ActAction.class);\n  action.setDelta(delta);\n  return action;\n}\n", "nl": "Calls target#act(delta)"}
{"code": "public static boolean supports(String db,int majorVersion,int minorVersion){\n  return MYSQL_DB_NAME.equals(db) && majorVersion == 5;\n}\n", "nl": "Returns true only if DB supports MySQL5"}
{"code": "public static String execute(String command){\n  return execute(command,null);\n}\n", "nl": "Execute a command in the runtime environment"}
{"code": "public final void warn(final Object o){\n  log(Level.WARN,o);\n}\n", "nl": "This method logs the WARNING message"}
{"code": "public PhotosSearchQuery(VkApiClient client){\n  super(client,\"photos.search\",SearchResponse.class);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private boolean isRequestingSensorEventData(String nodeId){\n  SensorDataRequest request=sensorDataRequests.get(nodeId);\n  if (request == null) {\n    return false;\n  }\n  return request.getEndTimestamp() == DataRequest.TIMESTAMP_NOT_SET;\n}\n", "nl": "Returns true if the app is requesting sensor data from the device with the specified node id"}
{"code": "public boolean isApplicable(){\n  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();\n}\n", "nl": "is the command currently applicable? Used to set enable state of command"}
{"code": "private Launch validate(String launchId,String projectName){\n  Launch launch=launchRepository.findOne(launchId);\n  expect(launch,notNull()).verify(LAUNCH_NOT_FOUND,launchId);\n  expect(launch.getProjectRef(),equalTo(projectName)).verify(ErrorType.FORBIDDEN_OPERATION,formattedSupplier(\"Specified launch with id '{}' not referenced to specified project '{}'\",launchId,projectName));\n  return launch;\n}\n", "nl": "Validate launch reference to specified project ID"}
{"code": "private static long toLong(int x,int z){\n  return ((long)x << 32) + z - Integer.MIN_VALUE;\n}\n", "nl": "Shift two int's together to form a compound key"}
{"code": "public WatchedObject addIdleWatch(ConnectionResource client){\n  return addWatch(new ClientWatchedObject(this,client));\n}\n", "nl": "Add CPeer to the watched objects (idle group)"}
{"code": "public byte[] toByteArray(){\n  return Arrays.copyOf(bytes,bytes.length);\n}\n", "nl": "Safe access to the digest stored in a Hash"}
{"code": "public void stopScrolling(){\n  scroller.stopScrolling();\n}\n", "nl": "Stops scrolling"}
{"code": "public static void d(String tag,String msg){\n  if (sLevel > LEVEL_DEBUG) {\n    return;\n  }\n  Log.d(tag,msg);\n}\n", "nl": "Send a DEBUG log message"}
{"code": "public static WxUserGroupResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxUserGroupResult.class);\n}\n", "nl": "json --> obj"}
{"code": "@Deprecated public void onSuccess(int statusCode,Header[] headers,String content){\n  onSuccess(statusCode,content);\n}\n", "nl": "Fired when a request returns successfully, override to handle in your own code"}
{"code": "private boolean canChangeSelfIntro(Player activePlayer,String newSelfIntro){\n  return isValidSelfIntro(newSelfIntro);\n}\n", "nl": "This method checks all restrictions for changing self intro"}
{"code": "public ResourceNameValidator exist(){\n  myExist=true;\n  myUnique=false;\n  return this;\n}\n", "nl": "Makes the resource name validator require that names already exist"}
{"code": "public void reinitialiseNode(int nodeId){\n  this.zwaveNodes.remove(nodeId);\n  addNode(nodeId);\n}\n", "nl": "Removes the node, and restarts the initialisation sequence"}
{"code": "public final void fatal(final Object o,final Throwable t){\n  log(Level.FATAL,o,t);\n}\n", "nl": "This method logs the FATAL message"}
{"code": "@Override public boolean equals(Object dataTag){\n  if (dataTag instanceof AbstractTagCacheObject) {\n    return this.id.equals(((AbstractTagCacheObject)dataTag).getId());\n  }\n else {\n    return false;\n  }\n}\n", "nl": "only compare ids so far"}
{"code": "public static String createFullSpaceName(String containerName,String spaceName){\n  return containerName + \":\" + spaceName;\n}\n", "nl": "Create full space name based on container nadm and space name"}
{"code": "public static void d(String tag,String msg){\n  if (isDebug) {\n    Log.d(tag,msg);\n  }\n}\n", "nl": "<br> 2015-4-29"}
{"code": "public static Map<String,Object> createEmailAddress(DispatchContext ctx,Map<String,? extends Object> context){\n  Map<String,Object> newContext=UtilMisc.makeMapWritable(context);\n  newContext.put(\"infoString\",newContext.get(\"emailAddress\"));\n  newContext.remove(\"emailAddress\");\n  newContext.put(\"contactMechTypeId\",\"EMAIL_ADDRESS\");\n  return createContactMech(ctx,newContext);\n}\n", "nl": "Creates a EmailAddress <b>security check</b>: userLogin partyId must equal partyId, or must have PARTYMGR_CREATE permission"}
{"code": "protected ForkProcessException newForkProcessException(Throwable t){\n  return new ForkProcessException(\"Failed to start process [\" + getProcessArgs() + \"]\",t);\n}\n", "nl": "builds a fork process exception"}
{"code": "public boolean isCritical(){\n  return true;\n}\n", "nl": "is this a critical command that can only be executed when no other command is running?"}
{"code": "@Override public boolean checkCondition(){\n  return alliance.hasMember(disconnected.getObjectId());\n}\n", "nl": "Player should be in alliance before disconnection"}
{"code": "public static void writeNBTList(PacketBuffer buf,NBTTagList value){\n  buf.writeInt(value.tagCount());\n  for (int i=0; i < value.tagCount(); i++) {\n    buf.writeNBTTagCompoundToBuffer(value.getCompoundTagAt(i));\n  }\n}\n", "nl": "Writes an NBT list to the buffer"}
{"code": "public static boolean isInitialized(Context ctx){\n  vitamioPackage=ctx.getPackageName();\n  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + \"lib/\";\n  return true;\n}\n", "nl": "Check if Vitamio is initialized at this device"}
{"code": "public Bitmap put(String key,Bitmap value){\n  return cache.put(key,value);\n}\n", "nl": "put bitmap to image cache"}
{"code": "public CountClearEntriesSpaceOperationResult(){\n}\n", "nl": "Required for Externalizable"}
{"code": "public GroupsGetByIdQuery(VkApiClient client){\n  super(client,\"groups.getById\",Utils.buildParametrizedType(List.class,GroupFull.class));\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "private String gaps(int n){\n  StringBuilder buf=new StringBuilder();\n  for (; n > 0; n--) {\n    buf.append('-');\n  }\n  return buf.toString();\n}\n", "nl": "get string of n gaps"}
{"code": "public static void writeSchema(String outputPath,Schema schema,JavaSparkContext sc) throws IOException {\n  writeStringToFile(outputPath,schema.toString(),sc);\n}\n", "nl": "Write a schema to a HDFS (or, local) file in a human-readable format"}
{"code": "public static void createAircraft(AirMapAircraft aircraft,@Nullable AirMapCallback<AirMapAircraft> callback){\n  PilotService.createAircraft(aircraft,callback);\n}\n", "nl": "Create an aircraft for the authenticated pilot"}
{"code": "public boolean containsGroup(Group group){\n  return containsGroup(group.getName());\n}\n", "nl": "Checks if a group features on this track"}
{"code": "public VideoRemoveTagQuery(VkApiClient client,UserActor actor,int tagId,int videoId){\n  super(client,\"video.removeTag\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  tagId(tagId);\n  videoId(videoId);\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public boolean hasNext(){\n  return iterator.hasNext() || pos < top;\n}\n", "nl": "does next element exist?"}
{"code": "@Override public long limit(){\n  return limit;\n}\n", "nl": "length of array todo: limit can be incorrect if getMap() was used to change values"}
{"code": "public static void d(String tag,String msg){\n  if (LOG_ENABLE && Log.isLoggable(tag,Log.DEBUG)) {\n    Log.d(tag,buildMsg(msg));\n  }\n}\n", "nl": "debug log"}
{"code": "public void showEmpty(Drawable emptyImageDrawable,String emptyTextContent){\n  switchState(EMPTY,emptyImageDrawable,emptyTextContent,null,null,Collections.<Integer>emptyList());\n}\n", "nl": "Show empty view when there are not data to show"}
{"code": "public boolean hasNavigtionBar(){\n  return mHasNavigationBar;\n}\n", "nl": "Does this device have a system navigation bar?"}
{"code": "public VideoDeleteQuery targetId(Integer value){\n  return unsafeParam(\"target_id\",value);\n}\n", "nl": "Set target id"}
{"code": "public AudioSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n", "nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters"}
{"code": "public void pause(){\n}\n", "nl": "Pauses the audio output"}
{"code": "@Override public DimensionColumnDataChunk[] readDimensionChunks(FileHolder fileReader,int... blockIndexes){\n  DimensionColumnDataChunk[] dataChunks=new DimensionColumnDataChunk[dimensionColumnChunk.size()];\n  for (int i=0; i < blockIndexes.length; i++) {\n    dataChunks[blockIndexes[i]]=readDimensionChunk(fileReader,blockIndexes[i]);\n  }\n  return dataChunks;\n}\n", "nl": "Below method will be used to read the chunk based on block indexes"}
