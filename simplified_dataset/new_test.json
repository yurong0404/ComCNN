{"nl": "actvitiy result", "code": "public void onActivityResult(int requestCode,int resultCode,Intent data){\n  for (  Map.Entry<PlatformType,SSOHandler> entry : mMapSSOHandler.entrySet()) {\n    entry.getValue().onActivityResult(requestCode,resultCode,data);\n  }\n}\n"}
{"nl": "uses the douglas peuker algorithm to reduce the given List of entries", "code": "private List<Entry> reduceWithDouglasPeuker(List<Entry> entries,double epsilon){\n  if (epsilon <= 0 || entries.size() < 3) {\n    return entries;\n  }\n  keep[0]=true;\n  keep[entries.size() - 1]=true;\n  algorithmDouglasPeucker(entries,epsilon,0,entries.size() - 1);\n  List<Entry> reducedEntries=new ArrayList<>();\n  for (int i=0; i < entries.size(); i++) {\n    if (keep[i]) {\n      Entry curEntry=entries.get(i);\n      reducedEntries.add(new Entry(curEntry.getVal(),curEntry.getXIndex()));\n    }\n  }\n  return reducedEntries;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n}\n"}
{"nl": "the print thread information <br> 2015-4-29", "code": "public static void printThread(Class<?> clazz,String msg){\n  if (IS_DEBUG_OF_THREAD) {\n    Log.w(clazz.getSimpleName(),\"### \" + msg + \" -> \"+ \" {name: \"+ Thread.currentThread().getName()+ \" , \"+ \"id:\"+ Thread.currentThread().getId()+ \"}\");\n  }\n}\n"}
{"nl": "Another helper function that will convert a byte array to a Hex String with leading zeros in place", "code": "private String toHex(byte[] data){\n  char[] chars=new char[data.length * 2];\n  for (int i=0; i < data.length; i++) {\n    chars[i * 2]=HEX_DIGITS[(data[i] >> 4) & 0xf];\n    chars[i * 2 + 1]=HEX_DIGITS[data[i] & 0xf];\n  }\n  return new String(chars);\n}\n"}
{"nl": "Build an empty map with default size", "code": "public OpenIntToDoubleHashMap(final double missingEntries){\n  this(DEFAULT_EXPECTED_SIZE,missingEntries);\n}\n"}
{"nl": "Returns the quadraticMean, aka the root-mean-square, for all values in this column", "code": "public double quadraticMean(){\n  return NumericReduceUtils.quadraticMean.reduce(this);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PollsEditQuery(VkApiClient client,UserActor actor,int ownerId,int pollId){\n  super(client,\"polls.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  pollId(pollId);\n}\n"}
{"nl": "Below method is convert the thrift encoding to wrapper encoding", "code": "private Encoding fromExternalToWrapperEncoding(org.apache.carbondata.format.Encoding encoderThrift){\nswitch (encoderThrift) {\ncase DICTIONARY:\n    return Encoding.DICTIONARY;\ncase DELTA:\n  return Encoding.DELTA;\ncase RLE:\nreturn Encoding.RLE;\ncase INVERTED_INDEX:\nreturn Encoding.INVERTED_INDEX;\ncase BIT_PACKED:\nreturn Encoding.BIT_PACKED;\ncase DIRECT_DICTIONARY:\nreturn Encoding.DIRECT_DICTIONARY;\ndefault :\nreturn Encoding.DICTIONARY;\n}\n}\n"}
{"nl": "Takes a simple query string and parses it into a Map", "code": "private Map<String,String> parseQueryString(String queryString){\n  TreeMap<String,String> queryMap=new TreeMap<String,String>();\n  String[] queryPairs=queryString.split(\"&\");\n  for (  String pair : queryPairs) {\n    int idx=pair.indexOf(\"=\");\n    try {\n      queryMap.put(URLDecoder.decode(pair.substring(0,idx),\"UTF-8\"),URLDecoder.decode(pair.substring(idx + 1),\"UTF-8\"));\n    }\n catch (    UnsupportedEncodingException e) {\n      e.printStackTrace();\n    }\n  }\n  return queryMap;\n}\n"}
{"nl": "generate a fresh variable avoiding global variables and variables from the same query", "code": "public static String createFreshVariable(Set<String> vars,String var){\n  String fresh=var;\n  while (vars.contains(fresh)) {\n    String valFree=fresh.replaceAll(\"[^0-9]\",\"\");\n    int value=valFree.equals(\"\") ? 0 : Integer.parseInt(valFree);\n    fresh=fresh.replaceAll(\"\\\\d+\",\"\") + (++value);\n  }\n  return fresh;\n}\n"}
{"nl": "New a lease with ttl value", "code": "@Override public ListenableFuture<LeaseGrantResponse> grant(long ttl){\n  LeaseGrantRequest leaseGrantRequest=LeaseGrantRequest.newBuilder().setTTL(ttl).build();\n  return this.leaseFutureStub.leaseGrant(leaseGrantRequest);\n}\n"}
{"nl": "Computes sum of squares of the lower triangle of the matrix x", "code": "static private double norm(double[] x){\n  int n=x.length;\n  double ss=0.0;\n  double xk;\n  for (  double aX : x) {\n    xk=aX;\n    ss+=xk * xk;\n  }\n  return ss;\n}\n"}
{"nl": "append the src class to the target class", "code": "public void appendClass(int classificationId,int srcClassId,int tarClassId){\n  int newSize=getSize(classificationId,srcClassId) + getSize(classificationId,tarClassId);\n  if (newSize > 0) {\n    UpdateItem firstItemSrc=getFirst(classificationId,srcClassId);\n    if (firstItemSrc == null) {\n      System.err.println(\"Warning: srcClassId=\" + srcClassId + \", tarClassId=\"+ tarClassId+ \" firstItemSrc=null\");\n      return;\n    }\n    long readUid=firstItemSrc.getReadUId();\n    while (readUid != 0) {\n      UpdateItem item=readUid2UpdateItem.get(readUid);\n      item.setClassId(classificationId,tarClassId);\n      readUid=item.getNextInClassification(classificationId);\n    }\n    UpdateItem firstItemTar=getFirst(classificationId,tarClassId);\n    if (firstItemTar == null)     setFirst(classificationId,tarClassId,firstItemSrc);\n    UpdateItem lastItemTar=getLast(classificationId,tarClassId);\n    if (lastItemTar != null)     lastItemTar.setNextInClassifaction(classificationId,firstItemSrc.getReadUId());\n    UpdateItem lastItemSrc=getLast(classificationId,srcClassId);\n    setLast(classificationId,tarClassId,lastItemSrc);\n    setSize(classificationId,tarClassId,newSize);\n    removeClass(classificationId,srcClassId);\n    sortChain(classificationId,tarClassId);\n  }\n}\n"}
{"nl": "Move to current target", "code": "public void moveToTargetObject(){\n  if (started.compareAndSet(false,true)) {\n    if (owner.getAi2().isLogging()) {\n      AI2Logger.moveinfo(owner,\"MC: moveToTarget started\");\n    }\n    destination=Destination.TARGET_OBJECT;\n    updateLastMove();\n    MoveTaskManager.getInstance().addCreature(owner);\n  }\n}\n"}
{"nl": "Need for fix bug with some Samsung and Sony devices, when taking photo in landscape mode", "code": "@Override protected void onRestoreInstanceState(Bundle savedInstanceState){\n  super.onRestoreInstanceState(savedInstanceState);\n  contentManager.onRestoreInstanceState(savedInstanceState);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketAddToAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,List<Integer> albumIds){\n  super(client,\"market.addToAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  albumIds(albumIds);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ParametersDialog viewer=(ParametersDialog)getParent();\n  return viewer != null;\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.EUCLIDEAN_NORMALIZED);\n}\n"}
{"nl": "show an error notation", "code": "public static void showError(Object parentIgnored,String message){\n  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,60000);\n}\n"}
{"nl": "decode byte buffer", "code": "@SuppressWarnings(\"unchecked\") public T[] decode(byte[] bs,Class<T> clazz,int fieldsTotalSize) throws Exception {\n  if (bs.length % fieldsTotalSize != 0) {\n    throw new IOException(\"byte array length: \" + bs.length + \" is invalid!\");\n  }\n  int count=bs.length / fieldsTotalSize;\n  int offset;\n  T[] results=(T[])Array.newInstance(clazz,count);\n  offset=0;\n  for (int i=0; i < results.length; i++) {\n    results[i]=clazz.newInstance();\n    results[i].setFields(bs,offset);\n    offset+=fieldsTotalSize;\n  }\n  return results;\n}\n"}
{"nl": "****************************** WEAPON QUERIES", "code": "public WeaponCursor queryWeapon(){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_WEAPONS;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new WeaponCursor(wrapJoinHelper(builderWeapon(),qh));\n}\n"}
{"nl": "Check whether player can perform trade", "code": "public static boolean canTrade(Player player){\n  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canTrade.ordinal()]) {\n    if (!restrictions.canTrade(player)) {\n      return false;\n    }\n  }\n  if (player.getLifeStats().isAlreadyDead()) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Set shorter", "code": "public VideoSearchQuery shorter(Integer value){\n  return unsafeParam(\"shorter\",value);\n}\n"}
{"nl": "Removes an entry from the list if it resides at a specific index", "code": "@ObjectiveCName(\"removeEntry:index:\") public List removeEntry(String entry,int index){\n  java.util.List entries=this.getEntries();\n  if (entries.get(index).equals(entry)) {\n    entries.remove(index);\n  }\n  this.updateList(entries);\n  return this;\n}\n"}
{"nl": "Perform a mathematical operation (add, subtract, scalar max etc) on the specified long column, with a scalar", "code": "public Builder longMathOp(String columnName,MathOp mathOp,long scalar){\n  return transform(new LongMathOpTransform(columnName,mathOp,scalar));\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getFirstOfPairFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getFirstOfPairFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Returns true if field appkey is set (has been assigned a value) and false otherwise", "code": "public boolean isSetAppkey(){\n  return this.appkey != null;\n}\n"}
{"nl": "some file does not exist, repair them with :patch process Generally you will not use it", "code": "public static void onReceiveRepairPatch(Context context,String patchLocation){\n  Tinker.with(context).getPatchListener().onPatchReceived(patchLocation,false);\n}\n"}
{"nl": "Call this method to start fingerprint scanning", "code": "@Override public void start(){\n  impl.start();\n}\n"}
{"nl": "Set separate", "code": "public AppsSendRequestQuery separate(Boolean value){\n  return unsafeParam(\"separate\",value);\n}\n"}
{"nl": "Return a tap target for the menu item from the given toolbar", "code": "public static ToolbarTapTarget forToolbarMenuItem(Toolbar toolbar,@IdRes int menuItemId,CharSequence title,@Nullable CharSequence description){\n  return new ToolbarTapTarget(toolbar,menuItemId,title,description);\n}\n"}
{"nl": "The tagger model filename", "code": "public String taggerModelFileName(){\nswitch (language) {\ncase ENGLISH:\n    return \"/export/dat/tag/en/cmm\";\ncase VIETNAMESE:\n  return \"/export/dat/tag/vi/cmm\";\n}\nreturn null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoEditCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"video.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "Set fields", "code": "public MessagesGetHistoryAttachmentsQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Return news items from banned sources", "code": "public NewsfeedGetQuery returnBanned(Boolean value){\n  return unsafeParam(\"return_banned\",value);\n}\n"}
{"nl": "static method solving quadratic equations: Finding x where a*x*x+b*x+c=0", "code": "public static List<Complex> solve(double a,double b,double c){\n  List<Complex> result=new ArrayList<>();\n  if (a == 0) {\n    if (b != 0) {\n      result.add(new Complex(-c / b,0));\n    }\n  }\n else {\n    if (a < 0) {\n      a=-a;\n      b=-b;\n      c=-c;\n    }\n    double delta=b * b - 4 * a * c;\n    if (delta < 0) {\n      double deltaSqrt=Math.sqrt(-delta);\n      result.add(new Complex(-b / (2 * a),-deltaSqrt / (2 * a)));\n      result.add(new Complex(-b / (2 * a),deltaSqrt / (2 * a)));\n    }\n else     if (delta > 0) {\n      double deltaSqrt=Math.sqrt(delta);\n      result.add(new Complex((-b - deltaSqrt) / (2 * a),0));\n      result.add(new Complex((-b + deltaSqrt) / (2 * a),0));\n    }\n else {\n      result.add(new Complex(-b / (2 * a),0));\n    }\n  }\n  return result;\n}\n"}
{"nl": "Triggers the source expired event", "code": "private void triggerExpiredEvent(){\n  if (_listener != null)   _listener.onExpired(this);\n}\n"}
{"nl": "assuming that the FileIterator has just returned the header line of a fastA or fastQ record, writes the full text of the match", "code": "public static void skipFastAText(FileIterator it,boolean isFastA){\n  if (isFastA) {\n    while (it.hasNext() && it.peekNextByte() != '>') {\n      it.next();\n    }\n  }\n else {\n    if (it.hasNext()) {\n      it.next();\n    }\n    if (it.hasNext()) {\n      it.next();\n    }\n    if (it.hasNext()) {\n      it.next();\n    }\n  }\n}\n"}
{"nl": "Returns task configurations", "code": "@Override public List<Map<String,String>> taskConfigs(int maxTasks){\n  ArrayList<Map<String,String>> configurations=new ArrayList<>();\n  for (int i=0; i < maxTasks; i++) {\n    configurations.add(fProperties);\n  }\n  return configurations;\n}\n"}
{"nl": "error log", "code": "public static void e(String msg){\n  if (LOG_ENABLE) {\n    Log.e(TAG,buildMsg(msg));\n  }\n}\n"}
{"nl": "write size-prefixed bytes", "code": "public void writeSizedPrefixedBytes(byte[] bytes) throws IOException {\n  writeSizedPrefixedBytes(bytes,0,bytes.length);\n}\n"}
{"nl": "Checkout projects from the SVN repository", "code": "private IProject[] checkout(IProject[] projects,Map<IProject,LoadInfo> infoMap,IProgressMonitor monitor) throws TeamException, MalformedURLException {\n  if (projects == null || projects.length == 0) {\n    return new IProject[0];\n  }\n  ISchedulingRule[] ruleArray=new ISchedulingRule[projects.length];\n  for (int i=0; i < projects.length; i++) {\n    ruleArray[i]=projects[i].getWorkspace().getRuleFactory().modifyRule(projects[i]);\n  }\n  ISchedulingRule rule=MultiRule.combine(ruleArray);\n  Job.getJobManager().beginRule(rule,monitor);\n  monitor.beginTask(\"\",1000 * projects.length);\n  List<IProject> result=new ArrayList<IProject>();\n  try {\n    for (    IProject project : projects) {\n      if (monitor.isCanceled()) {\n        break;\n      }\n      LoadInfo info=infoMap.get(project);\n      if (info != null && info.checkout(new SubProgressMonitor(monitor,1000))) {\n        result.add(project);\n      }\n    }\n  }\n  finally {\n    Job.getJobManager().endRule(rule);\n    monitor.done();\n  }\n  return result.toArray(new IProject[result.size()]);\n}\n"}
{"nl": "Adds n to this", "code": "public boolean add(Node n){\n  int num=n.getNumber();\n  if (!get(num)) {\n    set(num);\n    return true;\n  }\n else   return false;\n}\n"}
{"nl": "returns inner array", "code": "public byte[] toByteArray(){\n  byte[] result=new byte[count];\n  System.arraycopy(buf,0,result,0,count);\n  return result;\n}\n"}
{"nl": "Answer whether the provided repository location already has an exact match location The location string corresponds to the Strin returned by ISVNRepositoryLocation#getLocation()", "code": "public boolean exactMatchExists(String location){\n  Set<String> keys=repositories.keySet();\n  for (  String url : keys) {\n    if (url.equals(location)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Activity lifecycle events", "code": "public void onStart(){\n  mGoogleApiClient.connect();\n}\n"}
{"nl": "Required for Externalizable", "code": "public AddEntryTypeIndexesSpaceOperationResult(){\n}\n"}
{"nl": "Required for Externalizable", "code": "public AggregateEntriesSpaceOperationRequest(){\n}\n"}
{"nl": "from login server to source, after response from target server", "code": "public void onError(int taskId,String reason){\n  this.transfers.remove(taskId);\n  textLog.info(\"taskId:\" + taskId + \"; [Error. Transfer failed] \"+ reason);\n}\n"}
{"nl": "is split trivial?", "code": "public boolean isTrivial(){\n  return getA().size() == 1 || getB().size() == 1;\n}\n"}
{"nl": "Updates the check state of all created children", "code": "private void updateChildrenItems(TreeItem parent){\n  Item[] children=getChildren(parent);\n  boolean state=parent.getChecked();\n  for (int i=0; i < children.length; i++) {\n    TreeItem curr=(TreeItem)children[i];\n    if (curr.getData() != null && ((curr.getChecked() != state) || curr.getGrayed())) {\n      curr.setChecked(state);\n      curr.setGrayed(false);\n      updateChildrenItems(curr);\n    }\n  }\n}\n"}
{"nl": "set the group id associated with a sample", "code": "public void putGroupId(String sampleName,String id){\n  put(sampleName,HiddenAttribute.GroupId,id);\n}\n"}
{"nl": "Check if we're aborting or aborted", "code": "public boolean isAborted(){\n  return state == ABORTED || state == ABORTING;\n}\n"}
{"nl": "Used for calculating top part of simple regression for beta 1", "code": "public static double sumOfMeanDifferences(double[] vector,double[] vector2){\n  double mean=sum(vector) / vector.length;\n  double mean2=sum(vector2) / vector2.length;\n  double ret=0;\n  for (int i=0; i < vector.length; i++) {\n    double vec1Diff=vector[i] - mean;\n    double vec2Diff=vector2[i] - mean2;\n    ret+=vec1Diff * vec2Diff;\n  }\n  return ret;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> posts){\n  super(client,\"wall.getById\",GetByIdExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  posts(posts);\n  extended(true);\n}\n"}
{"nl": "Format a time into a readable string", "code": "public static String timeFormat(long duration){\n  long value=duration;\n  value=value / 1000;\n  long seconds=value % 60;\n  value=value / 60;\n  long minutes=value % 60;\n  value=value / 60;\n  long hours=value % 24;\n  long days=value / 24;\n  String result=\"\";\n  if (days > 0)   result=days + (days > 1 ? \" days\" : \" day\") + (hours > 0 ? \", \" + hours + getHoursText(hours) : \"\")+ (minutes > 0 ? \", \" + minutes + getMinutesText(minutes) : \"\")+ (seconds > 0 ? \", \" + seconds + getSecondsText(seconds) : \"\");\n else   if (hours > 0)   result=hours + getHoursText(hours) + (minutes > 0 ? \", \" + minutes + getMinutesText(minutes) : \"\")+ (seconds > 0 ? \", \" + seconds + getSecondsText(seconds) : \"\");\n else   if (minutes > 0)   result=minutes + getMinutesText(minutes) + (seconds > 0 ? \", \" + seconds + getSecondsText(seconds) : \"\");\n else   if (seconds > 0)   result=seconds + getSecondsText(seconds);\n else   result=\"0\";\n  return (result);\n}\n"}
{"nl": "Reads a code of length 8 in an array of bits, padding with zeros", "code": "private static byte readByte(boolean[] rawbits,int startIndex){\n  int n=rawbits.length - startIndex;\n  if (n >= 8) {\n    return (byte)readCode(rawbits,startIndex,8);\n  }\n  return (byte)(readCode(rawbits,startIndex,n) << (8 - n));\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.HELLINGER);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"wall.get\",GetExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getDoc().getNumberOfReads() > 0;\n}\n"}
{"nl": "Returns true if the device is capable of running Instant Run", "code": "public static boolean isInstantRunCapableDeviceVersion(@NotNull AndroidVersion version){\n  return version.getApiLevel() >= 15;\n}\n"}
{"nl": "Record the config push log", "code": "private void recordPushLog(String configName){\n  PushLog pushLog=new PushLog();\n  pushLog.setAppId(client.getAppId());\n  pushLog.setConfig(configName);\n  pushLog.setClient(IP4s.intToIp(client.getIp()) + \":\" + client.getPid());\n  pushLog.setServer(serverHost.get());\n  pushLog.setCtime(new Date());\n  pushLogService.add(pushLog);\n}\n"}
{"nl": "Add given socket and cpeer to the watched objects (response group)", "code": "public WatchedObject addResponseWatch(SocketChannel sock,ConnectionResource client){\n  return addWatch(new ResponseWatchedObject(this,sock,client));\n}\n"}
{"nl": "Set privacy comment", "code": "public NotesAddQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n"}
{"nl": "Draw the foreground layer for the GuiContainer (everything in front of the items)", "code": "protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){\n  this.fontRendererObj.drawString(this.archive.getDisplayName().getUnformattedText(),8,6,4210752);\n  this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(),8,this.ySize - 96 + 2,4210752);\n}\n"}
{"nl": "connect to server", "code": "@SuppressWarnings(\"resource\") public boolean connectServer(ServerInfo server){\n  Socket sock;\n  if (server.sock != null) {\n    return true;\n  }\n  try {\n    sock=new Socket();\n    sock.setReuseAddress(true);\n    sock.setSoTimeout(ClientGlobal.g_network_timeout);\n    sock.connect(server.address,ClientGlobal.g_network_timeout);\n    server.sock=sock;\n    return true;\n  }\n catch (  IOException ex) {\n    System.err.println(\"connect to server \" + server.address.getAddress().getHostAddress() + \":\"+ server.address.getPort()+ \" fail, error info: \"+ ex.getMessage());\n    return false;\n  }\n}\n"}
{"nl": "For loading data from DB", "code": "public static HouseObject<?> createNew(House house,int objectId,int objectTemplateId){\n  PlaceableHouseObject template=DataManager.HOUSING_OBJECT_DATA.getTemplateById(objectTemplateId);\n  if (template instanceof HousingChair) {\n    return new ChairObject(house,objectId,template.getTemplateId());\n  }\n else   if (template instanceof HousingJukeBox) {\n    return new JukeBoxObject(house,objectId,template.getTemplateId());\n  }\n else   if (template instanceof HousingMoveableItem) {\n    return new MoveableObject(house,objectId,template.getTemplateId());\n  }\n else   if (template instanceof HousingNpc) {\n    return new NpcObject(house,objectId,template.getTemplateId());\n  }\n else   if (template instanceof HousingPicture) {\n    return new PictureObject(house,objectId,template.getTemplateId());\n  }\n else   if (template instanceof HousingPostbox) {\n    return new PostboxObject(house,objectId,template.getTemplateId());\n  }\n else   if (template instanceof HousingStorage) {\n    return new StorageObject(house,objectId,template.getTemplateId());\n  }\n else   if (template instanceof HousingUseableItem) {\n    return new UseableItemObject(house,objectId,template.getTemplateId());\n  }\n else   if (template instanceof HousingEmblem) {\n    return new EmblemObject(house,objectId,template.getTemplateId());\n  }\n  return new PassiveObject(house,objectId,template.getTemplateId());\n}\n"}
{"nl": "load data for complete dataset", "code": "public void loadData(ProgressListener progressListener) throws CanceledException, IOException {\n  className=\"Total sample\";\n  int totalReads=0;\n  int totalReadsUsed=0;\n  reference2ReadMatchPairs.clear();\n  Set<String> matchesSeenForGivenRead=new HashSet<>();\n  progressListener.setSubtask(\"Processing total dataset\");\n  try (IReadBlockIterator it=doc.getMeganFile().getDataConnector().getAllReadsIterator(doc.getMinScore(),doc.getMaxExpected(),true,true)){\n    progressListener.setMaximum(it.getMaximumProgress());\n    progressListener.setProgress(0);\n    while (it.hasNext()) {\n      IReadBlock readBlock=it.next();\n      totalReads++;\n      boolean readUsed=false;\n      for (      IMatchBlock matchBlock : readBlock.getMatchBlocks()) {\n        if (matchBlock.getBitScore() >= doc.getMinScore() && matchBlock.getExpected() <= doc.getMaxExpected() && matchBlock.getPercentIdentity() >= doc.getMinPercentIdentity()) {\n          String key=Basic.getFirstLine(matchBlock.getText());\n          if (!matchesSeenForGivenRead.contains(key)) {\n            matchesSeenForGivenRead.add(key);\n            List<Pair<IReadBlock,IMatchBlock>> pairs=reference2ReadMatchPairs.get(key);\n            if (pairs == null) {\n              pairs=new LinkedList<>();\n              reference2ReadMatchPairs.put(key,pairs);\n            }\n            pairs.add(new Pair<>(readBlock,matchBlock));\n            readUsed=true;\n          }\n        }\n      }\n      matchesSeenForGivenRead.clear();\n      progressListener.incrementProgress();\n      if (readUsed)       totalReadsUsed++;\n    }\n  }\n   System.err.println(\"Reads total: \" + totalReads);\n  System.err.println(\"Reads used:  \" + totalReadsUsed);\n  System.err.println(\"References:  \" + reference2ReadMatchPairs.keySet().size());\n}\n"}
{"nl": "Commits the graph", "code": "@Override public void commit() throws MindmapsValidationException {\n  validateGraph();\n  Map<Schema.BaseType,Set<String>> modifiedConcepts=new HashMap<>();\n  Set<String> castings=getModifiedCastingIds();\n  Set<String> resources=getModifiedResourceIds();\n  if (castings.size() > 0)   modifiedConcepts.put(Schema.BaseType.CASTING,castings);\n  if (resources.size() > 0)   modifiedConcepts.put(Schema.BaseType.RESOURCE,resources);\n  LOG.debug(\"Graph is valid. Committing graph . . . \");\n  commitTx();\n  LOG.debug(\"Graph committed.\");\n  getConceptLog().clearTransaction();\n  if (modifiedConcepts.size() > 0)   submitCommitLogs(modifiedConcepts);\n}\n"}
{"nl": "does this searcher support find all?", "code": "public boolean canFindAll(){\n  return true;\n}\n"}
{"nl": "Required for Externalizable", "code": "public UpdateLeaseSpaceOperationRequest(){\n}\n"}
{"nl": "ARENA REWARD QUERIES", "code": "public ArenaRewardCursor queryArenaRewardItem(long id){\n  return mHelper.queryArenaRewardItem(id);\n}\n"}
{"nl": "Adds a new key value pair to the set", "code": "public void add(String key,String value){\n  if (key == null) {\n    throw new NullPointerException(\"key\");\n  }\n  if (value == null) {\n    throw new NullPointerException(\"value\");\n  }\nsynchronized (contexts) {\n    contexts.add(Maps.immutableEntry(key,value));\n  }\n}\n"}
{"nl": "zoom in or out (making panel larger or smaller)", "code": "public void zoom(float factorX,float factorY,Point center){\n  if (getChartDrawer().isXYLocked()) {\n    if (factorX == 1)     factorX=factorY;\n else     if (factorY == 1)     factorY=factorX;\n  }\n  if (getChartDrawer().getScrollBackReferenceRect() != null) {\n    if (center == null)     center=new Point((int)contentPanel.getBounds().getCenterX(),(int)contentPanel.getBounds().getCenterY());\n    getChartDrawer().setScrollBackWindowPoint(center);\n    getChartDrawer().setScrollBackReferencePoint(getChartDrawer().convertWindowToReference(center));\n  }\n  Dimension size=contentPanel.getSize();\n  int newWidth=Math.max(100,(Math.round(factorX * size.width)));\n  int newHeight=Math.max(100,(Math.round(factorY * size.height)));\n  size=new Dimension(newWidth,newHeight);\n  contentPanel.setSize(size);\n  contentPanel.setPreferredSize(size);\n  contentPanel.validate();\n  updateScrollPane();\n}\n"}
{"nl": "true if the entry packet has an array of fixed properties", "code": "@Override public boolean hasFixedPropertiesArray(){\n  return false;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"photos.restoreComment\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "Creates a new instance of INSECTDocumentGraph", "code": "public DocumentNGramGaussNormGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  CorrelationWindow=iCorrelationWindow;\n  InitGraphs();\n}\n"}
{"nl": "Try to guess an initial binary path", "code": "@Nullable private static String guessBinaryPath(){\n  ByteArrayOutputStream stdout=new ByteArrayOutputStream();\n  int retVal=ExternalTask.builder().args(\"which\",\"bazel\").stdout(stdout).build().run();\n  if (retVal != 0) {\n    return null;\n  }\n  return stdout.toString().trim();\n}\n"}
{"nl": "on main thread", "code": "private void onInbox(int resultCode,Intent data){\n  if (resultCode != Activity.RESULT_OK) {\n    if (data != null && data.hasExtra(Multiplayer.EXTRA_INVITATION)) {\n      Invitation invitation=data.getExtras().getParcelable(Multiplayer.EXTRA_INVITATION);\n      onInvitationRemoved(invitation.getInvitationId());\n    }\n    if (future != null) {\n      future.happen();\n      future=null;\n    }\n    updateInvites();\n    return;\n  }\n  final RoomController c=controller;\n  if (c != null) {\n    throw new IllegalStateException(\"tried to create new game, but there was already another!\");\n  }\n  Invitation invitation=data.getExtras().getParcelable(Multiplayer.EXTRA_INVITATION);\n  joinRoom(invitation);\n  updateInvites();\n}\n"}
{"nl": "Add String columns with no restrictions on the allowable values", "code": "public Builder addColumnsString(String... columnNames){\n  for (  String s : columnNames)   addColumnString(s);\n  return this;\n}\n"}
{"nl": "Impose target intonation contour on given vocalization using MLSA technology", "code": "@Override public AudioInputStream synthesizeUsingImposedF0(int sourceIndex,int targetIndex,AudioFileFormat aft) throws SynthesisException {\n  if (sourceIndex > vMLSAFeaturesReader.getNumberOfUnits() || targetIndex > vMLSAFeaturesReader.getNumberOfUnits()) {\n    throw new IllegalArgumentException(\"requesting unit should not be more than number of units\");\n  }\n  if (sourceIndex < 0 || targetIndex < 0) {\n    throw new IllegalArgumentException(\"requesting unit index should not be less than zero\");\n  }\n  boolean[] voiced=vMLSAFeaturesReader.getVoicedFrames(sourceIndex);\n  double[][] mgc=vMLSAFeaturesReader.getUnitMGCs(sourceIndex);\n  double[][] strengths=vMLSAFeaturesReader.getUnitStrengths(sourceIndex);\n  double[] lf0=null;\n  if (!this.imposePolynomialContour) {\n    lf0=MathUtils.arrayResize(vMLSAFeaturesReader.getUnitLF0(targetIndex),voiced.length);\n  }\n else {\n    double[] targetF0coeffs=this.vIntonationReader.getIntonationCoeffs(targetIndex);\n    double[] sourceF0coeffs=this.vIntonationReader.getIntonationCoeffs(sourceIndex);\n    if (targetF0coeffs == null || sourceF0coeffs == null) {\n      return reSynthesize(sourceIndex,aft);\n    }\n    if (targetF0coeffs.length == 0 || sourceF0coeffs.length == 0) {\n      return reSynthesize(sourceIndex,aft);\n    }\n    double[] f0Contour=Polynomial.generatePolynomialValues(targetF0coeffs,voiced.length,0,1);\n    lf0=new double[f0Contour.length];\n    for (int i=0; i < f0Contour.length; i++) {\n      lf0[i]=Math.log(f0Contour[i]);\n    }\n  }\n  return synthesizeUsingMLSAVocoder(mgc,strengths,lf0,voiced,aft);\n}\n"}
{"nl": "save all credentials to properties", "code": "public static void saveCredentialsToProperties(){\n  List<String> list=new LinkedList<>();\n  for (  String server : server2Credentials.keySet()) {\n    Pair<String,String> pair=server2Credentials.get(server);\n    String user=pair.get1();\n    String encodedPassword=Base64.encodeBase64String(pair.get2().getBytes());\n    list.add(server + \"::\" + user+ \"::\"+ encodedPassword);\n  }\n  ProgramProperties.put(\"MeganServerCredentials\",list.toArray(new String[list.size()]));\n}\n"}
{"nl": "Checks whether the string contains un-escaped * or ? characters", "code": "private static final boolean hasWildcard(String s){\n  String test=s.replace(\"\\\\*\",\"\").replace(\"\\\\?\",\"\");\n  return (test.contains(\"*\") || test.contains(\"?\"));\n}\n"}
{"nl": "When an explicit continue statement is encountered this method should be called to store the current davaflowset", "code": "public void addToContinueList(String labelContinued,DavaFlowSet<T> set){\n  List<DavaFlowSet<T>> labelsContinueList=continueList.get(labelContinued);\n  if (labelsContinueList == null) {\n    labelsContinueList=new ArrayList<DavaFlowSet<T>>();\n    labelsContinueList.add(set);\n    continueList.put(labelContinued,labelsContinueList);\n  }\n else {\n    continueList.put(labelContinued,addIfNotDuplicate(labelsContinueList,set));\n  }\n}\n"}
{"nl": "This method is responsible for creating a JMS XML message containing alive tag and putting it to the TIM JMS queue", "code": "@Override public final void sendAlive(){\n  ProcessConfiguration processConfiguration=getConfigurationController().getProcessConfiguration();\n  LOGGER.debug(\"sending AliveTag. tag id : \" + processConfiguration.getAliveTagID());\n  long timestamp=System.currentTimeMillis();\n  try {\n    SourceDataTagValue aliveTagValue=new SourceDataTagValue(Long.valueOf(processConfiguration.getAliveTagID()),processConfiguration.getProcessName() + \"::AliveTag\",true,Long.valueOf(timestamp),new SourceDataTagQuality(),timestamp,9,false,null,3 * processConfiguration.getAliveInterval());\n    distributeValue(aliveTagValue);\n  }\n catch (  JMSException ex) {\n    LOGGER.error(\"sendAlive : JMSException caught :\" + ex.getMessage());\n  }\ncatch (  Throwable e) {\n    LOGGER.error(\"sendAlive : Unexpected Exception caught :\",e);\n  }\n}\n"}
{"nl": "Summons a train in a given direction (determined by GetNextByte()) upon the track passed in", "code": "private void callTrains(int trackCode){\n  boolean directionFlipped=false;\n  for (int i=0; i < tracks.length; i++) {\n    if ((1 << i & trackCode) != 0) {\n      if (!directionFlipped) {\n        CGCWorld.getBF().createCar(trainAnchors[i],50,1.25f + (i * 1.7f),false,true);\n        CGCWorld.getBF().createCar(trainAnchors[i],55.5f,1.25f + (i * 1.7f),false,true);\n        CGCWorld.getBF().createCar(trainAnchors[i],61,1.25f + (i * 1.7f),false,true);\n      }\n else {\n        CGCWorld.getBF().createCar(trainAnchors[i],-30,1.25f + (i * 1.7f),false,false);\n        CGCWorld.getBF().createCar(trainAnchors[i],-35.5f,1.25f + (i * 1.7f),false,false);\n        CGCWorld.getBF().createCar(trainAnchors[i],-41,1.25f + (i * 1.7f),false,false);\n      }\n      directionFlipped=!directionFlipped;\n      CGCWorld.getBF().summonTrain(trainIndex);\n      trainIndex++;\n    }\n  }\n}\n"}
{"nl": "select series and classes that contain given location", "code": "public boolean selectOnMouseDown(MouseEvent mouseEvent,ChartSelection chartSelection){\n  return selectOnRubberBand(new Rectangle(mouseEvent.getX() - 1,mouseEvent.getY() - 1,2,2),mouseEvent,chartSelection);\n}\n"}
{"nl": "Sets all tracks back to normal", "code": "private void turnOffAllTracks(){\n  for (int i=0; i < this.tracks.length; i++) {\n    this.tracks[i].setLowAnim(TextureAnimationDrawer.trackSolid);\n  }\n}\n"}
{"nl": "parse SAM match that starts at given offset (ignoring any further matches that come after a newline)", "code": "public void parse(byte[] matchesText,int offset){\n  bitScore=0;\n  expected=0;\n  percentIdentity=0;\n  int end=Utilities.nextNewLine(matchesText,offset);\n  offset=skipTabs(matchesText,offset,11);\n  String[] tokens=Utilities.split(matchesText,offset,end,(byte)'\\t');\n  for (  String token : tokens) {\n    if (token.startsWith(\"AS:i:\"))     bitScore=Integer.parseInt(token.substring(5));\n else     if (token.startsWith(\"ZE:f:\"))     expected=Float.parseFloat(token.substring(5));\n else     if (token.startsWith(\"ZI:i:\"))     percentIdentity=Float.parseFloat(token.substring(5));\n  }\n}\n"}
{"nl": "goto the previous object", "code": "public boolean gotoPrevious(){\n  currentTaxonIterator=null;\n  currentTaxonId=null;\n  return isCurrentSet();\n}\n"}
{"nl": "method for creating a specific resource in the sub-class", "code": "protected Object create() throws ResourceUnavailableException {\n  PoolableThread thread=new PoolableThread(this);\n  thread.setDaemon(true);\n  thread.start();\n  try {\n    Thread.sleep(1);\n  }\n catch (  InterruptedException e) {\n    logger.log(Level.WARNING,\"Creating a resource interrupted\",e);\n  }\n  return (thread);\n}\n"}
{"nl": "create CAPTCHA", "code": "public static ByteBuffer createCAPTCHA(String word){\n  ByteBuffer byteBuffer=null;\n  BufferedImage bImg=createImage(word);\n  byteBuffer=DDSConverter.convertToDxt1NoTransparency(bImg);\n  return byteBuffer;\n}\n"}
{"nl": "initialization method", "code": "public void initData(){\n  noteDb=new NoteDatabase(aty);\n  datas=noteDb.query();\n  if (datas != null) {\n    adapter=new NotebookAdapter(aty,datas);\n  }\n else {\n    getServerData();\n  }\n}\n"}
{"nl": "Handle option menu's click event", "code": "@Override public boolean onOptionsItemSelected(MenuItem item){\n  int id=item.getItemId();\n  if (id == android.R.id.home) {\n    onBackPressed();\n    return true;\n  }\n  if (id == menuDoneId) {\n    if (selectedImages != null && selectedImages.size() > 0) {\n      for (int i=0; i < selectedImages.size(); i++) {\n        Image image=selectedImages.get(i);\n        File file=new File(image.getPath());\n        if (file == null || !file.exists()) {\n          selectedImages.remove(i);\n          i--;\n        }\n      }\n      Intent data=new Intent();\n      data.putParcelableArrayListExtra(ImagePickerActivity.INTENT_EXTRA_SELECTED_IMAGES,selectedImages);\n      setResult(RESULT_OK,data);\n      finish();\n    }\n    return true;\n  }\n  if (id == menuCameraId) {\n    captureImageWithPermission();\n    return true;\n  }\n  return super.onOptionsItemSelected(item);\n}\n"}
{"nl": "For testing only", "code": "public TrustManagerImpl(KeyStore keyStore,CertPinManager manager){\n  this(keyStore,manager,null);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountBanUserQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"account.banUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "Item identifier", "code": "protected MarketReorderItemsQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "draw all values", "code": "public static void drawValues(Graphics2D gc,LinkedList<DrawableValue> valuesList,boolean centerLabelWidth,boolean centerLabelHeight){\n  gc.setColor(Color.LIGHT_GRAY);\n  for (  DrawableValue value : valuesList) {\n    if (!value.isSelected())     value.draw(gc,centerLabelWidth,centerLabelHeight);\n  }\n  gc.setColor(ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT);\n  for (  DrawableValue value : valuesList) {\n    if (value.isSelected())     value.draw(gc,centerLabelWidth,centerLabelHeight);\n  }\n}\n"}
{"nl": "Checks if current bitmaps exceed the maximum OpenGL texture size limit", "code": "@SuppressLint(\"NewApi\") private boolean checkIfMaximumBitmapExceed(Canvas canvas){\n  return mBitmapWidth > canvas.getMaximumBitmapWidth() || mBitmapHeight > canvas.getMaximumBitmapHeight();\n}\n"}
{"nl": "Computes index of given char within StringBuffer", "code": "protected int indexOf(String buffer,int start,int end,char ch){\n  for (int i=start; i < end; i++) {\n    if (buffer.charAt(i) == ch) {\n      return i;\n    }\n  }\n  return -1;\n}\n"}
{"nl": "Delete newsfeed list by id", "code": "public NewsfeedDeleteListQuery deleteList(UserActor actor,int listId){\n  return new NewsfeedDeleteListQuery(getClient(),actor,listId);\n}\n"}
{"nl": "Add a task to the scheduler", "code": "public void addTask(String name,Class<? extends Task> taskclass,TaskTimer timer) throws SchedulerException, ParseException {\n  assert timer != null : \"Cannot add scheduler task \" + name + \" as no timer is set\";\n  JobDetail job=new JobDetail(name,Scheduler.DEFAULT_GROUP,taskclass);\n  scheduler.scheduleJob(job,timer.getTrigger());\n}\n"}
{"nl": "returns true if next chain skill can still be casted, or time is over", "code": "public boolean chainSkillEnabled(String category,int time){\n  long useTime=0;\n  if (this.multiSkills.get(category) != null) {\n    useTime=this.multiSkills.get(category).getUseTime();\n  }\n else   if (chainSkill.getCategory().equals(category)) {\n    useTime=chainSkill.getUseTime();\n  }\n  if ((useTime + time) >= System.currentTimeMillis()) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Creates new error", "code": "public AlreadySpawnedException(String message,Throwable cause){\n  super(message,cause);\n}\n"}
{"nl": "Create a daemon thread", "code": "public Notifier(){\n  super(\"event-listener-notification\");\n  setDaemon(true);\n}\n"}
{"nl": "This column family is meant to be used for exporting user assignments", "code": "@Override @Timed public void assignUserToExports(Assignment assignment,Date date){\n  final String CQL;\n  CQL=\"insert into user_assignment_export \" + \"(experiment_id, user_id, context, created, day_hour, bucket_label, is_bucket_null) \" + \"values (?, ?, ?, ?, ?, ?, ?)\";\n  try {\n    DateHour dateHour=new DateHour();\n    dateHour.setDateHour(date);\n    Date day_hour=dateHour.getDayHour();\n    PreparedCqlQuery<ExperimentsKeyspace.ExperimentIDDayHourComposite,String> query=driver.getKeyspace().prepareQuery(keyspace.userAssignmentExport()).withCql(CQL).asPreparedStatement().withByteBufferValue(assignment.getExperimentID().getRawID(),UUIDSerializer.get()).withByteBufferValue(assignment.getUserID(),UserIDSerializer.get()).withStringValue(assignment.getContext().getContext()).withByteBufferValue(date,DateSerializer.get()).withByteBufferValue(day_hour,DateSerializer.get());\n    if (assignment.getBucketLabel() != null) {\n      query.withByteBufferValue(assignment.getBucketLabel(),BucketLabelSerializer.get());\n      query.withBooleanValue(false);\n    }\n else {\n      query.withStringValue(\"NO_ASSIGNMENT\");\n      query.withBooleanValue(true);\n    }\n    query.execute();\n  }\n catch (  ConnectionException e) {\n    throw new RepositoryException(\"Could not save user assignment in user_assignment_export \\\"\" + assignment + \"\\\"\",e);\n  }\n}\n"}
{"nl": "Returns true is new operations can still attach to this transaction, false otherwise (transaction was already committed for example)", "code": "public boolean isActive(){\n  if (getStatus() == XtnStatus.UNINITIALIZED || getStatus() == XtnStatus.BEGUN)   return true;\n  return false;\n}\n"}
{"nl": "Deletes a file from the index given its location TODO I don't think this clears anything from the facets, which it should", "code": "public static synchronized void deleteByFileLocationFilename(String fileLocationFilename) throws IOException {\n  Directory dir=FSDirectory.open(Paths.get(Properties.getProperties().getProperty(Values.INDEXLOCATION,Values.DEFAULTINDEXLOCATION)));\n  Analyzer analyzer=new CodeAnalyzer();\n  IndexWriterConfig iwc=new IndexWriterConfig(analyzer);\n  iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);\n  IndexWriter writer=new IndexWriter(dir,iwc);\n  try {\n    QueryParser parser=new QueryParser(\"contents\",analyzer);\n    Query query=parser.parse(\"filelocationfilename:\" + QueryParser.escape(fileLocationFilename));\n    writer.deleteDocuments(query);\n  }\n catch (  Exception ex) {\n    Singleton.getLogger().warning(\"ERROR - caught a \" + ex.getClass() + \" in CodeIndexer\\n with message: \"+ ex.getMessage());\n  }\n finally {\n    writer.close();\n  }\n}\n"}
{"nl": "Clean scheduled queues, set a new GameTime, then restart the clock", "code": "public static void reloadTime(int time){\n  ThreadPoolManager.getInstance().purge();\n  instance=new GameTime(time);\n  clockStarted=false;\n  startClock();\n  log.info(\"Game time changed by admin and clock restarted...\");\n}\n"}
{"nl": "Open compose email activity", "code": "public static void openComposeEmailActivity(Context context,String[] addresses,String subject){\n  Intent intent=new Intent(Intent.ACTION_SENDTO);\n  intent.setData(Uri.parse(\"mailto:\"));\n  intent.putExtra(Intent.EXTRA_EMAIL,addresses);\n  intent.putExtra(Intent.EXTRA_SUBJECT,subject);\n  startIntentIfPossible(context,intent);\n}\n"}
{"nl": "add a prefix and a suffix depending on format string and the bindings", "code": "public static void decorate(IDecoration decoration,IDecoratorComponent[][] format,Map bindings){\n  String[] prefixSuffix=decorate(format,bindings);\n  decoration.addPrefix(prefixSuffix[0]);\n  decoration.addSuffix(prefixSuffix[1]);\n}\n"}
{"nl": "Creates an iterator over the specified map", "code": "public TShortLongIterator(TShortLongHashMap map){\n  super(map);\n  this._map=map;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.ByContigs.toString() + \";zoom axis=both what=fit;\");\n}\n"}
{"nl": "Confirms if all messages have been consumed by all event processors", "code": "private boolean hasBacklog(){\n  final long cursor=ringBuffer.getCursor();\n  for (  final Sequence consumer : consumerRepository.getLastSequenceInChain(false)) {\n    if (cursor > consumer.get()) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public String decomposition(){\n  if (this.decompBuf != null) {\n    return this.decompBuf;\n  }\n  return \"\";\n}\n"}
{"nl": "Convert the first character of a string to upper case", "code": "public static String upperCaseFirstChar(String input){\n  String[] temp=input.split(\" \");\n  for (int i=0; i < temp.length; i++) {\n    temp[i]=Character.toUpperCase(temp[i].charAt(0)) + temp[i].substring(1);\n  }\n  return join(temp,\" \");\n}\n"}
{"nl": "save object with a given name", "code": "@Override public void saveObject(Serializable oObj,String sObjectName,String sObjectCategory){\n  super.saveObject(oObj,sObjectName,sObjectCategory);\n  if (existsObject(sObjectCategory,ListCategoryName)) {\n    ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);\n    nlist.add(sObjectName);\n    super.saveObject(nlist,sObjectCategory,ListCategoryName);\n  }\n else {\n    ArrayList<String> nlist=new ArrayList<String>();\n    nlist.add(sObjectName);\n    super.saveObject(nlist,sObjectCategory,ListCategoryName);\n  }\n}\n"}
{"nl": "Prints out the help message", "code": "private void printHelp(){\n  HelpFormatter formatter=new HelpFormatter();\n  formatter.setWidth(140);\n  formatter.printHelp(\"DistributedTestDriver\",cliOptions);\n}\n"}
{"nl": "Remove the last rows of the table that do not contain any data", "code": "public static int removeLastRowsTable(JTable table){\n  if (table.getRowCount() == 0) {\n    return 0;\n  }\n  DefaultTableModel model=(DefaultTableModel)table.getModel();\n  int count=0;\n  while (true) {\n    boolean remove=true;\n    for (int i=0; i < table.getColumnCount(); i++) {\n      String data=getStringValueTable(table,table.getRowCount() - 1,i);\n      if (!data.equals(\"\")) {\n        remove=false;\n        break;\n      }\n    }\n    if (remove) {\n      count++;\n      model.removeRow(model.getRowCount() - 1);\n    }\n else {\n      break;\n    }\n  }\n  return count;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set showTriPlot=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.getPcoaTab().setShowTriPlot(show);\n  try {\n    viewer.updateView(IDirector.ENABLE_STATE);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n  }\n}\n"}
{"nl": "Display an OptionPane dialog that the search string is not found", "code": "public void msgNotFound(){\n  JOptionPane.showMessageDialog(null,\"Search String \" + pattern + \" not found\",\"Find\",JOptionPane.INFORMATION_MESSAGE);\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(full);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  FailOverPolicy.FailOverPolicyDescription copy=(FailOverPolicy.FailOverPolicyDescription)is.readObject();\n  is.close();\n  os.close();\n  assertEquals(\"k1\",copy.m_BackupMemberNames.get(\"a1\").iterator().next());\n}\n"}
{"nl": "Transfer all entries from src to dest tables", "code": "private void transfer(Entry[] src,Entry[] dest){\n  for (int j=0; j < src.length; ++j) {\n    Entry e=src[j];\n    src[j]=null;\n    while (e != null) {\n      Entry next=e.next;\n      Object key=e.get();\n      if (key == null || (timeToLive > 0 && ((TimedEntry)e).isExpired(timeToLive))) {\n        e.next=null;\n        size--;\n      }\n else {\n        int i=indexFor(e.hash,dest.length);\n        e.next=dest[i];\n        dest[i]=e;\n      }\n      e=next;\n    }\n  }\n}\n"}
{"nl": "clean all patch files!", "code": "public static void cleanPatch(Context context){\n  Tinker.with(context).cleanPatch();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetAdsTargetingQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getAdsTargeting\",Utils.buildParametrizedType(List.class,TargSettings.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n"}
{"nl": "copy file in assets into destination file", "code": "public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {\n  AssetManager manager=context.getAssets();\n  final InputStream is=manager.open(assetsFilename);\n  copyFile(file,is,mode);\n}\n"}
{"nl": "open file according to the MIME", "code": "public static void openFile(File file,Context context){\n  try {\n    Intent intent=new Intent();\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    intent.setAction(Intent.ACTION_VIEW);\n    String type=MIMEType.getMIMEType(file);\n    intent.setDataAndType(Uri.fromFile(file),type);\n    context.startActivity(intent);\n  }\n catch (  ActivityNotFoundException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Construct a FloatDataType from the bytes in buf", "code": "public FloatDataType(byte[] buf){\n  if (buf.length != this.getSize()) {\n    throw new DataTypeException(\"Wrong size buffer for float\");\n  }\n  this.f=ByteBuffer.wrap(buf).getFloat();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"copyImage;\");\n  ClusterViewer viewer=getViewer();\n  JPanel panel=viewer.getPanel();\n  JScrollPane scrollPane=viewer.getSelectedScrollPane();\n  TransferableGraphic tg=new TransferableGraphic(panel,scrollPane);\n  Toolkit.getDefaultToolkit().getSystemClipboard().setContents(tg,tg);\n}\n"}
{"nl": "Writes the Cart to the given DataOut in Wagon Format", "code": "private void toWagonFormat(IntArrayLeafNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {\n  StringBuilder sb=new StringBuilder();\n  int data[]=node.getIntData();\n  sb.append(\"(((\");\n  for (int i=0; i < data.length; i++) {\n    sb.append(\"(\" + data[i] + \" 0)\");\n    if (i + 1 != data.length) {\n      sb.append(\" \");\n    }\n  }\n  sb.append(\") 0))\" + extension);\n  if (out != null) {\n    writeStringToOutput(sb.toString(),out);\n  }\n else {\n  }\n  if (pw != null) {\n    pw.println(sb.toString());\n  }\n}\n"}
{"nl": "Check all conditions before starting cast", "code": "protected boolean preCastCheck(){\n  Conditions skillConditions=skillTemplate.getStartconditions();\n  return skillConditions != null ? skillConditions.validate(this) : true;\n}\n"}
{"nl": "override to build a spring aware ScriptingEngines", "code": "protected Bindings createBindings(VariableScope variableScope){\n  return scriptBindingsFactory.createBindings(variableScope);\n}\n"}
{"nl": "Boss uses Skill", "code": "private void bossUseSkill(int skillId){\n  AI2Actions.useSkill(this,skillId);\n}\n"}
{"nl": "collapse to default small tree", "code": "public void collapseToDefault(){\n  getCollapsedIds().clear();\n  getCollapsedIds().add(2759);\n  getCollapsedIds().add(2157);\n  getCollapsedIds().add(2);\n  getCollapsedIds().add(28384);\n  getCollapsedIds().add(12908);\n  getCollapsedIds().add(12884);\n  getCollapsedIds().add(10239);\n}\n"}
{"nl": "test for jni rotate image", "code": "private void testRotate(){\n  JniBitmapHolder holder=new JniBitmapHolder();\n  holder.storeBitmap(BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher));\n  holder.rotateBitmap180();\n  ImageView icon=new ImageView(this);\n  icon.setImageBitmap(holder.getBitmapAndFree());\n  Toast toast=new Toast(this);\n  toast.setView(icon);\n  toast.setDuration(Toast.LENGTH_LONG);\n  toast.show();\n}\n"}
{"nl": "/*    ", "code": "@deprecated public CompactByteArray(){\n  this((byte)0);\n}\n"}
{"nl": "Helper method to make authenticated HTTP requests to LinkedIn REST api using POST Method", "code": "public void postRequest(@NonNull Context context,String url,JSONObject body,ApiListener apiListener){\n  request(context,Request.Method.POST,url,body,apiListener);\n}\n"}
{"nl": "Minimize the palette tool window, if possible", "code": "public void minimizePalette(){\n  if (myToolWindow != null) {\n    try {\n      LightToolWindow.class.getDeclaredMethod(\"minimize\").invoke(myToolWindow);\n    }\n catch (    Exception ignore) {\n    }\n  }\n}\n"}
{"nl": "Return an additional \"likes\" field", "code": "public PhotosGetAllCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "Gather all the widgets contained in the area specified and return them as an array, taking the decorator visibility in account", "code": "public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){\n  ArrayList<ConstraintWidget> found=new ArrayList<>();\n  Rectangle area=new Rectangle(x,y,width,height);\n  for (  ConstraintWidget widget : container.getChildren()) {\n    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();\n    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);\n    if (!decorator.isVisible()) {\n      continue;\n    }\n    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());\n    if (area.intersects(bounds)) {\n      found.add(widget);\n    }\n  }\n  return found;\n}\n"}
{"nl": "Share specific amount of kinah between alliance members", "code": "public static void distributeKinah(Player player,long amount){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new TeamKinahDistributionEvent<PlayerAlliance>(alliance,player,amount));\n  }\n}\n"}
{"nl": "compare to a split object", "code": "public int compareTo(Object o){\n  Split split=(Split)o;\n  BitSet P=getFirstPart();\n  BitSet Q=split.getFirstPart();\n  int a=P.nextSetBit(0);\n  int b=Q.nextSetBit(0);\n  while (a > -1 && b > -1) {\n    if (a < b)     return -1;\n else     if (a > b)     return 1;\n    a=P.nextSetBit(a + 1);\n    b=Q.nextSetBit(b + 1);\n  }\n  if (a < b)   return -1;\n else   if (a > b)   return 1;\n  P=getSecondPart();\n  Q=split.getSecondPart();\n  a=P.nextSetBit(0);\n  b=Q.nextSetBit(0);\n  while (a > -1 && b > -1) {\n    if (a < b)     return -1;\n else     if (a > b)     return 1;\n    a=P.nextSetBit(a + 1);\n    b=Q.nextSetBit(b + 1);\n  }\n  if (a < b)   return -1;\n else   if (a > b)   return 1;\n else   return 0;\n}\n"}
{"nl": "Gossip data in a namespace that is per-node { node-id { key->value } }", "code": "public void gossipPerNodeData(GossipDataMessage message){\n  gossipManager.gossipPerNodeData(message);\n}\n"}
{"nl": "Choose the DayNight mode you want to use for selected day/night mode themes", "code": "public void chooseDayNightMode(@AppCompatDelegate.NightMode int mode){\n  checkInit();\n  mPreferences.edit().putInt(PREFERENCE_DAYNIGHT_KEY,mode).apply();\n}\n"}
{"nl": "Set keys", "code": "public StorageGetQuery keys(String... value){\n  return unsafeParam(\"keys\",value);\n}\n"}
{"nl": "This method goes through passed string and replace each occurrence of '&' to '&amp;'", "code": "private static String handleInvalidChars(String str){\n  String result=\"\";\n  final String replaceAmpresand1=\"&\";\n  final String replaceAmpresand2=\"amp;\";\n  final String replaceAmpresand=replaceAmpresand1 + replaceAmpresand2;\n  final int ampLength=replaceAmpresand2.length();\n  StringTokenizer strTokinizer=new StringTokenizer(str,String.valueOf(replaceAmpresand1),true);\n  while (strTokinizer.hasMoreTokens()) {\n    String token=strTokinizer.nextToken();\n    if (token.startsWith(replaceAmpresand2)) {\n      token=token.substring(ampLength);\n    }\n else     if (token.equals(replaceAmpresand1)) {\n      token=replaceAmpresand;\n    }\n    result+=token;\n  }\n  return result;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public boolean equals(Object obj){\n  if (obj == null)   return false;\n  if (this == obj)   return true;\n  if (getClass() != obj.getClass())   return false;\n  CompactCharArray other=(CompactCharArray)obj;\n  for (int i=0; i < 65536; i++) {\n    if (elementAt((char)i) != other.elementAt((char)i))     return false;\n  }\n  return true;\n}\n"}
{"nl": "Creates a new vector", "code": "public UniqueVector(){\n  elementSet=new java.util.HashSet();\n  elementVector=new java.util.Vector();\n}\n"}
{"nl": "Add a non-unique property", "code": "private Var addProperty(VarProperty property){\n  if (property.isUnique()) {\n    testUniqueProperty((UniqueVarProperty)property);\n  }\n  properties.add(property);\n  return this;\n}\n"}
{"nl": "URL encodes a path element", "code": "private static String encode(String pathElement){\n  try {\n    return URLEncoder.encode(pathElement,Charsets.UTF_8.name());\n  }\n catch (  UnsupportedEncodingException e) {\n    throw Throwables.propagate(e);\n  }\n}\n"}
{"nl": "Method that checks if a legion is disbanding", "code": "private boolean checkDisband(Legion legion){\n  if (legion.isDisbanding()) {\n    if ((System.currentTimeMillis() / 1000) > legion.getDisbandTime()) {\n      disbandLegion(legion);\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "close the iterator", "code": "public void close() throws IOException {\n  iterator.close();\n}\n"}
{"nl": "set select state of all objects", "code": "public void selectAll(boolean select){\n  if (classificationViewer == null)   classificationViewer=(ClassificationViewer)dir.getViewerByClass(ClassificationViewer.class);\n  if (classificationViewer == null)   return;\n  classificationViewer.selectAllNodes(select);\n}\n"}
{"nl": "apply the Bonferroni correction", "code": "private static void applyBonferroniCorrection(PhyloTree tree){\n  int numberOfUpCases=0;\n  int numberOfDownCases=0;\n  for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {\n    NodeData vd=(NodeData)v.getData();\n    if (vd.getDownPValue() != Double.NaN && vd.getDownPValue() != -1 && v.getOutDegree() > 1)     numberOfDownCases++;\n    if (vd.getUpPValue() != Double.NaN && vd.getUpPValue() != -1 && v.getInDegree() > 0)     numberOfUpCases++;\n  }\n  if (numberOfDownCases == 0)   numberOfDownCases=1;\n  if (numberOfUpCases == 0)   numberOfUpCases=1;\n  for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {\n    NodeData vd=(NodeData)v.getData();\n    if (vd.getUpPValue() != Double.NaN && vd.getUpPValue() != -1 && v.getInDegree() > 0)     vd.setUpPValue(Math.min(1,vd.getUpPValue() * numberOfUpCases));\n    if (vd.getDownPValue() != Double.NaN && vd.getDownPValue() != -1 && v.getOutDegree() > 1)     vd.setDownPValue(Math.min(1,vd.getDownPValue() * numberOfDownCases));\n  }\n}\n"}
{"nl": "Give the output Bitmap by applying the defined filter", "code": "public Bitmap processFilter(Bitmap inputImage){\n  Bitmap outputImage=inputImage;\n  if (outputImage != null) {\n    for (    SubFilter subFilter : subFilters) {\n      try {\n        outputImage=subFilter.process(outputImage);\n      }\n catch (      OutOfMemoryError oe) {\n        System.gc();\n        try {\n          outputImage=subFilter.process(outputImage);\n        }\n catch (        OutOfMemoryError ignored) {\n        }\n      }\n    }\n  }\n  return outputImage;\n}\n"}
{"nl": "Helper method to make authenticated HTTP requests to LinkedIn REST api using PUT method with string body", "code": "public void putRequest(@NonNull Context context,String url,String body,ApiListener apiListener){\n  try {\n    JSONObject bodyObject=body != null ? new JSONObject(body) : null;\n    putRequest(context,url,bodyObject,apiListener);\n  }\n catch (  JSONException e) {\n    apiListener.onApiError(new LIApiError(\"Unable to convert body to json object \" + e.toString(),e));\n  }\n}\n"}
{"nl": "overrides implementation of equals() method in AbstractSpaceProxy", "code": "@Override public boolean equals(Object obj){\n  if (obj instanceof SpaceProxyImpl)   return super.equals(obj);\n  return false;\n}\n"}
{"nl": "Check if a service is running", "code": "public static boolean isRunningService(String className,Context context){\n  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);\n  List<ActivityManager.RunningServiceInfo> runningServices=activityManager.getRunningServices(1000);\n  for (  ActivityManager.RunningServiceInfo runningServiceInfo : runningServices) {\n    ComponentName service=runningServiceInfo.service;\n    if (className.equals(service.getClassName())) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "SCIPIO: Creates JS script to populate the target hidden form with the corresponding fields of the row being selected (only when use-submit-row is true)", "code": "@Deprecated private static void makeJSForRowSubmit(Appendable writer,Map<String,Object> context,ModelForm modelForm,String hiddenFormName) throws IOException {\n  List<ModelFormField> rowSubmitFields=modelForm.getMultiSubmitFields();\n  if (rowSubmitFields != null) {\n    writer.append(\"<script type=\\\"text/javascript\\\">\\r\\n\");\n    writer.append(\"jQuery(document).ready(function() {\\r\\n\");\n    writer.append(\"\\tvar submitForm = $(\\\"form[name=\" + hiddenFormName + \"]\\\");\\r\\n\");\n    writer.append(\"\\tif (submitForm) {\\r\\n\");\n    for (    ModelFormField rowSubmitField : rowSubmitFields) {\n      String submitFieldName=rowSubmitField.getName();\n      String submitFieldId=rowSubmitField.getCurrentContainerId(context);\n      if (UtilValidate.isEmpty(submitFieldId)) {\n        Debug.logWarning(\"makeJSForRowSubmit: submit field '\" + submitFieldName + \"' of form '\"+ rowSubmitField.getModelForm().getName()+ \"' was not assigned a unique element ID; unable to build javascript\",module);\n        continue;\n      }\n      writer.append(\"\\t\\tvar submitField = $(\\\"#\" + submitFieldId + \"\\\");\\r\\n\");\n      writer.append(\"\\t\\t$(submitField).click(function(e) {\\r\\n\");\n      writer.append(\"\\t\\te.preventDefault();\\r\\n\");\n      writer.append(\"\\t\\tvar checked = false;\\r\\n\");\n      writer.append(\"\\t\\t\\t$(this).parents(\\\"table\\\").find(\\\"input[type=radio][name^=selectAction], input[type=checkbox][name^=selectAction]\\\").each( function (j, r) {\\r\\n\");\n      writer.append(\"\\t\\t\\tif ($(r).is(\\\":checked\\\")) {\\r\\n\");\n      writer.append(\"\\t\\t\\t\\tchecked = true;\\r\\n\");\n      makeHiddenFieldsForHiddenForm(writer);\n      writer.append(\"\\t\\t\\t}\\r\\n\");\n      writer.append(\"\\t\\t});\\r\\n\");\n      writer.append(\"\\t\\tif (checked) {\\r\\n\");\n      writer.append(\"\\t\\t\\tsubmitForm.submit();\\r\\n\");\n      writer.append(\"\\t\\t} else {\\r\\n\");\n      String noRowMsg=UtilProperties.getMessage(\"CommonUiLabels\",\"CommonNoRowSelected\",(Locale)context.get(\"locale\"));\n      writer.append(\"\\t\\t\\talert(\\\"\" + encode(noRowMsg,context) + \"\\\");\\r\\n\");\n      writer.append(\"\\t\\t}\\r\\n\");\n      writer.append(\"\\t\\t});\\r\\n\");\n    }\n    writer.append(\"\\t} else {\\r\\n\");\n    writer.append(\"\\t\\treturn false;\\r\\n\");\n    writer.append(\"\\t}\\r\\n\");\n    writer.append(\"});\\r\\n\");\n    writer.append(\"</script>\\r\\n\");\n  }\n}\n"}
{"nl": "Recursive decent of widget tree inferring constraints on ConstraintWidgetContainer", "code": "private static ConstraintWidget[] inferTableList(WidgetContainer base){\n  if (base instanceof ConstraintWidgetContainer && ((ConstraintWidgetContainer)base).handlesInternalConstraints()) {\n    return null;\n  }\n  for (  ConstraintWidget constraintWidget : base.getChildren()) {\n    if (constraintWidget instanceof ConstraintWidgetContainer) {\n      inferConstraints((ConstraintWidgetContainer)constraintWidget);\n    }\n  }\n  ArrayList<ConstraintWidget> list=new ArrayList<>(base.getChildren());\n  list.add(0,base);\n  ConstraintWidget[] widgets=list.toArray(new ConstraintWidget[list.size()]);\n  ConstraintWidget[] iw=ScoutGroupInference.computeGroups(ScoutWidget.create(widgets));\n  if (iw != null && iw.length > 0) {\n    return iw;\n  }\n  return null;\n}\n"}
{"nl": "This method will change the legion level and send update to online members", "code": "public void changeLevel(Legion legion,int newLevel,boolean save){\n  legion.setLegionLevel(newLevel);\n  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x00,legion));\n  PacketSendUtility.broadcastPacketToLegion(legion,SM_SYSTEM_MESSAGE.STR_GUILD_EVENT_LEVELUP(newLevel));\n  if (save) {\n    storeLegion(legion);\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"compute wordCount kmer=25 step=25 mindepth=10;\");\n}\n"}
{"nl": "Given {year,month} computes maximum number of days for given month", "code": "protected int maxDayInMonthFor(int year,int month){\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    return 30;\n  }\n else   if (month == 2) {\n    if (isLeapYear(year)) {\n      return 29;\n    }\n else {\n      return 28;\n    }\n  }\n else {\n    return 31;\n  }\n}\n"}
{"nl": "constructs a long file putter using the given file and limit", "code": "public LongFilePutter(File file,long limit,boolean inMemory) throws IOException {\n  super(file,8 * limit,(inMemory ? Mode.CREATE_READ_WRITE_IN_MEMORY : Mode.CREATE_READ_WRITE));\n}\n"}
{"nl": "is contain resource", "code": "public boolean isContainResource(RType rType,IdType idType,String name){\n  boolean result=false;\n  if (this.rTypeResourceMap.containsKey(rType)) {\n    Set<RDotTxtEntry> resourceSet=this.rTypeResourceMap.get(rType);\n    if (resourceSet.contains(new RDotTxtEntry(idType,rType,name,\"0x7f000000\"))) {\n      result=true;\n    }\n  }\n  return result;\n}\n"}
{"nl": "Set privacy view", "code": "public NotesAddQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "Analyzes the given APK file for data flows", "code": "public InfoflowResults analyzeAPKFile(String fileName,boolean enableImplicitFlows) throws IOException, XmlPullParserException {\n  String androidJars=System.getenv(\"ANDROID_JARS\");\n  if (androidJars == null)   androidJars=System.getProperty(\"ANDROID_JARS\");\n  if (androidJars == null)   throw new RuntimeException(\"Android JAR dir not set\");\n  System.out.println(\"Loading Android.jar files from \" + androidJars);\n  String droidBenchDir=System.getenv(\"DROIDBENCH\");\n  if (droidBenchDir == null)   droidBenchDir=System.getProperty(\"DROIDBENCH\");\n  if (droidBenchDir == null)   throw new RuntimeException(\"DroidBench dir not set\");\n  System.out.println(\"Loading DroidBench from \" + droidBenchDir);\n  SetupApplication setupApplication=new SetupApplication(androidJars,droidBenchDir + File.separator + fileName);\n  setupApplication.setTaintWrapper(new EasyTaintWrapper(\"EasyTaintWrapperSource.txt\"));\n  setupApplication.calculateSourcesSinksEntrypoints(\"SourcesAndSinks.txt\");\n  setupApplication.setEnableImplicitFlows(enableImplicitFlows);\n  return setupApplication.runInfoflow();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketDeleteQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n"}
{"nl": "does this look like a valid bin file?", "code": "public static boolean isBinFile(String fileName){\n  try (DataInputStream dis=new DataInputStream(new FileInputStream(fileName))){\n    int firstInt=dis.readInt();\n    return firstInt == 0 || firstInt == MAGIC_NUMBER;\n  }\n catch (  Exception e) {\n    return false;\n  }\n}\n"}
{"nl": "This method will be used to read the dictionary file from a given offset", "code": "private List<byte[]> readDictionaryFile(long dictionaryStartOffset,long dictionaryEndOffset) throws IOException {\n  CarbonDictionaryReaderImpl dictionaryReader=new CarbonDictionaryReaderImpl(this.carbonStorePath,this.carbonTableIdentifier,this.columnIdentifier);\n  List<byte[]> dictionaryValues=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);\n  try {\n    if (0 == dictionaryEndOffset) {\n      dictionaryValues=dictionaryReader.read(dictionaryStartOffset);\n    }\n else {\n      Iterator<byte[]> itr=dictionaryReader.read(dictionaryStartOffset,dictionaryEndOffset);\n      while (itr.hasNext()) {\n        dictionaryValues.add(itr.next());\n      }\n    }\n  }\n  finally {\n    dictionaryReader.close();\n  }\n  return dictionaryValues;\n}\n"}
{"nl": "Adds a host limit to the query", "code": "public ContentletQuery addHost(String hostIdentifier){\n  query.append(\" +conhost:\" + hostIdentifier);\n  return this;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  Integer[] choices=new Integer[]{0,1,2,3,4,5,6,7,8,9,10,20,40};\n  Integer result=(Integer)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set edge width\",\"Set edge width\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),choices,choices[1]);\n  if (result != null)   execute(\"set edgeWidth=\" + result + \";\");\n}\n"}
{"nl": "Checks if request matches rule's content type constraints", "code": "private boolean matchesContentType(EnumSet<ContentType> contentTypes){\n  if (permittedContentTypesMask == ContentType.ANY.getFlagValue() && restrictedContentTypesMask == 0) {\n    return true;\n  }\n  int contentTypeMask=ContentType.getMask(contentTypes);\n  boolean matchesPermitted=permittedContentTypesMask == ContentType.ANY.getFlagValue() || (permittedContentTypesMask & contentTypeMask) != 0;\n  boolean notMatchesRestricted=restrictedContentTypesMask == 0 || (restrictedContentTypesMask & contentTypeMask) == 0;\n  return matchesPermitted && notMatchesRestricted;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveGetLinksQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getLinks\",GetLinksResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Checks the given template in the given category, adding it to an existing project", "code": "private void checkCreateTemplate(String category,String name) throws Exception {\n  checkCreateTemplate(category,name,false);\n}\n"}
{"nl": "release SLHolder for this scan", "code": "public void releaseScan(){\n  release();\n}\n"}
{"nl": "Adds a language limit to the query", "code": "public void addLanguage(Language language){\n  addLanguage(language.getId());\n}\n"}
{"nl": "Updates the task", "code": "@Override public void updateTask(){\n  if (entity.getDistanceSq(targetItem.posX,targetItem.posY,targetItem.posZ) <= 2.0D && targetItem.getEntityItem().stackSize > 0) {\n    processItemEating();\n  }\n else {\n    ++timeoutCounter;\n    if (timeoutCounter % 40 == 0) {\n      this.entity.getNavigator().tryMoveToXYZ(targetItem.posX,targetItem.posY,targetItem.posZ,1.0F);\n    }\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public UScriptRun(char[] chars,int start,int count){\n  reset(chars,start,count);\n}\n"}
{"nl": "author  hhj TODO", "code": "public static void warnInfo(String msg){\n  warnInfo(\"zhibo\",msg);\n}\n"}
{"nl": "Check if string is empty", "code": "public static boolean isEmpty(String str){\n  return str == null || str.length() == 0;\n}\n"}
{"nl": "Fuzzy testing to catch random highlight issues", "code": "public void testHighlightLineEscapeFuzz(){\n  Random rand=new Random();\n  CodeMatcher cm=new CodeMatcher();\n  List<String> matchTerms;\n  for (int i=0; i < 1000; i++) {\n    matchTerms=new ArrayList<String>();\n    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(1) + 1).replace(\"*\",\"A\"));\n    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(2) + 1).replace(\"*\",\"A\"));\n    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(5) + 1).replace(\"*\",\"A\"));\n    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(10) + 1).replace(\"*\",\"A\"));\n    matchTerms.add(RandomStringUtils.randomAscii(rand.nextInt(15) + 1).replace(\"*\",\"A\"));\n    String line=RandomStringUtils.randomAscii(rand.nextInt(1000) + 1);\n    cm.highlightLine(line,matchTerms);\n  }\n}\n"}
{"nl": "verifies that two vectors are close (sup norm)", "code": "protected void assertClose(String msg,Fraction[] m,Fraction[] n,double tolerance){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors have different lengths\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i].doubleValue(),n[i].doubleValue(),tolerance);\n  }\n}\n"}
{"nl": "upload file to storage server (by file name, slave file mode)", "code": "public String[] upload_file(String group_name,String master_filename,String prefix_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  if ((group_name == null || group_name.length() == 0) || (master_filename == null || master_filename.length() == 0) || (prefix_name == null)) {\n    throw new MyException(\"invalid arguement\");\n  }\n  File f=new File(local_filename);\n  FileInputStream fis=new FileInputStream(f);\n  if (file_ext_name == null) {\n    int nPos=local_filename.lastIndexOf('.');\n    if (nPos > 0 && local_filename.length() - nPos <= ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + 1) {\n      file_ext_name=local_filename.substring(nPos + 1);\n    }\n  }\n  try {\n    return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,f.length(),new UploadStream(fis,f.length()),meta_list);\n  }\n  finally {\n    fis.close();\n  }\n}\n"}
{"nl": "Waits for all queued audio to be played", "code": "public boolean drain(){\n  return true;\n}\n"}
{"nl": "register a set of pattern (all associated with \"true\"", "code": "void register(String[] patterns){\n  for (  String pattern : patterns) {\n    register(pattern,TRUE);\n  }\n}\n"}
{"nl": "Called when we've noticed an edit of a resource file that is in an app module", "code": "private void recordSimpleResourceEdit(){\nsynchronized (myLock) {\n    mySeenLocalResourceChanges=true;\n  }\n}\n"}
{"nl": "Create join related data structures and relations between tables", "code": "private void buildJoinInfo(){\n  for (  QueryTableData tableData : query.getTablesData()) {\n    tableData.createJoinIndex(query.getExpTree());\n  }\n  List<LinkedList<QueryTableData>> joinedSequences=new LinkedList<LinkedList<QueryTableData>>();\n  for (int i=0; i < query.getTablesData().size(); i++) {\n    QueryTableData tableData=query.getTablesData().get(i);\n    if (!tableData.isJoined()) {\n      LinkedList<QueryTableData> seq=new LinkedList<QueryTableData>();\n      seq.add(tableData);\n      while (tableData.getJoinTable() != null) {\n        tableData=tableData.getJoinTable();\n        seq.add(tableData);\n      }\n      joinedSequences.add(seq);\n    }\n  }\n  QueryTableData lastJoined=null;\n  for (  LinkedList<QueryTableData> seq : joinedSequences) {\n    if (lastJoined != null) {\n      lastJoined.setJoinTable(seq.getFirst());\n      seq.getFirst().setJoined(true);\n    }\n    lastJoined=seq.getLast();\n  }\n}\n"}
{"nl": "goto the previous object", "code": "public boolean gotoPrevious(){\n  if (isCurrentSet()) {\n    if (current.get2() > 0)     current.set2(current.get2() - 1);\n else     if (current.get1() > 0) {\n      current.set1(current.get1() - 1);\n      current.set2(table.getGrid().getColumnCount() - 1);\n    }\n else {\n      current.set1(-1);\n      current.set2(-1);\n    }\n  }\n else   gotoLast();\n  return isCurrentSet();\n}\n"}
{"nl": "WARN: assumes no trailing whitespace", "code": "public boolean hasBulletList(String text){\n  return bulletPat.matcher(text).find();\n}\n"}
{"nl": "Adds a QueryExtension information for the specified path", "code": "public SpaceTypeDescriptorBuilder addQueryExtensionInfo(String path,Class<? extends Annotation> queryExtensionAnnotation){\n  if (_queryExtensionsInfo == null)   _queryExtensionsInfo=new TypeQueryExtensionsImpl();\n  _queryExtensionsInfo.add(queryExtensionAnnotation,path);\n  return this;\n}\n"}
{"nl": "Creates an observable only for the child changed method", "code": "public Observable<FirebaseChildEvent> observeChildChanged(final Query firebaseRef){\n  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.CHANGED));\n}\n"}
{"nl": "load the data by the query", "code": "public static <T extends Bean>T load(String collection,Bson query,Bson order,T b){\n  TimeStamp t=TimeStamp.create();\n  try {\n    MongoCollection<Document> db=MongoHelper.getCollection(collection);\n    if (db != null) {\n      FindIterable<Document> d=db.find(query);\n      if (order == null) {\n        d.sort(order);\n      }\n      if (d != null) {\n        if (log.isDebugEnabled())         log.debug(\"load - cost=\" + t.past() + \"ms, collection=\"+ collection+ \", query=\"+ query+ \", order=\"+ order);\n        Document d1=d.first();\n        if (d1 != null) {\n          b.load(d1);\n          return b;\n        }\n      }\n else {\n        if (log.isDebugEnabled())         log.debug(\"load - cost=\" + t.past() + \"ms, collection=\"+ collection+ \", query=\"+ query+ \", order=\"+ order+ \", result=\"+ null);\n      }\n    }\n  }\n catch (  Exception e) {\n    if (log.isErrorEnabled())     log.error(\"query=\" + query + \", order=\"+ order,e);\n  }\n  return null;\n}\n"}
{"nl": "returns true, if is match", "code": "public boolean isMatch(){\n  return !(refName == null || refName.equals(\"*\"));\n}\n"}
{"nl": "Sends a broadcast in order to the interested activities can update their view TODO - no more broadcasts, replace with a callback to subscribed listeners", "code": "private void sendBroadcastUploadsAdded(){\n  Intent start=new Intent(getUploadsAddedMessage());\n  sendStickyBroadcast(start);\n}\n"}
{"nl": "Returns whether the specified type name is of primitive type", "code": "public static boolean isPrimitive(String typeName){\n  return _primitiveTypes.containsKey(typeName);\n}\n"}
{"nl": "Convert temperature scales", "code": "protected BigDecimal convertTemperature(int fromScale,int toScale,BigDecimal val){\n  BigDecimal valConverted;\n  if (fromScale == 0 && toScale == 1) {\n    valConverted=val.multiply(ONE_POINT_EIGHT).add(THIRTY_TWO).setScale(1,RoundingMode.HALF_DOWN);\n  }\n else   if (fromScale == 1 && toScale == 0) {\n    valConverted=val.subtract(THIRTY_TWO).divide(ONE_POINT_EIGHT,MathContext.DECIMAL32).setScale(1,RoundingMode.HALF_DOWN);\n  }\n else {\n    valConverted=val;\n  }\n  logger.debug(\"Converted temperature from {}{} to {}{}\",val,fromScale == 0 ? \"C\" : \"F\",valConverted,toScale == 0 ? \"C\" : \"F\");\n  return valConverted;\n}\n"}
{"nl": "stop listen notify2", "code": "private void stop_notify_2(){\n  bleManager.stopListenCharacterCallback(UUID_NOTIFY_2);\n}\n"}
{"nl": "Return system albums", "code": "public VideoGetAlbumsQueryWithExtended needSystem(Boolean value){\n  return unsafeParam(\"need_system\",value);\n}\n"}
{"nl": "Utility function giving the ConstraintHandle associated to the given ConstraintAnchor", "code": "public static ConstraintHandle constraintHandle(ConstraintAnchor anchor){\n  if (anchor == null) {\n    return null;\n  }\n  ConstraintWidget widget=anchor.getOwner();\n  if (widget == null) {\n    return null;\n  }\n  if (widget.getCompanionWidget() == null) {\n    return null;\n  }\n  WidgetCompanion widgetCompanion=(WidgetCompanion)widget.getCompanionWidget();\n  WidgetInteractionTargets widgetInteraction=widgetCompanion.getWidgetInteractionTargets();\n  return widgetInteraction.getConstraintHandle(anchor);\n}\n"}
{"nl": "Allow a custom decimalformat", "code": "public PercentFormatter(DecimalFormat format){\n  mFormattedStringCache=new FormattedStringCache.Generic<>(format);\n  mFormattedStringCacheAxis=new FormattedStringCache.PrimFloat(format);\n}\n"}
{"nl": "Quality which we should generate the image 1-100", "code": "public Builder quality(int quality){\n  if (quality < 1 || quality > 100)   throw new IllegalArgumentException(\"quality must be between 1 and 100\");\n  this.quality=quality;\n  return this;\n}\n"}
{"nl": "synchronize chart to reflect latest user selection in taxon chart", "code": "public void sync() throws CanceledException {\n  if (!inSync) {\n    inSync=true;\n    IChartData chartData=(IChartData)getChartData();\n    chartData.clear();\n    try {\n      MicrobialAttributes attributes=MicrobialAttributes.getInstance();\n      Document doc=((Director)dir).getDocument();\n      MainViewer mainViewer=((Director)dir).getMainViewer();\n      int numberOfDatasets=doc.getNumberOfSamples();\n      if (numberOfDatasets > 0) {\n        Map<String,Map<String,Integer>> dataset2AttributeState2Value=attributes.getDataSet2AttributeState2Value(mainViewer);\n        chartData.setAllSeries(doc.getSampleNames());\n        SortedSet<String> classNames=new TreeSet<>();\n        for (        String series : dataset2AttributeState2Value.keySet()) {\n          Map<String,Integer> attributeState2value=dataset2AttributeState2Value.get(series);\n          for (          String attributeState : attributeState2value.keySet()) {\n            classNames.add(attributeState);\n            Integer value=attributeState2value.get(attributeState);\n            if (value == null)             value=0;\n            chartData.putValue(series,attributeState,value);\n          }\n        }\n        chartData.setClassNames(classNames);\n      }\n    }\n catch (    IOException e) {\n      Basic.caught(e);\n    }\n    super.sync();\n    inSync=false;\n  }\n}\n"}
{"nl": "Checks if a name is forbidden", "code": "public static boolean isForbiddenWord(String name){\n  return isForbiddenByClient(name) || isForbiddenBySequence(name);\n}\n"}
{"nl": "Subscribe to state changed events", "code": "public void addStateChangedListener(ISharedDataIteratorSourceStateChangedListener<T> listener){\n  _sharedObjectListLock.writeLock().lock();\n  try {\n    _listener=listener;\n  }\n  finally {\n    _sharedObjectListLock.writeLock().unlock();\n  }\n}\n"}
{"nl": "Pretty-prints the given table fixture", "code": "@NotNull public static String tableToString(@NotNull JTableFixture table){\n  return tableToString(table,0,Integer.MAX_VALUE,0,Integer.MAX_VALUE,40);\n}\n"}
{"nl": "draws the powered by logo", "code": "protected void drawPoweredBy(Graphics2D gc,Rectangle rect){\n  if (getPOWEREDBY() != null && getPOWEREDBY().length() > 2) {\n    gc.setColor(Color.gray);\n    gc.setStroke(new BasicStroke(1));\n    gc.setFont(poweredByFont);\n    int width=(int)Basic.getStringSize(gc,getPOWEREDBY(),gc.getFont()).getWidth();\n    int x=rect.x + rect.width - width - 2;\n    int y=rect.y + rect.height - 2;\n    gc.drawString(getPOWEREDBY(),x,y);\n  }\n}\n"}
{"nl": "This method logs the ERROR message", "code": "public final void error(final Object o){\n  log(Level.ERROR,o);\n}\n"}
{"nl": "copy files", "code": "public static int copyDir(File src,File dest) throws IOException {\n  dest.mkdirs();\n  int count=0;\n  if (src.isFile()) {\n    count++;\n    copy(src,new File(dest.getCanonicalPath() + \"/\" + src.getName()));\n  }\n else   if (src.isDirectory()) {\n    File[] ff=src.listFiles();\n    if (ff != null && ff.length > 0) {\n      for (      File f : ff) {\n        count+=copyDir(f,new File(dest.getCanonicalPath() + \"/\" + src.getName()));\n      }\n    }\n else {\n      new File(dest.getCanonicalPath() + \"/\" + src.getName()).mkdirs();\n    }\n  }\n  return count;\n}\n"}
{"nl": "Set widget api id", "code": "public WidgetsGetCommentsQuery widgetApiId(Integer value){\n  return unsafeParam(\"widget_api_id\",value);\n}\n"}
{"nl": "write a single byte", "code": "public void write(int a) throws IOException {\n  outs.write(a);\n  position++;\n}\n"}
{"nl": "Bind the status bar of an activity to a topping so that it's color is updated when the user/developer updates the color for that topping id", "code": "@TargetApi(Build.VERSION_CODES.LOLLIPOP) public Scoop bindStatusBar(Activity activity,int toppingId){\n  return bindStatusBar(activity,toppingId,null);\n}\n"}
{"nl": "read in the classification block from a file", "code": "public int load(IInputReader r) throws IOException {\n  id2SumAndPos.clear();\n  try {\n    int numberOfClasses=0;\n    while (r.getPosition() < r.length()) {\n      int classId=r.readInt();\n      int count=r.readInt();\n      if (count < 0) {\n        setWeightedSum(classId,-count);\n        count=r.readInt();\n      }\n else       setWeightedSum(classId,count);\n      long pos=r.readLong();\n      setSumAndPos(classId,count,pos);\n      numberOfClasses++;\n    }\n    return numberOfClasses;\n  }\n  finally {\n    r.close();\n  }\n}\n"}
{"nl": "is a an ancestor of b ?", "code": "boolean isAncestorOf(Node a,Node b){\n  for (Node node=b; node != null; node=node.getParentNode()) {\n    if (node == a)     return true;\n  }\n  return false;\n}\n"}
{"nl": "Add a new child to the current linked list of child tokens", "code": "protected void addChild(LazyNode token){\n  if (lastChild == null) {\n    child=token;\n    lastChild=token;\n    return;\n  }\n  lastChild.next=token;\n  lastChild=token;\n}\n"}
{"nl": "parse an edit object", "code": "public static Edit parse(NexusStreamParser np) throws IOException {\n  if (np.peekMatchIgnoreCase(\"A\")) {\n    np.matchIgnoreCase(\"A\");\n    return new Edit(np.getInt(),np.getInt(),np.getWordRespectCase());\n  }\n else   if (np.peekMatchIgnoreCase(\"D\")) {\n    np.matchIgnoreCase(\"D\");\n    return new Edit(np.getInt());\n  }\n else   if (np.peekMatchIgnoreCase(\"R\")) {\n    np.matchIgnoreCase(\"R\");\n    return new Edit(np.getInt(),np.getWordRespectCase());\n  }\n else   return null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetCountriesQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getCountries\",GetCountriesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Read the steps information from a Kettle repository", "code": "@Override public void readRep(Repository rep,ObjectId idStep,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleException {\n  try {\n    tabelName=rep.getStepAttributeString(idStep,\"TableName\");\n    mdkeySize=rep.getStepAttributeString(idStep,\"MDKeySize\");\n    measureCount=rep.getStepAttributeString(idStep,\"Measurecount\");\n    heirAndKeySize=rep.getStepAttributeString(idStep,\"HeirAndKeySize\");\n    databaseName=rep.getStepAttributeString(idStep,\"databaseName\");\n    tableName=rep.getStepAttributeString(idStep,\"tableName\");\n    groupByEnabled=rep.getStepAttributeString(idStep,\"isGroupByEnabled\");\n    aggregatorClassString=rep.getStepAttributeString(idStep,\"aggregatorClassString\");\n    aggregatorString=rep.getStepAttributeString(idStep,\"aggregatorString\");\n    factDimLensString=rep.getStepAttributeString(idStep,\"factDimLensString\");\n    levelAnddataTypeString=rep.getStepAttributeString(idStep,\"levelAnddataTypeString\");\n    partitionID=rep.getStepAttributeString(idStep,\"partitionID\");\n    segmentId=rep.getStepAttributeString(idStep,\"segmentId\");\n    taskNo=rep.getStepAttributeString(idStep,\"taskNo\");\n  }\n catch (  Exception exception) {\n    throw new KettleException(BaseMessages.getString(PKG,\"CarbonDataWriterStepMeta.Exception.UnexpectedErrorInReadingStepInfo\"),exception);\n  }\n}\n"}
{"nl": "Release the global lock", "code": "public static synchronized boolean release(String name){\n  name=\"lock.\" + name;\n  try {\n    String node=Model.node();\n    return Helper.update(W.create(X.ID,name).and(\"s\",node),V.create(\"s\",X.EMPTY),Global.class) > 0;\n  }\n  finally {\n    locked.remove(name);\n  }\n}\n"}
{"nl": "read file content", "code": "public static String readText(Context context,String assetPath){\n  LogUtils.debug(\"read assets file as text: \" + assetPath);\n  try {\n    return ConvertUtils.toString(context.getAssets().open(assetPath));\n  }\n catch (  Exception e) {\n    LogUtils.error(e);\n    return \"\";\n  }\n}\n"}
{"nl": "Returns true if this VarNode represents the THIS pointer", "code": "public boolean isThisPtr(){\n  if (variable instanceof Pair) {\n    Pair o=(Pair)variable;\n    return o.isThisParameter();\n  }\n  return false;\n}\n"}
{"nl": "Tell whether the passed role is set?", "code": "public static boolean hasRole(String roleName){\n  for (  String role : getRoles()) {\n    if (role.equalsIgnoreCase(roleName)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Method to return the number of Miller-Rabin rounds that we need in addition to those that BigInteger will do", "code": "private static int calcNumAdditionalMillerRabinRounds(int bitLength){\n  int roundsLeft=0;\n  if (bitLength >= 1536) {\n    roundsLeft=2;\n  }\n else   if (bitLength >= 1024) {\n    roundsLeft=3;\n  }\n  return roundsLeft;\n}\n"}
{"nl": "Creates a column instance", "code": "public static Column of(String name,Object value){\n  return Column.of(name,Value.of(value));\n}\n"}
{"nl": "NON-DOM: check for valid XML characters as per the XML version", "code": "public static final void isXMLCharWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String datavalue,boolean isXML11Version){\n  if (datavalue == null || (datavalue.length() == 0)) {\n    return;\n  }\n  char[] dataarray=datavalue.toCharArray();\n  int datalength=dataarray.length;\n  if (isXML11Version) {\n    int i=0;\n    while (i < datalength) {\n      if (XML11Char.isXML11Invalid(dataarray[i++])) {\n        char ch=dataarray[i - 1];\n        if (XMLChar.isHighSurrogate(ch) && i < datalength) {\n          char ch2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {\n            continue;\n          }\n        }\n        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"InvalidXMLCharInDOM\",new Object[]{Integer.toString(dataarray[i - 1],16)});\n        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n      }\n    }\n  }\n else {\n    int i=0;\n    while (i < datalength) {\n      if (XMLChar.isInvalid(dataarray[i++])) {\n        char ch=dataarray[i - 1];\n        if (XMLChar.isHighSurrogate(ch) && i < datalength) {\n          char ch2=dataarray[i++];\n          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {\n            continue;\n          }\n        }\n        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"InvalidXMLCharInDOM\",new Object[]{Integer.toString(dataarray[i - 1],16)});\n        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"wf-invalid-character\");\n      }\n    }\n  }\n}\n"}
{"nl": "Sends a broadcast in order to the interested activities can update their view TODO - no more broadcasts, replace with a callback to subscribed listeners", "code": "private void sendBroadcastUploadFinished(UploadFileOperation upload,RemoteOperationResult uploadResult,String unlinkedFromRemotePath){\n  Intent end=new Intent(getUploadFinishMessage());\n  end.putExtra(EXTRA_REMOTE_PATH,upload.getRemotePath());\n  if (upload.wasRenamed()) {\n    end.putExtra(EXTRA_OLD_REMOTE_PATH,upload.getOldFile().getRemotePath());\n  }\n  end.putExtra(EXTRA_OLD_FILE_PATH,upload.getOriginalStoragePath());\n  end.putExtra(ACCOUNT_NAME,upload.getAccount().name);\n  end.putExtra(EXTRA_UPLOAD_RESULT,uploadResult.isSuccess());\n  if (unlinkedFromRemotePath != null) {\n    end.putExtra(EXTRA_LINKED_TO_PATH,unlinkedFromRemotePath);\n  }\n  sendStickyBroadcast(end);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetRepostsQuery(VkApiClient client){\n  super(client,\"wall.getReposts\",GetRepostsResponse.class);\n}\n"}
{"nl": "Handler scan result", "code": "public void handleDecode(Result result,Bitmap barcode){\n  inactivityTimer.onActivity();\n  playBeepSoundAndVibrate();\n  String resultString=result.getText();\n  handleResult(resultString);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedDeleteListQuery(VkApiClient client,UserActor actor,int listId){\n  super(client,\"newsfeed.deleteList\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  listId(listId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoAddQuery(VkApiClient client,UserActor actor,int videoId,int ownerId){\n  super(client,\"video.add\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n  ownerId(ownerId);\n}\n"}
{"nl": "has next fastA record?", "code": "public boolean hasNext(){\n  return !isClosed && nextHeader != null;\n}\n"}
{"nl": "remove frame suffix", "code": "private String removeFrameSuffix(String query){\n  int pos=query.indexOf(\"_RF\");\n  if (pos != -1)   return query.substring(0,pos);\n else   return query;\n}\n"}
{"nl": "must return true", "code": "@Override protected boolean handler(@NonNull Throwable e,@NonNull IHandler handler){\n  String s=!TextUtils.isEmpty(e.getMessage()) ? e.getMessage() : e.getClass().getSimpleName();\n  handler.onHandler(Cons.Error.UnKnow,s);\n  return true;\n}\n"}
{"nl": "Pretty-print any TreeElement to a String", "code": "@NotNull public static String dumpTree(@NotNull TreeElement root){\n  final StringBuilder builder=new StringBuilder();\n  dumpTreeToBuilder(builder,root,0);\n  return builder.toString();\n}\n"}
{"nl": "Create SalesOrderHeader entity", "code": "private SalesOrderHeader createSalesOrderHeader(String salesOrderId){\n  SalesOrderHeader soHeader=new SalesOrderHeader();\n  soHeader.setSalesOrderId(salesOrderId);\n  soHeader.setCurrencyCode(\"INR\");\n  soHeader.setGrossAmount(BigDecimal.valueOf(13224));\n  soHeader.setNetAmount(BigDecimal.valueOf(11113));\n  soHeader.setTaxAmount(BigDecimal.valueOf(2111));\n  return soHeader;\n}\n"}
{"nl": "Call this method to force stopping fingerprint scanning", "code": "@Override public void stop(){\n  impl.stop();\n}\n"}
{"nl": "Clicks the image", "code": "public void click(){\n  image.click();\n}\n"}
{"nl": "Create a checked in change set from the given syncinfo", "code": "public SVNCheckedInChangeSet(SyncInfo info){\n  this(new SyncInfo[]{info});\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetNearbyQuery(VkApiClient client,UserActor actor,float latitude,float longitude){\n  super(client,\"users.getNearby\",GetNearbyResponse.class);\n  accessToken(actor.getAccessToken());\n  latitude(latitude);\n  longitude(longitude);\n}\n"}
{"nl": "Removes a given call site", "code": "private void removeCallSite(Stmt callSite,SootMethod caller){\n  if (!caller.getActiveBody().getUnits().contains(callSite))   return;\n  if (!((Stmt)callSite).containsInvokeExpr())   return;\n  caller.getActiveBody().getUnits().remove(callSite);\n  if (Scene.v().hasCallGraph())   Scene.v().getCallGraph().removeAllEdgesOutOf(callSite);\n}\n"}
{"nl": "Add an integer column with the specified min/max allowable values", "code": "public Builder addColumnInteger(String name,Integer minAllowedValue,Integer maxAllowedValue){\n  return addColumn(new IntegerMetaData(name,minAllowedValue,maxAllowedValue));\n}\n"}
{"nl": "Set school class", "code": "public UsersSearchQuery schoolClass(Integer value){\n  return unsafeParam(\"school_class\",value);\n}\n"}
{"nl": "Get relations from includes section or create a remote proxy", "code": "@Override protected Object fetchRelatedObject(RegistryEntry entry,Serializable relationId,RepositoryMethodParameterProvider parameterProvider,QueryAdapter queryAdapter){\n  String uid=getUID(entry,relationId);\n  Object relatedResource=resourceMap.get(uid);\n  if (relatedResource != null) {\n    return relatedResource;\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Display the global trace", "code": "public synchronized void showGlobalTrace(){\n  acquireExclusiveAccess();\n  try {\n    if (_traceLoggingLevel == OFF_VALUE && !_hasAssociatedLogOn)     return;\n    _logger.log(Level.INFO,\"Trace Global Start [\" + _traceLength + \"]\");\n    sortTrace(_globalTrace);\n    for (    LogRecord record : _globalTrace)     traceLogRecord(record);\n    if (_associatedLoggers != null) {\n      for (      String associatedLogName : _associatedLoggers)       TraceableLogger.getLogger(associatedLogName).showGlobalTrace();\n    }\n    _logger.log(Level.INFO,\"Trace Global End [\" + _traceLength + \"]\");\n  }\n  finally {\n    releaseExclusiveAccess();\n  }\n}\n"}
{"nl": "Paint the component and its children on the given context", "code": "public boolean drawGroup(@NotNull Graphics2D gc,@NotNull ScreenView screenView,@NotNull NlComponent component){\n  return false;\n}\n"}
{"nl": "Add handler side drop (if not already in xml)", "code": "public void addHandlerSideQuestDrop(int questId,int npcId,int itemId,int amount,int chance){\n  HandlerSideDrop hsd=new HandlerSideDrop(questId,npcId,itemId,amount,chance);\n  QuestService.addQuestDrop(hsd.getNpcId(),hsd);\n}\n"}
{"nl": "Helper static method to generate Shield Instances", "code": "public static <T>T make(Class<T> shieldClass,RxJava1Hub rxJava1Hub){\n  return inst.make(shieldClass,rxJava1Hub,RxJava1Hub.class);\n}\n"}
{"nl": "Method for handling the request from the controller", "code": "public boolean handleRequest(ZWaveController zController,SerialMessage lastSentMessage,SerialMessage incomingMessage) throws ZWaveSerialMessageException {\n  logger.warn(\"TODO: {} unsupported REQUEST.\",incomingMessage.getMessageClass().getLabel());\n  return false;\n}\n"}
{"nl": "Adds +working to the query", "code": "public void addWorking(boolean working){\n  query.append(\" +working:\" + working);\n}\n"}
{"nl": "Add a style to the config", "code": "public ResourcesPoet addStyle(String name,@Nullable String parentRef,@Nullable List<StyleItem> styleItems){\n  Element element=document.createElement(\"style\");\n  element.setAttribute(\"name\",name);\n  if (parentRef != null) {\n    element.setAttribute(\"parent\",parentRef);\n  }\n  if (styleItems != null) {\n    for (    StyleItem item : styleItems) {\n      Element valueElement=document.createElement(\"item\");\n      valueElement.setAttribute(\"name\",item.name);\n      valueElement.appendChild(document.createTextNode(item.value));\n      element.appendChild(valueElement);\n    }\n  }\n  resourceElement.appendChild(element);\n  return this;\n}\n"}
{"nl": "Find previous instance", "code": "public boolean findPrevious(String regularExpression){\n  return findAndUncollapseNext(regularExpression,true,false) > 0;\n}\n"}
{"nl": "updates the classId values for a collection of reads", "code": "public void updateClassifications(String[] names,List<UpdateItem> updateItemList,ProgressListener progressListener) throws IOException, CanceledException {\n  UpdateItemList updateItems=(UpdateItemList)updateItemList;\n  final int numClassifications=names.length;\n  long maxProgress=0;\n  for (int i=0; i < numClassifications; i++) {\n    maxProgress+=updateItems.getClassIds(i).size();\n  }\n  progressListener.setMaximum(maxProgress);\n  final RMA2Modifier rma2Modifier=new RMA2Modifier(file);\n  for (int i=0; i < numClassifications; i++) {\n    rma2Modifier.startClassificationSection(names[i]);\n    try {\n      for (      Integer classId : updateItems.getClassIds(i)) {\n        int weightedSize=updateItems.getSize(i,classId);\n        final List<Long> positions=new ArrayList<>();\n        if (weightedSize > 0) {\n          for (UpdateItem item=updateItems.getFirst(i,classId); item != null; item=updateItems.getUpdateItem(item.getNextInClassification(i))) {\n            positions.add(item.getReadUId());\n          }\n        }\n        rma2Modifier.addToClassification(classId,weightedSize,positions);\n        progressListener.incrementProgress();\n      }\n    }\n  finally {\n      rma2Modifier.finishClassificationSection();\n    }\n  }\n  rma2Modifier.close();\n}\n"}
{"nl": "create a new instance of the given type of drawer, sharing internal data structures", "code": "public WordCloudDrawer createInstance(){\n  final WordCloudDrawer drawer=new WordCloudDrawer();\n  drawer.setViewer(viewer);\n  drawer.setChartData(new DefaultChartData());\n  drawer.setClass2HigherClassMapper(class2HigherClassMapper);\n  drawer.setSeriesLabelGetter(seriesLabelGetter);\n  drawer.setExecutorService(executorService);\n  return drawer;\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowBiPlot();\n}\n"}
{"nl": "construct object and \"remember\" how scrollpane is currently centered", "code": "public ScrollPaneAdjuster(JScrollPane scrollPane,Point centerDC){\n  Rectangle viewRect=scrollPane.getViewport().getViewRect();\n  scrollBarX=scrollPane.getHorizontalScrollBar();\n  scrollBarY=scrollPane.getVerticalScrollBar();\n  if (centerDC == null) {\n    xPortionOfVisible=0.5;\n    yPortionOfVisible=0.5;\n  }\n else {\n    xPortionOfVisible=(centerDC.x - viewRect.x) / (double)viewRect.width;\n    yPortionOfVisible=(centerDC.y - viewRect.y) / (double)viewRect.height;\n  }\n  xFactor=(scrollBarX.getValue() + xPortionOfVisible * scrollBarX.getVisibleAmount()) / (scrollBarX.getMaximum() - scrollBarX.getMinimum());\n  yFactor=(scrollBarY.getValue() + yPortionOfVisible * scrollBarY.getVisibleAmount()) / (scrollBarY.getMaximum() - scrollBarY.getMinimum());\n}\n"}
{"nl": "call this when window is destroyed to release tooltip thread", "code": "public void close(){\n  toolTipHelper.shutdownNow();\n}\n"}
{"nl": "does this edge lead to a leaf?", "code": "private boolean isLeafEdge(Edge f,PhyloGraph graph){\n  return graph.getDegree(graph.getSource(f)) == 1 || graph.getDegree(graph.getTarget(f)) == 1;\n}\n"}
{"nl": "Configure the files to add to the index", "code": "@CheckReturnValue public AddCmd files(Iterable<String> files){\n  Preconditions.checkState(!all,\"'all' and passing files is incompatible\");\n  return new AddCmd(force,false,files);\n}\n"}
{"nl": "Initializes or re-initializes reader", "code": "protected void init(){\n  mStatus=STATUS_OK;\n  mFrameCount=0;\n  mGifFrames=new ArrayList<GifFrame>();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n"}
{"nl": "Player leaved world - set last online on member", "code": "public static final void onPlayerLogout(Player player){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    PlayerGroupMember member=group.getMember(player.getObjectId());\n    member.updateLastOnlineTime();\n    group.onEvent(new PlayerDisconnectedEvent(group,player));\n  }\n}\n"}
{"nl": "gzip decompress 2 string", "code": "public static String decompressForGzip(byte[] compressed){\n  final int BUFFER_SIZE=compressed.length;\n  GZIPInputStream gis=null;\n  ByteArrayInputStream is=null;\n  try {\n    is=new ByteArrayInputStream(compressed);\n    gis=new GZIPInputStream(is,BUFFER_SIZE);\n    StringBuilder string=new StringBuilder();\n    byte[] data=new byte[BUFFER_SIZE];\n    int bytesRead;\n    while ((bytesRead=gis.read(data)) != -1) {\n      string.append(new String(data,0,bytesRead,\"UTF-8\"));\n    }\n    return string.toString();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n finally {\n    okhttp3.internal.Util.closeQuietly(gis);\n    okhttp3.internal.Util.closeQuietly(is);\n  }\n  return null;\n}\n"}
{"nl": "Find a widget at the coordinate (x, y) in the current selection, taking the decorator visibility in account", "code": "public ConstraintWidget findWidgetInSelection(float x,float y){\n  ConstraintWidget found=null;\n  ArrayList<ConstraintWidget> selection=mSelection.getWidgets();\n  for (  ConstraintWidget widget : selection) {\n    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();\n    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);\n    if (!decorator.isVisible()) {\n      continue;\n    }\n    if (widget instanceof ConstraintWidgetContainer) {\n      ConstraintWidget f=findWidget((ConstraintWidgetContainer)widget,x,y);\n      if (f != null) {\n        found=f;\n      }\n    }\n else {\n      int l=widget.getDrawX();\n      int t=widget.getDrawY();\n      int r=l + widget.getWidth();\n      int b=t + widget.getHeight();\n      if (x >= l && x <= r && y >= t && y <= b) {\n        found=widget;\n      }\n    }\n  }\n  return found;\n}\n"}
{"nl": "if deltaY > 0, move the content down", "code": "private void movePos(float deltaY){\n  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {\n    if (DEBUG) {\n      PtrCLog.e(LOG_TAG,String.format(\"has reached the top\"));\n    }\n    return;\n  }\n  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;\n  if (mPtrIndicator.willOverTop(to)) {\n    if (DEBUG) {\n      PtrCLog.e(LOG_TAG,String.format(\"over top\"));\n    }\n    to=PtrIndicator.POS_START;\n  }\n  mPtrIndicator.setCurrentPos(to);\n  int change=to - mPtrIndicator.getLastPosY();\n  updatePos(mPtrIndicator.isHeader() ? change : -change);\n}\n"}
{"nl": "Handle an HTTP request", "code": "private void onRequest(HttpServerRequest request){\n  AtomicInteger level=new AtomicInteger(0);\n  request.toObservable().map(null).lift(new JsonParserOperator()).map(null).flatMap(null).count().subscribe(null,null);\n}\n"}
{"nl": "Restore Fragment's State here", "code": "@Override protected void onRestoreState(Bundle savedInstanceState){\n  super.onRestoreState(savedInstanceState);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  if (getViewer() == null || !(getViewer() instanceof megan.remote.RemoteServiceBrowser))   return false;\n  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();\n  return !remoteServiceBrowser.isServiceSelected() && remoteServiceBrowser.getURL().length() > 0;\n}\n"}
{"nl": "Returns true if legion is in cached by name", "code": "public boolean contains(String name){\n  return legionsByName.containsKey(name.toLowerCase());\n}\n"}
{"nl": "Increment attributes by given score", "code": "public void increment(float score){\n  cntGenomicLoci++;\n  sumScore+=score;\n}\n"}
{"nl": "delete all taxa listed", "code": "public SplitSystem deleteTaxa(List labels,Taxa taxa){\n  for (  Object label1 : labels) {\n    String label=(String)label1;\n    taxa.remove(label);\n  }\n  SplitSystem result=new SplitSystem();\n  for (Iterator it=iterator(); it.hasNext(); ) {\n    Split split=(Split)it.next();\n    Split induced=split.getInduced(taxa.getBits());\n    if (result.contains(induced)) {\n      Split other=result.get(induced);\n      other.setWeight(other.getWeight() + induced.getWeight());\n    }\n else     if (induced.getSplitSize() > 0)     result.addSplit(induced);\n  }\n  return result;\n}\n"}
{"nl": "Convert a set of records in to a matrix", "code": "public static INDArray toMatrix(List<List<Writable>> records){\n  INDArray arr=Nd4j.create(records.size(),records.get(0).size());\n  for (int i=0; i < arr.rows(); i++) {\n    arr.putRow(i,toArray(records.get(i)));\n  }\n  return arr;\n}\n"}
{"nl": "pack header by FastDHT transfer protocol", "code": "public static void packHeader(PkgHeader header,byte[] bs) throws UnsupportedEncodingException {\n  Arrays.fill(bs,0,FDHT_PROTO_PKG_HEADER_SIZE,(byte)0);\n  ProtoCommon.int2buff(header.body_len,bs,PROTO_HEADER_BODY_LEN_INDEX);\n  ProtoCommon.int2buff(header.key_hash_code,bs,PROTO_HEADER_KEY_HASH_CODE_INDEX);\n  ProtoCommon.int2buff(header.timestamp,bs,PROTO_HEADER_TIMESTAMP_INDEX);\n  ProtoCommon.int2buff(header.expires,bs,PROTO_HEADER_EXPIRES_INDEX);\n  bs[PROTO_HEADER_CMD_INDEX]=header.cmd;\n  bs[PROTO_HEADER_KEEP_ALIVE_INDEX]=header.keep_alive;\n  bs[PROTO_HEADER_STATUS_INDEX]=header.status;\n  return;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketGetAlbumsQuery(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"market.getAlbums\",GetAlbumsResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n}\n"}
{"nl": "Wraps a GSByteArrayOutputStream inner buffer with a ByteBuffer", "code": "private ByteBuffer wrap(GSByteArrayOutputStream bos){\n  ByteBuffer byteBuffer=ByteBuffer.wrap(bos.getBuffer());\n  byteBuffer.order(ByteOrder.BIG_ENDIAN);\n  return byteBuffer;\n}\n"}
{"nl": "Determine the converter with the object", "code": "public static Converter<String,?> determine(Object genericObj){\n  Type type=((ParameterizedType)genericObj.getClass().getGenericInterfaces()[0]).getActualTypeArguments()[0];\n  Converter<String,?> converter=determinePrimitiveConverter(type);\n  if (converter != null) {\n    return converter;\n  }\n  if (type instanceof ParameterizedType) {\n    return determineCollectionConverter((ParameterizedType)type);\n  }\n  return new JsonConverter((Class<?>)type);\n}\n"}
{"nl": "remove a given column", "code": "public boolean removeColumn(C columnKey){\n  boolean changed=false;\n  for (  R rowKey : dataMap.keySet()) {\n    Map<C,V> row=dataMap.get(rowKey);\n    if (row.containsKey(columnKey)) {\n      row.remove(columnKey);\n      row.keySet().remove(columnKey);\n      changed=true;\n    }\n  }\n  return true;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  final LabelsJList list=((ChartViewer)getViewer()).getActiveLabelsJList();\n  return list != null && list.getDisabledLabels().size() > 0;\n}\n"}
{"nl": "Constructs new instance of <tt>CM_CREATE_CHARACTER </tt> packet", "code": "public CM_CREATE_CHARACTER(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Return is s1 \\ s2", "code": "public static <T>Set<T> difference(Collection<? extends T> s1,Collection<? extends T> s2){\n  Set<T> s3=new HashSet<T>(s1);\n  s3.removeAll(s2);\n  return s3;\n}\n"}
{"nl": "Create a stream to read from the counter file", "code": "private void openCounterDataInputStream() throws DataFallbackException {\n  if (dInput == null) {\n    if (LOG.isDebugEnabled())     LOG.debug(\"openDataInputStream() ; Opening the reader for the \" + counterFile.getName() + \" file\");\n    try {\n      dInput=new BufferedReader(new FileReader(counterFile));\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n  }\n}\n"}
{"nl": "Duplicate an history", "code": "public static INDArray[] dup(INDArray[] history){\n  INDArray[] dupHistory=new INDArray[history.length];\n  for (int i=0; i < history.length; i++) {\n    dupHistory[i]=history[i].dup();\n  }\n  return dupHistory;\n}\n"}
{"nl": "get the ignore status", "code": "public boolean isIgnore(){\n  return ignore;\n}\n"}
{"nl": "The method used as funktion", "code": "public Object cheese(String body,@Header(\"name\") String name){\n  return \"Hello \" + name + \". I got payload `\"+ body+ \"` and I am on host: \"+ System.getenv(\"HOSTNAME\");\n}\n"}
{"nl": "whether two decls are the same", "code": "@Override public boolean equals(Object o){\n  return o == this;\n}\n"}
{"nl": "Toggle soft keyboard state", "code": "public static void toggleKeyboradState(Context context,EditText edit){\n  edit.setFocusable(true);\n  edit.setFocusableInTouchMode(true);\n  edit.requestFocus();\n  InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\n  inputManager.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);\n}\n"}
{"nl": "print group info (for debug)", "code": "public void print(){\n  int i;\n  System.out.println(\"group count: \" + groups.length + \", distinct server count: \"+ servers.length+ \", keep_alive=\"+ this.keep_alive);\n  for (i=0; i < servers.length; i++) {\n    System.out.println(\"server\" + (i + 1) + \". \"+ servers[i].address.getAddress().getHostAddress()+ \":\"+ servers[i].address.getPort());\n  }\n  for (i=0; i < groups.length; i++) {\n    System.out.println(\"group \" + i + \" server count: \"+ groups[i].length);\n    for (int k=0; k < groups[i].length; k++) {\n      System.out.println(\"server\" + (k + 1) + \". \"+ groups[i][k].address.getAddress().getHostAddress()+ \":\"+ groups[i][k].address.getPort());\n    }\n  }\n}\n"}
{"nl": "Close the JDBC connection", "code": "@Override public void close(){\n  try {\n    if (connection != null) {\n      connection.close();\n    }\n  }\n catch (  SQLException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Required for HintsPollerManager", "code": "@Provides @Singleton @CassandraClusters Collection<String> provideCassandraClusterNames(BlobStoreConfiguration configuration){\n  Set<String> clusters=Sets.newLinkedHashSet();\n  for (  CassandraConfiguration config : configuration.getCassandraClusters().values()) {\n    clusters.add(config.getCluster());\n  }\n  return clusters;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates descriptor for a discrete item represented by vertical bars, with custom dataFactor ad min/max values", "code": "public static ProbeItemDescriptor discreteBarItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue,boolean outlined,boolean filled,int width,boolean fixedWidth){\n  if (!outlined && !filled)   throw new IllegalArgumentException(\"Either outlined or filled must be set\");\n  return discreteItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,outlined ? DEFAULT_COLOR : null,filled ? DEFAULT_COLOR : null,width,fixedWidth,false,!filled);\n}\n"}
{"nl": "Used when exchange item != original item", "code": "public ExchangeItem(int itemObjId,long itemCount,Item item){\n  this.itemObjId=itemObjId;\n  this.itemCount=itemCount;\n  this.item=item;\n  this.itemDesc=item.getItemTemplate().getNameId();\n}\n"}
{"nl": "is this object contained in the SL ?", "code": "public boolean contains(T obj){\n  lock.lock();\n  try {\n    if (_objectsMap != null) {\n      return _objectsMap.containsKey(obj);\n    }\n    return contains_impl(obj);\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "Checks if has the name in the model for response", "code": "final public boolean has(String name){\n  return context != null && context.containsKey(name);\n}\n"}
{"nl": "Resurrection wait time: %0 sec", "code": "public static SM_SYSTEM_MESSAGE STR_WATINGTIME(String value0){\n  return new SM_SYSTEM_MESSAGE(1300740,value0);\n}\n"}
{"nl": "Deserializes a QueryInfo JsonObject", "code": "public static QueryInfo deserializeInfo(JsonObject queryInfoJson) throws JsonParseException {\n  long infoVersion=queryInfoJson.get(\"queryInfoVersion\").getAsLong();\n  if (infoVersion != QueryInfo.queryInfoSerialVersionUID) {\n    throw new JsonParseException(\"Attempt to deserialize unsupported query info version. Supported: \" + QueryInfo.queryInfoSerialVersionUID + \"; Received: \"+ infoVersion);\n  }\n  QuerySchema querySchema;\n  if (queryInfoJson.get(\"qSchema\").isJsonNull()) {\n    querySchema=null;\n  }\n else {\n    querySchema=deserializeSchema(queryInfoJson.get(\"qSchema\").getAsJsonObject());\n  }\n  QueryInfo info=new QueryInfo(UUID.fromString(queryInfoJson.get(\"identifier\").getAsString()),queryInfoJson.get(\"numSelectors\").getAsInt(),queryInfoJson.get(\"hashBitSize\").getAsInt(),queryInfoJson.get(\"hashKey\").getAsString(),queryInfoJson.get(\"dataPartitionBitSize\").getAsInt(),queryInfoJson.get(\"queryType\").getAsString(),queryInfoJson.get(\"useExpLookupTable\").getAsBoolean(),queryInfoJson.get(\"embedSelector\").getAsBoolean(),queryInfoJson.get(\"useHDFSExpLookupTable\").getAsBoolean(),queryInfoJson.get(\"numBitsPerDataElement\").getAsInt(),querySchema);\n  return info;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosReportQuery(VkApiClient client,UserActor actor,int ownerId,int photoId){\n  super(client,\"photos.report\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  photoId(photoId);\n}\n"}
{"nl": "Method called to assign null value serializer for property", "code": "public void assignNullSerializer(JsonSerializer<Object> nullSer){\n  if (_nullSerializer != null && _nullSerializer != nullSer) {\n    throw new IllegalStateException(\"Can not override null serializer\");\n  }\n  _nullSerializer=nullSer;\n}\n"}
{"nl": "Start operations to copy one or several files", "code": "public void copyFiles(Collection<OCFile> files,OCFile targetFolder){\n  for (  OCFile file : files) {\n    Intent service=new Intent(mFileActivity,OperationsService.class);\n    service.setAction(OperationsService.ACTION_COPY_FILE);\n    service.putExtra(OperationsService.EXTRA_NEW_PARENT_PATH,targetFolder.getRemotePath());\n    service.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());\n    service.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());\n    mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);\n  }\n  mFileActivity.showLoadingDialog(mFileActivity.getString(R.string.wait_a_moment));\n}\n"}
{"nl": "Using reflection to realize the object to copy", "code": "public static void copyProperties(Object from,Object to) throws Exception {\n  copyPropertiesExclude(from,to,null);\n}\n"}
{"nl": "Instantiate an image with the given height and width", "code": "public NativeImageLoader(int height,int width,int channels,boolean centerCropIfNeeded){\n  this(height,width,channels);\n  this.centerCropIfNeeded=centerCropIfNeeded;\n}\n"}
{"nl": "load the set megan summary file", "code": "public void loadMeganSummaryFile() throws IOException {\n  BufferedReader reader=new BufferedReader(new InputStreamReader(Basic.getInputStreamPossiblyZIPorGZIP(getMeganFile().getFileName())));\n  getDataTable().read(reader,false);\n  getSampleAttributeTable().read(reader,getSampleNames(),true);\n  reader.close();\n  String parameters=getDataTable().getParameters();\n  if (parameters != null) {\n    parseParameterString(parameters);\n  }\n  getActiveViewers().clear();\n  getActiveViewers().addAll(getDataTable().getClassification2Class2Counts().keySet());\n  loadColorTableFromDataTable();\n}\n"}
{"nl": "Adds a language limit to the query", "code": "public void addLanguage(Language language){\n  addLanguage(language.getId());\n}\n"}
{"nl": "test matrices values", "code": "public void useless_testMatricesValues2(){\n  RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{0.0 / 5.0,3.0 / 5.0,0.0 / 5.0},{-4.0 / 5.0,0.0 / 5.0,-3.0 / 5.0},{0.0 / 5.0,4.0 / 5.0,0.0 / 5.0},{-3.0 / 5.0,0.0 / 5.0,4.0 / 5.0}});\n  RealMatrix sRef=MatrixUtils.createRealMatrix(new double[][]{{4.0,0.0,0.0},{0.0,3.0,0.0},{0.0,0.0,2.0}});\n  RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{80.0 / 125.0,-60.0 / 125.0,75.0 / 125.0},{24.0 / 125.0,107.0 / 125.0,60.0 / 125.0},{-93.0 / 125.0,-24.0 / 125.0,80.0 / 125.0}});\n  SingularValueDecomposition svd=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare));\n  RealMatrix u=svd.getU();\n  Assert.assertEquals(0,u.subtract(uRef).getNorm(),normTolerance);\n  RealMatrix s=svd.getS();\n  Assert.assertEquals(0,s.subtract(sRef).getNorm(),normTolerance);\n  RealMatrix v=svd.getV();\n  Assert.assertEquals(0,v.subtract(vRef).getNorm(),normTolerance);\n  Assert.assertTrue(u == svd.getU());\n  Assert.assertTrue(s == svd.getS());\n  Assert.assertTrue(v == svd.getV());\n}\n"}
{"nl": "Build the rows per page panel - where you can set the range of row count into listbox", "code": "private void buildRowsPerPagePanel(){\n  rowsPerPagePanel.setInitialClasses(TableCssName.ROWS_PER_PAGE_PANEL);\n  rowsPerPagePanel.setGrid(\"s12 m4 l3\");\n  rowsPerPagePanel.add(listRowsPerPage);\n  rowsPerPagePanel.add(rowsPerPageLabel);\n  add(rowsPerPagePanel);\n}\n"}
{"nl": "It closes the output stream", "code": "public final void closeFallbackOutputStream() throws DataFallbackException {\n  if (output != null) {\n    if (LOG.isDebugEnabled())     LOG.debug(\"Closing the file writer for the file \" + dataFile.getName());\n    try {\n      output.close();\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n finally {\n      output=null;\n    }\n  }\n}\n"}
{"nl": "Make a PUT call with params", "code": "public Call put(String url,Map<String,String> params,Callback callback){\n  Request request=new Builder().url(url).put(bodyFromMap(params)).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n"}
{"nl": "Creates a <code>TransferTagImpl</code> object for the given parameters", "code": "public static TransferTagImpl createTransferTag(final TagWithAlarms tagWithAlarms,boolean aliveTag){\n  Tag tag=tagWithAlarms.getTag();\n  TransferTagImpl transferTag=null;\n  if (tag != null) {\n    transferTag=new TransferTagImpl(tag.getId(),tag.getValue(),tag.getValueDescription(),(DataTagQualityImpl)tag.getDataTagQuality(),getTagMode(tag),tag.getTimestamp(),tag instanceof DataTag ? ((DataTag)tag).getDaqTimestamp() : null,tag.getCacheTimestamp(),tag.getDescription(),tag.getName(),tag.getTopic());\n    String dataType=isKnownClass(tag.getDataType()) ? getType(tag.getDataType()).getName() : tag.getDataType();\n    transferTag.setValueClassName(dataType);\n    addAlarmValues(transferTag,tagWithAlarms.getAlarms());\n    transferTag.setSimulated(tag.isSimulated());\n    transferTag.setUnit(tag.getUnit());\n    transferTag.addEquipmentIds(tag.getEquipmentIds());\n    transferTag.addSubEquipmentIds(tag.getSubEquipmentIds());\n    transferTag.addProcessIds(tag.getProcessIds());\n    if (tag.getMetadata() != null) {\n      transferTag.setMetadata(tag.getMetadata().getMetadata());\n    }\n    if (tag instanceof RuleTag) {\n      transferTag.defineRuleExpression(((RuleTag)tag).getRuleExpression());\n    }\n else     if (tag instanceof ControlTag) {\n      transferTag.setControlTagFlag(true);\n      transferTag.setAliveTagFlag(aliveTag);\n    }\n  }\n  return transferTag;\n}\n"}
{"nl": "Convert pixels to DP", "code": "public static int pixelToDp(Context c,int px){\n  return (int)(px / c.getResources().getDisplayMetrics().density);\n}\n"}
{"nl": "Removes the contents of the fallback log file by deleting the file and creating it again and it also updates the counter stored in the counterfile", "code": "public final void clearFileContents() throws DataFallbackException {\n  if (!dataFile.delete()) {\n    LOG.error(\"clearFileContents() - The original file could not be deleted\");\n    throw new DataFallbackException(\"The file \" + dataFile.getAbsolutePath() + \" could not be deleted\");\n  }\n else {\n    LOG.info(\"clearFileContents() - The \" + dataFile.getAbsolutePath() + \" has been deleted\");\n    try {\n      if (dataFile.createNewFile()) {\n        if (LOG.isDebugEnabled())         LOG.debug(\"clearFileContents() - The \" + dataFile.getAbsolutePath() + \" has been created\");\n      }\n    }\n catch (    IOException e) {\n      LOG.error(\"clearFileContents() : Error while creating the fallback file \" + e.getMessage());\n    }\n    initializeCounterFile();\n  }\n}\n"}
{"nl": "Encode sld to a string", "code": "public String encodeSLD(StyledLayerDescriptor sld){\n  StringWriter out=new StringWriter();\n  if (sld != null) {\n    try {\n      Ysld.encode(sld,out);\n    }\n catch (    IOException e) {\n      ConsoleManager.getInstance().exception(this,e);\n    }\n  }\n  return out.toString();\n}\n"}
{"nl": "recover the data from the file", "code": "public static void recover(File file){\n  Connection c=null;\n  ResultSet r1=null;\n  Statement stat=null;\n  try {\n    ZipInputStream zip=new ZipInputStream(new FileInputStream(file));\n    zip.getNextEntry();\n    BufferedReader in=new BufferedReader(new InputStreamReader(zip));\n    c=getConnection();\n    DatabaseMetaData m1=c.getMetaData();\n    r1=m1.getTables(null,null,null,new String[]{\"TABLE\"});\n    while (r1.next()) {\n      try {\n        stat=c.createStatement();\n        stat.execute(\"delete from \" + r1.getString(\"TABLE_NAME\"));\n        stat.close();\n        stat=null;\n      }\n catch (      Exception e) {\n        log.error(\"ignore this exception\",e);\n      }\n    }\n    String line=in.readLine();\n    while (line != null) {\n      _recover(line,c);\n      line=in.readLine();\n    }\n    zip.closeEntry();\n    in.close();\n  }\n catch (  Exception e) {\n    log.error(e.getMessage(),e);\n  }\n finally {\n    close(r1,stat,c);\n  }\n}\n"}
{"nl": "Require authentication or not", "code": "@Override protected boolean requiresAuthentication(HttpServletRequest request,HttpServletResponse response){\n  return true;\n}\n"}
{"nl": "Create an <code>unsigned int</code>", "code": "public static UInteger valueOf(String value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(Long.parseLong(value)));\n}\n"}
{"nl": "Converts this object to a string", "code": "public String toString(){\n  return \"MbrolaVoice\";\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set colorMismatchesVsConsensus=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().getAlignmentPanel().setColorMismatchesVsConsensus(value);\n  ProgramProperties.put(\"ColorMismatches\",value);\n  viewer.repaint();\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected void subFormat(StringBuffer buf,char ch,int count,int beginOffset,FieldPosition pos,Calendar cal){\nswitch (ch) {\ncase 'G':\n    zeroPaddingNumber(this.numberFormat,buf,cal.get(0),1,9);\n  break;\ncase 'l':\nbuf.append(((ChineseDateFormatSymbols)getSymbols()).getLeapMonth(cal.get(22)));\nbreak;\ndefault :\nsuper.subFormat(buf,ch,count,beginOffset,pos,cal);\n}\n}\n"}
{"nl": "Computes the sum of two Zmats", "code": "public static Zmat o(Zmat A,Zmat B) throws JampackException {\n  if (A.nrow != B.nrow || A.ncol != B.ncol) {\n    throw new JampackException(\"Matrices not conformable for addition\");\n  }\n  Zmat C=new Zmat(A.nr,A.nc);\n  for (int i=0; i < A.nrow; i++)   for (int j=0; j < A.ncol; j++) {\n    C.re[i][j]=A.re[i][j] + B.re[i][j];\n    C.im[i][j]=A.im[i][j] + B.im[i][j];\n  }\n  return C;\n}\n"}
{"nl": "all use default class, simply Tinker install method", "code": "public static void sampleInstallTinker(ApplicationLike appLike){\n  if (isInstalled) {\n    TinkerLog.w(TAG,\"install tinker, but has installed, ignore\");\n    return;\n  }\n  TinkerInstaller.install(appLike);\n  isInstalled=true;\n}\n"}
{"nl": "Implements the abstract methods of AbstractDynamicMBean", "code": "@Override protected void __setConfig(Object config){\n  m_containerConfig=(ContainerConfig)config;\n}\n"}
{"nl": "(Re)Construct an object from the given bytes", "code": "protected LocalResourceStatus(byte[] bytes) throws SVNException {\n  super();\n  if (bytes.length < 4) {\n    return;\n  }\n  StatusFromBytesStream in=new StatusFromBytesStream(bytes);\n  initFromBytes(in);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"select=none;\");\n}\n"}
{"nl": "Set code", "code": "protected AuthConfirmQuery code(String value){\n  return unsafeParam(\"code\",value);\n}\n"}
{"nl": "Specify the text size for the description in SP", "code": "public TapTarget descriptionTextSize(int sp){\n  if (sp < 0)   throw new IllegalArgumentException(\"Given negative text size\");\n  this.descriptionTextSize=sp;\n  return this;\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] bytes,int offset,int size){\n  totalBytes+=size;\n  totalWrites++;\n  if (firstSound) {\n    timer.stop(\"AudioFirstSound\");\n    firstSound=false;\n    if (TRACE) {\n      timer.show(\"Null Trace\");\n    }\n  }\n  if (false && TRACE) {\n    System.out.println(\"NullAudio: write \" + size + \" bytes.\");\n  }\n  return true;\n}\n"}
{"nl": "Siege Npcs of different SiegeRaces are always hostile", "code": "@Override public boolean isEnemyFrom(Creature creature){\n  if (creature instanceof SiegeNpc && this.getSiegeRace() != ((SiegeNpc)creature).getSiegeRace()) {\n    return true;\n  }\n else {\n    return super.isEnemyFrom(creature);\n  }\n}\n"}
{"nl": "Bans ip (or mask)", "code": "public static boolean banIp(String ip,Timestamp expireTime){\n  if (ip.equals(\"127.0.0.1\")) {\n    return false;\n  }\n  BannedIP ipBan=new BannedIP();\n  ipBan.setMask(ip);\n  ipBan.setTimeEnd(expireTime);\n  banList.add(ipBan);\n  try {\n    getDAO().insert(ipBan);\n    return true;\n  }\n catch (  Exception e) {\n    log.warn(\"Ip \" + ip + \" is already banned.\");\n    return false;\n  }\n}\n"}
{"nl": "Sets an attribute store", "code": "public UrlSpaceConfigurer leaderSelector(LeaderSelectorConfig leaderSelectorConfig){\n  validate();\n  urlSpaceFactoryBean.leaderSelector(leaderSelectorConfig);\n  return this;\n}\n"}
{"nl": "DataAcessException Handler, returns an error response to the client", "code": "@ExceptionHandler(DataAccessException.class) @ResponseStatus(value=HttpStatus.INTERNAL_SERVER_ERROR) public @ResponseBody ErrorResponse resolveDataAccessException(DataAccessException e) throws IOException {\n  if (logger.isLoggable(Level.WARNING))   logger.log(Level.WARNING,\"received DataAccessException exception\",e);\n  return new ErrorResponse(new ExceptionMessage(e));\n}\n"}
{"nl": "goto the last object Not implemented", "code": "public boolean gotoLast(){\n  currentIterator=null;\n  currentId=null;\n  return isCurrentSet();\n}\n"}
{"nl": "Accessor for control down check", "code": "public boolean isControlDown(){\n  return mIsControlDown;\n}\n"}
{"nl": "Make a PUT call", "code": "public Call put(String url,Callback callback){\n  return put(url,null,callback);\n}\n"}
{"nl": "Post will be available to friends only", "code": "public WallPostQuery friendsOnly(Boolean value){\n  return unsafeParam(\"friends_only\",value);\n}\n"}
{"nl": "write a read block to the file", "code": "public void writeReadBlock(IReadBlockWithLocation readBlock) throws IOException {\n  numberOfReads++;\n  numberOfMatches+=readBlock.getNumberOfMatches();\nswitch (textStoragePolicy) {\ncase Embed:\n    ReadBlockRMA2.write(rma2Formatter,readBlock,fileWriter,tmpWriter);\n  break;\ncase InRMAZ:\nReadBlockRMA2.write(rma2Formatter,readBlock,dumpWriter,fileWriter);\nbreak;\ncase Reference:\nReadBlockRMA2.write(rma2Formatter,readBlock,null,fileWriter);\nbreak;\ndefault :\nthrow new IOException(\"Unknown textStoragePolicy: \" + textStoragePolicy);\n}\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(JensenShannonDivergence.SqrtJensenShannonDivergence);\n}\n"}
{"nl": "Add flag to Intent", "code": "public void addFlag(int flag){\n  mIntent.addFlags(flag);\n}\n"}
{"nl": "Call back before ICEREST stop", "code": "public void beforeStop(){\n}\n"}
{"nl": "Amplification System", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_EXCEED_SUCCEED(DescriptionId nameId){\n  return new SM_SYSTEM_MESSAGE(1402657,new Object[]{nameId});\n}\n"}
{"nl": "Writes the Cart to the given DataOut in Wagon Format", "code": "private void toWagonFormat(FloatLeafNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {\n  String s=\"((\" + node.getStDeviation() + \" \"+ node.getMean()+ \"))\";\n  if (out != null) {\n    writeStringToOutput(s,out);\n  }\n else {\n  }\n  if (pw != null) {\n    pw.println(s);\n  }\n}\n"}
{"nl": "ITEM TO MATERIAL QUERIES", "code": "public ItemToMaterialCursor queryItemsForMaterial(long mat_item_id){\n  return mHelper.queryItemsForMaterial(mat_item_id);\n}\n"}
{"nl": "Type a character that is neither an alphabetic character and not in list of known characters (see list defined in this class)", "code": "private void typeUnknown(char c){\n  int converted=KeyEvent.getExtendedKeyCodeForChar(c);\n  controller.keyPress(converted);\n  controller.keyRelease(converted);\n}\n"}
{"nl": "Set offset", "code": "public FaveGetLinksQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n"}
{"nl": "draw the legend", "code": "protected void draw(Graphics2D gc,Dimension size){\n  if (!chartViewer.isTranspose())   drawLegend(gc,size);\n else   drawLegendTransposed(gc,size);\n}\n"}
{"nl": "Create indices for new experiment", "code": "@Override public void createIndicesForNewExperiment(NewExperiment newExperiment){\n  updateExperimentLabelIndex(newExperiment.getID(),newExperiment.getApplicationName(),newExperiment.getLabel(),newExperiment.getStartTime(),newExperiment.getEndTime(),State.DRAFT);\n  try {\n    updateStateIndex(null,newExperiment.getID(),ExperimentsKeyspace.ExperimentStateIndexKey.NOT_DELETED);\n  }\n catch (  ConnectionException e) {\n    removeExperimentLabelIndex(newExperiment.getApplicationName(),newExperiment.getLabel());\n    throw new RepositoryException(\"Could not update indices for experiment \\\"\" + newExperiment + \"\\\"\",e);\n  }\n}\n"}
{"nl": "Collapse adjacent whitespace characters into a single token", "code": "private void addWhitespace(){\n  int oldPos=pos - 1;\n  while (pos < buffer.length) {\nswitch (buffer[pos]) {\ncase ' ':\ncase '\\t':\ncase '\\r':\n      pos++;\n    break;\ndefault :\n  addToken(TokenKind.WHITESPACE,oldPos,pos,bufferSlice(oldPos,pos));\nreturn;\n}\n}\naddToken(TokenKind.WHITESPACE,oldPos,pos,bufferSlice(oldPos,pos));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureSetCounterQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.setCounter\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n"}
{"nl": "Required for Externalizable", "code": "public UpdateLeaseSpaceOperationResult(){\n}\n"}
{"nl": "Executes the given decision table and creates the outcome results", "code": "@Override public RuleEngineExecutionResult execute(DmnDefinition decisionDefinition,Map<String,Object> executionVariables,Map<String,Method> customExpressionFunctions,Map<Class<?>,PropertyHandler> propertyHandlers){\n  if (decisionDefinition == null) {\n    throw new IllegalArgumentException(\"no decision provided\");\n  }\n  if (decisionDefinition.getCurrentDecisionTable() == null) {\n    throw new IllegalArgumentException(\"no decision table present in definition\");\n  }\n  MvelExecutionContext executionContext=MvelExecutionContextBuilder.build(decisionDefinition,executionVariables,customExpressionFunctions,propertyHandlers);\n  Map<String,Object> resultVariables=evaluateDecisionTable(decisionDefinition.getCurrentDecisionTable(),executionContext);\n  executionContext.getAuditContainer().stopAudit(resultVariables);\n  RuleEngineExecutionResult executionResult=new RuleEngineExecutionResult(resultVariables,executionContext.getAuditContainer());\n  return executionResult;\n}\n"}
{"nl": "is this a guideline", "code": "public boolean isGuideline(){\n  return mConstraintWidget instanceof Guideline;\n}\n"}
{"nl": "Generates a key, taking into account the method and its params", "code": "@Override public Object generate(Object target,Method method,Object... params){\n  return generateKey(method,params);\n}\n"}
{"nl": "Impose target intonation contour on given vocalization using HNM technology", "code": "@Override public AudioInputStream synthesizeUsingImposedF0(int sourceIndex,int targetIndex,AudioFileFormat aft) throws SynthesisException {\n  if (!f0ContourImposeSupport) {\n    throw new SynthesisException(\"Mary configuration of this voice doesn't support intonation contour imposition\");\n  }\n  int numberOfUnits=vHNMFeaturesReader.getNumberOfUnits();\n  if (sourceIndex >= numberOfUnits || targetIndex >= numberOfUnits) {\n    throw new IllegalArgumentException(\"sourceIndex(\" + sourceIndex + \") and targetIndex(\"+ targetIndex+ \") are should be less than number of available units (\"+ numberOfUnits+ \")\");\n  }\n  double[] sourceF0=this.vIntonationReader.getContour(sourceIndex);\n  double[] targetF0coeffs=this.vIntonationReader.getIntonationCoeffs(targetIndex);\n  double[] sourceF0coeffs=this.vIntonationReader.getIntonationCoeffs(sourceIndex);\n  if (targetF0coeffs == null || sourceF0coeffs == null) {\n    return reSynthesize(sourceIndex,aft);\n  }\n  if (targetF0coeffs.length == 0 || sourceF0coeffs.length == 0) {\n    return reSynthesize(sourceIndex,aft);\n  }\n  double[] targetF0=Polynomial.generatePolynomialValues(targetF0coeffs,sourceF0.length,0,1);\n  sourceF0=Polynomial.generatePolynomialValues(sourceF0coeffs,sourceF0.length,0,1);\n  assert targetF0.length == sourceF0.length;\n  float[] tScalesArray={1.0f};\n  float[] tScalesTimes={1.0f};\n  float[] pScalesArray=new float[targetF0.length];\n  float[] pScalesTimes=new float[targetF0.length];\n  double skipSizeInSeconds=this.vIntonationReader.getSkipSizeInSeconds();\n  double windowSizeInSeconds=this.vIntonationReader.getWindowSizeInSeconds();\n  for (int i=0; i < targetF0.length; i++) {\n    pScalesArray[i]=(float)(targetF0[i] / sourceF0[i]);\n    pScalesTimes[i]=(float)(i * skipSizeInSeconds + 0.5 * windowSizeInSeconds);\n  }\n  return synthesizeUsingF0Modification(sourceIndex,pScalesArray,pScalesTimes,tScalesArray,tScalesTimes,aft);\n}\n"}
{"nl": "Check if the given unit index is a sentence end", "code": "private boolean isSentenceEnd(int index){\n  FeatureVector fv=features.getFeatureVector(index);\n  return fv.getByteFeature(fiSentenceEnd) == 0 && fv.getByteFeature(fiWordEnd) == 0 && (!isHalfphone || fv.getByteFeature(fiLR) == fvLR_R);\n}\n"}
{"nl": "called after the reading has finished", "code": "public void registerKey(SelectionKey key){\n  if (key == null)   return;\n  _keysToEnable.add(key);\n  _keysToEnableCounter.incrementAndGet();\n  getSelector().wakeup();\n}\n"}
{"nl": "This method will be used to initialize", "code": "public void initialize() throws CarbonSortKeyAndGroupByException {\n  this.recordHolderList=new Object[parameters.getSortBufferSize()][];\n  deleteSortLocationIfExists();\n  if (!new File(parameters.getTempFileLocation()).mkdirs()) {\n    LOGGER.info(\"Sort Temp Location Already Exists\");\n  }\n  this.dataSorterAndWriterExecutorService=Executors.newFixedThreadPool(parameters.getNumberOfCores());\n  semaphore=new Semaphore(parameters.getNumberOfCores());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetCitiesQuery(VkApiClient client,int countryId){\n  super(client,\"database.getCities\",GetCitiesResponse.class);\n  countryId(countryId);\n}\n"}
{"nl": "Verifies that author mode is loaded (author loader is hidden) and then verifies if given condition is met in medium timeout (15 seconds)", "code": "public void verifyPostAjax(ExpectedCondition condition){\n  authorLoader.verifyIsHidden();\n  verify(condition,Timeouts.MEDIUM);\n}\n"}
{"nl": "Test to validate fix for ACT-1939: HistoryService loads invalid task local variables for completed task", "code": "@Deployment public void testVariableUpdateOrderHistoricTaskInstance() throws Exception {\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"historicTask\");\n  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n  assertNotNull(task);\n  for (int i=0; i < 10; i++) {\n    taskService.setVariableLocal(task.getId(),\"taskVar\",i);\n    runtimeService.setVariable(task.getExecutionId(),\"procVar\",i);\n  }\n  taskService.complete(task.getId());\n  HistoricTaskInstance taskInstance=historyService.createHistoricTaskInstanceQuery().taskId(task.getId()).includeProcessVariables().singleResult();\n  Object varValue=taskInstance.getProcessVariables().get(\"procVar\");\n  assertEquals(9,varValue);\n  taskInstance=historyService.createHistoricTaskInstanceQuery().taskId(task.getId()).includeTaskLocalVariables().singleResult();\n  varValue=taskInstance.getTaskLocalVariables().get(\"taskVar\");\n  assertEquals(9,varValue);\n}\n"}
{"nl": "Adds a list of methods as sinks", "code": "public void addSink(Set<SourceSinkDefinition> sinks){\n  for (  SourceSinkDefinition am : sinks)   this.sinkMethods.put(am.getMethod().getSignature(),am);\n}\n"}
{"nl": "Restore current item index from savedInstance", "code": "private void restoreCurrentItem(){\n  Bundle restoredBundle=savedInstanceState;\n  if (restoredBundle != null) {\n    if (restoredBundle.containsKey(CURRENT_SELECTED_ITEM_BUNDLE_KEY))     currentSelectedItem=restoredBundle.getInt(CURRENT_SELECTED_ITEM_BUNDLE_KEY,0);\n  }\n}\n"}
{"nl": "Set period", "code": "public WidgetsGetPagesQuery period(String value){\n  return unsafeParam(\"period\",value);\n}\n"}
{"nl": "Set filter", "code": "public WallGetQueryWithExtended filter(WallGetFilter value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "Checks for any cycles in the dependencies", "code": "protected String checkCycles(){\n  myErrorMessage=null;\n  myHorizontalCycle=null;\n  myVerticalCycle=null;\n  if (checkCycle(myCurrentTopMatch,true) || checkCycle(myCurrentBottomMatch,true)) {\n  }\n  if (checkCycle(myCurrentLeftMatch,false) || checkCycle(myCurrentRightMatch,false)) {\n  }\n  return myErrorMessage;\n}\n"}
{"nl": "Build the number page panel - where user can change the page number into a listbox", "code": "private void buildNumPagePanel(){\n  numPagePanel.setInitialClasses(TableCssName.NUM_PAGE_PANEL);\n  numPagePanel.setGrid(\"s12 m4 l3\");\n  numPagePanel.setOffset(\"l3\");\n  numPagePanel.add(listPages);\n  numPagePanel.add(pageLabel);\n  add(numPagePanel);\n}\n"}
{"nl": "****************************** ITEM QUERIES", "code": "public ItemCursor queryItems(){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_ITEMS;\n  qh.Columns=null;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=S.COLUMN_ITEMS_ID;\n  qh.Limit=null;\n  return new ItemCursor(wrapHelper(qh));\n}\n"}
{"nl": "call back from the getMapAsync function", "code": "@Override public void onMapReady(GoogleMap googleMap){\n  this.annotationViewWrapper=(AnnotationViewWrapper)this.getView().findViewById(R.id.annotationViewWrapper);\n  this.googleMap=googleMap;\n  this.googleMap.setOnCameraMoveListener(this);\n  this.googleMap.setOnCameraMoveStartedListener(this);\n  this.googleMap.setOnMapLoadedCallback(this);\n  this.setMapRenderer(this.mapRenderer);\n}\n"}
{"nl": "close the array", "code": "@Override public void close(){\n  try {\n    raf.close();\n    System.err.println(\"Closing file: \" + file.getName() + \" (\"+ pages+ \"/\"+ data.length+ \" pages)\");\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "Constructs a new packet that will send these players", "code": "public SM_PLAYER_SEARCH(List<Player> players,int region){\n  this.players=new ArrayList<Player>(players);\n  this.region=region;\n}\n"}
{"nl": "recursively compute the embedding", "code": "private static int computeEmbeddingRec(PhyloTreeView view,Node v,Edge e,double hDistToRoot,int leafNumber,boolean toScale){\n  if (v.getDegree() == 1 && e != null) {\n    view.setLocation(v,toScale ? hDistToRoot : 0,++leafNumber);\n  }\n else {\n    Point2D first=null;\n    Point2D last=null;\n    double minX=Double.MAX_VALUE;\n    for (Edge f=v.getFirstAdjacentEdge(); f != null; f=v.getNextAdjacentEdge(f)) {\n      if (f != e) {\n        Node w=f.getOpposite(v);\n        leafNumber=computeEmbeddingRec(view,w,f,hDistToRoot + view.getPhyloTree().getWeight(f),leafNumber,toScale);\n        if (first == null)         first=view.getLocation(w);\n        last=view.getLocation(w);\n        if (last.getX() < minX)         minX=last.getX();\n      }\n    }\n    if (first != null) {\n      double x;\n      if (toScale)       x=hDistToRoot;\n else       x=minX - 1;\n      double y=0.5 * (last.getY() + first.getY());\n      view.setLocation(v,x,y);\n      for (Edge f=v.getFirstAdjacentEdge(); f != null; f=v.getNextAdjacentEdge(f)) {\n        if (f != e) {\n          Node w=f.getOpposite(v);\n          java.util.List<Point2D> list=new LinkedList<>();\n          Point2D p=new Point2D.Double(x,view.getLocation(w).getY());\n          list.add(p);\n          view.setInternalPoints(f,list);\n        }\n      }\n    }\n  }\n  return leafNumber;\n}\n"}
{"nl": "Sort order", "code": "public FriendsGetOnlineQueryWithMobile order(FriendsGetOnlineOrder value){\n  return unsafeParam(\"order\",value);\n}\n"}
{"nl": "Build interceptors of Resource", "code": "public Interceptor[] buildResourceInterceptors(Class<? extends Resource> resourceClass){\n  Interceptors before=resourceClass.getAnnotation(Interceptors.class);\n  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;\n}\n"}
{"nl": "copy only first nCols of matrix", "code": "public static double[][] truncateRows(double[][] matrix,int nCols){\n  final int nRows=matrix.length;\n  final double[][] result=new double[nRows][nCols];\n  for (int row=0; row < nRows; row++) {\n    System.arraycopy(matrix[row],0,result[row],0,nCols);\n  }\n  return result;\n}\n"}
{"nl": "****************************** LOCATION QUERIES", "code": "public LocationCursor queryLocations(){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_LOCATIONS;\n  qh.Columns=null;\n  qh.Selection=\"_id<100\";\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new LocationCursor(wrapHelper(qh));\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.210212602629,0.554298076728,0.831211613487,1.14547622606,1.61030798696,20.5150056524,15.0862724694,12.8325019940,11.0704976935,9.23635689978};\n}\n"}
{"nl": "Clicks an IntelliJ/Studio popup menu item with the given label prefix", "code": "public static void clickPopupMenuItem(@NotNull String labelPrefix,@NotNull Component component,@NotNull Robot robot){\n  clickPopupMenuItemMatching(new PrefixMatcher(labelPrefix),component,robot);\n}\n"}
{"nl": "Index a document via CSV that's larger than the 512 KB chunk size", "code": "public void testIndexCSVBigHTTP() throws Exception {\n  createIndex();\n  send(\"registerFields\",\"{fields: {id: {type: atom, store: true, sort: true}, id2: {type: atom, store: true, sort: true}, body: {type: text, store: true, highlight: true}}}\");\n  send(\"startIndex\");\n  StringBuilder b=new StringBuilder();\n  int size=atLeast(512);\n  for (int i=0; i < 256 * size; i++) {\n    b.append(\"wordy \");\n  }\n  b.append(\" document\");\n  String body=b.toString();\n  assertTrue(body.length() > 512 * 1024);\n  Map<String,Object> params=new HashMap<>();\n  params.put(\"indexName\",server.curIndexName);\n  JSONObject result=server.send(\"bulkCSVAddDocument2\",params,new StringReader(\"id,id2,body\\n0,1,\" + body + \"\\n\"));\n  assertEquals(1,getInt(result,\"indexedDocumentCount\"));\n  refresh();\n  assertEquals(1,getInt(send(\"search\",\"{queryText: document}\"),\"totalHits\"));\n  send(\"stopIndex\");\n  send(\"deleteIndex\");\n}\n"}
{"nl": "draw the x axis", "code": "protected void drawXAxis(Graphics2D gc){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetHistoryAttachmentsQuery(VkApiClient client,Actor actor,int peerId){\n  super(client,\"messages.getHistoryAttachments\",GetHistoryAttachmentsResponse.class);\n  accessToken(actor.getAccessToken());\n  peerId(peerId);\n}\n"}
{"nl": "Write the ArrayList<String to a tmp file in the local filesystem with the given fileName", "code": "public static String writeToTmpFile(List<String> list,String fileName,String suffix) throws IOException {\n  File file=File.createTempFile(fileName,suffix);\n  file.deleteOnExit();\n  logger.info(\"localFS: file = \" + file);\n  FileWriter fw=new FileWriter(file);\n  try (BufferedWriter bw=new BufferedWriter(fw)){\n    for (    String s : list) {\n      bw.write(s);\n      bw.newLine();\n    }\n  }\n   return file.getPath();\n}\n"}
{"nl": "Route a server from remote", "code": "void routeServer(){\n  Map<String,Object> params=Maps.newHashMap();\n  params.put(\"appName\",client.getAppName());\n  params.put(\"clientPid\",SysUtil.pid());\n  String[] serverList=client.getServers().split(\",\");\n  for (  String server : serverList) {\n    try {\n      ServerRouteResp resp=doGet(server,ClientUris.SERVER_ROUTE,null,params,ServerRouteResp.class);\n      if (resp == null) {\n        log.warn(\"server({}) route is null\",server);\n        continue;\n      }\n      String routedServer=resp.getServer();\n      String clientId=resp.getClientId();\n      params.put(\"clientId\",clientId);\n      params.put(\"appKey\",client.getAppKey());\n      Boolean registerResp=doGet(routedServer,ClientUris.REGISTER,null,params,Boolean.class);\n      if (registerResp == Boolean.FALSE) {\n        log.warn(\"failed to register server({})\",routedServer);\n        continue;\n      }\n      currentServer=routedServer;\n      headers.put(Constants.CLIENT_ID_HEADER,clientId);\n      headers.put(Constants.APP_KEY_HEADER,client.getAppKey());\n      headers.put(Constants.CLIENT_VERSION_HEADER,CLIENT_VERSION);\n      headers.put(Constants.PULLING_TIMEOUT_HEADER,String.valueOf(client.getPullingTimeout()));\n      log.info(\"route successfully, current server is {}\",currentServer);\n      return;\n    }\n catch (    HttpRequest.HttpRequestException e) {\n      log.warn(\"server({}) is unavailable, trying next server\",server);\n    }\n  }\n  throw new Server503Exception(\"all servers are unavailable: \" + Arrays.toString(serverList));\n}\n"}
{"nl": "Waits for all queued audio to be played", "code": "public boolean drain(){\n  return true;\n}\n"}
{"nl": "Creates a scalar predicate using the specified expected value", "code": "public RegexSpacePredicate(String expectedValue){\n  super(expectedValue,null);\n  if (expectedValue == null)   throw new IllegalArgumentException(\"Argument 'expectedValue' cannot be null.\");\n  init();\n}\n"}
{"nl": "Builds the property, using the specified proeprtyResolver to validate the property settings", "code": "public Property build(final PropertyResolver propertyResolver){\n  validate(propertyResolver);\n  if (propertyType == null && propertyTypeName != null) {\n    propertyType=TypeFactory.valueOf(propertyTypeName);\n  }\n else   if (propertyType == null) {\n    propertyType=TypeFactory.TYPE_OF_OBJECT;\n  }\n  if (getterMethod != null) {\n    getter=getterMethod.getName() + \"()\";\n  }\n  if (setterMethod != null) {\n    setter=setterMethod.getName() + \"(%s)\";\n  }\n  return new Property(name,getter,setter,propertyType,elementType);\n}\n"}
{"nl": "sync classification block to the summary", "code": "static public void syncClassificationBlock2Summary(int dataSetId,int totalDataSets,IClassificationBlock classificationBlock,DataTable table){\n  final Map<Integer,Integer[]> classId2count=new HashMap<>();\n  table.setClass2Counts(classificationBlock.getName(),classId2count);\n  for (  Integer classId : classificationBlock.getKeySet()) {\n    int sum=classificationBlock.getWeightedSum(classId);\n    if (sum > 0) {\n      if (classId2count.get(classId) == null)       classId2count.put(classId,new Integer[totalDataSets]);\n      Integer total=classId2count.get(classId)[dataSetId];\n      if (total != null)       classId2count.get(classId)[dataSetId]=total + sum;\n else       classId2count.get(classId)[dataSetId]=sum;\n    }\n  }\n  if (table.getAdditionalReads() > 0) {\n    if (classId2count.get(IdMapper.NOHITS_ID) == null)     classId2count.put(IdMapper.NOHITS_ID,new Integer[totalDataSets]);\n    Integer total=classId2count.get(IdMapper.NOHITS_ID)[dataSetId];\n    if (total != null)     classId2count.get(IdMapper.NOHITS_ID)[dataSetId]=total + (int)table.getAdditionalReads();\n else     classId2count.get(IdMapper.NOHITS_ID)[dataSetId]=(int)table.getAdditionalReads();\n  }\n}\n"}
{"nl": "Execute Tests", "code": "public static void test(FileSystem fs,DistributedTestCLI cli,List<JSONObject> pirDataElements) throws Exception {\n  if (cli.run(\"1:J\")) {\n    DistTestSuite.testJSONInputMR(fs,pirDataElements);\n  }\n  if (cli.run(\"1:JS\")) {\n    DistTestSuite.testJSONInputSpark(fs,pirDataElements);\n  }\n  if (cli.run(\"1:SS\")) {\n    DistTestSuite.testSparkStreaming(fs,pirDataElements);\n  }\n  if (cli.run(\"1:JSS\")) {\n    DistTestSuite.testJSONInputSparkStreaming(fs,pirDataElements);\n  }\n  if (cli.run(\"1:E\") || cli.run(\"1:ES\") || cli.run(\"1:ESS\")) {\n    Inputs.createESInput();\n    if (cli.run(\"1:E\")) {\n      DistTestSuite.testESInputMR(fs,pirDataElements);\n    }\n    if (cli.run(\"1:ES\")) {\n      DistTestSuite.testESInputSpark(fs,pirDataElements);\n    }\n    if (cli.run(\"1:ESS\")) {\n      DistTestSuite.testESInputSparkStreaming(fs,pirDataElements);\n    }\n  }\n}\n"}
{"nl": "Returns true if pitch can be changed at this moment", "code": "@Override public boolean canSetPitch(){\n  Log.d(SBMP_TAG,\"canSetPitch() 155\");\n  if (pmInterface == null) {\n    if (!ConnectPlayMediaService()) {\n      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);\n    }\n  }\n  if (pmInterface != null) {\n    try {\n      return pmInterface.canSetPitch(ServiceBackedMediaPlayer.this.sessionId);\n    }\n catch (    RemoteException e) {\n      e.printStackTrace();\n      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);\n    }\n  }\n  return false;\n}\n"}
{"nl": "Success result callback", "code": "@Override public void onContentLoaded(Uri uri,String contentType){\n  if (contentType.equals(ContentManager.Content.IMAGE.toString())) {\n    ImageLoader.getInstance().displayImage(uri.toString(),ivPicture);\n  }\n else {\n  }\n}\n"}
{"nl": "Changes contrast value by the value passed in as a parameter", "code": "public void changeContrast(float value){\n  this.contrast+=value;\n}\n"}
{"nl": "DTW using Mahalanobis distance (Variance computation from external module)", "code": "public DTW(double[][] signal,double[][] reference,double[] sigma2){\n  this.signal=signal;\n  this.reference=reference;\n  this.sigma2=sigma2;\n  this.distanceFunction=\"Mahalanobis\";\n  setCost(dpDistance());\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ProjectManager.getNumberOfProjects() > 1 || getDir().getViewers().size() > 1;\n}\n"}
{"nl": "Marks the indicated number of lines as removed in the fallback file", "code": "private void removeReadData(final int size){\n  if (!persistenceManager.getFallbackManager().removeReadData(size)) {\n    persistenceManager.getAlarmSender().fileNotReachable(ACTIVATED,persistenceManager.getFallbackManager().getFallbackFileController().getDataFile());\n    FALLBACK_LOG.error(\"commitFallbackCommandLogs() - CommandTags cannot be removed from the fallback log file\");\n  }\n else {\n    persistenceManager.getAlarmSender().fileNotReachable(DOWN,persistenceManager.getFallbackManager().getFallbackFileController().getDataFile());\n  }\n}\n"}
{"nl": "millisecondsToHours Get the hh:mm value from milliseconds", "code": "public static String millisecondsToHours(long millis){\n  return String.format(Locale.getDefault(),\"%02d:%02d\",TimeUnit.MILLISECONDS.toHours(millis),TimeUnit.MILLISECONDS.toMinutes(millis) % TimeUnit.HOURS.toMinutes(1));\n}\n"}
{"nl": "true if the entry packet has an array of fixed properties", "code": "@Override public boolean hasFixedPropertiesArray(){\n  return true;\n}\n"}
{"nl": "Shows default dialog with a message", "code": "public static void showProgressDialog(final Context context,final String message){\n  showProgressDialog(context,DEFAULT_TAG,message);\n}\n"}
{"nl": "Builds the path for the given abstraction that reached a sink", "code": "private void buildPathForAbstraction(final AbstractionAtSink abs){\n  SourceContextAndPath scap=new SourceContextAndPath(abs.getAbstraction().getAccessPath(),abs.getSinkStmt());\n  scap=scap.extendPath(abs.getAbstraction());\n  abs.getAbstraction().addPathElement(scap);\n  if (!checkForSource(abs.getAbstraction(),scap))   executor.execute(new SourceFindingTask(abs.getAbstraction()));\n}\n"}
{"nl": "download file from storage server", "code": "public byte[] download_file(String group_name,String remote_filename) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file(group_name,remote_filename,file_offset,download_bytes);\n}\n"}
{"nl": "zlib decompress 2 byte", "code": "public static byte[] decompressForZlib(byte[] bytesToDecompress){\n  byte[] returnValues=null;\n  Inflater inflater=new Inflater();\n  int numberOfBytesToDecompress=bytesToDecompress.length;\n  inflater.setInput(bytesToDecompress,0,numberOfBytesToDecompress);\n  int bufferSizeInBytes=numberOfBytesToDecompress;\n  int numberOfBytesDecompressedSoFar=0;\n  List<Byte> bytesDecompressedSoFar=new ArrayList<Byte>();\n  try {\n    while (inflater.needsInput() == false) {\n      byte[] bytesDecompressedBuffer=new byte[bufferSizeInBytes];\n      int numberOfBytesDecompressedThisTime=inflater.inflate(bytesDecompressedBuffer);\n      numberOfBytesDecompressedSoFar+=numberOfBytesDecompressedThisTime;\n      for (int b=0; b < numberOfBytesDecompressedThisTime; b++) {\n        bytesDecompressedSoFar.add(bytesDecompressedBuffer[b]);\n      }\n    }\n    returnValues=new byte[bytesDecompressedSoFar.size()];\n    for (int b=0; b < returnValues.length; b++) {\n      returnValues[b]=(byte)(bytesDecompressedSoFar.get(b));\n    }\n  }\n catch (  DataFormatException dfe) {\n    dfe.printStackTrace();\n  }\n  inflater.end();\n  return returnValues;\n}\n"}
{"nl": "Test dispatching behavior when an exception occurs in the listener", "code": "public void exceptionInListener() throws Exception {\n  TestExceptionActivitiEventListener listener=new TestExceptionActivitiEventListener(false);\n  TestActivitiEventListener secondListener=new TestActivitiEventListener();\n  dispatcher.addEventListener(listener);\n  dispatcher.addEventListener(secondListener);\n  ActivitiEventImpl event=new ActivitiEventImpl(ActivitiEventType.ENTITY_CREATED);\n  try {\n    dispatcher.dispatchEvent(event);\n    assertEquals(1,secondListener.getEventsReceived().size());\n  }\n catch (  Throwable t) {\n    fail(\"No exception expected\");\n  }\n  dispatcher.removeEventListener(listener);\n  dispatcher.removeEventListener(secondListener);\n  listener=new TestExceptionActivitiEventListener(true);\n  secondListener=new TestActivitiEventListener();\n  dispatcher.addEventListener(listener);\n  dispatcher.addEventListener(secondListener);\n  try {\n    dispatcher.dispatchEvent(event);\n    fail(\"Exception expected\");\n  }\n catch (  Throwable t) {\n    assertTrue(t instanceof ActivitiException);\n    assertTrue(t.getCause() instanceof RuntimeException);\n    assertEquals(\"Test exception\",t.getCause().getMessage());\n    assertEquals(0,secondListener.getEventsReceived().size());\n  }\n}\n"}
{"nl": "Parse an XML Configuration from a Document", "code": "public String[] parseConfiguration(Document document){\n  NodeList nList=document.getElementsByTagName(\"Configuration\");\n  if (nList.getLength() == 0) {\n    nList=document.getElementsByTagName(\"configuration\");\n  }\n  if (nList.getLength() == 0) {\n    nList=document.getElementsByTagName(\"Overrides\");\n  }\n  if (nList.getLength() == 0) {\n    nList=document.getElementsByTagName(\"overrides\");\n  }\n  List configList=new ArrayList();\n  for (int i=0; i < nList.getLength(); i++) {\n    Element element=(Element)nList.item(i);\n    configList.addAll(parseConfiguration(element));\n  }\n  return ((String[])configList.toArray(new String[configList.size()]));\n}\n"}
{"nl": "copy file src to file destination", "code": "public static int copy(File src,File dest) throws IOException {\n  return copy(new FileInputStream(src),new FileOutputStream(dest),true);\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void i(Class<?> clazz,String msg){\n  if (isDebug) {\n    Log.i(clazz.getSimpleName(),msg);\n  }\n}\n"}
{"nl": "Sets what patterns to exclude", "code": "public static String[] exclude(String... includes){\n  return includes;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  final ImportBlastDialog dialog=new ImportBlastDialog(getViewer().getFrame(),getDir(),\"Import BLAST and READs files - MEGAN\");\n  final String command=dialog.showAndGetCommand();\n  if (command != null)   execute(command);\n}\n"}
{"nl": "Check whether npc located near initial spawn location", "code": "public boolean isAtSpawnLocation(){\n  return getDistanceToSpawnLocation() < 3;\n}\n"}
{"nl": "if the operation not requires to accumulate set null, otherwise initialize the results for the readByIds operation", "code": "public void initResultsEntryPackets(){\n  _results=!accumulate() ? null : new IEntryPacket[((AbstractIdsQueryPacket)_template).getIds().length];\n}\n"}
{"nl": "reads the aux blocks", "code": "public Map<String,byte[]> readAuxBlocks() throws IOException {\n  final Map<String,byte[]> label2data=new HashMap<>();\n  readerWriter.seek(footerSectionRMA6.getStartAuxDataSection());\n  final int count=readerWriter.readInt();\n  for (int i=0; i < count && readerWriter.getPosition() < footerSectionRMA6.getEndAuxDataSection(); i++) {\n    String name=readerWriter.readString();\n    int length=readerWriter.readInt();\n    byte[] bytes=new byte[length];\n    readerWriter.read(bytes,0,length);\n    label2data.put(name,bytes);\n  }\n  return label2data;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static BigDecimal toBigDecimalTrunc(BigDecimal universalTime,int timeScale){\n  TimeScaleData data=getTimeScaleData(timeScale);\n  BigDecimal units=new BigDecimal(data.units);\n  BigDecimal epochOffset=new BigDecimal(data.epochOffset);\n  return universalTime.divide(units,1).subtract(epochOffset);\n}\n"}
{"nl": "init database system for GameDB", "code": "private void initCreateGameDBSchema() throws SQLException {\n  ResultSet rs;\n  rs=stmt.executeQuery(\"show tables from test like'tictactoc'\");\n  if (false == rs.next()) {\n    String sql=\"CREATE TABLE tictactoc \" + \"(id varchar(10) not NULL, \" + \" win integer(1), \"+ \" defeat integer(1), \"+ \" playtimes integer(1), \"+ \" PRIMARY KEY ( id ),\"+ \"FOREIGN KEY (id) REFERENCES userinformation (id)) Engine=Innodb default charset = utf8\";\n    stmt.executeUpdate(sql);\n  }\n  rs=stmt.executeQuery(\"show tables from test like'catchme'\");\n  if (false == rs.next()) {\n    String sql=\"CREATE TABLE catchme \" + \"(id varchar(10) not NULL, \" + \" win integer(1), \"+ \" defeat integer(1), \"+ \" playtimes integer(1), \"+ \" PRIMARY KEY ( id ),\"+ \"FOREIGN KEY (id) REFERENCES userinformation (id)) Engine=Innodb default charset = utf8\";\n    stmt.executeUpdate(sql);\n  }\n  rs=stmt.executeQuery(\"show tables from test like'meteor'\");\n  if (false == rs.next()) {\n    String sql=\"CREATE TABLE meteor \" + \"(id varchar(10) not NULL, \" + \" win integer(1), \"+ \" defeat integer(1), \"+ \" playtimes integer(1), \"+ \" PRIMARY KEY ( id ),\"+ \"FOREIGN KEY (id) REFERENCES userinformation (id)) Engine=Innodb default charset = utf8\";\n    stmt.executeUpdate(sql);\n  }\n  rs=stmt.executeQuery(\"show tables from test like'pangpang'\");\n  if (false == rs.next()) {\n    String sql=\"CREATE TABLE pangpang \" + \"(id varchar(10) not NULL, \" + \" win integer(1), \"+ \" defeat integer(1), \"+ \" playtimes integer(1), \"+ \" score integer(10), \"+ \" PRIMARY KEY ( id ),\"+ \"FOREIGN KEY (id) REFERENCES userinformation (id)) Engine=Innodb default charset = utf8\";\n    stmt.executeUpdate(sql);\n  }\n}\n"}
{"nl": "called after the reading has finished", "code": "public void createKey(SocketChannel channel){\n  _keysToCreate.add(channel);\n  _keysToCreateCounter.incrementAndGet();\n  getSelector().wakeup();\n}\n"}
{"nl": "Set a long value in the preferences editor, to be written back once", "code": "public static void putLong(String key,long value){\n  prefs.edit().putLong(key,value).commit();\n}\n"}
{"nl": "Asserts that traffic log is matched by provided matcher", "code": "public void assertMatches(Matcher<TrafficLog> matcher){\n  assertThat(trafficLogProvider.get(),matcher);\n}\n"}
{"nl": "Creates a new instance of StandardComparator", "code": "public StandardDocumentComparator(){\n  sGraph=new GraphSimilarity();\n  sHistogram=new GraphSimilarity();\n}\n"}
{"nl": "Set count", "code": "public WidgetsGetPagesQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Converts dateUnit to Joda-Time DateTime using ISO chronology", "code": "public DateTime toJodaDateTime(){\n  return toJodaDateTime(ISOChronology.getInstance());\n}\n"}
{"nl": "combine a get-method name form field name", "code": "public static String combineGetMethodName(String fieldName){\n  return \"get\" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);\n}\n"}
{"nl": "Daily Cron", "code": "public CronTimer(int hour,int minute,int sec){\n  cronExpression=sec + \" \" + minute+ \" \"+ hour+ \" * * ?\";\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0;\n}\n"}
{"nl": "json --> obj", "code": "public static WxCurMenuInfoResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxCurMenuInfoResult.class);\n}\n"}
{"nl": "Creates method for the interfaces", "code": "private static void createMethods(ClassWriter cw,MethodHolder[] methods,String classInternalName){\n  for (int j=0; j < methods.length; ++j) {\n    final MethodHolder method=methods[j];\n    Class<?>[] exceptionTypes=method.getMethod().getExceptionTypes();\n    String[] exceptions=new String[exceptionTypes.length];\n    for (int i=0; i < exceptionTypes.length; ++i)     exceptions[i]=Type.getInternalName(exceptionTypes[i]);\n    MethodGenerator mv=MethodGenerator.newVarargsMethod(cw,method.getName(),method.getMethodDescriptor(),exceptions);\n    mv.start();\n    mv.loadThis();\n    mv.loadField(AbstractProxy.INTERNAL_NAME,\"_handler\",\"L\" + ProxyInvocationHandler.INTERNAL_NAME + \";\");\n    mv.loadThis();\n    mv.loadStaticField(classInternalName,\"_methods\",IMethod.ARRAY_DESCRIPTOR_NAME);\n    mv.loadConstant(j);\n    mv.loadArrayItem();\n    final Class<?>[] parameterTypes=method.getMethod().getParameterTypes();\n    mv.newArray(OBJECT_INTERNALNAME,parameterTypes.length);\n    int argPos=1;\n    for (int i=0; i < parameterTypes.length; ++i) {\n      mv.dup();\n      mv.loadConstant(i);\n      argPos+=mv.loadVariable(parameterTypes[i],argPos);\n      mv.storeArrayItem();\n    }\n    mv.invokeMethodCustom(Opcodes.INVOKEINTERFACE,ProxyInvocationHandler.INTERNAL_NAME,\"invoke\",\"(Ljava/lang/Object;\" + IMethod.DESCRIPTOR_NAME + \"[Ljava/lang/Object;)Ljava/lang/Object;\");\n    mv.returnResult(method.getMethod().getReturnType());\n  }\n}\n"}
{"nl": "To write as link header", "code": "public String toString(){\n  StringBuilder builder=new StringBuilder(\"<\");\n  builder.append(href).append(\">; rel=\").append(relationship);\n  if (type != null)   builder.append(\"; type=\").append(type);\n  return builder.toString();\n}\n"}
{"nl": "Round %0 begins!", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_START_ROUND_IDARENA(String value0){\n  return new SM_SYSTEM_MESSAGE(1400928,value0);\n}\n"}
{"nl": "add a remote file service", "code": "public void addService(final IRemoteService service){\n  final ServicePanel servicePanel=new ServicePanel(service,this);\n  servicePanel.setToolTipText(service.getShortName());\n  tabbedPane.add(servicePanel,0);\n  tabbedPane.setTitleAt(0,abbreviateName(service.getShortName()));\n  tabbedPane.setSelectedIndex(0);\n}\n"}
{"nl": "Collecting device parameter information", "code": "public void collectDeviceInfo(Context ctx){\n  try {\n    PackageManager pm=ctx.getPackageManager();\n    PackageInfo pi=pm.getPackageInfo(ctx.getPackageName(),PackageManager.GET_ACTIVITIES);\n    if (pi != null) {\n      String versionName=pi.versionName == null ? \"null\" : pi.versionName;\n      String versionCode=pi.versionCode + \"\";\n      infos.put(\"versionName\",versionName);\n      infos.put(\"versionCode\",versionCode);\n    }\n  }\n catch (  NameNotFoundException e) {\n    Log.e(TAG,\"an error occured when collect package info\",e);\n  }\n  Field[] fields=Build.class.getDeclaredFields();\n  for (  Field field : fields) {\n    try {\n      field.setAccessible(true);\n      infos.put(field.getName(),field.get(null).toString());\n      Log.d(TAG,field.getName() + \" : \" + field.get(null));\n    }\n catch (    Exception e) {\n      Log.e(TAG,\"an error occured when collect crash info\",e);\n    }\n  }\n}\n"}
{"nl": "Fetch all configs", "code": "@RequestMapping(value=ClientUris.CONFIG_FETCH_ALL,method=RequestMethod.GET) public List<ConfigItem> fetchAll(){\n  ClientSession client=ClientContext.get();\n  assert client != null;\n  Response<Page<Config>> pageResp=configService.pagingConfig(client.getAppId(),null,1,Integer.MAX_VALUE);\n  if (!pageResp.isSuccess()) {\n    Logs.error(\"failed to fetch all configs(app={}), cause: {}\",client,pageResp.getErr());\n    return Collections.emptyList();\n  }\n  return ConfigItemFactory.creates(pageResp.getData().getData());\n}\n"}
{"nl": "add this observable future into the queue", "code": "private void observe(Future<?> future){\n  Observable observable=new Observable(future,timeout);\n  queue.add(observable);\n}\n"}
{"nl": "Helper method to build the url to the given test file", "code": "private String toUrl(String testFile) throws MalformedURLException {\n  return new File(TestUtil.TEST_DATA_FOLDER + \"pac\",testFile).toURI().toURL().toString();\n}\n"}
{"nl": "Decode hex string to a byte array", "code": "static public byte[] decode(String encoded){\n  if (encoded == null)   return null;\n  int lengthData=encoded.length();\n  if (lengthData % 2 != 0)   return null;\n  char[] binaryData=encoded.toCharArray();\n  int lengthDecode=lengthData / 2;\n  byte[] decodedData=new byte[lengthDecode];\n  byte temp1, temp2;\n  char tempChar;\n  for (int i=0; i < lengthDecode; i++) {\n    tempChar=binaryData[i * 2];\n    temp1=(tempChar < BASELENGTH) ? hexNumberTable[tempChar] : -1;\n    if (temp1 == -1)     return null;\n    tempChar=binaryData[i * 2 + 1];\n    temp2=(tempChar < BASELENGTH) ? hexNumberTable[tempChar] : -1;\n    if (temp2 == -1)     return null;\n    decodedData[i]=(byte)((temp1 << 4) | temp2);\n  }\n  return decodedData;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public boolean skeletonsAreSimilar(String id,String skeleton){\n  if (id.equals(skeleton)) {\n    return true;\n  }\n  TreeSet<String> parser1=getSet(id);\n  TreeSet<String> parser2=getSet(skeleton);\n  if (parser1.size() != parser2.size()) {\n    return false;\n  }\n  Iterator<String> it2=parser2.iterator();\n  for (  String item : parser1) {\n    int index1=getCanonicalIndex(item,false);\n    String item2=(String)it2.next();\n    int index2=getCanonicalIndex(item2,false);\n    if (types[index1][1] != types[index2][1]) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "convert string from slash style to camel style, such as a_b_c will convert to A_B_C", "code": "public static String dbStringToCamelStyle2(String str){\n  if (str != null) {\n    StringBuilder sb=new StringBuilder();\n    sb.append(String.valueOf(str.charAt(0)));\n    for (int i=1; i < str.length(); i++) {\n      char c=str.charAt(i);\n      if (c != '_') {\n        sb.append(c);\n      }\n else {\n        if (i + 1 < str.length()) {\n          sb.append(String.valueOf(str.charAt(i + 1)).toUpperCase());\n          i++;\n        }\n      }\n    }\n    return sb.toString();\n  }\n  return null;\n}\n"}
{"nl": "Set filter", "code": "protected GroupsGetMembersQueryWithFilter filter(GroupsGetMembersFilter value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public boolean equals(Object obj){\n  if (this == obj) {\n    return true;\n  }\n  if (!(obj instanceof StringCharacterIterator)) {\n    return false;\n  }\n  StringCharacterIterator that=(StringCharacterIterator)obj;\n  if (hashCode() != that.hashCode()) {\n    return false;\n  }\n  if (!this.text.equals(that.text)) {\n    return false;\n  }\n  if ((this.pos != that.pos) || (this.begin != that.begin) || (this.end != that.end)) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosEditCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"photos.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "Clear the server's local cache", "code": "@RequestMapping(value=\"/servers/clean_cache\",method=RequestMethod.POST) public JsonResponse cleanServerCache(@RequestParam(\"server\") String server){\n  serverService.cleanCache(server);\n  return JsonResponse.ok(true);\n}\n"}
{"nl": "Test events related to error-events", "code": "@Deployment public void testActivityErrorEvents() throws Exception {\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"errorProcess\");\n  assertNotNull(processInstance);\n  ProcessInstance afterErrorInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();\n  assertNull(afterErrorInstance);\n  ActivitiErrorEvent errorEvent=null;\n  for (  ActivitiEvent event : listener.getEventsReceived()) {\n    if (event instanceof ActivitiErrorEvent) {\n      if (errorEvent == null) {\n        errorEvent=(ActivitiErrorEvent)event;\n      }\n else {\n        fail(\"Only one ActivityErrorEvent expected\");\n      }\n    }\n  }\n  assertNotNull(errorEvent);\n  assertEquals(ActivitiEventType.ACTIVITY_ERROR_RECEIVED,errorEvent.getType());\n  assertEquals(\"catchError\",errorEvent.getActivityId());\n  assertEquals(\"myError\",errorEvent.getErrorId());\n  assertEquals(\"123\",errorEvent.getErrorCode());\n  assertEquals(processInstance.getId(),errorEvent.getProcessInstanceId());\n  assertEquals(processInstance.getProcessDefinitionId(),errorEvent.getProcessDefinitionId());\n  assertFalse(processInstance.getId().equals(errorEvent.getExecutionId()));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallReportPostQuery(VkApiClient client,UserActor actor,int ownerId,int postId){\n  super(client,\"wall.reportPost\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  postId(postId);\n}\n"}
{"nl": "MONSTER QUERIES", "code": "public MonsterCursor queryMonsters(){\n  return mHelper.queryMonsters();\n}\n"}
{"nl": "Generated Methods", "code": "public void onActivityResult(int requestCode,int resultCode,android.content.Intent data){\n  if (ScriptLoader.isCalledFromJRuby()) {\n    super.onActivityResult(requestCode,resultCode,data);\n    return;\n  }\n  if (!JRubyAdapter.isInitialized()) {\n    Log.i(\"Method called before JRuby runtime was initialized: RubotoActivity#onActivityResult\");\n{\n      super.onActivityResult(requestCode,resultCode,data);\n      return;\n    }\n  }\n  String rubyClassName=scriptInfo.getRubyClassName();\n  if (rubyClassName == null) {\n    super.onActivityResult(requestCode,resultCode,data);\n    return;\n  }\n  if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + \".instance_methods(false).any?{|m| m.to_sym == :onActivityResult}\")) {\n    JRubyAdapter.runRubyMethod(scriptInfo.getRubyInstance(),\"onActivityResult\",new Object[]{requestCode,resultCode,data});\n  }\n else {\n    if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + \".instance_methods(false).any?{|m| m.to_sym == :on_activity_result}\")) {\n      JRubyAdapter.runRubyMethod(scriptInfo.getRubyInstance(),\"on_activity_result\",new Object[]{requestCode,resultCode,data});\n    }\n else {\n      if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + \".instance_methods(true).any?{|m| m.to_sym == :on_activity_result}\")) {\n        JRubyAdapter.runRubyMethod(scriptInfo.getRubyInstance(),\"on_activity_result\",new Object[]{requestCode,resultCode,data});\n      }\n else {\n        JRubyAdapter.runRubyMethod(scriptInfo.getRubyInstance(),\"onActivityResult\",new Object[]{requestCode,resultCode,data});\n      }\n    }\n  }\n}\n"}
{"nl": "Return a future that represents the completion of the futures in the provided list", "code": "public static <T>CompletableFuture<T> waitForAll(List<CompletableFuture<T>> futures){\n  if (futures.isEmpty()) {\n    return CompletableFuture.completedFuture(null);\n  }\n  final CompletableFuture<T> compositeFuture=new CompletableFuture<>();\n  final AtomicInteger count=new AtomicInteger(futures.size());\n  final AtomicReference<Throwable> exception=new AtomicReference<>();\n  for (  CompletableFuture<T> future : futures) {\n    future.whenComplete(null);\n  }\n  return compositeFuture;\n}\n"}
{"nl": "Determines if the subscriber is durable", "code": "public boolean isDurableSubscriber(){\n  return !StringsUtils.isEmpty(m_durableSubscriptionName);\n}\n"}
{"nl": "Creation of the random PIK (between PIK_MIN and PIK_MAX)", "code": "private Long createProcessPIK(){\n  Random r=new Random();\n  int pik=r.nextInt(PIK_MAX + 1);\n  if (pik < PIK_MIN) {\n    pik+=PIK_MIN;\n  }\n  return Long.valueOf(pik);\n}\n"}
{"nl": "Get the default Navigator object instance and begin building a request", "code": "public static Navigator with(Context context) throws NavigatorException {\n  return getInstance(context);\n}\n"}
{"nl": "remove an element described by ObjectInfo", "code": "private void remove_impl(ObjectInfo<T> oiToRemove){\n  if (oiToRemove.getPosInList() == -1)   throw new RuntimeException(\" Stored list- called remove but element already deleted !\");\n  if (m_Size == 0)   throw new RuntimeException(\" Stored list- called remove but list is empty !\");\n  if (oiToRemove.getBackwardsRef() != null)   oiToRemove.getBackwardsRef().setForwardRef(oiToRemove.getForwardRef());\n  if (oiToRemove.getForwardRef() != null)   oiToRemove.getForwardRef().setBackwardsRef(oiToRemove.getBackwardsRef());\n  if (m_Tail == oiToRemove)   m_Tail=oiToRemove.getForwardRef();\n  if (m_Head == oiToRemove)   m_Head=oiToRemove.getBackwardsRef();\n  m_Size--;\n  if (m_Support_Random_Scans && (m_BasicOccupied != null)) {\n    ArrayList<ObjectInfo<T>> last_al=m_LastChunk > 0 ? m_AllOccupiedPos.get(m_LastChunk) : m_BasicOccupied;\n    int my_chunknum=(oiToRemove.getPosInList() - 1) / NUMBER_OF_OCCUPIED_POS_QUOTA;\n    int my_pos_inside=(oiToRemove.getPosInList() - 1) % NUMBER_OF_OCCUPIED_POS_QUOTA;\n    ArrayList<ObjectInfo<T>> my_al=my_chunknum > 0 ? m_AllOccupiedPos.get(my_chunknum) : m_BasicOccupied;\n    if (m_Size > 0 && (my_chunknum != m_LastChunk || my_pos_inside != m_LastPos)) {\n      ObjectInfo<T> soi=last_al.get(m_LastPos);\n      soi.setPosInList(oiToRemove.getPosInList());\n      my_al.set(my_pos_inside,soi);\n    }\n    last_al.remove(m_LastPos);\n    if (m_LastPos == 0 && m_LastChunk > 0)     m_AllOccupiedPos.remove(m_LastChunk);\n    m_LastPos--;\n    if (m_LastPos < 0) {\n      if (m_LastChunk > 0) {\n        m_LastChunk--;\n        m_LastPos=NUMBER_OF_OCCUPIED_POS_QUOTA - 1;\n        if (m_LastChunk == 0)         m_AllOccupiedPos=null;\n      }\n else       m_LastPos=0;\n    }\n  }\n  oiToRemove.setPosInList(-1);\n}\n"}
{"nl": "Add right shifting for child items depends on depth level", "code": "private static TestItem adjustName(TestItem input){\n  StringBuilder sb=new StringBuilder(StringUtils.repeat(PREFIX,input.getPath().size()));\n  input.setName(sb.append(input.getName()).toString());\n  return input;\n}\n"}
{"nl": "Called when there was a successful MQTT connection", "code": "@Override public void onSuccess(IMqttToken asyncActionToken){\n  ConnectionState state=(ConnectionState)asyncActionToken.getUserContext();\n  if (state == ConnectionState.Connecting) {\n    AirMapLog.i(\"TrafficService\",\"Successfully connected\");\n    onConnect();\n  }\n}\n"}
{"nl": "read a SPTK lf0 file with external settings", "code": "public SPTKPitchReaderWriter(String lf0SPTKFile,float windowSizeInSeconds,float skipSizeInSeconds,int samplingRate){\n  contour=null;\n  header=new PitchFileHeader();\n  header.windowSizeInSeconds=windowSizeInSeconds;\n  header.skipSizeInSeconds=skipSizeInSeconds;\n  header.fs=samplingRate;\n  try {\n    contour=readSPTKF0Data(lf0SPTKFile);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "modify appender file to storage server (by file name)", "code": "public int modify_file1(String appender_file_id,long file_offset,String local_filename) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.modify_file(parts[0],parts[1],file_offset,local_filename);\n}\n"}
{"nl": "Check if we're terminated completely, abort process is considered complete", "code": "public boolean isTerminated(){\n  return state == ABORTED;\n}\n"}
{"nl": "get the isGameStartSet boolean", "code": "public boolean isGameStartSet(){\n  return gameStartSet;\n}\n"}
{"nl": "Returns the key of the entry", "code": "public Constant key(){\n  return key;\n}\n"}
{"nl": "Creates a range for the given offset and length for a compilation unit", "code": "public static Range toRange(ICompilationUnit unit,int offset,int length) throws JavaModelException {\n  Range result=new Range();\n  final IBuffer buffer=unit.getBuffer();\n  int[] loc=JsonRpcHelpers.toLine(buffer,offset);\n  int[] endLoc=JsonRpcHelpers.toLine(buffer,offset + length);\n  if (loc != null && endLoc != null) {\n    result.setStart(new Position().withLine(loc[0]).withCharacter(loc[1]));\n    result.setEnd(new Position().withLine(endLoc[0]).withCharacter(endLoc[1]));\n  }\n  return result;\n}\n"}
{"nl": "erase the block (for reuse)", "code": "public void clear(){\n  uid=0;\n  bitScore=0;\n  percentIdentity=0;\n  expected=0;\n  length=0;\n  text=null;\n  fName2Id.clear();\n}\n"}
{"nl": "add the named taxon", "code": "public int add(String name){\n  if (!name2index.keySet().contains(name)) {\n    ntax++;\n    bits.set(ntax);\n    Integer index=ntax;\n    index2name.put(index,name);\n    name2index.put(name,index);\n    return ntax;\n  }\n else   return name2index.get(name);\n}\n"}
{"nl": "Decipher the given byte-array with Blowfish cipher", "code": "public void decipher(byte[] data){\n  decipher(data,0,data.length);\n}\n"}
{"nl": "Evaluates the entire hierarchy of Loadable Conditions from top to the bottom", "code": "public void chainCheck(ConditionStack conditionStack) throws LoadableConditionException {\n  Stack<LoadableComponentContext> stack=conditionStack.getLoadableContextStack();\n  ConditionProgressTracker progressTracker=new ConditionProgressTracker(stack);\n  while (!stack.isEmpty()) {\n    LoadableComponentContext loadableContext=stack.pop();\n    if (loadableContext.getConditionContext() != null) {\n      progressTracker.stepStart(loadableContext);\n      LoadableComponentCondition componentCondition=produceInitializedCondition(loadableContext);\n      Object subject=acquireSubjectInstance(loadableContext);\n      evaluateCondition(componentCondition,subject,loadableContext,progressTracker);\n    }\n  }\n}\n"}
{"nl": "Hash method that uses the java String hashCode()", "code": "public static int hash(String key,int bitSize,String input){\n  int fullHash=(key + input).hashCode();\n  int bitLimitedHash=fullHash;\n  if (bitSize < 32) {\n    bitLimitedHash=(0xFFFFFFFF >>> (32 - bitSize)) & fullHash;\n  }\n  return bitLimitedHash;\n}\n"}
{"nl": "Initialise the fields of this instance from the specified JSON", "code": "public HttpRequestWrapper(JsonObject json){\n  this.path=json.getString(\"path\");\n  if (json.containsKey(\"method\")) {\n    this.method=HttpMethod.valueOf(json.getString(\"method\"));\n  }\n  if (json.containsKey(\"params\")) {\n    this.params=fromJsonArray(json.getJsonArray(\"params\"));\n  }\n  if (json.containsKey(\"formAttributes\")) {\n    this.formAttributes=fromJsonArray(json.getJsonArray(\"formAttributes\"));\n  }\n  if (json.containsKey(\"headers\")) {\n    this.headers=fromJsonArray(json.getJsonArray(\"headers\"));\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"select=invert;\");\n}\n"}
{"nl": "Write String to buffer", "code": "protected final void writeS(ChannelBuffer buf,String text){\n  if (text == null) {\n    buf.writeChar('\\000');\n  }\n else {\n    final int len=text.length();\n    for (int i=0; i < len; i++) {\n      buf.writeChar(text.charAt(i));\n    }\n    buf.writeChar('\\000');\n  }\n}\n"}
{"nl": "When the size of CircleProgressBar changed, need to re-adjust the drawing area", "code": "@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){\n  super.onSizeChanged(w,h,oldw,oldh);\n  mCenterX=w / 2;\n  mCenterY=h / 2;\n  mRadius=Math.min(mCenterX,mCenterY);\n  mProgressRectF.top=mCenterY - mRadius;\n  mProgressRectF.bottom=mCenterY + mRadius;\n  mProgressRectF.left=mCenterX - mRadius;\n  mProgressRectF.right=mCenterX + mRadius;\n  updateProgressShader();\n  mProgressRectF.inset(mProgressStrokeWidth / 2,mProgressStrokeWidth / 2);\n}\n"}
{"nl": "remove an element described by ObjectInfo", "code": "public void remove(IObjectInfo<T> poi){\n  remove_impl(poi,true);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static int compare(int codepoint,CharSequence a){\n  return -compare(a,codepoint);\n}\n"}
{"nl": "Custom Typefaces", "code": "public static Typeface customTypeface(Context context,int index){\n  Typeface typeface=null;\n  if (index == 1)   typeface=Typeface.createFromAsset(context.getAssets(),\"fonts/BreeSerif-Regular.ttf\");\n  if (index == 2)   typeface=Typeface.createFromAsset(context.getAssets(),\"fonts/OpenSans-Regular.ttf\");\n  if (index == 3)   typeface=Typeface.createFromAsset(context.getAssets(),\"fonts/OpenSans-Bold.ttf\");\n  return typeface;\n}\n"}
{"nl": "random cat images", "code": "public static String imageUrl(String type){\n  return \"http://thecatapi.com/api/images/get?format=src&type=\" + type;\n}\n"}
{"nl": "Is the incubator currently being used", "code": "public boolean isInUse(){\n  return getKmTarget() > api.getPlayerProfile().getStats().getKmWalked();\n}\n"}
{"nl": "Creates a SampleSet by reading it from the given byte buffer", "code": "public SampleSet(ByteBuffer bb) throws IOException {\n  int numSamples;\n  sampleInfo=new SampleInfo(bb);\n  numSamples=bb.getInt();\n  this.samples=new Sample[numSamples];\n  for (int i=0; i < numSamples; i++) {\n    samples[i]=Sample.loadBinary(bb);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetAvailableForCallQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getAvailableForCall\",GetAvailableForCallResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Commit and report any errors to the client", "code": "void commit(){\n  queryExecutor.submit(null);\n}\n"}
{"nl": "Returns true if this policy allows resizing the left edge", "code": "public boolean leftAllowed(){\n  return (myFlags & LEFT_EDGE) != 0;\n}\n"}
{"nl": "Subscribe listener", "code": "@Override public void onConnected(SubscriberKit subscriberKit){\n}\n"}
{"nl": "Adds a callback to the traffic service", "code": "public static void addTrafficListener(AirMapTrafficListener callback){\n  getAirMapTrafficService().addListener(callback);\n}\n"}
{"nl": "Add new login history", "code": "@Override public long addLoginHistory(LoginHistory loginHistory){\n  return sessionTemplate.insert(NAMESPACE + \".addLoginHistory\",loginHistory);\n}\n"}
{"nl": "length of array (file length / 8)", "code": "@Override public long limit(){\n  return fileLength >>> 3;\n}\n"}
{"nl": "Computing real-time download speed", "code": "private float calculateSpeed(long startTime,long endTime){\n  float usedTime=((float)(endTime - startTime)) / 1000;\n  float speed=0;\n  if (usedTime > 0) {\n    int mSize=this.downloadSize - this.lastDownloadSize;\n    speed=((float)mSize / usedTime) / KB_CONSTANT;\n    speed=((float)((int)(speed * 10))) / 10;\n  }\n  return speed;\n}\n"}
{"nl": "Test +-->End1 Start-<> +-->End2 <p/> process on PROCESS_COMPLETED event", "code": "@Deployment(resources={\"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.parallelGatewayTwoEndsProcess.bpmn20.xml\"}) public void testProcessCompleted_ParallelGatewayTwoEnds() throws Exception {\n  this.runtimeService.startProcessInstanceByKey(\"noEndProcess\");\n  List<ActivitiEvent> events=listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED);\n  assertEquals(\"ActivitiEventType.PROCESS_COMPLETED was expected 1 time.\",1,events.size());\n}\n"}
{"nl": "Checks that the given class has not been edited since the last compilation (and if it has, logs a warning to the user)", "code": "private void checkModified(@NotNull String fqcn){\n  if (DumbService.getInstance(myModule.getProject()).isDumb()) {\n    return;\n  }\n  if (myModuleClassLoader != null && myModuleClassLoader.isSourceModified(fqcn,myCredential) && !myRecentlyModifiedClasses.contains(fqcn)) {\n    myRecentlyModifiedClasses.add(fqcn);\n    RenderProblem.Html problem=RenderProblem.create(WARNING);\n    HtmlBuilder builder=problem.getHtmlBuilder();\n    String className=fqcn.substring(fqcn.lastIndexOf('.') + 1);\n    builder.addLink(\"The \" + className + \" custom view has been edited more recently than the last build: \",\"Build\",\" the project.\",myLogger.getLinkManager().createCompileModuleUrl());\n    myLogger.addMessage(problem);\n  }\n}\n"}
{"nl": "Handles receiving this packet", "code": "@Override public void handle(){\n  spec.handler.accept(new PacketContext(),this);\n}\n"}
{"nl": "expand the given node", "code": "public void expand(NodeBase v){\n  if (v != null) {\n    for (Enumeration descendants=v.breadthFirstEnumeration(); descendants.hasMoreElements(); ) {\n      v=(NodeBase)descendants.nextElement();\n      dataTree.expandPath(new TreePath(v.getPath()));\n    }\n  }\n}\n"}
{"nl": "Function Import implementation for updating SalesOrderHeader", "code": "private void updateSalesOrderHeader(String reportPath,List<SalesOrderItem> soiList,EntityManager em){\n  if (soiList != null && !soiList.isEmpty()) {\n    EntityTransaction transaction=em.getTransaction();\n    try {\n      transaction.begin();\n      for (      SalesOrderItem orderItem : soiList) {\n        orderItem.getSalesOrderHeader().setInvoiceLink(reportPath);\n        em.merge(orderItem);\n      }\n      transaction.commit();\n    }\n  finally {\n    }\n  }\n}\n"}
{"nl": "Constructs new instance of <tt>CM_CREATE_CHARACTER </tt> packet", "code": "public CM_CHARACTER_EDIT(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetAdsLayoutQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getAdsLayout\",Utils.buildParametrizedType(List.class,AdLayout.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n"}
{"nl": "Analyzes the given APK file for data flows with a given xml file", "code": "public InfoflowResults analyzeAPKFile(String apkFileName,String xmlFileName,boolean enableImplicitFlows,boolean enableStaticFields,boolean flowSensitiveAliasing) throws IOException, XmlPullParserException {\n  String androidJars=System.getenv(\"ANDROID_JARS\");\n  if (androidJars == null)   androidJars=System.getProperty(\"ANDROID_JARS\");\n  if (androidJars == null)   throw new RuntimeException(\"Android JAR dir not set\");\n  System.out.println(\"Loading Android.jar files from \" + androidJars);\n  SetupApplication setupApplication=new SetupApplication(androidJars,apkFileName);\n  setupApplication.setTaintWrapper(new EasyTaintWrapper(\"EasyTaintWrapperSource.txt\"));\n  setupApplication.calculateSourcesSinksEntrypoints(xmlFileName);\n  setupApplication.setEnableImplicitFlows(enableImplicitFlows);\n  setupApplication.setEnableStaticFieldTracking(enableStaticFields);\n  setupApplication.setFlowSensitiveAliasing(flowSensitiveAliasing);\n  return setupApplication.runInfoflow();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set edgeShape=\");\n  String shapeName=np.getWordMatchesIgnoringCase(\"angular straight curved none\");\n  np.matchIgnoreCase(\";\");\n  byte shape;\n  if (shapeName.equalsIgnoreCase(\"angular\"))   shape=EdgeView.ARC_LINE_EDGE;\n else   if (shapeName.equalsIgnoreCase(\"straight\"))   shape=EdgeView.STRAIGHT_EDGE;\n else   if (shapeName.equalsIgnoreCase(\"curved\"))   shape=EdgeView.QUAD_EDGE;\n else   shape=0;\n  if (getViewer() instanceof GraphView) {\n    boolean changed=false;\n    GraphView viewer=(GraphView)getViewer();\n    for (    Edge e : viewer.getSelectedEdges()) {\n      viewer.setShape(e,shape);\n      changed=true;\n    }\n    if (changed) {\n      viewer.repaint();\n    }\n  }\n}\n"}
{"nl": "This method will load the dictionary data between a given start and end offset", "code": "private Iterator<byte[]> load(ColumnIdentifier columnIdentifier,long startOffset,long endOffset) throws IOException {\n  CarbonDictionaryReader dictionaryReader=getDictionaryReader(columnIdentifier);\n  try {\n    Iterator<byte[]> columnDictionaryChunkWrapper=dictionaryReader.read(startOffset,endOffset);\n    return columnDictionaryChunkWrapper;\n  }\n  finally {\n    dictionaryReader.close();\n  }\n}\n"}
{"nl": "build a zookeeper connection", "code": "public ZkConnection(String zkServers,int sessionTimeOut,String authStr){\n  _servers=zkServers;\n  _sessionTimeOut=sessionTimeOut;\n  _authStr=authStr;\n}\n"}
{"nl": "rescan the data in the FViewer", "code": "public void updateData() throws IOException {\n  ProgressListener progress=doc.getProgressListener();\n  boolean saveCancelable=false;\n  if (progress != null) {\n    saveCancelable=progress.isCancelable();\n    progress.setSubtask(\"updating viewer\");\n    progress.setCancelable(false);\n    try {\n      progress.setProgress(-1);\n    }\n catch (    CanceledException e) {\n    }\n  }\n  totalAssignedReads=0;\n  classification.getFullTree().computeId2Data(doc.getNumberOfSamples(),doc.getDataTable().getClass2Counts(getClassName()),id2NodeData);\n  for (  Integer fId : id2NodeData.keySet()) {\n    if (fId > 0) {\n      totalAssignedReads+=id2NodeData.get(fId).getCountAssigned();\n    }\n  }\n  if (progress != null)   progress.setCancelable(saveCancelable);\n  getCommandManager().updateEnableState();\n}\n"}
{"nl": "Returns true if field currentMessageId is set (has been assigned a value) and false otherwise", "code": "public boolean isSetCurrentMessageId(){\n  return this.currentMessageId != null;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set keep1=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Set device id", "code": "public AccountGetPushSettingsQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n"}
{"nl": "Override this method if you need to bind view getHolder for insertions <p/> viewType == 100500", "code": "public RecyclerView.ViewHolder newInsertionViewHolder(ViewGroup vParent){\n  final LayoutInflater inflater=LayoutInflater.from(getContext());\n  ViewGroup itemView=(ViewGroup)inflater.inflate(R.layout.layout_root,vParent,false);\n  return new InsertViewHolder(itemView);\n}\n"}
{"nl": "uniform_rand: generate uniformly distributed random numbers 1 or -1", "code": "public double uniformRand(){\n  return (rand.nextBoolean()) ? 1.0 : -1.0;\n}\n"}
{"nl": "returns a string representation of the object", "code": "public String toString(){\n  return \"MPPointD, x: \" + x + \", y: \"+ y;\n}\n"}
{"nl": "synk moving", "code": "private void make_Sync(){\n  sncX=(int)this.map_controler.get_Direc_Dis_X(this.map_controler.dir);\n  position.x+=sncX;\n  if (sKind == 5 && sNum == 0) {\n    this.map_controler.syncCnt+=sncX;\n    this.map_controler.dirCnt++;\n    if (this.map_controler.dirCnt >= this.map_controler.dirLen) {\n      this.map_controler.dirCnt=0;\n      this.map_controler.dirLen=150;\n      this.map_controler.dir=16 - this.map_controler.dir;\n    }\n  }\n}\n"}
{"nl": "Logs with debug level", "code": "public static void debug(@Nullable Class<?> caller,String message,Object... args){\n  android.util.Log.d(tag(caller),String.format(Locale.ENGLISH,message,args));\n}\n"}
{"nl": "Add a new config", "code": "@Pollable(async=true,message=\"Start Adding Box SDK Service Config with no bootstrap\",expectedSubTaskNumber=1) public PollableFuture<BoxSDKServiceConfigEntity> addConfigWithNoBootstrap(String clientId,String clientSecret,String publicKeyId,String privateKey,String privateKeyPassword,String enterpriseId,String appUserId,String rootFolderId,String dropsFolderId,@InjectCurrentTask PollableTask currentTask) throws ExecutionException, InterruptedException, BoxSDKServiceException {\n  BoxSDKServiceConfigEntity boxSDKServiceConfig=boxSDKServiceConfigEntityRepository.findFirstByOrderByIdAsc();\n  if (boxSDKServiceConfig != null) {\n    throw new BoxSDKServiceException(\"Config must be deleted first before adding a new one\");\n  }\n  boxSDKServiceConfig=new BoxSDKServiceConfigEntity(clientId,clientSecret,publicKeyId,privateKey,privateKeyPassword,enterpriseId,appUserId,rootFolderId,dropsFolderId,false);\n  logger.debug(\"Saving of the config first so that it can be validated\");\n  boxSDKServiceConfigEntityRepository.save(boxSDKServiceConfig);\n  validateConfig(boxSDKServiceConfig,currentTask);\n  return new PollableFutureTaskResult<>(boxSDKServiceConfig);\n}\n"}
{"nl": "Gets whether the node supports beaming", "code": "public boolean isBeaming(){\n  return beaming;\n}\n"}
{"nl": "Update our position", "code": "public void updatePosition(ViewTransform viewTransform){\n  updateResizeHandlesPositions(viewTransform);\n  updateConstraintHandlesPositions();\n}\n"}
{"nl": "replace an existing sample name", "code": "public void changeSampleName(Integer pid,String newName){\n  sampleNames.set(pid,newName);\n}\n"}
{"nl": "Creates the default inverse cumulative probability test input values", "code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0,0.001d,0.010d,0.025d,0.050d,0.100d,0.999d,0.990d,0.975d,0.950d,0.900d,1};\n}\n"}
{"nl": "Set count", "code": "public PhotosGetQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Increases the time by one minute", "code": "@Override public void run(){\n  time.increase();\n}\n"}
{"nl": "Below method will be used to show statistic log as table", "code": "public void logStatisticsAsTableExecutor(){\n  String tableInfo=collectExecutorStatistics();\n  if (null != tableInfo) {\n    LOGGER.statistic(tableInfo);\n  }\n}\n"}
{"nl": "%1[update]%2 %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_UPDATE(){\n  return new SM_SYSTEM_MESSAGE(1300611);\n}\n"}
{"nl": "Absolute distance", "code": "public double AbsDistance(double[] x,double[] y){\n  double sum=0;\n  if (x.length != y.length) {\n    throw new RuntimeException(\"Given array lengths were not equal.\");\n  }\n  int d=x.length;\n  for (int i=0; i < d; i++) {\n    sum=sum + Math.abs(x[i] - y[i]);\n  }\n  return sum;\n}\n"}
{"nl": "equality matching preserves fifo order", "code": "@Override public boolean supportsFifoOrder(){\n  return true;\n}\n"}
{"nl": "Creates a new instance of INSECTCategoryDB", "code": "public INSECTCategoryDB(){\n}\n"}
{"nl": "Evaluates the given expression, with the given set of arguments", "code": "@Nullable public String evaluate(@NonNull String expression,@NonNull Map<String,Object> inputs){\n  try {\n    myCurrentExpression=expression;\n    Template inputsTemplate=myFreemarker.getTemplate(expression);\n    StringWriter out=new StringWriter();\n    Map<String,Object> args=com.android.tools.idea.templates.Template.createParameterMap(inputs);\n    inputsTemplate.process(args,out);\n    out.flush();\n    return out.toString();\n  }\n catch (  Exception e) {\n    return null;\n  }\n}\n"}
{"nl": "Items ID", "code": "protected MarketGetByIdQuery itemIds(List<String> value){\n  return unsafeParam(\"item_ids\",value);\n}\n"}
{"nl": "****************************** QUEST QUERIES", "code": "public QuestCursor queryQuests(){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_QUESTS;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new QuestCursor(wrapJoinHelper(builderQuest(),qh));\n}\n"}
{"nl": "Set delete place", "code": "public PhotosEditQuery deletePlace(Boolean value){\n  return unsafeParam(\"delete_place\",value);\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapFlight && getFlightId().equals(((AirMapFlight)o).getFlightId());\n}\n"}
{"nl": "UUID created from the first 128 bits of SHA256", "code": "public String toUuidString(){\n  String result=String.join(\"-\",contentAsHex(0,4),contentAsHex(4,6),contentAsHex(6,8),contentAsHex(8,10),contentAsHex(10,16));\n  return result.toLowerCase();\n}\n"}
{"nl": "mark the header height", "code": "public void markHeaderViewHeight(View view){\n  this.mHeaderView=view;\n  mHeaderViewHeight=mHeaderView.getHeight();\n  if (mHeaderViewHeight <= 0) {\n    mHeaderViewHeight=mHeaderView.getLayoutParams().height;\n  }\n else {\n    mHeaderView.getLayoutParams().height=mHeaderViewHeight;\n  }\n  mHeaderViewMaxHeight=mHeaderViewExpandHeight < 0 ? mHeaderViewHeight * 2 : mHeaderViewHeight + mHeaderViewExpandHeight;\n}\n"}
{"nl": "Skip to the start of the next unindented line", "code": "private void skipToNextBlock(){\n  while (!builder.eof()) {\n    if (atTokenSequence(ProjectViewTokenType.NEWLINE,ProjectViewTokenType.IDENTIFIER)) {\n      builder.advanceLexer();\n      return;\n    }\n    builder.advanceLexer();\n  }\n}\n"}
{"nl": "ask view to allow user input", "code": "public void unlockUserInput(){\n  locked=false;\n  getCommandManager().setEnableCritical(true);\n  searchManager.getFindDialogAsToolBar().setEnableCritical(true);\n  if (bottomToolBar != null)   bottomToolBar.setEnabled(true);\n  setCursor(Cursor.getDefaultCursor());\n  getContentPane().setCursor(Cursor.getDefaultCursor());\n}\n"}
{"nl": "Compute a hash code using the hash codes of the underlying objects", "code": "@Override public int hashCode(){\n  return (matcher == null ? 0 : matcher.hashCode()) ^ (action == null ? 0 : action.hashCode());\n}\n"}
{"nl": "Construct command result instance with given arguments", "code": "CommandResult(Process process,Command command){\n  this.process=process;\n  this.command=command;\n}\n"}
{"nl": "Item price", "code": "protected MarketEditQuery price(float value){\n  return unsafeParam(\"price\",value);\n}\n"}
{"nl": "Organizer email (for events)", "code": "public GroupsEditQuery email(String value){\n  return unsafeParam(\"email\",value);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"move dir=up;\");\n}\n"}
{"nl": "Assert these two are of the same class", "code": "protected void ac(Object expected,Object actual){\n  ae(expected.getClass(),actual.getClass());\n}\n"}
{"nl": "adding an item to a position", "code": "public <T extends CoreItem>void addItem(@IntRange(from=0) int position,@NonNull T item){\n  if (position > items.size()) {\n    throw new IndexOutOfBoundsException();\n  }\n  items.add(position,item);\n  notifyItemInserted(position);\n}\n"}
{"nl": "Decodes UTF-16LE", "code": "private void processLE(final char ch[],int offset,final int count){\n  int curPos=0;\n  for (int i=0; i < count; ++i) {\n    final int b0=fBuffer[curPos++] & 0xff;\n    final int b1=fBuffer[curPos++] & 0xff;\n    ch[offset++]=(char)((b1 << 8) | b0);\n  }\n}\n"}
{"nl": "Creates an observable only for the child removed method", "code": "public Observable<FirebaseChildEvent> observeChildMoved(final Query firebaseRef){\n  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.MOVED));\n}\n"}
{"nl": "Add components to save file executing component type check", "code": "@SuppressWarnings({\"rawtypes\"}) public void fileWrite(final Component c,final String parent,final BufferedWriter bw) throws IOException {\n  if (c instanceof JTextField) {\n    if (null != c.getName()) {\n      bw.write(parent);\n      bw.write(\" : \");\n      bw.write(c.getName());\n      bw.write(\" : \");\n      bw.write(((JTextField)c).getText());\n      bw.newLine();\n    }\n  }\n  if (c instanceof JComboBox) {\n    if (null != c.getName()) {\n      bw.write(parent);\n      bw.write(\" : \");\n      bw.write(c.getName());\n      bw.write(\" : \");\n      bw.write(((JComboBox)c).getSelectedItem().toString());\n      bw.newLine();\n    }\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return false;\n}\n"}
{"nl": "This is the SHA-256 hashing function that is performed on the public key", "code": "private byte[] SHA256hash(byte[] tobeHashed){\n  SHA256Digest digester=new SHA256Digest();\n  byte[] retValue=new byte[digester.getDigestSize()];\n  digester.update(tobeHashed,0,tobeHashed.length);\n  digester.doFinal(retValue,0);\n  return retValue;\n}\n"}
{"nl": "Handles mouse release in the user interaction with our model", "code": "public void mouseReleased(@AndroidCoordinate int x,@AndroidCoordinate int y){\n  if (myMouseInteraction != null) {\n    myMouseInteraction.mouseReleased(pxToDp(x),pxToDp(y));\n  }\n  myConstraintModel.requestRender();\n}\n"}
{"nl": "****************************** PALICO WEAPON QUERIES", "code": "public PalicoWeaponCursor queryPalicoWeapons(){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_PALICO_WEAPONS;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=S.COLUMN_ITEMS_RARITY;\n  qh.Limit=null;\n  return new PalicoWeaponCursor(wrapJoinHelper(builderPalicoWeapon(),qh));\n}\n"}
{"nl": "This runnable helps to run animation in an infinite loop", "code": "@Override public void run(){\n  firstWavePath.reset();\n  secondWavePath.reset();\n  shift=shift + speed;\n  invalidate();\n  handler.postDelayed(new WaveRunnable(),16);\n}\n"}
{"nl": "Initialize the internal restTemplate instance", "code": "@PostConstruct protected void init(){\n  logger.debug(\"Create the RestTemplate instance that will be wrapped\");\n  makeRestTemplateWithCustomObjectMapper(restTemplate);\n  logger.debug(\"Set interceptor for authentication\");\n  List<ClientHttpRequestInterceptor> interceptors=Collections.<ClientHttpRequestInterceptor>singletonList(formLoginAuthenticationCsrfTokenInterceptor);\n  restTemplate.setRequestFactory(new InterceptingClientHttpRequestFactory(restTemplate.getRequestFactory(),interceptors));\n}\n"}
{"nl": "Feature switch for initial load entries augmentation (creation of partition-specific query for entries)", "code": "public StatelessHibernateSpaceDataSourceConfigurer augmentInitialLoadEntries(boolean augmentInitialLoadEntries){\n  this.augmentInitialLoadEntries=augmentInitialLoadEntries;\n  return this;\n}\n"}
{"nl": "Tests if a node and endpoint are associated to this group", "code": "public boolean isAssociated(int node,int endpoint){\n  int associationCnt=associations.size();\n  for (int index=0; index < associationCnt; index++) {\n    ZWaveAssociation association=associations.get(index);\n    if (association.getNode() == node && association.getEndpoint() == endpoint) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Persist the given speaker", "code": "public Speaker persist(final Speaker speaker){\n  final String id=UUID.randomUUID().toString();\n  speaker.setId(id);\n  this.speakers.put(id,speaker);\n  return speaker;\n}\n"}
{"nl": "Called when we've noticed an edit of a Java file that is in an app module", "code": "private void recordSimpleJavaEdit(){\nsynchronized (myLock) {\n    mySeenLocalJavaChanges=true;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LikesGetListQuery(VkApiClient client,LikesType type){\n  super(client,\"likes.getList\",GetListResponse.class);\n  type(type);\n}\n"}
{"nl": "%1[fail]%2 %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_GIVEUP(){\n  return new SM_SYSTEM_MESSAGE(1300610);\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-2.226325228634938,-1.156887023657177,-0.643949578356075,-0.2027950777320613,0.305827808237559,+6.42632522863494,5.35688702365718,4.843949578356074,4.40279507773206,3.89417219176244};\n}\n"}
{"nl": "Display a string (can be long) inside a message dialogue", "code": "public static void showString(String title,String content,Dimension dimension){\n  JTextArea area=new JTextArea(content);\n  area.setEditable(false);\n  JScrollPane scroll=new JScrollPane(area);\n  scroll.setPreferredSize(dimension);\n  JOptionPane.showMessageDialog(null,scroll,title,JOptionPane.INFORMATION_MESSAGE);\n}\n"}
{"nl": "Called when a message is received from the server", "code": "@Override public void messageArrived(String topic,MqttMessage message) throws Exception {\n  String messageString=message.toString();\n  System.out.println(\"TrafficService: \" + messageString);\n  if (topic.contains(\"/alert/\")) {\n    receivedTraffic(messageString,AirMapTraffic.TrafficType.Alert);\n  }\n else   if (topic.contains(\"/sa/\")) {\n    receivedTraffic(messageString,AirMapTraffic.TrafficType.SituationalAwareness);\n  }\n}\n"}
{"nl": "TODO: Javadoc", "code": "private static BigInteger parseBigInteger(String whole,String part,int index) throws IllegalArgumentException {\n  if (part == null) {\n    return null;\n  }\n  part=part.substring(0,part.length() - 1);\n  return new BigInteger(part);\n}\n"}
{"nl": "Required for Externalizable", "code": "public AddTypeIndexesResponseInfo(){\n}\n"}
{"nl": "applies the min support filter to taxon classification", "code": "public Map<Integer,Integer> apply() throws CanceledException {\n  Map<Integer,Integer> orphan2AncestorMapping=new HashMap<>();\n  progressListener.setMaximum(tree.getNumberOfNodes());\n  progressListener.setProgress(0);\n  Set<Integer> orphans=new HashSet<>();\n  computeOrphan2AncestorMappingRec(tree.getRoot(),orphan2AncestorMapping,orphans);\n  for (  Integer id : orphans) {\n    orphan2AncestorMapping.put(id,IdMapper.UNASSIGNED_ID);\n  }\n  orphans.clear();\n  return orphan2AncestorMapping;\n}\n"}
{"nl": "start splash animation", "code": "private void startLoadingData(){\n  Random random=new Random();\n  mHandler.postDelayed(null,1000 + random.nextInt(2000));\n}\n"}
{"nl": "Provides Auth0 API access", "code": "@Bean public Auth0Client auth0Client(){\n  return new Auth0Client(clientId,issuer);\n}\n"}
{"nl": "determine the max taxonomic rank index", "code": "private static int determineMaxTaxonomicRankIndex(NodeSet selectedNodes){\n  int maxRankIndex=-1;\n  for (  Node v : selectedNodes) {\n    int rank=TaxonomyData.getTaxonomicRank((Integer)v.getInfo());\n    if (rank != 0) {\n      String rankName=TaxonomicLevels.getName(rank);\n      int index=Basic.getIndex(rankName,ranks);\n      if (index > maxRankIndex)       maxRankIndex=index;\n    }\n  }\n  return maxRankIndex;\n}\n"}
{"nl": "Loads the OWASP database from a JSON file on disk", "code": "private ArrayList<OWASPResult> loadDatabase(){\n  ArrayList<OWASPResult> database=new ArrayList<>();\n  try {\n    Gson gson=new GsonBuilder().create();\n    OWASPResult[] myArray=gson.fromJson(new FileReader(this.DATABASEPATH),OWASPResult[].class);\n    database=new ArrayList<>(Arrays.asList(myArray));\n  }\n catch (  FileNotFoundException|JsonSyntaxException ex) {\n    System.out.println(ex);\n  }\n  return database;\n}\n"}
{"nl": "Compute the hash value of a key", "code": "private static int hashOf(final int key){\n  final int h=key ^ ((key >>> 20) ^ (key >>> 12));\n  return h ^ (h >>> 7) ^ (h >>> 4);\n}\n"}
{"nl": "Saves the current time to the database", "code": "public static boolean saveTime(){\n  log.info(\"Game time saved...\");\n  return DAOManager.getDAO(ServerVariablesDAO.class).store(\"time\",getGameTime().getTime());\n}\n"}
{"nl": "Return the string ip of the next host using round-robin technique", "code": "private String nextHost(){\n  currentHost++;\n  if (currentHost == hostsArray.length) {\n    currentHost=0;\n  }\n  return hostsArray[currentHost];\n}\n"}
{"nl": "puts the MEGAN auxiliary data associated with the dataset", "code": "public void putAuxiliaryData(Map<String,byte[]> label2data) throws IOException {\n  (new RMA2File(file)).replaceAuxiliaryData(label2data);\n}\n"}
{"nl": "Do a deep clone of an object using reflection", "code": "public static Object cloneWithSerialization(Object o){\n  if (o == null) {\n    return null;\n  }\n  try {\n    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();\n    ObjectOutputStream objOut=new ObjectOutputStream(outputStream);\n    objOut.writeObject(o);\n    ByteArrayInputStream inputStream=new ByteArrayInputStream(outputStream.toByteArray());\n    ObjectInputStream objIn=new ObjectInputStream(inputStream);\n    return objIn.readObject();\n  }\n catch (  Exception e) {\n    return null;\n  }\n}\n"}
{"nl": "Updates the internal rule buffer", "code": "public void update(final Long pId,final Object pValue,final String pValueDesc,final Timestamp pTimestamp){\n  final RuleBufferObject bufferObj;\n  LOG.trace(pId + \" entering update()\");\nsynchronized (BUFFER_LOCK) {\n    if (!RULE_OBJECT_BUF.containsKey(pId)) {\n      bufferObj=new RuleBufferObject(pId,pValue,pValueDesc,pTimestamp);\n      RULE_OBJECT_BUF.put(pId,bufferObj);\n    }\n else {\n      bufferObj=(RuleBufferObject)RULE_OBJECT_BUF.get(pId);\n      bufferObj.update(pValue,pValueDesc,pTimestamp);\n    }\n    scheduleCacheUpdaterTask(pId);\n  }\n  LOG.trace(pId + \" leaving update()\");\n}\n"}
{"nl": "match header line with query name", "code": "public static boolean matchName(String queryName,byte[] line,int lineLength){\n  int start=0;\n  if (line[start] == '>' || line[0] == '@')   start++;\n  while (Character.isWhitespace(line[start]) && start < lineLength)   start++;\n  int end=start;\n  while (!Character.isWhitespace(line[end]) && end < lineLength) {\n    end++;\n  }\n  if (end - start != queryName.length())   return false;\n  for (int i=0; i < queryName.length(); i++) {\n    if (queryName.charAt(i) != (char)line[start + i])     return false;\n  }\n  return true;\n}\n"}
{"nl": "Specify if you want the output to be indented or not", "code": "public ResourcesPoet indent(boolean indent){\n  this.indent=indent;\n  return this;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  final ChartViewer viewer=(ChartViewer)getViewer();\n  return viewer.getActiveLabelsJList() != null && viewer.getActiveLabelsJList().getSelectedIndex() != -1;\n}\n"}
{"nl": "Checks whether given string is null or empty", "code": "public static boolean isEmpty(@Nullable String s){\n  return s == null || s.isEmpty();\n}\n"}
{"nl": "fit coordinates into rect", "code": "private static void fitToRectangle(final PhyloTreeView treeView,final Rectangle rect){\n  final PhyloTree tree=treeView.getPhyloTree();\n  double minX=Integer.MAX_VALUE;\n  double minY=Integer.MAX_VALUE;\n  double maxX=Integer.MIN_VALUE;\n  double maxY=Integer.MIN_VALUE;\n  for (Node v=tree.getFirstNode(); v != null; v=tree.getNextNode(v)) {\n    final Point2D loc=treeView.getLocation(v);\n    minX=Math.min(minX,loc.getX());\n    minY=Math.min(minY,loc.getY());\n    maxX=Math.max(maxX,loc.getX());\n    maxY=Math.max(maxY,loc.getY());\n  }\n  final double mX=((maxX - minX) != 0 ? rect.getWidth() / (maxX - minX) : 0);\n  final double mY=((maxY - minY) != 0 ? rect.getHeight() / (maxY - minY) : 0);\n  for (Node v=tree.getFirstNode(); v != null; v=tree.getNextNode(v)) {\n    final Point2D loc=treeView.getLocation(v);\n    treeView.setLocation(v,rect.getX() + mX * (loc.getX() - minX),rect.getY() + mY * (loc.getY() - minY));\n  }\n}\n"}
{"nl": "expand the given node", "code": "public void expand(DefaultMutableTreeNode v){\n  if (v == null)   v=(DefaultMutableTreeNode)fileTree.getModel().getRoot();\n  for (Enumeration descendants=v.breadthFirstEnumeration(); descendants.hasMoreElements(); ) {\n    v=(DefaultMutableTreeNode)descendants.nextElement();\n    fileTree.expandPath(new TreePath(v.getPath()));\n  }\n}\n"}
{"nl": "remove item click listener from this view", "code": "public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){\n  return clickListeners.remove(itemClickListener);\n}\n"}
{"nl": "computes percent identity", "code": "public static int computePercentIdentity(DAAMatchRecord match){\n  return match.getIdentities() * 100 / match.getLen();\n}\n"}
{"nl": "Left click the mouse", "code": "public void leftClick() throws InterruptedException {\n  click(InputEvent.BUTTON1_MASK);\n}\n"}
{"nl": "concat an array history into a single INDArry of as many channel as element in the history array", "code": "public static INDArray concat(INDArray[] history){\n  INDArray arr=Nd4j.concat(0,history);\n  if (arr.shape().length > 2)   arr.muli(1 / 256f);\n  return arr;\n}\n"}
{"nl": "Assumes ascii!!", "code": "private static boolean match(String s,byte[] bytes,int start,int end){\n  int length=s.length();\n  if (start + length > end) {\n    return false;\n  }\n  for (int i=0; i < length; i++) {\n    if ((char)bytes[start + i] != s.charAt(i)) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Gets whether this information flow problem has initial seeds", "code": "public boolean hasInitialSeeds(){\n  return !this.initialSeeds.isEmpty();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoPutTagQuery(VkApiClient client,UserActor actor,int userId,int videoId){\n  super(client,\"video.putTag\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n  videoId(videoId);\n}\n"}
{"nl": "Check if an IP Address is valid", "code": "public static boolean isValidIPAddress(String IPAddress){\n  return Patterns.IP_ADDRESS.matcher(IPAddress).matches();\n}\n"}
{"nl": "Types of communities to return", "code": "public GroupsGetQueryWithExtended filter(List<GroupsGetFilter> value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "Stores a list of objects read back from the fallback mechanism into a db table", "code": "public final void storeDataBack(final List data) throws SQLException {\n  for (int i=0; i < data.size(); i++) {\n    if (data.get(i) instanceof FallbackImpl) {\n      if (!((FallbackImpl)data.get(i)).toString().equals(FallbackImpl.ERROR)) {\n        storage.add(storage);\n      }\n else {\n        throw new SQLException(\"Connection to the DB has been lost\");\n      }\n    }\n  }\n}\n"}
{"nl": "Add a boolean to the config", "code": "public ResourcesPoet addBool(String name,String value){\n  Element element=document.createElement(\"bool\");\n  element.setAttribute(\"name\",name);\n  element.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(element);\n  return this;\n}\n"}
{"nl": "Gets a SerialMessage with the SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE command", "code": "public SerialMessage stopLevelChangeMessage(){\n  logger.debug(\"NODE {}: Creating new message for command SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE\",getNode().getNodeId());\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);\n  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE};\n  result.setMessagePayload(newPayload);\n  return result;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public OrdersGetAmountQuery(VkApiClient client,UserActor actor,int userId,String... votes){\n  super(client,\"orders.getAmount\",Amount.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n  votes(votes);\n}\n"}
{"nl": "Checks for an error in the response", "code": "private void checkForError(final Document document,List<String> expectedCodes) throws DASTProxyException {\n  LOGGER.debug(\"Inside AppScanEnterpriseRestService.checkForError function.\");\n  final Element rootElement=document.getDocumentElement();\n  LOGGER.debug(\"Inside AppScanEnterpriseRestService.checkForError function...rootElement=\" + rootElement);\n  if (\"error\".equalsIgnoreCase(rootElement.getTagName())) {\n    LOGGER.debug(\"Error has occured on request to ASE\");\n    LOGGER.debug(\"Returned Error Codes are:\");\n    final NodeList nodes=rootElement.getChildNodes();\n    for (int i=0; i < nodes.getLength(); i++) {\n      final Node node=nodes.item(i);\n      final String nodeName=node.getLocalName();\n      if (\"code\".equalsIgnoreCase(nodeName)) {\n        final String code=node.getChildNodes().item(0).getNodeValue();\n        LOGGER.debug(code);\n        if (expectedCodes != null && expectedCodes.contains(code)) {\n          LOGGER.debug(\"Expected error code found. Returning to normal execution\");\n          return;\n        }\n      }\n else       if (\"message\".equalsIgnoreCase(nodeName)) {\n        LOGGER.debug(node.getChildNodes().item(0).getNodeValue());\n      }\n else       if (\"help\".equalsIgnoreCase(nodeName)) {\n        LOGGER.debug(node.getAttributes().item(0).getNodeValue());\n      }\n    }\n    LOGGER.debug(\"Inside AppScanEnterpriseRestService.checkForError function...exception...\" + document.toString());\n    throw new DASTProxyException(\"Unexpected error on return of response from ASE\");\n  }\n  LOGGER.debug(\"Inside AppScanEnterpriseRestService.checkForError function...no error\");\n}\n"}
{"nl": "used for MODE_SHOW_DATA_OF_THIS_MONTH", "code": "@Override public int daysCompleteTheTask(){\n  int k=0;\n  for (int i=1; i <= daysOfCurrentMonth(); i++) {\n    k+=data[i] ? 1 : 0;\n  }\n  return k;\n}\n"}
{"nl": "Set key", "code": "public StorageGetQuery key(String value){\n  return unsafeParam(\"key\",value);\n}\n"}
{"nl": "all use default class, simply Tinker install method", "code": "public static void sampleInstallTinker(ApplicationLike appLike){\n  if (isInstalled) {\n    TinkerLog.w(TAG,\"install tinker, but has installed, ignore\");\n    return;\n  }\n  TinkerInstaller.install(appLike);\n  isInstalled=true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoRemoveFromAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){\n  super(client,\"video.removeFromAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  videoId(videoId);\n}\n"}
{"nl": "Post File to Server", "code": "public void uploadFile(TRSHttpRequest request,TRSFileUploadHttpCallback callback){\n  mProvider.uploadFile(request,callback);\n}\n"}
{"nl": "Check whether x contains Infinity", "code": "public static boolean isAnyInfinity(double[] x){\n  for (  double value : x) {\n    if (Double.isInfinite(value)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Start main app activity", "code": "public void navigateToMain(){\n  activity.startActivity(new Intent(activity,MainActivity.class));\n  activity.finish();\n}\n"}
{"nl": "Performs a lookup to see if index contains a given key", "code": "public boolean containsKey(DataType key){\n  return lookupKey(key).hasNext();\n}\n"}
{"nl": "Used for signup", "code": "public Authentication(String firstName,String lastName,String mobile,String email,String password,String userType){\n  this.firstName=firstName;\n  this.lastName=lastName;\n  this.mobile=mobile;\n  this.email=email;\n  this.password=password;\n  this.userType=userType;\n}\n"}
{"nl": "Block by sleeping in a loop", "code": "public static PhasedBackoffWaitStrategy withSleep(long spinTimeout,long yieldTimeout,TimeUnit units){\n  return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new SleepingWaitStrategy(0));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId,ReportReason reason){\n  super(client,\"market.reportComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n  reason(reason);\n}\n"}
{"nl": "Initialize an AirMapControlledAirspaceProperties from JSON", "code": "public AirMapControlledAirspaceProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n"}
{"nl": "/*    ", "code": "@deprecated RuleBasedTransliterator(String ID,Data data,UnicodeFilter filter){\n  super(ID,filter);\n  this.data=data;\n  setMaximumContextLength(data.ruleSet.getMaximumContextLength());\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  final ClusterViewer viewer=getViewer();\n  int max=viewer.getPcoaTab().getPCoA().getLoadingVectorsBiPlot().size();\n  np.matchIgnoreCase(\"set biplotSize=\");\n  int number=np.getInt(0,max);\n  np.matchIgnoreCase(\";\");\n  viewer.getPcoaTab().setBiplotSize(number);\n}\n"}
{"nl": "skip n bytes", "code": "public int skipBytes(int n) throws IOException {\n  int remaining=n;\n  while (remaining > 0) {\n    remaining-=(int)bif.skip(remaining);\n  }\n  position+=n;\n  return n;\n}\n"}
{"nl": "Below method will be used to show statistic log as table", "code": "public void logStatisticsAsTableDriver(){\nsynchronized (lock) {\n    Iterator<Map.Entry<String,List<QueryStatistic>>> entries=queryStatisticsMap.entrySet().iterator();\n    while (entries.hasNext()) {\n      Map.Entry<String,List<QueryStatistic>> entry=entries.next();\n      String queryId=entry.getKey();\n      if (StringUtils.isEmpty(queryId)) {\n        entries.remove();\n      }\n else {\n        long interval=System.nanoTime() - Long.parseLong(queryId);\n        if (interval > QueryStatisticsConstants.CLEAR_STATISTICS_TIMEOUT) {\n          entries.remove();\n        }\n else {\n          if (entry.getValue().size() >= 2) {\n            String tableInfo=collectDriverStatistics(entry.getValue(),queryId);\n            if (null != tableInfo) {\n              LOGGER.statistic(tableInfo);\n              entries.remove();\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Update all the traffic projections based on their heading and ground speed", "code": "private void updateTrafficProjections(){\n  List<AirMapTraffic> updated=new ArrayList<>();\n  for (  AirMapTraffic traffic : allTraffic) {\n    if (traffic.getGroundSpeedKt() > -1 && traffic.getTrueHeading() > -1) {\n      allTraffic.remove(traffic);\n      Coordinate projected=projectedCoordinate(traffic);\n      traffic.setCoordinate(projected);\n      traffic.setShowAlert(false);\n      allTraffic.add(traffic);\n      updated.add(traffic);\n    }\n  }\n  notifyUpdated(updated);\n}\n"}
{"nl": "recursively print a summary", "code": "@Override public void listSummaryRec(NodeSet selectedNodes,Node v,int indent,Writer outs) throws IOException {\n  int id=(Integer)v.getInfo();\n  final String name=classification.getName2IdMap().get(id);\n  NodeData data=(super.getNodeData(v));\n  if ((selectedNodes == null || selectedNodes.contains(v))) {\n    if (data.getCountSummarized() > 0) {\n      for (int i=0; i < indent; i++)       outs.write(\" \");\n      outs.write(name + \": \" + data.getCountSummarized()+ \"\\n\");\n    }\n  }\n  if (getCollapsedIds().contains(id)) {\n    return;\n  }\n  for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {\n    listSummaryRec(selectedNodes,f.getOpposite(v),indent + 2,outs);\n  }\n}\n"}
{"nl": "return a fastA representation in string", "code": "public String toFastA(){\n  return toFastA(false,0,0,getNumberOfSequences() - 1,getLength());\n}\n"}
{"nl": "Convert native data format (CSVReader) to stream of templates", "code": "private Stream<String> resolve(String template,CSVReader reader) throws IOException {\n  String[] header=reader.readNext();\n  return partitionedStream(reader.iterator()).map(null).map(null);\n}\n"}
{"nl": "callback for preference changes", "code": "@Override public void onPreferenceSettingsChanged(SharedPreferences sharedPreferences,String name){\n  Toast.makeText(this,\"preference with key \" + name + \" changed\",Toast.LENGTH_LONG).show();\n}\n"}
{"nl": "Deletes the node and adds it neighbours for validation", "code": "void deleteNode(){\n  vertex.edges(Direction.BOTH).forEachRemaining(null);\n  mindmapsGraph.getConceptLog().removeConcept(this);\n  vertex.remove();\n  vertex=null;\n}\n"}
{"nl": "Given a 16 bit value (represented as an int), extract the high eight bits and return them", "code": "private final static byte hibyte(int val){\n  return (byte)(val >>> 8);\n}\n"}
{"nl": "Inflate views provided by default add them into layout", "code": "public void inflateDefaultOverlappingViews(){\n  if (!mAreDefaultViewsInflated) {\n    mAreDefaultViewsInflated=true;\n    Context context=getContext();\n    mErrorView=new ErrorView(context);\n    mLoadingView=new LoadingView(context);\n    mNoConnectionView=new NoConnectionView(context);\n    mSuccessView=new SuccessView(context);\n    mErrorView.setVisibility(GONE);\n    mLoadingView.setVisibility(GONE);\n    mNoConnectionView.setVisibility(GONE);\n    mSuccessView.setVisibility(GONE);\n    addOverlappingView(mErrorView);\n    addOverlappingView(mLoadingView);\n    addOverlappingView(mNoConnectionView);\n    addOverlappingView(mSuccessView);\n    if (mInitialViewId != NONE_VIEW) {\nswitch (mInitialViewId) {\ncase SUCCESS_VIEW:\n        showSuccess();\n      break;\ncase ERROR_VIEW:\n    showErrorMessage();\n  break;\ncase NO_CONNECTION_VIEW:\nshowNoConnection();\nbreak;\ncase LOADING_VIEW:\nshowLoading();\nbreak;\ndefault :\nbreak;\n}\n}\n}\n}\n"}
{"nl": "Converts this object to its String representation", "code": "public String toString(){\n  return \"CMUVoice\";\n}\n"}
{"nl": "This method checks the time deadband and according to the result it sends the updated value to the server", "code": "private void sendValueWithTimeDeadbandCheck(final SourceDataTag sourceDataTag,final ValueUpdate castedUpdate,final SourceDataTagQuality newSDQuality){\n  if (sourceDataTag.getAddress().isTimeDeadbandEnabled()) {\n    this.equipmentLogger.debug(\"sendInvalidTag - passing update to time-deadband scheduler for tag \" + sourceDataTag.getId());\n    this.equipmentTimeDeadband.addToTimeDeadband(sourceDataTag,castedUpdate,newSDQuality);\n  }\n else {\n    if (this.equipmentTimeDeadband.getSdtTimeDeadbandSchedulers().containsKey(sourceDataTag.getId())) {\n      this.equipmentLogger.debug(\"sendInvalidTag - remove time-deadband scheduler for tag \" + sourceDataTag.getId());\n      this.equipmentTimeDeadband.removeFromTimeDeadband(sourceDataTag);\n    }\n    this.equipmentLogger.debug(format(\"sendInvalidTag - invalidating and sending invalid tag (%d) update to the server\",sourceDataTag.getId()));\n    SourceDataTagValue newSDValue=sourceDataTag.update(castedUpdate,newSDQuality);\n    if (newSDValue == null) {\n      this.equipmentLogger.warn(\"sendInvalidTag - method called with 0(OK) quality code for tag \" + sourceDataTag.getId() + \". This should normally not happen! sendTagFiltered() method should have been called before.\");\n    }\n else {\n      this.processMessageSender.addValue(newSDValue);\n      this.dynamicTimeDeadbandFilterer.recordTag(sourceDataTag);\n    }\n  }\n}\n"}
{"nl": "are there any groups defined?", "code": "public boolean hasGroups(){\n  for (  String sampleName : sampleOrder) {\n    if (getGroupId(sampleName) != null)     return true;\n  }\n  return false;\n}\n"}
{"nl": "Enables or disables update header", "code": "public ElasticListView enableUpdateHeader(boolean enable) throws IllegalStateException {\n  if (enable) {\n    if (!mEnableUpdater) {\n      if (getHeaderViewsCount() > 0) {\n        throw new IllegalStateException(\"Make sure there is no \" + \"other headers in ListView before enable update header\");\n      }\n      super.addHeaderView(mUpdateHeader,null,true);\n    }\n  }\n else {\n    if (mEnableUpdater) {\n      removeHeaderView(mUpdateHeader);\n    }\n  }\n  mEnableUpdater=enable;\n  return this;\n}\n"}
{"nl": "wraps the enqueueBlocked method of the threadpool", "code": "public void enqueueBlocked(E o){\n  try {\n    this.execute(new TaskWrapper<E>(o,_consumerObject));\n  }\n catch (  RejectedExecutionException ree) {\n    if (_logger.isLoggable(Level.INFO)) {\n      _logger.log(Level.INFO,\"Task cannot be accepted for execution.\",ree);\n    }\n  }\n}\n"}
{"nl": "use a lucky egg", "code": "public UseItemXpBoostResponse useLuckyEgg() throws RemoteServerException, LoginFailedException {\n  UseItemXpBoostMessage xpMsg=UseItemXpBoostMessage.newBuilder().setItemId(ItemId.ITEM_LUCKY_EGG).build();\n  ServerRequest req=new ServerRequest(RequestType.USE_ITEM_XP_BOOST,xpMsg);\n  api.getRequestHandler().sendServerRequests(req);\n  try {\n    UseItemXpBoostResponse response=UseItemXpBoostResponse.parseFrom(req.getData());\n    Log.i(\"Main\",\"Use incense result: \" + response.getResult());\n    return response;\n  }\n catch (  InvalidProtocolBufferException e) {\n    throw new RemoteServerException(e);\n  }\n}\n"}
{"nl": "This method will not propagate any exceptions to the caller", "code": "public static boolean checkStartConditions(QuestEnv env,boolean warn){\n  try {\n    return checkStartConditionsImpl(env,warn);\n  }\n catch (  Exception ex) {\n    log.error(\"QE: exception in checkStartCondition\",ex);\n  }\n  return false;\n}\n"}
{"nl": "Clear all of the groups within this track", "code": "public void clearGroups(){\n  groups.clear();\n}\n"}
{"nl": "Left click the mouse with", "code": "public void leftClick(int delay) throws InterruptedException {\n  click(InputEvent.BUTTON1_MASK,delay);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int write(int offset,int length){\n  int newLength=this.charsLength + length;\n  ensureCapacity(newLength);\n  this.charsLength=newLength;\n  int charsOffset=this.chars.length - this.charsLength;\n  while (length > 0) {\n    this.chars[(charsOffset++)]=this.strings.charAt(offset++);\n    length--;\n  }\n  return this.charsLength;\n}\n"}
{"nl": "Helper to raise a JMSException when an I/O error occurs", "code": "private final void raise(IOException exception) throws JMSException {\n  JMSException error=new JMSException(exception.toString());\n  error.setLinkedException(exception);\n  throw error;\n}\n"}
{"nl": "Convert an input stream to an bgr spectrum image", "code": "public INDArray toBgr(InputStream inputStream){\n  try {\n    BufferedImage image=ImageIO.read(inputStream);\n    return toBgr(image);\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Unable to load image\",e);\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"show histogram taxonId=\");\n  int taxId=np.getInt();\n  np.matchIgnoreCase(\";\");\n  Document doc=getDir().getDocument();\n  int[] values=computeHistogram(taxId,doc);\n  System.err.println(\"Histogram for taxonId=\" + taxId + \":\");\n  for (  int value : values) {\n    System.err.println(value);\n  }\n}\n"}
{"nl": "Required for Externalizable", "code": "public CountModifiers(){\n}\n"}
{"nl": "create new array with zero entries", "code": "private static Integer[] newZeroedIntegerArray(int size){\n  Integer[] result=new Integer[size];\n  for (int i=0; i < size; i++)   result[i]=0;\n  return result;\n}\n"}
{"nl": "Reduce the specified columns by taking the maximum value", "code": "public Builder maxColumn(String... columns){\n  return add(ReduceOp.Max,columns);\n}\n"}
{"nl": "ask view to allow user input", "code": "public void unlockUserInput(){\n  locked=false;\n  samplesSpreadSheet.unlockUserInput();\n  getCommandManager().setEnableCritical(true);\n  frame.setCursor(Cursor.getDefaultCursor());\n  searchManager.getFindDialogAsToolBar().setEnableCritical(true);\n  frame.setCursor(Cursor.getDefaultCursor());\n  updateStatusBar();\n}\n"}
{"nl": "Comparison based on ICAO", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAirportProperties && getIcao().equals(((AirMapAirportProperties)o).getIcao());\n}\n"}
{"nl": "To create the final output of the Node and Data blocks", "code": "private static void createOutputMap(Map<String,List<Distributable>> outputMap,int blocksPerNode,Set<Distributable> uniqueBlocks,Map<String,List<Distributable>> nodeAndBlockMapping,List<String> activeNodes){\n  ArrayList<NodeMultiBlockRelation> multiBlockRelations=new ArrayList<>(nodeAndBlockMapping.size());\n  for (  Map.Entry<String,List<Distributable>> entry : nodeAndBlockMapping.entrySet()) {\n    multiBlockRelations.add(new NodeMultiBlockRelation(entry.getKey(),entry.getValue()));\n  }\n  Collections.sort(multiBlockRelations);\n  for (  NodeMultiBlockRelation nodeMultiBlockRelation : multiBlockRelations) {\n    String nodeName=nodeMultiBlockRelation.getNode();\n    String activeExecutor=nodeName;\n    if (null != activeNodes) {\n      activeExecutor=getActiveExecutor(activeNodes,nodeName);\n      if (null == activeExecutor) {\n        continue;\n      }\n    }\n    int nodeCapacity=0;\n    for (    Distributable block : nodeMultiBlockRelation.getBlocks()) {\n      if (uniqueBlocks.contains(block)) {\n        if (null == outputMap.get(activeExecutor)) {\n          List<Distributable> list=new ArrayList<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);\n          outputMap.put(activeExecutor,list);\n        }\n        if (nodeCapacity < blocksPerNode) {\n          List<Distributable> infos=outputMap.get(activeExecutor);\n          infos.add(block);\n          nodeCapacity++;\n          uniqueBlocks.remove(block);\n        }\n else {\n          break;\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "load color table from data table", "code": "public void loadColorTableFromDataTable(){\n  if (getDataTable().getColorTable() != null) {\n    getChartColorManager().setColorTable(getDataTable().getColorTable(),getDataTable().isColorByPosition());\n    if (getDataTable().getColorTableHeatMap() != null) {\n      getChartColorManager().setHeatMapTable(getDataTable().getColorTableHeatMap());\n      getDataTable().setColorTableHeatMap(getChartColorManager().getHeatMapTable().getName());\n    }\n  }\n  if (!getChartColorManager().isUsingProgramColors())   getChartColorManager().loadColorEdits(getDataTable().getColorEdits());\n}\n"}
{"nl": "compute the histogram associated with a given class", "code": "private int[] computeHistogram(int classId,Document doc) throws IOException {\n  IConnector connector=doc.getMeganFile().getDataConnector();\n  Map<String,Integer> matched2count=new HashMap<>();\n  for (IReadBlockIterator it=connector.getReadsIterator(ClassificationType.Taxonomy.toString(),classId,doc.getMinScore(),doc.getMaxExpected(),false,true); it.hasNext(); ) {\n    IReadBlock readBlock=it.next();\n    for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {\n      IMatchBlock matchBlock=readBlock.getMatchBlock(i);\n      if (matchBlock.getBitScore() >= doc.getMinScore() && matchBlock.getExpected() <= doc.getMaxExpected() && matchBlock.getPercentIdentity() >= doc.getMinPercentIdentity()) {\n        String firstLine=matchBlock.getText().split(\"\\n\")[0];\n        Integer count=matched2count.get(firstLine);\n        if (count == null)         matched2count.put(firstLine,1);\n else         matched2count.put(firstLine,count + 1);\n      }\n    }\n  }\n  int[] values=new int[matched2count.size()];\n  int i=0;\n  for (  Integer count : matched2count.values()) {\n    values[i++]=count;\n  }\n  Arrays.sort(values);\n  return values;\n}\n"}
{"nl": "Seek the pointer to <code>offset</code>", "code": "public final void seek(final long offset){\n  try {\n    bs.seek(offset);\n  }\n catch (  IOException e) {\n    System.err.println(\"Seek failed\" + e);\n  }\n}\n"}
{"nl": "Create a candidate for grouping based on a rectangle", "code": "static public ScoutCandidateGroup create(Rectangle group,ScoutWidget[] list,Rectangle[] rectList){\n  BitSet set=new BitSet();\n  int count=0;\n  int groupArea=group.width * group.height;\n  int widgetArea=0;\n  for (int i=1; i < list.length; i++) {\n    if (group.intersects(rectList[i]) && !group.contains(rectList[i])) {\n      return null;\n    }\n    if (group.contains(rectList[i])) {\n      set.set(i);\n      count++;\n      widgetArea+=rectList[i].height * rectList[i].width;\n    }\n  }\n  if (count < 4) {\n    return null;\n  }\n  if (widgetArea * 2 < groupArea) {\n    return null;\n  }\n  ScoutCandidateGroup c=new ScoutCandidateGroup();\n  c.mNorth=group.y;\n  c.mSouth=group.y + group.height;\n  c.mEast=group.x + group.width;\n  c.mWest=group.x;\n  c.mContainSet=set;\n  c.mCount=count;\n  c.mGroupArea=groupArea;\n  c.mWidgetArea=widgetArea;\n  c.mRect=new Rectangle(group);\n  c.mRectList=buildRectList(set,rectList);\n  return c;\n}\n"}
{"nl": "Allows to know if a given calendar instance is set before today", "code": "public static boolean isBeforeToday(Calendar _calendar){\n  return _calendar.before(Calendar.getInstance());\n}\n"}
{"nl": "Execute a command in a specific directory", "code": "public static String execute(String command,String cwd){\n  return execute(command,new File(cwd));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatUsersQueryWithChatIdsFields(VkApiClient client,UserActor actor,List<Integer> chatIds,UserField... fields){\n  super(client,\"messages.getChatUsers\",GetChatUsersChatIdsFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n  fields(fields);\n}\n"}
{"nl": "Sends this packet to all the players in the dimension within the radius", "code": "public void toAllInRadius(int dimension,Vec3d pos,double radius){\n  toAllInRadius(OpenModLoader.getSidedHandler().getServer().worldServerForDimension(dimension),pos,radius);\n}\n"}
{"nl": "Compares two bitmaps and gives the percentage of similarity", "code": "public static float compareEquivalance(Bitmap bitmap1,Bitmap bitmap2){\n  if (bitmap1 == null || bitmap2 == null || bitmap1.getWidth() != bitmap2.getWidth() || bitmap1.getHeight() != bitmap2.getHeight()) {\n    return 0f;\n  }\n  ByteBuffer buffer1=ByteBuffer.allocate(bitmap1.getHeight() * bitmap1.getRowBytes());\n  bitmap1.copyPixelsToBuffer(buffer1);\n  ByteBuffer buffer2=ByteBuffer.allocate(bitmap2.getHeight() * bitmap2.getRowBytes());\n  bitmap2.copyPixelsToBuffer(buffer2);\n  byte[] array1=buffer1.array();\n  byte[] array2=buffer2.array();\n  int len=array1.length;\n  int count=0;\n  for (int i=0; i < len; i++) {\n    if (array1[i] == array2[i]) {\n      count++;\n    }\n  }\n  return ((float)(count)) / len;\n}\n"}
{"nl": "Constructs a feeder", "code": "public DefaultJsonFeeder(Charset charset,int capacity){\n  byteBuf=ByteBuffer.allocate(capacity);\n  charBuf=CharBuffer.allocate(capacity * 2);\n  charBuf.limit(0);\n  decoder=charset.newDecoder();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AppsDeleteAppRequestsQuery(VkApiClient client,UserActor actor){\n  super(client,\"apps.deleteAppRequests\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0,0.5,1};\n}\n"}
{"nl": "Insert all the Vars", "code": "Stream<Concept> insertAll(Map<String,Concept> results){\n  concepts.clear();\n  concepts.putAll(new HashMap<>(results));\n  return vars.stream().map(null);\n}\n"}
{"nl": "Helper static method to generate Shield Instances", "code": "public static <T>T make(Class<T> shieldClass,RxJava2ObsHub rxJava2ObsHub){\n  return inst.make(shieldClass,rxJava2ObsHub,RxJava2ObsHub.class);\n}\n"}
{"nl": "Update function", "code": "public void update(float deltaTime){\n  if (!isPaused && !defeated) {\n    timeTilVictory-=deltaTime;\n    currentDelay-=deltaTime;\n    if (timeTilVictory <= 0.0f) {\n      defeated=true;\n    }\n else     if (currentDelay <= this.min_delay && !playersWarned) {\n      turnOnTracks(chooseNextTrackCodeByPlayers());\n      playersWarned=true;\n    }\n else     if (currentDelay <= 1.0f && !trainsSummoned) {\n      callTrains(nextTrainCode);\n      trainsSummoned=true;\n    }\n else     if (currentDelay <= 0.0625f && !imminentDanger) {\n      turnOffAllTracks();\n      imminentDanger=true;\n    }\n else     if (currentDelay <= 0.0f) {\n      turnOffAllTracks();\n      playersWarned=false;\n      imminentDanger=false;\n      trainsSummoned=false;\n      activeDelays.remove();\n      currentDelay=activeDelays.peek();\n    }\n  }\n}\n"}
{"nl": "Removes an item from one or multiple collections", "code": "public MarketRemoveFromAlbumQuery removeFromAlbum(UserActor actor,int ownerId,int itemId,int... albumIds){\n  return new MarketRemoveFromAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);\n}\n"}
{"nl": "sync network formatting to summary", "code": "public static void syncNetworkFormatting2Summary(ClusterViewer clusterViewer,DataTable megan4Table){\n  System.err.println(\"syncNetworkFormatting2Summary(): not implemented\");\n}\n"}
{"nl": "Creates a new instance of NGramDocumentComparatorAgent", "code": "public NGramDocumentComparatorAgent(){\n  super();\n}\n"}
{"nl": "construct object and \"remember\" how scrollpane is currently centered around middle of screen", "code": "public ScrollPaneAdjuster(JScrollPane scrollPane){\n  this(scrollPane,null);\n}\n"}
{"nl": "Executes the \"jimplify\" operation for a static invocation", "code": "protected void jimplifyStatic(DexBody body){\n  invocation=Jimple.v().newStaticInvokeExpr(getStaticSootMethodRef(),buildParameters(body,true));\n  body.setDanglingInstruction(this);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  TreePath[] paths=inspectorWindow.getDataTree().getSelectionPaths();\n  if (paths != null)   inspectorWindow.collapse(paths);\n else {\n    for (    NodeBase root : inspectorWindow.getClassification2RootNode().values()) {\n      inspectorWindow.collapse(root);\n    }\n  }\n}\n"}
{"nl": "Helper method to have the sync adapter sync immediately", "code": "public static void syncImmediately(Context context){\n  Bundle bundle=new Bundle();\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);\n  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.data_provider_authority),bundle);\n}\n"}
{"nl": "json --> obj", "code": "public static WxNewsMediaResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxNewsMediaResult.class);\n}\n"}
{"nl": "JPA relationship directly exposed as repository", "code": "public JpaRelationshipRepository(JpaModule module,Class<S> sourceResourceClass,Class<T> targetResourceClass){\n  super(module,targetResourceClass);\n  this.sourceResourceClass=sourceResourceClass;\n  JpaMapping<?,S> sourceMapping=module.getMapping(sourceResourceClass);\n  if (sourceMapping != null) {\n    this.sourceEntityClass=sourceMapping.getEntityClass();\n    this.sourceMapper=sourceMapping.getMapper();\n  }\n else {\n    this.sourceEntityClass=sourceResourceClass;\n    this.sourceMapper=IdentityMapper.newInstance();\n  }\n  this.entityMeta=module.getMetaLookup().getMeta(sourceEntityClass).asEntity();\n}\n"}
{"nl": "is a global find possible?", "code": "public boolean isGlobalFindable(){\n  return true;\n}\n"}
{"nl": "start daemon", "code": "private static void start(Context context,Class<?> daemonClazzName,int interval){\n  String cmd=context.getDir(BIN_DIR_NAME,Context.MODE_PRIVATE).getAbsolutePath() + File.separator + DAEMON_BIN_NAME;\n  StringBuilder cmdBuilder=new StringBuilder();\n  cmdBuilder.append(cmd);\n  cmdBuilder.append(\" -p \");\n  cmdBuilder.append(context.getPackageName());\n  cmdBuilder.append(\" -s \");\n  cmdBuilder.append(daemonClazzName.getName());\n  cmdBuilder.append(\" -t \");\n  cmdBuilder.append(interval);\n  try {\n    Runtime.getRuntime().exec(cmdBuilder.toString()).waitFor();\n  }\n catch (  IOException|InterruptedException e) {\n    Log.e(TAG,\"start daemon error: \" + e.getMessage());\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set edgeWidth=\");\n  int width=np.getInt(0,1000);\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof GraphView) {\n    boolean changed=false;\n    GraphView viewer=(GraphView)getViewer();\n    for (    Edge e : viewer.getSelectedEdges()) {\n      viewer.setLineWidth(e,width);\n      changed=true;\n    }\n    if (changed) {\n      viewer.repaint();\n    }\n  }\n}\n"}
{"nl": "Deletes a favorite", "code": "@DELETE @Path(\"/{experimentID}\") @ApiOperation(value=\"Removes a favorite.\",response=Response.class,httpMethod=\"DELETE\",protocols=\"https\") @Timed(name=\"deleteFavorite\") public Response deleteFavorite(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authHeader,@PathParam(\"experimentID\") @ApiParam(value=\"Experiment ID\") final Experiment.ID experimentID){\n  UserInfo.Username userName=authorization.getUser(authHeader);\n  List<Experiment.ID> favoriteList=favorites.deleteFavorite(userName,experimentID);\n  return httpHeader.headers(Response.Status.OK).entity(prepareResponseEntity(favoriteList)).build();\n}\n"}
{"nl": "Reset all data of this shape ripple entries", "code": "public void reset(){\n  isRender=false;\n  fractionValue=-1;\n  radiusSize=0;\n  originalColorValue=0;\n}\n"}
{"nl": "Utility class, do not create instances", "code": "private LayoutMetadata(){\n}\n"}
{"nl": "erase the tree", "code": "public void clear(){\n  final DefaultTreeModel model=(DefaultTreeModel)dataTree.getModel();\n  for (  NodeBase root : classification2RootNode.values()) {\n    root.removeAllChildren();\n    model.nodeStructureChanged(root);\n  }\n}\n"}
{"nl": "Constructs GameTimeUpdater to update the given GameTime", "code": "public GameTimeUpdater(GameTime time){\n  this.time=time;\n}\n"}
{"nl": "Convert this to JSON", "code": "public JsonObject toJson(){\n  JsonObject json=new JsonObject();\n  json.put(\"statusCode\",statusCode.code());\n  if (body != null) {\n    json.put(\"body\",body.toString());\n  }\n  json.put(\"headers\",headers.names().stream().map(null).reduce(new JsonArray(),null,null));\n  return json;\n}\n"}
{"nl": "Method exists in DuplicatingStyleVisitor but is marked private", "code": "private OtherText copy(OtherText otherText){\n  if (otherText == null)   return null;\n  OtherTextImpl copy=new OtherTextImpl();\n  copy.setTarget(otherText.getTarget());\n  copy.setText(copy(otherText.getText()));\n  return copy;\n}\n"}
{"nl": "when string[] is null return blank array", "code": "public static String[] nullToBlank(final String[] stringArray){\n  String[] result=stringArray;\n  if (stringArray == null) {\n    result=new String[]{};\n  }\n  return result;\n}\n"}
{"nl": "load the user's preferred editor to edit a query", "code": "private String runEditor() throws IOException {\n  Map<String,String> env=System.getenv();\n  String editor=Optional.ofNullable(env.get(\"EDITOR\")).orElse(DEFAULT_EDITOR);\n  ProcessBuilder builder=new ProcessBuilder(\"/bin/bash\",\"-c\",editor + \" </dev/tty >/dev/tty \" + tempFile.getAbsolutePath());\n  try {\n    builder.start().waitFor();\n  }\n catch (  InterruptedException e) {\n    throw new RuntimeException(e);\n  }\n  return String.join(\"\\n\",Files.readAllLines(tempFile.toPath()));\n}\n"}
{"nl": "is this object contained in the SL ?", "code": "public boolean contains(T obj){\n  lock.lock();\n  try {\n    return contains_impl(obj);\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "Convenience method: gets the normalization number encoded in the parameter string", "code": "public static int parseNormalizedTo(String parameterString){\n  try {\n    if (parameterString != null) {\n      NexusStreamParser np=new NexusStreamParser(new StringReader(parameterString));\n      while (np.peekNextToken() != NexusStreamParser.TT_EOF) {\n        if (np.peekMatchIgnoreCase(\"normalizedTo=\")) {\n          np.matchIgnoreCase(\"normalizedTo=\");\n          return np.getInt();\n        }\n        if (np.peekMatchIgnoreCase(\"normalized_to=\")) {\n          np.matchIgnoreCase(\"normalized_to=\");\n          return np.getInt();\n        }\n        np.getWordRespectCase();\n      }\n    }\n  }\n catch (  Exception ex) {\n  }\n  return 0;\n}\n"}
{"nl": "Adds collection of log entries", "code": "void addLogEntry(Collection<LogEntry> browserLogEntries){\n  logEntries.addAll(browserLogEntries);\n}\n"}
{"nl": "try delete the temp version files", "code": "public void cleanPatchByVersion(File patchFile){\n  if (patchDirectory == null || patchFile == null || !patchFile.exists()) {\n    return;\n  }\n  String versionName=SharePatchFileUtil.getPatchVersionDirectory(SharePatchFileUtil.getMD5(patchFile));\n  cleanPatchByVersion(versionName);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n"}
{"nl": "This method closes all the file descriptors that could be still opened before destroying the object", "code": "public final void finalize(){\n  try {\n    closeFallbackInputStream();\n    closeFallbackOutputStream();\n    closeCounterDataInputStream();\n    closeCounterDataOutputStream();\n  }\n catch (  Exception e) {\n    LOG.error(\"finalize() - The opened streams to the files could not be closed\");\n  }\n}\n"}
{"nl": "Sort order", "code": "public VideoGetCommentsQueryWithExtended sort(VideoGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Creates a new channel builder", "code": "public static ChannelBuilder create(String name){\n  if (exists(name))   throw new IllegalArgumentException(String.format(\"Channel %s already exists\",name));\n  return new ChannelBuilder(name);\n}\n"}
{"nl": "Parse an XML Configuration from a File", "code": "public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {\n  Document document=builder.parse(xmlFile);\n  return (parseConfiguration(document));\n}\n"}
{"nl": "Changes the default permission for a flag, will not affect direct permissions and restrictions", "code": "public void allow(PermissionFlag flag){\n  generalPermissions.remove(flag);\n}\n"}
{"nl": "Given a collection of widgets infer a good group choice", "code": "public static ConstraintTableLayout inferGroup(ArrayList<ConstraintWidget> widgets){\n  ScoutGroup group=new ScoutGroup(widgets.toArray(new ConstraintWidget[widgets.size()]));\n  ConstraintTableLayout ret=new ConstraintTableLayout();\n  if (group.mCols * group.mRows >= widgets.size()) {\n    ret.setNumRows(group.mRows);\n    ret.setNumCols(group.mCols);\n  }\n  if (group.mSupported) {\n    for (int i=0; i < group.mCols; i++) {\n      ret.setColumnAlignment(i,group.mColAlign[i]);\n    }\n  }\n  return ret;\n}\n"}
{"nl": "Reset BASIC authentication fields for external system entity", "code": "private static ExternalSystem resetBasicFields(ExternalSystem input){\n  input.setUsername(null);\n  input.setPassword(null);\n  return input;\n}\n"}
{"nl": "Parses the specified string using the specified shape format", "code": "public static Shape parse(String s,ShapeFormat shapeFormat){\n  try {\n    return fromSpatial4JShape(getReader(shapeFormat).read(s));\n  }\n catch (  IOException e) {\n    throw new IllegalStateException(\"Failed to parse shape using \" + shapeFormat,e);\n  }\ncatch (  ParseException e) {\n    throw new IllegalArgumentException(\"Failed to parse shape using \" + shapeFormat,e);\n  }\n}\n"}
{"nl": "Add new user role mapping", "code": "@Override public long addUserRole(UserRole userRole){\n  return sessionTemplate.insert(NAMESPACE + \".addUserRole\",userRole);\n}\n"}
{"nl": "Creates a reference to an object in the given index of the stack", "code": "protected LuaObject(LuaState L,int index){\nsynchronized (L) {\n    this.L=L;\n    registerValue(index);\n  }\n}\n"}
{"nl": "Resumes audio output", "code": "public void resume(){\n}\n"}
{"nl": "A selection event in the Annotate Source Editor", "code": "private void textSelectionChanged(ITextSelection selection){\n  lastSelectionWasText=true;\n  AnnotateBlock match=null;\n  for (Iterator iterator=svnAnnotateBlocks.iterator(); iterator.hasNext(); ) {\n    AnnotateBlock block=(AnnotateBlock)iterator.next();\n    if (block.contains(selection.getStartLine())) {\n      match=block;\n      break;\n    }\n  }\n  if (match == null) {\n    return;\n  }\n  StructuredSelection listSelection=new StructuredSelection(match);\n  viewer.setSelection(listSelection,true);\n}\n"}
{"nl": "Checks if account is already expired or not", "code": "public static boolean isAccountExpired(Account account){\n  AccountTime accountTime=account.getAccountTime();\n  return accountTime != null && accountTime.getExpirationTime() != null && accountTime.getExpirationTime().getTime() < System.currentTimeMillis();\n}\n"}
{"nl": "Creates an exception with a detailed message and it indicates the number of objects that had been already committed", "code": "public IDBPersistenceException(final String msg,final int committed){\n  super(msg);\n  this.committed=committed;\n}\n"}
{"nl": "Update player ranks based on quota for all players (online/offline)", "code": "private void updateLimitedRanks(){\n  updateAllRanksForRace(Race.ASMODIANS,AbyssRankEnum.GRADE9_SOLDIER.getRequiredAp(),RankingConfig.TOP_RANKING_MAX_OFFLINE_DAYS);\n  updateAllRanksForRace(Race.ELYOS,AbyssRankEnum.GRADE9_SOLDIER.getRequiredAp(),RankingConfig.TOP_RANKING_MAX_OFFLINE_DAYS);\n}\n"}
{"nl": "Returns true if field sample is set (has been assigned a value) and false otherwise", "code": "public boolean isSetSample(){\n  return __isset_bit_vector.get(__SAMPLE_ISSET_ID);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallEditCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"wall.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "ResetNodePool on SchemaParsingConfig", "code": "public void resetNodePool(){\n  ((SchemaParsingConfig)config).resetNodePool();\n}\n"}
{"nl": "Adds a Job, and starts a Scheduler when none was yet started", "code": "protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){\n  String jobName=clazz.getName();\n  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();\n  JobDetail job=new JobDetail(jobName,jobGroup,clazz);\n  job.setDurability(false);\n  job.setVolatility(true);\n  job.setDescription(jobName);\n  try {\n    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);\n    if (scheduler == null) {\n      if (schedulerProperties == null) {\n        schedulerProperties=getDefaultSchedulerProperties();\n      }\n      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();\n      scheduler.start();\n    }\n    Date date=scheduler.scheduleJob(job,trigger);\n    Logger.info(this,\"Scheduled job \" + jobName + \", next trigger is on \"+ date);\n  }\n catch (  ParseException e) {\n    Logger.error(this,\"Cron expression '\" + cronExpression + \"' has an exception. Throwing IllegalArgumentException\",e);\n    throw new IllegalArgumentException(e);\n  }\ncatch (  SchedulerException e) {\n    Logger.error(this,\"Unable to schedule job \" + jobName,e);\n  }\n}\n"}
{"nl": "len of thie Math_Vector root(x^2+y^2)", "code": "public double len(){\n  return Math.sqrt(x * x + y * y);\n}\n"}
{"nl": "Return a tap target for the navigation button (back, up, etc) from the given toolbar", "code": "public static ToolbarTapTarget forToolbarNavigationIcon(android.widget.Toolbar toolbar,CharSequence title){\n  return forToolbarNavigationIcon(toolbar,title,null);\n}\n"}
{"nl": "Creates a column family instance", "code": "public static DefaultColumnEntity of(String name,Column... columns){\n  if (columns.length == 0) {\n    return new DefaultColumnEntity(name);\n  }\n  return of(name,Arrays.asList(columns));\n}\n"}
{"nl": "Executes the query", "code": "public List<Contentlet> executeSafe(){\n  Logger.debug(this,\"Executing query: \" + query.toString());\n  Logger.debug(this,\"Use Paging: \" + this.usePaging + \", Limit: \"+ this.limit+ \", Offset: \"+ this.offset+ \", Sort By: \"+ this.sortBy);\n  try {\n    if (this.usePaging) {\n      if (!exactFieldLimitations.isEmpty()) {\n        Logger.warn(this,\"Can't use exact matching in paginated search\");\n      }\n      PaginatedArrayList<Contentlet> contentlets=ContentUtils.pullPagenated(query.toString(),this.limit,this.offset,this.sortBy,APILocator.getUserAPI().getSystemUser(),null);\n      this.totalResults=contentlets.getTotalResults();\n      Logger.debug(this,\"Number Of Results: \" + contentlets.size() + \", Total Results: \"+ contentlets.getTotalResults());\n      return contentlets;\n    }\n else {\n      List<Contentlet> contentlets=APILocator.getContentletAPI().search(query.toString(),this.limit,this.offset,this.sortBy,APILocator.getUserAPI().getSystemUser(),false);\n      contentlets=removeNonExactMatches(contentlets);\n      if (Logger.isDebugEnabled(this.getClass())) {\n        if (contentlets == null) {\n          Logger.debug(this,\"Contentlets == null\");\n        }\n else {\n          Logger.debug(this,\"Number Of Results: \" + contentlets.size());\n        }\n      }\n      return contentlets;\n    }\n  }\n catch (  DotDataException|DotSecurityException e) {\n    Logger.warn(this,\"Exception while executing query\",e);\n  }\n  return new ArrayList<Contentlet>();\n}\n"}
{"nl": "something has been changed or selected, rescan view", "code": "public void updateView(){\n  dir.execute(\"update reinduce=true;select nodes=previous;\",dir.getMainViewer().getCommandManager());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosRestoreQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioEditQuery(VkApiClient client,UserActor actor,int ownerId,int audioId){\n  super(client,\"audio.edit\",Integer.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  audioId(audioId);\n}\n"}
{"nl": "Returns a list with all links contained in the input", "code": "public static List<String> extractUrls(String text){\n  String lines[]=text.split(\"\\\\s+\");\n  List<String> containedUrls=new ArrayList<String>();\n  String urlRegex=\"((https?|ftp|gopher|telnet|file):((//)|(\\\\\\\\))+[\\\\w\\\\d:#@%/;$()~_?\\\\+-=\\\\\\\\\\\\.&]*)\";\n  Pattern pattern=Pattern.compile(urlRegex,Pattern.CASE_INSENSITIVE);\n  for (  String line : lines) {\n    Matcher urlMatcher=pattern.matcher(line);\n    while (urlMatcher.find()) {\n      containedUrls.add(line.substring(urlMatcher.start(0),urlMatcher.end(0)));\n    }\n  }\n  return containedUrls;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + JensenShannonDivergence.SqrtJensenShannonDivergence + \";\");\n}\n"}
{"nl": "Set group ids", "code": "public NewsfeedAddBanQuery groupIds(List<Integer> value){\n  return unsafeParam(\"group_ids\",value);\n}\n"}
{"nl": "Return a when condidional clause", "code": "public Expression whenCondition(Expression exp,Value val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n"}
{"nl": "Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise", "code": "public boolean isSet(_Fields field){\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\nswitch (field) {\ncase CLIENT_APPKEY:\n    return isSetClientAppkey();\ncase TRACE_ID:\n  return isSetTraceId();\ncase SPAN_ID:\nreturn isSetSpanId();\ncase ROOT_MESSAGE_ID:\nreturn isSetRootMessageId();\ncase CURRENT_MESSAGE_ID:\nreturn isSetCurrentMessageId();\ncase SERVER_MESSAGE_ID:\nreturn isSetServerMessageId();\ncase DEBUG:\nreturn isSetDebug();\ncase SAMPLE:\nreturn isSetSample();\ncase CLIENT_IP:\nreturn isSetClientIp();\n}\nthrow new IllegalStateException();\n}\n"}
{"nl": "Move the messages to the queue", "code": "private void addToQueue(SerialMessage serialMessage){\n  if (serialMessage == null) {\n    return;\n  }\n  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {\n    msgQueue.add(serialMessage);\n  }\n  sendMessage();\n}\n"}
{"nl": "Draw the given component and its children", "code": "private boolean drawComponent(@NotNull Graphics2D gc,@NotNull NlComponent component,boolean parentHandlesPainting){\n  if (component.viewInfo != null) {\n    ViewHandler handler=component.getViewHandler();\n    boolean handlesPainting=false;\n    if (handler != null && handler instanceof ViewGroupHandler) {\n      ViewGroupHandler viewGroupHandler=(ViewGroupHandler)handler;\n      if (viewGroupHandler.handlesPainting()) {\n        viewGroupHandler.drawGroup(gc,myScreenView,component);\n        handlesPainting=true;\n      }\n    }\n    if (handler != null) {\n      handler.paintConstraints(myScreenView,gc,component);\n    }\n  }\n  boolean needsRepaint=false;\n  for (  NlComponent child : component.getChildren()) {\n    needsRepaint|=drawComponent(gc,child,parentHandlesPainting);\n  }\n  return needsRepaint;\n}\n"}
{"nl": "Compute the hash value of a key", "code": "private static int hashOf(final int key){\n  final int h=key ^ ((key >>> 20) ^ (key >>> 12));\n  return h ^ (h >>> 7) ^ (h >>> 4);\n}\n"}
{"nl": "Restore password email", "code": "public void sendRestorePasswordEmail(final String subject,final String[] recipients,final String url,final String login){\n  MimeMessagePreparator preparator=null;\n  this.send(preparator);\n}\n"}
{"nl": "Set ad format", "code": "public AdsGetTargetingStatsQuery adFormat(Integer value){\n  return unsafeParam(\"ad_format\",value);\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (fileName.startsWith(\"!!!\"))   return true;\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"BLASTN\");\n}\n"}
{"nl": "Throw exception if value out of range (long version)", "code": "private static short rangeCheck(long value) throws NumberFormatException {\n  if (value < MIN_VALUE || value > MAX_VALUE) {\n    throw new NumberFormatException(\"Value is out of range : \" + value);\n  }\n  return (short)value;\n}\n"}
{"nl": "Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise", "code": "public boolean isSet(_Fields field){\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\nswitch (field) {\ncase AVERAGE_LOAD:\n    return isSetAverageLoad();\ncase OLD_GC:\n  return isSetOldGC();\ncase THREAD_NUM:\nreturn isSetThreadNum();\ncase QUEUE_SIZE:\nreturn isSetQueueSize();\ncase METHOD_QPS_MAP:\nreturn isSetMethodQpsMap();\n}\nthrow new IllegalStateException();\n}\n"}
{"nl": "Show indeterminate progress dialog with given message", "code": "protected void showIndeterminate(final CharSequence message){\n  dismissProgress();\n  progress=new MaterialDialog.Builder(context).content(message).progress(true,0).build();\n  progress.show();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoSaveQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.save\",SaveResult.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "computes the Pearson's correlation for a list of pairs", "code": "public static double computePearsonsCorrelation(Collection<Pair<Number,Number>> pairs){\n  double[] mean=new double[2];\n  for (  Pair<Number,Number> pair : pairs) {\n    mean[0]+=pair.get1().doubleValue();\n    mean[1]+=pair.get2().doubleValue();\n  }\n  mean[0]/=pairs.size();\n  mean[1]/=pairs.size();\n  double[] stddev=new double[2];\n  for (  Pair<Number,Number> pair : pairs) {\n    stddev[0]+=(pair.get1().doubleValue() - mean[0]) * (pair.get1().doubleValue() - mean[0]);\n    stddev[1]+=(pair.get2().doubleValue() - mean[1]) * (pair.get2().doubleValue() - mean[1]);\n  }\n  stddev[0]=Math.sqrt(stddev[0] / pairs.size());\n  stddev[1]=Math.sqrt(stddev[1] / pairs.size());\n  double cor=0;\n  for (  Pair<Number,Number> pair : pairs) {\n    cor+=(pair.get1().doubleValue() - mean[0]) * (pair.get2().doubleValue() - mean[1]) / (stddev[0] * stddev[1]);\n  }\n  cor/=pairs.size();\n  return cor;\n}\n"}
{"nl": "Generic method to add a permission to a holder", "code": "private void add(String world,PermissionHolder holder,String permission){\n  try {\n    if (world != null && !world.equals(\"\")) {\n      holder.setPermission(permission,true,server,world);\n    }\n else {\n      holder.setPermission(permission,true,server);\n    }\n  }\n catch (  ObjectAlreadyHasException ignored) {\n  }\n  save(holder);\n}\n"}
{"nl": "Dumps the wave out to the given stream", "code": "public void dump(Writer writer){\n  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));\n  pw.println(\"#========== Wave ==========\");\n  pw.println(\"#Type: NULL\");\n  pw.println(\"#Sample_Rate: \" + (int)audioFormat.getSampleRate());\n  pw.println(\"#Num_of_Samples: \" + samples.length / 2);\n  pw.println(\"#Num_of_Channels: \" + audioFormat.getChannels());\n  if (samples != null) {\n    for (int i=0; i < samples.length; i+=2) {\n      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));\n    }\n  }\n  pw.flush();\n}\n"}
{"nl": "add a group redefined by restriction: for later constraint checking", "code": "public void addRedefinedGroupDecl(XSGroupDecl derived,XSGroupDecl base,SimpleLocator locator){\n  if (fRGCount == fRedefinedGroupDecls.length) {\n    fRedefinedGroupDecls=resize(fRedefinedGroupDecls,fRGCount << 1);\n    fRGLocators=resize(fRGLocators,fRGCount);\n  }\n  fRGLocators[fRGCount / 2]=locator;\n  fRedefinedGroupDecls[fRGCount++]=derived;\n  fRedefinedGroupDecls[fRGCount++]=base;\n}\n"}
{"nl": "Index a document via CSV that's larger than the 512 KB chunk size", "code": "public void testIndexCSVBig() throws Exception {\n  createIndex();\n  send(\"registerFields\",\"{fields: {id: {type: atom, store: true, sort: true}, id2: {type: atom, store: true, sort: true}, body: {type: text, store: true, highlight: true}}}\");\n  send(\"startIndex\");\n  StringBuilder b=new StringBuilder();\n  int size=atLeast(512);\n  for (int i=0; i < 256 * size; i++) {\n    b.append(\"wordy \");\n  }\n  b.append(\" document\");\n  String body=b.toString();\n  assertTrue(body.length() > 512 * 1024);\n  byte[] bytes=server.sendBinary(\"bulkCSVAddDocument\",toUTF8(\",\" + server.curIndexName + \"\\nid,id2,body\\n0,1,\"+ body+ \"\\n\"));\n  JSONObject result=parseJSONObject(new String(bytes,StandardCharsets.UTF_8));\n  assertEquals(1,getInt(result,\"indexedDocumentCount\"));\n  refresh();\n  assertEquals(1,getInt(send(\"search\",\"{queryText: document}\"),\"totalHits\"));\n  send(\"stopIndex\");\n  send(\"deleteIndex\");\n}\n"}
{"nl": "Set start from", "code": "public MessagesGetHistoryAttachmentsQuery startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n"}
{"nl": "Update the nickname of the authenticated pilot's aircraft", "code": "public static void updateAircraft(AirMapAircraft aircraft,@Nullable AirMapCallback<AirMapAircraft> callback){\n  PilotService.updateAircraft(aircraft,callback);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketCreateCommentQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n"}
{"nl": "Penalty success skill", "code": "private void startPenaltySkill(){\n  int penaltySkill=skillTemplate.getPenaltySkillId();\n  if (penaltySkill == 0) {\n    return;\n  }\n  SkillEngine.getInstance().applyEffectDirectly(penaltySkill,firstTarget,effector,0);\n}\n"}
{"nl": "verifies that two vectors are close (sup norm)", "code": "protected void assertClose(String msg,Fraction[] m,Fraction[] n,double tolerance){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors not same length\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i].doubleValue(),n[i].doubleValue(),tolerance);\n  }\n}\n"}
{"nl": "Click mouse at a point", "code": "public void click(int mask,Point p) throws InterruptedException {\n  click(mask,p.x,p.y);\n}\n"}
{"nl": "download file from storage server", "code": "public int download_file1(String file_id,String local_filename) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file1(file_id,file_offset,download_bytes,local_filename);\n}\n"}
{"nl": "Converts from JDK Calendar to DateUnit", "code": "public static DateTimeUnit fromJdkCalendar(java.util.Calendar calendar){\n  return fromJodaDateTime(new DateTime(calendar));\n}\n"}
{"nl": "init Load More Data", "code": "private void initLoadMoreData(){\n  for (int i=0; i < 2; i++) {\n    List<String> url=new ArrayList<>();\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_5.jpg\");\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_4.jpg\");\n    mLists.add(url);\n  }\n}\n"}
{"nl": "BELOW METHODS FOR BOUNDS CHECK", "code": "public boolean isInBoundsX(float x){\n  return (isInBoundsLeft(x) && isInBoundsRight(x));\n}\n"}
{"nl": "converts a point from window coordinates to reference coordinates", "code": "public Point2D convertWindowToReference(Point2D apt){\n  if (scrollBackReferenceRect == null)   return null;\n else   return new Point2D.Double((apt.getX() - scrollBackReferenceRect.getX()) / scrollBackReferenceRect.getWidth(),(apt.getY() - scrollBackReferenceRect.getY()) / scrollBackReferenceRect.getHeight());\n}\n"}
{"nl": "gets a new director and makes the main viewer visible", "code": "public static Director newProject(){\n  return newProject(true);\n}\n"}
{"nl": "Calculate number of Delivery Controllers", "code": "public static int calculateDeliveryControllerCount(int vmcount){\n  int itmp=0;\n  Float f=(vmcount / 2000.00F);\n  f=(float)Math.ceil(f);\n  f++;\n  itmp=f.intValue();\n  return itmp;\n}\n"}
{"nl": "initializes the graph", "code": "private void initGraph(Taxa taxa,SplitSystem splits,int[] cycle,PhyloGraph graph){\n  int[] taxon2split=new int[ntax + 1];\n  for (int s=1; s <= splits.size(); s++) {\n    BitSet part=splits.getSplit(s).getA();\n    if (part.cardinality() == ntax - 1) {\n      part=splits.getSplit(s).getB();\n    }\n    if (part.cardinality() == 1) {\n      int t=getMax(part,ntax);\n      taxon2split[t]=s;\n    }\n  }\n  Node center=graph.newNode();\n  for (int i=1; i <= ntax; i++) {\n    int t=cycle[i];\n    Node v=graph.newNode();\n    graph.setLabel(v,taxa.getLabel(t));\n    graph.setNode2Taxa(v,t);\n    graph.setTaxon2Node(t,v);\n    Edge e=graph.newEdge(center,v);\n    if (taxon2split[t] != 0) {\n      int s=taxon2split[t];\n      graph.setWeight(e,splits.getSplit(s).getWeight());\n      graph.setSplit(e,s);\n    }\n else     graph.setSplit(e,-1);\n  }\n}\n"}
{"nl": "converts a BufferedReader to a line Iterator", "code": "public static LineIterator toLineIterator(BufferedReader r){\n  return new BuffReadIter(r);\n}\n"}
{"nl": "Check to snap on the horizontal internal margins of a parent (used when resizing)", "code": "private static void checkHorizontalParentMarginSnap(ConstraintAnchor anchor,ConstraintAnchor.Type type,int margin,SnapCandidate candidate){\n  ConstraintWidget widget=anchor.getOwner();\n  if (widget.getParent() == null) {\n    return;\n  }\n  ConstraintAnchor targetParent=widget.getParent().getAnchor(type);\n  ConstraintHandle targetParentHandle=WidgetInteractionTargets.constraintHandle(targetParent);\n  ConstraintHandle anchorHandle=WidgetInteractionTargets.constraintHandle(anchor);\n  ConstraintAnchor target=new ConstraintAnchor(widget.getParent(),type);\n  int tx=targetParentHandle.getDrawX() + margin;\n  int ty=targetParentHandle.getDrawY();\n  int distance=Math.abs(anchorHandle.getDrawX() - tx);\n  if (distance <= CONNECTION_SLOPE) {\n    candidate.distance=distance;\n    candidate.target=target;\n    candidate.source=anchor;\n    candidate.x=tx;\n    candidate.y=ty;\n  }\n}\n"}
{"nl": "does A part contain taxon?", "code": "public boolean isAcontains(int taxon){\n  return A.get(taxon);\n}\n"}
{"nl": "Decrypt a string", "code": "public synchronized String decrypt(String str){\n  byte[] dec;\n  try {\n    dec=decoder.decodeBuffer(str);\n    byte[] utf8=decrypter.doFinal(dec);\n    return new String(utf8,\"UTF-8\");\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  IllegalBlockSizeException e) {\n    e.printStackTrace();\n  }\ncatch (  BadPaddingException e) {\n    e.printStackTrace();\n  }\n  return str;\n}\n"}
{"nl": "Sort order", "code": "public BoardGetCommentsQueryWithExtended sort(BoardGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "release SLHolder for this scan", "code": "public void releaseScan() throws SAException {\n  if (_curValueList != null) {\n    _curValueList.releaseScan();\n    _curValueList=null;\n  }\n  if (_entriesIter != null) {\n    _entriesIter.releaseScan();\n    _entriesIter=null;\n  }\n  _curValueListHolder=null;\n}\n"}
{"nl": "Return information about a global wiki page", "code": "public PagesGetQuery global(Boolean value){\n  return unsafeParam(\"global\",value);\n}\n"}
{"nl": "Convert a file to a row vector", "code": "public INDArray asRowVector(File f) throws IOException {\n  return asRowVector(ImageIO.read(f));\n}\n"}
{"nl": "Sends a local broadcast using an intent with the action specified", "code": "public static void sendBroadcast(Context context,String action){\n  sendBroadcast(context,action,null);\n}\n"}
{"nl": "Fetch zero or more refspecs in the local repository", "code": "FetchResult fetch(String url,boolean prune,boolean force,Iterable<String> refspecs) throws RepoException {\n  List<String> args=Lists.newArrayList(\"fetch\",validateUrl(url));\n  args.add(\"--verbose\");\n  if (prune) {\n    args.add(\"-p\");\n  }\n  if (force) {\n    args.add(\"-f\");\n  }\n  for (  String ref : refspecs) {\n    try {\n      Refspec.create(environment,gitDir,ref,null);\n    }\n catch (    EvalException e) {\n      throw new RepoException(\"Invalid refspec passed to fetch: \" + e);\n    }\n    args.add(ref);\n  }\n  ImmutableMap<String,GitReference> before=showRef();\n  git(getCwd(),addGitDirAndWorkTreeParams(args));\n  ImmutableMap<String,GitReference> after=showRef();\n  return new FetchResult(before,after);\n}\n"}
{"nl": "Indicates if the item at position where is selected", "code": "@Override public boolean isSelected(T photo){\n  return selectedPhotos.contains(photo);\n}\n"}
{"nl": "Set privacy comment", "code": "public PhotosCreateAlbumQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n"}
{"nl": "Executes the \"jimplify\" operation for an interface invocation", "code": "protected void jimplifyInterface(DexBody body){\n  SootMethodRef ref=getSootMethodRef(InvocationType.Interface);\n  if (!ref.declaringClass().isInterface()) {\n    jimplifyVirtual(body);\n    return;\n  }\n  List<Local> parameters=buildParameters(body,false);\n  invocation=Jimple.v().newInterfaceInvokeExpr(parameters.get(0),getSootMethodRef(InvocationType.Interface),parameters.subList(1,parameters.size()));\n  body.setDanglingInstruction(this);\n}\n"}
{"nl": "Start the mouse interaction", "code": "@Override public void begin(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int startMask){\n  super.begin(x,y,startMask);\n  int androidX=Coordinates.getAndroidX(myScreenView,myStartX);\n  int androidY=Coordinates.getAndroidY(myScreenView,myStartY);\n  DrawConstraintModel model=ConstraintModel.getDrawConstraintModel(myScreenView);\n  model.updateModifiers(startMask);\n  model.setInteractionComponent(myComponent.getParent() != null ? myComponent.getParent() : myComponent);\n  model.mousePressed(androidX,androidY);\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] bytes,int offset,int size){\n  bytes=convert16To8Bits(bytes);\n  size/=2;\n  System.arraycopy(bytes,offset,outputData,curIndex,size);\n  curIndex+=size;\n  return true;\n}\n"}
{"nl": "Close QueryHandler resources", "code": "public void close() throws RemoteException {\n  if (_transactionManagerProvider != null)   _transactionManagerProvider.destroy();\n  _queryCache.clear();\n}\n"}
{"nl": "pass <code>null</code> for no change", "code": "private ContainerNetworkState updateNetwork(ContainerNetworkState network,String newSubnet,String newGateway) throws Throwable {\n  ContainerNetworkState patch=new ContainerNetworkState();\n  if (newSubnet != null || newGateway != null) {\n    Ipam ipam=new Ipam();\n    IpamConfig ipamConfig=new IpamConfig();\n    ipamConfig.subnet=newSubnet;\n    ipamConfig.gateway=newGateway;\n    ipam.config=new IpamConfig[]{ipamConfig};\n    patch.ipam=ipam;\n  }\n  return doPatch(patch,network.documentSelfLink);\n}\n"}
{"nl": "The method indicates the end of list of children", "code": "@Override public boolean endContentModel(int[] currentState){\n  int state=currentState[0];\n  if (state == XSCMValidator.FIRST_ERROR || state == XSCMValidator.SUBSEQUENT_ERROR) {\n    return false;\n  }\n  if (fHasOptionalContent && state == STATE_START) {\n    return true;\n  }\n  for (int i=0; i < fNumElements; i++) {\n    if (!fIsOptionalElement[i] && currentState[i + 1] == STATE_START)     return false;\n  }\n  return true;\n}\n"}
{"nl": "build current element text", "code": "@Override public void characters(char[] chars,int start,int length) throws SAXException {\n  elementText.append(chars,start,length);\n}\n"}
{"nl": "Set fields", "code": "public NewsfeedGetCommentsQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "sort all children of a node by rank", "code": "private void sortChildrenByRank(NodeBase node){\n  SortedSet<NodeBase> children=new TreeSet<>();\n  for (int i=0; i < node.getChildCount(); i++) {\n    NodeBase child=(NodeBase)node.getChildAt(i);\n    children.add(child);\n  }\n  node.removeAllChildren();\n  for (  NodeBase a : children) {\n    node.add(a);\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getTabbedIndex() != ClusterViewer.MATRIX_TAB_INDEX;\n}\n"}
{"nl": "Run a Graql REPL", "code": "public static void main(String[] args){\n  runShell(args,Version.VERSION,HISTORY_FILENAME,new GraqlClientImpl());\n}\n"}
{"nl": "Try to add this effect to effected controller", "code": "public void addToEffectedController(){\n  if ((!addedToController) && (effected.getLifeStats() != null) && (!effected.getLifeStats().isAlreadyDead())) {\n    effected.getEffectController().addEffect(this);\n    addedToController=true;\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public Object clone(){\n  try {\n    return (StringCharacterIterator)super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    throw new IllegalStateException();\n  }\n}\n"}
{"nl": "Creates new form AutoSummENGGui and loads its settings", "code": "public AutoSummENGGui(){\n  initComponents();\n  loadSettings();\n}\n"}
{"nl": "reads the named classification block", "code": "public int read(ClassificationsFooterRMA3 classificationsFooter,IInputReader reader) throws IOException {\n  map.clear();\n  long start=classificationsFooter.getStart(classificationType);\n  if (start != 0) {\n    reader.seek(start);\n    final int numberOfClasses=reader.readInt();\n    for (int i=0; i < numberOfClasses; i++) {\n      int classId=reader.readInt();\n      int sum=reader.readInt();\n      for (int z=0; z < 8; z++)       reader.skipBytes(sum);\n      map.put(classId,sum);\n    }\n  }\n  return map.size();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsJoinQuery(VkApiClient client,UserActor actor){\n  super(client,\"groups.join\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ReplicationTransmissionPolicy copy=(ReplicationTransmissionPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(empty,copy));\n}\n"}
{"nl": "Creates layouts", "code": "private void createLayouts(int widthItems,int widthLabel){\n  if (itemsLayout == null || itemsLayout.getWidth() > widthItems) {\n    itemsLayout=new StaticLayout(buildText(isScrollingPerformed),itemsPaint,widthItems,widthLabel > 0 ? Layout.Alignment.ALIGN_CENTER : Layout.Alignment.ALIGN_CENTER,1,ADDITIONAL_ITEM_HEIGHT,false);\n  }\n else {\n    itemsLayout.increaseWidthTo(widthItems);\n  }\n  if (!isScrollingPerformed && (valueLayout == null || valueLayout.getWidth() > widthItems)) {\n    String text=getAdapter() != null ? getAdapter().getItem(currentItem) : null;\n    valueLayout=new StaticLayout(text != null ? text : \"\",valuePaint,widthItems,widthLabel > 0 ? Layout.Alignment.ALIGN_CENTER : Layout.Alignment.ALIGN_CENTER,1,ADDITIONAL_ITEM_HEIGHT,false);\n  }\n else   if (isScrollingPerformed) {\n    valueLayout=null;\n  }\n else {\n    valueLayout.increaseWidthTo(widthItems);\n  }\n  if (widthLabel > 0) {\n    if (labelLayout == null || labelLayout.getWidth() > widthLabel) {\n      labelLayout=new StaticLayout(label,valuePaint,widthLabel,Layout.Alignment.ALIGN_NORMAL,1,ADDITIONAL_ITEM_HEIGHT,false);\n    }\n else {\n      labelLayout.increaseWidthTo(widthLabel);\n    }\n  }\n}\n"}
{"nl": "Creates a particle system with the given parameters", "code": "public ParticleSystem(ViewGroup parentView,int maxParticles,Drawable drawable,long timeToLive){\n  this(parentView,maxParticles,timeToLive);\n  if (drawable instanceof BitmapDrawable) {\n    Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();\n    for (int i=0; i < mMaxParticles; i++) {\n      mParticles.add(new Particle(bitmap));\n    }\n  }\n else   if (drawable instanceof AnimationDrawable) {\n    AnimationDrawable animation=(AnimationDrawable)drawable;\n    for (int i=0; i < mMaxParticles; i++) {\n      mParticles.add(new AnimatedParticle(animation));\n    }\n  }\n else {\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.isAllowNucleotides() && viewer.isShowAminoAcids();\n}\n"}
{"nl": "mlsdaf2: sub functions for MLSA filter", "code": "private static double mlsadf2(double x,double b[],int m,double a,double d[],int pt2,int pt3[]){\n  double out=0.0;\n  for (int i=PADEORDER; i > 0; i--) {\n    int pt2_plus_i=pt2 + i;\n    d[pt2_plus_i]=mlsafir(d[pt2_plus_i - 1],b,m,a,d,pt3[i]);\n    double v=d[pt2_plus_i] * pade[ppade + i];\n    x+=((1 & i) == 1) ? v : -v;\n    out+=v;\n  }\n  d[pt2]=x;\n  out+=x;\n  return out;\n}\n"}
{"nl": "Write a number of bytes to ring buffer;", "code": "public int write(byte[] buffer,final int bytes){\n  int remaining;\n  if ((remaining=checkSpace(true)) == 0) {\n    Log.e(RingBuffer.class.getSimpleName(),\"Buffer overrun. Data will not be written\");\n    return 0;\n  }\n  final int bytesWrite=bytes > remaining ? remaining : bytes;\n  for (int i=0; i < bytesWrite; ++i) {\n    this.buffer[wp++]=buffer[i];\n    if (wp == size)     wp=0;\n  }\n  return bytesWrite;\n}\n"}
{"nl": "move the selected rows of sequences down one", "code": "public boolean moveDown(int firstRow,int lastRow){\n  firstRow=Math.max(0,firstRow);\n  if (lastRow >= getNumberRows() - 1)   return false;\n else {\n    List<Integer>[] array=new List[getNumberRows()];\n    for (int i=0; i < getNumberRows(); i++)     array[i]=getCompressedRow2Reads(i);\n    List<Integer> replaced=array[lastRow + 1];\n    System.arraycopy(array,firstRow,array,firstRow + 1,lastRow + 1 - firstRow);\n    array[firstRow]=replaced;\n    compressedRow2Reads.clear();\n    compressedRow2Reads.addAll(Arrays.asList(array));\n    return true;\n  }\n}\n"}
{"nl": "Construct an XSObjectList implementation", "code": "public XSObjectListImpl(XSObject[] array,int length){\n  fArray=array;\n  fLength=length;\n}\n"}
{"nl": "Read message", "code": "@Override protected void readImpl(){\n  name=readS();\n  message=readS();\n}\n"}
{"nl": "are the two widgets in the same vertical area", "code": "static boolean isSameColumn(ConstraintWidget a,ConstraintWidget b){\n  return Math.max(a.getX(),b.getX()) < Math.min(a.getX() + a.getWidth(),b.getX() + b.getWidth());\n}\n"}
{"nl": "Validates the data", "code": "public void validateData(List<BlogPostEntity> blogPostEntities){\n  if (blogPostEntities == null) {\n    throw new IllegalArgumentException(\"The list cannot be null\");\n  }\n}\n"}
{"nl": "Terminates inclusion or exclusion mode - which-ever is running", "code": "public void requestInclusionStop(){\n  stopInclusionTimer();\n}\n"}
{"nl": "Items ID", "code": "protected MarketGetByIdQuery itemIds(String... value){\n  return unsafeParam(\"item_ids\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LikesIsLikedQuery(VkApiClient client,UserActor actor,LikesType type,int itemId){\n  super(client,\"likes.isLiked\",IsLikedResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  itemId(itemId);\n}\n"}
{"nl": "Update the given model to reflect the component hierarchy in the given builder", "code": "public void updateModel(NlModel model,boolean preserveXmlTags){\n  assertThat(model).isNotNull();\n  name(\"linear2.xml\");\n  NlModel newModel=preserveXmlTags ? model : build();\n  model.updateHierarchy(newModel.getFile().getRootTag(),buildViewInfos(newModel));\n  for (  NlComponent component : newModel.getComponents()) {\n    checkStructure(component);\n  }\n}\n"}
{"nl": "ask view to prevent user input", "code": "public void lockUserInput(){\n  locked=true;\n  statusbar.setText1(\"\");\n  statusbar.setText2(\"Busy...\");\n  frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  getCommandManager().setEnableCritical(false);\n  searchManager.getFindDialogAsToolBar().setEnableCritical(false);\n  samplesSpreadSheet.lockUserInput();\n}\n"}
{"nl": "Add a filter operation to be executed after the previously-added operations have been executed", "code": "public Builder filter(Filter filter){\n  actionList.add(new DataAction(filter));\n  return this;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set drawer=\" + ViewerBase.DiagramType.RoundedCladogram + \";\");\n}\n"}
{"nl": "Locations of the splits", "code": "@Override public URI[] locations(){\n  return new URI[0];\n}\n"}
{"nl": "Initialize primary-only space components", "code": "private void initPrimaryOnlyComponents() throws SpaceComponentsInitializeException {\n  for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {\n    ISpaceComponentsHandler handler=iterator.next();\n    handler.initComponents(true);\n  }\n}\n"}
{"nl": "show the overlap graph", "code": "public void showOverlapGraph(Director dir,ProgressListener progress) throws CanceledException {\n  final OverlapGraphViewer overlapGraphViewer=new OverlapGraphViewer(dir,overlapGraph,node2ReadNameMap,paths);\n  overlapGraphViewer.apply(progress);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ParametersDialog viewer=(ParametersDialog)getParent();\n  return viewer != null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsDeleteCampaignsQuery(VkApiClient client,UserActor actor,int accountId,String ids){\n  super(client,\"ads.deleteCampaigns\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  ids(ids);\n}\n"}
{"nl": "scale uniformly", "code": "void scale(double s){\n  Matrix3D tmp=new Matrix3D();\n  tmp.set(0,0,s);\n  tmp.set(1,1,s);\n  tmp.set(2,2,s);\n  preMultiply(tmp);\n}\n"}
{"nl": "Creates new form JFileChooserTest", "code": "public JFileChooserTest(){\n  initComponents();\n  jMenu1.setEnabled(isEnable);\n}\n"}
{"nl": "Writes a set of DataCacheObjects into the fallback log mechanism", "code": "public final void fallback(final List data) throws DataFallbackException {\n  if (isFallbackFileEmpty())   fFileController.closeFallbackInputStream();\n  fFileController.openFallbackOutputStream();\n  final int size=data.size();\n  for (int i=0; i != size; i++) {\n    fFileController.writeLine((IFallback)data.get(i));\n  }\n  fFileController.setNumberOfLines(fFileController.getNumberOfLines() + size);\n}\n"}
{"nl": "get the set of matches active for the given read", "code": "public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){\n  activeMatchesForClassification.clear();\n  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {\n    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);\n    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {\n      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);\n    }\n  }\n  float bestScore=0;\n  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {\n    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);\n    float score=matchBlock.getBitScore();\n    if (score > bestScore)     bestScore=score;\n  }\n  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);\n}\n"}
{"nl": "Converts this object to a string", "code": "@Override public String toString(){\n  return \"DummyFreeTTSVoice\";\n}\n"}
{"nl": "Draw single bitmap with the giving centerX, centerY and radius", "code": "private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){\n  drawPaint.setStyle(Paint.Style.FILL);\n  float strokeRadius=radius + mRadiusStrokeWidth;\n  drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n  canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint);\n  drawPaint.setXfermode(null);\n  final int halfBitmapWidth=bitmap.getWidth() / 2;\n  final int halfBitmapHeight=bitmap.getHeight() / 2;\n  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);\n  Matrix shaderMatrix=new Matrix();\n  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();\n  float scale=radius * 2 / minSize;\n  shaderMatrix.setScale(scale,scale);\n  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));\n  bitmapShader.setLocalMatrix(shaderMatrix);\n  drawPaint.setShader(bitmapShader);\n  canvas.drawCircle(centerX,centerY,radius,drawPaint);\n  drawPaint.setShader(null);\n}\n"}
{"nl": "Creates a ContextSet from an existing map", "code": "public static ContextSet fromMap(Map<String,String> map){\n  if (map == null) {\n    throw new NullPointerException(\"map\");\n  }\n  MutableContextSet set=new MutableContextSet();\n  set.addAll(map);\n  return set.immutableCopy();\n}\n"}
{"nl": "decode sequence to nucleotides or amino acids", "code": "public static byte[] translate(byte[] sequence,byte[] alphabet,int offset,int length){\n  byte[] result=new byte[length];\n  for (int i=0; i < length; i++)   result[i]=alphabet[sequence[i + offset]];\n  return result;\n}\n"}
{"nl": "Starts children item and building it's path from parent with parant's", "code": "@Override public EntryCreatedRS startChildItem(StartTestItemRQ rq,String parent){\n  TestItem parentItem=testItemRepository.findOne(parent);\n  validate(parentItem,parent);\n  validate(rq,parentItem);\n  TestItem item=testItemBuilder.get().addStartItemRequest(rq).addParent(parentItem).addPath(parentItem).addStatus(Status.IN_PROGRESS).build();\n  testItemRepository.save(item);\n  parentItem.setHasChilds(true);\n  testItemRepository.save(parentItem);\n  return new EntryCreatedRS(item.getId());\n}\n"}
{"nl": "Default modifier for removing text change listener", "code": "static void addTextChangedListener(TextView textView,TextWatcher watcher){\n  textView.addTextChangedListener(watcher);\n}\n"}
{"nl": "TODO: Call could be optimized by filtering out all strings without", "code": "@Override public void subscribeByName(String regex,BaseTagListener listener) throws CacheSynchronizationException {\n  subscribeByName(new HashSet<>(Arrays.asList(new String[]{regex})),listener);\n}\n"}
{"nl": "Seek the pointer to <code>offset</code>", "code": "@Override public final void seek(final long offset){\n  try {\n    bs.seek(offset);\n  }\n catch (  IOException e) {\n    System.err.println(\"Seek failed\" + e);\n  }\n}\n"}
{"nl": "notify that player used an item", "code": "public void notifyItemuseObservers(Item item){\n  notifyObservers(ObserverType.ITEMUSE,item);\n}\n"}
{"nl": "Set fields", "code": "public WallGetByIdQueryWithExtended fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Extract the referenced value", "code": "private Value dereference(SoftReference<DoubleRef<Key,Value>> ref){\n  if (ref == null)   return null;\n  DoubleRef<Key,Value> doubleRef=ref.get();\n  return doubleRef == null ? null : doubleRef.getValue();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);\n}\n"}
{"nl": "Verify the port mappings in the created container", "code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) private void verifyPortMappings(ContainerState containerState,String expectedPortBindings){\n  Map<String,Object> hostConfig=Utils.fromJson(containerState.attributes.get(DOCKER_CONTAINER_HOST_CONFIG_PROP_NAME),Map.class);\n  Map<String,List<Map<String,String>>> hostConfigPorts=(Map)hostConfig.get(DOCKER_CONTAINER_PORT_BINDINGS_PROP_NAME);\n  assertEquals(\"Unexpected number of port mappings\",1,hostConfigPorts.size());\n  Entry<String,List<Map<String,String>>> entry=hostConfigPorts.entrySet().iterator().next();\n  DockerPortMapping portMapping=DockerPortMapping.fromMap(entry);\n  DockerPortMapping expectedPortMapping=DockerPortMapping.fromString(expectedPortBindings);\n  assertEquals(\"port mapping host ip\",expectedPortMapping.getHostIp(),portMapping.getHostIp());\n  assertEquals(\"port mapping container port\",expectedPortMapping.getContainerPort(),portMapping.getContainerPort());\n  assertNotNull(\"port mapping host port\",portMapping.getHostPort());\n}\n"}
{"nl": "save the aux data to the rma6 file", "code": "public void saveAuxData(Map<String,byte[]> label2data) throws IOException {\n  final long location=footerSectionRMA6.getStartAuxDataSection();\n  io=new InputOutputReaderWriter(new File(fileName),READ_WRITE);\n  io.setLength(location);\n  io.seek(location);\n  io.writeInt(label2data.size());\n  for (  String name : label2data.keySet()) {\n    io.writeString(name);\n    byte[] bytes=label2data.get(name);\n    io.writeInt(bytes.length);\n    io.write(bytes,0,bytes.length);\n  }\n  footerSectionRMA6.setEndAuxDataSection(io.getPosition());\n  footerSectionRMA6.setStartFooterSection(io.getPosition());\n  footerSectionRMA6.write(io);\n  close();\n}\n"}
{"nl": "/*     ", "code": "@deprecated public SimpleDateFormat(String pattern,DateFormatSymbols formatData,ULocale loc){\n  this(pattern,(DateFormatSymbols)formatData.clone(),null,null,loc,true,null);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static VersionInfo javaVersion(){\n  if (javaVersion == null) {\n    String s=System.getProperty(\"java.version\");\n    char[] chars=s.toCharArray();\n    int r=0;\n    int w=0;\n    int count=0;\n    boolean numeric=false;\n    while (r < chars.length) {\n      char c=chars[(r++)];\n      if ((c < '0') || (c > '9')) {\n        if (numeric) {\n          if (count == 3) {\n            break;\n          }\n          numeric=false;\n          chars[(w++)]='.';\n          count++;\n        }\n      }\n else {\n        numeric=true;\n        chars[(w++)]=c;\n      }\n    }\n    while ((w > 0) && (chars[(w - 1)] == '.')) {\n      w--;\n    }\n    String vs=new String(chars,0,w);\n    javaVersion=getInstance(vs);\n  }\n  return javaVersion;\n}\n"}
{"nl": "Sets the scroll position to scrollAmount pixels", "code": "@Override public int update(int scrollAmount){\n  final int currentScrollPosition=myScrollView.getScrollY();\n  final int newScrollY=Math.min(myMaxScrollableHeight,Math.max(0,myStartScrollPosition + scrollAmount * myScrollUnitSize));\n  if (newScrollY == currentScrollPosition) {\n    return 0;\n  }\n  myScrollView.setScrollY(newScrollY);\n  handleScrolling(myScrollView);\n  return newScrollY - currentScrollPosition;\n}\n"}
{"nl": "is the initial if-exist search active ?", "code": "public boolean isInitialIfExistSearchActive(){\n  return _initialIfExistSearchActive;\n}\n"}
{"nl": "Stop listening for Intents as soon as activity gets destroyed", "code": "@Override protected void onDestroy(){\n  super.onDestroy();\n  unregisterReceiver(receiver);\n  mBluetoothAdapter.disable();\n}\n"}
{"nl": "Community description", "code": "public GroupsEditQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n"}
{"nl": "Consumes current token iff it's a binary operator at the given precedence level (with special-case handling of 'NOT' 'IN' double token binary operator)", "code": "private boolean atBinaryOperator(int prec){\n  if (matchesAnyOf(OPERATOR_PRECEDENCE.get(prec))) {\n    return true;\n  }\n  if (matchesSequence(TokenKind.NOT,TokenKind.IN)) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "synchronize data", "code": "public void sync() throws CanceledException {\n  getChartDrawer().forceUpdate();\n  seriesList.sync(getChartData().getSeriesNames(),getChartData().getSamplesTooltips(),false);\n  if (getChartData() instanceof IChartData) {\n    classesList.sync(((IChartData)getChartData()).getClassNames(),getChartData().getClassesTooltips(),false);\n    classesList.fireSyncToViewer();\n  }\n  attributesList.sync(getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(),null,false);\n}\n"}
{"nl": "Renders the Survey", "code": "public Writer render(String templatePath,Map<String,Object> parentContext) throws SurveyWrapperException {\n  URL templateUrl=null;\n  try {\n    templateUrl=FlexibleLocation.resolveLocation(templatePath);\n  }\n catch (  MalformedURLException e) {\n    throw new SurveyWrapperException(e);\n  }\n  if (templateUrl == null) {\n    String errMsg=\"Problem getting the template for Survey from URL: \" + templatePath;\n    Debug.logError(errMsg,module);\n    throw new IllegalArgumentException(errMsg);\n  }\n  Writer writer=new StringWriter();\n  this.render(templateUrl,writer,parentContext);\n  return writer;\n}\n"}
{"nl": "Stop watching", "code": "public void stopWatch(){\n  _time=UNWATCHED;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set useColors=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Builds the LocateOptions new instance </br>", "code": "public LocateOptions build(){\n  LocateOptions options=new LocateOptions();\n  options.watch=this.watch;\n  options.setView=this.setView;\n  options.maxZoom=this.maxZoom;\n  options.timeout=this.timeout;\n  options.maximumAge=this.maximumAge;\n  options.enableHighAccuracy=this.enableHighAccuracy;\n  return options;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set show-insertions=\" + !isSelected() + \";apply;\");\n}\n"}
{"nl": "Set user id", "code": "protected OrdersGetAmountQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Does a HTTP PUT with an empty body", "code": "public Response doPut(String url){\n  return doPut(url,null);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.Unsorted.toString() + \";zoom axis=both what=fit;\");\n}\n"}
{"nl": "Calculate the preferred renew time, and put in the map", "code": "private void insertEntry(Entry e,long now){\n  e.calcRenew(now);\n  leases.put(e,e);\n}\n"}
{"nl": "create file", "code": "public static void createFile(String filePath,String content) throws IOException {\n  FileWriter writer=null;\n  try {\n    writer=new FileWriter(filePath);\n    writer.write(content);\n  }\n catch (  IOException ex) {\n    throw ex;\n  }\n finally {\n    if (writer != null) {\n      writer.close();\n    }\n  }\n}\n"}
{"nl": "Encrypt given data", "code": "public int encrypt(byte[] data,int offset,int length){\n  length+=4;\n  if (!updatedKey) {\n    length+=4;\n    length+=8 - length % 8;\n    encXORPass(data,offset,length,Rnd.nextInt());\n    cipher.cipher(data,offset,length);\n    cipher.updateKey(key);\n    updatedKey=true;\n  }\n else {\n    length+=8 - length % 8;\n    appendChecksum(data,offset,length);\n    cipher.cipher(data,offset,length);\n  }\n  return length;\n}\n"}
{"nl": "Set filters", "code": "public VideoSearchQuery filters(VideoSearchFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatUsersQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.getChatUsers\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "WeChat share meeting", "code": "public void shareToWeiXin(String webpageUrl,String title,String description){\n  WXWebpageObject webpage=new WXWebpageObject();\n  webpage.webpageUrl=webpageUrl;\n  WXMediaMessage msg=new WXMediaMessage(webpage);\n  msg.title=title;\n  msg.description=description;\n  Bitmap thumb=BitmapFactory.decodeResource(context.getResources(),R.mipmap.ic_launcher);\n  msg.thumbData=Util.bmpToByteArray(thumb,true);\n  SendMessageToWX.Req req=new SendMessageToWX.Req();\n  req.transaction=buildTransaction(\"webpage\");\n  req.message=msg;\n  req.scene=SendMessageToWX.Req.WXSceneSession;\n  api.sendReq(req);\n}\n"}
{"nl": "increment the count", "code": "public void increment(int i,int j){\n  matrix[i - 1][j - 1]++;\n  matrix[j - 1][i - 1]++;\n}\n"}
{"nl": "Implementation version", "code": "public static String implementationVersion(){\n  return implementationVersion;\n}\n"}
{"nl": "true - to return a list of suggested friends false - to return friend requests (default)", "code": "public FriendsGetRequestsQueryWithNeedMutual suggested(Boolean value){\n  return unsafeParam(\"suggested\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetSuggestionsQueryWithCities(VkApiClient client,UserActor actor,AdsGetSuggestionsSection section,String cities){\n  super(client,\"ads.getSuggestions\",Utils.buildParametrizedType(List.class,TargSuggestionsCities.class));\n  accessToken(actor.getAccessToken());\n  section(section);\n  cities(cities);\n}\n"}
{"nl": "Called when a notification returned", "code": "public void notifyReturned(NotifyContext notifyContext,ITemplateHolder template){\n  if (notifyContext == null)   return;\n  if (_filterManager._isFilter[FilterOperationCodes.AFTER_NOTIFY_TRIGGER]) {\n    Object[] entries=new Object[2];\n    entries[0]=notifyContext.getEntry();\n    entries[1]=template;\n    try {\n      _filterManager.invokeFilters(FilterOperationCodes.AFTER_NOTIFY_TRIGGER,null,entries);\n    }\n catch (    Exception e) {\n      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,\"Exception was thrown by filter on AFTER_NOTIFY_TRIGGER.\",e);\n    }\n  }\n  decreaseCounter(notifyContext);\n}\n"}
{"nl": "sync bytes from aux block to summary", "code": "static private void syncAux2Summary(String fileName,byte[] bytes,DataTable table) throws IOException {\n  if (bytes != null) {\n    String string=Basic.toString(bytes);\n    if (string.startsWith(DataTable.MEGAN6_SUMMARY_TAG_NOT_USED_ANYMORE) || string.startsWith(DataTable.MEGAN4_SUMMARY_TAG) || string.startsWith(\"!MEGAN4\")) {\n      BufferedReader r=new BufferedReader(new StringReader(string));\n      table.read(r,true);\n      r.close();\n    }\n else     if (string.startsWith(\"!MEGAN\")) {\n      System.err.println(\"Archive is in an old format, upgrading to MEGAN6\");\n      BufferedReader r=new BufferedReader(new StringReader(string));\n      table.importMEGAN3SummaryFile(fileName,r,false);\n      r.close();\n    }\n  }\n}\n"}
{"nl": "closes the accessor", "code": "@Override public void close(){\n  try {\n    reader.close();\n    refReader.close();\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "Object type", "code": "protected AdsCheckLinkQuery linkType(AdsCheckLinkType value){\n  return unsafeParam(\"link_type\",value);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  File lastOpenFile=ProgramProperties.getFile(MeganProperties.TAXONOMYFILE);\n  getDir().notifyLockInput();\n  File file=ChooseFileDialog.chooseFileToOpen(getViewer().getFrame(),lastOpenFile,new TextFileFilter(\"tre\"),new TextFileFilter(\"tre\"),ev,\"Open Tree File\");\n  getDir().notifyUnlockInput();\n  if (file != null && file.exists() && file.canRead()) {\n    ProgramProperties.put(MeganProperties.TAXONOMYFILE,file.getAbsolutePath());\n    String mappingFile=Basic.replaceFileSuffix(file.getPath(),\".map\");\n    if (!(new File(mappingFile)).exists()) {\n      mappingFile=null;\n    }\n    StringBuilder buf=new StringBuilder();\n    buf.append(\"load taxonomyFile='\").append(file.getPath()).append(\"'\");\n    if (mappingFile != null)     buf.append(\" mapfile='\").append(mappingFile).append(\"';\");\n else     buf.append(\";\");\n    buf.append(\"collapse level=2;\");\n    execute(buf.toString());\n  }\n}\n"}
{"nl": "Load the cart from the given file", "code": "public CART[] load(int numStates,InputStream treeStream,InputStream pdfStream,PdfFileFormat fileFormat,FeatureDefinition featDefinition,PhoneTranslator phTranslator) throws IOException, MaryConfigurationException {\n  featDef=featDefinition;\n  int i, j, length, state;\n  BufferedReader s=null;\n  String line, aux;\n  phTrans=phTranslator;\n  CART treeSet[]=new CART[numStates];\n  for (i=0; i < numStates; i++)   treeSet[i]=new CART();\n  double pdf[][][][];\n  pdf=loadPdfs(numStates,pdfStream,fileFormat);\n  assert featDefinition != null : \"Feature Definition was not set\";\n  s=new BufferedReader(new InputStreamReader(treeStream,\"UTF-8\"));\n  while ((line=s.readLine()) != null) {\n    if (line.indexOf(\"QS\") < 0)     break;\n  }\n  while ((line=s.readLine()) != null) {\n    if (line.indexOf(\"{*}\") >= 0) {\n      aux=line.substring(line.indexOf(\"[\") + 1,line.indexOf(\"]\"));\n      state=Integer.parseInt(aux);\n      treeSet[state - 2].setRootNode(loadStateTree(s,pdf[state - 2]));\n      if (treeSet[state - 2].getRootNode() instanceof DecisionNode)       ((DecisionNode)treeSet[state - 2].getRootNode()).countData();\n      Log.d(Mary.LOG,\"load: CART[\" + (state - 2) + \"], total number of nodes in this CART: \"+ treeSet[state - 2].getNumNodes());\n    }\n  }\n  if (s != null)   s.close();\n  if (treeSet.length == 0) {\n    throw new IOException(\"LoadTreeSet: error no trees loaded\");\n  }\n  return treeSet;\n}\n"}
{"nl": "update the user by query", "code": "public static int update(W q,V v){\n  String passwd=(String)v.value(\"password\");\n  if (!X.isEmpty(passwd)) {\n    passwd=encrypt(passwd);\n    v.set(\"password\",passwd,true);\n  }\n else {\n    v.remove(\"password\");\n  }\n  return Helper.update(q,v.set(\"updated\",System.currentTimeMillis()),User.class);\n}\n"}
{"nl": "Read an object from HDFS (or local) using default Java object serialization", "code": "public static <T>T readObjectFromFile(String path,Class<T> type,JavaSparkContext sc) throws IOException {\n  return readObjectFromFile(path,type,sc.sc());\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  Director.showMessageWindow();\n  final AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  final Alignment alignment=viewer.getAlignment();\n  final SelectedBlock block=viewer.getSelectedBlock();\n  for (int row=0; row < alignment.getRowCompressor().getNumberRows(); row++) {\n    if (block.isSelectedRow(row)) {\n      for (      Integer read : alignment.getRowCompressor().getCompressedRow2Reads(row)) {\n        Lane lane=alignment.getLane(read);\n        int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(block.getFirstCol());\n        if ((block.isSelectedCol(lane.getFirstNonGapPosition() - firstJump + 1))) {\n          System.out.println();\n          System.out.println(viewer.getSelectedReference());\n          System.out.println(lane.getText());\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "download file from storage server", "code": "public byte[] download_file1(String file_id) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file1(file_id,file_offset,download_bytes);\n}\n"}
{"nl": "Schedule a child statement to run", "code": "@Override public void schedule(Runnable childStatement){\n  Future<Void> submittedStatement=completionService.submit(childStatement,null);\n  tasks.add(submittedStatement);\n}\n"}
{"nl": "Nothing to do", "code": "@Override protected void readImpl(){\n  this.npcId=readD();\n}\n"}
{"nl": "Cancels currently playing audio", "code": "public synchronized void cancel(){\n}\n"}
{"nl": "get the status of one member", "code": "@Override public ListenableFuture<StatusResponse> statusMember(){\n  return this.futureStub.status(StatusRequest.getDefaultInstance());\n}\n"}
{"nl": "Returns true if the app is requesting sensor data from the local or any connected device", "code": "private boolean isRequestingSensorEventData(){\n  for (  Map.Entry<String,SensorDataRequest> sensorDataRequestEntry : sensorDataRequests.entrySet()) {\n    if (sensorDataRequestEntry.getValue().getEndTimestamp() == DataRequest.TIMESTAMP_NOT_SET) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "add tag <code>t</code> to this host", "code": "public void addTag(Tag t){\n  if (mTagList == null)   mTagList=new ArrayList<Tag>(1);\n  mTagList.add(t);\n}\n"}
{"nl": "Npc starts dancing iu 2", "code": "public static final void emoteStartDancing2(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,133,0));\n}\n"}
{"nl": "Creates a new shapeless material recipe", "code": "public ShapelessMaterialRecipe(Block output,Object... input){\n  this(new ItemStack(output),input);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  ServicePanel servicePanel=((RemoteServiceBrowser)getViewer()).getServicePanel();\n  if (servicePanel != null) {\n    new Message(getViewer().getFrame(),servicePanel.getService().getInfo());\n  }\n}\n"}
{"nl": "Add new class loader to the cache, if the class loader is already present, the existing key will be returned", "code": "public Long putClassLoader(ClassLoader classLoader){\n  if (classLoader == null)   throw new IllegalArgumentException(\"Argument cannot be null - 'classLoader'.\");\n  Long previousId=_classLoaderToIdMap.get(classLoader);\n  if (previousId != null)   return previousId;\nsynchronized (_lock) {\n    previousId=_classLoaderToIdMap.get(classLoader);\n    if (previousId != null)     return previousId;\n    removeMarkers();\n    long id=generateClassLoaderKey();\n    if (_logger.isLoggable(Level.FINE))     _logger.fine(\"introducing new class loader to cache [\" + ClassLoaderHelper.getClassLoaderLogName(classLoader) + \"] to the class provider, class loader designated id is \"+ id);\n    _classLoaders.put(id,new ClassLoaderContext(classLoader,Represent.REGULAR));\n    _classLoaderToIdMap.put(classLoader,id);\n    return id;\n  }\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.00500250166792,0.0502516792675,0.126589039921,0.256466471938,0.526802578289,34.5387763949,23.0258509299,18.4443972706,14.9786613678,11.5129254650};\n}\n"}
{"nl": "write the edit", "code": "public String toString(){\nswitch (type) {\ncase APPEND:\n    return \"A \" + parentId + \" \"+ taxId+ \" '\"+ taxName+ \"'\";\ncase DELETE:\n  return \"D \" + taxId;\ncase RENAME:\nreturn \"R \" + taxId + \" '\"+ taxName+ \"'\";\ndefault :\nreturn \"NONE\";\n}\n}\n"}
{"nl": "Walks up PSI tree of local file, checking PsiNamedElements", "code": "@Nullable public static PsiNamedElement findInScope(PsiElement element,String name){\n  PsiNamedElement[] resultHolder=new PsiNamedElement[1];\n  Processor<BuildElement> processor=null;\n  searchInScope(element,processor);\n  return resultHolder[0];\n}\n"}
{"nl": "Parses JSON value in each record and appends JSON elements to the table", "code": "@Override public void put(Collection<SinkRecord> sinkRecords) throws ConnectException {\n  for (  SinkRecord record : sinkRecords) {\n    fLog.trace(\"Put message {}\",record.value());\n    try {\n      iParser.parse(record.value().toString());\n      for (int i=0; i < iPaths.length; ++i) {\n        Element element=iParser.getElement(iPaths[i]);\n        if (element == null) {\n        }\n else {\n          String string=element.toString();\n          if (string.equals(\"null\")) {\n          }\n else {\n            if (string.charAt(0) == '\"')             iWriter.append(string.substring(1,string.length() - 1));\n else             iWriter.append(string);\n          }\n        }\n        iWriter.next();\n      }\n    }\n catch (    IOException exception) {\n      throw new ConnectException(exception);\n    }\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  final ClusterViewer viewer=getViewer();\n  int max=viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(null).size();\n  np.matchIgnoreCase(\"set triplotSize=\");\n  int number=np.getInt(0,max);\n  np.matchIgnoreCase(\";\");\n  viewer.getPcoaTab().setTriplotSize(number);\n}\n"}
{"nl": "Save items for repurchase for this player", "code": "public void addRepurchaseItems(Player player,List<Item> items){\n  repurchaseItems.putAll(player.getObjectId(),items);\n}\n"}
{"nl": "TODO: Document", "code": "public void prune(double dMinCoexistenceImportance){\n}\n"}
{"nl": "Load audio timeline from file", "code": "protected TimelineReader loadAudioTimeline(String fileName) throws IOException, MaryConfigurationException {\n  return new TimelineReader(fileName);\n}\n"}
{"nl": "Validation Rule: Wildcard allows Namespace Name", "code": "public boolean allowNamespace(String namespace){\n  if (fType == NSCONSTRAINT_ANY)   return true;\n  if (fType == NSCONSTRAINT_NOT) {\n    boolean found=false;\n    int listNum=fNamespaceList.length;\n    for (int i=0; i < listNum && !found; i++) {\n      if (namespace == fNamespaceList[i])       found=true;\n    }\n    if (!found)     return true;\n  }\n  if (fType == NSCONSTRAINT_LIST) {\n    int listNum=fNamespaceList.length;\n    for (int i=0; i < listNum; i++) {\n      if (namespace == fNamespaceList[i])       return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetRequestsQueryWithFields(VkApiClient client,UserActor actor,int groupId,List<UserField> fields){\n  super(client,\"groups.getRequests\",GetRequestsFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  fields(fields);\n}\n"}
{"nl": "add a prefix and a suffix to name depending on format string and the bindings", "code": "public static String decorate(String name,String formatString,Map bindings){\n  IDecoratorComponent[][] format=compileFormatString(formatString);\n  String[] prefixSuffix=decorate(format,bindings);\n  return prefixSuffix[0] + name + prefixSuffix[1];\n}\n"}
{"nl": "rescan root directory and rescan contents", "code": "public void rescan(ProgressListener progress) throws IOException, CanceledException {\n  progress.setSubtask(\"Scanning...\");\n  lock.lock();\n  try {\n    files.clear();\n    List<File> files=Basic.getAllFilesInDirectory(rootDirectory,RMAFileFilter.getInstance(),true,progress);\n    for (    File file : files) {\n      File relative=Basic.getRelativeFile(file,rootDirectory);\n      this.files.add(relative.getPath());\n      MeganFile meganFile=new MeganFile();\n      meganFile.setFileFromExistingFile(file.getPath(),true);\n      if (meganFile.hasDataConnector()) {\n        IConnector connector=meganFile.getDataConnector();\n        DataTable dataTable=new DataTable();\n        SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();\n        SyncArchiveAndDataTable.syncArchive2Summary(meganFile.getFileName(),connector,dataTable,sampleAttributeTable);\n        Object description=sampleAttributeTable.get(meganFile.getName(),\"Description\");\n        if (description == null)         description=meganFile.getName();\n        fileName2Description.put(relative.getParent(),description.toString());\n      }\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "Returns true if field messageType is set (has been assigned a value) and false otherwise", "code": "public boolean isSetMessageType(){\n  return __isset_bit_vector.get(__MESSAGETYPE_ISSET_ID);\n}\n"}
{"nl": "Type of notifications to return", "code": "public NotificationsGetQuery filters(List<NotificationsGetFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "Removes all previously registered <code>DataTagUpdateListener</code>", "code": "public void removeAllUpdateListeners(){\n  listeners.clear();\n}\n"}
{"nl": "Do short pulling", "code": "private void shortPulling(ClientSession client,Map<String,String> configItems,HttpServletResponse resp){\n  sendUpdatedConfigsIfPossible(client.getAppId(),configItems,resp);\n}\n"}
{"nl": "Save the details of a submitted proxy entity", "code": "public void saveEntity(final ProxyEntity proxyEntity){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.saveOrUpdate(proxyEntity);\n  transaction.commit();\n  session.close();\n}\n"}
{"nl": "REST COUNT request handler", "code": "@ApiMethod(path=\"{type}/count\",verb=ApiVerb.GET,description=\"Returns the number of entries in space of the specified type\\n\",produces={MediaType.APPLICATION_JSON_VALUE}) @RequestMapping(value=\"/{type}/count\",method=RequestMethod.GET,produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> count(@ApiPathParam(name=\"type\",description=TYPE_DESCRIPTION) @PathVariable String type) throws ObjectNotFoundException {\n  GigaSpace gigaSpace=ControllerUtils.xapCache.get();\n  Integer cnt;\n  try {\n    cnt=gigaSpace.count(new SpaceDocument(type));\n  }\n catch (  DataAccessException e) {\n    throw translateDataAccessException(gigaSpace,e,type);\n  }\n  if (cnt == null) {\n    cnt=0;\n  }\n  Map<String,Object> result=new Hashtable<String,Object>();\n  result.put(\"status\",\"success\");\n  result.put(\"data\",cnt);\n  return result;\n}\n"}
{"nl": "Collapse a group", "code": "private void collapseGroup(ExpandableListPosition listPosition){\n  expandableList.expandedGroupIndexes.put(listPosition.groupPos,false);\n  if (listener != null) {\n    listener.onGroupCollapsed(expandableList.getFlattenedGroupIndex(listPosition) + 1,expandableList.groups.get(listPosition.groupPos).getItemCount());\n  }\n}\n"}
{"nl": "add all children of a given node", "code": "public void addChildren(MyJTreeNode node){\n  final Node v=node.getV();\n  final DefaultTreeModel model=(DefaultTreeModel)getModel();\n  if (v.getOutDegree() > 0 && node.getChildCount() == 0) {\n    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n      final Node w=e.getTarget();\n      final MyJTreeNode wNode=new MyJTreeNode(w);\n      node.add(wNode);\n      id2node.put((Integer)w.getInfo(),wNode);\n      model.nodeStructureChanged(wNode);\n    }\n  }\n  model.nodeStructureChanged(node);\n}\n"}
{"nl": "Line Tag Adder", "code": "public static void addLineTag(soot.tagkit.Host host,int sLine,int eLine){\n  host.addTag(new soot.tagkit.SourceLineNumberTag(sLine,eLine));\n}\n"}
{"nl": "Returns true if sync successfully completed", "code": "@VisibleForTesting boolean syncProject(BlazeContext context){\n  SyncResult syncResult=SyncResult.FAILURE;\n  try {\n    SaveUtil.saveAllFiles();\n    onSyncStart(project,context);\n    syncResult=doSyncProject(context);\n  }\n catch (  AssertionError|Exception e) {\n    LOG.error(e);\n    IssueOutput.error(\"Internal error: \" + e.getMessage()).submit(context);\n  }\n finally {\n    afterSync(project,context,syncResult);\n  }\n  return syncResult == SyncResult.SUCCESS || syncResult == SyncResult.PARTIAL_SUCCESS;\n}\n"}
{"nl": "Ids of additional photos", "code": "public MarketEditQuery photoIds(List<Integer> value){\n  return unsafeParam(\"photo_ids\",value);\n}\n"}
{"nl": "write an int", "code": "public void writeInt(int a) throws IOException {\n  io.write((byte)(a >> 24));\n  io.write((byte)(a >> 16));\n  io.write((byte)(a >> 8));\n  io.write((byte)(a));\n}\n"}
{"nl": "Create new SesionKey for this Account", "code": "public SessionKey(Account acc){\n  this.accountId=acc.getId();\n  this.loginOk=Rnd.nextInt();\n  this.playOk1=Rnd.nextInt();\n  this.playOk2=Rnd.nextInt();\n}\n"}
{"nl": "response and redirect to the url", "code": "final public void redirect(String url){\n  resp.setHeader(\"Location\",url);\n  setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);\n}\n"}
{"nl": "send the message type of T, all receiver can receive the message", "code": "public <T>void send(T message,Object token){\n  sendToTargetOrType(message,null,token);\n}\n"}
{"nl": "Factory method created instance from byte[]", "code": "public static LocalResourceStatus fromBytes(byte[] bytes) throws SVNException {\n  return ((bytes != null) && (bytes.length > 0)) ? new LocalResourceStatus(bytes) : null;\n}\n"}
{"nl": "Creates a new event driven proxy of type T", "code": "public T proxy(){\n  eventDrivenFactoryBean.afterPropertiesSet();\n  return (T)eventDrivenFactoryBean.getObject();\n}\n"}
{"nl": "add a query and its matches to the file", "code": "public long addQuery(byte[] queryText,int queryTextLength,int numberOfMatches,byte[] matchesText,int matchesTextLength,int[][] match2Classification2Id,long mateLocation) throws IOException {\n  final long location=readerWriter.getPosition();\n  if (isPairedReads)   readerWriter.writeLong(mateLocation);\n  readerWriter.writeString(queryText,0,queryTextLength);\n  readerWriter.writeInt(numberOfMatches);\n  for (int i=0; i < numberOfMatches; i++) {\n    for (int j=0; j < numberOfClassificationNames; j++) {\n      readerWriter.writeInt(match2Classification2Id[i][j]);\n    }\n  }\n  readerWriter.writeString(matchesText,0,matchesTextLength);\n  this.totalNumberOfReads++;\n  this.totalNumberOfMatches+=numberOfMatches;\n  return location;\n}\n"}
{"nl": "Returns true if field clientIp is set (has been assigned a value) and false otherwise", "code": "public boolean isSetClientIp(){\n  return this.clientIp != null;\n}\n"}
{"nl": "<pre> <b>Description : </b> Processes the HttpResponse to create a DHisHttpResponse object", "code": "private static DhisHttpResponse processResponse(String requestURL,String username,HttpResponse response) throws Exception {\n  DhisHttpResponse dhisHttpResponse=null;\n  String output=null;\n  int statusCode=0;\n  if (response != null) {\n    HttpEntity responseEntity=response.getEntity();\n    if (responseEntity != null && responseEntity.getContent() != null) {\n      Header contentType=response.getEntity().getContentType();\n      if (contentType != null && checkIfGzipContentType(contentType)) {\n        GzipDecompressingEntity gzipDecompressingEntity=new GzipDecompressingEntity(response.getEntity());\n        InputStream content=gzipDecompressingEntity.getContent();\n        output=IOUtils.toString(content);\n      }\n else {\n        output=EntityUtils.toString(response.getEntity());\n      }\n      statusCode=response.getStatusLine().getStatusCode();\n    }\n else {\n      throw new Exception(\"No content found in the response received from http POST call to \" + requestURL + \" with username \"+ username);\n    }\n    dhisHttpResponse=new DhisHttpResponse(response,output,statusCode);\n  }\n else {\n    throw new Exception(\"NULL response received from http POST call to \" + requestURL + \" with username \"+ username);\n  }\n  return dhisHttpResponse;\n}\n"}
{"nl": "Perform tasks on Creature stop move", "code": "public void onStopMove(){\n  notifyAIOnMove();\n}\n"}
{"nl": "Copies all entries from the provided ObservableMap into this map", "code": "public void merge(StringMap<T> toMerge){\n  toMerge.forEach(null);\n}\n"}
{"nl": "Find the feature associated with the given item", "code": "public Object findFeature(Item item){\n  return path.findFeature(item);\n}\n"}
{"nl": "draw the node", "code": "public void draw(Node v,boolean selected){\n  final NodeView nv=viewer.getNV(v);\n  final NodeData data=(NodeData)v.getData();\n  if (selected)   hilite(v);\n  if ((!drawLeavesOnly || v.getOutDegree() == 0) && scaleBy != ScaleBy.None && nv.getShape() != NodeView.NONE_NODE) {\nswitch (style) {\ncase HeatMap:\n      drawAsHeatMap(v,nv,data);\n    break;\ncase BarChart:\n  drawAsBarChart(v,nv,data);\nbreak;\ncase PieChart:\ndrawAsCircle(v,nv,data);\ndrawAsPieChart(v,nv,data);\nbreak;\ncase CoxComb:\ndrawAsCoxComb(v,nv,data);\nbreak;\ndefault :\ncase Circle:\ndrawAsCircle(v,nv,data);\nbreak;\n}\n}\n else {\nnv.setShape(NodeView.NONE_NODE);\n}\n}\n"}
{"nl": "Helper Methods", "code": "private void parseExtras(Bundle savedInstanceState){\n  if (getIntent() != null) {\n    mTitle=getIntent().getStringExtra(EXTRA_TITLE);\n  }\n  if (savedInstanceState != null) {\n    mTitle=savedInstanceState.getString(EXTRA_TITLE);\n  }\n}\n"}
{"nl": "Is the class parcelable?", "code": "public static boolean isParcelable(Class clazz){\n  return Parcelable.class.isAssignableFrom(clazz);\n}\n"}
{"nl": "compute the hash value for a given key", "code": "public static int computeHash(byte[] key,int mask){\n  return Math.abs(MurmurHash3.murmurhash3x8632(key,0,key.length,666) & mask);\n}\n"}
{"nl": "Move mouse by a certain amount", "code": "public void moveBy(int amountX,int amountY){\n  Point p=getPosition();\n  move(p.x + amountX,p.y + amountY);\n}\n"}
{"nl": "Set count", "code": "public AccountGetActiveOffersQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Apply the size behaviour", "code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n"}
{"nl": "Returns the number of players that are on this account", "code": "public int size(){\n  return players.size();\n}\n"}
{"nl": "Find position of view in the middle of screen", "code": "private int findCurrentCenterViewPos(){\n  return getPosition(findCurrentCenterView());\n}\n"}
{"nl": "Appends a description of the given element, suitable as unit test golden file output", "code": "public static void appendElementDescription(@NotNull StringBuilder sb,@NotNull PsiElement element){\n  if (element instanceof LazyValueResourceElementWrapper) {\n    LazyValueResourceElementWrapper wrapper=(LazyValueResourceElementWrapper)element;\n    XmlAttributeValue value=wrapper.computeElement();\n    if (value != null) {\n      element=value;\n    }\n  }\n  PsiFile file=element.getContainingFile();\n  int offset=element.getTextOffset();\n  TextRange segment=element.getTextRange();\n  appendSourceDescription(sb,file,offset,segment);\n}\n"}
{"nl": "Creates regexp from url rule text", "code": "private String createRegexFromRule(String urlRuleText){\n  String regexText=StringUtils.replaceEach(urlRuleText,new String[]{\"?\",\".\",\"+\",\"[\",\"]\",\"(\",\")\",\"{\",\"}\",\"#\",\" \",\"\\\\\",\"$\"},new String[]{\"\\\\?\",\"\\\\.\",\"\\\\+\",\"\\\\[\",\"\\\\]\",\"\\\\(\",\"\\\\)\",\"\\\\{\",\"\\\\}\",\"\\\\#\",\"\\\\ \",\"\\\\\\\\\",\"\\\\$\"});\n  regexText=regexText.substring(0,MASK_START_URL.length()) + StringUtils.replace(regexText.substring(MASK_START_URL.length(),regexText.length() - 1),\"|\",\"\\\\|\") + regexText.substring(regexText.length() - 1);\n  regexText=StringUtils.replace(regexText,MASK_ANY_SYMBOL,REGEXP_ANY_SYMBOL);\n  regexText=StringUtils.replace(regexText,MASK_SEPARATOR,REGEXP_SEPARATOR);\n  if (regexText.startsWith(MASK_START_URL)) {\n    regexText=REGEXP_START_URL + regexText.substring(MASK_START_URL.length());\n  }\n else   if (regexText.startsWith(MASK_PIPE)) {\n    regexText=REGEXP_START_STRING + regexText.substring(MASK_PIPE.length());\n  }\n  if (regexText.endsWith(MASK_PIPE)) {\n    regexText=regexText.substring(0,regexText.length() - 1) + REGEXP_END_STRING;\n  }\n  return regexText;\n}\n"}
{"nl": "Construct an XSNamedMap implementation for a list of namespaces", "code": "public XSNamedMap4Types(String[] namespaces,SymbolHash[] maps,int num,short type){\n  super(namespaces,maps,num);\n  fType=type;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ProjectManager.getNumberOfProjects() == 1 && ((Director)ProjectManager.getProjects().get(0)).getDocument().getNumberOfSamples() == 0;\n}\n"}
{"nl": "Set fields", "code": "public AppsGetCatalogQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Checks if this point is equal to another point", "code": "@Override public boolean equals(Object o){\n  if (this == o) {\n    return true;\n  }\n  if (!(o instanceof Point3D)) {\n    return false;\n  }\n  Point3D point3D=(Point3D)o;\n  return x == point3D.x && y == point3D.y && z == point3D.z;\n}\n"}
{"nl": "Creates new form GotoLineDialog", "code": "public GotoLineDialog(JTextComponent text){\n  super(ActionUtils.getFrameFor(text),false);\n  initComponents();\n  this.text=text;\n  setLocationRelativeTo(text.getRootPane());\n}\n"}
{"nl": "Set allow group comments", "code": "public WallGetCommentsQueryWithExtended allowGroupComments(Boolean value){\n  return unsafeParam(\"allow_group_comments\",value);\n}\n"}
{"nl": "Set name case", "code": "public AppsGetCatalogQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "this method is called  by outside scan that want to quit the scan and return the slholder to the factory", "code": "public void freeSLHolder(IStoredListIterator<T> slh){\n  if (slh != null)   slh.release();\n}\n"}
{"nl": "notify that creature attacked", "code": "public void notifyAttackedObservers(Creature creature){\n  notifyObservers(ObserverType.ATTACKED,creature);\n}\n"}
{"nl": "Clears the entire object registery", "code": "public void clear(){\n  _objMap.clear();\n  _objIdMap.clear();\n}\n"}
{"nl": "compute all accessions that follow any one of the tags", "code": "public int compute(String line){\n  this.line=line;\n  int count=0;\n  if (attemptFirstWord) {\n    int a=0;\n    while (a < line.length()) {\n      if (line.charAt(a) == '>' || Character.isWhitespace(line.charAt(a)))       a++;\n else       break;\n    }\n    int b=a + 1;\n    while (b < line.length()) {\n      int ch=line.charAt(b);\n      if (Character.isLetterOrDigit(ch) || ch == ':' || ch == '_')       b++;\n else       break;\n    }\n    if (b - a > 4) {\n      pairs[count][0]=a;\n      pairs[count++][1]=b;\n    }\n  }\n  if (idTags.length > 0) {\n    for (    String tag : idTags) {\n      int b;\n      for (int a=line.indexOf(tag); a != -1; a=line.indexOf(tag,b + 1)) {\n        a+=tag.length();\n        b=a + 1;\n        while (b < line.length() && (Character.isLetterOrDigit(line.charAt(b)) || line.charAt(b) == '_'))         b++;\n        if (b > a) {\n          if (count == pairs.length)           pairs=MultiWords.grow(pairs);\n          pairs[count][0]=a;\n          pairs[count++][1]=b;\n        }\n      }\n    }\n  }\n  return count;\n}\n"}
{"nl": "Creates the default inverse cumulative probability density test expected values", "code": "@Override public int[] makeInverseCumulativeTestValues(){\n  return new int[]{1,1,1,1,1,1,2,10,10,10,9,8,10};\n}\n"}
{"nl": "Tints TextView's text color and it's compound drawables", "code": "public static void tintTextView(@NonNull TextView textview,ColorStateList tintColor){\n  textview.setTextColor(tintColor);\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n    Drawable[] drawables=textview.getCompoundDrawablesRelative();\n    textview.setCompoundDrawablesRelative(tintDrawable(drawables[0],tintColor),tintDrawable(drawables[1],tintColor),tintDrawable(drawables[2],tintColor),tintDrawable(drawables[3],tintColor));\n  }\n else {\n    Drawable[] drawables=textview.getCompoundDrawables();\n    textview.setCompoundDrawables(tintDrawable(drawables[0],tintColor),tintDrawable(drawables[1],tintColor),tintDrawable(drawables[2],tintColor),tintDrawable(drawables[3],tintColor));\n  }\n}\n"}
{"nl": "Parses the layout file with the given root node", "code": "private void parseLayoutNode(String layoutFile,AXmlNode rootNode){\n  if (rootNode.getTag() == null || rootNode.getTag().isEmpty()) {\n    System.err.println(\"Encountered a null or empty node name \" + \"in file \" + layoutFile + \", skipping node...\");\n    return;\n  }\n  String tname=rootNode.getTag().trim();\n  if (tname.equals(\"dummy\")) {\n  }\n else   if (tname.equals(\"include\")) {\n    parseIncludeAttributes(layoutFile,rootNode);\n  }\n else   if (tname.equals(\"merge\")) {\n  }\n else   if (tname.equals(\"fragment\")) {\n    final AXmlAttribute<?> attr=rootNode.getAttribute(\"name\");\n    if (attr == null)     System.err.println(\"Fragment without class name detected\");\n else {\n      if (attr.getType() != AxmlVisitor.TYPE_STRING)       System.err.println(\"Invalid targer resource \" + attr.getValue() + \"for fragment class value\");\n      getLayoutClass(attr.getValue().toString());\n    }\n  }\n else {\n    final SootClass childClass=getLayoutClass(tname);\n    if (childClass != null && (isLayoutClass(childClass) || isViewClass(childClass)))     parseLayoutAttributes(layoutFile,childClass,rootNode);\n  }\n  for (  AXmlNode childNode : rootNode.getChildren())   parseLayoutNode(layoutFile,childNode);\n}\n"}
{"nl": "Auto-generated main method to display this JFrame", "code": "public static void main(String[] args){\n  arguments=args;\n  JBCOViewer inst=new JBCOViewer();\n  inst.setVisible(true);\n}\n"}
{"nl": "Puts a new request in queue as a new thread in pool to be executed", "code": "protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){\n  if (contentType != null) {\n    uriRequest.setHeader(\"Content-Type\",contentType);\n  }\n  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());\n  responseHandler.setRequestURI(uriRequest.getURI());\n  Future<?> request=threadPool.submit(new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler));\n  if (context != null) {\n    List<WeakReference<Future<?>>> requestList=requestMap.get(context);\n    if (requestList == null) {\n      requestList=new LinkedList<WeakReference<Future<?>>>();\n      requestMap.put(context,requestList);\n    }\n    requestList.add(new WeakReference<Future<?>>(request));\n  }\n  return new RequestHandle(request);\n}\n"}
{"nl": "Print the Tables", "code": "public void printTable(ScoutWidget[] list){\n  printCenterTable(list);\n  printBaseTable(list);\n}\n"}
{"nl": "show a error Notification", "code": "public static void errorNotification(final String message){\n  showNotification(message,NotificationType.ERROR);\n}\n"}
{"nl": "Adds the sub equipment id as dependency to this tag", "code": "public boolean addSubEquipmentId(final Long subEquipmentId){\n  if (subEquipmentId != null && subEquipmentId > 0) {\n    return subEquipmentIds.add(subEquipmentId);\n  }\n  return false;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n"}
{"nl": "To check if the batch is processed completely", "code": "private boolean checkIfBatchIsProcessedCompletely(BatchResult batch){\n  if (counter < batch.getSize()) {\n    return false;\n  }\n else {\n    return true;\n  }\n}\n"}
{"nl": "Registers that a worker thread with the given ID has already processed this abstraction", "code": "public boolean registerPathFlag(int id,int maxSize){\n  if (pathFlags != null && id < pathFlags.size() && pathFlags.get(id))   return false;\n  if (pathFlags == null) {\nsynchronized (this) {\n      if (pathFlags == null) {\n        AtomicBitSet pf=new AtomicBitSet(maxSize);\n        pathFlags=pf;\n      }\n    }\n  }\n  return pathFlags.set(id);\n}\n"}
{"nl": "Verifies the security context has a valid trust", "code": "boolean verifyTrust(SecurityContext securityContext){\n  return (securityContext instanceof TrustedSecurityContext);\n}\n"}
{"nl": "A notation declaration", "code": "@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {\n  XMLNotationDecl notationDecl=new XMLNotationDecl();\n  notationDecl.setValues(name,identifier.getPublicId(),identifier.getLiteralSystemId(),identifier.getBaseSystemId());\n  int notationIndex=getNotationDeclIndex(name);\n  if (notationIndex == -1) {\n    notationIndex=createNotationDecl();\n    setNotationDecl(notationIndex,notationDecl);\n  }\n}\n"}
{"nl": "Just draw arc", "code": "private void drawSolidLineProgress(Canvas canvas){\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f,false,mProgressBackgroundPaint);\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f * getProgress() / getMax(),false,mProgressPaint);\n}\n"}
{"nl": "logs the FilteredDataTag in the appropriate log file", "code": "public final void log(){\n  TAGLOGGER.info(this.toString());\n}\n"}
{"nl": "b2en: functions for postfiltering", "code": "public static double b2en(double b[],int m,double a){\n  double cep[], ir[];\n  int arrayLength=(m + 1) + 2 * IRLENG;\n  double[] spectrum2en_buff=new double[arrayLength];\n  cep=new double[arrayLength];\n  ir=new double[arrayLength];\n  b2mc(b,spectrum2en_buff,m,a);\n  freqt(spectrum2en_buff,m,cep,IRLENG - 1,-a);\n  c2ir(cep,IRLENG,ir,IRLENG);\n  double en=0.0;\n  for (int i=0; i < IRLENG; i++)   en+=ir[i] * ir[i];\n  return en;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  getViewer().selectComponent(getViewer().getPcoaTab());\n}\n"}
{"nl": "Converts this object to a string", "code": "public String toString(){\n  return \"CMUTimeVoice\";\n}\n"}
{"nl": "Convenience factory method to create new RemoveFilesDialogFragment instances for a single file", "code": "public static RemoveFilesDialogFragment newInstance(OCFile file){\n  ArrayList<OCFile> list=new ArrayList<>();\n  list.add(file);\n  return newInstance(list);\n}\n"}
{"nl": "parses the given command and executes it", "code": "public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"sort direction=\");\n  final String direction=np.getWordMatchesIgnoringCase(\"up down\");\n  np.matchIgnoreCase(\"attribute=\");\n  final String attribute=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  final SamplesViewer viewer=((SamplesViewer)getViewer());\n  viewer.getSamplesTable().sortByColumn(attribute,direction.equals(\"up\"));\n}\n"}
{"nl": "Test if the x and y coordinates from user input are inside of the bounds of the button", "code": "public boolean isPressed(float xClick,float yClick){\n  return new Rectangle(x,y,width,height).overlaps(new Rectangle(xClick,yClick,1,1));\n}\n"}
{"nl": "Disables auto refresh", "code": "@ReactMethod public void disableAutoRefresh(String placementId){\n  mAdsManagers.get(placementId).disableAutoRefresh();\n}\n"}
{"nl": "add an element to the bottom of the queue", "code": "public boolean add(Object obj_){\n  _buf[_bottom]=obj_;\n  _bottom=(_bottom == _buf.length - 1) ? 0 : _bottom + 1;\n  if (_bottom == _top) {\n    int oldLen=_buf.length;\n    int newLen=oldLen * 2;\n    Object[] newBuf=new Object[newLen];\n    int topToEnd=oldLen - _top;\n    int newTop=newLen - topToEnd;\n    System.arraycopy(_buf,0,newBuf,0,_top);\n    System.arraycopy(_buf,_top,newBuf,newTop,topToEnd);\n    _buf=newBuf;\n    _top=newTop;\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Restore available badges from saveInstance", "code": "@SuppressWarnings(\"unchecked\") private void restoreBadges(){\n  Bundle restoredBundle=savedInstanceState;\n  if (restoredBundle != null) {\n    if (restoredBundle.containsKey(BADGE_FULL_TEXT_KEY)) {\n      shouldShowBadgeWithNinePlus=restoredBundle.getBoolean(BADGE_FULL_TEXT_KEY);\n    }\n    if (restoredBundle.containsKey(BUDGES_ITEM_BUNDLE_KEY)) {\n      badgeSaveInstanceHashMap=(HashMap<Integer,Object>)savedInstanceState.getSerializable(BUDGES_ITEM_BUNDLE_KEY);\n      if (badgeSaveInstanceHashMap != null) {\n        for (        Integer integer : badgeSaveInstanceHashMap.keySet()) {\n          BadgeHelper.forceShowBadge(badgeList.get(integer),(BadgeItem)badgeSaveInstanceHashMap.get(integer),shouldShowBadgeWithNinePlus);\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Save Fragment's State here", "code": "@Override protected void onSaveState(Bundle outState){\n  super.onSaveState(outState);\n}\n"}
{"nl": "This method should be called to make despawn of VisibleObject and delete it from the world", "code": "public void onDelete(){\n  if (getOwner().isInWorld()) {\n    this.onDespawn();\n    this.delete();\n  }\n}\n"}
{"nl": "Offset based on a first matching item to get a certain items subset", "code": "public MarketSearchQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n"}
{"nl": "if remoteDirName is null, the name of the project is used   ", "code": "public ShareProjectCommand(ISVNRepositoryLocation location,IProject project,String remoteDirName,boolean createDirectory){\n  this.location=location;\n  this.project=project;\n  if (remoteDirName == null) {\n    this.remoteDirName=project.getName();\n  }\n else {\n    this.remoteDirName=remoteDirName;\n  }\n  this.createDirectory=createDirectory;\n}\n"}
{"nl": "Check if current url contains provided url part", "code": "public static ExpectedCondition<Boolean> pageUrlContains(final String url){\n  return null;\n}\n"}
{"nl": "Update the buttons for the wizard", "code": "@Override public void updateButtons(boolean canGoPrev,boolean canGoNext,boolean canCancel,boolean canFinish){\n  JButton prev=getPreviousButton();\n  if (prev != null) {\n    prev.setEnabled(canGoPrev);\n  }\n  JButton next=getNextButton();\n  if (next != null) {\n    next.setEnabled(canGoNext);\n  }\n  getFinishButton().setEnabled(canFinish);\n  getCancelButton().setEnabled(canCancel);\n  if (!ApplicationManager.getApplication().isUnitTestMode()) {\n    getRootPane().setDefaultButton(canFinish ? getFinishButton() : getNextButton());\n  }\n}\n"}
{"nl": "set to create route rules", "code": "public static void addRouteCreator(RouteCreator creator){\n  RouteManager.INSTANCE.addCreator(creator);\n}\n"}
{"nl": "Gets the number of entries in this result object", "code": "public int size(){\n  return this.results == null ? 0 : this.results.size();\n}\n"}
{"nl": "get the state about AI of TicTacToc", "code": "public boolean isAITicTacToc(){\n  return isAITicTacToc;\n}\n"}
{"nl": "update the status text", "code": "private void updateStatus(){\n  conflicts=null;\n  if (resource == null) {\n    statusLabel.setText(\"\");\n    return;\n  }\n  try {\n    LocalResourceStatus status=resource.getStatus();\n    if (!resource.isManaged()) {\n      statusLabel.setText(Policy.bind(\"SvnPropertiesView.resourceNotManaged\"));\n    }\n else     if (status.getPropStatus().equals(SVNStatusKind.MODIFIED)) {\n      statusLabel.setText(Policy.bind(\"SvnPropertiesView.somePropertiesModified\"));\n    }\n else     if (status.getPropStatus().equals(SVNStatusKind.NORMAL)) {\n      statusLabel.setText(Policy.bind(\"SvnPropertiesView.noPropertiesModified\"));\n    }\n else     if (status.getPropStatus().equals(SVNStatusKind.CONFLICTED)) {\n      statusLabel.setText(Policy.bind(\"SvnPropertiesView.conflictOnProperties\"));\n      try {\n        conflicts=PropertyConflict.getPropertyConflicts(resource);\n      }\n catch (      Exception e) {\n      }\n    }\n else {\n      statusLabel.setText(\"\");\n    }\n  }\n catch (  SVNException e) {\n    statusLabel.setText(Policy.bind(\"SvnPropertiesView.errorGettingStatus\"));\n  }\n}\n"}
{"nl": "Convert a collection of jsonable objects to list of json objects", "code": "public static List<JsonNode> listToJson(Collection<? extends IJsonable> collection){\n  List<JsonNode> jsonList=new LinkedList<>();\n  for (  IJsonable item : collection) {\n    jsonList.add(item.jsonize());\n  }\n  return jsonList;\n}\n"}
{"nl": "Specify whether or not to draw a drop shadow around the outer circle", "code": "public TapTarget drawShadow(boolean draw){\n  this.drawShadow=draw;\n  return this;\n}\n"}
{"nl": "Resets the current context", "code": "public static void resetContext(){\n  invocationContexts.get().getContext().reset();\n}\n"}
{"nl": "WISHLIST QUERIES", "code": "public WishlistCursor queryWishlists(){\n  return mHelper.queryWishlists();\n}\n"}
{"nl": "Terminate a running Webster instance", "code": "public void terminate(){\n  run=false;\n  if (ss != null) {\n    try {\n      ss.close();\n    }\n catch (    Exception e) {\n      logger.log(Level.WARNING,\"Exception closing Webster ServerSocket\",e);\n    }\n  }\n  if (lifeCycle != null) {\n    lifeCycle.unregister(this);\n  }\n  if (pool != null) {\n    pool.shutdown();\n  }\n}\n"}
{"nl": "Method to remove ownership of all owned bundles", "code": "public void removeOwnership(NamespaceBundles bundles){\n  boolean hasError=false;\n  for (  NamespaceBundle bundle : bundles.getBundles()) {\n    if (getOwnedServiceUnit(bundle) == null) {\n      continue;\n    }\n    try {\n      this.removeOwnership(bundle);\n    }\n catch (    Exception e) {\n      LOG.warn(String.format(\"Failed to remove ownership of a service unit: %s\",bundle),e);\n      hasError=true;\n    }\n  }\n  checkState(!hasError,\"Not able to remove all owned bundles\");\n}\n"}
{"nl": "Create a daemon thread", "code": "public AnnouncementTimerThread(){\n  super(\"GS-multicast-announcement-timer\");\n  setDaemon(true);\n}\n"}
{"nl": "Super before subclass, alphabetical within a given class", "code": "public int compare(Object o1,Object o2){\n  Field f1=(Field)o1;\n  Field f2=(Field)o2;\n  if (f1 == f2)   return 0;\n  if (f1.getDeclaringClass() == f2.getDeclaringClass())   return f1.getName().compareTo(f2.getName());\n  if (f1.getDeclaringClass().isAssignableFrom(f2.getDeclaringClass()))   return -1;\n  return 1;\n}\n"}
{"nl": "Constructs a NullAudioPlayer", "code": "public RawFileAudioPlayer(String path) throws IOException {\n  this.path=path;\n  os=new BufferedOutputStream(new FileOutputStream(path));\n}\n"}
{"nl": "Remove an input processor", "code": "public void removeInputProcessor(InputProcessor ip){\n  processors.removeProcessor(ip);\n  Gdx.input.setInputProcessor(processors);\n}\n"}
{"nl": "Transform android pixels into Dp", "code": "public int pxToDp(@AndroidCoordinate int px){\n  return myConstraintModel.pxToDp(px);\n}\n"}
{"nl": "Login user with the provided provider", "code": "public void login(CredentialProvider credentialProvider) throws LoginFailedException, RemoteServerException {\n  if (credentialProvider == null) {\n    throw new NullPointerException(\"Credential Provider is null\");\n  }\n  this.credentialProvider=credentialProvider;\n  startTime=currentTimeMillis();\n  playerProfile=new PlayerProfile(this);\n  settings=new Settings(this);\n  inventories=new Inventories(this);\n  initialize();\n}\n"}
{"nl": "does this viewer currently have any URLs for selected nodes?", "code": "public boolean hasURLsForSelection(){\n  return getSelectedNodes().size() > 0;\n}\n"}
{"nl": "dalvik do not have security manager", "code": "private static void forceSet(Object obj,Field f,Object val) throws IllegalAccessException {\n  f.setAccessible(true);\n  f.set(obj,val);\n}\n"}
{"nl": "Set server", "code": "public PhotosSaveMessagesPhotoQuery server(Integer value){\n  return unsafeParam(\"server\",value);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public StringTokenizer(String str,String delim,boolean returndelims,boolean coalescedelims){\n  this.m_delimiters_=EMPTY_DELIMITER_;\n  if ((delim != null) && (delim.length() > 0)) {\n    this.m_delimiters_=new UnicodeSet();\n    this.m_delimiters_.addAll(delim);\n    checkDelimiters();\n  }\n  this.m_coalesceDelimiters_=coalescedelims;\n  this.m_source_=str;\n  this.m_length_=str.length();\n  this.m_returnDelimiters_=returndelims;\n  this.m_tokenOffset_=-1;\n  this.m_tokenSize_=-1;\n  if (this.m_length_ == 0) {\n    this.m_nextOffset_=-1;\n  }\n else {\n    this.m_nextOffset_=0;\n    if (!returndelims) {\n      this.m_nextOffset_=getNextNonDelimiter(0);\n    }\n  }\n}\n"}
{"nl": "are the two widgets in the same horizontal area", "code": "static boolean isSameRow(ConstraintWidget a,ConstraintWidget b){\n  return Math.max(a.getY(),b.getY()) < Math.min(a.getY() + a.getHeight(),b.getY() + b.getHeight());\n}\n"}
{"nl": "Instantiate an image with the given height and width", "code": "public ImageLoader(int height,int width,int channels,boolean centerCropIfNeeded){\n  this(height,width,channels);\n  this.centerCropIfNeeded=centerCropIfNeeded;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),\"Choose fill color\",ProgramProperties.get(\"NodeFillColor\",Color.WHITE));\n  if (color != null) {\n    execute(\"set fillColor=\" + color.getRed() + \" \"+ color.getGreen()+ \" \"+ color.getBlue()+ \";\");\n    ProgramProperties.put(\"NodeFillColor\",color);\n  }\n}\n"}
{"nl": "Try Stmt Creation", "code": "private void createTry(polyglot.ast.Try tryStmt){\n  polyglot.ast.Block finallyBlock=tryStmt.finallyBlock();\n  if (finallyBlock == null) {\n    createTryCatch(tryStmt);\n  }\n else {\n    createTryCatchFinally(tryStmt);\n  }\n}\n"}
{"nl": "Opens a text file and sets its contents as data string", "code": "public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {\n  String sDataString=utils.loadFileToStringWithNewlines(sFilename);\n  setDataString(sDataString);\n}\n"}
{"nl": "Synthesize a Wave  from this LPCResult", "code": "public boolean playWave(AudioPlayer player,Utterance utterance){\n  return playWaveSamples(player,utterance.getSpeakable(),getNumberOfSamples() * 2);\n}\n"}
{"nl": "Make a DELETE call", "code": "public Call delete(String url,Callback callback){\n  Request request=new Builder().url(url).delete().build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n"}
{"nl": "is event the first event in the calendar?", "code": "private boolean isMinimal(SimulationEvent event){\n  return minIndex == NULL || eventComparator.compare(event,eventList.get(minIndex)) < 0;\n}\n"}
{"nl": "Generates Curve {in a plane ranging from 0-255} using the knots provided", "code": "public static int[] curveGenerator(Point[] knots){\n  if (knots == null) {\n    throw new NullPointerException(\"Knots cannot be null\");\n  }\n  int n=knots.length - 1;\n  if (n < 1) {\n    throw new IllegalArgumentException(\"Atleast two points are required\");\n  }\n  if (Build.VERSION.SDK_INT >= 21) {\n    return getOutputPointsForNewerDevices(knots);\n  }\n else {\n    return getOutputPointsForOlderDevices(knots);\n  }\n}\n"}
{"nl": "Closes this apk file and all resources associated with it", "code": "public void close(){\n  if (this.apk != null)   this.apk.close();\n}\n"}
{"nl": "make a SAM line", "code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n"}
{"nl": "write text data to response", "code": "public static boolean writeText(HttpServletResponse resp,Object msg){\n  return write(resp,\"text/plain\",msg);\n}\n"}
{"nl": "Returns true if views with the given fully qualified class name need to include their package in the layout XML tag", "code": "private static boolean viewNeedsPackage(String fqcn){\n  return !(fqcn.startsWith(ANDROID_WIDGET_PREFIX) || fqcn.startsWith(ANDROID_VIEW_PKG) || fqcn.startsWith(ANDROID_WEBKIT_PKG));\n}\n"}
{"nl": "erase the table", "code": "public void clear(){\n  description=null;\n  table.clear();\n  sampleOrder.clear();\n  attributeOrder.clear();\n  attribute2type.clear();\n}\n"}
{"nl": "refresh current month days", "code": "public void refreshDays(){\n  mEventList.clear();\n  mPMonth=(GregorianCalendar)mCalendar.clone();\n  CalendarGridviewAdapter.firstDay=mCalendar.get(GregorianCalendar.DAY_OF_WEEK);\n  int mMaxWeekNumber=mCalendar.getActualMaximum(Calendar.WEEK_OF_MONTH);\n  mMonthLength=mMaxWeekNumber * 7;\n  int mMaxP=getmMaxP();\n  int mCalMaxP=mMaxP - (CalendarGridviewAdapter.firstDay - 1);\n  mPMonthMaxSet=(GregorianCalendar)mPMonth.clone();\n  mPMonthMaxSet.set(GregorianCalendar.DAY_OF_MONTH,mCalMaxP + 1);\n  setData(getCalendarData());\n}\n"}
{"nl": "For debugging only", "code": "@Override public String toString(){\n  return String.format(\"(%d,%.3g)\",mX,mY);\n}\n"}
{"nl": "Selects all occurrences of text in document, subject to options and constraints of document type", "code": "public int findAll(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,true);\n}\n"}
{"nl": "make a SAM line", "code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n"}
{"nl": "does this searcher support find all?", "code": "public boolean canFindAll(){\n  return true;\n}\n"}
{"nl": "Show specific mark on top of player", "code": "public static void showBrand(Player player,int targetObjId,int brandId){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new ShowBrandEvent<PlayerGroup>(group,targetObjId,brandId));\n  }\n}\n"}
{"nl": "Die by reducing HP to 0", "code": "public void die(){\n  getOwner().getLifeStats().reduceHp(getOwner().getLifeStats().getCurrentHp() + 1,getOwner());\n}\n"}
{"nl": "Deactivates provided asset", "code": "public void deactivatePage(String assetPath) throws IOException {\n  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(PATH_PROPERTY,assetPath).put(CMD_PROPERTY,DEACTIVATE).put(CHARSET_PROPERTY,UTF_8).build()),REPLICATE_URL,REPLICATION_STARTED_MESSAGE + assetPath);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static boolean onCharacterBoundary(CharSequence s,int i){\n  return (i <= 0) || (i >= s.length()) || (!Character.isHighSurrogate(s.charAt(i - 1)))|| (!Character.isLowSurrogate(s.charAt(i)));\n}\n"}
{"nl": "Trims the return line from the string", "code": "private String trimReturnLine(String string){\n  return CharMatcher.anyOf(\"\\n\").trimFrom(string);\n}\n"}
{"nl": "Migrate a CSV schema into a Mindmaps ontology", "code": "public Collection<Var> migrate(){\n  Collection<Var> collection=new HashSet<>();\n  for (  Collection<Var> vars : this) {\n    collection.addAll(vars);\n  }\n  return collection;\n}\n"}
{"nl": "notify listeners to prevent user input", "code": "public void notifyLockInput(){\n  if (!locked) {\nsynchronized (directorListeners) {\n      IDirectorListener[] listeners=directorListeners.toArray(new IDirectorListener[directorListeners.size()]);\n      for (      IDirectorListener directorListener : listeners) {\n        if (directorListener != this)         directorListener.lockUserInput();\n      }\n    }\n  }\n  locked=true;\n}\n"}
{"nl": "the xor operation is used to ensure the order of operands does not impact the hashcode", "code": "public int hashCode(){\n  int hashcode=this.operations[0].hashCode();\n  for (int i=1; i < operations.length; i++) {\n    hashcode^=operations[i].hashCode();\n  }\n  return hashcode;\n}\n"}
{"nl": "New password that  will be set as a current", "code": "protected AccountChangePasswordQuery newPassword(String value){\n  return unsafeParam(\"new_password\",value);\n}\n"}
{"nl": "Display Timer(4)", "code": "public SM_QUEST_ACTION(int questId,boolean fake){\n  this.action=6;\n  this.questId=questId;\n  this.timer=0;\n  this.step=0;\n}\n"}
{"nl": "mul the Math_Vector using scalar", "code": "public Math_Vector mul(double scalar){\n  this.x*=scalar;\n  this.y*=scalar;\n  return this;\n}\n"}
{"nl": "dot product operator two vectors that are perpendicular have a dot product of 0", "code": "public double dot(Vector other){\n  return x * other.x + y * other.y;\n}\n"}
{"nl": "computes the center for a set of points", "code": "private Point2D computeCenter(ArrayList<Point2D> points){\n  final Point center=new Point(0,0);\n  if (points.size() > 0) {\n    for (    Point2D aPt : points) {\n      center.x+=(int)aPt.getX();\n      center.y+=(int)aPt.getY();\n    }\n    center.x/=points.size();\n    center.y/=points.size();\n  }\n  return center;\n}\n"}
{"nl": "Checks if Dynamic Timedeadband can be appliyed or not", "code": "@Override public boolean isDynamicTimeDeadband(final SourceDataTag tag){\n  DataTagAddress address=tag.getAddress();\n  return (!address.isStaticTimedeadband() && this.equipmentConfiguration.isDynamicTimeDeadbandEnabled());\n}\n"}
{"nl": "parse from buffer", "code": "public void parseBuffer(ByteInputBuffer buffer,InputReaderLittleEndian refIns) throws IOException {\n  subjectId=buffer.readIntLittleEndian();\n  int flag=buffer.read();\n  score=buffer.readPacked(flag & 3);\n  queryBegin=buffer.readPacked((flag >>> 2) & 3);\n  subjectBegin=buffer.readPacked((flag >>> 4) & 3);\n  transcript.read(buffer);\n  if (refIns != null)   subjectName=daaHeader.getReference(subjectId,refIns);\n else   subjectName=\"unknown\".getBytes();\n  totalSubjectLen=daaHeader.getRefLength(subjectId);\nswitch (daaHeader.getAlignMode()) {\ncase blastx:\n{\n      frame=(flag & (1 << 6)) == 0 ? queryBegin % 3 : 3 + (queryRecord.getSourceSequence().length - 1 - queryBegin) % 3;\n      translatedQueryBegin=getQueryTranslatedBegin(queryBegin,frame,queryRecord.getSourceSequence().length,true);\n      break;\n    }\ncase blastp:\n{\n    frame=0;\n    translatedQueryBegin=queryBegin;\n    break;\n  }\ndefault :\ncase blastn:\n{\n  frame=(flag & (1 << 6)) == 0 ? 0 : 1;\n  translatedQueryBegin=getQueryTranslatedBegin(queryBegin,frame,queryRecord.getSourceSequence().length);\n}\n}\nparseTranscript(transcript);\n}\n"}
{"nl": "Creates the default probability density test input values", "code": "@Override public int[] makeDensityTestPoints(){\n  return new int[]{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28};\n}\n"}
{"nl": "Checks that no errors are present in the event log", "code": "private void checkNoErrors(){\n  guiTest.robot().waitForIdle();\n  for (  Notification notification : EventLog.getLogModel(guiTest.ideFrame().getProject()).getNotifications()) {\n    assertThat(notification.getType()).isNotEqualTo(NotificationType.ERROR);\n  }\n}\n"}
{"nl": "Construct the Cassandra driver from the specified context", "code": "protected CassandraDriver newDriver(final String propertyContext,final HealthCheckRegistry registry,final String instanceName) throws IOException, ConnectionException {\n  DriverConfiguration config=new DriverConfiguration(propertyContext);\n  CassandraDriver result=new DefaultCassandraDriver(config,registry,instanceName);\n  if (!result.isKeyspaceInitialized()) {\n    result.initializeKeyspace();\n  }\n  return result;\n}\n"}
{"nl": "Checking victory", "code": "static boolean checkWin(char _xo){\n  for (int i=0; i < field_size; i++) {\n    if (field[i][0] == _xo && field[i][1] == _xo && field[i][2] == _xo)     return true;\n    if (field[0][i] == _xo && field[1][i] == _xo && field[2][i] == _xo)     return true;\n  }\n  if (field[0][0] == _xo && field[1][1] == _xo && field[2][2] == _xo)   return true;\n  if (field[2][0] == _xo && field[1][1] == _xo && field[0][2] == _xo)   return true;\n  return false;\n}\n"}
{"nl": "<font color=\"red\"><b>NOT IMPLEMENTED</b></font>", "code": "@Override public void remove(){\n  throw new UnsupportedOperationException(\"This operation is not supported.\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesRemoveChatUserQuery(VkApiClient client,UserActor actor,int chatId,String userId){\n  super(client,\"messages.removeChatUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n  userId(userId);\n}\n"}
{"nl": "Puts time in time field", "code": "public ReplicateLaterWindow fillTime(String time){\n  timeField.sendKeys(time);\n  return this;\n}\n"}
{"nl": "Return a list of suggested friends", "code": "public FriendsGetRequestsQuery suggested(Boolean value){\n  return unsafeParam(\"suggested\",value);\n}\n"}
{"nl": "UidQueryPacket can only be used to query the EDS if it is attached to specific type", "code": "@Override public boolean isTransient(){\n  return _typeDesc == null || _typeDesc.getIdPropertyName() == null || super.isTransient();\n}\n"}
{"nl": "Helper method to have the sync adapter sync immediately", "code": "public static void syncImmediately(Context context,Bundle extras){\n  Bundle bundle=new Bundle(extras);\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);\n  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);\n  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.data_provider_authority),bundle);\n}\n"}
{"nl": "Required for Externalizable", "code": "public SpaceConnectRequest(){\n}\n"}
{"nl": "Gives us a chance to change layers behaviour upon drag and drop interaction starting", "code": "public void startDragDropInteraction(){\n  for (  Layer layer : myLayers) {\n    if (layer instanceof ConstraintsLayer) {\n      ConstraintsLayer constraintsLayer=(ConstraintsLayer)layer;\n      if (!constraintsLayer.isShowOnHover()) {\n        constraintsLayer.setShowOnHover(true);\n        repaint();\n      }\n    }\n  }\n}\n"}
{"nl": "Retunrns true if players name and password has are equals", "code": "@Override public boolean equals(Object o){\n  if (this == o) {\n    return true;\n  }\n  if (!(o instanceof Account)) {\n    return false;\n  }\n  Account account=(Account)o;\n  if (name != null ? !name.equals(account.name) : account.name != null) {\n    return false;\n  }\n  return !(passwordHash != null ? !passwordHash.equals(account.passwordHash) : account.passwordHash != null);\n}\n"}
{"nl": "get the next element in scan order", "code": "public IStoredListIterator<T> next(IStoredListIterator<T> slh){\n  IStoredListIterator<T> slnext=nextPos((SegmentedListIterator<T>)slh);\n  if (slnext == null)   slh.release();\n  return slnext;\n}\n"}
{"nl": "Construct a new HistorySearchViewerFilter", "code": "public HistorySearchViewerFilter(String user,String comment,Date startDate,Date endDate,boolean regExp,SVNRevision.Number startRevision,SVNRevision.Number endRevision){\n  this.user=user;\n  this.comment=comment;\n  this.startDate=startDate;\n  this.endDate=endDate;\n  this.regExp=regExp;\n  this.startRevision=startRevision;\n  this.endRevision=endRevision;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveAddUserQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"fave.addUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "sets the program properties", "code": "public static void initializeProperties(String propertiesFile){\n  ProgramProperties.setPropertiesFileName(propertiesFile);\n  ProgramProperties.setProgramIcon(ResourceManager.getIcon(\"megan64.gif\"));\n  ProgramProperties.put(MEGANFILE,System.getProperty(\"user.dir\"));\n  ProgramProperties.put(SAVEFILE,System.getProperty(\"user.dir\"));\n  ProgramProperties.put(EXPORTFILE,System.getProperty(\"user.dir\"));\n  ProgramProperties.put(TAXONOMYFILE,DEFAULT_TAXONOMYFILE);\n  ProgramProperties.put(MAPPINGFILE,DEFAULT_MAPPINGFILE);\n  ProgramProperties.put(MICROBIALATTRIBUTESFILE,DEFAULT_MICROBIALATTRIBUTESFILE);\n  ProgramProperties.put(BLASTFILE,\"\");\n  ProgramProperties.put(BLASTOUTFILE,\"\");\n  ProgramProperties.put(PVALUE_COLOR,Color.YELLOW);\n  ProgramProperties.put(RECENTFILES,\"\");\n  ProgramProperties.put(MAXRECENTFILES,30);\n  ProgramProperties.put(ExportImageDialog.GRAPHICSFORMAT,\".pdf\");\n  ProgramProperties.put(ExportImageDialog.GRAPHICSDIR,System.getProperty(\"user.dir\"));\n  ProgramProperties.put(DISABLED_TAXA,new int[]{32644,37965,134367,2323,28384,61964,48510,47936,186616,12908,48479,156614,367897});\n  ProgramProperties.load(propertiesFile);\n  if (!ProgramProperties.get(\"Version\",\"\").equals(ProgramProperties.getProgramName())) {\n    ProgramProperties.put(\"Version\",ProgramProperties.getProgramName());\n    ProgramProperties.put(TAXONOMYFILE,DEFAULT_TAXONOMYFILE);\n    ProgramProperties.put(MAPPINGFILE,DEFAULT_MAPPINGFILE);\n    ProgramProperties.put(MICROBIALATTRIBUTESFILE,DEFAULT_MICROBIALATTRIBUTESFILE);\n  }\n  ProgramProperties.put(MeganProperties.DEFAULT_PROPERTIES,\"\");\n  ReadMagnitudeParser.setEnabled(ProgramProperties.get(\"allow-read-weights\",false));\n  ReadMagnitudeParser.setUnderScoreEnabled(ProgramProperties.get(\"allow-read-weights-underscore\",false));\n}\n"}
{"nl": "Disable the Safe Search filter", "code": "public VideoSearchQueryWithExtended adult(Boolean value){\n  return unsafeParam(\"adult\",value);\n}\n"}
{"nl": "Returns the schema of the table's records", "code": "public Schema schema(){\n  return schema;\n}\n"}
{"nl": "print a distance matrix in nexus format", "code": "public static void printAsNexus(String name,int ntax,String[] names,Vector<Vector<Double>> values){\n  Writer w=new StringWriter();\n  try {\n    w.write(\"#NEXUS\\n[!Computed by MEGAN using \" + name + \"]\\n\");\n    w.write(\"begin taxa;\\ndimensions ntax=\" + ntax + \";\\nend;\\n\");\n    w.write(\"begin distances;\\ndimensions ntax=\" + ntax + \";\\nformat labels no diagonal triangle=upper;\\n\");\n    w.write(\"matrix\\n\");\n    int count=0;\n    for (    Vector<Double> row : values) {\n      w.write(\"'\" + names[count++].replaceAll(\"'\",\"_\") + \"'\");\n      for (      Double value : row) {\n        w.write(\" \" + value.floatValue());\n      }\n      w.write(\"\\n\");\n    }\n    w.write(\"'\" + names[count].replaceAll(\"'\",\"_\") + \"'\\n\");\n    w.write(\";\\nend;\\n\");\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n  System.err.println(w.toString());\n}\n"}
{"nl": "clear the cookie in the SharedPreferences", "code": "public static void clearCookie(){\n  prefs.edit().putString(\"cookie\",\"\").commit();\n}\n"}
{"nl": "A notation declaration", "code": "@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {\n}\n"}
{"nl": "Set user ids", "code": "public NewsfeedAddBanQuery userIds(List<Integer> value){\n  return unsafeParam(\"user_ids\",value);\n}\n"}
{"nl": "get the number of resources in the pool", "code": "public int size(){\n  return _locks.length;\n}\n"}
{"nl": "Reads a single char from the stream", "code": "public static char readChar(DataInputStream dis) throws IOException {\n  return (char)dis.readByte();\n}\n"}
{"nl": "Disconnect from the server and stop receiving updates", "code": "public void disconnect(){\n  if (connectionState == ConnectionState.Disconnected || connectionState == ConnectionState.Connecting || !client.isConnected()) {\n    return;\n  }\n  AirMapLog.i(\"TrafficService\",\"Disconnecting from alerts\");\n  removeAllTraffic();\n  try {\n    client.disconnect(connectionState,actionListener);\n    checkForUpdatedFlight=false;\n  }\n catch (  MqttException e) {\n    AirMapLog.e(\"TrafficService\",\"Error disconnecting\");\n  }\n finally {\n    onDisconnect(false);\n  }\n}\n"}
{"nl": "Execute an HTTP request without body", "code": "public static HttpResponse execute(HttpMethod method,String targetUrl) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {\n  return execute(method,targetUrl,null,null);\n}\n"}
{"nl": "Synchronously sync libraries", "code": "public SyncResult syncLibraries(String oldLibrary,String newLibrary){\n  try {\n    long taskId=trySync(oldLibrary,newLibrary);\n    while (true) {\n      JSONObject taskStatus=getTaskStatus(taskId);\n      JSONObject taskDetails=getTaskDetails(taskStatus);\n      if (isSyncComplete(taskStatus,taskDetails)) {\n        return taskDetailsToSyncResult(taskDetails);\n      }\n      if (quietSleep(progressUpdateFrequency))       return SyncResult.fail();\n    }\n  }\n catch (  Throwable t) {\n    return SyncResult.fail(t.getMessage());\n  }\n}\n"}
{"nl": "Process NOTIFICATION_SUPPORTED_REPORT", "code": "protected void processNotificationSupportedReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {\n  v1Supported=(serialMessage.getMessagePayloadByte(offset + 1) & 0x80) == 0;\n  if (v1Supported) {\n    logger.debug(\"NODE: NOTIFICATION_SUPPORTED_REPORT reports V1 ALARM support\",getNode().getNodeId());\n  }\n  int numBytes=serialMessage.getMessagePayloadByte(offset + 1) & 0x1f;\n  for (int i=0; i < numBytes; ++i) {\n    for (int bit=0; bit < 8; ++bit) {\n      if (((serialMessage.getMessagePayloadByte(offset + i + 2)) & (1 << bit)) == 0) {\n        continue;\n      }\n      int index=(i << 3) + bit;\n      if (index >= AlarmType.values().length) {\n        continue;\n      }\n      getAlarm(index);\n    }\n  }\n  supportedInitialised=true;\n}\n"}
{"nl": "init meteor game when game start", "code": "public void initMeteorGameWhenConditionStart(){\n  Random rnd=new Random();\n  for (int i=0; i < roomClients.size(); i++)   roomClients.get(i).setnDestoryMeteor(0);\n  for (int i=0; i < Settings.nSettingAsteroidNumber; i++) {\n    sendMessageInTheRoomPeople(Settings._ANSWER_METEORGAME_UNIVERSE_INIT + \"\",rnd.nextInt(Settings.nGameAsteroidSceneWidth) + \"\",rnd.nextInt(Settings.nGameAsteroidSceneHeight) + \"\");\n    try {\n      Thread.sleep(20);\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n  sendMessageInTheRoomPeople(Settings._ANSWER_METEORGAME_PLAY_START + \"\",Boolean.toString(true));\n}\n"}
{"nl": "Builds the ControlZoomOptions new instance", "code": "public ControlZoomOptions build(){\n  ControlZoomOptions options=new ControlZoomOptions();\n  options.position=this.position;\n  options.zoomInText=this.zoomInText;\n  options.zoomOutText=this.zoomOutText;\n  options.zoomInTitle=this.zoomInTitle;\n  options.zoomOutTitle=this.zoomOutTitle;\n  return options;\n}\n"}
{"nl": "Set start comment id", "code": "public BoardGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n"}
{"nl": "Selects checbox in AemSidekick grid based", "code": "public SidekickGridRow selectGridCheckbox(){\n  if (!isGridRowCheckboxSelected()) {\n    bobcatWait.withTimeout(Timeouts.BIG).until(null,5);\n  }\n  return this;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  Director.showMessageWindow();\n}\n"}
{"nl": "Convenience method: gets the mode encoded in the parameter string", "code": "static public COMPARISON_MODE parseMode(String parameterString){\n  try {\n    if (parameterString != null) {\n      NexusStreamParser np=new NexusStreamParser(new StringReader(parameterString));\n      while (np.peekNextToken() != NexusStreamParser.TT_EOF) {\n        if (np.peekMatchIgnoreCase(\"mode=\")) {\n          np.matchIgnoreCase(\"mode=\");\n          return COMPARISON_MODE.valueOfIgnoreCase(np.getWordRespectCase());\n        }\n else         np.getWordRespectCase();\n      }\n    }\n  }\n catch (  Exception ex) {\n  }\n  return COMPARISON_MODE.ABSOLUTE;\n}\n"}
{"nl": "end the document", "code": "@Override public void endDocument() throws SAXException {\n  super.endDocument();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardGetTopicsQueryWithExtended(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"board.getTopics\",GetTopicsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  extended(true);\n}\n"}
{"nl": "release SLHolder for this scan", "code": "public void releaseScan() throws SAException {\n  if (_curValueList != null) {\n    _curValueList.releaseScan();\n    _curValueList=null;\n  }\n}\n"}
{"nl": "this method should be used only on FlyTimeRestoreService", "code": "public void restoreFp(){\n  increaseFp(TYPE.NATURAL_FP,1);\n}\n"}
{"nl": "delete all user lock info for the user id", "code": "public static int cleanup(long uid){\n  return Helper.delete(W.create(\"uid\",uid),Lock.class);\n}\n"}
{"nl": "add highlights for the given pattern", "code": "void addMarkers(Token tok){\n  SyntaxDocument sDoc=(SyntaxDocument)pane.getDocument();\n  sDoc.readLock();\n  String text=tok.getText(sDoc);\n  Iterator<Token> it=sDoc.getTokens(0,sDoc.getLength());\n  while (it.hasNext()) {\n    Token nextToken=it.next();\n    if (nextToken.length == tok.length && text.equals(nextToken.getText(sDoc))) {\n      Markers.markToken(pane,nextToken,marker);\n    }\n  }\n  sDoc.readUnlock();\n}\n"}
{"nl": "Is this target the left half of a phone?", "code": "public boolean isLeftHalf(){\n  return isLeftHalf;\n}\n"}
{"nl": "Local Class Decl - Local Inner Class", "code": "private void createLocalClassDecl(polyglot.ast.LocalClassDecl cDecl){\n  BiMap lcMap=InitialResolver.v().getLocalClassMap();\n  String name=Util.getSootType(cDecl.decl().type()).toString();\n  if (!InitialResolver.v().hasClassInnerTag(body.getMethod().getDeclaringClass(),name)) {\n    Util.addInnerClassTag(body.getMethod().getDeclaringClass(),name,null,cDecl.decl().name(),Util.getModifier(cDecl.decl().flags()));\n  }\n}\n"}
{"nl": "Set an int value in the preferences editor, to be written back once", "code": "public static void putInt(String key,int value){\n  prefs.edit().putInt(key,value).commit();\n}\n"}
{"nl": "fix the offset x in case item out of boundary", "code": "private void fixScrollOffset(){\n  if (offsetScroll < 0) {\n    offsetScroll=0;\n  }\n  if (offsetScroll > getMaxOffsetX()) {\n    offsetScroll=getMaxOffsetX();\n  }\n}\n"}
{"nl": "Constructs a PauseGenerator", "code": "public PauseGenerator(){\n}\n"}
{"nl": "Returns the endianness of the file", "code": "public boolean isBigEndian(){\n  return isBigEndian;\n}\n"}
{"nl": "scale non-uniformly", "code": "public void scale(double r,double s,double t){\n  Matrix3D tmp=new Matrix3D();\n  tmp.set(0,0,r);\n  tmp.set(1,1,s);\n  tmp.set(2,2,t);\n  preMultiply(tmp);\n}\n"}
{"nl": "Unschedules an instance of <code>Scheduled</code> class", "code": "public final void unschedule(final ScheduledTask task){\n  if (task == null)   return;\n  task.suspend();\n}\n"}
{"nl": "Remove passed key from cache", "code": "public void removeKey(String key){\n  String validKey=convertToValidKey(key);\n  try {\n    mDiskCache.remove(validKey);\n    Log_OC.d(TAG,\"removeKey from cache: \" + validKey);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Send mailbox info", "code": "public SM_MAIL_SERVICE(Player player,Collection<Letter> letters){\n  super(player);\n  this.serviceId=2;\n  this.letters=letters;\n}\n"}
{"nl": "Return a list of suggested friends", "code": "public FriendsGetRequestsQueryWithExtended suggested(Boolean value){\n  return unsafeParam(\"suggested\",value);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set nucleotideColors=\");\n  String value=np.getWordMatchesIgnoringCase(Basic.toString(ColorSchemeNucleotides.getNames(),\" \"));\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.setNucleotideColoringScheme(value);\n  viewer.setShowAminoAcids(viewer.isShowAminoAcids());\n}\n"}
{"nl": "copy a split", "code": "public void copy(Split split){\n  setA(split.getA());\n  setB(split.getB());\n  setWeight(split.getWeight());\n  weightList.addAll(split.weightList);\n}\n"}
{"nl": "this tab has been deselected", "code": "@Override public void deactivate(){\n}\n"}
{"nl": "converts a swing accelerator key to a JavaFX key combination", "code": "public static KeyCombination translateAccelerator(KeyStroke acceleratorKey){\n  final List<KeyCombination.Modifier> modifiers=new ArrayList<>();\n  if ((acceleratorKey.getModifiers() & java.awt.event.InputEvent.SHIFT_DOWN_MASK) != 0)   modifiers.add(KeyCombination.SHIFT_DOWN);\n  if ((acceleratorKey.getModifiers() & java.awt.event.InputEvent.CTRL_DOWN_MASK) != 0)   modifiers.add(KeyCombination.CONTROL_DOWN);\n  if ((acceleratorKey.getModifiers() & java.awt.event.InputEvent.ALT_DOWN_MASK) != 0)   modifiers.add(KeyCombination.ALT_DOWN);\n  if ((acceleratorKey.getModifiers() & InputEvent.META_DOWN_MASK) != 0)   modifiers.add(KeyCombination.META_DOWN);\n  KeyCode keyCode=Utilities.getKeyCodeFX(acceleratorKey.getKeyCode());\n  return new KeyCodeCombination(keyCode,modifiers.toArray(new KeyCombination.Modifier[modifiers.size()]));\n}\n"}
{"nl": "/*    ", "code": "@deprecated public boolean hasNext(){\n  if (this.nextChar == -1) {\n    findNextChar();\n  }\n  return this.nextChar != -1;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.GOODALL + \";\");\n}\n"}
{"nl": "Verify basic case of importing a project that has source dependency", "code": "public void testRequiredProjects() throws IOException {\n  VirtualFile project1=createGradleProjectToImport(dir,module(1));\n  VirtualFile project2=createGradleProjectToImport(dir,module(2),module(1));\n  assert project1 != null && project2 != null : \"Something wrong with the setup\";\n  configureTopLevelProject(dir,Arrays.asList(module(1),module(2)),Collections.<String>emptySet());\n  Map<String,VirtualFile> projects=moduleListToMap(GradleModuleImporter.getRelatedProjects(project2,getProject()));\n  assertEquals(2,projects.size());\n  assertEquals(project1,projects.get(pathToGradleName(module(1))));\n  assertEquals(project2,projects.get(pathToGradleName(module(2))));\n}\n"}
{"nl": "rotate transformation about the Z axis", "code": "public void rotateZ(double theta){\n  Matrix3D tmp=new Matrix3D();\n  double c=Math.cos(theta);\n  double s=Math.sin(theta);\n  tmp.set(0,0,c);\n  tmp.set(0,1,-s);\n  tmp.set(1,0,s);\n  tmp.set(1,1,c);\n  preMultiply(tmp);\n}\n"}
{"nl": "Create an underline text clickable", "code": "public static void makeUnderlinedTextClickable(TextView textView,ClickableSpan onclick){\n  SpannedString string=(SpannedString)textView.getText();\n  int underlineStart=string.nextSpanTransition(0,string.length(),UnderlineSpan.class);\n  int underlineEnd=string.nextSpanTransition(underlineStart,string.length(),UnderlineSpan.class);\n  SpannableString ss=new SpannableString(string);\n  ss.setSpan(onclick,underlineStart,underlineEnd,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n  textView.setText(ss);\n  textView.setMovementMethod(LinkMovementMethod.getInstance());\n}\n"}
{"nl": "/*     ", "code": "@deprecated public boolean isNumeric(){\n  return DateTimePatternGenerator.types[this.canonicalIndex][2] > 0;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n"}
{"nl": "Reset NTLM authentication fields for external system entity<br> <b>TFS specific</b>", "code": "private static ExternalSystem resetNTLMFields(ExternalSystem input){\n  input.setUsername(null);\n  input.setPassword(null);\n  input.setDomain(null);\n  return input;\n}\n"}
{"nl": "show an error notation", "code": "public static void showInternalError(String message){\n  showNotification(title,\"Internal error: \" + message,Mode.error,Pos.BOTTOM_LEFT,60000);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetUploadServerQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getUploadServer\",GetUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Turn off spin mode", "code": "public void stopSpinning(){\n  spinHandler.sendEmptyMessageDelayed(1,200);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsRemoveOfficeUsersQuery(VkApiClient client,UserActor actor,int accountId,String ids){\n  super(client,\"ads.removeOfficeUsers\",Boolean.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  ids(ids);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set drawer=\" + ViewerBase.DiagramType.RectangularPhylogram + \";\");\n}\n"}
{"nl": "Clear stale entries, an entry is considered stale if it was not touched in the last two clean cycles", "code": "public synchronized void clearStaleEntries(){\n  if (_logger.isLoggable(Level.FINER))   _logger.finer(\"clearing stale entries from stub cache\");\n  List<StubId> staleEntries=new ArrayList<StubId>();\n  for (  Map.Entry<StubId,TouchedItem<Object>> entry : _cachedStubs.entrySet()) {\n    if (!entry.getValue().clearTouched())     staleEntries.add(entry.getKey());\n  }\n  if (_logger.isLoggable(Level.FINER)) {\n    int staleEntriesCount=staleEntries.size();\n    if (staleEntriesCount > 0)     _logger.finer(\"found \" + staleEntriesCount + \" stale entries in cache, removing them\");\n else     _logger.finer(\"no stale entries found in cache\");\n  }\n  for (  StubId id : staleEntries) {\n    _cachedStubs.remove(id);\n    for (    Set<StubId> set : _classLoaderContext.values())     set.remove(id);\n  }\n}\n"}
{"nl": "Despawn and delete owner", "code": "public static void deleteOwner(AbstractAI ai2){\n  ai2.getOwner().getController().onDelete();\n}\n"}
{"nl": "Get first-order discrete difference along adjacent values in an array", "code": "public static double[] diff(double[] a){\n  if (a == null) {\n    return null;\n  }\n else   if (a.length < 2) {\n    return new double[0];\n  }\n  double[] b=new double[a.length - 1];\n  for (int i=0; i < a.length - 1; i++) {\n    b[i]=a[i + 1] - a[i];\n  }\n  return b;\n}\n"}
{"nl": "Compare includes damage value; ignores stack size and NBT", "code": "public static boolean similar(ItemStack a,ItemStack b){\n  if (a == null || b == null) {\n    return a == b;\n  }\n  return a.getItem() == b.getItem() && a.getItemDamage() == b.getItemDamage();\n}\n"}
{"nl": "Returns true iff there is a column that is a scalar multiple of column in searchMatrix (modulo tolerance)", "code": "private boolean isIncludedColumn(double[] column,RealMatrix searchMatrix,double tolerance){\n  boolean found=false;\n  int i=0;\n  while (!found && i < searchMatrix.getColumnDimension()) {\n    double multiplier=1.0;\n    boolean matching=true;\n    int j=0;\n    while (matching && j < searchMatrix.getRowDimension()) {\n      double colEntry=searchMatrix.getEntry(j,i);\n      if (FastMath.abs(multiplier - 1.0) <= FastMath.ulp(1.0) && FastMath.abs(colEntry) > 1E-14 && FastMath.abs(column[j]) > 1e-14) {\n        multiplier=colEntry / column[j];\n      }\n      if (FastMath.abs(column[j] * multiplier - colEntry) > tolerance) {\n        matching=false;\n      }\n      j++;\n    }\n    found=matching;\n    i++;\n  }\n  return found;\n}\n"}
{"nl": "Check all conditions after using skill", "code": "private boolean endCondCheck(){\n  Conditions skillConditions=skillTemplate.getEndConditions();\n  return skillConditions != null ? skillConditions.validate(this) : true;\n}\n"}
{"nl": "It checks whether the file is empty (true) or not (false)", "code": "public final boolean isFallbackFileEmpty(){\n  return !((fFileController.getNumberOfLines()) > 0);\n}\n"}
{"nl": "remove an element described by ObjectInfo", "code": "public void remove(IObjectInfo<T> oi){\n  remove_impl((ObjectInfo<T>)oi);\n}\n"}
{"nl": "Display the authenticated pilot's profile", "code": "public static void showProfile(android.support.v4.app.Fragment fragment,@Nullable HashMap<String,String> extras){\n  showProfile(fragment,AirMap.getUserId(),extras);\n}\n"}
{"nl": "Encode a byte array to hex string", "code": "static public String encode(byte[] binaryData){\n  if (binaryData == null)   return null;\n  int lengthData=binaryData.length;\n  int lengthEncode=lengthData * 2;\n  char[] encodedData=new char[lengthEncode];\n  int temp;\n  for (int i=0; i < lengthData; i++) {\n    temp=binaryData[i];\n    if (temp < 0)     temp+=256;\n    encodedData[i * 2]=lookUpHexAlphabet[temp >> 4];\n    encodedData[i * 2 + 1]=lookUpHexAlphabet[temp & 0xf];\n  }\n  return new String(encodedData);\n}\n"}
{"nl": "reduce a selection", "code": "public void reduceSelection(int toRow,int toCol){\n  if (toRow > totalRows)   toRow=totalRows;\n  if (toCol > totalCols)   toCol=totalCols;\n  boolean firstRowBest=false;\n  if (Math.abs(toRow - firstRow) < Math.abs(toRow - lastRow)) {\n    firstRowBest=true;\n  }\n  int bestRowScore=Math.min(Math.abs(toRow - firstRow),Math.abs(toRow - lastRow));\n  boolean firstColBest=false;\n  if (Math.abs(toCol - firstCol) < Math.abs(toCol - lastCol)) {\n    firstColBest=true;\n  }\n  int bestColScore=Math.min(Math.abs(toCol - firstCol),Math.abs(toCol - lastCol));\n  if (toRow != -1 && (toCol == -1 || bestRowScore < bestColScore)) {\n    if (firstRowBest)     firstRow=toRow;\n else     lastRow=toRow;\n    fireSelectionChanged();\n  }\n else   if (toCol != -1) {\n    if (firstColBest)     firstCol=toCol;\n else     lastCol=toCol;\n    fireSelectionChanged();\n  }\n}\n"}
{"nl": "clear touched state and return previous touch state", "code": "public boolean clearTouched(){\n  boolean result=_touched;\n  _touched=false;\n  return result;\n}\n"}
{"nl": "Get a flight status based on a flight within a polygon", "code": "public static void checkPolygon(List<Coordinate> geometry,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean showWeather,@Nullable Date date,@Nullable AirMapCallback<AirMapStatus> callback){\n  StatusService.checkPolygon(geometry,takeOffPoint,types,ignoredTypes,showWeather,date,callback);\n}\n"}
{"nl": "upload file to storage server (by callback)", "code": "public String upload_file1(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String parts[]=this.upload_file(group_name,file_size,callback,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.getComments\",GetCommentsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n  extended(true);\n}\n"}
{"nl": "Set target id", "code": "public VideoRemoveFromAlbumQuery targetId(Integer value){\n  return unsafeParam(\"target_id\",value);\n}\n"}
{"nl": "Computes the inverse of a square Zmat", "code": "public static Zmat o(Zmat A) throws JampackException {\n  if (A.nrow != A.ncol)   throw new JampackException(\"Cannot compute the inverse of a rectangular matrix.\");\n  return Solve.aib(A,Eye.o(A.nrow));\n}\n"}
{"nl": "Adds sorting to the query", "code": "public void addSorting(String structureName,String fieldName,boolean asc){\n  ParamValidationUtil.validateParamNotNull(fieldName,\"sortBy\");\n  String sorting=\"modDate\".equals(fieldName) ? fieldName : structureName + \".\" + fieldName;\n  String sortingWithOrder=sorting + \" \" + (asc ? \"asc\" : \"desc\");\n  this.sortBy=UtilMethods.isSet(this.sortBy) ? this.sortBy + \", \" + sortingWithOrder : sortingWithOrder;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketGetAlbumByIdQuery(VkApiClient client,UserActor actor,int ownerId,List<Integer> albumIds){\n  super(client,\"market.getAlbumById\",GetAlbumByIdResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  albumIds(albumIds);\n}\n"}
{"nl": "Creates an storable activity fence which will be valid when the user stops one of the given activity", "code": "public static StorableActivityFence stopping(@ActivityType int... activityTypes){\n  return new StorableActivityFence(activityTypes,STOP_TYPE);\n}\n"}
{"nl": "The model of the design surface changed", "code": "@Override public void modelChanged(@NotNull DesignSurface surface,@Nullable NlModel model){\n  setSurface(surface);\n  if (model != null) {\n    model.addListener(this);\n  }\n  computeOffsets(surface.getCurrentScreenView());\n  if (model != null) {\n    List<NlComponent> selection=model.getSelectionModel().getSelection();\n    if (selection.isEmpty()) {\n      selection=model.getComponents();\n    }\n    updateComponents(selection);\n  }\n  configureUI();\n  myMiniMap.repaint();\n}\n"}
{"nl": "Deploy pokemon", "code": "public FortDeployPokemonResponse.Result deployPokemon(Pokemon pokemon) throws LoginFailedException, RemoteServerException {\n  FortDeployPokemonMessage reqMsg=FortDeployPokemonMessage.newBuilder().setFortId(getId()).setPlayerLatitude(api.getLatitude()).setPlayerLongitude(api.getLongitude()).setPokemonId(pokemon.getId()).build();\n  ServerRequest serverRequest=new ServerRequest(RequestType.FORT_DEPLOY_POKEMON,reqMsg);\n  api.getRequestHandler().sendServerRequests(serverRequest);\n  try {\n    return FortDeployPokemonResponse.parseFrom(serverRequest.getData()).getResult();\n  }\n catch (  InvalidProtocolBufferException e) {\n    throw new RemoteServerException();\n  }\n}\n"}
{"nl": "Writes out a flow pair object for the use inside the flow policy", "code": "private void writeFlowPair(FlowPair pair,Document document,Element parentElement){\n  Element flowPair=document.createElement(\"flowpair\");\n  parentElement.appendChild(flowPair);\n  writeDomainSpec(pair.getFirstDomain(),document,flowPair);\n  writeDomainSpec(pair.getSecondDomain(),document,flowPair);\n}\n"}
{"nl": "Sort order", "code": "public WallGetCommentsQueryWithExtended sort(WallGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Split a string using the default separator", "code": "public static String[] split(String str){\n  return split(str,ESCAPE_CHAR,COMMA);\n}\n"}
{"nl": "copies the src to the target, resizing the target, if necessary", "code": "public static byte[] copy(byte[] src,byte[] target){\n  if (target.length < src.length) {\n    target=new byte[src.length];\n  }\n  System.arraycopy(src,0,target,0,src.length);\n  return target;\n}\n"}
{"nl": "Returns true if field timeout is set (has been assigned a value) and false otherwise", "code": "public boolean isSetTimeout(){\n  return __isset_bit_vector.get(__TIMEOUT_ISSET_ID);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"groups.get\",GetExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "Effect will be created and applied to target with 100% success", "code": "public static void applyEffect(AbstractAI ai2,SkillTemplate template,Creature target){\n  Effect effect=new Effect(ai2.getOwner(),target,template,template.getLvl(),0);\n  effect.setIsForcedEffect(true);\n  effect.initialize();\n  effect.applyEffect();\n}\n"}
{"nl": "Wraps bean and view into one object", "code": "private Object wrapResult(Object result,Class<?> viewClass){\n  return new JacksonViewAware(result,viewClass);\n}\n"}
{"nl": "Support UIR scheme ws://host:port/path", "code": "public WebSocketsConnectionProvider(String uri,Map<String,String> connectHttpHeaders){\n  mUri=uri;\n  mConnectHttpHeaders=connectHttpHeaders != null ? connectHttpHeaders : new HashMap<>();\n  mLifecycleSubscribers=new ArrayList<>();\n  mMessagesSubscribers=new ArrayList<>();\n}\n"}
{"nl": "add a new member into the cluster", "code": "@Override public ListenableFuture<MemberAddResponse> addMember(List<String> endpoints){\n  MemberAddRequest memberAddRequest=MemberAddRequest.newBuilder().addAllPeerURLs(endpoints).build();\n  return clusterStub.memberAdd(memberAddRequest);\n}\n"}
{"nl": "mapping a fixed value to a relative value", "code": "private String fixedValue2RelativeValue(String pitchAttribute,double[] baseF0Contour){\n  pitchAttribute=pitchAttribute.substring(0,pitchAttribute.length() - 2);\n  double fixedValue=(new Float(pitchAttribute)).doubleValue();\n  double meanValue=MathUtils.mean(baseF0Contour);\n  double relative=(100.0 * fixedValue) / meanValue;\n  if (relative > 100) {\n    return \"+\" + df.format((relative - 100)) + \"%\";\n  }\n  return \"-\" + df.format((100 - relative)) + \"%\";\n}\n"}
{"nl": "Npc starts idling", "code": "public static final void emoteStartIdling(Npc owner){\n  owner.setState(CreatureState.WALKING);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));\n}\n"}
{"nl": "Predefined methods for default views Just delegation", "code": "public void showErrorMessage(String errorMessage){\n  if (mErrorView != null) {\n    mErrorView.setErrorText(errorMessage);\n    mErrorView.setVisibility(VISIBLE);\n  }\n}\n"}
{"nl": "json --> obj", "code": "public static WxMenuResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxMenuResult.class);\n}\n"}
{"nl": "upload appender file to storage server (by file buff)", "code": "public String[] upload_appender_file(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_appender_file(group_name,file_buff,0,file_buff.length,file_ext_name,meta_list);\n}\n"}
{"nl": "modify appender file to storage server (by file buff)", "code": "public int modify_file1(String appender_file_id,long file_offset,byte[] file_buff,int buffer_offset,int buffer_length) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.modify_file(parts[0],parts[1],file_offset,file_buff,buffer_offset,buffer_length);\n}\n"}
{"nl": "Change space state to given state - lookup attributes are updated as well", "code": "public void changeSpaceState(int state,boolean electable,boolean replicable){\n  _spaceState.setState(state);\n  modifyLookupAttributes(new Entry[]{new State()},new Entry[]{new State(state,electable,replicable)});\n}\n"}
{"nl": "String to cookies", "code": "protected Cookie decodeCookie(String cookieString){\n  byte[] bytes=hexStringToByteArray(cookieString);\n  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);\n  Cookie cookie=null;\n  try {\n    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);\n    cookie=((SerializableOkHttpCookies)objectInputStream.readObject()).getCookies();\n  }\n catch (  IOException e) {\n    Log.d(LOG_TAG,\"IOException in decodeCookie\",e);\n  }\ncatch (  ClassNotFoundException e) {\n    Log.d(LOG_TAG,\"ClassNotFoundException in decodeCookie\",e);\n  }\n  return cookie;\n}\n"}
{"nl": "Load the cart from the given file", "code": "public CART load(String fileName) throws IOException, MaryConfigurationException {\n  FileInputStream fis=new FileInputStream(fileName);\n  try {\n    return loadFromStream(fis);\n  }\n  finally {\n    fis.close();\n  }\n}\n"}
{"nl": "synchronizes recomputed data from an archive to a summary and also parameters", "code": "static public void syncRecomputedArchive2Summary(String dataSetName,String algorithmName,BlastMode blastMode,String parameters,IConnector connector,DataTable table,int additionalReads) throws IOException {\n  String[] classifications=connector.getAllClassificationNames();\n  table.clear();\n  table.setCreator(ProgramProperties.getProgramName());\n  table.setCreationDate((new Date()).toString());\n  table.setAlgorithm(ClassificationType.Taxonomy.toString(),algorithmName);\n  table.setParameters(parameters);\n  table.setTotalReads(connector.getNumberOfReads());\n  table.setAdditionalReads(additionalReads);\n  table.setSamples(new String[]{dataSetName},new Long[]{connector.getUId()},new Integer[]{connector.getNumberOfReads()},new BlastMode[]{blastMode});\n  for (  String classification : classifications) {\n    IClassificationBlock block=connector.getClassificationBlock(classification);\n    if (block != null)     syncClassificationBlock2Summary(0,1,block,table);\n  }\n}\n"}
{"nl": "Default use id as unique key", "code": "protected String objectKey(Object id){\n  return RedisKeys.format(CLASSNAMES,id.toString());\n}\n"}
{"nl": "The contructor used with an inflater", "code": "public YCCircleFlowIndicator(Context context,AttributeSet attrs){\n  super(context,attrs);\n  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.YCCircleFlowIndicator);\n  int activeType=a.getInt(R.styleable.YCCircleFlowIndicator_activeType,STYLE_FILL);\n  int activeDefaultColor=0xFFFFFFFF;\n  int activeColor=a.getColor(R.styleable.YCCircleFlowIndicator_activeColor,activeDefaultColor);\n  int inactiveType=a.getInt(R.styleable.YCCircleFlowIndicator_inactiveType,STYLE_STROKE);\n  int inactiveDefaultColor=0x44FFFFFF;\n  int inactiveColor=a.getColor(R.styleable.YCCircleFlowIndicator_inactiveColor,inactiveDefaultColor);\n  radius=a.getDimension(R.styleable.YCCircleFlowIndicator_radius,4.0f);\n  circleSeparation=a.getDimension(R.styleable.YCCircleFlowIndicator_circleSeparation,2 * radius + radius);\n  activeRadius=a.getDimension(R.styleable.YCCircleFlowIndicator_activeRadius,0.5f);\n  fadeOutTime=a.getInt(R.styleable.YCCircleFlowIndicator_fadeOut,0);\n  mCentered=a.getBoolean(R.styleable.YCCircleFlowIndicator_centered,false);\n  initColors(activeColor,inactiveColor,activeType,inactiveType);\n}\n"}
{"nl": "Whether there are anymore records", "code": "@Override public boolean hasNext(){\n  return dataIter.hasNext();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioMoveToAlbumQuery(VkApiClient client,UserActor actor,int... audioIds){\n  super(client,\"audio.moveToAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioIds(audioIds);\n}\n"}
{"nl": "read all locations for a given class and adds them to list", "code": "public int readLocations(long position,IInputReader reader,int classId,ListOfLongs list) throws IOException {\n  reader.seek(position);\n  final int numberOfClasses=reader.readInt();\n  for (int i=0; i < numberOfClasses; i++) {\n    final int currentId=reader.readInt();\n    reader.readInt();\n    final int count=reader.readInt();\n    if (currentId == classId) {\n      for (int z=0; z < count; z++) {\n        list.add(reader.readLong());\n      }\n    }\n else     reader.skipBytes(count * 8);\n  }\n  return list.size();\n}\n"}
{"nl": "Creates a svn repo indexer job which will pull from the list of git repositories and start indexing them", "code": "public void startIndexSvnRepoJobs(String uniquename){\n  try {\n    Scheduler scheduler=Singleton.getScheduler();\n    JobDetail job=newJob(IndexSvnRepoJob.class).withIdentity(\"updateindex-svn-\" + uniquename).build();\n    SimpleTrigger trigger=newTrigger().withIdentity(\"updateindex-svn-\" + uniquename).withSchedule(simpleSchedule().withIntervalInSeconds(this.INDEXTIME).repeatForever()).build();\n    job.getJobDataMap().put(\"REPOLOCATIONS\",this.REPOLOCATION);\n    job.getJobDataMap().put(\"LOWMEMORY\",this.LOWMEMORY);\n    scheduler.scheduleJob(job,trigger);\n    scheduler.start();\n  }\n catch (  SchedulerException ex) {\n    LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \"+ ex.getMessage());\n  }\n}\n"}
{"nl": "get the next element in scan order", "code": "public IStoredListIterator<T> next(IStoredListIterator<T> slh){\n  IStoredListIterator<T> slnext=nextPos((SegmentedListIterator<T>)slh);\n  if (slnext == null)   slh.release();\n  return slnext;\n}\n"}
{"nl": "Write an Object to an OutputStream", "code": "public static void writeObject(OutputStream out,Object obj) throws IOException {\n  ObjectOutputStream objOut=new ObjectOutputStream(out);\n  objOut.writeObject(obj);\n  objOut.flush();\n}\n"}
{"nl": "md5 file", "code": "public static String md5File(final InputStream inputStream){\n  String result=null;\n  if (inputStream != null) {\n    try {\n      MessageDigest md=MessageDigest.getInstance(\"MD5\");\n      byte[] buffer=new byte[Constant.Capacity.BYTES_PER_KB];\n      int readCount=0;\n      while ((readCount=inputStream.read(buffer,0,buffer.length)) != -1) {\n        md.update(buffer,0,readCount);\n      }\n      result=StringUtil.byteToHexString(md.digest());\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n finally {\n      try {\n        inputStream.close();\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n  return result;\n}\n"}
{"nl": "For Loop Stmts Creation", "code": "private void createForLoop2(polyglot.ast.For forStmt){\n  endControlNoop.push(soot.jimple.Jimple.v().newNopStmt());\n  condControlNoop.push(soot.jimple.Jimple.v().newNopStmt());\n  Iterator initsIt=forStmt.inits().iterator();\n  while (initsIt.hasNext()) {\n    createStmt((polyglot.ast.Stmt)initsIt.next());\n  }\n  soot.jimple.Stmt noop1=soot.jimple.Jimple.v().newNopStmt();\n  soot.jimple.Stmt noop2=soot.jimple.Jimple.v().newNopStmt();\n  body.getUnits().add(noop2);\n  polyglot.ast.Expr condition=forStmt.cond();\n  if (condition != null) {\n    createBranchingExpr(condition,noop1,false);\n  }\n  createStmt(forStmt.body());\n  body.getUnits().add((condControlNoop.pop()));\n  if (labelMap != null && labelMap.containsKey(forStmt)) {\n    body.getUnits().add(labelMap.get(forStmt));\n  }\n  Iterator itersIt=forStmt.iters().iterator();\n  while (itersIt.hasNext()) {\n    createStmt((polyglot.ast.Stmt)itersIt.next());\n  }\n  soot.jimple.Stmt goto1=soot.jimple.Jimple.v().newGotoStmt(noop2);\n  body.getUnits().add(goto1);\n  body.getUnits().add(noop1);\n  body.getUnits().add((endControlNoop.pop()));\n}\n"}
{"nl": "Sends message to all alliance members", "code": "private void broadcastToAllianceMembers(final Player player){\n  player.getPlayerAlliance2().sendPacket(new SM_MESSAGE(player,message,type));\n}\n"}
{"nl": "Starts an Activity if it is exists", "code": "private static void startIntentIfPossible(Context context,Intent intent){\n  if (isActivityAvailableForIntent(context,intent)) {\n    context.startActivity(intent);\n  }\n}\n"}
{"nl": "Return the page as HTML", "code": "public PagesGetQuery needHtml(Boolean value){\n  return unsafeParam(\"need_html\",value);\n}\n"}
{"nl": "error log", "code": "public static void e(String tag,String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.e(tag,buildMsg(msg),e);\n  }\n}\n"}
{"nl": "Sets an attribute store", "code": "public EmbeddedSpaceConfigurer attributeStore(AttributeStore attributeStore){\n  validate();\n  factoryBean.attributeStore(attributeStore);\n  return this;\n}\n"}
{"nl": "Id of a wiki page with market description", "code": "public GroupsEditQuery marketWiki(Integer value){\n  return unsafeParam(\"market_wiki\",value);\n}\n"}
{"nl": "buff convert to long", "code": "public static long buff2long(byte[] bs,int offset){\n  return (((long)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 56) | (((long)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 48) | (((long)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 40)| (((long)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3])) << 32)| (((long)(bs[offset + 4] >= 0 ? bs[offset + 4] : 256 + bs[offset + 4])) << 24)| (((long)(bs[offset + 5] >= 0 ? bs[offset + 5] : 256 + bs[offset + 5])) << 16)| (((long)(bs[offset + 6] >= 0 ? bs[offset + 6] : 256 + bs[offset + 6])) << 8)| ((long)(bs[offset + 7] >= 0 ? bs[offset + 7] : 256 + bs[offset + 7]));\n}\n"}
{"nl": "create a mapper for a JSON representation of the given class", "code": "public static <T>Function<String,T> jsonMapper(Class<T> clazz){\n  return null;\n}\n"}
{"nl": "is viewer uptodate?", "code": "public boolean isUptoDate(){\n  return uptodate;\n}\n"}
{"nl": "b2mc: transform MLSA digital filter coefficients to mel-cepstrum", "code": "public static void b2mc(double b[],double mc[],int m,double a){\n  double d=mc[m]=b[m];\n  for (int i=m--; i >= 0; i--) {\n    double o=b[i] + (a * d);\n    d=b[i];\n    mc[i]=o;\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  getViewer().selectComponent(getViewer().getNnetTab());\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set minReadsAlignment=\");\n  int value=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\";\");\n  ProgramProperties.put(MeganProperties.MININUM_READS_IN_ALIGNMENT,value);\n}\n"}
{"nl": "Returns version of the connector", "code": "@Override public String version(){\n  return VERSION;\n}\n"}
{"nl": "Helper method to create Supplier", "code": "public Boolean createSupplier(EntityManager em,String supplierId){\n  Boolean status=true;\n  Supplier supplier=null;\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    supplier=new Supplier();\n    supplier.setSupplierId(supplierId);\n    supplier.setPhoneNumber(\"009180437980098\");\n    em.persist(supplier);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during creation of Supplier. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "export all matches in file", "code": "public static long exportAll(BlastMode blastMode,IConnector connector,String fileName,ProgressListener progressListener) throws IOException {\n  progressListener.setTasks(\"Export\",\"Writing all matches\");\n  long countMatches=0;\n  try {\n    try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){\n      w.write(blastMode.toString().toUpperCase() + \" file generated by MEGAN6\\n\\n\");\n      IReadBlockIterator it=connector.getAllReadsIterator(0,10000,true,true);\n      progressListener.setMaximum(it.getMaximumProgress());\n      progressListener.setProgress(0);\n      while (it.hasNext()) {\n        countMatches+=writeMatches(it.next(),w);\n        progressListener.setProgress(it.getProgress());\n      }\n    }\n   }\n catch (  CanceledException ex) {\n    System.err.println(\"USER CANCELED\");\n  }\n  return countMatches;\n}\n"}
{"nl": "Read a plain text file and process it line by line", "code": "public static void readFromFile(File file,Function<String,Boolean> lineProcessing){\n  FileInputStream fr=null;\n  try {\n    fr=new FileInputStream(file);\n    InputStreamReader char_input=new InputStreamReader(fr,Charset.forName(\"UTF-8\").newDecoder());\n    BufferedReader br=new BufferedReader(char_input);\n    while (true) {\n      String in=br.readLine();\n      if (in == null) {\n        break;\n      }\n      if (!lineProcessing.apply(in)) {\n        break;\n      }\n    }\n    br.close();\n  }\n catch (  IOException e) {\n    Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,\"IOException while reading file\",e);\n  }\n finally {\n    try {\n      fr.close();\n    }\n catch (    IOException e) {\n      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,\"IOException while closing file reader\",e);\n    }\n  }\n}\n"}
{"nl": "Handle primary backup recovery failure", "code": "private void handleRecoveryFailure(Exception e,int retries) throws Exception {\n  if (_logger.isLoggable(Level.WARNING)) {\n    _logger.log(Level.WARNING,\"Space recovery failure.\",e);\n  }\n  if (retries == RecoveryManager.RECOVERY_RETRIES || getEngine().getCacheManager().isOffHeapCachePolicy())   throw e;\n  close();\n  _engine=new SpaceEngine(this);\n  if (_leaderSelector != null) {\n    _logger.info(\"Space recovery failed - selecting primary\");\n    _leaderSelector.select();\n  }\n  initReplicationStateBasedOnActiveElection();\n}\n"}
{"nl": "Creates a shared folder in the given parent folder", "code": "public BoxFolder createSharedFolder(String folderName,String parentId) throws BoxSDKServiceException {\n  BoxFolder createFolder=createFolder(folderName,parentId);\n  try {\n    createFolder.createSharedLink(BoxSharedLink.Access.OPEN,null,null);\n    return createFolder;\n  }\n catch (  BoxAPIException e) {\n    throw new BoxSDKServiceException(\"Can't create shared link for directory: \" + createFolder.getID(),e);\n  }\n}\n"}
{"nl": "Save the state of the plugin, ie the repositories locations", "code": "private void saveState(){\n  try {\n    IPath pluginStateLocation=SVNProviderPlugin.getPlugin().getStateLocation();\n    File tempFile=pluginStateLocation.append(REPOSITORIES_STATE_FILE + \".tmp\").toFile();\n    File stateFile=pluginStateLocation.append(REPOSITORIES_STATE_FILE).toFile();\n    try {\n      DataOutputStream dos=new DataOutputStream(new FileOutputStream(tempFile));\n      writeState(dos);\n      dos.close();\n      if (stateFile.exists()) {\n        stateFile.delete();\n      }\n      boolean renamed=tempFile.renameTo(stateFile);\n      if (!renamed) {\n        throw new TeamException(new Status(Status.ERROR,SVNProviderPlugin.ID,TeamException.UNABLE,Policy.bind(\"SVNProvider.rename\",tempFile.getAbsolutePath()),null));\n      }\n    }\n catch (    IOException e) {\n      throw new TeamException(new Status(Status.ERROR,SVNProviderPlugin.ID,TeamException.UNABLE,Policy.bind(\"SVNProvider.save\",stateFile.getAbsolutePath()),e));\n    }\n  }\n catch (  TeamException e) {\n    Util.logError(Policy.bind(\"SVNProvider.errorSaving\"),e);\n  }\n}\n"}
{"nl": "Resets the audio clock", "code": "public synchronized void resetTime(){\n  timeOffset=line.getMicrosecondPosition();\n}\n"}
{"nl": "update enemy", "code": "public void update(double deltaTime){\n  Move();\n  position.add(velocity.x * deltaTime,velocity.y * deltaTime);\n}\n"}
{"nl": "verifies that two matrices are close (1-norm)", "code": "public static void assertEquals(String msg,RealMatrix expected,RealMatrix observed,double tolerance){\n  Assert.assertNotNull(msg + \"\\nObserved should not be null\",observed);\n  if (expected.getColumnDimension() != observed.getColumnDimension() || expected.getRowDimension() != observed.getRowDimension()) {\n    StringBuilder messageBuffer=new StringBuilder(msg);\n    messageBuffer.append(\"\\nObserved has incorrect dimensions.\");\n    messageBuffer.append(\"\\nobserved is \" + observed.getRowDimension() + \" x \"+ observed.getColumnDimension());\n    messageBuffer.append(\"\\nexpected \" + expected.getRowDimension() + \" x \"+ expected.getColumnDimension());\n    Assert.fail(messageBuffer.toString());\n  }\n  RealMatrix delta=expected.subtract(observed);\n  if (delta.getNorm() >= tolerance) {\n    StringBuilder messageBuffer=new StringBuilder(msg);\n    messageBuffer.append(\"\\nExpected: \" + expected);\n    messageBuffer.append(\"\\nObserved: \" + observed);\n    messageBuffer.append(\"\\nexpected - observed: \" + delta);\n    Assert.fail(messageBuffer.toString());\n  }\n}\n"}
{"nl": "Check if placement is ready to show ads", "code": "public static boolean isReady(String placementId){\n  return isSupported() && isInitialized() && placementId != null && Placement.isReady(placementId);\n}\n"}
{"nl": "Opens CreateSiteWindow", "code": "public CreateSiteWindow openCreateSiteWindow(){\n  grid.getActionBar().expandDropDown(SiteAdminButtons.NEW);\n  grid.getActionBar().clickDropDownOption(SiteAdminButtons.NEW_SITE);\n  createSiteWindow.waitToBeDisplayed();\n  return createSiteWindow;\n}\n"}
{"nl": "Create a builder instance for this class to initialize the library", "code": "public static Builder waffleCone(){\n  return new Builder();\n}\n"}
{"nl": "Set start comment id", "code": "public WallGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n"}
{"nl": "Entry point: methods calls", "code": "public void visitPhpMethodReference(MethodReference reference){\n  if (!this.isPropelDefined()) {\n    return;\n  }\n  String strName=reference.getName();\n  if (null == strName || !strName.equals(\"count\")) {\n    return;\n  }\n  this.inspectSignature(reference.getSignature(),reference,null);\n}\n"}
{"nl": "Pushes the object represented by <code>this<code> into L's stack", "code": "public void push(){\n  L.rawGetI(LuaState.LUA_REGISTRYINDEX.intValue(),ref.intValue());\n}\n"}
{"nl": "get all active keyspace alarm", "code": "@Override public ListenableFuture<AlarmResponse> listAlarms(){\n  AlarmRequest alarmRequest=AlarmRequest.newBuilder().setAlarm(AlarmType.NONE).setAction(AlarmRequest.AlarmAction.GET).setMemberID(0).build();\n  return this.futureStub.alarm(alarmRequest);\n}\n"}
{"nl": "Creates a new namespace definition for Android xml documents", "code": "public AXmlNamespace(String prefix,String uri,int line){\n  super();\n  this.prefix=prefix;\n  this.uri=uri;\n  this.line=line;\n}\n"}
{"nl": "output the jsonarr as \"application/json\" to end-user", "code": "final public void response(List<JSON> arr){\n  if (arr == null) {\n    responseJson(\"[]\");\n  }\n else {\n    responseJson(arr.toString());\n  }\n}\n"}
{"nl": "equalOverShorterOfBoth keys?", "code": "private boolean equal(byte[] key1,byte[] key2){\n  if (key1.length != key2.length)   return false;\n else {\n    for (int i=0; i < key1.length; i++) {\n      if (key1[i] != key2[i])       return false;\n    }\n    return true;\n  }\n}\n"}
{"nl": "Launch multi-source pick flow", "code": "@PickTriggerResult public int fromMultipleSources(@StringRes final int pTitleRes,@NonNull final PickSource... pPickSources){\n  return this.fromMultipleSources(this.mContext.getString(pTitleRes),pPickSources);\n}\n"}
{"nl": "create BaseApi  defalte ApiManager", "code": "public RetrofitClient createBaseApi(){\n  apiService=create(BaseApiService.class);\n  return this;\n}\n"}
{"nl": "dosen't designation to use specail thread,It's depending on what the 'send' method use", "code": "public Observable<Object> toObserverable(LifecycleTransformer lifecycleTransformer){\n  return _bus.compose(lifecycleTransformer);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getSelectedBlock().isSelected() && (viewer.getAlignment().getSequenceType().equalsIgnoreCase(Alignment.DNA) || viewer.getAlignment().getSequenceType().equalsIgnoreCase(Alignment.cDNA)) && !viewer.isShowAminoAcids();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set font=\");\n  String fontName=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  Font font=Font.decode(fontName);\n  boolean changed=false;\n  ViewerBase viewer=(ViewerBase)getViewer();\n  Set<Node> nodes=new HashSet<>();\n  if (viewer.getSelectedNodes().size() == 0 && viewer.getSelectedEdges().size() == 0) {\n    for (Node v=viewer.getGraph().getFirstNode(); v != null; v=v.getNext())     nodes.add(v);\n  }\n else   nodes.addAll(viewer.getSelectedNodes());\n  for (  Node v : nodes) {\n    viewer.setFont(v,font);\n    changed=true;\n  }\n  for (  Edge e : viewer.getSelectedEdges()) {\n    viewer.setFont(e,font);\n    changed=true;\n  }\n  if (changed)   viewer.repaint();\n}\n"}
{"nl": "skip a null-terminated string", "code": "public void skipNullTerminatedBytes() throws IOException {\n  int letter=1;\n  while (letter != 0) {\n    letter=ins.read();\n    if (letter == -1)     throw new IOException(\"skipNullTerminatedBytes(): failed (EOF)\");\n  }\n}\n"}
{"nl": "Recolour the Minecraft block", "code": "static IBlockState applyColour(IBlockState state,Colour colour){\n  for (  IProperty prop : (java.util.Set<IProperty>)state.getProperties().keySet()) {\n    if (prop.getName().equals(\"color\") && prop.getValueClass() == net.minecraft.item.EnumDyeColor.class) {\n      net.minecraft.item.EnumDyeColor current=(net.minecraft.item.EnumDyeColor)state.getValue(prop);\n      if (!current.getName().equalsIgnoreCase(colour.name())) {\n        return state.withProperty(prop,EnumDyeColor.valueOf(colour.name()));\n      }\n    }\n  }\n  return state;\n}\n"}
{"nl": "Create a byte array", "code": "public ByteArray(byte[] buf){\n  this(buf,0,buf.length);\n}\n"}
{"nl": "write aux blocks", "code": "public void writeAuxBlocks(Map<String,byte[]> label2data) throws IOException {\n  getFooterSectionRMA6().setStartAuxDataSection(readerWriter.getPosition());\n  if (label2data == null)   readerWriter.writeInt(0);\n else {\n    readerWriter.writeInt(label2data.size());\n    for (    String label : label2data.keySet()) {\n      readerWriter.writeStringNoCompression(label);\n      final byte[] data=label2data.get(label);\n      if (data == null)       readerWriter.writeInt(0);\n else {\n        readerWriter.writeInt(data.length);\n        readerWriter.write(data,0,data.length);\n      }\n    }\n  }\n  getFooterSectionRMA6().setEndAuxDataSection(readerWriter.getPosition());\n}\n"}
{"nl": "Access method to the namespace state to check whether the namespace is active or not", "code": "public boolean isActive(){\n  return this.isActive.get();\n}\n"}
{"nl": "Check if an item exists in this MapMessage", "code": "public boolean itemExists(String name) throws JMSException {\n  HashMap body=(HashMap)Body;\n  return body.containsKey(name);\n}\n"}
{"nl": "Gets content from metatag", "code": "private static String separeMetaTagsContent(String content){\n  String result=Regex.pregMatch(content,Regex.METATAG_CONTENT_PATTERN,1);\n  return htmlDecode(result);\n}\n"}
{"nl": "Concatenate with comma", "code": "private String httpArray(Collection<Integer> classIds){\n  String s=\"\";\n  for (  Object o : classIds) {\n    s=s + o.toString() + \",\";\n  }\n  return s.substring(0,s.length() - 1);\n}\n"}
{"nl": "Resulting wiki page is a preview for the attached link", "code": "public PagesGetQuery sitePreview(Boolean value){\n  return unsafeParam(\"site_preview\",value);\n}\n"}
{"nl": "Divides the example text of a voice into sentences in a vector", "code": "public static Vector<String> processVoiceExampleText(String text){\n  StringTokenizer st=new StringTokenizer(text,\"#\");\n  Vector<String> sentences=null;\n  while (st.hasMoreTokens()) {\n    if (sentences == null)     sentences=new Vector<String>();\n    sentences.add(st.nextToken());\n  }\n  return sentences;\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int handleNext(){\n  CharacterIterator text=getText();\n  if ((this.cachedBreakPositions == null) || (this.positionInCache == this.cachedBreakPositions.length - 1)) {\n    int startPos=text.getIndex();\n    this.fDictionaryCharCount=0;\n    int result=super.handleNext();\n    if ((!this.usingCTDictionary) && (this.fDictionaryCharCount > 1) && (result - startPos > 1)) {\n      divideUpDictionaryRange(startPos,result);\n    }\n else {\n      this.cachedBreakPositions=null;\n      return result;\n    }\n  }\n  if (this.cachedBreakPositions != null) {\n    this.positionInCache+=1;\n    text.setIndex(this.cachedBreakPositions[this.positionInCache]);\n    return this.cachedBreakPositions[this.positionInCache];\n  }\n  Assert.assrt(false);\n  return 55537;\n}\n"}
{"nl": "listen notify2", "code": "private void notify_2(){\n  bleManager.notifyDevice(UUID_SERVICE,UUID_NOTIFY_2,notifyCallback_2);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected boolean matchNodesCanHaveValues(){\n  return true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PagesClearCacheQuery(VkApiClient client,UserActor actor,String url){\n  super(client,\"pages.clearCache\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  url(url);\n}\n"}
{"nl": "Creates a storable location fence which will be valid when the user enter the given region", "code": "public static StorableLocationFence entering(double latitude,double longitude,double radius){\n  return new StorableLocationFence(ENTER_TYPE,latitude,longitude,radius,0);\n}\n"}
{"nl": "****************************** DECORATION QUERIES", "code": "public DecorationCursor queryDecorations(){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_DECORATIONS;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=\"skill_1_name ASC\";\n  qh.Limit=null;\n  return new DecorationCursor(wrapJoinHelper(builderDecoration(),qh));\n}\n"}
{"nl": "The key of id generator", "code": "public static String keyOfIdGenerator(Class<?> clazz){\n  try {\n    return ID_GENERATOR_KEY_CACHE.get(clazz);\n  }\n catch (  ExecutionException e) {\n    throw new KeyException(e);\n  }\n}\n"}
{"nl": "Community title", "code": "protected GroupsCreateQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n"}
{"nl": "Allows to start this activity", "code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,OnBoardingActivity.class);\n  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n  _context.startActivity(intent);\n}\n"}
{"nl": "add all values to sum", "code": "private static void addToArray(Integer[] sum,int[] add){\n  for (int i=0; i < add.length; i++) {\n    sum[i]+=add[i];\n  }\n}\n"}
{"nl": "Creates a new executor object for spawning worker threads", "code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n"}
{"nl": "Are we receiving JSON data?", "code": "protected boolean isJson(HttpServletRequest request){\n  String type=request.getContentType();\n  type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;\n  if (request.getPathInfo().endsWith(\".json\")) {\n    type=MediaType.APPLICATION_JSON_VALUE;\n  }\n  return isCompatibleWith(type,MediaType.APPLICATION_JSON);\n}\n"}
{"nl": "Parse changelog node", "code": "protected void readChangeLogNode(XmlPullParser parser,ChangeLog changeLog) throws Exception {\n  if (parser == null || changeLog == null)   return;\n  parser.require(XmlPullParser.START_TAG,null,TAG_CHANGELOG);\n  String bulletedList=parser.getAttributeValue(null,ATTRIBUTE_BULLETEDLIST);\n  if (bulletedList == null || bulletedList.equals(\"true\")) {\n    changeLog.setBulletedList(true);\n    super.bulletedList=true;\n  }\n else {\n    changeLog.setBulletedList(false);\n    super.bulletedList=false;\n  }\n  while (parser.next() != XmlPullParser.END_TAG) {\n    if (parser.getEventType() != XmlPullParser.START_TAG) {\n      continue;\n    }\n    String tag=parser.getName();\n    if (tag.equals(TAG_CHANGELOGVERSION)) {\n      readChangeLogVersionNode(parser,changeLog);\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsEditQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "This is a message from the GM: %0", "code": "public static SM_SYSTEM_MESSAGE STR_PETITION_GM_LEAVE_MSG(String value0){\n  return new SM_SYSTEM_MESSAGE(1300565,value0);\n}\n"}
{"nl": "Expected status tag id is 101 Expected alive tag id is 100", "code": "public static Process buildCreateAllFieldsProcess(Long id,Properties properties){\n  if (properties == null) {\n    properties=new Properties();\n  }\n  Process process=Process.create(\"P_TEST\" + id).id(id).description(\"foo\").aliveTag(AliveTag.create(\"P_TEST\" + id + \":ALIVE\").build(),70000).statusTag(StatusTag.create(\"P_TEST\" + id + \":STATUS\").build()).maxMessageDelay(2000).maxMessageSize(200).build();\n  properties.setProperty(\"name\",\"P_TEST\" + id);\n  properties.setProperty(\"description\",\"foo\");\n  properties.setProperty(\"statusTagId\",String.valueOf(100l));\n  properties.setProperty(\"aliveInterval\",String.valueOf(70000));\n  properties.setProperty(\"aliveTagId\",String.valueOf(101l));\n  properties.setProperty(\"maxMessageDelay\",String.valueOf(2000));\n  properties.setProperty(\"maxMessageSize\",String.valueOf(200));\n  return process;\n}\n"}
{"nl": "decrease pangpang enemy number", "code": "public void decreasePangPangEnemyLife(String... protocols){\n  for (int i=0; i < Settings.nPangPangEnemyHeight; i++)   for (int j=0; j < Settings.nPangPangEnemyWidth; j++)   if (mEnemy[i][j].getsUnitName().equals(protocols[0])) {\n    mEnemy[i][j].decreaseShield();\n    if (mEnemy[i][j].get_Is_Dead()) {\n      sendMessageInTheRoomPeople(Settings._ANSWER_PANGAPNG_ENEMY_COLLISION_EVENT + \"\",protocols[0]);\n      mpCtr.set_Enemy_Cnt_Minus();\n      break;\n    }\n  }\n}\n"}
{"nl": "draw the x axis", "code": "protected void drawXAxis(Graphics2D gc){\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));\n  gc.setColor(Color.BLACK);\n  int x=5;\n  int y=getHeight() - bottomMargin + 25;\n  if (!isTranspose())   gc.drawString(getChartData().getSeriesLabel(),x,y);\n else   gc.drawString(getChartData().getClassesLabel(),x,y);\n}\n"}
{"nl": "draws the y-axis labels to the screen", "code": "@Override public void renderAxisLabels(Canvas c){\n  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;\n  float[] positions=getTransformedPositions();\n  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());\n  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());\n  mAxisLabelPaint.setColor(mYAxis.getTextColor());\n  float xoffset=mYAxis.getXOffset();\n  float yoffset=Utils.calcTextHeight(mAxisLabelPaint,\"A\") / 2.5f + mYAxis.getYOffset();\n  AxisDependency dependency=mYAxis.getAxisDependency();\n  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();\n  float xPos=0f;\n  if (dependency == AxisDependency.LEFT) {\n    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {\n      mAxisLabelPaint.setTextAlign(Align.LEFT);\n      xPos=mViewPortHandler.offsetLeft() - xoffset;\n    }\n else {\n      mAxisLabelPaint.setTextAlign(Align.LEFT);\n      xPos=mViewPortHandler.offsetLeft() + xoffset;\n    }\n  }\n else {\n    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {\n      mAxisLabelPaint.setTextAlign(Align.LEFT);\n      xPos=mViewPortHandler.contentRight() + xoffset;\n    }\n else {\n      mAxisLabelPaint.setTextAlign(Align.LEFT);\n      xPos=mViewPortHandler.contentRight() - xoffset;\n    }\n  }\n  drawYLabels(c,xPos,positions,yoffset);\n}\n"}
{"nl": "erase the block (for reuse)", "code": "public void clear(){\n  uid=0;\n  matchRecord=null;\n  fName2Id.clear();\n  taxonId=0;\n}\n"}
{"nl": "Load the given unit file", "code": "public void load(String fileName) throws IOException, MaryConfigurationException {\n  DataInputStream dis=null;\n  try {\n    dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));\n  }\n catch (  FileNotFoundException e) {\n    throw new RuntimeException(\"File [\" + fileName + \"] was not found.\");\n  }\n  try {\n    hdr=new MaryHeader(dis);\n    if (hdr.getType() != MaryHeader.SCOST) {\n      throw new RuntimeException(\"File [\" + fileName + \"] is not a valid Mary Units file.\");\n    }\n    numberOfUnits=dis.readInt();\n    if (numberOfUnits < 0) {\n      throw new RuntimeException(\"File [\" + fileName + \"] has a negative number of units. Aborting.\");\n    }\n    sCost=new double[numberOfUnits];\n    for (int i=0; i < numberOfUnits; i++) {\n      sCost[i]=dis.readFloat();\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Reading the Mary header from file [\" + fileName + \"] failed.\",e);\n  }\n}\n"}
{"nl": "download: load download -> select chapter -> check permission -> update index -> add task", "code": "private void download(boolean neutral,List<Selectable> list){\n  for (int i=0; i != list.size(); ++i) {\n    if ((neutral || list.get(i).isChecked()) && !list.get(i).isDisable()) {\n      mDownloadList.add(mDetailAdapter.getItem(i));\n    }\n  }\n  if (!mDownloadList.isEmpty()) {\n    showProgressDialog();\n    if (PermissionUtils.requestPermission(this,REQUEST_DOWNLOAD)) {\n      mPresenter.updateIndex(mDetailAdapter.getDateSet());\n    }\n  }\n}\n"}
{"nl": "Writes the content into a file using same format as source file", "code": "public void writeFileContent(String content,Path path,FileMatch sourceFileMatch) throws CommandException {\n  try {\n    File outputFile=path.toFile();\n    BOMInputStream inputStream=new BOMInputStream(FileUtils.openInputStream(sourceFileMatch.getPath().toFile()),false,boms);\n    if (inputStream.hasBOM()) {\n      FileUtils.writeByteArrayToFile(outputFile,inputStream.getBOM().getBytes());\n      FileUtils.writeByteArrayToFile(outputFile,content.getBytes(inputStream.getBOMCharsetName()),true);\n    }\n else {\n      FileUtils.writeStringToFile(outputFile,content,StandardCharsets.UTF_8);\n    }\n  }\n catch (  IOException e) {\n    throw new CommandException(\"Cannot write file content in path: \" + path.toString(),e);\n  }\n}\n"}
{"nl": "Analyzes the given APK file for data flows", "code": "public InfoflowResults analyzeAPKFile(String fileName,boolean enableImplicitFlows,boolean enableStaticFields,boolean flowSensitiveAliasing) throws IOException, XmlPullParserException {\n  String androidJars=System.getenv(\"ANDROID_JARS\");\n  if (androidJars == null)   androidJars=System.getProperty(\"ANDROID_JARS\");\n  if (androidJars == null)   throw new RuntimeException(\"Android JAR dir not set\");\n  System.out.println(\"Loading Android.jar files from \" + androidJars);\n  SetupApplication setupApplication=new SetupApplication(androidJars,fileName);\n  setupApplication.setTaintWrapper(new EasyTaintWrapper(\"EasyTaintWrapperSource.txt\"));\n  setupApplication.calculateSourcesSinksEntrypoints(\"SourcesAndSinks.txt\");\n  setupApplication.setEnableImplicitFlows(enableImplicitFlows);\n  setupApplication.setEnableStaticFieldTracking(enableStaticFields);\n  setupApplication.setFlowSensitiveAliasing(flowSensitiveAliasing);\n  return setupApplication.runInfoflow();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n"}
{"nl": "Sets an event listener that uses annotations", "code": "public SimplePollingContainerConfigurer eventListenerAnnotation(Object eventListener){\n  AnnotationEventListenerAdapter annotationEventListenerAdapter=new AnnotationEventListenerAdapter();\n  annotationEventListenerAdapter.setDelegate(eventListener);\n  annotationEventListenerAdapter.afterPropertiesSet();\n  pollingEventListenerContainer.setEventListener(annotationEventListenerAdapter);\n  return this;\n}\n"}
{"nl": "Method to take an input json string and output a Map<String, Object> with arrays as ArrayList<String> objects and single values as String objects", "code": "public static Map<String,Object> jsonStringToMap(String jsonString,DataSchema dataSchema){\n  Map<String,Object> value=new HashMap<>();\n  JSONParser jsonParser=new JSONParser();\n  try {\n    JSONObject jsonObj=(JSONObject)jsonParser.parse(jsonString);\n    for (    Object key : jsonObj.keySet()) {\n      String mapKey=key.toString();\n      if (jsonObj.get(key) != null) {\n        if (dataSchema.isArrayElement((String)key)) {\n          ArrayList<String> mapValue=StringUtils.jsonArrayStringToArrayList(jsonObj.get(key).toString());\n          value.put(mapKey,mapValue);\n        }\n else {\n          value.put(mapKey,jsonObj.get(key).toString());\n        }\n      }\n    }\n  }\n catch (  ParseException e) {\n    logger.warn(\"Could not json-decode string: \" + jsonString,e);\n  }\ncatch (  NumberFormatException e) {\n    logger.warn(\"Could not parse field into number: \" + jsonString,e);\n  }\n  return value;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetByIdQuery(VkApiClient client,List<String> posts){\n  super(client,\"wall.getById\",Utils.buildParametrizedType(List.class,WallpostFull.class));\n  posts(posts);\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  try {\n    return DAAParser.isMeganizedDAAFile((new File(directory,fileName)).getPath(),true);\n  }\n catch (  IOException e) {\n    return false;\n  }\n}\n"}
{"nl": "Check if error state is shown", "code": "public boolean isError(){\n  return state == State.ERROR;\n}\n"}
{"nl": "computes the graph and graph view", "code": "public void createNetwork(int[] cycle0,Taxa taxa,SplitSystem splits,PhyloTreeView view) throws Exception {\n  ntax=taxa.getBits().cardinality();\n  PhyloTree graph=(PhyloTree)view.getGraph();\n  graph.clear();\n  int[] cycle=normalizeCycle(cycle0);\n  for (int i=1; i <= ntax; i++)   graph.setTaxon2Cycle(cycle[i],i);\n  initGraph(taxa,splits,cycle,graph);\n  List<Integer> interiorSplits=getInteriorSplitsOrdered(taxa,splits);\n  BitSet usedSplits=new BitSet();\n{\n    for (    Integer s : interiorSplits) {\n      wrapSplit(taxa,splits,s,cycle,graph);\n      usedSplits.set(s,true);\n    }\n  }\n  removeTemporaryTrivialEdges(graph);\n  assignAnglesToEdges(splits,cycle,graph,new HashSet());\n  assignAnglesToEdges(splits,cycle,graph,new HashSet());\n  if (graph.getNumberOfNodes() > 0 && graph.getNumberOfEdges() > 0) {\n    Node v=graph.getTaxon2Node(1);\n    Edge e=graph.getFirstAdjacentEdge(v);\n    double angle=Math.PI + graph.getAngle(e);\n    for (e=graph.getFirstEdge(); e != null; e=graph.getNextEdge(e)) {\n      graph.setAngle(e,graph.getAngle(e) - angle);\n    }\n    assignCoordinatesToNodes(optionUseWeights,view);\n  }\n else   assignCoordinatesToNodes(optionUseWeights,view);\n  view.resetViews();\n}\n"}
{"nl": "Constructs new instance of <tt>CM_MOVE_IN_AIR </tt> packet", "code": "public CM_MOVE_IN_AIR(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Call on destroy to avoid memory leaks", "code": "public void cleanUp(){\n  cacheFragment=null;\n}\n"}
{"nl": "choose attack type", "code": "protected static void chooseAttack(NpcAI2 npcAI,int delay){\n  AttackIntention attackIntention=npcAI.chooseAttackIntention();\n  if (npcAI.isLogging()) {\n    AI2Logger.info(npcAI,\"AttackManager: chooseAttack \" + attackIntention + \" delay \"+ delay);\n  }\n  if (!npcAI.canThink()) {\n    return;\n  }\nswitch (attackIntention) {\ncase SIMPLE_ATTACK:\n    SimpleAttackManager.performAttack(npcAI,delay);\n  break;\ncase SKILL_ATTACK:\nSkillAttackManager.performAttack(npcAI,delay);\nbreak;\ncase FINISH_ATTACK:\nnpcAI.think();\nbreak;\ndefault :\nbreak;\n}\n}\n"}
{"nl": "Type an alphabetic latin character", "code": "private void typeAlphabetic(char c){\n  if (Character.isUpperCase(c)) {\n    controller.keyPress(KeyEvent.VK_SHIFT);\n  }\n  controller.keyPress(Character.toUpperCase(c));\n  controller.keyRelease(Character.toUpperCase(c));\n  if (Character.isUpperCase(c)) {\n    controller.keyRelease(KeyEvent.VK_SHIFT);\n  }\n}\n"}
{"nl": "gets the size of the mapping", "code": "public int size(){\n  return name2id.size();\n}\n"}
{"nl": "Returns when request succeeds", "code": "public void onSuccess(int statusCode,Header[] headers,JSONObject response){\n}\n"}
{"nl": "Find which ConstraintAnchor is close to the (x, y) coordinates", "code": "public ConstraintAnchor findAnchor(float x,float y,boolean checkGuidelines,boolean mousePress,ViewTransform viewTransform){\n  ConnectionCandidate candidate=new ConnectionCandidate();\n  float dist=(ConnectionDraw.CONNECTION_ANCHOR_SIZE + ConnectionDraw.CONNECTION_ANCHOR_SIZE) / viewTransform.getScale();\n  candidate.distance=ConnectionDraw.CONNECTION_ANCHOR_SIZE * ConnectionDraw.CONNECTION_ANCHOR_SIZE;\n  for (  Selection.Element element : mSelection.getElements()) {\n    ConstraintWidget widget=element.widget;\n    if (!checkGuidelines && (widget instanceof Guideline)) {\n      continue;\n    }\n    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();\n    WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();\n    widgetInteraction.updatePosition(viewTransform);\n    widgetInteraction.findClosestConnection(viewTransform,x,y,candidate,mousePress);\n  }\n  float slope=(dist * dist);\n  if (candidate.anchorTarget != null && candidate.distance < slope) {\n    candidate.distance=0;\n  }\n else {\n    candidate.anchorTarget=null;\n  }\n  for (  ConstraintWidget widget : mWidgets.values()) {\n    if (!checkGuidelines && (widget instanceof Guideline)) {\n      continue;\n    }\n    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();\n    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);\n    if (!decorator.isVisible()) {\n      continue;\n    }\n    WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();\n    widgetInteraction.updatePosition(viewTransform);\n    widgetInteraction.findClosestConnection(viewTransform,x,y,candidate,mousePress);\n  }\n  return candidate.anchorTarget;\n}\n"}
{"nl": "ChangeSize of target view", "code": "private void changeSize(float targetSize,float parentSize,View targetView){\n  ViewGroup.LayoutParams params=targetView.getLayoutParams();\n  if (targetSize != 0.0f) {\n    params.width=(int)targetSize;\n    params.height=(int)targetSize;\n  }\n else {\n    if (parentSize != 0.0f) {\n      params.width=(int)parentSize;\n      params.height=(int)parentSize;\n    }\n  }\n  targetView.setLayoutParams(params);\n}\n"}
{"nl": "here we compare a sample with it self and compute the left-value and right-value percentile limits", "code": "private int[][] computePercentileLimits(int[] sample,int resamplingSize,int repeats,double leftValue,double rightValue) throws CanceledException {\n  int length=sample.length;\n  int[][] diff=new int[repeats][length];\n  for (int i=0; i < repeats; i++) {\n    int[] N1=getRandomSample(sample,resamplingSize);\n    int[] N2=getRandomSample(sample,resamplingSize);\n    diff[i]=getAbsoluteDifference(N1,N2);\n  }\n  int[][] p5_95=new int[length][3];\n  for (int i=0; i < length; i++) {\n    int[] diff_i=extractRow(diff,i);\n    p5_95[i]=getPercentileInterval(diff_i,leftValue,rightValue);\n  }\n  return p5_95;\n}\n"}
{"nl": "Vincular views com Java API", "code": "private void bindViews(){\n  contentRoot=findViewById(R.id.contentRoot);\n  edMessage=(EmojiconEditText)findViewById(R.id.editTextMessage);\n  btSendMessage=(ImageView)findViewById(R.id.buttonMessage);\n  btSendMessage.setOnClickListener(this);\n  btEmoji=(ImageView)findViewById(R.id.buttonEmoji);\n  emojIcon=new EmojIconActions(this,contentRoot,edMessage,btEmoji);\n  emojIcon.ShowEmojIcon();\n  rvListMessage=(RecyclerView)findViewById(R.id.messageRecyclerView);\n  mLinearLayoutManager=new LinearLayoutManager(this);\n  mLinearLayoutManager.setStackFromEnd(true);\n}\n"}
{"nl": "Normalize by zero mean unit variance", "code": "public static JavaRDD<List<Writable>> zeromeanUnitVariance(Schema schema,JavaRDD<List<Writable>> data){\n  return zeromeanUnitVariance(schema,data,Collections.<String>emptyList());\n}\n"}
{"nl": "Remove the package name from a fully qualified class name", "code": "public static String removePackageName(String fully_qualified_name_){\n  if (fully_qualified_name_ == null)   return null;\n  int lastdot=fully_qualified_name_.lastIndexOf('.');\n  if (lastdot < 0) {\n    return \"\";\n  }\n else {\n    return fully_qualified_name_.substring(lastdot + 1);\n  }\n}\n"}
{"nl": "erase all taxa", "code": "public void clear(){\n  ntax=0;\n  bits.clear();\n  index2name.clear();\n  name2index.clear();\n}\n"}
{"nl": "Set lifetime", "code": "public AdsCreateTargetGroupQuery lifetime(Integer value){\n  return unsafeParam(\"lifetime\",value);\n}\n"}
{"nl": "draw the y-axis", "code": "protected void drawYAxis(Graphics2D gc,Dimension size){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetQuery(VkApiClient client){\n  super(client,\"photos.get\",GetResponse.class);\n}\n"}
{"nl": "Draws a text with the given transparency", "code": "public static void drawTransparentString(String text,int xPos,int yPos,int transparency,boolean shadow){\n  if (transparency > 100 || transparency < 0)   throw new IllegalArgumentException(\"Transparency can not be \" + transparency + \"%\");\n  int i=0xF | (int)((transparency / 100d) * 255) << 24;\n  getGlStateManager().pushMatrix();\n  getGlStateManager().enableBlend();\n  if (shadow) {\n    getFontRendererObjHandler().drawStringWithShadow(text,xPos,yPos,i);\n  }\n else {\n    getFontRendererObjHandler().drawString(text,xPos,yPos,i);\n  }\n  getGlStateManager().disableAlpha();\n  getGlStateManager().disableBlend();\n  getGlStateManager().popMatrix();\n}\n"}
{"nl": "Updates the themes list reloading all the themes from the resolver", "code": "private void updateThemes(){\n  ImmutableList<String> editableThemes=ThemeEditorUtils.getModuleThemeQualifiedNamesList(myContext.getCurrentContextModule());\n  ImmutableList.Builder<String> availableThemesListBuilder=ImmutableList.builder();\n  ImmutableList.Builder<String> disabledThemesListBuilder=ImmutableList.builder();\n  ThemeResolver themeResolver=myContext.getThemeResolver();\n  for (  String themeName : editableThemes) {\n    if (themeResolver.getTheme(themeName) != null) {\n      availableThemesListBuilder.add(themeName);\n    }\n else {\n      disabledThemesListBuilder.add(themeName);\n    }\n  }\n  myAvailableProjectThemes=availableThemesListBuilder.build();\n  ImmutableList<String> disabledProjectThemes=disabledThemesListBuilder.build();\n  String selectedItem=getSelectedItem();\n  if (selectedItem == null) {\n    if (myDefaultThemeName != null && (editableThemes.contains(myDefaultThemeName) || themeResolver.getTheme(myDefaultThemeName) != null)) {\n      selectedItem=myDefaultThemeName;\n    }\n else     if (!editableThemes.isEmpty()) {\n      selectedItem=editableThemes.get(0);\n    }\n else     if (!myDefaultThemeNames.isEmpty()) {\n      selectedItem=myDefaultThemeNames.get(0);\n    }\n  }\n  myEditOptions.clear();\n  buildEditOptionsList(selectedItem);\n  myAllItems=new SeparatedList(mySeparator,group(myAvailableProjectThemes),group(disabledProjectThemes),group(myDefaultThemeNames,SHOW_ALL_THEMES),group(myEditOptions));\n  setSelectedItem(selectedItem);\n}\n"}
{"nl": "Delete all necessary inputs, clean up", "code": "public static void cleanup(FileSystem fs,String dataSchemasProp,String querySchemasProp,String stopListProp) throws Exception {\n  Inputs.deleteESInput();\n  fs.close();\n  SystemConfiguration.setProperty(\"pir.stopListFile\",stopListProp);\n  if (!dataSchemasProp.equals(\"none\")) {\n    DataSchemaLoader.initialize();\n  }\n  if (!querySchemasProp.equals(\"none\")) {\n    QuerySchemaLoader.initialize();\n  }\n}\n"}
{"nl": "Creates the table for the repositories", "code": "protected TableViewer createTable(Composite parent,int span){\n  Table table=new Table(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE| SWT.FULL_SELECTION);\n  GridData data=new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL);\n  data.horizontalSpan=span;\n  table.setLayoutData(data);\n  TableLayout layout=new TableLayout();\n  layout.addColumnData(new ColumnWeightData(100,true));\n  table.setLayout(layout);\n  TableColumn col=new TableColumn(table,SWT.NONE);\n  col.setResizable(true);\n  return new TableViewer(table);\n}\n"}
{"nl": "Encounter check", "code": "public boolean isEncountered(){\n  if (encountered == null) {\n    return false;\n  }\n  return encountered;\n}\n"}
{"nl": "Returns an AnyVal that matches any null value", "code": "static AnyVal<?> anyNull(){\n  return AnyNull.instance;\n}\n"}
{"nl": "Sorts all filenames, regarding last user decision", "code": "public static File[] sortLocalFolder(File[] files){\nswitch (mSortOrder) {\ncase 0:\n    files=FileStorageUtils.sortLocalFilesByName(files);\n  break;\ncase 1:\nfiles=FileStorageUtils.sortLocalFilesByDate(files);\nbreak;\ncase 2:\nfiles=FileStorageUtils.sortLocalFilesBySize(files);\nbreak;\n}\nreturn files;\n}\n"}
{"nl": "Construct an empty GrimpBody", "code": "GrimpBody(SootMethod m){\n  super(m);\n}\n"}
{"nl": "report contigs stats", "code": "public void reportContigStats(){\n  if (contigs.size() == 0) {\n    System.err.println(String.format(\"Contigs:%,9d\",0));\n  }\n else {\n    final int[] sizes=new int[contigs.size()];\n    int pos=0;\n    for (    Pair<String,String> pair : contigs) {\n      sizes[pos++]=pair.getSecond().length();\n    }\n    Arrays.sort(sizes);\n    System.err.println(String.format(\"Contigs:%,9d\",sizes.length));\n    System.err.println(String.format(\"Min len:%,9d\",sizes[0]));\n    System.err.println(String.format(\"Med len:%,9d\",sizes[sizes.length / 2]));\n    System.err.println(String.format(\"Max len:%,9d\",sizes[sizes.length - 1]));\n  }\n}\n"}
{"nl": "return the euclidian distance between two coords", "code": "public double distance(Coord coord){\n  return Math.sqrt(distanceSquare(coord));\n}\n"}
{"nl": "is the widget centered", "code": "public boolean isCentered(int orientationVertical){\n  if (isGuideline())   return false;\n  if (orientationVertical == Direction.ORIENTATION_VERTICAL) {\n    return mConstraintWidget.getAnchor(ConstraintAnchor.Type.TOP).isConnected() && mConstraintWidget.getAnchor(ConstraintAnchor.Type.BOTTOM).isConnected();\n  }\n  return mConstraintWidget.getAnchor(ConstraintAnchor.Type.LEFT).isConnected() && mConstraintWidget.getAnchor(ConstraintAnchor.Type.RIGHT).isConnected();\n}\n"}
{"nl": "Creates new form AutoSummENGGui and loads its settings", "code": "public AutoSummENGGui(){\n  initComponents();\n  loadSettings();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  int value=ProgramProperties.get(MeganProperties.MININUM_READS_IN_ALIGNMENT,10);\n  String result=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter minimum number of reads required for an alignment\",\"\" + value);\n  if (result != null && Basic.isInteger(result))   execute(\"set minReadsAlignment=\" + result + \";\");\n}\n"}
{"nl": "An naive approach to check whether the file system is case sensitive or not", "code": "public boolean isFileSystemCaseSensitive(){\n  File dir=new File(\".\");\n  File[] files=dir.listFiles();\n  if (files == null)   return false;\n  for (  File file : files) {\n    if (file.isFile()) {\n      String lowerCaseFilePath=file.getAbsolutePath().toLowerCase();\n      String upperCaseFilePath=file.getAbsolutePath().toUpperCase();\n      File lowerCaseFile=new File(lowerCaseFilePath);\n      File upperCaseFile=new File(upperCaseFilePath);\n      if (!(lowerCaseFile.exists() && upperCaseFile.exists())) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "Initialize all space components", "code": "public void initComponents() throws SpaceComponentsInitializeException {\n  try {\n    SpaceInitializationIndicator.setInitializer();\n    initPrimaryOnlyComponents();\n    initBackupComponents();\n  }\n  finally {\n    SpaceInitializationIndicator.unsetInitializer();\n  }\n}\n"}
{"nl": "Remove from leaseInRenew, return true if removed", "code": "private boolean removeLeaseInRenew(Entry e){\n  int index=leaseInRenew.indexOf(e);\n  if (index < 0)   return false;\n  leaseInRenew.remove(index);\n  return true;\n}\n"}
{"nl": "Item id", "code": "protected MarketGetCommentsQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "atom selection function", "code": "public Set<Atomic> selectAtoms(){\n  Set<Atomic> atoms=new HashSet<>(atomSet).stream().filter(null).filter(null).collect(Collectors.toSet());\n  if (atoms.size() == 1)   return atoms;\n  Set<Atomic> selectedAtoms=atoms.stream().filter(null).collect(Collectors.toSet());\n  if (selectedAtoms.isEmpty())   throw new IllegalStateException(ErrorMessage.NO_ATOMS_SELECTED.getMessage(this.toString()));\n  return selectedAtoms;\n}\n"}
{"nl": "Check the hover listener for any anchor to lit", "code": "private void updateFromHoverListener(int x,int y){\n  mHoverListener.populate();\n  mHoverListener.find(x,y);\n  ConstraintWidget widget=mHoverListener.mHitWidget;\n  ConstraintAnchor anchor=mHoverListener.getConstraintAnchor();\n  ResizeHandle handle=mHoverListener.mHitResizeHandle;\n  mMouseCursor=updateMouseCursor(handle);\n  if (mPreviousHoverWidget != null) {\n    if (!mSelection.contains(mPreviousHoverWidget)) {\n      getDecorator(mPreviousHoverWidget).setLook(ColorTheme.Look.NORMAL);\n    }\n  }\n  if (widget != null) {\n    if (!mSelection.contains(widget)) {\n      getDecorator(widget).setLook(ColorTheme.Look.HIGHLIGHTED);\n    }\n    mPreviousHoverWidget=widget;\n  }\n  mSceneDraw.setCurrentUnderneathAnchor(anchor);\n  mSceneDraw.repaint();\n}\n"}
{"nl": "Convert from game time into real time", "code": "public int convertTime(){\n  return this.getTime() / 12;\n}\n"}
{"nl": "Shows or hides a checkbox based on a given API level and the max API level for which it should be shown", "code": "private static void toggleVisibleOnApi(JCheckBox component,int maxApiLevel,int apiLevel){\n  component.setVisible(apiLevel <= maxApiLevel);\n  if (!component.isVisible()) {\n    component.setSelected(false);\n  }\n}\n"}
{"nl": "Checks whether the given value can be the base value value of an access path", "code": "public static boolean canContainValue(Value val){\n  return val instanceof Local || val instanceof InstanceFieldRef || val instanceof StaticFieldRef|| val instanceof ArrayRef;\n}\n"}
{"nl": "Copies data from input stream", "code": "public void copyFrom(FastByteArrayInputStream source,int offset,int count){\n  if (offset + count > source.getCount()) {\n    throw new IndexOutOfBoundsException(\"Trying to copy data past the end of source\" + \", source.size=\" + source.getCount() + \", offset=\"+ offset+ \", count=\"+ count);\n  }\n  byte[] srcBuf=source.getBuf();\n  write(srcBuf,offset,count);\n}\n"}
{"nl": "use an item with itemID", "code": "public void useIncense() throws RemoteServerException, LoginFailedException {\n  useIncense(ItemId.ITEM_INCENSE_ORDINARY);\n}\n"}
{"nl": "Add a legionMember to the legionMembers list", "code": "public boolean addLegionMember(int playerObjId){\n  if (canAddMember()) {\n    legionMembers.add(playerObjId);\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Creates a set of projects for the given IntelliJ modules", "code": "@NonNull public static List<Project> create(@NonNull IntellijLintClient client,@Nullable List<VirtualFile> files,@NonNull Module... modules){\n  List<Project> projects=Lists.newArrayList();\n  Map<Project,Module> projectMap=Maps.newHashMap();\n  Map<Module,Project> moduleMap=Maps.newHashMap();\n  Map<AndroidLibrary,Project> libraryMap=Maps.newHashMap();\n  if (files != null && !files.isEmpty()) {\n    files=Lists.newArrayList(files);\n  }\n  for (  Module module : modules) {\n    addProjects(client,module,files,moduleMap,libraryMap,projectMap,projects);\n  }\n  client.setModuleMap(projectMap);\n  if (projects.size() > 1) {\n    Set<Project> roots=new HashSet<Project>(projects);\n    for (    Project project : projects) {\n      roots.removeAll(project.getAllLibraries());\n    }\n    return Lists.newArrayList(roots);\n  }\n else {\n    return projects;\n  }\n}\n"}
{"nl": "Add account to reconnectionAccount list", "code": "public static synchronized void addReconnectingAccount(ReconnectingAccount acc){\n  reconnectingAccounts.put(acc.getAccount().getId(),acc);\n}\n"}
{"nl": "Method to perform the query given an input JavaDStream of JSON", "code": "public void performQuery(JavaDStream<MapWritable> input){\n  logger.info(\"Performing query: \");\n  if (!useQueueStream) {\n    input.window(Durations.seconds(windowLength),Durations.seconds(windowLength));\n  }\n  JavaPairDStream<Integer,List<BigInteger>> selectorHashToDocRDD=input.mapToPair(new HashSelectorsAndPartitionData(bVars));\n  JavaPairDStream<Integer,Iterable<List<BigInteger>>> selectorGroupRDD=selectorHashToDocRDD.groupByKey();\n  JavaPairDStream<Long,BigInteger> encRowRDD=selectorGroupRDD.flatMapToPair(new EncRowCalc(accum,bVars));\n  encryptedColumnCalc(encRowRDD);\n  start();\n}\n"}
{"nl": "Generates the lifecycle for an Android broadcast receiver class", "code": "private void generateBroadcastReceiverLifecycle(Set<String> entryPoints,SootClass currentClass,JNopStmt endClassStmt,Local classLocal){\n  createIfStmt(endClassStmt);\n  Stmt onReceiveStmt=searchAndBuildMethod(AndroidEntryPointConstants.BROADCAST_ONRECEIVE,currentClass,entryPoints,classLocal);\n  JNopStmt startWhileStmt=new JNopStmt();\n  JNopStmt endWhileStmt=new JNopStmt();\n  body.getUnits().add(startWhileStmt);\n  createIfStmt(endWhileStmt);\n  boolean hasAdditionalMethods=false;\n  if (modelAdditionalMethods) {\n    for (    SootMethod currentMethod : currentClass.getMethods())     if (entryPoints.contains(currentMethod.toString()))     hasAdditionalMethods|=createPlainMethodCall(classLocal,currentMethod);\n  }\n  addCallbackMethods(currentClass);\n  body.getUnits().add(endWhileStmt);\n  if (hasAdditionalMethods)   createIfStmt(startWhileStmt);\n  createIfStmt(onReceiveStmt);\n}\n"}
{"nl": "Authorize System", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_AUTHORIZE_CANCEL(int nameId){\n  return new SM_SYSTEM_MESSAGE(1402147,new Object[]{new DescriptionId(nameId)});\n}\n"}
{"nl": "Set test type pik", "code": "TestType(final Long pik){\n  this.pik=pik;\n}\n"}
{"nl": "Clears the resource cache", "code": "public void clearResources(){\n  objectCache.clear();\n}\n"}
{"nl": "Calculate a new renew time due to an indefinite exception", "code": "public void delayRenew(){\n  long delta=endTime - renew;\n  if (delta <= renewalRTT) {\n    return;\n  }\n else   if (delta <= renewalRTT * 3) {\n    delta=renewalRTT;\n  }\n else   if (delta <= 1000 * 60 * 60) {\n    delta/=3;\n  }\n else   if (delta <= 1000 * 60 * 60* 24) {\n    delta=1000 * 60 * 30;\n  }\n else   if (delta <= 1000 * 60 * 60* 24* 7) {\n    delta=1000 * 60 * 60* 3;\n  }\n else {\n    delta=1000 * 60 * 60* 8;\n  }\n  renew+=delta;\n}\n"}
{"nl": "A method to be called when an attribute node has been removed", "code": "void removedAttrNode(AttrImpl attr,NodeImpl oldOwner,String name){\n}\n"}
{"nl": "Shutdown all registered drivers", "code": "public void shutdown(){\n  drivers.stream().filter(null).forEach(null);\n}\n"}
{"nl": "HUNTING REWARD QUERIES", "code": "private long[] helperHuntingRewardMonster(long id){\n  ArrayList<Long> ids=new ArrayList<Long>();\n  ids.add(id);\n  MonsterCursor monsterCursor=mHelper.queryMonster(id);\n  monsterCursor.moveToFirst();\n  String name=monsterCursor.getMonster().getName();\n  monsterCursor.close();\n  monsterCursor=mHelper.queryMonsterTrait(name);\n  monsterCursor.moveToFirst();\n  while (!monsterCursor.isAfterLast()) {\n    ids.add(monsterCursor.getMonster().getId());\n    monsterCursor.moveToNext();\n  }\n  monsterCursor.close();\n  long[] idArray=new long[ids.size()];\n  for (int i=0; i < idArray.length; i++) {\n    idArray[i]=ids.get(i);\n  }\n  return idArray;\n}\n"}
{"nl": "Load the installed android versions from the SDK", "code": "public static void loadInstalledVersions(){\n  IAndroidTarget[] targets=getCompilationTargets();\n  IAndroidTarget highestInstalledTarget=null;\n  ourInstalledVersions.clear();\n  for (  IAndroidTarget target : targets) {\n    if (target.isPlatform() && target.getVersion().getFeatureLevel() >= SdkVersionInfo.LOWEST_COMPILE_SDK_VERSION && (highestInstalledTarget == null || target.getVersion().getFeatureLevel() > highestInstalledTarget.getVersion().getFeatureLevel() && !target.getVersion().isPreview())) {\n      highestInstalledTarget=target;\n    }\n    if (target.getVersion().isPreview() || !target.getAdditionalLibraries().isEmpty()) {\n      AndroidTargetComboBoxItem targetInfo=new AndroidTargetComboBoxItem(target);\n      ourInstalledVersions.add(targetInfo.target.getVersion());\n    }\n  }\n  ourHighestInstalledApiTarget=highestInstalledTarget;\n}\n"}
{"nl": "Constructs new <tt>SM_CHARACTER_UI </tt> packet", "code": "public SM_UI_SETTINGS(byte[] data,int type){\n  this.data=data;\n  this.type=type;\n}\n"}
{"nl": "write the read", "code": "private static void write(IReadBlock readBlock,Writer w) throws IOException {\n  String header=readBlock.getReadHeader();\n  if (header != null) {\n    if (!header.startsWith(\">\"))     w.write(\">\");\n    w.write(header);\n    if (!header.endsWith(\"\\n\"))     w.write(\"\\n\");\n  }\n else   w.write(\">null\\n\");\n  String sequence=readBlock.getReadSequence();\n  if (sequence != null) {\n    if (sequence.endsWith(\"\\n\\n\")) {\n      w.write(sequence.substring(0,sequence.length() - 1));\n    }\n else {\n      w.write(sequence);\n      if (!sequence.endsWith(\"\\n\"))       w.write(\"\\n\");\n    }\n  }\n else   w.write(\"null\\n\");\n}\n"}
{"nl": "Formal creation - method parameters", "code": "private void createFormal(polyglot.ast.Formal formal,int counter){\n  soot.Type sootType=Util.getSootType(formal.type().type());\n  soot.Local formalLocal=createLocal(formal.localInstance());\n  soot.jimple.ParameterRef paramRef=soot.jimple.Jimple.v().newParameterRef(sootType,counter);\n  paramRefCount++;\n  soot.jimple.Stmt stmt=soot.jimple.Jimple.v().newIdentityStmt(formalLocal,paramRef);\n  body.getUnits().add(stmt);\n  Util.addLnPosTags(((soot.jimple.IdentityStmt)stmt).getRightOpBox(),formal.position());\n  Util.addLnPosTags(stmt,formal.position());\n}\n"}
{"nl": "Indicates whether the attribute represents a background color The attribute needs to be in the contrast map", "code": "public static boolean isBackgroundAttribute(String text){\n  return BACKGROUND_ATTRIBUTES.contains(text);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetByIdQuery(VkApiClient client,String... posts){\n  super(client,\"wall.getById\",Utils.buildParametrizedType(List.class,WallpostFull.class));\n  posts(posts);\n}\n"}
{"nl": "Move Player concerning object with specific conditions", "code": "public static boolean moveToTargetWithDistance(VisibleObject object,Player player,int direction,int distance){\n  double radian=Math.toRadians(object.getHeading() * 3);\n  float x0=object.getX();\n  float y0=object.getY();\n  float x1=(float)(Math.cos(Math.PI * direction + radian) * distance);\n  float y1=(float)(Math.sin(Math.PI * direction + radian) * distance);\n  return teleportTo(player,object.getWorldId(),x0 + x1,y0 + y1,object.getZ());\n}\n"}
{"nl": "Loads the configuration from the XML file given by the server and stored in the", "code": "public Document fromXMLtoDOC(final String xml){\n  Document confXMLDoc;\n  log.trace(\"fromXMLtoDOC - trying to configure process using configuration XML\");\n  SimpleXMLParser parser=null;\n  try {\n    parser=new SimpleXMLParser();\n    confXMLDoc=parser.parse(xml);\n  }\n catch (  ParserConfigurationException e) {\n    log.error(\"fromXMLtoDOC - Error creating instance of SimpleXMLParser\");\n    return null;\n  }\ncatch (  ParserException ex) {\n    log.error(\"fromXMLtoDOC - Exception caught in DOM parsing processConfiguration XML\");\n    log.trace(\"fromXMLtoDOC - processConfiguration XML was: \" + xml);\n    return null;\n  }\n  log.trace(\"fromXMLtoDOC - Configuration XML loaded and parsed\");\n  return confXMLDoc;\n}\n"}
{"nl": "Log the given exception along with the provided message and severity indicator", "code": "public static void log(int severity,String message,Throwable e){\n  log(new Status(severity,ID,0,message,e));\n}\n"}
{"nl": "Set user ids", "code": "public NewsfeedDeleteBanQuery userIds(List<Integer> value){\n  return unsafeParam(\"user_ids\",value);\n}\n"}
{"nl": "copying database open process", "code": "public void openDatabase(){\n  String path=DB_PATH + DB_NAME;\n  mDatabase=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY);\n}\n"}
{"nl": "delete a storage server from the tracker server", "code": "private boolean deleteStorage(TrackerServer trackerServer,String groupName,String storageIpAddr) throws IOException {\n  byte[] header;\n  byte[] bGroupName;\n  byte[] bs;\n  int len;\n  Socket trackerSocket;\n  trackerSocket=trackerServer.getSocket();\n  OutputStream out=trackerSocket.getOutputStream();\n  bs=groupName.getBytes(ClientGlobal.g_charset);\n  bGroupName=new byte[ProtoCommon.FDFS_GROUP_NAME_MAX_LEN];\n  if (bs.length <= ProtoCommon.FDFS_GROUP_NAME_MAX_LEN) {\n    len=bs.length;\n  }\n else {\n    len=ProtoCommon.FDFS_GROUP_NAME_MAX_LEN;\n  }\n  Arrays.fill(bGroupName,(byte)0);\n  System.arraycopy(bs,0,bGroupName,0,len);\n  int ipAddrLen;\n  byte[] bIpAddr=storageIpAddr.getBytes(ClientGlobal.g_charset);\n  if (bIpAddr.length < ProtoCommon.FDFS_IPADDR_SIZE) {\n    ipAddrLen=bIpAddr.length;\n  }\n else {\n    ipAddrLen=ProtoCommon.FDFS_IPADDR_SIZE - 1;\n  }\n  header=ProtoCommon.packHeader(ProtoCommon.TRACKER_PROTO_CMD_SERVER_DELETE_STORAGE,ProtoCommon.FDFS_GROUP_NAME_MAX_LEN + ipAddrLen,(byte)0);\n  byte[] wholePkg=new byte[header.length + bGroupName.length + ipAddrLen];\n  System.arraycopy(header,0,wholePkg,0,header.length);\n  System.arraycopy(bGroupName,0,wholePkg,header.length,bGroupName.length);\n  System.arraycopy(bIpAddr,0,wholePkg,header.length + bGroupName.length,ipAddrLen);\n  out.write(wholePkg);\n  ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(trackerSocket.getInputStream(),ProtoCommon.TRACKER_PROTO_CMD_RESP,0);\n  this.errno=pkgInfo.errno;\n  return pkgInfo.errno == 0;\n}\n"}
{"nl": "Parse a Configuration entry", "code": "public static List parseConfiguration(Element element){\n  String componentName=null;\n  List configList=new ArrayList();\n  NodeList nList=element.getChildNodes();\n  for (int i=0; i < nList.getLength(); i++) {\n    Node node=nList.item(i);\n    if (node.getNodeType() == Node.ELEMENT_NODE) {\n      Element el=(Element)node;\n      if (el.getTagName().equalsIgnoreCase(\"component\")) {\n        NamedNodeMap nm=nList.item(i).getAttributes();\n        Node node1=nm.getNamedItem(\"Name\");\n        if (node1 == null)         node1=nm.getNamedItem(\"name\");\n        componentName=node1.getNodeValue();\n        if (!componentName.endsWith(\".\"))         componentName=componentName + \".\";\n        componentName=componentName.replace(' ','_');\n        Map parms=parseParameters(el);\n        for (Iterator it=parms.entrySet().iterator(); it.hasNext(); ) {\n          Map.Entry me=(Map.Entry)it.next();\n          String name=(String)me.getKey();\n          String value=(String)me.getValue();\n          configList.add(componentName + name + \"=\"+ value);\n        }\n      }\n    }\n  }\n  return (configList);\n}\n"}
{"nl": "Create simple item with minimum information", "code": "public Item(int objId,ItemTemplate itemTemplate){\n  super(objId);\n  this.itemTemplate=itemTemplate;\n  this.activationCount=itemTemplate.getActivationCount();\n  if (itemTemplate.getExpireTime() != 0) {\n    expireTime=((int)(System.currentTimeMillis() / 1000) + itemTemplate.getExpireTime() * 60) - 1;\n  }\n  int optionSlotBonus=itemTemplate.getOptionSlotBonus();\n  if (optionSlotBonus != 0) {\n    optionalSocket=-1;\n  }\n  this.persistentState=PersistentState.NEW;\n  updateChargeInfo(0);\n}\n"}
{"nl": "Complaint reason", "code": "protected MarketReportQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureGetSMSHistoryQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.getSMSHistory\",Utils.buildParametrizedType(List.class,SmsNotification.class));\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n"}
{"nl": "Create an iterator which stars iterating over the packets which reside in external storage", "code": "public CacheReadOnlyIterator(StorageReadOnlyIterator<T> externalIterator){\n  this._externalIterator=externalIterator;\n}\n"}
{"nl": "erase the summary block", "code": "public void clear(){\n  creationDate=null;\n  sampleNames.clear();\n  blastModes.clear();\n  sampleSizes.clear();\n  sampleUIds.clear();\n  disabledSamples.clear();\n  totalReads=0;\n  additionalReads=0;\n  classification2collapsedIds.clear();\n  classification2NodeStyle.clear();\n  classification2algorithm.clear();\n  classification2NodeFormats.clear();\n  classification2EdgeFormats.clear();\n  parameters=null;\n  classification2class2counts.clear();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"hide what=all;\");\n}\n"}
{"nl": "Calculate the maximum of a 2D array", "code": "static float max(float[][] array,int[] result){\n  int max1=0;\n  int max2=0;\n  float val=array[max1][max2];\n  for (int i=0; i < array.length; i++) {\n    for (int j=0; j < array[0].length; j++) {\n      if (val < array[i][j]) {\n        max1=i;\n        max2=j;\n        val=array[max1][max2];\n      }\n    }\n  }\n  result[0]=max1;\n  result[1]=max2;\n  return val;\n}\n"}
{"nl": "Returns the keys defined in the map", "code": "public Array<String> keys(){\n  Array<String> out=new JavaArray<>();\n  for (  String key : internalMap.keySet()) {\n    out.push(key);\n  }\n  return out;\n}\n"}
{"nl": "Expands given token to list of words pronouncing it as digits", "code": "public static void expandDigits(String numberString,WordRelation wordRelation){\n  int numberDigits=numberString.length();\n  for (int i=0; i < numberDigits; i++) {\n    char digit=numberString.charAt(i);\n    if (isDigit(digit)) {\n      wordRelation.addWord(digit2num[numberString.charAt(i) - '0']);\n    }\n else {\n      wordRelation.addWord(\"umpty\");\n    }\n  }\n}\n"}
{"nl": "Define what to run, and wake up this dozing thread", "code": "public void execute(Runnable runnable) throws IllegalStateException {\n  if (runObj != null)   throw new IllegalStateException(\"Cannot execute PoolableThread that \" + \"is busy\");\nsynchronized (working) {\n    if (runObj != null)     throw new IllegalStateException(\"Cannot execute PoolableThread \" + \"that is busy\");\n    runObj=runnable;\n    working.notifyAll();\n  }\n}\n"}
{"nl": "Initialize the keyspace using Mutagen", "code": "private void initialize() throws IOException, ConnectionException {\n  if (!getDriver().isKeyspaceInitialized()) {\n    getDriver().initializeKeyspace();\n  }\n  LOGGER.info(\"Mutating schema\");\n  Plan.Result<Integer> result=getMutagen().mutate(getDriver().getKeyspace());\n  State<Integer> state=result.getLastState();\n  if (result.isMutationComplete()) {\n    LOGGER.info(\"Schema mutation complete. Final state: {}\",state != null ? state.getID() : \"null\");\n  }\n  if (result.getException() != null) {\n    String message=\"Exception mutating schema \" + \"(last state: \" + (state != null ? state.getID() : \"null\") + \", completed mutations: \\\"\"+ result.getCompletedMutations()+ \"\\\", remaining mutations: \\\"\"+ result.getRemainingMutations()+ \"\\\")\";\n    LOGGER.error(message,result.getException());\n    throw new IOException(message,result.getException());\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetNewTagsQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getNewTags\",GetNewTagsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Klatt Rule 10: Shortening in consonant clusters", "code": "private int klattRule10(Element segment){\n  boolean hasPrecedingConsonant=false;\n  boolean hasFollowingConsonant=false;\n  if (isConsonant(segment)) {\n    Element preceding=getPreviousSegment(segment);\n    if (preceding != null && isConsonant(preceding)) {\n      hasPrecedingConsonant=true;\n    }\n    Element following=getNextSegment(segment);\n    if (following != null && isConsonant(following)) {\n      hasFollowingConsonant=true;\n    }\n    if (hasPrecedingConsonant && hasFollowingConsonant) {\n      return getPropertyAsInteger(\"rule10.surrounded\");\n    }\n else     if (hasPrecedingConsonant) {\n      return getPropertyAsInteger(\"rule10.preceded\");\n    }\n else     if (hasFollowingConsonant) {\n      return getPropertyAsInteger(\"rule10.followed\");\n    }\n  }\n  return 100;\n}\n"}
{"nl": "Add an action to the action handler", "code": "public Builder addAction(String actionType,Action action){\n  mActions.add(new ActionPair(actionType,action));\n  return this;\n}\n"}
{"nl": "send the flow command to have the broker start pushing messages", "code": "void receiveMessages(ClientCnx cnx,int numMessages){\n  if (cnx != null) {\n    if (log.isDebugEnabled()) {\n      log.debug(\"[{}] [{}] Adding {} additional permits\",topic,subscription,numMessages);\n    }\n    cnx.ctx().writeAndFlush(Commands.newFlow(consumerId,numMessages),cnx.ctx().voidPromise());\n  }\n}\n"}
{"nl": "Clear the registry", "code": "public static void clearRegistry(){\n  registry.clear();\n}\n"}
{"nl": "called when the selection changed on another part ", "code": "private void handlePartSelectionChanged(IWorkbenchPart part,ISelection selection){\n  if (!(selection instanceof IStructuredSelection))   return;\n  try {\n    Object first=((IStructuredSelection)selection).getFirstElement();\n    if (first instanceof IAdaptable) {\n      IAdaptable a=(IAdaptable)first;\n      Object adapter=a.getAdapter(IResource.class);\n      if (adapter instanceof IResource) {\n        IResource resource=(IResource)adapter;\n        if (!resource.isAccessible()) {\n          showSvnProperties(null);\n        }\n else {\n          ISVNLocalResource svnResource=(ISVNLocalResource)resource.getAdapter(ISVNLocalResource.class);\n          showSvnProperties(svnResource);\n        }\n      }\n    }\n  }\n catch (  SVNException e) {\n  }\n}\n"}
{"nl": "Handle image selection event: add or remove selected image, change title", "code": "private void clickImage(int position){\n  int selectedItemPosition=selectedImagePosition(images.get(position));\n  if (mode == ImagePickerActivity.MODE_MULTIPLE) {\n    if (selectedItemPosition == -1) {\n      if (selectedImages.size() < limit) {\n        imageAdapter.addSelected(images.get(position));\n      }\n else {\n        Toast.makeText(this,R.string.msg_limit_images,Toast.LENGTH_SHORT).show();\n      }\n    }\n else {\n      imageAdapter.removeSelectedPosition(selectedItemPosition,position);\n    }\n  }\n else {\n    if (selectedItemPosition != -1)     imageAdapter.removeSelectedPosition(selectedItemPosition,position);\n else {\n      if (selectedImages.size() > 0) {\n        imageAdapter.removeAllSelectedSingleClick();\n      }\n      imageAdapter.addSelected(images.get(position));\n    }\n  }\n  updateTitle();\n}\n"}
{"nl": "Display the authenticated pilot's profile", "code": "public static void showProfile(android.support.v4.app.Fragment fragment,String pilotId,@Nullable HashMap<String,String> extras){\n  if ((pilotId == null || pilotId.isEmpty()) && AirMap.hasValidAuthenticatedUser()) {\n    pilotId=AirMap.getUserId();\n  }\n  Intent intent=new Intent(fragment.getContext(),ProfileActivity.class);\n  intent.putExtra(ProfileActivity.ARG_PILOT_ID,pilotId);\n  if (extras != null) {\n    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);\n  }\n  fragment.startActivity(intent);\n}\n"}
{"nl": "Returns highest absolute key (ignoring directonality)", "code": "private K highestKey(){\n  FastConcurrentSkipListMap.Node<K,V> n=hiNode();\n  if (n != null) {\n    K last=n.key;\n    if (inBounds(last))     return last;\n  }\n  throw new NoSuchElementException();\n}\n"}
{"nl": "does string start with the given tag (allowing spaces inside tag to be missing in string)", "code": "protected static boolean startsWith(String string,String tag){\n  return string.startsWith(tag) || (tag.contains(\" \") && string.startsWith(tag.replaceAll(\" \",\"\")));\n}\n"}
{"nl": "This method will send a packet to every legion member and update them about the disband", "code": "private void updateMembersOfRecreateLegion(Legion legion){\n  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {\n    PacketSendUtility.sendPacket(onlineLegionMember,new SM_LEGION_UPDATE_MEMBER(onlineLegionMember,1300307,\"\"));\n    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x07));\n  }\n}\n"}
{"nl": "Creates a SampleSet by reading it from the given input stream", "code": "public SampleSet(DataInputStream is) throws IOException {\n  int numSamples;\n  sampleInfo=new SampleInfo(is);\n  numSamples=is.readInt();\n  this.samples=new Sample[numSamples];\n  for (int i=0; i < numSamples; i++) {\n    samples[i]=Sample.loadBinary(is);\n  }\n}\n"}
{"nl": "erase the block  (for reuse)", "code": "public void clear(){\n  uid=0;\n  readHeader=null;\n  readSequence=null;\n  readWeight=1;\n  mateReadUId=0;\n  mateType=0;\n  readLength=0;\n  complexity=0;\n  numberOfMatches=0;\n  matchBlocks=new MatchBlockRMA2[0];\n}\n"}
{"nl": "Called when the PDF is loaded", "code": "public void loadComplete(PdfDocument pdfDocument){\n  state=State.LOADED;\n  this.documentPageCount=pdfiumCore.getPageCount(pdfDocument);\n  int firstPageIdx=0;\n  if (originalUserPages != null) {\n    firstPageIdx=originalUserPages[0];\n  }\n  this.pdfDocument=pdfDocument;\n  pdfiumCore.openPage(pdfDocument,firstPageIdx);\n  this.pageWidth=pdfiumCore.getPageWidth(pdfDocument,firstPageIdx);\n  this.pageHeight=pdfiumCore.getPageHeight(pdfDocument,firstPageIdx);\n  calculateOptimalWidthAndHeight();\n  pagesLoader=new PagesLoader(this);\n  renderingAsyncTask=new RenderingAsyncTask(this,pdfiumCore,pdfDocument);\n  renderingAsyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n  if (scrollHandle != null) {\n    scrollHandle.setupLayout(this);\n    isScrollHandleInit=true;\n  }\n  jumpTo(defaultPage,false);\n  if (onLoadCompleteListener != null) {\n    onLoadCompleteListener.loadComplete(documentPageCount);\n  }\n}\n"}
{"nl": "Use this method to save data to xml file", "code": "public void writeDiscoveryToXml(String FilePath,int pages,hipda hipda) throws Exception {\n  Writer fw=null;\n  try {\n    FileOutputStream fos=new FileOutputStream(FilePath);\n    fw=new OutputStreamWriter(fos,\"UTF-8\");\n    fw.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" + \"\\r\\n\");\n    fw.write(\"<discovery>\" + \"\\r\\n\");\n    for (int i=1; i <= pages; i++) {\n      System.out.println(\"Writting page \" + i);\n      fw.write(hipda.requestDiscoveryContent(hipda.login(),i));\n    }\n    fw.write(\"</discovery>\" + \"\\r\\n\");\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    fw.close();\n  }\n}\n"}
{"nl": "Draws a small button with the logo of the RewiMod on it", "code": "public static void drawButtonRewiMod(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){\n  if (!visible)   return;\n  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);\n  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);\n  getTextureHandler().bindModTexture(\"textures/misc/rewimodlogo.png\");\n  getGlStateManager().color(isHovered ? .7F : 1.0F,1.0F,1.0F);\n  drawCustomSizeRect(xPos + 4,yPos + 4,0,0,12,12);\n}\n"}
{"nl": "Returns true if the handler has any suggestions to offer", "code": "public boolean haveSuggestions(){\n  return myCurrentLeftMatch != null || myCurrentTopMatch != null || myCurrentRightMatch != null || myCurrentBottomMatch != null;\n}\n"}
{"nl": "Builds the path for the given abstraction that reached a sink", "code": "private void buildPathForAbstraction(final AbstractionAtSink abs){\n  SourceContextAndPath scap=new SourceContextAndPath(abs.getAbstraction().getAccessPath(),abs.getSinkStmt());\n  scap=scap.extendPath(abs.getAbstraction());\n  abs.getAbstraction().addPathElement(scap);\n  if (!checkForSource(abs.getAbstraction(),scap))   executor.execute(new SourceFindingTask(abs.getAbstraction()));\n}\n"}
{"nl": "Ony enabled for single resource selection", "code": "protected boolean isEnabled() throws TeamException {\n  ISVNRemoteFile resource=getSingleSelectedSVNRemoteFile();\n  return (resource != null);\n}\n"}
{"nl": "Stop the sink task", "code": "@Override public void stop() throws ConnectException {\n  fLog.trace(\"Stopping\");\n  try {\n    iWriter.close();\n  }\n catch (  IOException exception) {\n    throw new ConnectException(exception);\n  }\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(clusterPolicy);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ClusterPolicy copy=(ClusterPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(clusterPolicy,copy));\n}\n"}
{"nl": "Check to see if a object is loaded or not", "code": "public final boolean isLoaded(I id){\n  return objects.asMap().containsKey(id);\n}\n"}
{"nl": "Send mailbox info", "code": "public SM_MAIL_SERVICE(Player player,Collection<Letter> letters,boolean isExpress){\n  super(player);\n  this.serviceId=2;\n  this.letters=letters;\n  this.isExpress=isExpress;\n}\n"}
{"nl": "gets the next matches", "code": "public int next(){\n  if (hasNext()) {\n    currentMatches=nextMatches;\n    nextMatches=null;\n    return currentMatches.getNumberOfMatches();\n  }\n  return -1;\n}\n"}
{"nl": "Check, if the item enchant will be successful", "code": "private boolean isSuccess(final Player player,final Item parentItem,final Item targetItem,final Item supplementItem,final int targetWeapon){\n  if (parentItem.getItemTemplate() != null) {\n    ItemTemplate itemTemplate=parentItem.getItemTemplate();\n    if (itemTemplate.getCategory() == ItemCategory.ENCHANTMENT || itemTemplate.getCategory() == ItemCategory.AMPLIFICATION || (parentItem.getItemTemplate().getCategory() == targetItem.getItemTemplate().getCategory() && itemTemplate.getCategory() == ItemCategory.STIGMA)) {\n      return EnchantService.enchantItem(player,parentItem,targetItem,supplementItem);\n    }\n    return EnchantService.socketManastone(player,parentItem,targetItem,supplementItem,targetWeapon);\n  }\n  return false;\n}\n"}
{"nl": "Builds the ZoomOptions new instance", "code": "public ZoomOptions build(){\n  ZoomOptions options=new ZoomOptions();\n  options.animate=animate;\n  return options;\n}\n"}
{"nl": "Constructs a ExitMonitorStmt(Expr) grammar chunk", "code": "public ExitMonitorStmt newExitMonitorStmt(Value op){\n  return new GExitMonitorStmt(op);\n}\n"}
{"nl": "Apply the CART to a Target to get its predicted value", "code": "@Override protected float evaluate(Target target) throws Exception {\n  assert target != null;\n  float[] result=null;\n  try {\n    result=(float[])cart.interpret(target);\n  }\n catch (  IllegalArgumentException e) {\n    throw new Exception(\"Could not interpret target '\" + target + \"'\",e);\n  }\n  float value=0;\n  try {\n    value=result[1];\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    throw new Exception(\"Could not handle predicted value: '\" + value + \"'\",e);\n  }\n  return value;\n}\n"}
{"nl": "Singleton accessor", "code": "public static App inst(){\n  if (instance == null) {\n    throw new NullPointerException(\"App is not initialized yet\");\n  }\n  return instance;\n}\n"}
{"nl": "Update of the covariance matrix C for diagonalOnly > 0", "code": "private void updateCovarianceDiagonalOnly(boolean hsig,final RealMatrix bestArz){\n  double oldFac=hsig ? 0 : ccov1Sep * cc * (2 - cc);\n  oldFac+=1 - ccov1Sep - ccovmuSep;\n  diagC=diagC.scalarMultiply(oldFac).add(square(pc).scalarMultiply(ccov1Sep)).add((times(diagC,square(bestArz).multiply(weights))).scalarMultiply(ccovmuSep));\n  diagD=sqrt(diagC);\n  if (diagonalOnly > 1 && iterations > diagonalOnly) {\n    diagonalOnly=0;\n    B=eye(dimension,dimension);\n    BD=diag(diagD);\n    C=diag(diagC);\n  }\n}\n"}
{"nl": "Set comments disabled", "code": "public PhotosEditAlbumQuery commentsDisabled(Boolean value){\n  return unsafeParam(\"comments_disabled\",value);\n}\n"}
{"nl": "Constructs a new editor fixture, tied to the given project", "code": "EditorFixture(Robot robot,IdeFrameFixture frame){\n  this.robot=robot;\n  myFrame=frame;\n}\n"}
{"nl": "Create LocalPolicies with bundle-data in LocalZookeeper by fetching it from GlobalZookeeper", "code": "public void createPolicies(String path,boolean readFromGlobal) throws Exception {\n  try {\n    checkNotNull(path,\"path can't be null\");\n    checkArgument(path.startsWith(LOCAL_POLICIES_ROOT),\"Invalid path of local policies\");\n    LocalPolicies localPolicies=new LocalPolicies();\n    if (readFromGlobal) {\n      String globalPath=joinPath(POLICIES_ROOT,path.substring(path.indexOf(LOCAL_POLICIES_ROOT) + LOCAL_POLICIES_ROOT.length() + 1));\n      Policies glbPolicies=configurationCacheService.policiesCache().get(globalPath);\n      localPolicies.bundles=glbPolicies.bundles;\n    }\n    ZooKeeper zk=cache.getZooKeeper();\n    try {\n      ZkUtils.createFullPathOptimistic(zk,path,ObjectMapperFactory.getThreadLocal().writeValueAsBytes(localPolicies),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n catch (    KeeperException.NodeExistsException e) {\n    }\n  }\n catch (  KeeperException.NoNodeException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    LOG.error(\"Failed to create policies for {} in local zookeeper: {}\",path,e.getMessage(),e);\n    throw new PulsarServerException(e);\n  }\n}\n"}
{"nl": "Add an integer array to the config", "code": "public ResourcesPoet addIntegerArray(String name,@NotNull List<Integer> values){\n  ArrayList<String> integers=new ArrayList<>();\n  for (  Integer value : values) {\n    integers.add(String.valueOf(value));\n  }\n  addIntegerArrayStrings(name,integers);\n  return this;\n}\n"}
{"nl": "Verify the user's phone number", "code": "public static void sendVerificationToken(AirMapCallback<Void> listener){\n  PilotService.sendVerificationToken(listener);\n}\n"}
{"nl": "Limit the results of the query to certain categories", "code": "public void addCategoryLimitations(boolean include,String... categoryVelocityVarNames){\n  query.append(\" \" + (include ? \"+\" : \"-\") + \"(\");\n  for (  String categoryVelocityVarName : categoryVelocityVarNames) {\n    query.append(\"categories:\" + escapeValue(categoryVelocityVarName) + \" \");\n  }\n  query.append(\")\");\n}\n"}
{"nl": "Set offset", "code": "public PhotosGetQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n"}
{"nl": "static factory method", "code": "public static SuperPrefs newInstance(Context context){\n  return new SuperPrefs(context);\n}\n"}
{"nl": "Opens a text file and sets its contents as data string", "code": "public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {\n  String sDataString=utils.loadFileToStringWithNewlines(sFilename);\n  setDataString(sDataString);\n}\n"}
{"nl": "Infer alignment for each column", "code": "private static float alignmentProbability(Rectangle[] widget){\n  float[] start=new float[widget.length];\n  float[] center=new float[widget.length];\n  float[] end=new float[widget.length];\n  float widthSum=0;\n  int count=0;\n  for (int i=0; i < end.length; i++) {\n    if (widget[i] == null) {\n      start[i]=Float.NaN;\n      end[i]=Float.NaN;\n      center[i]=Float.NaN;\n      continue;\n    }\n    start[i]=widget[i].x;\n    end[i]=start[i] + widget[i].width;\n    center[i]=(start[i] + end[i]) / 2;\n    widthSum+=widget[i].width;\n    count++;\n  }\n  float startDiv=standardDeviation(start);\n  float centerDiv=standardDeviation(center);\n  float endDiv=standardDeviation(end);\n  if (count > 2) {\n    return 1 - Math.min(startDiv,Math.min(centerDiv,endDiv)) / (widthSum / count);\n  }\n  return 0;\n}\n"}
{"nl": "Apply the scaling factor to the component tree starting at <code>root</code>", "code": "public void scaleComponentTree(JComponent root){\n  if (myScaleFactor == 1.0f)   return;\n  if (DEBUG)   LOG.info(\"Scaling components from \\\"\" + myClazz.getSimpleName() + \"\\\"\");\n  scaleComponentTreeWorker(root);\n  if (DEBUG)   LOG.info(\"Done scaling components from \\\"\" + myClazz.getSimpleName() + \"\\\": \"+ myScaledValueCount+ \" values scaled\");\n  root.putClientProperty(SCALE_FACTOR_KEY,new Float(myScaleFactor));\n}\n"}
{"nl": "This method to be implemented by the extending class", "code": "public RepositoryChanged updateExistingRepository(String repoName,String repoRemoteLocation,String repoUserName,String repoPassword,String repoLocations,String repoBranch,boolean useCredentials){\n  return null;\n}\n"}
{"nl": "Resumes audio output", "code": "public synchronized void resume(){\n}\n"}
{"nl": "remove recent file listener", "code": "public static void removePropertiesListListener(PropertiesListListener listener){\nsynchronized (propertieslistListeners) {\n    propertieslistListeners.remove(listener);\n  }\n}\n"}
{"nl": "recursively move all reads that land on taxa with too little support or on a disabled taxon to higher level nodes", "code": "private int computeOrphan2AncestorMappingRec(Node v,Map<Integer,Integer> orphan2AncestorMapping,Set<Integer> orphans) throws CanceledException {\n  if (progress != null)   progress.incrementProgress();\n  int taxId=(Integer)v.getInfo();\n  if (taxId < 0)   return 0;\n  int below=0;\n  Set<Integer> orphansBelow=new HashSet<>();\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    Node w=e.getTarget();\n    below+=computeOrphan2AncestorMappingRec(w,orphan2AncestorMapping,orphansBelow);\n  }\n  Integer count=id2count.get(taxId);\n  if (count == null)   count=0;\n  if (below + count >= minSupport && !idMapper.isDisabled(taxId)) {\n    for (    Integer id : orphansBelow) {\n      orphan2AncestorMapping.put(id,taxId);\n    }\n  }\n else {\n    if (count > 0) {\n      orphansBelow.add(taxId);\n    }\n    orphans.addAll(orphansBelow);\n  }\n  return below + count;\n}\n"}
{"nl": "Resolve all non-framework themes available from module of passed Configuration", "code": "@NotNull private List<StyleResourceValue> resolveNonFrameworkThemes(){\n  LocalResourceRepository repository=AppResourceRepository.getAppResources(myConfiguration.getModule(),true);\n  if (repository == null) {\n    return Collections.emptyList();\n  }\n  return getThemes(repository.getConfiguredResources(ResourceType.STYLE,myConfiguration.getFullConfig()),false);\n}\n"}
{"nl": "Construct a CSV migrator", "code": "public CSVMigrator(Loader loader){\n  this.loader=loader;\n  loader.setBatchSize(1);\n}\n"}
{"nl": "%0 Whispers:", "code": "public static SM_SYSTEM_MESSAGE STR_CMD_WHISHPER_OUTPUT_NPC(String value0){\n  return new SM_SYSTEM_MESSAGE(1400007,value0);\n}\n"}
{"nl": "Creates a new instance of ColorIcon", "code": "public ColorIcon(){\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.GOODALL);\n}\n"}
{"nl": "Bind all the annotated elements to a given activity", "code": "public void bind(Activity activity){\n  List<IBinding> bindings=getViewBinder(activity).bind(activity);\n  for (  IBinding binding : bindings) {\n    Topping topping=getOrCreateTopping(binding.getToppingId());\n    autoUpdateBinding(binding,topping);\n  }\n  Set<IBinding> _bindings=getBindings(activity.getClass());\n  _bindings.addAll(bindings);\n}\n"}
{"nl": "Read an object from HDFS (or local) using default Java object serialization", "code": "public static <T>T readObjectFromFile(String path,Class<T> type,SparkContext sc) throws IOException {\n  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());\n  try (ObjectInputStream ois=new ObjectInputStream(new BufferedInputStream(fileSystem.open(new Path(path))))){\n    Object o;\n    try {\n      o=ois.readObject();\n    }\n catch (    ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n    return (T)o;\n  }\n }\n"}
{"nl": "Merges the attributes of the specified property into this one", "code": "public Builder merge(final Property property){\n  if (property.getter != null) {\n    getter=property.getter;\n    getterMethod=null;\n  }\n  if (property.setter != null) {\n    setter=property.setter;\n    setterMethod=null;\n  }\n  if (elementType == null || (property.elementType != null && elementType.isAssignableFrom(property.elementType))) {\n    elementType=property.elementType;\n  }\n  if (propertyType == null || (property.type != null && propertyType.isAssignableFrom(property.type))) {\n    propertyType=property.type;\n  }\n  name=property.name;\n  return this;\n}\n"}
{"nl": "Build a new cart with the given node as the root node", "code": "public CART(Node rootNode,FeatureDefinition featDef,Properties properties){\n  super(rootNode,featDef,properties);\n}\n"}
{"nl": "Create and parse allowable options", "code": "public QuerierCLI(String[] args){\n  cliOptions=createOptions();\n  try {\n    CommandLineParser parser=new GnuParser();\n    commandLine=parser.parse(cliOptions,args,true);\n    if (hasOption(\"h\")) {\n      printHelp();\n      System.exit(1);\n    }\n    if (!parseOptions()) {\n      logger.info(\"The provided options are not valid\");\n      printHelp();\n      System.exit(1);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    System.exit(1);\n  }\n}\n"}
{"nl": "Checks if specified option is enabled", "code": "private boolean isOptionEnabled(UrlFilterRuleOption option){\n  loadRuleProperties();\n  return enabledOptions != null && enabledOptions.contains(option);\n}\n"}
{"nl": "Create an <code>unsigned long</code>", "code": "public static ULong valueOf(String value) throws NumberFormatException {\n  return new ULong(value);\n}\n"}
{"nl": "Processes single package going from client to server roData is created by allocate and had to have array", "code": "public static ByteBuffer processOutboundPackage(ByteBuffer roData,int exchangeId,boolean connectionOk){\n  roData.rewind();\n  if (BuildConfig.DEBUG) {\n    XposedBridge.log(\"Processing outbound package of size \" + Integer.toString(roData.remaining()));\n  }\n  try {\nsynchronized (sync) {\n    }\n  }\n catch (  Throwable e) {\n    XposedBridge.log(e);\n  }\n  return null;\n}\n"}
{"nl": "Calculates PARRY chance", "code": "public static boolean calculatePhysicalParryRate(Creature attacker,Creature attacked){\n  if (attacked.getObserveController().checkAttackStatus(AttackStatus.PARRY)) {\n    return true;\n  }\n  float accuracy=attacker.getGameStats().getMainHandPAccuracy().getCurrent();\n  float parry=0;\n  if (attacked instanceof Player) {\n    parry=attacked.getGameStats().getParry().getBonus() + getMovementModifier(attacked,StatEnum.PARRY,attacked.getGameStats().getParry().getBase()) + attacked.getGameStats().getStat(StatEnum.PVP_PARRY,0).getCurrent();\n  }\n else {\n    parry=attacked.getGameStats().getParry().getBonus() + getMovementModifier(attacked,StatEnum.PARRY,attacked.getGameStats().getParry().getBase());\n  }\n  float parryRate=parry - accuracy;\n  return calculatePhysicalEvasion(parryRate,400);\n}\n"}
{"nl": "Convert a static instance into a dynamic one", "code": "private FlatServoRail expand(){\n  if (isDynamic())   return this;\n  FlatServoRail ret=new FlatServoRail();\n  ret.component=this.component;\n  ret.color=this.color;\n  return ret;\n}\n"}
{"nl": "Deletes Data Base", "code": "public static void deleteDB(){\n  init(context);\n  Inquiry.get().dropTable(Constants.DATABASE_NAME);\n  Inquiry.deinit();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetBannedQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.getBanned\",GetBannedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "Fill data on Live copy view", "code": "public CreateSiteWindow fillLiveCopy(String siteOwner,boolean liveCopy,List<String> rollOutConfigs){\n  ownerDropDown.selectByText(siteOwner);\n  WebElement checkBox=currentWindow.findElement(By.name(\"isLiveCopy\"));\n  if (!liveCopy) {\n    checkBox.click();\n  }\n  for (  String config : rollOutConfigs) {\n    currentWindow.findElement(By.xpath(\"//span[text()='Add Item']\")).click();\n    List<WebElement> inputs=currentWindow.findElements(By.xpath(\"//img[@src='/libs/cq/ui/resources/0.gif']\"));\n    inputs.get(inputs.size() - 1).click();\n    List<WebElement> options=currentWindow.findElements(By.xpath(\"//div[text()='\" + config + \"']\"));\n    options.stream().filter(null).forEach(null);\n  }\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetByIdQuery(VkApiClient client,Actor actor,List<Integer> messageIds){\n  super(client,\"messages.getById\",GetByIdResponse.class);\n  accessToken(actor.getAccessToken());\n  messageIds(messageIds);\n}\n"}
{"nl": "Set using the best available ball", "code": "public AsyncCatchOptions useBestBall(boolean useBestPokeball){\n  this.useBestPokeball=useBestPokeball;\n  return this;\n}\n"}
{"nl": "draw the x axis", "code": "protected void drawXAxis(Graphics2D gc){\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));\n  int x=5;\n  int y=getHeight() - bottomMargin + 25;\n  if (isTranspose())   gc.drawString(getChartData().getClassesLabel(),x,y);\n else {\n    String prefix=null;\n    final Document doc=getViewer().getDir().getDocument();\n    final boolean hasGroups=doc.getSampleAttributeTable().hasGroups();\n    for (    String sample : doc.getSampleAttributeTable().getSampleOrder()) {\n      String groupId=hasGroups ? doc.getSampleAttributeTable().getGroupId(sample) : \"all\";\n      if (groupId != null) {\n        int pos=groupId.indexOf('=');\n        if (pos > 0) {\n          if (prefix == null)           prefix=groupId.substring(0,pos);\n else           if (!prefix.equals(groupId.substring(0,pos))) {\n            prefix=null;\n            break;\n          }\n        }\n      }\n    }\n    gc.drawString(prefix != null ? prefix : \"Grouped\",x,y);\n  }\n}\n"}
{"nl": "Show untrusted cert dialog", "code": "public void showUntrustedCertDialog(RemoteOperationResult result){\n  FragmentManager fm=getSupportFragmentManager();\n  SslUntrustedCertDialog dialog=(SslUntrustedCertDialog)fm.findFragmentByTag(DIALOG_UNTRUSTED_CERT);\n  if (dialog == null) {\n    dialog=SslUntrustedCertDialog.newInstanceForFullSslError((CertificateCombinedException)result.getException());\n    FragmentTransaction ft=fm.beginTransaction();\n    dialog.show(ft,DIALOG_UNTRUSTED_CERT);\n  }\n}\n"}
{"nl": "Constructs new <tt>SM_SYSTEM_MESSAGE </tt> packet", "code": "public SM_SYSTEM_MESSAGE(int code,Object... params){\n  this.code=code;\n  this.params=params;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosPutTagQuery(VkApiClient client,UserActor actor,int photoId,int userId){\n  super(client,\"photos.putTag\",Integer.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n  userId(userId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AuthSignupQuery(VkApiClient client,UserActor actor,String firstName,String lastName,int clientId,String clientSecret,String phone){\n  super(client,\"auth.signup\",SignupResponse.class);\n  accessToken(actor.getAccessToken());\n  firstName(firstName);\n  lastName(lastName);\n  clientId(clientId);\n  clientSecret(clientSecret);\n  phone(phone);\n}\n"}
{"nl": "Search orders", "code": "@Override public List<Order> searchOrder(OrderReqDto reqDto){\n  return sessionTemplate.selectList(NAMESPACE + \".searchOrder\",reqDto);\n}\n"}
{"nl": "Measure view with margins and specs", "code": "private void measureChildWithDecorationsAndMargin(View child,int widthSpec,int heightSpec){\n  Rect decorRect=new Rect();\n  calculateItemDecorationsForChild(child,decorRect);\n  RecyclerView.LayoutParams lp=(RecyclerView.LayoutParams)child.getLayoutParams();\n  widthSpec=updateSpecWithExtra(widthSpec,lp.leftMargin + decorRect.left,lp.rightMargin + decorRect.right);\n  heightSpec=updateSpecWithExtra(heightSpec,lp.topMargin + decorRect.top,lp.bottomMargin + decorRect.bottom);\n  child.measure(widthSpec,heightSpec);\n}\n"}
{"nl": "Dumps the sample:", "code": "public void dump(){\n  System.out.println(\" FD Count: \" + getFrameData().length);\n  for (int i=0; i < getFrameData().length; i++) {\n    System.out.print(\" \" + getFrameData(i));\n  }\n  System.out.println();\n  System.out.println(\" RD Count: \" + getResidualSize());\n  for (int i=0; i < getResidualData().length; i++) {\n    System.out.print(\" \" + getResidualData(i));\n  }\n  System.out.println();\n}\n"}
{"nl": "This will discard all undoable edits", "code": "public void clearUndos(){\n  undo.discardAllEdits();\n}\n"}
{"nl": "Set user id", "code": "public SecureGetSMSHistoryQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "move to next group-value", "code": "public void nextGroup() throws SAException {\n  _curValueListHolder=null;\n  if (_curValueList != null) {\n    _curValueList.releaseScan();\n    _curValueList=null;\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() != null && getViewer() instanceof megan.remote.RemoteServiceBrowser && ((megan.remote.RemoteServiceBrowser)getViewer()).isServiceSelected();\n}\n"}
{"nl": "Check if matrices are multiplication compatible", "code": "public static void checkMultiplicationCompatible(final AnyMatrix left,final AnyMatrix right) throws MathIllegalArgumentException {\n  if (left.getColumnDimension() != right.getRowDimension()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,left.getColumnDimension(),right.getRowDimension());\n  }\n}\n"}
{"nl": "convert from external to wrapper data type", "code": "public static DataType fromExternalToWrapperDataType(org.apache.carbondata.format.DataType dataType){\n  if (null == dataType) {\n    return null;\n  }\nswitch (dataType) {\ncase STRING:\n    return DataType.STRING;\ncase INT:\n  return DataType.INT;\ncase LONG:\nreturn DataType.LONG;\ncase DOUBLE:\nreturn DataType.DOUBLE;\ncase DECIMAL:\nreturn DataType.DECIMAL;\ncase TIMESTAMP:\nreturn DataType.TIMESTAMP;\ncase ARRAY:\nreturn DataType.ARRAY;\ncase STRUCT:\nreturn DataType.STRUCT;\ndefault :\nreturn DataType.STRING;\n}\n}\n"}
{"nl": "Returns true if the given class file data represents a valid class", "code": "public static boolean isValidClassFile(@NotNull byte[] classData){\n  return classData.length >= 7 && getMagic(classData) == 0xCAFEBABE;\n}\n"}
{"nl": "Creates a new instance of INSECTDocumentGraph", "code": "public DocumentNGramGaussNormSymWinGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  CorrelationWindow=iCorrelationWindow;\n  InitGraphs();\n}\n"}
{"nl": "Writes the Cart to the given DataOut in Wagon Format", "code": "private void toWagonFormat(FeatureVectorLeafNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {\n  StringBuilder sb=new StringBuilder();\n  FeatureVector fv[]=node.getFeatureVectors();\n  sb.append(\"(((\");\n  for (int i=0; i < fv.length; i++) {\n    sb.append(\"(\" + fv[i].getUnitIndex() + \" 0)\");\n    if (i + 1 != fv.length) {\n      sb.append(\" \");\n    }\n  }\n  sb.append(\") 0))\" + extension);\n  if (out != null) {\n    writeStringToOutput(sb.toString(),out);\n  }\n else {\n  }\n  if (pw != null) {\n    pw.println(sb.toString());\n  }\n}\n"}
{"nl": "Change space state to UNHEALTHY, so it is redeployed", "code": "protected void moveToUnusable(){\n  try {\n    _space.stopInternal();\n  }\n catch (  SpaceAlreadyStoppedException e) {\n  }\ncatch (  RemoteException e) {\n  }\n}\n"}
{"nl": "Set device id", "code": "public AccountUnregisterDeviceQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoReportQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){\n  super(client,\"video.report\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  videoId(videoId);\n}\n"}
{"nl": "Users listed as friends: %num0 users", "code": "public static SM_SYSTEM_MESSAGE STR_CURRENT_INCLUDES(int num0){\n  return new SM_SYSTEM_MESSAGE(1300639,num0);\n}\n"}
{"nl": "add the matchblocks to the readblock", "code": "public void addMatchBlocks(SortedSet<IMatchBlock> matchBlocks){\n  setMatchBlocks(matchBlocks.toArray(new IMatchBlock[matchBlocks.size()]));\n}\n"}
{"nl": "Is called when screen capturing task was started", "code": "@Override public void onCaptureStarted(){\n}\n"}
{"nl": "Create a new executor <code>ScriptingExecutor</code> proxy", "code": "public ScriptingExecutor<T> scriptingExecutor(){\n  return remotingConfigurer.proxy();\n}\n"}
{"nl": "To find next NonZero index", "code": "private int findNextIndexNonZero(double[] contour,int current){\n  for (int i=current + 1; i < contour.length; i++) {\n    if (contour[i] != 0) {\n      return i;\n    }\n  }\n  return -1;\n}\n"}
{"nl": "Called when view is detached", "code": "protected void onViewDetached(){\n}\n"}
{"nl": "attempt to parse the weight from the info line of a read", "code": "public static int parseMagnitude(String aLine){\n  if (aLine != null) {\n    if (underScoreEnabled) {\n      if (!warned) {\n        System.err.println(\"Using underscore parsing of magnitudes - only use with CREST\");\n        warned=true;\n      }\n      String firstWord=Basic.getFirstWord(aLine);\n      int pos=firstWord.lastIndexOf('_');\n      if (Basic.isInteger(firstWord.substring(pos + 1)))       return Math.max(1,Integer.parseInt(firstWord.substring(pos + 1)));\n    }\n    if (enabled) {\n      int pos=aLine.indexOf(MAGNITUDE_TAG);\n      int next=pos + MAGNITUDE_TAG.length();\n      if (pos == -1) {\n        pos=aLine.indexOf(WEIGHT_TAG);\n        next=pos + WEIGHT_TAG.length();\n      }\n      if (pos >= 0 && next < aLine.length() && (aLine.charAt(next) == '|' || aLine.charAt(next) == '=')) {\n        int end=next + 1;\n        while (end < aLine.length() && Character.isDigit(aLine.charAt(end)))         end++;\n        String number=aLine.substring(next + 1,end);\n        if (Basic.isInteger(number))         return Math.max(1,Basic.parseInt(number));\n      }\n    }\n  }\n  return 1;\n}\n"}
{"nl": "Converts this descriptor to a Class instance, loading from codebase", "code": "public Class toClass(String codebase) throws IOException, ClassNotFoundException {\n  if (name.charAt(0) != ';') {\n    return ClassLoading.loadClass(codebase,name,null,integrity,null);\n  }\n  StringTokenizer st=new StringTokenizer(name,\";\");\n  String[] ifs=new String[st.countTokens()];\n  for (int i=0; i < ifs.length; i++) {\n    ifs[i]=st.nextToken();\n  }\n  return ClassLoading.loadProxyClass(codebase,ifs,null,integrity,null);\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-667.24856187,-65.6230835029,-25.4830299460,-12.0588781808,-5.26313542807,669.64856187,68.0230835029,27.8830299460,14.4588781808,7.66313542807};\n}\n"}
{"nl": "Displays of the playing field", "code": "static void printField(){\n  for (int y=0; y <= field_size; y++) {\n    System.out.print(y);\n  }\n  System.out.println();\n  for (int y=0; y < field_size; y++) {\n    System.out.print(y + 1);\n    for (int x=0; x < field_size; x++) {\n      System.out.print(field[x][y]);\n    }\n    System.out.println();\n  }\n}\n"}
{"nl": "Calculates MAGICAL CRITICAL chance", "code": "public static boolean calculateMagicalCriticalRate(Creature attacker,Creature attacked,int criticalProb){\n  if (attacker instanceof Servant || attacker instanceof Homing) {\n    return false;\n  }\n  int critical=attacker.getGameStats().getMCritical().getCurrent();\n  if (attacked instanceof Player) {\n    critical=attacked.getGameStats().getPositiveReverseStat(StatEnum.MAGICAL_CRITICAL_RESIST,critical) + attacked.getGameStats().getPositiveReverseStat(StatEnum.PVP_MAGICAL_RESIST,critical);\n  }\n else {\n    critical=attacked.getGameStats().getPositiveReverseStat(StatEnum.MAGICAL_CRITICAL_RESIST,critical);\n  }\n  critical*=(float)criticalProb / 100f;\n  double criticalRate;\n  if (critical <= 440) {\n    criticalRate=critical * 0.1f;\n  }\n else   if (critical <= 600) {\n    criticalRate=(440 * 0.1f) + ((critical - 440) * 0.05f);\n  }\n else {\n    criticalRate=(440 * 0.1f) + (160 * 0.05f) + ((critical - 600) * 0.02f);\n  }\n  return Rnd.nextInt(100) < criticalRate;\n}\n"}
{"nl": "Creates a project and open it", "code": "private void createAndOpenProject(IProject project,IProjectDescription desc,IProgressMonitor monitor) throws SVNException {\n  try {\n    monitor.beginTask(null,5);\n    if (project.exists()) {\n      if (desc != null) {\n        project.move(desc,true,Policy.subMonitorFor(monitor,3));\n      }\n    }\n else {\n      if (desc == null) {\n        project.create(Policy.subMonitorFor(monitor,3));\n      }\n else {\n        project.create(desc,Policy.subMonitorFor(monitor,3));\n      }\n    }\n    if (!project.isOpen()) {\n      project.open(Policy.subMonitorFor(monitor,2));\n    }\n  }\n catch (  CoreException e) {\n    throw SVNException.wrapException(e);\n  }\n finally {\n    monitor.done();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetCountriesByIdQuery(VkApiClient client){\n  super(client,\"database.getCountriesById\",Utils.buildParametrizedType(List.class,Country.class));\n}\n"}
{"nl": "release texture", "code": "public void release(GL10 gl){\n  if (textureId[0] != -1) {\n    gl.glDeleteTextures(1,textureId,0);\n    textureId[0]=-1;\n  }\n}\n"}
{"nl": "Removes all items from the cache and fills it with the initial cache", "code": "public void fillInitialCache(){\n  removeAll();\n  Map<String,T> initialCache=itemHandler.getInitialCache();\n  for (  Entry<String,T> entry : initialCache.entrySet()) {\n    put(entry.getKey(),entry.getValue());\n  }\n}\n"}
{"nl": "Tests setting a non-framework parent", "code": "public void testNonFrameworkParent(){\n  doTestForParentApi(\"MyStyle\",\"apiParentTestAfter1\");\n}\n"}
{"nl": "count the data, this may cause big issue if the data is huge", "code": "public static long count(Bson q,Class<? extends Bean> t){\n  String collection=MongoHelper.getCollection(t);\n  if (!X.isEmpty(collection)) {\n    return count(collection,q);\n  }\n  return 0;\n}\n"}
{"nl": "Returns true if any coordinate of this vector is NaN; false otherwise", "code": "public boolean isNaN(){\n  return Double.isNaN(x.getReal()) || Double.isNaN(y.getReal()) || Double.isNaN(z.getReal());\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  if (viewer != null) {\n    if (TaxonomyData.getName2IdMap().get(viewer.selectedTaxon) != 0) {\n      execute(\"show webpage taxon='\" + viewer.selectedTaxon + \"';\");\n    }\n  }\n}\n"}
{"nl": "Test importing simple module into even simpler project", "code": "public void testImportSimpleGradleProject() throws IOException, ConfigurationException {\n  VirtualFile moduleRoot=createGradleProjectToImport(dir,MODULE_NAME);\n  GradleModuleImporter.importModules(this,Collections.singletonMap(moduleRoot.getName(),moduleRoot),getProject(),null);\n  assertModuleImported(getProject(),MODULE_NAME,moduleRoot);\n}\n"}
{"nl": "Method to read in the data from elasticsearch, filter, and return a RDD of MapWritable data elements", "code": "@SuppressWarnings(\"unchecked\") public JavaRDD<MapWritable> readDataES() throws IOException, PIRException {\n  logger.info(\"Reading data \");\n  JavaRDD<MapWritable> jsonRDD;\n  Job job=Job.getInstance();\n  String jobName=\"pirSpark_ES_\" + esQuery + \"_\"+ System.currentTimeMillis();\n  job.setJobName(jobName);\n  job.getConfiguration().set(\"es.nodes\",SystemConfiguration.getProperty(\"es.nodes\"));\n  job.getConfiguration().set(\"es.port\",SystemConfiguration.getProperty(\"es.port\"));\n  job.getConfiguration().set(\"es.resource\",esResource);\n  job.getConfiguration().set(\"es.query\",esQuery);\n  jsonRDD=sc.newAPIHadoopRDD(job.getConfiguration(),EsInputFormat.class,Text.class,MapWritable.class).values().coalesce(numDataPartitions);\n  if (qSchema.getFilter() != null) {\n    return jsonRDD.filter(new FilterData(accum,bVars));\n  }\n else {\n    logger.info(\"qSchema.getFilter() is null\");\n    return jsonRDD;\n  }\n}\n"}
{"nl": "TODO: Javadoc", "code": "private static BigInteger wrap(final int i){\n  if (i == DatatypeConstants.FIELD_UNDEFINED) {\n    return null;\n  }\n  return BigInteger.valueOf(i);\n}\n"}
{"nl": "Waits for the resource to complete", "code": "public void joinResource() throws InterruptedException {\n  if (runObj != null) {\nsynchronized (complete) {\n      if (runObj != null)       complete.wait();\n    }\n  }\n}\n"}
{"nl": "Line Tag Adder", "code": "public static void addLineTag(soot.tagkit.Host host,polyglot.ast.Node node){\n  if (soot.options.Options.v().keep_line_number()) {\n    if (node.position() != null) {\n      host.addTag(new soot.tagkit.SourceLineNumberTag(node.position().line(),node.position().line()));\n    }\n  }\n}\n"}
{"nl": "materialise the query provided all variables are mapped", "code": "private QueryAnswers materialiseComplete(){\n  QueryAnswers insertAnswers=new QueryAnswers();\n  if (getAtoms().stream().filter(null).collect(Collectors.toSet()).size() < getVarSet().size())   throw new IllegalStateException(ErrorMessage.MATERIALIZATION_ERROR.getMessage(getMatchQuery().toString()));\n  if (!getMatchQuery().ask().execute()) {\n    InsertQuery insert=Graql.insert(getPattern().getVars()).withGraph(graph);\n    insert.stream().filter(null).forEach(null);\n  }\n  return insertAnswers;\n}\n"}
{"nl": "Create default styles", "code": "private static SyntaxStyles createInstance(){\n  SyntaxStyles syntaxstyles=new SyntaxStyles();\n  Properties styles=JarServiceProvider.readProperties(SyntaxStyles.class);\n  syntaxstyles.mergeStyles(styles);\n  return syntaxstyles;\n}\n"}
{"nl": "turn dp to px", "code": "private float dp2px(float dp){\n  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,getResources().getDisplayMetrics());\n}\n"}
{"nl": "Verify if <code>node</code> has an ancestor with name <code>ancestorName</code>", "code": "public static boolean hasAncestor(Node node,String ancestorName){\n  Node p=node;\n  while ((p=p.getParentNode()) != null) {\n    if (p.getNodeName().equals(ancestorName))     return true;\n  }\n  return false;\n}\n"}
{"nl": "Given start and end position, parses string value", "code": "protected int parseInt(String buffer,int start,int end) throws NumberFormatException {\n  int radix=10;\n  int result=0;\n  int digit=0;\n  int limit=-Integer.MAX_VALUE;\n  int multmin=limit / radix;\n  int i=start;\n  do {\n    digit=getDigit(buffer.charAt(i));\n    if (digit < 0)     throw new NumberFormatException(\"'\" + buffer + \"' has wrong format\");\n    if (result < multmin)     throw new NumberFormatException(\"'\" + buffer + \"' has wrong format\");\n    result*=radix;\n    if (result < limit + digit)     throw new NumberFormatException(\"'\" + buffer + \"' has wrong format\");\n    result-=digit;\n  }\n while (++i < end);\n  return -result;\n}\n"}
{"nl": "End user requests that a well-known 3rd party web application does something useful on its behalf", "code": "public String requestServiceFromThirdPartyWebApp() throws Exception {\n  String url=ConsumerWebAppURL + \"?scope=\" + OAuthUtils.encodeForOAuth(EndUserResourceURL);\n  WebTarget target=ClientBuilder.newClient().target(url);\n  Invocation.Builder builder=target.request();\n  Response response=null;\n  try {\n    response=builder.get();\n    if (302 != response.getStatus()) {\n      throw new RuntimeException(\"Service request has failed - redirection is expected\");\n    }\n    String authorizationURI=response.getStringHeaders().getFirst(\"Location\");\n    if (authorizationURI == null) {\n      throw new RuntimeException(\"Token authorization URI is missing\");\n    }\n    return authorizationURI;\n  }\n  finally {\n    response.close();\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ChartViewer viewer=(ChartViewer)getViewer();\n  return (viewer.isSeriesTabSelected() && viewer.getChartSelection().getSelectedSeries().size() > 0) || (!viewer.isSeriesTabSelected() && viewer.getChartData() instanceof IChartData && viewer.getChartSelection().getSelectedClasses().size() > 0) || (viewer.getChartData() instanceof IChartData && viewer.getChartSelection().getSelectedAttributes().size() > 0);\n}\n"}
{"nl": "Set events limit", "code": "public MessagesGetLongPollHistoryQuery eventsLimit(Integer value){\n  return unsafeParam(\"events_limit\",value);\n}\n"}
{"nl": "Loads list of banned ips", "code": "public static void load(){\n  reload();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetUserPhotosQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getUserPhotos\",GetUserPhotosResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "this method change the message encrypt String to normal String using 64bits AES if decpytion fail then returnERROR_PACKET(-1)", "code": "public static String decrypt64bits(String encryptedData){\n  Key key;\n  Cipher c;\n  boolean ischeck=true;\n  byte[] decValue=null;\n  while (ischeck) {\n    key=generateKey64bits();\n    try {\n      c=Cipher.getInstance(Settings.ALGO);\n      c.init(Cipher.DECRYPT_MODE,key);\n      byte[] decordedValue=DatatypeConverter.parseBase64Binary(encryptedData);\n      decValue=c.doFinal(decordedValue);\n      String decryptedValue=new String(decValue);\n      return decryptedValue;\n    }\n catch (    NoSuchAlgorithmException|NoSuchPaddingException e) {\n      e.printStackTrace();\n    }\ncatch (    InvalidKeyException e) {\n      e.printStackTrace();\n    }\ncatch (    IllegalBlockSizeException e) {\n      ischeck=false;\n    }\ncatch (    BadPaddingException e) {\n      e.printStackTrace();\n    }\n  }\n  return \"/&\" + Settings._ERROR_PACKET + \"/&@\";\n}\n"}
{"nl": "get the ignore status", "code": "public boolean isIgnore(){\n  return false;\n}\n"}
{"nl": "Sort order", "code": "public VideoSearchQuery sort(VideoSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Displays an error message", "code": "private void error(String s){\n  System.out.println(\"ClusterUnitDatabase Error: \" + s);\n}\n"}
{"nl": "Adds a method to which the taint wrapping rules shall apply", "code": "public void addMethodForWrapping(String className,String subSignature){\n  Set<String> methods=this.classList.get(className);\n  if (methods == null) {\n    methods=new HashSet<String>();\n    this.classList.put(className,methods);\n  }\n  methods.add(subSignature);\n}\n"}
{"nl": "Update a pilot", "code": "public static void updatePilot(AirMapPilot pilot,@Nullable AirMapCallback<AirMapPilot> callback){\n  PilotService.updatePilot(pilot,callback);\n}\n"}
{"nl": "Utility function that checks if the component is a child of a view group that handles painting", "code": "private static boolean parentHandlingSelection(@NotNull NlComponent component){\n  NlComponent parent=component.getParent();\n  if (parent == null) {\n    return false;\n  }\n  ViewInfo view=parent.viewInfo;\n  if (view == null) {\n    return false;\n  }\n  ViewHandler handler=parent.getViewHandler();\n  if (handler != null && handler instanceof ViewGroupHandler) {\n    ViewGroupHandler viewGroupHandler=(ViewGroupHandler)handler;\n    if (viewGroupHandler.handlesPainting()) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Set upload by admins only", "code": "public PhotosEditAlbumQuery uploadByAdminsOnly(Boolean value){\n  return unsafeParam(\"upload_by_admins_only\",value);\n}\n"}
{"nl": "Load a rastered image from file", "code": "public int[][][] fromFileMultipleChannels(File file) throws IOException {\n  BufferedImage image=ImageIO.read(file);\n  image=scalingIfNeed(image,channels > 3);\n  int w=image.getWidth(), h=image.getHeight();\n  int bands=image.getSampleModel().getNumBands();\n  int[][][] ret=new int[channels][h][w];\n  byte[] pixels=((DataBufferByte)image.getRaster().getDataBuffer()).getData();\n  for (int i=0; i < h; i++) {\n    for (int j=0; j < w; j++) {\n      for (int k=0; k < channels; k++) {\n        if (k >= bands)         break;\n        ret[k][i][j]=pixels[channels * w * i + channels * j + k];\n      }\n    }\n  }\n  return ret;\n}\n"}
{"nl": "execute shell command", "code": "public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg,String path){\n  return execCommand(new String[]{command},isRoot,isNeedResultMsg,path);\n}\n"}
{"nl": "count visible nodes", "code": "private int countVisibleNodes(){\n  int count=0;\n  for (  NodeBase root : classification2RootNode.values()) {\n    Stack<NodeBase> stack=new Stack<>();\n    if (root != null) {\n      stack.push(root);\n      while (stack.size() > 0) {\n        NodeBase node=stack.pop();\n        if (dataTree.isVisible(new TreePath(node.getPath())))         count++;\n        for (int i=0; i < node.getChildCount(); i++) {\n          NodeBase child=(NodeBase)node.getChildAt(i);\n          stack.add(child);\n        }\n      }\n    }\n  }\n  return count;\n}\n"}
{"nl": "Convert an observable to the actual result, recovering the actual exception and throwing that", "code": "public static <T>T toBlocking(Observable<T> observable) throws LoginFailedException, RemoteServerException {\n  try {\n    return observable.toBlocking().first();\n  }\n catch (  RuntimeException e) {\n    if (e.getCause() instanceof AsyncLoginFailedException) {\n      throw new LoginFailedException(e.getMessage(),e.getCause());\n    }\n    if (e.getCause() instanceof AsyncRemoteServerException) {\n      throw new RemoteServerException(e.getMessage(),e.getCause());\n    }\n    throw new AsyncPokemonGoException(\"Unknown exception occurred. \",e);\n  }\n}\n"}
{"nl": "move to a new SL that represents a new group of same-values- used in fifo group scanning", "code": "public void nextGroup(){\n  release();\n}\n"}
{"nl": "Parse the attributes passed to the view from the XML", "code": "private void parseAttributes(TypedArray a){\n  DisplayMetrics metrics=getContext().getResources().getDisplayMetrics();\n  barWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,barWidth,metrics);\n  rimWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,rimWidth,metrics);\n  circleRadius=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,circleRadius,metrics);\n  circleRadius=(int)a.getDimension(R.styleable.ProgressWheel_matProg_circleRadius,circleRadius);\n  fillRadius=a.getBoolean(R.styleable.ProgressWheel_matProg_fillRadius,false);\n  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_matProg_barWidth,barWidth);\n  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_matProg_rimWidth,rimWidth);\n  float baseSpinSpeed=a.getFloat(R.styleable.ProgressWheel_matProg_spinSpeed,spinSpeed / 360.0f);\n  spinSpeed=baseSpinSpeed * 360;\n  barSpinCycleTime=a.getInt(R.styleable.ProgressWheel_matProg_barSpinCycleTime,(int)barSpinCycleTime);\n  barColor=a.getColor(R.styleable.ProgressWheel_matProg_barColor,barColor);\n  rimColor=a.getColor(R.styleable.ProgressWheel_matProg_rimColor,rimColor);\n  linearProgress=a.getBoolean(R.styleable.ProgressWheel_matProg_linearProgress,false);\n  if (a.getBoolean(R.styleable.ProgressWheel_matProg_progressIndeterminate,false)) {\n    spin();\n  }\n  a.recycle();\n}\n"}
{"nl": "Creates an application at top level", "code": "@Override public void createApplication(Application.Name applicationName){\n  final String CQL=\"insert into applicationList(app_name) values(?)\";\n  try {\n    getDriver().getKeyspace().prepareQuery(getKeyspace().applicationList_CF()).withCql(CQL).asPreparedStatement().withByteBufferValue(applicationName,ApplicationNameSerializer.get()).execute().getResult();\n  }\n catch (  Exception e) {\n    throw new RepositoryException(\"Unable to insert into top level application list: \\\"\" + applicationName.toString() + \"\\\"\"+ e);\n  }\n}\n"}
{"nl": "Calculate number of connection servers", "code": "public static int calculateConnectionServerCount(int vmcount){\n  Float f=(vmcount / (float)2000.00);\n  f=(float)Math.ceil(f);\n  if (f >= 5) {\n    f++;\n    f++;\n  }\n else {\n    f++;\n  }\n  final int i=f.intValue();\n  return i;\n}\n"}
{"nl": "compute vectors for  analysis", "code": "public static double[][] computeVectors(Document doc,ViewerBase graphView){\n  int numberOfDataSets=doc.getNumberOfSamples();\n  double[] total=new double[numberOfDataSets];\n  HashSet<Integer> seen=new HashSet<>();\n  LinkedList<double[]> rows=new LinkedList<>();\n  for (Node v=graphView.getGraph().getFirstNode(); v != null; v=v.getNext()) {\n    if (graphView.getSelected(v)) {\n      if (!seen.contains((Integer)v.getInfo())) {\n        seen.add((Integer)v.getInfo());\n        double[] row=new double[numberOfDataSets];\n        final int[] counts=(v.getOutDegree() == 0 ? graphView.getNodeData(v).getSummarized() : graphView.getNodeData(v).getAssigned());\n        for (int i=0; i < counts.length; i++) {\n          row[i]=counts[i];\n          total[i]+=row[i];\n        }\n        rows.add(row);\n      }\n    }\n  }\n  for (  double[] row : rows) {\n    for (int i=0; i < row.length; i++) {\n      if (total[i] > 0)       row[i]/=total[i];\n    }\n  }\n  return rows.toArray(new double[rows.size()][]);\n}\n"}
{"nl": "remove an element described by ObjectInfo", "code": "public void remove(IObjectInfo<T> poi){\n  remove_impl(poi,true);\n}\n"}
{"nl": "Set random id", "code": "public MessagesSendQuery randomId(Integer value){\n  return unsafeParam(\"random_id\",value);\n}\n"}
{"nl": "in bytecode and Jimple the conditions in conditional binary  expressions are often reversed", "code": "private soot.Value reverseCondition(soot.jimple.ConditionExpr cond){\n  soot.jimple.ConditionExpr newExpr;\n  if (cond instanceof soot.jimple.EqExpr) {\n    newExpr=soot.jimple.Jimple.v().newNeExpr(cond.getOp1(),cond.getOp2());\n  }\n else   if (cond instanceof soot.jimple.NeExpr) {\n    newExpr=soot.jimple.Jimple.v().newEqExpr(cond.getOp1(),cond.getOp2());\n  }\n else   if (cond instanceof soot.jimple.GtExpr) {\n    newExpr=soot.jimple.Jimple.v().newLeExpr(cond.getOp1(),cond.getOp2());\n  }\n else   if (cond instanceof soot.jimple.GeExpr) {\n    newExpr=soot.jimple.Jimple.v().newLtExpr(cond.getOp1(),cond.getOp2());\n  }\n else   if (cond instanceof soot.jimple.LtExpr) {\n    newExpr=soot.jimple.Jimple.v().newGeExpr(cond.getOp1(),cond.getOp2());\n  }\n else   if (cond instanceof soot.jimple.LeExpr) {\n    newExpr=soot.jimple.Jimple.v().newGtExpr(cond.getOp1(),cond.getOp2());\n  }\n else {\n    throw new RuntimeException(\"Unknown Condition Expr\");\n  }\n  newExpr.getOp1Box().addAllTagsOf(cond.getOp1Box());\n  newExpr.getOp2Box().addAllTagsOf(cond.getOp2Box());\n  return newExpr;\n}\n"}
{"nl": "Is updating?", "code": "public final boolean isUpdating(){\n  return (mUpdateHeader == getChildAt(0) && mUpdateHeader.getHeight() > 0);\n}\n"}
{"nl": "Delete a policy", "code": "public void deletePolicy(String policyName){\n  policies.remove(policyName);\n}\n"}
{"nl": "Note: A visibility annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public ParameterVisibilityAnnotationAttr(String kind,ArrayList vis_annotations){\n  attr=new AsciiCP(kind + \"Annotations\");\n  list=vis_annotations;\n}\n"}
{"nl": "Required for Externalizable", "code": "public GetEntryTypeDescriptorSpaceOperationRequest(){\n}\n"}
{"nl": "copy so lib to specify directory(/data/data/host_pack_name/pluginlib)", "code": "public void copyPluginSoLib(Context context,String dexPath,String nativeLibDir){\n  String cpuName=getCpuName();\n  String cpuArchitect=getCpuArch(cpuName);\n  sNativeLibDir=nativeLibDir;\n  Log.d(TAG,\"cpuArchitect: \" + cpuArchitect);\n  long start=System.currentTimeMillis();\n  try {\n    ZipFile zipFile=new ZipFile(dexPath);\n    Enumeration<? extends ZipEntry> entries=zipFile.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry zipEntry=(ZipEntry)entries.nextElement();\n      if (zipEntry.isDirectory()) {\n        continue;\n      }\n      String zipEntryName=zipEntry.getName();\n      if (zipEntryName.endsWith(\".so\") && zipEntryName.contains(cpuArchitect)) {\n        final long lastModify=zipEntry.getTime();\n        if (lastModify == DLConfigs.getSoLastModifiedTime(context,zipEntryName)) {\n          Log.d(TAG,\"skip copying, the so lib is exist and not change: \" + zipEntryName);\n          continue;\n        }\n        mSoExecutor.execute(new CopySoTask(context,zipFile,zipEntry,lastModify));\n      }\n    }\n    zipFile.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  long end=System.currentTimeMillis();\n  Log.d(TAG,\"### copy so time : \" + (end - start) + \" ms\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosSaveWallPhotoQuery(VkApiClient client,UserActor actor,String photo){\n  super(client,\"photos.saveWallPhoto\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photo(photo);\n}\n"}
{"nl": "Returns the string representation of the object", "code": "public String toString(){\n  return \"PauseGenerator\";\n}\n"}
{"nl": "No ordering", "code": "public boolean runAfter(List tasks,int size){\n  return false;\n}\n"}
{"nl": "Expands fieldset if collapsed based on fieldset name", "code": "public AemSidekick expandFieldsetIfCollapsed(String fieldsetName){\n  final WebElement fieldset=getFieldsetByName(fieldsetName);\n  bobcatWait.withTimeout(Timeouts.BIG).until(SidekickActions.expandFieldset(fieldset),Timeouts.SMALL);\n  return this;\n}\n"}
{"nl": "Resolve type casting expressions", "code": "private static void resolveUnaryExpression(UnaryExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){\n  PsiElement objOperation=objSubjectExpression.getOperation();\n  if (null == objOperation) {\n    return;\n  }\n  IElementType objType=objOperation.getNode().getElementType();\n  if (PhpTokenTypes.CAST_OPERATORS.contains(objType)) {\n    if (objType == PhpTokenTypes.opINTEGER_CAST) {\n      objTypesSet.add(Types.strInteger);\n    }\n else     if (objType == PhpTokenTypes.opARRAY_CAST) {\n      objTypesSet.add(Types.strArray);\n    }\n else     if (objType == PhpTokenTypes.opBOOLEAN_CAST) {\n      objTypesSet.add(Types.strBoolean);\n    }\n else     if (objType == PhpTokenTypes.opFLOAT_CAST) {\n      objTypesSet.add(Types.strFloat);\n    }\n else     if (objType == PhpTokenTypes.opSTRING_CAST) {\n      objTypesSet.add(Types.strString);\n    }\n    return;\n  }\n  storeAsTypeWithSignaturesImport(objSubjectExpression.getType().toString(),objScope,objIndex,objTypesSet);\n}\n"}
{"nl": "Adds field entry, equivalent of: | tab_name | field type | label | value |", "code": "public ComponentConfigBuilder add(String itemType,String label,String value){\n  config.add(new ConfigurationEntry(currentTab,itemType,label,value));\n  return this;\n}\n"}
{"nl": "Creates the default cumulative probability density test input values", "code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n"}
{"nl": "Request the controller to set the return route between two nodes", "code": "public void requestAssignReturnRoute(int nodeId,int destinationId){\n  enqueue(new AssignReturnRouteMessageClass().doRequest(nodeId,destinationId,getCallbackId()));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketRestoreCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"market.restoreComment\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n"}
{"nl": "Converts this object to its String representation", "code": "@Override public String toString(){\n  return \"TokenToWords\";\n}\n"}
{"nl": "Returns true if field clientAppkey is set (has been assigned a value) and false otherwise", "code": "public boolean isSetClientAppkey(){\n  return this.clientAppkey != null;\n}\n"}
{"nl": "warning log", "code": "public static void w(String msg){\n  if (LOG_ENABLE) {\n    Log.w(TAG,buildMsg(msg));\n  }\n}\n"}
{"nl": "Build a new empty cart", "code": "public CART(){\n}\n"}
{"nl": "Append CheckChallenge request to the given ServerRequest", "code": "public static ServerRequest[] appendCheckChallenge(ServerRequest request){\n  return new ServerRequest[]{request,new ServerRequest(RequestType.CHECK_CHALLENGE,CheckChallengeMessage.getDefaultInstance())};\n}\n"}
{"nl": "Randomly sample values from a single column", "code": "public static List<Writable> sampleFromColumn(int count,String columnName,Schema schema,JavaRDD<List<Writable>> data){\n  int colIdx=schema.getIndexOfColumn(columnName);\n  JavaRDD<Writable> ithColumn=data.map(new SelectColumnFunction(colIdx));\n  return ithColumn.takeSample(false,count);\n}\n"}
{"nl": "parse the file to string with the json", "code": "public String parse(File file,JSON m){\n  try {\n    Template template=getTemplate(file);\n    if (template != null) {\n      StringWriter w=new StringWriter();\n      BufferedWriter writer=new BufferedWriter(w);\n      template.merge(new VelocityContext(m),writer);\n      writer.flush();\n      writer.close();\n      return w.toString();\n    }\n  }\n catch (  Exception e) {\n    log.error(e.getMessage(),e);\n  }\n  return null;\n}\n"}
{"nl": "Check if this node supports a controllable command class", "code": "private boolean supportsControllableClass(ZWaveNode node){\n  for (  CommandClass commandClass : controllableClasses) {\n    if (node.supportsCommandClass(commandClass) == true) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "calculate distance", "code": "public double dist(double x,double y){\n  double distX=this.x - x;\n  double distY=this.y - y;\n  return Math.sqrt(distX * distX + distY * distY);\n}\n"}
{"nl": "Required for Externalizable", "code": "public SQLQueryTemplatePacket(){\n  throw new IllegalStateException(\"This constructor is required for Externalizable and should not be called directly.\");\n}\n"}
{"nl": "Writes out a source/sink specification object for Java static fields", "code": "private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){\n  Element parameter=document.createElement(\"parameter\");\n  parameter.appendChild(parentElement);\n  parameter.setAttribute(\"package\",spec.getPackageName());\n  parameter.setAttribute(\"class\",spec.getClassName());\n  parameter.setAttribute(\"field\",spec.getFieldName());\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ViewerBase viewer=(ViewerBase)getViewer();\n  return viewer.getGraph().getNumberOfNodes() > 0;\n}\n"}
{"nl": "Coordinates of current location: %WORLDNAME0 Region, X=%1 Y=%2 Z=%3", "code": "public static SM_SYSTEM_MESSAGE STR_CMD_LOCATION_DESC(int worldId,float x,float y,float z){\n  return new SM_SYSTEM_MESSAGE(230038,worldId,x,y,z);\n}\n"}
{"nl": "TODO: Move to SkillEngine Use skill stack SKILL_P_EQUIP_DUAL to check that instead", "code": "private boolean hasDualWieldingSkills(){\n  return owner.getSkillList().isSkillPresent(55) || owner.getSkillList().isSkillPresent(171) || owner.getSkillList().isSkillPresent(143)|| owner.getSkillList().isSkillPresent(144)|| owner.getSkillList().isSkillPresent(207);\n}\n"}
{"nl": "check patch signature, TINKER_ID and meta files", "code": "@Override public void onPatchPackageCheckFail(File patchFile,boolean isUpgradePatch,int errorCode){\n  TinkerLog.i(TAG,\"patchReporter: package check failed. path:%s, isUpgrade:%b, code:%d\",patchFile.getAbsolutePath(),isUpgradePatch,errorCode);\n  if (errorCode == ShareConstants.ERROR_PACKAGE_CHECK_DEX_META_CORRUPTED || errorCode == ShareConstants.ERROR_PACKAGE_CHECK_LIB_META_CORRUPTED || errorCode == ShareConstants.ERROR_PACKAGE_CHECK_RESOURCE_META_CORRUPTED) {\n    Tinker.with(context).cleanPatchByVersion(patchFile);\n  }\n}\n"}
{"nl": "Sets-up a new quantum", "code": "public Quantum(TimeUnit unit,int interval){\n  this.unit=unit;\n  this.interval=interval;\n}\n"}
{"nl": "initialize rec and proj", "code": "protected void init(AbstractTextEditor editor){\n  IJavaElement jElem=getJavaElement(editor);\n  setProj(jElem.getResource().getProject());\n  setRec(jElem.getResource());\n}\n"}
{"nl": "Select only 1 item based on chance attributes", "code": "private ExtractedItemsCollection selectItemByChance(Collection<ExtractedItemsCollection> itemsCollections){\n  float sumOfChances=calcSumOfChances(itemsCollections);\n  float currentSum=0f;\n  float rnd=(float)Rnd.get(0,(int)(sumOfChances - 1) * 1000) / 1000;\n  ExtractedItemsCollection selectedCollection=null;\n  for (  ExtractedItemsCollection collection : itemsCollections) {\n    currentSum+=collection.getChance();\n    if (rnd < currentSum) {\n      selectedCollection=collection;\n      break;\n    }\n  }\n  return selectedCollection;\n}\n"}
{"nl": "Removes a shared preference value from by received key", "code": "public static void removePreferenceKey(Context context,String key){\n  getSharedPreferences(context).edit().remove(key).commit();\n}\n"}
{"nl": "Call to update a dingle file already uploaded", "code": "public void uploadUpdate(Context context,Account account,OCFile existingFile,Integer behaviour,Boolean forceOverwrite){\n  uploadUpdate(context,account,new OCFile[]{existingFile},behaviour,forceOverwrite);\n}\n"}
{"nl": "Validate fix for ACT-1896", "code": "public void testQueryByActivityIdAndBusinessKeyWithChildren(){\n  ExecutionQuery query=runtimeService.createExecutionQuery().activityId(\"receivePayment\").processInstanceBusinessKey(\"BUSINESS-KEY-1\",true);\n  assertEquals(1,query.list().size());\n  assertEquals(1,query.count());\n  Execution execution=query.singleResult();\n  assertNotNull(execution);\n  assertEquals(\"receivePayment\",execution.getActivityId());\n}\n"}
{"nl": "Flush all data left in lame buffer to file", "code": "private void flushAndRelease(){\n  final int flushResult=SimpleLame.flush(mp3Buffer);\n  if (flushResult > 0) {\n    try {\n      os.write(mp3Buffer,0,flushResult);\n    }\n catch (    final IOException e) {\n      Log.e(TAG,\"Lame flush error\");\n    }\n  }\n}\n"}
{"nl": "broad title set", "code": "public SM_TITLE_INFO(Player player,int titleId){\n  this.action=3;\n  this.playerObjId=player.getObjectId();\n  this.titleId=titleId;\n}\n"}
{"nl": "Normalize by zero mean unit variance", "code": "public static JavaRDD<List<Writable>> zeromeanUnitVariance(Schema schema,JavaRDD<List<Writable>> data,List<String> skipColumns){\n  DataFrame frame=DataFrames.toDataFrame(schema,data);\n  return DataFrames.toRecords(zeromeanUnitVariance(frame,skipColumns)).getSecond();\n}\n"}
{"nl": "Creates a matrix with no data", "code": "public Array2DRowRealMatrix(){\n}\n"}
{"nl": "Create the TransformProcess object", "code": "public TransformProcess build(){\n  return new TransformProcess(this);\n}\n"}
{"nl": "Expands drop down menu related with action bar button", "code": "public SiteAdminActionBar expandDropDown(SiteAdminButtons button){\n  actions.moveToElement(getButton(button)).perform();\n  actions.moveByOffset(30,0).perform();\n  actions.click().perform();\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsEditQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"friends.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetByIdQuery(VkApiClient client,Actor actor){\n  super(client,\"groups.getById\",Utils.buildParametrizedType(List.class,GroupFull.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Create Action with defined type without any attached payload", "code": "public Action(String type){\n  this(type,new Object[0]);\n}\n"}
{"nl": "Appends a group to the end of this track", "code": "public void appendGroup(Group group) throws ObjectAlreadyHasException {\n  assertNotContains(group);\n  groups.add(group.getName());\n}\n"}
{"nl": "Set a custom minimum SDK version to use in the new project", "code": "NewProjectDescriptor withMinSdk(@NotNull String minSdk){\n  myMinSdk=minSdk;\n  return this;\n}\n"}
{"nl": "Create the service owned attributes for an Mahalo server", "code": "private static Entry[] attributesFor(){\n  final Entry info=new ServiceInfo(\"Transaction Manager\",\"Sun Microsystems, Inc.\",\"Sun Microsystems, Inc.\",com.sun.jini.constants.VersionConstants.SERVER_VERSION,\"\",\"\");\n  final Entry type=new com.sun.jini.lookup.entry.BasicServiceType(\"Transaction Manager\");\n  return new Entry[]{info,type};\n}\n"}
{"nl": "debug log", "code": "public static void d(String tag,String msg){\n  if (LOG_ENABLE && Log.isLoggable(tag,Log.DEBUG)) {\n    Log.d(tag,buildMsg(msg));\n  }\n}\n"}
{"nl": "Validate the configuration", "code": "public void validate(){\n  Preconditions.checkArgument(getBKClientReadTimeout() * 1000 > getReadLACLongPollTimeout(),\"Invalid timeout configuration : bkcReadTimeoutSeconds (\" + getBKClientReadTimeout() + \") should be longer than readLACLongPollTimeout (\"+ getReadLACLongPollTimeout()+ \")\");\n}\n"}
{"nl": "parses a Accession id", "code": "private static String parseRefSeqId(String aLine){\n  int pos=aLine.indexOf(IdParser.REFSEQ_TAG);\n  if (pos != -1) {\n    int start=pos + IdParser.REFSEQ_TAG.length();\n    int end=start;\n    while (end < aLine.length() && (Character.isLetterOrDigit(aLine.charAt(end)) || aLine.charAt(end) == '_'))     end++;\n    if (end > start)     return aLine.substring(start,end);\n  }\n  return null;\n}\n"}
{"nl": "Force the add", "code": "@CheckReturnValue public AddCmd force(){\n  return new AddCmd(true,all,files);\n}\n"}
{"nl": "Removes a command class from the endpoint", "code": "public void removeCommandClass(CommandClass commandClass){\n  if (supportedCommandClasses.containsKey(commandClass)) {\n    supportedCommandClasses.remove(commandClass);\n  }\n}\n"}
{"nl": "Create a ServiceLeaseManager", "code": "GSPingManager(){\n  super(\"GSPingManager:\" + spaceProxy.getClass().getName() + \":\"+ System.currentTimeMillis());\n  setDaemon(true);\n  start();\n}\n"}
{"nl": "creates soot exceptions from polyglot throws", "code": "private ArrayList<SootClass> createExceptions(polyglot.ast.ProcedureDecl procedure){\n  ArrayList<SootClass> exceptions=new ArrayList<SootClass>();\n  Iterator throwsIt=procedure.throwTypes().iterator();\n  while (throwsIt.hasNext()) {\n    polyglot.types.Type throwType=((polyglot.ast.TypeNode)throwsIt.next()).type();\n    exceptions.add(((soot.RefType)Util.getSootType(throwType)).getSootClass());\n  }\n  return exceptions;\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(PearsonDistance.PEARSON_DISTANCE);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetCampaignsQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getCampaigns\",Utils.buildParametrizedType(List.class,Campaign.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n"}
{"nl": "true, if given feature name contains similarity matrix", "code": "public boolean hasSimilarityMatrix(String featureName){\n  return hasSimilarityMatrix(this.getFeatureIndex(featureName));\n}\n"}
{"nl": "Builds the ControlLayersOptions new instance", "code": "public ControlLayersOptions build(){\n  ControlLayersOptions options=new ControlLayersOptions();\n  options.position=this.position;\n  options.collapsed=this.collapsed;\n  options.autoZIndex=this.autoZIndex;\n  return options;\n}\n"}
{"nl": "Tell the pocket crafting table to update the result", "code": "public void pokePocketCrafting(){\n}\n"}
{"nl": "make pangpang enemy missile", "code": "private void shoot_Missile(int dir){\n  DecimalFormat df=new DecimalFormat(\"#.##\");\n  if (rnd.nextInt(10) > 8) {\n    mnt.sendMessageInTheRoomPeople(Settings._ANSWER_PANGAPNG_ENEMY_ATTACK + \"\",df.format(this.position.x) + \"\",df.format(this.position.y) + \"\",dir + \"\",Settings.sPangPangEnemyName + Enemy_Missile_ID);\n    Enemy_Missile_ID++;\n  }\n}\n"}
{"nl": "Toggle Night Mode", "code": "@OnClick(R.id.fab) public void onClick(){\n  appbar.setExpanded(true,false);\n  SharedPreferences.Editor editor=sharedPreferences.edit();\nswitch (getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK) {\ncase Configuration.UI_MODE_NIGHT_YES:\n    editor.putBoolean(SHARED_PREF_DAY,true);\n  break;\ncase Configuration.UI_MODE_NIGHT_NO:\neditor.putBoolean(SHARED_PREF_DAY,false);\nbreak;\n}\neditor.apply();\nsetDayNightMode(sharedPreferences.getBoolean(SHARED_PREF_DAY,true));\ngetWindow().setWindowAnimations(R.style.WindowAnimationFadeInOut);\nrecreate();\n}\n"}
{"nl": "Wether or not to get a fresh copy or use cache;", "code": "private boolean useCache(){\n  return (api.currentTimeMillis() - lastMapUpdate) < api.getSettings().getMapSettings().getMinRefresh();\n}\n"}
{"nl": "Inner method for updating the all value fields from this <code>Tag</code> instance", "code": "private void doUpdateValues(final TagValueUpdate tagValueUpdate){\n  updateTagQuality(tagValueUpdate.getDataTagQuality());\n  alarms.clear();\n  alarms.addAll(tagValueUpdate.getAlarms());\n  description=tagValueUpdate.getDescription();\n  valueDescription=tagValueUpdate.getValueDescription();\n  serverTimestamp=tagValueUpdate.getServerTimestamp();\n  daqTimestamp=tagValueUpdate.getDaqTimestamp();\n  sourceTimestamp=tagValueUpdate.getSourceTimestamp();\n  tagValue=tagValueUpdate.getValue();\n  mode=tagValueUpdate.getMode();\n  simulated=tagValueUpdate.isSimulated();\n}\n"}
{"nl": "Build a suggest, pulling suggestions/payloads from stored fields, and weight from an expression", "code": "public void testFromStoredFieldsWithWeightExpression() throws Exception {\n  createAndStartIndex(\"storedsuggestexpr\");\n  send(\"registerFields\",\"{\" + \"fields: {text: {type: text, store: true, search: false},\" + \"negWeight: {type: float, sort: true},\"+ \"payload: {type: text, store: true, search: false}}}\");\n  send(\"addDocument\",\"{fields: {text: 'the cat meows', negWeight: -1, payload: 'payload1'}}\");\n  long indexGen=getLong(send(\"addDocument\",\"{fields: {text: 'the dog barks', negWeight: -2, payload: 'payload2'}}\"),\"indexGen\");\n  JSONObject result=send(\"buildSuggest\",\"{source: {searcher: {indexGen: \" + indexGen + \"}, suggestField: text, weightExpression: -negWeight, payloadField: payload}, class: 'AnalyzingSuggester', suggestName: 'suggest', analyzer: {tokenizer: Whitespace, tokenFilters: [LowerCase]}}\");\n  for (int i=0; i < 2; i++) {\n    result=send(\"suggestLookup\",\"{text: the, suggestName: suggest}\");\n    assertEquals(2,getInt(result,\"results[0].weight\"));\n    assertEquals(\"the dog barks\",get(result,\"results[0].key\"));\n    assertEquals(\"payload2\",get(result,\"results[0].payload\"));\n    assertEquals(1,getInt(result,\"results[1].weight\"));\n    assertEquals(\"the cat meows\",get(result,\"results[1].key\"));\n    assertEquals(\"payload1\",get(result,\"results[1].payload\"));\n    bounceServer();\n    send(\"startIndex\");\n  }\n}\n"}
{"nl": "limits the maximum scale and X translation of the given matrix", "code": "public void limitTransAndScale(Matrix matrix,RectF content){\n  matrix.getValues(matrixBuffer);\n  float curTransX=matrixBuffer[Matrix.MTRANS_X];\n  float curScaleX=matrixBuffer[Matrix.MSCALE_X];\n  float curTransY=matrixBuffer[Matrix.MTRANS_Y];\n  float curScaleY=matrixBuffer[Matrix.MSCALE_Y];\n  mScaleX=Math.min(Math.max(mMinScaleX,curScaleX),mMaxScaleX);\n  mScaleY=Math.min(Math.max(mMinScaleY,curScaleY),mMaxScaleY);\n  float width=0f;\n  float height=0f;\n  if (content != null) {\n    width=content.width();\n    height=content.height();\n  }\n  float maxTransX=-width * (mScaleX - 1f);\n  mTransX=Math.min(Math.max(curTransX,maxTransX - mTransOffsetX),mTransOffsetX);\n  float maxTransY=height * (mScaleY - 1f);\n  mTransY=Math.max(Math.min(curTransY,maxTransY + mTransOffsetY),-mTransOffsetY);\n  matrixBuffer[Matrix.MTRANS_X]=mTransX;\n  matrixBuffer[Matrix.MSCALE_X]=mScaleX;\n  matrixBuffer[Matrix.MTRANS_Y]=mTransY;\n  matrixBuffer[Matrix.MSCALE_Y]=mScaleY;\n  matrix.setValues(matrixBuffer);\n}\n"}
{"nl": "Is this object currently overriding the default Minecraft KeyBinding object?", "code": "@Override public boolean isOverriding(){\n  return (this.keyHook != null) ? this.keyHook.isOverridingPresses : false;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  getViewer().selectComponent(getViewer().getNJTab());\n}\n"}
{"nl": "extend a selection", "code": "public void extendSelection(int toRow,int toCol){\n  if (toRow != -1) {\n    if (toRow > totalRows)     toRow=totalRows;\n    if (toRow < firstRow)     firstRow=toRow;\n else     if (toRow >= lastRow)     lastRow=toRow;\n  }\n  if (toCol != -1) {\n    if (toCol > totalCols)     toCol=totalCols;\n    if (toCol < firstCol)     firstCol=toCol;\n else     if (toCol >= lastCol)     lastCol=toCol;\n  }\n  fireSelectionChanged();\n}\n"}
{"nl": "Current location accuracy in meters", "code": "public UsersGetNearbyQuery accuracy(Integer value){\n  return unsafeParam(\"accuracy\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsEditLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){\n  super(client,\"groups.editLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  linkId(linkId);\n}\n"}
{"nl": "is connected document readonly?", "code": "public boolean isReadOnly() throws IOException {\n  return file == null || !file.canWrite();\n}\n"}
{"nl": "Construct an empty list of DOMStringListImpl", "code": "public DOMStringListImpl(){\n  fStrings=new ArrayList();\n}\n"}
{"nl": "SCIPIO: Converts a timestamp  into a Date", "code": "public static java.util.Date toDate(Timestamp timestamp){\n  if (timestamp == null) {\n    return null;\n  }\n  long milliseconds=timestamp.getTime() + (timestamp.getNanos() / 1000000);\n  return new Date(milliseconds);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int writeValueAndType(boolean hasValue,int value,int node){\n  int offset=write(node);\n  if (hasValue) {\n    offset=writeValueAndFinal(value,false);\n  }\n  return offset;\n}\n"}
{"nl": "Create a new MediaWrapper", "code": "public MediaWrapper(Media media){\n  if (media == null)   throw new NullPointerException(\"media was null\");\n  mUri=media.getUri();\n  init(media);\n}\n"}
{"nl": "Clear all editor absolute positions", "code": "public static void clearEditorPosition(@NotNull AttributesTransaction attributes){\n  attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_EDITOR_ABSOLUTE_X,null);\n  attributes.setAttribute(SdkConstants.TOOLS_URI,SdkConstants.ATTR_LAYOUT_EDITOR_ABSOLUTE_Y,null);\n}\n"}
{"nl": "Checks if there are more record(s) to yield", "code": "public boolean hasNext(){\n  return false;\n}\n"}
{"nl": "delete file", "code": "public static void deleteFile(String path){\n  File file=new File(path);\n  file.deleteOnExit();\n}\n"}
{"nl": "show an information notation", "code": "public static void showInformation(Object parentIgnored,String message){\n  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,10000);\n}\n"}
{"nl": "Remove item from storage without changing its state", "code": "@Override public Item remove(Item item){\n  return itemStorage.removeItem(item.getObjectId());\n}\n"}
{"nl": "Create the workbench case", "code": "public CorpusTest(String testName){\n  super(testName);\n}\n"}
{"nl": "/ whether packageName is system application", "code": "public boolean isSystemApplication(Context context){\n  PackageManager packageManager=context.getPackageManager();\n  String packageName=context.getPackageName();\n  if (packageManager == null || packageName == null || packageName.length() == 0) {\n    return false;\n  }\n  try {\n    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);\n    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  return false;\n}\n"}
{"nl": "Draws a small button with the youtube logo on it", "code": "public static void drawButtonYoutube(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){\n  if (!visible)   return;\n  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);\n  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);\n  getTextureHandler().bindModTexture(\"textures/misc/youtube256.png\");\n  getGlStateManager().color(1.0F,1.0F,1.0F);\n  drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14);\n}\n"}
{"nl": "Sends an email warning about the disk getting full", "code": "public final void diskFull(final boolean alarmUp,final String directoryName){\n  if (alarmUp == FallbackAlarmsInterface.ACTIVATED) {\n    ArrayList recipients=new ArrayList();\n    MailDetailsBean mailDetails=new MailDetailsBean();\n    mailDetails.setSender(\"mruizgar@cern.ch\");\n    recipients.add(\"mruizgar@cern.ch\");\n    mailDetails.setToRecipients(recipients);\n    mailDetails.setSubject(\"Disk Full\");\n    mailDetails.setMessage(\"The disk \" + directoryName + \" is getting full\");\n    mailDetails.setServer(\"cernmx.cern.ch\");\n    SMTPMailSender mailSender=new SMTPMailSender();\n    try {\n      mailSender.sendMail(mailDetails);\n    }\n catch (    MailSenderException e) {\n      LOG.debug(e.getMessage());\n    }\n  }\n}\n"}
{"nl": "does this viewer currently have any URLs for selected nodes?", "code": "public boolean hasURLsForSelection(){\n  return false;\n}\n"}
{"nl": "Traverse &lt;any&gt;", "code": "XSParticleDecl traverseAny(Element elmNode,XSDocumentInfo schemaDoc,SchemaGrammar grammar){\n  Object[] attrValues=fAttrChecker.checkAttributes(elmNode,false,schemaDoc);\n  XSWildcardDecl wildcard=traverseWildcardDecl(elmNode,attrValues,schemaDoc,grammar);\n  XSParticleDecl particle=null;\n  if (wildcard != null) {\n    int min=((XInt)attrValues[XSAttributeChecker.ATTIDX_MINOCCURS]).intValue();\n    int max=((XInt)attrValues[XSAttributeChecker.ATTIDX_MAXOCCURS]).intValue();\n    if (max != 0) {\n      if (fSchemaHandler.fDeclPool != null) {\n        particle=fSchemaHandler.fDeclPool.getParticleDecl();\n      }\n else {\n        particle=new XSParticleDecl();\n      }\n      particle.fType=XSParticleDecl.PARTICLE_WILDCARD;\n      particle.fValue=wildcard;\n      particle.fMinOccurs=min;\n      particle.fMaxOccurs=max;\n      particle.fAnnotations=wildcard.fAnnotations;\n    }\n  }\n  fAttrChecker.returnAttrArray(attrValues,schemaDoc);\n  return particle;\n}\n"}
{"nl": "This library call the intent to take photo", "code": "public boolean takeFragmentPhoto(){\n  this.thePhotoName=\"MagicalCamera\";\n  this.anotherPhotoName=\"MagicalCamera\";\n  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  Uri FileUri=getPhotoFileUri(this.thePhotoName,this.anotherPhotoName,this.activity);\n  if (FileUri != null) {\n    intent.putExtra(MediaStore.EXTRA_OUTPUT,getPhotoFileUri(this.thePhotoName,this.anotherPhotoName,this.activity));\n    if (intent.resolveActivity(this.activity.getPackageManager()) != null) {\n      this.intentFragment=intent;\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "If rule is case sensitive returns true", "code": "public boolean isMatchCase(){\n  return isOptionEnabled(UrlFilterRuleOption.MATCH_CASE);\n}\n"}
{"nl": "Populate the cache based on the pre-generated exp table in hdfs", "code": "public static void loadCacheFromHDFS(FileSystem fs,String hdfsFileName,Query query) throws IOException {\n  logger.info(\"Loading cache from hdfsFileName = \" + hdfsFileName);\n  Path expPath=new Path(hdfsFileName);\n  try (BufferedReader br=new BufferedReader(new InputStreamReader(fs.open(expPath)))){\n    String line;\n    while ((line=br.readLine()) != null) {\n      String[] rowValTokens=line.split(\",\");\n      BigInteger base=query.getQueryElement(Integer.parseInt(rowValTokens[0]));\n      String[] expMod=rowValTokens[1].split(\"-\");\n      BigInteger exponent=new BigInteger(expMod[0]);\n      BigInteger value=new BigInteger(expMod[1]);\n      Tuple3<BigInteger,BigInteger,BigInteger> key=new Tuple3<>(base,exponent,query.getNSquared());\n      expCache.put(key,value);\n    }\n  }\n }\n"}
{"nl": "Create a flight for the user", "code": "public static void createFlight(AirMapFlight flight,final AirMapCallback<AirMapFlight> listener){\n  String url=flightBaseUrl + flight.getGeometryType().toString();\n  JSONObject params=flight.getAsParams();\n  AirMap.getClient().postWithJsonBody(url,params,new GenericOkHttpCallback(listener,AirMapFlight.class));\n}\n"}
{"nl": "Update the dynamic KeyManager and TrustManager with the client and server certs for the current request", "code": "private void createOrUpdateTargetSsl(CommandInput input){\n  if (input.getCredentials() == null) {\n    return;\n  }\n  if (!isSecure(input.getDockerUri())) {\n    return;\n  }\n  String clientKey=EncryptionUtils.decrypt(input.getCredentials().privateKey);\n  String clientCert=input.getCredentials().publicKey;\n  String alias=input.getDockerUri().toString().toLowerCase();\n  if (clientKey != null && !clientKey.isEmpty()) {\n    X509ExtendedKeyManager delegateKeyManager=(X509ExtendedKeyManager)CertificateUtil.getKeyManagers(alias,clientKey,clientCert)[0];\n    keyManager.putDelegate(alias,delegateKeyManager);\n  }\n  String sslTrust=(String)input.getProperties().get(SSL_TRUST_CERT_PROP_NAME);\n  if (sslTrust != null && trustManager != null) {\n    String trustAlias=(String)input.getProperties().get(SSL_TRUST_ALIAS_PROP_NAME);\n    trustManager.putDelegate(trustAlias,sslTrust);\n  }\n}\n"}
{"nl": "Adds +live to the query", "code": "public void addLive(boolean live){\n  query.append(\" +live:\" + live);\n}\n"}
{"nl": "The method is used for valid the space url before finding it from space", "code": "public static void validate(SpaceURL spaceURL) throws Exception {\n  if (_logger.isLoggable(Level.FINE)) {\n    _logger.fine(\"attributesSpaceUrl  =  \" + spaceURL);\n  }\n  try {\n    validateURL(spaceURL);\n  }\n catch (  SpaceURLValidationException e) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.fine(\"Exception while validating space URL: \" + e.getMessage() + \"\\nSpace URL: \"+ spaceURL);\n    }\n    throw e;\n  }\n}\n"}
{"nl": "report sequence in human-readable unpacked format", "code": "public static String toStringPacked(byte[] packed){\n  StringBuilder buf=new StringBuilder();\n  for (  byte a : packed)   buf.append(\" \").append(a & 0xFF);\n  return buf.toString();\n}\n"}
{"nl": "Converts gDay object representation to String", "code": "@Override protected String dateToString(DateTimeData date){\n  StringBuffer message=new StringBuffer(6);\n  message.append('-');\n  message.append('-');\n  message.append('-');\n  append(message,date.day,2);\n  append(message,(char)date.utc,0);\n  return message.toString();\n}\n"}
{"nl": "parse the response received during commonRequest", "code": "public static void parse(PokemonGo api,RequestType requestType,ByteString data){\n  try {\nswitch (requestType) {\ncase GET_INVENTORY:\n      api.getInventories().updateInventories(GetInventoryResponse.parseFrom(data));\n    break;\ncase DOWNLOAD_SETTINGS:\n  api.getSettings().updateSettings(DownloadSettingsResponse.parseFrom(data));\nbreak;\ndefault :\nbreak;\n}\n}\n catch (InvalidProtocolBufferException e) {\nthrow new AsyncRemoteServerException(e);\n}\n}\n"}
{"nl": "Set list id", "code": "protected NewsfeedDeleteListQuery listId(int value){\n  return unsafeParam(\"list_id\",value);\n}\n"}
{"nl": "Block with wait/notifyAll semantics", "code": "public static PhasedBackoffWaitStrategy withLock(long spinTimeout,long yieldTimeout,TimeUnit units){\n  return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new BlockingWaitStrategy());\n}\n"}
{"nl": "Resumes audio output", "code": "public synchronized void resume(){\n  if (isPaused()) {\n    setPaused(false);\n    if (!isCancelled() && line != null) {\n      line.start();\n      notify();\n    }\n  }\n}\n"}
{"nl": "draw text, around the middle of the cell decided by the index", "code": "private void drawText(Canvas canvas,int index,Paint paint,String text){\n  if (isIllegalIndex(index)) {\n    return;\n  }\n  int x=getXByIndex(index);\n  int y=getYByIndex(index);\n  float top=cellHeight + (y - 1) * cellHeight;\n  float bottom=top + cellHeight;\n  float baseline=RenderUtil.getBaseline(top,bottom,paint);\n  float startX=RenderUtil.getStartX(cellWidth * (x - 1) + cellWidth * 0.5f,paint,text);\n  canvas.drawText(text,startX,baseline,paint);\n}\n"}
{"nl": "Normalize the sequence by zero mean unit variance", "code": "public static JavaRDD<List<List<Writable>>> zeroMeanUnitVarianceSequence(Schema schema,JavaRDD<List<List<Writable>>> sequence){\n  return zeroMeanUnitVarianceSequence(schema,sequence,null);\n}\n"}
{"nl": "gets the next matches", "code": "@Override public int next(){\n  try {\n    if (pairedReads)     reader.skipBytes(8);\n    readText=reader.readString();\n    final int numberOfMatches=reader.readInt();\n    reader.skipBytes(numberOfMatches * cNames.length * 4);\n    matchesText=reader.readString().getBytes();\n    matchesTextLength=matchesText.length;\n    return numberOfMatches;\n  }\n catch (  IOException ex) {\n    Basic.caught(ex);\n    return -1;\n  }\n}\n"}
{"nl": "Create an AggregateConfig", "code": "public AggregateConfig(Configuration config,String[] configArgs,ClassLoader loader) throws ConfigurationException {\n  specific=ConfigurationProvider.getInstance(configArgs,loader);\n  common=config;\n}\n"}
{"nl": "Build the XML to a string", "code": "public String build(){\n  StringWriter writer=new StringWriter();\n  StreamResult result=new StreamResult(writer);\n  build(result);\n  return writer.toString();\n}\n"}
{"nl": "Fixing the backwards pointers when needed", "code": "private void fixList(Node<E> t,Node<E> h){\n  Node<E> curNodeNext;\n  Node<E> curNode=t;\n  while (h == this.head && curNode != h) {\n    curNodeNext=curNode.getNext();\n    curNodeNext.setPrev(curNode);\n    curNode=curNode.getNext();\n  }\n}\n"}
{"nl": "Remove the elements that contains account as a part of its key", "code": "public void remove(String accountName){\n  Iterator<String> it=mMap.keySet().iterator();\n  while (it.hasNext()) {\n    String key=it.next();\n    Log_OC.d(\"IndexedForest\",\"Number of pending downloads= \" + mMap.size());\n    if (key.startsWith(accountName)) {\n      mMap.remove(key);\n    }\n  }\n}\n"}
{"nl": "Convert this to JSON", "code": "public JsonObject toJson(){\n  JsonObject json=new JsonObject();\n  json.put(\"path\",path);\n  if (method != null) {\n    json.put(\"method\",method.name());\n  }\n  if (headers != null && !headers.isEmpty()) {\n    json.put(\"headers\",toJsonArray(headers));\n  }\n  if (params != null && !params.isEmpty()) {\n    json.put(\"params\",toJsonArray(params));\n  }\n  if (formAttributes != null && !formAttributes.isEmpty()) {\n    json.put(\"formAttributes\",toJsonArray(formAttributes));\n  }\n  return json;\n}\n"}
{"nl": "Subscribe to topic", "code": "public void subscribeTopic(String topicName){\n  if (PrefsHelper.hasFCMToken(mContext)) {\n    FirebaseMessaging.getInstance().subscribeToTopic(topicName);\n  }\n}\n"}
{"nl": "Add macro for player", "code": "public static void addMacro(Player player,int macroPosition,String macroXML){\n  if (player.getMacroList().addMacro(macroPosition,macroXML)) {\n    DAOManager.getDAO(PlayerMacrossesDAO.class).addMacro(player.getObjectId(),macroPosition,macroXML);\n  }\n else {\n    DAOManager.getDAO(PlayerMacrossesDAO.class).updateMacro(player.getObjectId(),macroPosition,macroXML);\n  }\n}\n"}
{"nl": "Set mark as ads", "code": "public WallPostQuery markAsAds(Boolean value){\n  return unsafeParam(\"mark_as_ads\",value);\n}\n"}
{"nl": "Return td * idf", "code": "public static double tfidf(double td,double idf){\n  return td * idf;\n}\n"}
{"nl": "Creates a new instance of NotificationAdapter", "code": "public NotificationAdapter(){\n}\n"}
{"nl": "Background *", "code": "private void drawBackground(Canvas canvas){\n  canvas.save();\n  float dragPercent=Math.min(1f,Math.abs(mPercent));\n  float backgroundScale;\n  float scalePercentDelta=dragPercent - SCALE_START_PERCENT;\n  if (scalePercentDelta > 0) {\n    float scalePercent=scalePercentDelta / (1.0f - SCALE_START_PERCENT);\n    backgroundScale=BACKGROUND_INITIAL_SCALE - (BACKGROUND_INITIAL_SCALE - 1.0f) * scalePercent;\n  }\n else {\n    backgroundScale=BACKGROUND_INITIAL_SCALE;\n  }\n  canvas.scale(backgroundScale,backgroundScale,canvas.getWidth() / 2f,mParent.getTotalDragDistance() / 2f);\n  mConfig.getBackgroundDrawable().setBounds(0,0,canvas.getWidth(),mParent.getTotalDragDistance());\n  mConfig.getBackgroundDrawable().draw(canvas);\n  canvas.restore();\n}\n"}
{"nl": "save object with a given name", "code": "@Override public void saveObject(Serializable oObj,String sObjectName,String sObjectCategory){\n  super.saveObject(oObj,sObjectName,sObjectCategory);\n  if (existsObject(sObjectCategory,ListCategoryName)) {\n    ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);\n    nlist.add(sObjectName);\n    super.saveObject(nlist,sObjectCategory,ListCategoryName);\n  }\n else {\n    ArrayList<String> nlist=new ArrayList<String>();\n    nlist.add(sObjectName);\n    super.saveObject(nlist,sObjectCategory,ListCategoryName);\n  }\n}\n"}
{"nl": "Method called before symbol loaded", "code": "public void preLoadSymbol(){\n  for (  String key : panelMap.keySet()) {\n    List<PopulateDetailsInterface> panelList=panelMap.get(key);\n    for (    PopulateDetailsInterface panel : panelList) {\n      panel.preLoadSymbol();\n    }\n  }\n}\n"}
{"nl": "Validation rules exclusive to relations", "code": "private void validateRelation(RelationImpl relation){\n  if (!ValidateGlobalRules.validateRelationshipStructure(relation)) {\n    String roles=\"\";\n    String rolePlayers=\"\";\n    for (    Map.Entry<RoleType,Instance> entry : relation.rolePlayers().entrySet()) {\n      if (entry.getKey() != null)       roles=roles + entry.getKey().getId() + \",\";\n      if (entry.getValue() != null)       rolePlayers=rolePlayers + entry.getValue().getId() + \",\";\n    }\n    errorsFound.add(ErrorMessage.VALIDATION_RELATION.getMessage(relation.getId(),relation.type().getId(),roles.split(\",\").length,roles,rolePlayers.split(\",\").length,roles));\n  }\n}\n"}
{"nl": "Provides Auth0 API access", "code": "@Bean public Auth0Client auth0Client(){\n  return new Auth0Client(clientId,issuer);\n}\n"}
{"nl": "Test for ACT-1686", "code": "@Deployment(resources={\"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml\"}) public void testUserMultipleTimesinvolvedWithProcessInstance(){\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"oneTaskProcess\");\n  runtimeService.addUserIdentityLink(processInstance.getId(),\"kermit\",\"type1\");\n  runtimeService.addUserIdentityLink(processInstance.getId(),\"kermit\",\"type2\");\n  assertEquals(1L,runtimeService.createProcessInstanceQuery().involvedUser(\"kermit\").count());\n}\n"}
{"nl": "Add keyboard actions to this control using the Configuration we have", "code": "public void addSyntaxActions(Keymap map,String prefix){\n  Pattern splitter=CONFIG.getValueSeparator(prefix);\n  Configuration actionsConf=CONFIG.subConfig(prefix,\"Action.\");\n  for (  String actionName : actionsConf.stringPropertyNames()) {\n    String[] values=splitter.split(actionsConf.getProperty(actionName));\n    String actionClass=values[0];\n    SyntaxAction action=editorActions.get(actionClass);\n    if (action == null) {\n      action=createAction(actionClass);\n      action.config(CONFIG,prefix,actionName);\n    }\n    String keyStrokeString=values[1];\n    KeyStroke ks=KeyStroke.getKeyStroke(keyStrokeString);\n    if (ks == null) {\n      throw new IllegalArgumentException(\"Invalid KeyStroke: \" + keyStrokeString);\n    }\n    TextAction ta=action.getAction(actionName);\n    if (ta == null) {\n      throw new IllegalArgumentException(\"Invalid ActionName: \" + actionName);\n    }\n    map.addActionForKeyStroke(ks,ta);\n  }\n}\n"}
{"nl": "Asserts the null hypothesis that the sample follows the given distribution, using a G-test", "code": "public static void assertGTest(final RealDistribution expectedDistribution,final double[] values,double alpha){\n  final int numBins=values.length / 30;\n  final double[] breaks=new double[numBins];\n  for (int b=0; b < breaks.length; b++) {\n    breaks[b]=expectedDistribution.inverseCumulativeProbability((double)b / numBins);\n  }\n  final long[] observed=new long[numBins];\n  for (  final double value : values) {\n    int b=0;\n    do {\n      b++;\n    }\n while (b < numBins && value >= breaks[b]);\n    observed[b - 1]++;\n  }\n  final double[] expected=new double[numBins];\n  Arrays.fill(expected,(double)values.length / numBins);\n  assertGTest(expected,observed,alpha);\n}\n"}
{"nl": "net is Wifi", "code": "public static boolean isWifi(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_WIFI) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Reset the buffer to 0 size", "code": "public void reset(){\n  setCapacity(0);\n}\n"}
{"nl": "TYPE_FORWARD_ONLY mode only", "code": "public void afterLast() throws SQLException {\n  throw new SQLException(\"Command not Supported!\",\"GSP\",-132);\n}\n"}
{"nl": "Stores the new legion emblem", "code": "public void storeLegionEmblem(Player activePlayer,int legionId,int emblemId,int color_r,int color_g,int color_b,LegionEmblemType emblemType){\n  if (legionRestrictions.canStoreLegionEmblem(activePlayer,legionId,emblemId)) {\n    Legion legion=activePlayer.getLegion();\n    if (legion.getLegionEmblem().isDefaultEmblem()) {\n      addHistory(legion,\"\",LegionHistoryType.EMBLEM_REGISTER);\n    }\n else {\n      addHistory(legion,\"\",LegionHistoryType.EMBLEM_MODIFIED);\n    }\n    activePlayer.getInventory().decreaseKinah(LegionConfig.LEGION_EMBLEM_REQUIRED_KINAH);\n    legion.getLegionEmblem().setEmblem(emblemId,color_r,color_g,color_b,emblemType,null);\n    updateMembersEmblem(legion,emblemType);\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_EMBLEM);\n  }\n}\n"}
{"nl": "Create action list", "code": "private void createActionList(){\n  View view;\n  String title;\n  Drawable icon;\n  OnClickListener listener;\n  for (int i=0; i < actionList.size(); i++) {\n    title=actionList.get(i).getTitle();\n    icon=actionList.get(i).getIcon();\n    listener=actionList.get(i).getOnClickListerner();\n    view=getActionItem(title,icon,listener);\n    view.setFocusable(true);\n    view.setClickable(true);\n    mTrack.addView(view);\n  }\n}\n"}
{"nl": "Creates new error", "code": "public KeyAlreadySetException(Throwable cause){\n  super(cause);\n}\n"}
{"nl": "Return a full list of all countries", "code": "public DatabaseGetCountriesQuery needAll(Boolean value){\n  return unsafeParam(\"need_all\",value);\n}\n"}
{"nl": "Returns true if this logical version is less than other ( < )", "code": "public boolean lessThan(PlatformLogicalVersion otherVersion){\n  Boolean specialLessThan=specialLessThan(otherVersion);\n  if (specialLessThan != null)   return specialLessThan;\n  return (_buildNumber < otherVersion._buildNumber) || (_buildNumber == otherVersion._buildNumber && _subBuildNumber < otherVersion._subBuildNumber);\n}\n"}
{"nl": "test the data exists ?", "code": "public static boolean exists(String collection,Bson query) throws SQLException {\n  TimeStamp t1=TimeStamp.create();\n  boolean b=false;\n  try {\n    b=MongoHelper.load(collection,query) != null;\n  }\n  finally {\n    if (log.isDebugEnabled())     log.debug(\"exists cost=\" + t1.past() + \"ms,  collection=\"+ collection+ \", query=\"+ query+ \", result=\"+ b);\n  }\n  return b;\n}\n"}
{"nl": "Delete a user's role within an application", "code": "@DELETE @Path(\"/applications/{applicationName}/users/{userID}/roles\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Delete a user's role within an application\") @Timed public Response deleteUserRoles(@PathParam(\"applicationName\") @ApiParam(value=\"Application Name\") final Application.Name applicationName,@PathParam(\"userID\") @ApiParam(value=\"User ID\") final Username userID,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  Username userName=authorization.getUser(authorizationHeader);\n  UserInfo admin=authorization.getUserInfo(userName);\n  authorization.checkUserPermissions(userName,applicationName,ADMIN);\n  authorization.deleteUserRole(userID,applicationName,admin);\n  return httpHeader.headers(NO_CONTENT).build();\n}\n"}
{"nl": "Add overlapping view and place it into overlapping container", "code": "public void addOverlappingView(View view){\n  mFrameLayoutOverlappingViewContainer.addView(view,COMMON_LAYOUT_PARAMS);\n  mOverlappingViewsMap.put(view.getId(),view);\n}\n"}
{"nl": "Gets a SerialMessage with the ASSOCIATIONCMD_REMOVE command", "code": "public SerialMessage clearAssociationMessage(int group){\n  logger.debug(\"NODE {}: Creating new message for application command ASSOCIATIONCMD_REMOVE group={}, node=all\",getNode().getNodeId(),group);\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Config);\n  ByteArrayOutputStream outputData=new ByteArrayOutputStream();\n  outputData.write(getNode().getNodeId());\n  outputData.write(3);\n  outputData.write(getCommandClass().getKey());\n  outputData.write(ASSOCIATIONCMD_REMOVE);\n  outputData.write(group);\n  result.setMessagePayload(outputData.toByteArray());\n  return result;\n}\n"}
{"nl": "Creates a token given the following parameter", "code": "@Override public String createToken(int my_slot,int rac_count,int rac_size,String region){\n  int regionCount=rac_count * rac_size;\n  return initialToken(regionCount,my_slot,regionOffset(region)).toString();\n}\n"}
{"nl": "Fired when a request fails to complete, override to handle in your own code", "code": "public void onFailure(int statusCode,Header[] headers,byte[] responseBody,Throwable error){\n  try {\n    String response=responseBody == null ? null : new String(responseBody,getCharset());\n    onFailure(statusCode,headers,error,response);\n  }\n catch (  UnsupportedEncodingException e) {\n    onFailure(statusCode,headers,e,null);\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof IViewerWithFindToolBar && ((IViewerWithFindToolBar)getViewer()).isShowFindToolBar();\n}\n"}
{"nl": "Removes the UserData cache from this user", "code": "public void unregisterData(){\n  userData=null;\n}\n"}
{"nl": "Builds the ControlOptions new instance", "code": "public ControlOptions build(){\n  ControlOptions options=new ControlOptions();\n  options.position=position;\n  return options;\n}\n"}
{"nl": "Clear any choices previously checked", "code": "public void clearCheckStates(){\n  for (int i=0; i < expandableList.groups.size(); i++) {\n    CheckedExpandableGroup group=(CheckedExpandableGroup)expandableList.groups.get(i);\n    group.clearSelections();\n  }\n}\n"}
{"nl": "Return a nullif expression", "code": "public Value nullIfExpression(Value val1,Value val2){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n"}
{"nl": "register one global complex type", "code": "public void addGlobalComplexTypeDecl(XSComplexTypeDecl decl){\n  fGlobalTypeDecls.put(decl.getName(),decl);\n  decl.setNamespaceItem(this);\n}\n"}
{"nl": "true if top bottom or baseline are connected", "code": "private static boolean isVerticallyConstrained(ConstraintWidget widget){\n  if (widget.getAnchor(ConstraintAnchor.Type.BOTTOM).isConnected()) {\n    return true;\n  }\n  if (widget.getAnchor(ConstraintAnchor.Type.TOP).isConnected()) {\n    return true;\n  }\n  if (widget.getAnchor(ConstraintAnchor.Type.BASELINE).isConnected()) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "ITEM TO SKILL TREE QUERIES", "code": "public ItemToSkillTreeCursor queryItemToSkillTreeItem(long id){\n  return mHelper.queryItemToSkillTreeItem(id);\n}\n"}
{"nl": "Keccak-256 hash function", "code": "public static byte[] sha3(byte[] input,int offset,int length){\n  Keccak.DigestKeccak kecc=new Keccak.Digest256();\n  kecc.update(input,offset,length);\n  return kecc.digest();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set drawer=\" + ViewerBase.DiagramType.RectangularCladogram + \";\");\n}\n"}
{"nl": "gets the underlying getLetterCodeIterator", "code": "public Iterator<T> iterator(){\n  return iterator;\n}\n"}
{"nl": "split the multiple packet to packets", "code": "public static String[] splitMultiplePacket(String packet){\n  String _partitioningPacket[]=packet.split(Settings.sReceiverSplitMultipleToken);\n  return _partitioningPacket;\n}\n"}
{"nl": "Allows to know if a given calendar instance is set Today+1 (Tomorrow)", "code": "public static boolean isTomorrow(Calendar _calendar){\n  Calendar now=Calendar.getInstance();\n  if ((now.get(Calendar.DAY_OF_MONTH) + 1) == _calendar.get(Calendar.DAY_OF_MONTH)) {\n    if (now.get(Calendar.MONTH) == _calendar.get(Calendar.MONTH)) {\n      if (now.get(Calendar.YEAR) == _calendar.get(Calendar.YEAR)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "Enables logging from the network requests for debugging purposes", "code": "public static void enableLogging(boolean enable){\n  AirMapLog.ENABLED=enable;\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.CHISSQUARE);\n}\n"}
{"nl": "Set the initial values of the widgets", "code": "private void initializeValues(){\n  passwordChanged=false;\n  if (showCredentials) {\n    loginText.setText(location.getUsername());\n    passwordText.setText(FAKE_PASSWORD);\n  }\n  String label=location.getLabel();\n  useUrlLabelButton.setSelection(label == null);\n  useCustomLabelButton.setSelection(!useUrlLabelButton.getSelection());\n  if (label == null) {\n    label=location.getLocation();\n  }\n  customLabelText.setText(label);\n  SVNUrl url=location.getUrl();\n  if (url != null) {\n    repositoryUrlText.setText(url.toString());\n  }\n else {\n    repositoryUrlText.setText(\"\");\n  }\n  SVNUrl repositoryRoot=location.getRepositoryRoot();\n  if (repositoryRoot != null) {\n    repositoryRootText.setText(repositoryRoot.toString());\n  }\n else {\n    repositoryRootText.setText(\"\");\n  }\n}\n"}
{"nl": "Adds a new role player to this relation", "code": "private Relation addNewRolePlayer(Map<RoleType,Instance> roleMap,RoleType roleType,Instance instance){\n  if (instance != null)   mindmapsGraph.putCasting((RoleTypeImpl)roleType,(InstanceImpl)instance,this);\n  if (mindmapsGraph.isBatchLoadingEnabled()) {\n    setHash(null);\n  }\n else {\n    setHash(roleMap);\n  }\n  return this;\n}\n"}
{"nl": "Clear both references", "code": "@Override public void clear(){\n  super.clear();\n  boot=null;\n}\n"}
{"nl": "Read plain text data from an InputStream", "code": "public static StringBuffer readFromStream(InputStream inputStream){\n  StringBuffer output=new StringBuffer();\n  if (inputStream == null) {\n    return output;\n  }\n  InputStreamReader char_input=new InputStreamReader(inputStream,Charset.forName(\"UTF-8\").newDecoder());\n  BufferedReader br=new BufferedReader(char_input);\n  try {\n    while (true) {\n      String in=br.readLine();\n      if (in == null) {\n        break;\n      }\n      output.append(in).append(\"\\n\");\n    }\n    return output;\n  }\n catch (  IOException e) {\n    Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,e);\n  }\n finally {\n    try {\n      char_input.close();\n    }\n catch (    IOException e) {\n      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,e);\n    }\n    try {\n      br.close();\n    }\n catch (    IOException e) {\n      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,e);\n    }\n  }\n  return output;\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return locked;\n}\n"}
{"nl": "Allows to _signin_ a user with a given email address and password", "code": "public Single<AuthResult> signInWithEmailAndPassword(final String _email,final String _password){\n  return observeSingleValue(firebaseAuth.signInWithEmailAndPassword(_email,_password));\n}\n"}
{"nl": "append file to storage server (by callback)", "code": "public int append_file1(String appender_file_id,long file_size,UploadCallback callback) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.append_file(parts[0],parts[1],file_size,callback);\n}\n"}
{"nl": "Clears all the subfilters from the Parent Filter", "code": "public void clearSubFilters(){\n  subFilters.clear();\n}\n"}
{"nl": "stop the loop animate", "code": "public void stopAnimate(){\n  isPlaying=false;\n  mLoopAnimateY=0;\n  invalidate();\n}\n"}
{"nl": "is the class below a descendant of the class above?", "code": "public boolean isDescendant(Integer idAbove,Integer idBelow){\n  return id2Address.get(idBelow).startsWith(id2Address.get(idAbove));\n}\n"}
{"nl": "return true if we can save iterator creation and get a single entry", "code": "public boolean optimizeScanForSingleObject(){\n  return _supportFifoPerSegment && getNumSegments() == 1 && size() <= 1;\n}\n"}
{"nl": "Try to send email when it is needed", "code": "void sendEmailRightNow(Launch launch,Project project,ServerEmailConfig emailConfig){\n  ProjectEmailConfig projectConfig=project.getConfiguration().getEmailConfig();\n  for (  EmailSenderCase one : projectConfig.getEmailCases()) {\n    Optional<SendCase> option=SendCase.findByName(one.getSendCase());\n    boolean successRate=isSuccessRateEnough(launch,option.get());\n    boolean matchedNames=isLaunchNameMatched(launch,one);\n    boolean matchedTags=isTagsMatched(launch,one);\n    List<String> recipients=one.getRecipients();\n    if (successRate && matchedNames && matchedTags) {\n      String[] recipientsArray=findRecipients(launch.getUserRef(),recipients);\n      try {\n        String basicURL=UriComponentsBuilder.fromHttpRequest(new ServletServerHttpRequest(currentRequest.get())).replacePath(String.format(\"/#%s/launches/all/\",project.getName())).build().toUriString();\n        String resourcesURL=UriComponentsBuilder.fromHttpRequest(new ServletServerHttpRequest(currentRequest.get())).replacePath(\"/img\").build().toUriString();\n        emailService.reconfig(emailConfig);\n        emailService.setAddressFrom(project.getConfiguration().getEmailConfig().getFrom());\n        emailService.sendLaunchFinishNotification(recipientsArray,basicURL + launch.getId(),launch,resourcesURL,project.getConfiguration());\n      }\n catch (      Exception e) {\n        LOGGER.error(\"Unable to send email. Error: \\n{}\",e);\n      }\n    }\n  }\n}\n"}
{"nl": "Marks that we've already checked the given template in a new project or existing project context", "code": "private static void markChecked(File templateFile,boolean createWithProject){\n  markChecked(templateFile.getParentFile().getName(),templateFile.getName(),createWithProject);\n}\n"}
{"nl": "goto the previous object", "code": "public boolean gotoPrevious(){\n  currentIterator=null;\n  currentId=null;\n  return isCurrentSet();\n}\n"}
{"nl": "Returns true if the UI mode is overridden", "code": "public final boolean isOverridingUiMode(){\n  return (myOverride & CFG_UI_MODE) != 0;\n}\n"}
{"nl": "call this method to enter full screen", "code": "public void enterFullScreen(){\n  View decorView=mContext.getWindow().getDecorView();\n  hideSystemUI(decorView);\n  for (  View view : views) {\n    view.setVisibility(View.GONE);\n    view.invalidate();\n  }\n}\n"}
{"nl": "Set the dark primary color (background color of the buttons when clicked)", "code": "public Builder primaryDarkColor(int colorPrimaryDark){\n  this.buttonPressedBackgroundColor=colorPrimaryDark;\n  return this;\n}\n"}
{"nl": "open a  Connection", "code": "private HttpURLConnection openHttpURLConnection(URL url,HttpClientRequest httpClientRequest,String method) throws IOException {\n  logger.info(\"Open connection for api \" + url.getPath());\n  HttpURLConnection.setFollowRedirects(true);\n  HttpURLConnection conn;\n  conn=(HttpURLConnection)url.openConnection();\n  conn.setRequestMethod(method);\n  String downloadFile=httpClientRequest.getDownloadFile();\n  if (downloadFile != null) {\n    File file=new File(downloadFile);\n    if (file.exists()) {\n      conn.setRequestProperty(\"RANGE\",\"bytes=\" + file.length() + \"-\");\n    }\n  }\n  Map<String,String> headers=httpClientRequest.getHeaders();\n  if (headers != null && !headers.isEmpty()) {\n    for (    Map.Entry<String,String> entry : headers.entrySet()) {\n      conn.setRequestProperty(entry.getKey(),entry.getValue());\n    }\n  }\n  logger.info(\"Hold cookie: %s.\",cookieManager.getCookieStore().getCookies());\n  conn.setRequestProperty(\"Content-Type\",httpClientRequest.getContentType());\n  conn.setRequestProperty(\"User-Agent\",httpClientRequest.getUserAgent());\n  return conn;\n}\n"}
{"nl": "Required for Externalizable", "code": "public DistinctResult(){\n}\n"}
{"nl": "Simple HTTP GET request", "code": "public void sendRequest(String url,final ISimpleRequestCallback uiUpdater){\n  Request request=new Request.Builder().url(url).build();\n  sendRequest(request,uiUpdater);\n}\n"}
{"nl": "Helper function for pretty-printing a tree element", "code": "public static void dumpTreeToBuilder(final @NotNull StringBuilder builder,final @NotNull TreeElement element,final int indentation){\n  for (int i=0; i < indentation; i++) {\n    builder.append(\"  \");\n  }\n  builder.append(element.getPresentation().getPresentableText()).append('\\n');\n  for (  TreeElement treeElement : element.getChildren()) {\n    dumpTreeToBuilder(builder,treeElement,indentation + 1);\n  }\n}\n"}
{"nl": "determine if interval is fully specified", "code": "public boolean isComplete(){\n  return !(Double.isNaN(getXmin()) || Double.isNaN(getXmax()));\n}\n"}
{"nl": "Add RequestResponseHandler to player with senderId equal to objectId of AI owner", "code": "public static void addRequest(AbstractAI ai2,Player player,int requestId,AI2Request request,Object... requestParams){\n  addRequest(ai2,player,requestId,ai2.getObjectId(),request,requestParams);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketRestoreQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n"}
{"nl": "Does this class declare a field with the given name?", "code": "public boolean declaresFieldByName(String name){\n  checkLevel(SIGNATURES);\n  for (  SootField field : fields) {\n    if (field.getName().equals(name))     return true;\n  }\n  return false;\n}\n"}
{"nl": "Create and parse allowable options", "code": "public ResponderCLI(String[] args){\n  cliOptions=createOptions();\n  try {\n    CommandLineParser parser=new GnuParser();\n    commandLine=parser.parse(cliOptions,args,true);\n    if (hasOption(\"h\")) {\n      printHelp();\n      System.exit(1);\n    }\n    if (!parseOptions()) {\n      logger.info(\"The provided options are not valid\");\n      printHelp();\n      System.exit(1);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    System.exit(1);\n  }\n}\n"}
{"nl": "Number of items to return", "code": "public MarketSearchQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public boolean isFrozen(){\n  return this.frozen;\n}\n"}
{"nl": "Return grouped objects with MAX element in each group by specified criteria", "code": "public Map<String,List<ChartObject>> maxByDate(List<ChartObject> input,Period period,String maxSeries){\n  final Function<ChartObject,String> chartObjectToDate=null;\n  final BinaryOperator<ChartObject> chartObjectReducer=null;\n  final Map<String,Optional<ChartObject>> groupByDate=input.stream().sorted(null).collect(Collectors.groupingBy(chartObjectToDate,null,Collectors.reducing(chartObjectReducer)));\n  final Map<String,ChartObject> range=buildRange(input,period);\n  final LinkedHashMap<String,List<ChartObject>> result=new LinkedHashMap<>();\n  range.forEach(null);\n  return result;\n}\n"}
{"nl": "ask view to prevent user input", "code": "public void lockUserInput(){\n  locked=true;\n  commandManager.setEnableCritical(false);\n}\n"}
{"nl": "Helper method to cast a concept to it's correct type", "code": "private <E>E castConcept(Class<E> type){\n  try {\n    return type.cast(this);\n  }\n catch (  ClassCastException e) {\n    throw new InvalidConceptTypeException(ErrorMessage.INVALID_OBJECT_TYPE.getMessage(this,type));\n  }\n}\n"}
{"nl": "/*     ", "code": "@deprecated public boolean isParseAllStyles(){\n  return this._parseAllStyles;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetRequestsQueryWithNeedMutual(VkApiClient client,UserActor actor,Boolean needMutual){\n  super(client,\"friends.getRequests\",GetRequestsNeedMutualResponse.class);\n  accessToken(actor.getAccessToken());\n  needMutual(needMutual);\n}\n"}
{"nl": "Consumes the next character iff it is one of the <var>expectedCharacters</var>", "code": "private boolean peekRead(String expectedCharacters) throws CompileException, IOException {\n  if (this.peek() == -1)   return false;\n  if (expectedCharacters.indexOf((char)this.nextChar) == -1)   return false;\n  this.sb.append((char)this.nextChar);\n  this.nextChar=this.nextButOneChar;\n  this.nextButOneChar=-1;\n  return true;\n}\n"}
{"nl": "Set album ids", "code": "public VideoAddToAlbumQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "Set a maximum number of razzberries", "code": "public CatchOptions maxRazzberries(int maxRazzBerries){\n  this.maxRazzBerries=maxRazzBerries;\n  return this;\n}\n"}
{"nl": "debug display array", "code": "public static void show(byte[] b){\n  int count=0;\n  for (int i=0; i < b.length; i++) {\n    if (count == 8) {\n      System.out.print(\"  \");\n    }\n else     if (count == 16) {\n      System.out.println(\"\");\n      count=0;\n      continue;\n    }\n    System.out.print(Integer.toHexString(b[i] & 0xFF).toUpperCase() + \" \");\n    count++;\n  }\n  System.out.println();\n}\n"}
{"nl": "Add a node to the controller", "code": "private void addNode(int nodeId){\n  ZWaveEvent zEvent=new ZWaveInitializationStateEvent(nodeId,ZWaveNodeInitStage.EMPTYNODE);\n  notifyEventListeners(zEvent);\n  ioHandler.deviceDiscovered(nodeId);\n  new ZWaveInitNodeThread(this,nodeId).start();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetCallbackSettingsQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.getCallbackSettings\",GetCallbackSettingsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "this method should be called in Activity onDestroy method", "code": "public void detach(AppCompatActivity activity){\n  attrViewMaps.remove(activity.hashCode());\n}\n"}
{"nl": "Item id", "code": "protected MarketReportQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "Creates ripple effect to mView", "code": "public static void createRipple(View v,int primaryColor){\n  BaseRippleDrawable rippleDrawable=new BaseRippleDrawable();\n  rippleDrawable.setDrawable(v.getBackground());\n  rippleDrawable.setColor(primaryColor);\n  rippleDrawable.setBounds(v.getPaddingLeft(),v.getPaddingTop(),v.getPaddingRight(),v.getPaddingBottom());\n  v.setOnTouchListener(rippleDrawable);\n  if (Build.VERSION.SDK_INT >= 16) {\n    v.setBackground(rippleDrawable);\n  }\n else {\n    v.setBackgroundDrawable(rippleDrawable);\n  }\n}\n"}
{"nl": "Creates the source asset and kicks off extraction process", "code": "@RequestMapping(value=\"/api/assets\",method=RequestMethod.POST) public SourceAsset importSourceAsset(@RequestBody SourceAsset sourceAsset) throws ExecutionException, InterruptedException {\n  logger.debug(\"Importing source asset\");\n  String normalizedContent=NormalizationUtils.normalize(sourceAsset.getContent());\n  PollableFuture<Asset> assetFuture=assetService.addOrUpdateAssetAndProcessIfNeeded(sourceAsset.getRepositoryId(),normalizedContent,sourceAsset.getPath());\n  sourceAsset.setAddedAssetId(assetFuture.get().getId());\n  sourceAsset.setPollableTask(assetFuture.getPollableTask());\n  return sourceAsset;\n}\n"}
{"nl": "Constructs new instance of CM_LEGION packet", "code": "public CM_LEGION(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Check if a url is valid", "code": "public static boolean isValidUrl(String url){\n  return Patterns.WEB_URL.matcher(url).matches();\n}\n"}
{"nl": "no pop Anim ,animview at left", "code": "public static void makeText(Context context,String msg,int length,int type){\n  makeText(context,msg,length,type,0,0);\n}\n"}
{"nl": "expand an array of paths", "code": "public void expand(TreePath[] paths){\n  for (  TreePath path : paths) {\n    expandJTreeNode(dataTree,dataTree.getModel(),path.getLastPathComponent(),dataTree.getRowForPath(path),0);\n  }\n}\n"}
{"nl": "Checks if the processor marked the transaction as complete", "code": "public boolean isTransactionComplete(){\n  return transactionComplete;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static final boolean equals(int codepoint,CharSequence other){\n  if (other == null) {\n    return false;\n  }\nswitch (other.length()) {\ncase 1:\n    return codepoint == other.charAt(0);\ncase 2:\n  return (codepoint > 65535) && (codepoint == Character.codePointAt(other,0));\n}\nreturn false;\n}\n"}
{"nl": "Create a new synthetic attribute", "code": "public SyntheticAttr(){\n}\n"}
{"nl": "Cancels the duel request", "code": "private void cancelDuelRequest(Player owner,Player target){\n  log.debug(\"[Duel] Player \" + owner.getName() + \" cancelled his duel request with \"+ target.getName());\n  PacketSendUtility.sendPacket(target,new SM_DUEL_REQUEST_CANCEL(1300134,owner.getName()));\n  PacketSendUtility.sendPacket(owner,SM_SYSTEM_MESSAGE.STR_DUEL_WITHDRAW_REQUEST(target.getName()));\n}\n"}
{"nl": "un-subscribe to avoid leak memory", "code": "public void unSubscribe(Subscription subscription){\n  if (subscription != null && subscription.isUnsubscribed())   subscription.unsubscribe();\n}\n"}
{"nl": "Returns the name of this audioplayer", "code": "public String toString(){\n  return \"FileAudioPlayer\";\n}\n"}
{"nl": "Purification System", "code": "public static SM_SYSTEM_MESSAGE STR_REGISTER_ITEM_MSG_UPGRADE_CANNOT(DescriptionId nameId){\n  return new SM_SYSTEM_MESSAGE(1402397,new Object[]{nameId});\n}\n"}
{"nl": "Creates a new instance of Distribution", "code": "public Distribution(){\n  hDistro=new TreeMap();\n}\n"}
{"nl": "Snap the percent value to common values", "code": "private static float snapPercent(float percent){\n  int value=(int)(percent * 100);\n  int slope=2;\n  if (Math.abs(value - 25) <= slope) {\n    value=25;\n  }\n  if (Math.abs(value - 33) <= slope) {\n    value=33;\n  }\n  if (Math.abs(value - 50) <= slope) {\n    value=50;\n  }\n  if (Math.abs(value - 66) <= slope) {\n    value=66;\n  }\n  if (Math.abs(value - 75) <= slope) {\n    value=75;\n  }\n  return (value / 100f);\n}\n"}
{"nl": "Set url", "code": "public WidgetsGetCommentsQuery url(String value){\n  return unsafeParam(\"url\",value);\n}\n"}
{"nl": "converts from wrapper to external encoding", "code": "private org.apache.carbondata.format.Encoding fromWrapperToExternalEncoding(Encoding encoder){\n  if (null == encoder) {\n    return null;\n  }\nswitch (encoder) {\ncase DICTIONARY:\n    return org.apache.carbondata.format.Encoding.DICTIONARY;\ncase DELTA:\n  return org.apache.carbondata.format.Encoding.DELTA;\ncase RLE:\nreturn org.apache.carbondata.format.Encoding.RLE;\ncase INVERTED_INDEX:\nreturn org.apache.carbondata.format.Encoding.INVERTED_INDEX;\ncase BIT_PACKED:\nreturn org.apache.carbondata.format.Encoding.BIT_PACKED;\ncase DIRECT_DICTIONARY:\nreturn org.apache.carbondata.format.Encoding.DIRECT_DICTIONARY;\ndefault :\nreturn org.apache.carbondata.format.Encoding.DICTIONARY;\n}\n}\n"}
{"nl": "Load the cart from the given file", "code": "public Node load(String fileName,FeatureDefinition featDefinition,String[] dummy) throws IOException, MaryConfigurationException {\n  cleadReader();\n  DataInput raf=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));\n  MaryHeader maryHeader=new MaryHeader(raf);\n  if (!maryHeader.hasCurrentVersion()) {\n    throw new IOException(\"Wrong version of database file\");\n  }\n  if (maryHeader.getType() != MaryHeader.CARTS) {\n    throw new IOException(\"No CARTs file\");\n  }\n  int numNodes=raf.readInt();\n  raf.readUTF();\n  featDef=featDefinition;\n  openBrackets=0;\n  try {\n    while (true) {\n      int length=raf.readInt();\n      char[] cartChars=new char[length];\n      for (int i=0; i < length; i++) {\n        cartChars[i]=raf.readChar();\n      }\n      String cart=new String(cartChars);\n      parseAndAdd(cart);\n    }\n  }\n catch (  EOFException eof) {\n  }\n  if (openBrackets != 0) {\n    throw new IOException(\"Error loading CART: bracket mismatch: \" + openBrackets);\n  }\n  if (rootNode instanceof DecisionNode)   ((DecisionNode)rootNode).countData();\n  return rootNode;\n}\n"}
{"nl": "Creates a new data type", "code": "public DataType(Class<T> clazz,BiConsumer<PacketBuffer,T> writer,Function<PacketBuffer,T> reader){\n  this.clazz=clazz;\n  this.writer=writer;\n  this.reader=reader;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0;\n}\n"}
{"nl": "Comments sort order (\"asc\" - from old to new, \"desc\" - from new to old)", "code": "public MarketGetCommentsQuery sort(String value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "This method will send a packet to every legion member", "code": "private void updateMembersEmblem(Legion legion,LegionEmblemType emblemType){\n  LegionEmblem legionEmblem=legion.getLegionEmblem();\n  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {\n    PacketSendUtility.broadcastPacket(onlineLegionMember,new SM_LEGION_UPDATE_EMBLEM(legion.getLegionId(),legionEmblem.getEmblemId(),legionEmblem.getColor_r(),legionEmblem.getColor_g(),legionEmblem.getColor_b(),emblemType),true);\n    if (legionEmblem.getEmblemType() == LegionEmblemType.CUSTOM) {\n      sendEmblemData(onlineLegionMember,legionEmblem,legion.getLegionId(),legion.getLegionName());\n    }\n  }\n}\n"}
{"nl": "collapse the given node   or root", "code": "public void collapse(DefaultMutableTreeNode v){\n  if (v == null)   v=this.root;\n  for (Enumeration descendants=v.depthFirstEnumeration(); descendants.hasMoreElements(); ) {\n    v=(DefaultMutableTreeNode)descendants.nextElement();\n    this.tree.collapsePath(new TreePath(v.getPath()));\n  }\n}\n"}
{"nl": "Comma-separated tag ids list", "code": "public MarketSearchQueryWithExtended tags(List<Integer> value){\n  return unsafeParam(\"tags\",value);\n}\n"}
{"nl": "Disconnect all consumers attached to the dispatcher and close this subscription", "code": "@Override public synchronized CompletableFuture<Void> disconnect(){\n  CompletableFuture<Void> disconnectFuture=new CompletableFuture<>();\n  isFenced.set(true);\n  (dispatcher != null ? dispatcher.disconnect() : CompletableFuture.completedFuture(null)).thenCompose(null).thenRun(null).exceptionally(null);\n  return disconnectFuture;\n}\n"}
{"nl": "Display UI to create an aircraft", "code": "public static void showCreateAircraft(){\n  Context context=AirMap.getInstance().getContext();\n  Intent intent=new Intent(context,CreateEditAircraftActivity.class);\n  context.startActivity(intent);\n}\n"}
{"nl": "override if necessary", "code": "public void updateView(){\n}\n"}
{"nl": "WS to start exporting a drop", "code": "@RequestMapping(method=RequestMethod.POST,value=\"/api/drops/export\") public ExportDropConfig exportDrop(@RequestBody ExportDropConfig exportDropConfig) throws DropExporterException {\n  PollableFuture<Drop> exportDropFuture=dropService.startDropExportProcess(exportDropConfig,PollableTask.INJECT_CURRENT_TASK);\n  exportDropConfig.setPollableTask(exportDropFuture.getPollableTask());\n  try {\n    exportDropConfig.setDropId(exportDropFuture.get().getId());\n  }\n catch (  ExecutionException|InterruptedException e) {\n    logger.debug(\"Cannot get dropId from the pollable due to exception\",e);\n  }\n  return exportDropConfig;\n}\n"}
{"nl": "Given two arbitrary strings representing parts of an address, join them in a guaranteed-unique way, by HTML-escaping both parts and joining them with '&'", "code": "@NonNull public static String joinAddresses(String firstPart,String secondPart){\n  return escape(firstPart) + \"&\" + escape(secondPart);\n}\n"}
{"nl": "getter method to check if dark theme is enabled", "code": "public static boolean isDarkThemeEnable(){\n  return isDarkThemeEnable;\n}\n"}
{"nl": "Signals that the user has clicked inside of the target", "code": "public void onTargetClick(TapTargetView view){\n  view.dismiss(true);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsGetByIdQuery(VkApiClient client,UserActor actor,String... docs){\n  super(client,\"docs.getById\",Utils.buildParametrizedType(List.class,Doc.class));\n  accessToken(actor.getAccessToken());\n  docs(docs);\n}\n"}
{"nl": "Wall settings", "code": "public GroupsEditQuery wall(GroupsEditWall value){\n  return unsafeParam(\"wall\",value);\n}\n"}
{"nl": "read the fixed part of the reads block", "code": "public void read(IInputReader dataIndexReader) throws IOException {\n  for (  Object[] dataRecord : data) {\nswitch ((Character)dataRecord[1]) {\ncase 'i':\n      dataRecord[2]=dataIndexReader.readInt();\n    break;\ncase 'f':\n  dataRecord[2]=dataIndexReader.readFloat();\nbreak;\ncase 'l':\ndataRecord[2]=dataIndexReader.readLong();\nbreak;\ncase 'b':\ndataRecord[2]=(byte)dataIndexReader.read();\nbreak;\ncase 'B':\ndataRecord[2]=dataIndexReader.readByteByteInt();\nbreak;\ncase 'c':\ndataRecord[2]=dataIndexReader.readChar();\nbreak;\n}\n}\n}\n"}
{"nl": "Creates the default inverse cumulative probability density test expected values", "code": "@Override public int[] makeInverseCumulativeTestValues(){\n  return new int[]{0,0,1,1,1,1,5,4,4,4,4,5};\n}\n"}
{"nl": "cheking - is the year leap?", "code": "static boolean isYearLeap(int y){\n  if (((y % 4 == 0) && (y % 100 != 0)) || (y % 400 == 0)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "make a copy", "code": "public ByteArray copy(){\n  ByteArray result=new ByteArray();\n  if (buf != null) {\n    byte[] data=new byte[length];\n    System.arraycopy(buf,offset,data,0,length);\n    result.reset(data);\n  }\n  return result;\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public MessagesGetChatQueryWithFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "the main method to initialize JavaProcess", "code": "public static void main(String... args){\n  System.setErr(System.out);\n  ProcessLogger.log(\"JavaProcess - Starting with args: \" + Arrays.asList(args));\n  try {\n    JavaProcess jp=new JavaProcess(args);\n    jp.run();\n  }\n catch (  Throwable t) {\n    ProcessLogger.log(\"JavaProcess - Termination was caused by: \",t);\n    System.exit(1);\n  }\n}\n"}
{"nl": "Calculate physical attack status and damage", "code": "public static List<AttackResult> calculatePhysicalAttackResult(Creature attacker,Creature attacked){\n  AttackStatus attackerStatus=null;\n  int damage=StatFunctions.calculateAttackDamage(attacker,attacked,true,SkillElement.NONE);\n  List<AttackResult> attackList=new ArrayList<AttackResult>();\n  AttackStatus mainHandStatus=calculateMainHandResult(attacker,attacked,attackerStatus,damage,attackList);\n  if (attacker instanceof Player && ((Player)attacker).getEquipment().getOffHandWeaponType() != null) {\n    calculateOffHandResult(attacker,attacked,mainHandStatus,attackList);\n  }\n  attacked.getObserveController().checkShieldStatus(attackList,null,attacker);\n  return attackList;\n}\n"}
{"nl": "Find a Class using the specified ClassLoader", "code": "static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    final int lastDot=className.lastIndexOf(\".\");\n    String packageName=className;\n    if (lastDot != -1)     packageName=className.substring(0,lastDot);\n    security.checkPackageAccess(packageName);\n  }\n  Class providerClass;\n  if (cl == null) {\n    providerClass=Class.forName(className);\n  }\n else {\n    try {\n      providerClass=cl.loadClass(className);\n    }\n catch (    ClassNotFoundException x) {\n      if (doFallback) {\n        ClassLoader current=ObjectFactory.class.getClassLoader();\n        if (current == null) {\n          providerClass=Class.forName(className);\n        }\n else         if (cl != current) {\n          cl=current;\n          providerClass=cl.loadClass(className);\n        }\n else {\n          throw x;\n        }\n      }\n else {\n        throw x;\n      }\n    }\n  }\n  return providerClass;\n}\n"}
{"nl": "Removes an association node", "code": "public boolean removeAssociation(int node){\n  return removeAssociation(node,0);\n}\n"}
{"nl": "Generate id of the class", "code": "public Long generate(Class<?> clazz){\n  String idGeneratorKey=RedisKeys.keyOfIdGenerator(clazz);\n  return redis.opsForValue().increment(idGeneratorKey,1);\n}\n"}
{"nl": "/*     ", "code": "@deprecated public int parseOffsetLocalizedGMT(String text,ParsePosition pos){\n  return parseOffsetLocalizedGMT(text,pos,null);\n}\n"}
{"nl": "change each variable occurrence according to provided mappings (apply unifiers {[from, to]_i})", "code": "public void unify(Map<String,String> unifiers){\n  if (unifiers.size() == 0)   return;\n  Map<String,String> mappings=new HashMap<>(unifiers);\n  Map<String,String> appliedMappings=new HashMap<>();\n  for (  Map.Entry<String,String> mapping : mappings.entrySet()) {\n    String varToReplace=mapping.getKey();\n    String replacementVar=mapping.getValue();\n    if (!appliedMappings.containsKey(varToReplace) || !appliedMappings.get(varToReplace).equals(replacementVar)) {\n      if (mappings.containsKey(replacementVar) && mappings.get(replacementVar).equals(varToReplace)) {\n        exchangeRelVarNames(varToReplace,replacementVar);\n        appliedMappings.put(varToReplace,replacementVar);\n        appliedMappings.put(replacementVar,varToReplace);\n      }\n    }\n  }\n  mappings.entrySet().removeIf(null);\n  Set<Atomic> toRemove=new HashSet<>();\n  Set<Atomic> toAdd=new HashSet<>();\n  atomSet.stream().filter(null).forEach(null);\n  toRemove.forEach(null);\n  toRemove.forEach(null);\n  toAdd.forEach(null);\n  toAdd.forEach(null);\n  updateSelectedVars(mappings);\n  resolveCaptures();\n}\n"}
{"nl": "Creates a new statement that throws a NullPointerException", "code": "private void createThrowStmt(Body body,Unit oldStmt,LocalCreation lc){\n  RefType tp=RefType.v(\"java.lang.NullPointerException\");\n  Local lcEx=lc.newLocal(tp);\n  SootMethodRef constructorRef=Scene.v().makeConstructorRef(tp.getSootClass(),Collections.singletonList((Type)RefType.v(\"java.lang.String\")));\n  Stmt newExStmt=Jimple.v().newAssignStmt(lcEx,Jimple.v().newNewExpr(tp));\n  body.getUnits().insertBefore(newExStmt,oldStmt);\n  Stmt invConsStmt=Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(lcEx,constructorRef,Collections.singletonList(StringConstant.v(\"Invalid array reference replaced by Soot\"))));\n  body.getUnits().insertBefore(invConsStmt,oldStmt);\n  body.getUnits().swapWith(oldStmt,Jimple.v().newThrowStmt(lcEx));\n}\n"}
{"nl": "abbreviate name", "code": "private String abbreviateName(String name){\n  name=name.replace(\"http://\",\"\").replace(\":8080\",\"\").replaceAll(\"/MeganServer$\",\"\");\n  if (name.length() <= 18)   return name;\n  return \"...\" + name.substring(name.length() - 15);\n}\n"}
{"nl": "Number of items to return", "code": "public MarketSearchQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Campaign ID", "code": "public AdsCheckLinkQuery campaignId(Integer value){\n  return unsafeParam(\"campaign_id\",value);\n}\n"}
{"nl": "SCIPIO: This is now a delegating method", "code": "@Override public void schedule(String jobName,String poolName,String serviceName,Map<String,? extends Object> context,long startTime,int frequency,int interval,int count,long endTime,int maxRetry) throws GenericServiceException {\n  schedule(jobName,poolName,serviceName,context,startTime,frequency,interval,count,endTime,maxRetry,(String)null);\n}\n"}
{"nl": "push back a line", "code": "public void pushBackLine(String line){\n  if (pushedBackLine != null)   System.err.println(\"Error: Push back line, but buffer not empty\");\n  pushedBackLine=line;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"setProp\");\n  String label=np.getWordRespectCase();\n  np.matchIgnoreCase(\"=\");\n  String value=np.getWordRespectCase();\n  if (NexusStreamParser.isBoolean(value)) {\n    ProgramProperties.put(label,Boolean.parseBoolean(value));\n  }\n else   if (NexusStreamParser.isInteger(value)) {\n    ProgramProperties.put(label,Integer.parseInt(value));\n  }\n else   if (NexusStreamParser.isFloat(value)) {\n    ProgramProperties.put(label,Float.parseFloat(value));\n  }\n else   ProgramProperties.put(label,value);\n  np.matchIgnoreCase(\";\");\n}\n"}
{"nl": "Set start comment id", "code": "public PhotosGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AppsGetQuery(VkApiClient client){\n  super(client,\"apps.get\",GetResponse.class);\n}\n"}
{"nl": "Change the submit button's text color to the one provided", "code": "public void changeButtonTextColor(int resId){\n  this.slickButtonBackgroundColor=resId;\n  slickFormSubmitButton.setTextColor(slickButtonBackgroundColor);\n  slickFormSubmitButton.invalidate();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetCallbackConfirmationCodeQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.getCallbackConfirmationCode\",GetCallbackConfirmationCodeResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "Creates a new scanner", "code": "_ProguardLexer(java.io.Reader in){\n  this.zzReader=in;\n}\n"}
{"nl": "Read a number of bytes from ring buffer", "code": "public int read(byte[] buffer,final int bytes){\n  int remaining;\n  if ((remaining=checkSpace(false)) == 0) {\n    Log.d(RingBuffer.class.getSimpleName(),\"No data\");\n    return 0;\n  }\n  final int bytesRead=bytes > remaining ? remaining : bytes;\n  for (int i=0; i < bytesRead; ++i) {\n    buffer[i]=this.buffer[rp++];\n    if (rp == size)     rp=0;\n  }\n  return bytesRead;\n}\n"}
{"nl": "Sends a note to the business layer, to confirm that the equipment is properly configured, connected to its source and running", "code": "@Override public final void confirmEquipmentStateOK(final String pDescription){\n  sendCommfaultTag(this.equipmentConfiguration.getCommFaultTagId(),equipmentConfiguration.getName(),!this.equipmentConfiguration.getCommFaultTagValue(),pDescription);\n  Map<Long,SubEquipmentConfiguration> subEquipmentConfigurations=equipmentConfiguration.getSubEquipmentConfigurations();\n  for (  SubEquipmentConfiguration subEquipmentConfiguration : subEquipmentConfigurations.values()) {\n    sendCommfaultTag(subEquipmentConfiguration.getCommFaultTagId(),subEquipmentConfiguration.getName(),!subEquipmentConfiguration.getCommFaultTagValue(),pDescription);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoDeleteQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n"}
{"nl": "Take a screenshot with the status bar", "code": "public static Bitmap takeScreenShotWithStatusBar(Activity activity){\n  View view=activity.getWindow().getDecorView();\n  view.setDrawingCacheEnabled(true);\n  view.buildDrawingCache();\n  Bitmap bmp=view.getDrawingCache();\n  int width=getScreenWidthInPx(activity);\n  int height=getScreenHeightInPx(activity);\n  Bitmap bp=Bitmap.createBitmap(bmp,0,0,width,height);\n  view.destroyDrawingCache();\n  return bp;\n}\n"}
{"nl": "Does not dispose pixmap", "code": "public static Pixmap tintPixmap(Pixmap pixmap,Color color){\n  Color tempColor=new Color();\n  for (int y=0; y < pixmap.getHeight(); y++) {\n    for (int x=0; x < pixmap.getWidth(); x++) {\n      tempColor.set(pixmap.getPixel(x,y));\n      float a=tempColor.a;\n      tempColor.mul(color);\n      tempColor.a=a;\n      pixmap.setColor(tempColor);\n      pixmap.drawPixel(x,y);\n      tempColor.set(pixmap.getPixel(x,y));\n    }\n  }\n  return pixmap;\n}\n"}
{"nl": "Read File content", "code": "public static String readFromFile(String fileName) throws IOException {\n  InputStream in=RequestExecutionHelper.class.getClassLoader().getResourceAsStream(fileName);\n  try {\n    String result=StreamHelper.readStreamContent(in);\n    return result;\n  }\n  finally {\n    in.close();\n  }\n}\n"}
{"nl": "Test that we get back the correct sum for an api level", "code": "public void testSimpleCase() throws Exception {\n  FileDownloader downloader=Mockito.mock(FileDownloader.class);\n  Mockito.when(downloader.download(Matchers.any(File.class))).thenReturn(ImmutableList.of(Pair.create(myDistributionFile,myDescription)));\n  DistributionService service=new DistributionService(downloader,CACHE_PATH,myDistributionFileUrl);\n  assertEquals(0.7,service.getSupportedDistributionForApiLevel(16),0.0001);\n}\n"}
{"nl": "gets the next matches", "code": "@Override public int next(){\n  next=daa2QuerySAMIterator.next();\n  return countNewLines(next.get2());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatQueryWithChatIds(VkApiClient client,UserActor actor,Integer... chatIds){\n  super(client,\"messages.getChat\",Utils.buildParametrizedType(List.class,Chat.class));\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n}\n"}
{"nl": "Calculate the standard deviation skipping Nan floats", "code": "private static float standardDeviation(float[] pos){\n  float sum=0.f;\n  float sumSqr=0.f;\n  int count=0;\n  for (  float po : pos) {\n    if (Float.isNaN(po)) {\n      continue;\n    }\n    count++;\n    sum+=po;\n    sumSqr+=po * po;\n  }\n  return (float)Math.sqrt(sumSqr / count - (sum / count) * (sum / count));\n}\n"}
{"nl": "Searches the list for <tt>value</tt>", "code": "public boolean contains(short value){\n  return lastIndexOf(value) >= 0;\n}\n"}
{"nl": "Adds an issue annotation on the source of the given text unit", "code": "private void addAnnotationOnSource(ITextUnit textUnit,Issue issue){\n  TextContainer sourceContainer=textUnit.getSource();\n  addAnnotation(sourceContainer,issue);\n}\n"}
{"nl": "Expands the cubes", "code": "public static void expand(Player player,boolean isNpcExpand){\n  if (!canExpand(player)) {\n    return;\n  }\n  PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300431,\"9\"));\n  if (isNpcExpand) {\n    player.setNpcExpands(player.getNpcExpands() + 1);\n  }\n else {\n    player.setQuestExpands(player.getQuestExpands() + 1);\n  }\n  PacketSendUtility.sendPacket(player,SM_CUBE_UPDATE.cubeSize(StorageType.CUBE,player));\n}\n"}
{"nl": "Increments the primitive value mapped to key by 1", "code": "public boolean increment(short key){\n  return adjustValue(key,(long)1);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureSendSMSNotificationQuery(VkApiClient client,ServiceActor actor,int userId,String message){\n  super(client,\"secure.sendSMSNotification\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n  userId(userId);\n  message(message);\n}\n"}
{"nl": "The actual owner of the plot", "code": "@Override @NotNull public OptionalPlayer owner(){\n  if (owner != null)   return owner;\n  OptionalPlayer cityOwner=island.getCity().owner();\n  if (cityOwner.getType() != Identity.Type.ADMINS)   return cityOwner;\n  return admin();\n}\n"}
{"nl": "ask view to prevent user input", "code": "public void lockUserInput(){\n  isLocked=true;\n  getCommandManager().setEnableCritical(false);\n  searchManager.getFindDialogAsToolBar().setEnableCritical(false);\n  frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  statusBar.setText2(\"Busy...\");\n}\n"}
{"nl": "Required for Externalizable", "code": "public DistinctPropertiesKey(){\n}\n"}
{"nl": "Sort order", "code": "public PhotosGetCommentsQueryWithExtended sort(PhotosGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Using the set of feature processors defined when creating the target feature computer, compute a feature vector for the target", "code": "public FeatureVector computeFeatureVector(Target target){\n  byte[] byteFeatures=new byte[byteValuedDiscreteFeatureProcessors.length];\n  short[] shortFeatures=new short[shortValuedDiscreteFeatureProcessors.length];\n  float[] floatFeatures=new float[continuousFeatureProcessors.length];\n  for (int i=0; i < byteValuedDiscreteFeatureProcessors.length; i++) {\n    byteFeatures[i]=byteValuedDiscreteFeatureProcessors[i].process(target);\n  }\n  for (int i=0; i < shortValuedDiscreteFeatureProcessors.length; i++) {\n    shortFeatures[i]=shortValuedDiscreteFeatureProcessors[i].process(target);\n  }\n  for (int i=0; i < continuousFeatureProcessors.length; i++) {\n    floatFeatures[i]=continuousFeatureProcessors[i].process(target);\n  }\n  return new FeatureVector(byteFeatures,shortFeatures,floatFeatures,0);\n}\n"}
{"nl": "Randomly sample a number of sequences from the data", "code": "public static List<List<List<Writable>>> sampleSequence(int count,JavaRDD<List<List<Writable>>> data){\n  return data.takeSample(false,count);\n}\n"}
{"nl": "stop Schedule", "code": "public void stopSchedule(){\n  StatLog.d(LOG_TAG,\"stopSchedule()\");\n  statiPollMgr.stop();\n}\n"}
{"nl": "Empty construct", "code": "public AuthenticationToken(){\n}\n"}
{"nl": "modify an array according to the given order", "code": "private static Long[] modify(Integer[] order,Long[] array){\n  Long[] tmp=new Long[order.length];\n  int pos=0;\n  for (  Integer id : order) {\n    if (id < array.length)     tmp[pos++]=array[id];\n  }\n  return tmp;\n}\n"}
{"nl": "Remove last characters of a string", "code": "public static String removeLast(String input,int amount){\n  if (input.length() >= amount) {\n    return input.substring(0,input.length() - amount);\n  }\n else {\n    return input;\n  }\n}\n"}
{"nl": "This method will be used to add new row", "code": "public void addRow(Object[] row) throws CarbonSortKeyAndGroupByException {\n  int currentSize=entryCount;\n  if (sortBufferSize == currentSize) {\n    LOGGER.debug(\"************ Writing to temp file ********** \");\n    intermediateFileMerger.startMergingIfPossible();\n    Object[][] recordHolderListLocal=recordHolderList;\n    try {\n      semaphore.acquire();\n      dataSorterAndWriterExecutorService.submit(new DataSorterAndWriter(recordHolderListLocal));\n    }\n catch (    InterruptedException e) {\n      LOGGER.error(\"exception occurred while trying to acquire a semaphore lock: \" + e.getMessage());\n      throw new CarbonSortKeyAndGroupByException(e.getMessage());\n    }\n    this.recordHolderList=new Object[this.sortBufferSize][];\n    this.entryCount=0;\n  }\n  recordHolderList[entryCount++]=row;\n}\n"}
{"nl": "Creates the default probability density test input values", "code": "@Override public int[] makeDensityTestPoints(){\n  return new int[]{-1,0,1,2,3,4,5,10};\n}\n"}
{"nl": "Set user id", "code": "public SecureSetCounterQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Set fields", "code": "public AppsGetCatalogQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Check, if the player has finished listed quests", "code": "private boolean checkFinishedQuests(QuestStateList qsl){\n  if (finished != null && finished.size() > 0) {\n    for (    FinishedQuestCond fqc : finished) {\n      int questId=fqc.getQuestId();\n      int reward=fqc.getReward();\n      QuestState qs=qsl.getQuestState(questId);\n      if (qs == null || qs.getStatus() != QuestStatus.COMPLETE || !checkReward(questId,reward,qs.getReward())) {\n        return false;\n      }\n      QuestTemplate template=DataManager.QUEST_DATA.getQuestById(questId);\n      if (template != null && template.isRepeatable()) {\n        if (qs.getCompleteCount() != template.getMaxRepeatCount()) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Called when the connection to the server was lost", "code": "@Override public void connectionLost(Throwable cause){\n  onDisconnect(false);\n}\n"}
{"nl": "recursively does the work", "code": "private void uncollapseSelectedNodesRec(Node v,Set<Integer> ids,Set<Integer> seen){\n  Integer id=(Integer)v.getInfo();\n  if (!seen.contains(id)) {\n    if (ids.contains(id))     seen.add(id);\n    if (id != null)     getCollapsedIds().remove(id);\n    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n      uncollapseSelectedNodesRec(e.getOpposite(v),ids,seen);\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UtilsGetServerTimeQuery(VkApiClient client){\n  super(client,\"utils.getServerTime\",Integer.class);\n}\n"}
{"nl": "Create a new instance of the fragment for a monster", "code": "public static MonsterStatusFragment newInstance(long monsterId){\n  Bundle args=new Bundle();\n  args.putLong(ARG_MONSTER_ID,monsterId);\n  MonsterStatusFragment f=new MonsterStatusFragment();\n  f.setArguments(args);\n  return f;\n}\n"}
{"nl": "mWeeks 7 mConstellations 12star mZodiacs 12", "code": "@Override protected void onInit(Bundle savedInstanceState){\n  mWeeks=getResources().getStringArray(R.array.array_search_week);\n  mConstellations=getResources().getStringArray(R.array.array_search_constellation);\n  mZodiacs=getResources().getStringArray(R.array.array_search_zodiac);\n  mCalendarView=(CalendarView)findViewById(R.id.search_kit_calendar_container);\n  mLunarDate=(TextView)findViewById(R.id.search_txt_show_lunar);\n  mSunDate=(TextView)findViewById(R.id.search_txt_show_sun);\n  mDistanceNow=(TextView)findViewById(R.id.search_txt_show_distance_now);\n  mWeek=(TextView)findViewById(R.id.search_txt_show_week);\n  mConstellation=(TextView)findViewById(R.id.search_txt_show_constellation);\n  mZodiac=(TextView)findViewById(R.id.search_txt_show_zodiac);\n  mSearchLayShow=findViewById(R.id.search_lay_show);\n  mButton=(Button)findViewById(R.id.search_btn_commit);\n  View view=findViewById(R.id.lay_top);\n  view.setLayerType(View.LAYER_TYPE_SOFTWARE,null);\n  AnimJagDrawable drawable=new AnimJagDrawable();\n  drawable.setFluCount(new Rect(0,0,0,36));\n  drawable.setColor(getResources().getColor(R.color.purple_500));\n  drawable.setAlpha(164);\n  view.setBackgroundDrawable(drawable);\n  mTopBg=drawable;\n  onInitValues();\n}\n"}
{"nl": "normalizes cycle so that cycle[1]=1", "code": "private int[] normalizeCycle(int[] cycle){\n  int[] result=new int[cycle.length];\n  int i=1;\n  while (cycle[i] != 1 && i < cycle.length)   i++;\n  int j=1;\n  while (i < cycle.length) {\n    result[j]=cycle[i];\n    i++;\n    j++;\n  }\n  i=1;\n  while (j < result.length) {\n    result[j]=cycle[i];\n    i++;\n    j++;\n  }\n  return result;\n}\n"}
{"nl": "Constant column", "code": "@Override @Test public void testConstant(){\n  double[] noVariance=new double[]{1,1,1,1};\n  double[] values=new double[]{1,2,3,4};\n  Assert.assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance,values)));\n}\n"}
{"nl": "remove the given class from the given classification", "code": "public void removeClass(int classificationId,int classId){\n  first[classificationId].put(classId,null);\n  first[classificationId].remove(classId);\n  last[classificationId].put(classId,null);\n  last[classificationId].remove(classId);\n  size[classificationId].put(classId,null);\n  size[classificationId].remove(classId);\n}\n"}
{"nl": "Decodes image file into Bitmap, resize it and save it back", "code": "private boolean resizeAndSaveImage(int maxWidth,int maxHeight) throws IOException {\n  boolean saved=false;\n  String encodeURL=DiskCacheUtils.encodeURL(uri,maxWidth,maxHeight);\n  File targetFile=configuration.diskCache.get(uri);\n  if (targetFile != null && targetFile.exists()) {\n    ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);\n    DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();\n    ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,Scheme.FILE.wrap(targetFile.getAbsolutePath()),Scheme.FILE.wrap(targetFile.getAbsolutePath()),targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);\n    Bitmap bmp=decoder.decode(decodingInfo);\n    if (bmp != null && configuration.processorForDiskCache != null) {\n      L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,memoryCacheKey);\n      bmp=configuration.processorForDiskCache.process(bmp);\n      if (bmp == null) {\n        L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,memoryCacheKey);\n      }\n    }\n    if (bmp != null) {\n      saved=configuration.diskCache.save(encodeURL,bmp);\n      bmp.recycle();\n    }\n    if (saved) {\n      targetFile.delete();\n    }\n  }\n  return saved;\n}\n"}
{"nl": "Geographic latitude of the place a user is located, in degrees (from -90 to 90)", "code": "protected UsersGetNearbyQuery latitude(float value){\n  return unsafeParam(\"latitude\",value);\n}\n"}
{"nl": "read some bytes", "code": "public int read(byte[] bytes,int offset,int len) throws IOException {\n  int count=ins.read(bytes,offset,len);\n  position+=count;\n  return count;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public ExecuteBatchQuery(VkApiClient client,Actor actor,AbstractQueryBuilder... requests){\n  super(client,\"execute\",JsonElement.class);\n  accessToken(actor.getAccessToken());\n  requests(requests);\n}\n"}
{"nl": "draw the legend", "code": "public void paint(Graphics gc0){\n  Graphics2D gc=(Graphics2D)gc0;\n  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);\n  if (sgc == null) {\n    super.paint(gc);\n    gc.setColor(Color.WHITE);\n    gc.fill(getVisibleRect());\n  }\n  draw(gc,null);\n}\n"}
{"nl": "Determine if an option was provided by the user via the CLI", "code": "public boolean hasOption(String option){\n  return commandLine.hasOption(option);\n}\n"}
{"nl": "Remove player from group (normal leave, or kick offline player)", "code": "public static final void removePlayer(Player player){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new PlayerGroupLeavedEvent(group,player));\n  }\n}\n"}
{"nl": "Instantiates a new GeoServerNode", "code": "public GeoServerNode(FileSystemInterface handler,GeoServerConnection connection){\n  super(connection.getConnectionName());\n  this.connection=connection;\n  this.handler=handler;\n}\n"}
{"nl": "Creates a ContextSet from an existing iterable of Map Entries", "code": "public static ContextSet fromEntries(Iterable<Map.Entry<String,String>> iterable){\n  if (iterable == null) {\n    throw new NullPointerException(\"iterable\");\n  }\n  MutableContextSet set=new MutableContextSet();\n  set.addAll(iterable);\n  return set.immutableCopy();\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  super.destroyView();\n}\n"}
{"nl": "for faster, read and get the contents", "code": "public static String loadDigestes(JarFile jarFile,JarEntry je) throws Exception {\n  InputStream bis=null;\n  StringBuilder sb=new StringBuilder();\n  try {\n    InputStream is=jarFile.getInputStream(je);\n    byte[] bytes=new byte[ShareConstants.BUFFER_SIZE];\n    bis=new BufferedInputStream(is);\n    int readBytes;\n    while ((readBytes=bis.read(bytes)) > 0) {\n      sb.append(new String(bytes,0,readBytes));\n    }\n  }\n  finally {\n    closeQuietly(bis);\n  }\n  return sb.toString();\n}\n"}
{"nl": "Checks whether constant handling is supported for the given type", "code": "private boolean typeSupportsConstants(Type returnType){\n  if (returnType == IntType.v() || returnType == LongType.v() || returnType == FloatType.v() || returnType == DoubleType.v())   return true;\n  if (returnType instanceof RefType)   if (((RefType)returnType).getClassName().equals(\"java.lang.String\"))   return true;\n  return false;\n}\n"}
{"nl": "Filters provided query params to one starting with provided string key", "code": "protected Map<String,Set<String>> filterQueryParamsByKey(QueryParamsParserContext context,String queryKey){\n  Map<String,Set<String>> filteredQueryParams=new HashMap<>();\n  for (  String paramName : context.getParameterNames()) {\n    if (paramName.startsWith(queryKey)) {\n      filteredQueryParams.put(paramName,context.getParameterValue(paramName));\n    }\n  }\n  return filteredQueryParams;\n}\n"}
{"nl": "Given the first byte of a vint/vlong, determine the sign", "code": "public static boolean isNegativeVInt(byte value){\n  return value < -120 || (value >= -112 && value < 0);\n}\n"}
{"nl": "wrapper method", "code": "public T onCreateViewHolder(ViewGroup parent,int itemType){\n  return onCreateViewHolderItemType(parent,ItemType.values()[itemType]);\n}\n"}
{"nl": "Find a Class using the specified ClassLoader", "code": "static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    final int lastDot=className.lastIndexOf(\".\");\n    String packageName=className;\n    if (lastDot != -1)     packageName=className.substring(0,lastDot);\n    security.checkPackageAccess(packageName);\n  }\n  Class providerClass;\n  if (cl == null) {\n    providerClass=Class.forName(className);\n  }\n else {\n    try {\n      providerClass=cl.loadClass(className);\n    }\n catch (    ClassNotFoundException x) {\n      if (doFallback) {\n        ClassLoader current=ObjectFactory.class.getClassLoader();\n        if (current == null) {\n          providerClass=Class.forName(className);\n        }\n else         if (cl != current) {\n          cl=current;\n          providerClass=cl.loadClass(className);\n        }\n else {\n          throw x;\n        }\n      }\n else {\n        throw x;\n      }\n    }\n  }\n  return providerClass;\n}\n"}
{"nl": "Override toString", "code": "@Override public String toString(){\n  return String.format(\"%s,%s,%s,%s,%d,%s,%s,%s\",cname,mname,shorty,prototype,opcount,mhash_tight,mhash_loose,caller);\n}\n"}
{"nl": "extracts the l  and u matrices from compact lu representation", "code": "protected void splitLU(RealMatrix lu,double[][] lowerData,double[][] upperData){\n  if (!lu.isSquare()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,lu.getRowDimension(),lu.getColumnDimension());\n  }\n  if (lowerData.length != lowerData[0].length) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,lowerData[0].length);\n  }\n  if (upperData.length != upperData[0].length) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,upperData.length,upperData[0].length);\n  }\n  if (lowerData.length != upperData.length) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,upperData.length);\n  }\n  if (lowerData.length != lu.getRowDimension()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,lu.getRowDimension());\n  }\n  int n=lu.getRowDimension();\n  for (int i=0; i < n; i++) {\n    for (int j=0; j < n; j++) {\n      if (j < i) {\n        lowerData[i][j]=lu.getEntry(i,j);\n        upperData[i][j]=0d;\n      }\n else       if (i == j) {\n        lowerData[i][j]=1d;\n        upperData[i][j]=lu.getEntry(i,j);\n      }\n else {\n        lowerData[i][j]=0d;\n        upperData[i][j]=lu.getEntry(i,j);\n      }\n    }\n  }\n}\n"}
{"nl": "Convert bytes to hased pair", "code": "public static int pairBytesToHashcode(byte[] pairBytes){\n  return (pairBytes[0] & 0xFF) << 8 | (pairBytes[1] & 0xFF);\n}\n"}
{"nl": "Reason for ban", "code": "public GroupsBanUserQuery reason(GroupsBanUserReason value){\n  return unsafeParam(\"reason\",value);\n}\n"}
{"nl": "Load tinker resources", "code": "public static boolean loadTinkerResources(Context context,boolean tinkerLoadVerifyFlag,String directory,Intent intentResult){\n  if (resPatchInfo == null || resPatchInfo.resArscMd5 == null) {\n    return true;\n  }\n  String resourceString=directory + \"/\" + RESOURCE_PATH+ \"/\"+ RESOURCE_FILE;\n  File resourceFile=new File(resourceString);\n  long start=System.currentTimeMillis();\n  if (tinkerLoadVerifyFlag) {\n    if (!SharePatchFileUtil.checkResourceArscMd5(resourceFile,resPatchInfo.resArscMd5)) {\n      Log.e(TAG,\"Failed to load resource file, path: \" + resourceFile.getPath() + \", expect md5: \"+ resPatchInfo.resArscMd5);\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_MD5_MISMATCH);\n      return false;\n    }\n    Log.i(TAG,\"verify resource file:\" + resourceFile.getPath() + \" md5, use time: \"+ (System.currentTimeMillis() - start));\n  }\n  try {\n    TinkerResourcePatcher.monkeyPatchExistingResources(context,resourceString);\n    Log.i(TAG,\"monkeyPatchExistingResources resource file:\" + resourceString + \", use time: \"+ (System.currentTimeMillis() - start));\n  }\n catch (  Throwable e) {\n    Log.e(TAG,\"install resources failed\");\n    try {\n      SystemClassLoaderAdder.uninstallPatchDex(context.getClassLoader());\n    }\n catch (    Throwable throwable) {\n      Log.e(TAG,\"uninstallPatchDex failed\",e);\n    }\n    intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_EXCEPTION,e);\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_RESOURCE_LOAD_EXCEPTION);\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatUsersQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"messages.getChatUsers\",Utils.buildParametrizedType(List.class,UserXtrInvitedBy.class));\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "Returns a deep copy through serialization", "code": "@SuppressWarnings(\"unchecked\") private V deepClone(final K id,final V reference){\n  try {\n    ByteArrayOutputStream baos=new ByteArrayOutputStream();\n    ObjectOutputStream oos=new ObjectOutputStream(baos);\n    oos.writeObject(reference);\n    ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());\n    ObjectInputStream ois=new ObjectInputStream(bais);\n    return (V)ois.readObject();\n  }\n catch (  Exception ex) {\n    LOGGER.error(\"deepClone() - Caught exception whilst trying to make a serialization copy of object with id \" + id,ex);\n    throw new RuntimeException(\"An error occured whilst trying to make a serialization copy of object with id \" + id,ex);\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"select items=\");\n  String what=np.getWordMatchesIgnoringCase(\"all none\");\n  np.matchRespectCase(\";\");\n  final InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\nswitch (what) {\ncase \"all\":\n    inspectorWindow.getDataTree().setSelectionInterval(0,inspectorWindow.getDataTree().getRowCount());\n  break;\ncase \"none\":\ninspectorWindow.getDataTree().clearSelection();\nbreak;\n}\n}\n"}
{"nl": "Set user id", "code": "protected AccountUnbanUserQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Checks whether the given method or one of its transitive callees has side-effects or calls a sink method", "code": "private boolean hasSideEffectsOrReadsThis(SootMethod method,Set<SootMethod> runList){\n  if (!method.hasActiveBody())   return false;\n  Boolean hasSideEffects=methodSideEffects.get(method);\n  if (hasSideEffects != null)   return hasSideEffects;\n  if (!runList.add(method))   return false;\n  if (methodIsAndroidStub(method)) {\n    methodSideEffects.put(method,false);\n    return false;\n  }\n  Local thisLocal=method.isStatic() ? null : method.getActiveBody().getThisLocal();\n  for (  Unit u : method.getActiveBody().getUnits()) {\n    if (u instanceof AssignStmt) {\n      AssignStmt assign=(AssignStmt)u;\n      if (assign.getLeftOp() instanceof FieldRef || assign.getLeftOp() instanceof ArrayRef) {\n        methodSideEffects.put(method,true);\n        return true;\n      }\n    }\n    Stmt s=(Stmt)u;\n    if (thisLocal != null)     for (    ValueBox vb : s.getUseBoxes())     if (vb.getValue() == thisLocal)     return true;\n    if (s.containsInvokeExpr()) {\n      for (Iterator<Edge> edgeIt=Scene.v().getCallGraph().edgesOutOf(u); edgeIt.hasNext(); ) {\n        Edge e=edgeIt.next();\n        if (hasSideEffectsOrReadsThis(e.getTgt().method(),runList))         return true;\n      }\n    }\n  }\n  methodSideEffects.put(method,false);\n  return false;\n}\n"}
{"nl": "upload appender file to storage server (by file name)", "code": "protected String[] upload_appender_file(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final byte cmd=ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE;\n  return this.upload_file(cmd,group_name,local_filename,file_ext_name,meta_list);\n}\n"}
{"nl": "Creates a new DataRecoveryThread object specifying the time it will sleep between each commit to the DB", "code": "public DataRecoveryThread(final PersistenceManager persistence){\n  if (persistence.getSleepTime() == -1) {\n    persistence.setSleepTime(DEFAULT_SLEEP_TIME);\n  }\n  this.persistenceManager=persistence;\n}\n"}
{"nl": "User input validations", "code": "@Override public void focusLost(FocusEvent event){\n  JTextField tf=(JTextField)event.getSource();\n  if (!(validationsobj.equalNumeric(tf.getText()))) {\n    JOptionPane.showMessageDialog(rootPane,MESSAGES.getString(\"onlynumbersaccepted.validation\"),null,JOptionPane.ERROR_MESSAGE,null);\n    tf.setText(DEFAULTS.getString(tf.getName() + \".default\"));\n    tf.requestFocus();\n  }\n}\n"}
{"nl": "Reads a number of lines from the fallback mechanism", "code": "public final List readDataBack(final int numberOfLines) throws DataFallbackException {\n  fFileController.closeFallbackOutputStream();\n  fFileController.openFallbackInputStream();\n  final List data=fFileController.readLines(numberOfLines,fallbackObj);\n  return data;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  String regularExpression=ProgramProperties.get(MeganProperties.FINDREAD,\"\");\n  regularExpression=JOptionPane.showInputDialog(inspectorWindow.getFrame(),\"Enter regular expression for read names:\",regularExpression);\n  if (regularExpression != null && regularExpression.trim().length() != 0) {\n    regularExpression=regularExpression.trim();\n    ProgramProperties.put(MeganProperties.FINDREAD,regularExpression);\n    execute(\"show read='\" + regularExpression + \"';\");\n  }\n}\n"}
{"nl": "Returns true if the given component is a databinding layout tag", "code": "private static boolean isDataBindingLayout(@NotNull NlComponent component){\n  return component.getTagName().equals(TAG_LAYOUT);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountGetBannedQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getBanned\",GetBannedResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "append file to storage server (by file buff)", "code": "public int append_file(String group_name,String appender_filename,byte[] file_buff,int offset,int length) throws IOException, MyException {\n  return this.do_append_file(group_name,appender_filename,length,new UploadBuff(file_buff,offset,length));\n}\n"}
{"nl": "Constructs a new token", "code": "public Token(TokenType type,int start,int length){\n  this.type=type;\n  this.start=start;\n  this.length=length;\n  this.pairValue=0;\n}\n"}
{"nl": "Calculate XenDesktop vCPU requirements for deployment", "code": "public static int calculateXenvCPU(int deliveryControllerCount,int vCenterServerCount){\n  final int dc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.controller.vcpu.default\")) * deliveryControllerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.vcenter.vcpu.default\")) * vCenterServerCount;\n  return dc + vc;\n}\n"}
{"nl": "Parses a legacy text", "code": "public static ChatComponentText chatComponentFromLegacyText(String message){\n  ChatComponentText base;\n  String[] parts=message.split(Character.toString(LegacyFormat.MARK));\n  if (parts.length == 1)   return new ChatComponentText(message);\n  base=new ChatComponentText(parts[0]);\n  ChatStyle chatStyle=new ChatStyle();\n  for (int i=1; i < parts.length; i++) {\n    String current=parts[i];\n    char code=current.charAt(0);\n    String text=current.substring(1);\n    if (code >= '0' && code <= '9' || code >= 'a' && code <= 'f' || code == 'r') {\n      chatStyle=new ChatStyle();\n      chatStyle.setColor(formattingMap.get(code));\n    }\n else {\n      chatStyle=chatStyle.createDeepCopy();\nswitch (code) {\ncase 'k':\n        chatStyle.setObfuscated(true);\n      break;\ncase 'l':\n    chatStyle.setBold(true);\n  break;\ncase 'm':\nchatStyle.setStrikethrough(true);\nbreak;\ncase 'n':\nchatStyle.setUnderlined(true);\nbreak;\ncase 'o':\nchatStyle.setItalic(true);\nbreak;\n}\n}\nbase.appendSibling(new ChatComponentText(text).setChatStyle(chatStyle));\n}\nreturn base;\n}\n"}
{"nl": "Initialize an AirMapFlightStatus with default values", "code": "public AirMapFlightStatus(){\n}\n"}
{"nl": "Tree map implementation", "code": "public static <K,T,V>MultiDimensionalMap<K,T,V> newTreeBackedMap(){\n  return new MultiDimensionalMap<>(new TreeMap<Pair<K,T>,V>());\n}\n"}
{"nl": "Create a new deprecated attribute", "code": "public DeprecatedAttr(){\n}\n"}
{"nl": "calc the gradients based on the n-step rewards", "code": "@Override public Gradient[] calcGradient(IActorCritic iac,Stack<MiniTrans<Integer>> rewards){\n  MiniTrans<Integer> minTrans=rewards.pop();\n  int size=rewards.size();\n  int[] shape=getHistoryProcessor() == null ? mdp.getObservationSpace().getShape() : getHistoryProcessor().getConf().getShape();\n  int[] nshape=Learning.makeShape(size,shape);\n  INDArray input=Nd4j.create(nshape);\n  INDArray targets=Nd4j.create(size,1);\n  INDArray logSoftmax=Nd4j.create(size,mdp.getActionSpace().getSize());\n  double r=minTrans.getReward();\n  for (int i=0; i < size; i++) {\n    minTrans=rewards.pop();\n    r=minTrans.getReward() + conf.getGamma() * r;\n    input.putRow(i,minTrans.getObs());\n    targets.putScalar(i,r);\n    INDArray row=minTrans.getOutput()[1];\n    double prevV=row.getDouble(minTrans.getAction());\n    double expectedV=minTrans.getOutput()[0].getDouble(0);\n    double advantage=r - expectedV;\n    row=row.putScalar(minTrans.getAction(),prevV + advantage);\n    logSoftmax.putRow(i,row);\n  }\n  return iac.gradient(input,new INDArray[]{targets,logSoftmax});\n}\n"}
{"nl": "Creates an appropriate smelting event taking care of experience", "code": "public Smelt(EntityPlayer player,SlotFurnaceOutput slot,float xp){\n  super(player,slot);\n  this.xp=xp;\n}\n"}
{"nl": "this method's database for processing the view about user information", "code": "public boolean AddQueryDataSet(String protocol,double packetSize){\n  for (int i=0; i < queryDataSet.size(); i++)   if (queryDataSet.get(i).getName().equals(protocol)) {\n    queryDataSet.get(i).setPieValue(queryDataSet.get(i).getPieValue() + packetSize * Settings.nOnePacketStringSize);\n    return true;\n  }\n  Platform.runLater(null);\n  return false;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedSearchQuery(VkApiClient client){\n  super(client,\"newsfeed.search\",SearchResponse.class);\n}\n"}
{"nl": "example for subscribing to observable, which emits many events", "code": "private void observeChangingBook(){\n  Observable<Book> observable=bookRepository.observeChangingBooks().filter(null).observeOn(AndroidSchedulers.mainThread());\n  subscribe(observable,null,null,null);\n}\n"}
{"nl": "Read up to CRLF, return false if EOF", "code": "private boolean readLine(InputStream in,StringBuffer buf) throws IOException {\n  while (true) {\n    int c=in.read();\n    if (c < 0)     return (buf.length() > 0);\n    if (c == '\\r') {\n      in.mark(1);\n      c=in.read();\n      if (c != '\\n')       in.reset();\n      return (true);\n    }\n    if (c == '\\n')     return (true);\n    buf.append((char)c);\n  }\n}\n"}
{"nl": "deletes the object", "code": "@Override public void deleteObject(String sObjectName,String sObjectCategory){\n  int index;\n  super.deleteObject(sObjectName,sObjectCategory);\n  ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);\n  index=nlist.indexOf(sObjectName);\n  nlist.remove(index);\n  super.saveObject(nlist,sObjectCategory,ListCategoryName);\n}\n"}
{"nl": "Checks if a dragging operation is currently happening", "code": "public boolean isDragging(){\n  return transferHandler.isDragging();\n}\n"}
{"nl": "disable some of the samples", "code": "public void disableSamples(Collection<String> sampleNames){\n  int size=disabledSamples.size();\n  Set<String> newDisabled=new HashSet<>();\n  newDisabled.addAll(disabledSamples);\n  newDisabled.addAll(sampleNames);\n  if (newDisabled.size() != size) {\n    if (originalData == null) {\n      originalData=new DataTable();\n      originalData.copy(this);\n    }\n    copyEnabled(newDisabled,originalData);\n    disabledSamples.clear();\n    disabledSamples.addAll(newDisabled);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetSchoolClassesQuery(VkApiClient client){\n  super(client,\"database.getSchoolClasses\",Utils.buildParametrizedType(List.class,Utils.buildParametrizedType(List.class,JsonObject.class)));\n}\n"}
{"nl": "Inner method which handles the CommandTagHandle Requests", "code": "Collection<? extends ClientRequestResult> handleCommandHandleRequest(final ClientRequest commandRequest){\nswitch (commandRequest.getResultType()) {\ncase TRANSFER_COMMAND_HANDLES_LIST:\n    return commandExecutionManager.processRequest(commandRequest.getTagIds());\ndefault :\n  LOG.error(\"handleCommandHandleRequest() - Could not generate response message. Unknown enum ResultType \" + commandRequest.getResultType());\n}\nreturn null;\n}\n"}
{"nl": "Set fields", "code": "public WallSearchQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Timeout all thread that exceeded their time to live", "code": "private void timeout() throws Exception {\n  int t=_timerLogical++;\n  _time+=_waitInterval;\n  Map<WatchedObject,Collection<WatchedObject>> watchedObjects=new HashMap<WatchedObject,Collection<WatchedObject>>();\n  for (Iterator<WeakReference<WatchedObject>> iter=_watchedObjects.iterator(); iter.hasNext(); ) {\n    WeakReference<WatchedObject> w=iter.next();\n    WatchedObject watched=w.get();\n    if (watched == null || !watched.isInUse()) {\n      iter.remove();\n      continue;\n    }\n    int time=watched.getTime();\n    if (time == UNWATCHED)     continue;\n    if (t - time < _timeoutLogical)     continue;\n    if (_logger.isLoggable(Level.FINE)) {\n      Level logLevel=Level.FINEST;\n      if (Group.REQUEST_GROUP.name().equals(_name) || Group.RESPONSE_GROUP.name().equals(_name)) {\n        logLevel=Level.FINE;\n      }\n else       if (Group.IDLE_GROUP.name().equals(_name)) {\n        logLevel=Level.FINEST;\n      }\n      _logger.log(logLevel,_name + \" - \" + (t - time) * _waitInterval + \" Timeout occurred, max allowed = \" + _timeout);\n    }\n    add(watchedObjects,watched);\n  }\n  if (!watchedObjects.isEmpty())   fireTimeoutOccured(watchedObjects);\n}\n"}
{"nl": "Constructs new instance of <tt>CM_SHOW_DIALOG </tt> packet", "code": "public CM_SHOW_DIALOG(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Return the length of the given path", "code": "private static int lengthOfPath(Path2D.Float path){\n  FlatteningPathIterator f=new FlatteningPathIterator(path.getPathIterator(null),1);\n  double sum=0;\n  float x1, x2, y1, y2;\n  float[] coords=new float[6];\n  f.currentSegment(coords);\n  x1=coords[0];\n  y1=coords[1];\n  f.next();\n  do {\n    f.currentSegment(coords);\n    f.next();\n    x2=coords[0];\n    y2=coords[1];\n    sum+=Math.hypot(x2 - x1,y2 - y1);\n    x1=x2;\n    y1=y2;\n  }\n while (!f.isDone());\n  return (int)sum;\n}\n"}
{"nl": "Checks if the TEST mode is on", "code": "private boolean isTestMode(){\n  return ((System.getProperty(\"c2mon.server.testMode\")) != null && (System.getProperty(\"c2mon.server.testMode\").equals(\"true\")));\n}\n"}
{"nl": "write long, little endian", "code": "public void writeLongLittleEndian(long a) throws IOException {\n  ensureSize(size + 8);\n  bytes[size++]=((byte)(a));\n  bytes[size++]=((byte)(a >> 8));\n  bytes[size++]=((byte)(a >> 16));\n  bytes[size++]=((byte)(a >> 24));\n  bytes[size++]=((byte)(a >> 32));\n  bytes[size++]=((byte)(a >> 40));\n  bytes[size++]=((byte)(a >> 48));\n  bytes[size++]=((byte)(a >> 56));\n}\n"}
{"nl": "Gets a SerialMessage with the MULTI_ASSOCIATIONCMD_REMOVE command to remove all nodes", "code": "public SerialMessage clearAssociationMessage(int group){\n  logger.debug(\"NODE {}: Creating new message for command MULTI_ASSOCIATIONCMD_REMOVE node all, endpoint all, group {}\",getNode().getNodeId(),group);\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);\n  ByteArrayOutputStream outputData=new ByteArrayOutputStream();\n  outputData.write(this.getNode().getNodeId());\n  outputData.write(3);\n  outputData.write(getCommandClass().getKey());\n  outputData.write(MULTI_ASSOCIATIONCMD_REMOVE);\n  outputData.write(group);\n  result.setMessagePayload(outputData.toByteArray());\n  return result;\n}\n"}
{"nl": "Verify that the list of substrings appear in the order provided in a string", "code": "public static int verifyOrder(String input,String[] subStrings){\n  int prev=-1;\n  for (int i=0; i < subStrings.length; i++) {\n    int current=input.indexOf(subStrings[i]);\n    if (current < prev) {\n      return i;\n    }\n else {\n      prev=current;\n    }\n  }\n  return -1;\n}\n"}
{"nl": "\"1\" - return likes info", "code": "public MarketGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "Load the given unit file", "code": "public void load(String fileName) throws IOException, MaryConfigurationException {\n  DataInputStream dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));\n  hdr=new MaryHeader(dis);\n  if (hdr.getType() != MaryHeader.UNITS) {\n    throw new MaryConfigurationException(\"File [\" + fileName + \"] is not a valid Mary Units file.\");\n  }\n  numberOfUnits=dis.readInt();\n  if (numberOfUnits < 0) {\n    throw new MaryConfigurationException(\"File [\" + fileName + \"] has a negative number of units. Aborting.\");\n  }\n  sampleRate=dis.readInt();\n  if (sampleRate < 0) {\n    throw new MaryConfigurationException(\"File [\" + fileName + \"] has a negative number sample rate. Aborting.\");\n  }\n  units=new Unit[numberOfUnits];\n  for (int i=0; i < numberOfUnits; i++) {\n    long startTime=dis.readLong();\n    int duration=dis.readInt();\n    units[i]=new Unit(startTime,duration,i);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketEditQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,String name,String description,int categoryId,float price,int mainPhotoId){\n  super(client,\"market.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  name(name);\n  description(description);\n  categoryId(categoryId);\n  price(price);\n  mainPhotoId(mainPhotoId);\n}\n"}
{"nl": "Set university faculty", "code": "public UsersSearchQuery universityFaculty(Integer value){\n  return unsafeParam(\"university_faculty\",value);\n}\n"}
{"nl": "send ACTIVE_TEST command to server, test if network is ok and the server is alive", "code": "public static boolean activeTest(Socket sock) throws IOException {\n  byte[] header;\n  header=packHeader(FDFS_PROTO_CMD_ACTIVE_TEST,0,(byte)0);\n  sock.getOutputStream().write(header);\n  RecvHeaderInfo headerInfo=recvHeader(sock.getInputStream(),TRACKER_PROTO_CMD_RESP,0);\n  return headerInfo.errno == 0 ? true : false;\n}\n"}
{"nl": "Create inline data sources", "code": "private void createUserLayerDataSources(){\n  if (inlineDataSource == null) {\n    ConsoleManager.getInstance().error(this,\"No inline data source creation object set\");\n  }\n else {\n    userLayerDataSourceInfo=inlineDataSource.connect(this.editorFileInterface);\n    if (userLayerDataSourceInfo != null) {\n      for (      DataSourceInfo dsInfo : userLayerDataSourceInfo) {\n        if (dsInfo.hasData()) {\n          dsInfo.populateFieldMap();\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Does nothing, because compensation log record is redo-Only", "code": "@Override public void undo(Transaction tx){\n}\n"}
{"nl": "Logs a debug message to the console or logcat", "code": "public static void debug(Object message,Throwable exception){\n  Gdx.app.debug(TAG,String.valueOf(message),exception);\n}\n"}
{"nl": "Determines if the passed day of week is weekend", "code": "static boolean isWeekend(int dayOfWeek,@Constants.Weekend int weekendValue){\nswitch (weekendValue) {\ncase Constants.Weekend.SATURDAY_SUNDAY:\n    return Calendar.SATURDAY == dayOfWeek || Calendar.SUNDAY == dayOfWeek;\ncase Constants.Weekend.FRIDAY_SATURDAY:\n  return Calendar.FRIDAY == dayOfWeek || Calendar.SATURDAY == dayOfWeek;\ncase Constants.Weekend.THURSDAY_FRIDAY:\nreturn Calendar.THURSDAY == dayOfWeek || Calendar.FRIDAY == dayOfWeek;\ncase Constants.Weekend.FRIDAY_ONLY:\nreturn Calendar.FRIDAY == dayOfWeek;\ncase Constants.Weekend.SATURDAY_ONLY:\nreturn Calendar.SATURDAY == dayOfWeek;\ncase Constants.Weekend.SUNDAY_ONLY:\nreturn Calendar.SUNDAY == dayOfWeek;\ndefault :\nreturn false;\n}\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountSetOnlineQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.setOnline\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Check if player can learn more expert crafting skill or not (max is 2)", "code": "public static boolean canLearnMoreExpertCraftingSkill(Player player){\n  return getTotalExpertCraftingSkills(player) + getTotalMasterCraftingSkills(player) < CraftConfig.MAX_EXPERT_CRAFTING_SKILLS;\n}\n"}
{"nl": "Opens context menu on desired WebElement", "code": "public AemContextMenu open(final WebElement webElement){\n  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);\n  return this;\n}\n"}
{"nl": "gets a new director", "code": "public static Director newProject(boolean visible){\n  return newProject(visible,false);\n}\n"}
{"nl": "Instantiate with the given file as a uri", "code": "public InputStreamInputSplit(InputStream is,String path){\n  this.is=is;\n  this.location=new URI[]{URI.create(path)};\n}\n"}
{"nl": "set theme of settings screen", "code": "public void useDarkTheme(boolean flag){\n  MaterialPrefUtil.useDarkTheme(flag);\n}\n"}
{"nl": "get current array", "code": "private int dataIndex(long index){\n  return (int)(index >>> BITS);\n}\n"}
{"nl": "Load the Token by the query", "code": "public static Beans<AuthToken> load(W q,int s,int n){\n  return Helper.load(q,s,n,AuthToken.class);\n}\n"}
{"nl": "Move members between alliance groups", "code": "public static void changeMemberGroup(Player player,int firstPlayer,int secondPlayer,int allianceGroupId){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  Preconditions.checkNotNull(alliance,\"Alliance should not be null for group change\");\n  if (alliance.isLeader(player) || alliance.isViceCaptain(player)) {\n    alliance.onEvent(new ChangeMemberGroupEvent(alliance,firstPlayer,secondPlayer,allianceGroupId));\n  }\n else {\n    PacketSendUtility.sendMessage(player,\"You do not have the authority for that.\");\n  }\n}\n"}
{"nl": "Set need sign", "code": "public FriendsAreFriendsQuery needSign(Boolean value){\n  return unsafeParam(\"need_sign\",value);\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n"}
{"nl": "Create MainNavigator", "code": "public MainNavigator(FragmentActivity activity,DrawerLayout drawer){\n  this.activity=activity;\n  this.drawer=drawer;\n}\n"}
{"nl": "reorder samples", "code": "public void reorderSamples(Collection<String> newOrder) throws IOException {\n  final Integer[] order=new Integer[newOrder.size()];\n  int i=0;\n  for (  String sample : newOrder) {\n    int pid=Basic.getIndex(sample,getSampleNames());\n    if (pid == -1)     throw new IOException(\"Can't reorder: unknown sample: \" + sample);\n    order[i++]=pid;\n  }\n  final String[] datasetNames=modify(order,getSampleNames());\n  final Long[] uids=modify(order,getSampleUIds());\n  final Integer[] sizes=modify(order,getSampleSizes());\n  final BlastMode[] modes=modify(order,getBlastModes());\n  setSamples(datasetNames,uids,sizes,modes);\n  final Map<String,Map<Integer,Integer[]>> classification2Class2Counts=getClassification2Class2Counts();\n  for (  String classification : classification2Class2Counts.keySet()) {\n    final Map<Integer,Integer[]> class2Counts=classification2Class2Counts.get(classification);\n    final Set<Integer> keys=new HashSet<>();\n    keys.addAll(class2Counts.keySet());\n    for (    Integer classId : keys) {\n      Integer[] values=class2Counts.get(classId);\n      if (values != null) {\n        values=modify(order,values);\n        class2Counts.put(classId,values);\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetMembersQuery(VkApiClient client,Actor actor){\n  super(client,\"groups.getMembers\",GetMembersResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LikesAddQuery(VkApiClient client,UserActor actor,LikesType type,int itemId){\n  super(client,\"likes.add\",AddResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  itemId(itemId);\n}\n"}
{"nl": "Scale based on min,max", "code": "public static DataFrame normalize(DataFrame dataFrame){\n  return normalize(dataFrame,0,1,Collections.<String>emptyList());\n}\n"}
{"nl": "Updates the build version(code and name) fields", "code": "public void updateBuildVersionFields(){\n  if (apkAbsolutePath != null) {\n    binary.initPath(apkAbsolutePath);\n  }\n}\n"}
{"nl": "only for use as comparable item", "code": "public UpdateItem(){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosConfirmTagQuery(VkApiClient client,UserActor actor,String photoId,int tagId){\n  super(client,\"photos.confirmTag\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n  tagId(tagId);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showGroups=\" + (!isSelected()) + \" style=ellipses;\");\n}\n"}
{"nl": "write contour into a lf0 file in SPTK format", "code": "public void writeIntoSPTKLF0File(String sptkFileName) throws IOException {\n  LEDataOutputStream lf0Data=new LEDataOutputStream(new BufferedOutputStream(new FileOutputStream(sptkFileName)));\n  for (int i=0; i < this.contour.length; i++) {\n    double f0Val=contour[i];\n    if (contour[i] == 0.0f) {\n      lf0Data.writeFloat(NEGATIVE_MAXIMUM);\n    }\n else {\n      lf0Data.writeFloat((float)Math.log(contour[i]));\n    }\n  }\n  lf0Data.flush();\n  lf0Data.close();\n}\n"}
{"nl": "Checks configuration validity", "code": "public void validate(){\n  if (USE_OLD_GUARANTEED_NOTIFICATIONS && isGuaranteedNotifications() && isFifo())   throw new UnsupportedOperationException(\"Notify delivery in case of a server failure can not be guaranteed for FIFO notifications.\");\n  if (isDurableNotifications()) {\n    if (triggerNotifyTemplate != null && triggerNotifyTemplate)     throw new UnsupportedOperationException(\"Notify template cannot be triggered at backup space in durable notifications\");\n    if (replicateNotifyTemplate != null && !replicateNotifyTemplate)     throw new UnsupportedOperationException(\"Notify template is always replicated in durable notifications\");\n  }\n else {\n    if (isBatching() && getBatchSize() != getBatchPendingThreshold())     throw new UnsupportedOperationException(\"Batch pending threshold cannot be different than batch size in non-durable notification\");\n  }\n}\n"}
{"nl": "Change to guard mode", "code": "public static final void guardMode(final Summon summon){\n  summon.getController().cancelCurrentSkill();\n  summon.setMode(SummonMode.GUARD);\n  Player master=summon.getMaster();\n  PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_GUARD_MODE(summon.getNameId()));\n  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));\n  summon.getLifeStats().triggerRestoreTask();\n}\n"}
{"nl": "Convenience method for checking if the given player can sleep at the given position", "code": "public static boolean handle(EntityPlayer player,BlockPos pos){\n  SleepCheck event=new SleepCheck(player,pos,player.worldObj.getBlockState(pos).getBlock() == Blocks.BED);\n  OpenModLoader.getEventBus().post(event);\n  return event.result;\n}\n"}
{"nl": "Converts this object to a string", "code": "public String toString(){\n  return \"UnitConcatenator\";\n}\n"}
{"nl": "Read an Object from a byte array", "code": "public static Object readObject(byte[] data) throws IOException, ClassNotFoundException {\n  ByteArrayInputStream buffer=new ByteArrayInputStream(data);\n  ObjectInputStreamExt in=new ObjectInputStreamExt(buffer);\n  Object answer=in.readObject();\n  in.close();\n  return answer;\n}\n"}
{"nl": "TODO: CHECK", "code": "public Object clone(){\n  System.err.println(this.getClass().getName() + \": The clone() method should be checked...\");\n  DocumentNGramDistroGraph gRes=new DocumentNGramDistroGraph(MinSize,MaxSize,CorrelationWindow);\n  gRes.DataString=DataString;\n  gRes.DegradedEdges.putAll(this.DegradedEdges);\n  gRes.NGramGraphArray=this.NGramGraphArray.clone();\n  gRes.Normalizer=this.Normalizer;\n  gRes.TextPreprocessor=this.TextPreprocessor;\n  gRes.WordEvaluator=this.WordEvaluator;\n  gRes.EdgeDistros=(HashMap)this.EdgeDistros.clone();\n  return gRes;\n}\n"}
{"nl": "hide the toast", "code": "public static void hideToast(){\n  if (null != toast) {\n    toast.cancel();\n  }\n}\n"}
{"nl": "add interval to the end of intervals", "code": "public void appendInterval(PraatInterval interval){\n  this.intervals.add(interval);\n}\n"}
{"nl": "Converts a byte to a hexadecimal string representation", "code": "public static String b2hex(byte b){\n  return String.format(\"%02X \",b);\n}\n"}
{"nl": "<p>Starts the presenter, searching for a specific user's query</p>", "code": "public void search(String query){\n  try {\n    presenter.start(query);\n  }\n catch (  InternetConnectionException e) {\n    Log.e(TAG,e.getMessage(),e);\n    Toast.makeText(mActivity,e.getMessage(),Toast.LENGTH_LONG).show();\n  }\n  mActivity.showLoaderWithTitleAndDescription(getString(R.string.main_screen),getString(R.string.searching));\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ProjectManager.getNumberOfProjects() == 1 && ((Director)ProjectManager.getProjects().get(0)).getDocument().getNumberOfSamples() == 0;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetTagsQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.getTags\",Utils.buildParametrizedType(List.class,PhotoTag.class));\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n"}
{"nl": "Create a compatible schema and rdd for datavec", "code": "public static Pair<Schema,JavaRDD<List<Writable>>> toRecords(DataFrame dataFrame){\n  Schema schema=fromStructType(dataFrame.schema());\n  return new Pair<>(schema,dataFrame.javaRDD().map(new ToRecord(schema)));\n}\n"}
{"nl": "Change to rest mode", "code": "public static final void restMode(final Summon summon){\n  summon.getController().cancelCurrentSkill();\n  summon.setMode(SummonMode.REST);\n  Player master=summon.getMaster();\n  PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_REST_MODE(summon.getNameId()));\n  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));\n  summon.getLifeStats().triggerRestoreTask();\n}\n"}
{"nl": "Populate process function field", "code": "@Override public void populateField(ProcessFunction value){\n  processFunction=value;\n  if (textField != null) {\n    textField.setText(ParameterFunctionUtils.getString(processFunction));\n    UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));\n    oldValueObj=value;\n    valueUpdated();\n  }\n}\n"}
{"nl": "Creates the default inverse cumulative probability density test expected values", "code": "@Override public double[] makeInverseCumulativeTestValues(){\n  return new double[]{0,0.210212602629,0.554298076728,0.831211613487,1.14547622606,1.61030798696,20.5150056524,15.0862724694,12.8325019940,11.0704976935,9.23635689978,Double.POSITIVE_INFINITY};\n}\n"}
{"nl": "TODO: Document", "code": "public void prune(double dMinCoexistenceImportance){\n}\n"}
{"nl": "Returns the result of applying the given row permutation to the matrix", "code": "protected FieldMatrix<Fraction> permuteRows(FieldMatrix<Fraction> matrix,int[] permutation){\n  if (!matrix.isSquare()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  if (matrix.getRowDimension() != permutation.length) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,matrix.getRowDimension(),permutation.length);\n  }\n  int n=matrix.getRowDimension();\n  int m=matrix.getColumnDimension();\n  Fraction out[][]=new Fraction[m][n];\n  for (int i=0; i < n; i++) {\n    for (int j=0; j < m; j++) {\n      out[i][j]=matrix.getEntry(permutation[i],j);\n    }\n  }\n  return new Array2DRowFieldMatrix<Fraction>(out);\n}\n"}
{"nl": "Specify the color resource for the outer circle", "code": "public TapTarget outerCircleColor(@ColorRes int color){\n  this.outerCircleColor=color;\n  return this;\n}\n"}
{"nl": "obj --> json", "code": "public String toJson() throws JsonGenerationException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.writeValueAsString(this);\n}\n"}
{"nl": "Return new ColorConversion object", "code": "public ColorConversionTransform(Random random,int conversionCode){\n  super(random);\n  this.conversionCode=conversionCode;\n  converter=new OpenCVFrameConverter.ToMat();\n}\n"}
{"nl": "For internal usage only", "code": "public void add(long value){\n  metric.add(value);\n}\n"}
{"nl": "Used onDBLoad", "code": "public BrokerItem(Item item,int itemId,int itemUniqueId,long itemCount,String itemCreator,long price,String seller,int sellerId,BrokerRace itemBrokerRace,boolean isSold,boolean isSettled,Timestamp expireTime,Timestamp settleTime,boolean partSale){\n  this.item=item;\n  this.itemId=itemId;\n  this.itemUniqueId=itemUniqueId;\n  this.itemCount=itemCount;\n  this.itemCreator=itemCreator;\n  this.price=price;\n  this.seller=seller;\n  this.sellerId=sellerId;\n  this.itemBrokerRace=itemBrokerRace;\n  this.partSale=partSale;\n  if (item == null) {\n    this.isSold=true;\n    this.isSettled=true;\n  }\n else {\n    this.isSold=isSold;\n    this.isSettled=isSettled;\n  }\n  this.expireTime=expireTime;\n  this.settleTime=settleTime;\n  this.state=PersistentState.NOACTION;\n}\n"}
{"nl": "This will add a new announcement to the DB and change the current announcement", "code": "private void changeAnnouncement(Player activePlayer,String announcement){\n  if (legionRestrictions.canChangeAnnouncement(activePlayer.getLegionMember(),announcement)) {\n    Legion legion=activePlayer.getLegion();\n    Timestamp currentTime=new Timestamp(System.currentTimeMillis());\n    storeNewAnnouncement(legion.getLegionId(),currentTime,announcement);\n    legion.addAnnouncementToList(currentTime,announcement);\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_WRITE_NOTICE_DONE);\n    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x05,(int)(System.currentTimeMillis() / 1000),announcement));\n  }\n}\n"}
{"nl": "release SLHolder for this scan", "code": "public void releaseScan() throws SAException {\n}\n"}
{"nl": "Required for Externalizable", "code": "public AbstractSpaceResponseInfo(){\n}\n"}
{"nl": "Checks if the update header can be showing?", "code": "private boolean canShowUpdaterView(int deltaY){\n  final int firstVisibleItem=getFirstVisiblePosition();\n  final int fistViewTop=getChildAt(0).getTop();\n  final int topPadding=getListPaddingTop();\n  return (firstVisibleItem == 0 && fistViewTop >= topPadding && deltaY > 0);\n}\n"}
{"nl": "convert byte array to Bitmap", "code": "public static Bitmap byteToBitmap(byte[] b,int targetWidth,int targeHeight){\n  if (b == null || b.length == 0) {\n    return null;\n  }\n  final BitmapFactory.Options options=new BitmapFactory.Options();\n  options.inJustDecodeBounds=true;\n  BitmapFactory.decodeByteArray(b,0,b.length,options);\n  int sourceWidth=options.outWidth;\n  int sourceHeight=options.outHeight;\n  options.inJustDecodeBounds=false;\n  int inSampleSize=1;\n  while (sourceWidth / inSampleSize > targetWidth) {\n    inSampleSize++;\n  }\n  while (sourceHeight / inSampleSize > targeHeight) {\n    inSampleSize++;\n  }\n  if (inSampleSize <= 0) {\n    inSampleSize=1;\n  }\n  options.inSampleSize=inSampleSize;\n  Bitmap bitmap=BitmapFactory.decodeByteArray(b,0,b.length,options);\n  return bitmap;\n}\n"}
{"nl": "Return detailed information about photos", "code": "protected PhotosGetAllQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Apply the result - store the result (readByIds) or count the cleared objects (clearByIds)", "code": "public void applyResult(AnswerPacket answerPacket,int resultIndex){\n  if (accumulate()) {\n    _results[resultIndex]=answerPacket.m_EntryPacket;\n  }\n else {\n    if (answerPacket.m_EntryPacket != null)     _successCount++;\n  }\n}\n"}
{"nl": "Create VarTraversals to represent a Var", "code": "VarTraversals(VarAdmin var){\n  if (var.isUserDefinedName()) {\n    shortcutTraversal.setInvalid();\n  }\n  String start=var.getName();\n  var.getProperties().forEach(null);\n}\n"}
{"nl": "Enroll a new query into the queue", "code": "public synchronized void addNewQuery(QueryID queryID,String indexName,int shardOrd,String text,byte[] returnNodeID){\n  QueryAndID query=queryQueue.remove(queryID);\n  if (query != null) {\n    assert query.state == 1;\n    assert query.nodeID != null;\n    query.returnNodeID=returnNodeID;\n    query.text=text;\n    queryDone.add(query);\n  }\n else {\n    queryQueue.put(queryID,new QueryAndID(queryID,indexName,shardOrd,text,returnNodeID));\n    notify();\n  }\n}\n"}
{"nl": "determine the max levels of the tree", "code": "private int determineMaxLevel(PhyloTree tree){\n  return determineMaxLevelRec(0,tree.getRoot());\n}\n"}
{"nl": "Initialize an AirMapFlightStatus from JSON", "code": "public AirMapFlightStatus(JSONObject statusJson){\n  constructFromJson(statusJson);\n}\n"}
{"nl": "Verify the selection of the interface method", "code": "private void verifyValidation(){\n  setErrorMessage(null);\n  setValid(getErrorMessage() == null);\n}\n"}
{"nl": "Create an <code>unsigned byte</code>", "code": "public static UByte ubyte(short value) throws NumberFormatException {\n  return UByte.valueOf(value);\n}\n"}
{"nl": "modify the given set of collapsedIds so that the toUncollapse ids are uncollapsed", "code": "public void uncollapse(Set<Integer> toUncollapse,Set<Integer> collapsedIds){\n  Set<Integer> newCollapsed=new HashSet<>();\n  for (Node v=getFirstNode(); v != null; v=v.getNext()) {\n    int vId=(Integer)v.getInfo();\n    if (toUncollapse.contains(vId) && collapsedIds.contains(vId)) {\n      for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n        Node w=e.getTarget();\n        newCollapsed.add((Integer)w.getInfo());\n      }\n    }\n  }\n  collapsedIds.removeAll(toUncollapse);\n  collapsedIds.addAll(newCollapsed);\n}\n"}
{"nl": "Find a Class using the specified ClassLoader", "code": "static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    final int lastDot=className.lastIndexOf(\".\");\n    String packageName=className;\n    if (lastDot != -1)     packageName=className.substring(0,lastDot);\n    security.checkPackageAccess(packageName);\n  }\n  Class providerClass;\n  if (cl == null) {\n    providerClass=Class.forName(className);\n  }\n else {\n    try {\n      providerClass=cl.loadClass(className);\n    }\n catch (    ClassNotFoundException x) {\n      if (doFallback) {\n        ClassLoader current=ObjectFactory.class.getClassLoader();\n        if (current == null) {\n          providerClass=Class.forName(className);\n        }\n else         if (cl != current) {\n          cl=current;\n          providerClass=cl.loadClass(className);\n        }\n else {\n          throw x;\n        }\n      }\n else {\n        throw x;\n      }\n    }\n  }\n  return providerClass;\n}\n"}
{"nl": "get all splits in a new list", "code": "public List asList(){\n  List result=new LinkedList();\n  for (Iterator it=iterator(); it.hasNext(); ) {\n    result.add(it.next());\n  }\n  return result;\n}\n"}
{"nl": "Closes this audio player", "code": "public synchronized void close(){\n  done=true;\n  if (line != null && line.isOpen()) {\n    line.close();\n    line=null;\n    notify();\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "@Override public boolean isApplicable(){\n  if (ProgramProperties.get(\"always-allow-open-fviewer\",false))   return true;\n  final Document doc=((Director)getDir()).getDocument();\n  return doc.getActiveViewers().contains(cName);\n}\n"}
{"nl": "Method to take an input json string and output a MapWritable with arrays as WritableArrayWritable objects", "code": "public static MapWritable jsonStringToMapWritableWithWritableArrayWritable(String jsonString,DataSchema dataSchema){\n  MapWritable value=new MapWritable();\n  JSONParser jsonParser=new JSONParser();\n  try {\n    JSONObject jsonObj=(JSONObject)jsonParser.parse(jsonString);\n    for (    Object key : jsonObj.keySet()) {\n      Text mapKey=new Text(key.toString());\n      if (jsonObj.get(key) != null) {\n        logger.debug(\"key = \" + key.toString());\n        if (dataSchema.isArrayElement((String)key)) {\n          WritableArrayWritable mapValue=StringUtils.jsonArrayStringToWritableArrayWritable(jsonObj.get(key).toString());\n          value.put(mapKey,mapValue);\n        }\n else {\n          Text mapValue=new Text(jsonObj.get(key).toString());\n          value.put(mapKey,mapValue);\n        }\n      }\n    }\n  }\n catch (  ParseException e) {\n    logger.warn(\"Could not json-decode string: \" + jsonString,e);\n  }\ncatch (  NumberFormatException e) {\n    logger.warn(\"Could not parse field into number: \" + jsonString,e);\n  }\n  return value;\n}\n"}
{"nl": "Construct a matrix from a Vector of double[]", "code": "public Matrix(Vector<double[]> rows,boolean clone){\n  m=rows.size();\n  n=rows.get(0).length;\n  A=new double[m][n];\n  if (clone) {\n    for (int i=0; i < m; i++)     A[i]=rows.get(i).clone();\n  }\n else {\n    for (int i=0; i < m; i++)     A[i]=rows.get(i);\n  }\n  for (int i=0; i < m; i++)   if (A[i].length != n)   (new IllegalArgumentException(\"Length of row \" + i + \" is \"+ A[i].length+ \". Should be \"+ n)).printStackTrace();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetMembersQueryWithFields(VkApiClient client,List<UserField> fields){\n  super(client,\"groups.getMembers\",GetMembersFieldsResponse.class);\n  fields(fields);\n}\n"}
{"nl": "Looks up the resource item of the given type and name for the given configuration, if any", "code": "@Nullable private static ResourceValue findResourceValue(ResourceType type,String name,boolean isFramework,Module module,Configuration configuration){\n  if (isFramework) {\n    ResourceRepository frameworkResources=configuration.getFrameworkResources();\n    if (frameworkResources == null) {\n      return null;\n    }\n    if (!frameworkResources.hasResourceItem(type,name)) {\n      return null;\n    }\n    ResourceItem item=frameworkResources.getResourceItem(type,name);\n    return item.getResourceValue(type,configuration.getFullConfig(),false);\n  }\n else {\n    LocalResourceRepository appResources=AppResourceRepository.getAppResources(module,true);\n    if (appResources == null) {\n      return null;\n    }\n    if (!appResources.hasResourceItem(type,name)) {\n      return null;\n    }\n    return appResources.getConfiguredValue(type,name,configuration.getFullConfig());\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosReorderAlbumsQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"photos.reorderAlbums\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n"}
{"nl": "Finish launch notification", "code": "public void sendLaunchFinishNotification(final String[] recipients,final String url,final Launch launch,final String resource,final Project.Configuration settings){\n  String subject=String.format(FINISH_LAUNCH_EMAIL_SUBJECT,launch.getName(),launch.getNumber());\n  MimeMessagePreparator preparator=null;\n  this.send(preparator);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  GroupsViewer groupsViewer=(GroupsViewer)getDir().getViewerByClass(GroupsViewer.class);\n  if (groupsViewer == null) {\n    try {\n      groupsViewer=new GroupsViewer((Director)getDir(),getViewer().getFrame());\n      getDir().addViewer(groupsViewer);\n      groupsViewer.getFrame().toFront();\n    }\n catch (    Exception e) {\n      Basic.caught(e);\n    }\n  }\n else {\n    groupsViewer.updateView(Director.ENABLE_STATE);\n    groupsViewer.getFrame().setVisible(true);\n    groupsViewer.getFrame().setState(JFrame.NORMAL);\n    groupsViewer.getFrame().toFront();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetChatUploadServerQuery(VkApiClient client,UserActor actor,int chatId){\n  super(client,\"photos.getChatUploadServer\",GetChatUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n}\n"}
{"nl": "update the enable state for only the FX menu items", "code": "public void updateEnableStateFXItems(){\n  for (  MenuItem menuItem : menuItem2CommandFX.keySet()) {\n    ICommand command=menuItem2CommandFX.get(menuItem);\n    menuItem.setDisable(!command.isApplicable());\n    if (command instanceof ICheckBoxCommand) {\n      ((CheckMenuItem)menuItem).setSelected(((ICheckBoxCommand)command).isSelected());\n    }\n  }\n}\n"}
{"nl": "Use the given analysis engine and process the given text You must release the return cas yourself", "code": "public CAS process(String text){\n  CAS cas=retrieve();\n  cas.setDocumentText(text);\n  try {\n    analysisEngine.process(cas);\n  }\n catch (  AnalysisEngineProcessException e) {\n    if (text != null && !text.isEmpty())     return process(text);\n    throw new RuntimeException(e);\n  }\n  return cas;\n}\n"}
{"nl": "Test setting a low-api attributes and parent in a theme defined only in higher api files", "code": "public void testSettingInHighApiTheme(){\n  VirtualFile virtualFile=myFixture.copyFileToProject(\"themeEditor/apiTestBefore/stylesApi.xml\",\"res/values/styles.xml\");\n  myFixture.copyFileToProject(\"themeEditor/apiTestBefore/stylesApi-v14.xml\",\"res/values-v14/styles.xml\");\n  myFixture.copyFileToProject(\"themeEditor/apiTestBefore/stylesApi-v19.xml\",\"res/values-v19/styles.xml\");\n  myFixture.copyFileToProject(\"themeEditor/apiTestBefore/stylesApi-v21.xml\",\"res/values-v21/styles.xml\");\n  ConfigurationManager configurationManager=myFacet.getConfigurationManager();\n  Configuration configuration=configurationManager.getConfiguration(virtualFile);\n  ThemeResolver themeResolver=new ThemeResolver(configuration);\n  ConfiguredThemeEditorStyle theme=themeResolver.getTheme(\"Theme.MyOtherTheme\");\n  assertNotNull(theme);\n  theme.setValue(\"android:windowIsFloating\",\"holo_purple\");\n  theme.setValue(\"android:actionBarDivider\",\"myValue\");\n  theme.setParent(\"android:Theme.Holo.Light.DarkActionBar\");\n  myFixture.checkResultByFile(\"res/values/styles.xml\",\"themeEditor/apiTestAfter8/stylesApi.xml\",true);\n  myFixture.checkResultByFile(\"res/values-v14/styles.xml\",\"themeEditor/apiTestAfter8/stylesApi-v14.xml\",true);\n  myFixture.checkResultByFile(\"res/values-v19/styles.xml\",\"themeEditor/apiTestAfter8/stylesApi-v19.xml\",true);\n  myFixture.checkResultByFile(\"res/values-v21/styles.xml\",\"themeEditor/apiTestAfter8/stylesApi-v21.xml\",true);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsUpdateTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,int targetGroupId,String name){\n  super(client,\"ads.updateTargetGroup\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  targetGroupId(targetGroupId);\n  name(name);\n}\n"}
{"nl": "Draw current GIF frame", "code": "private void drawMovieFrame(Canvas canvas){\n  mMovie.setTime(mCurrentAnimationTime);\n  canvas.save(Canvas.MATRIX_SAVE_FLAG);\n  canvas.scale(mScale,mScale);\n  mMovie.draw(canvas,mLeft / mScale,mTop / mScale);\n  canvas.restore();\n}\n"}
{"nl": "info log", "code": "public static void i(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.i(tag,buildMsg(msg));\n  }\n}\n"}
{"nl": "Method to take an input json string and output a MapWritable with arrays as WritableArrayWritable objects", "code": "public static MapWritable jsonStringToMapWritableWithArrayWritable(String jsonString,DataSchema dataSchema){\n  MapWritable value=new MapWritable();\n  JSONParser jsonParser=new JSONParser();\n  try {\n    JSONObject jsonObj=(JSONObject)jsonParser.parse(jsonString);\n    for (    Object key : jsonObj.keySet()) {\n      Text mapKey=new Text(key.toString());\n      if (jsonObj.get(key) != null) {\n        logger.debug(\"key = \" + key.toString());\n        if (dataSchema.isArrayElement((String)key)) {\n          ArrayWritable mapValue=StringUtils.jsonArrayStringtoArrayWritable(jsonObj.get(key).toString());\n          value.put(mapKey,mapValue);\n        }\n else {\n          Text mapValue=new Text(jsonObj.get(key).toString());\n          value.put(mapKey,mapValue);\n        }\n      }\n    }\n  }\n catch (  ParseException e) {\n    logger.warn(\"Could not json-decode string: \" + jsonString,e);\n  }\ncatch (  NumberFormatException e) {\n    logger.warn(\"Could not parse field into number: \" + jsonString,e);\n  }\n  return value;\n}\n"}
{"nl": "Specify the typeface for all text", "code": "public TapTarget textTypeface(Typeface typeface){\n  if (typeface == null)   throw new IllegalArgumentException(\"Cannot use a null typeface\");\n  this.typeface=typeface;\n  return this;\n}\n"}
{"nl": "Set a capture probability before switching balls or the minimum probability for a specific ball", "code": "public CatchOptions withProbability(double probability){\n  this.probability=probability;\n  return this;\n}\n"}
{"nl": "Identifier of an items owner community", "code": "protected MarketSearchQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"rename attribute=\");\n  final String attribute=np.getWordRespectCase();\n  np.matchIgnoreCase(\"newName=\");\n  String newName=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  final SamplesViewer viewer=(SamplesViewer)getDir().getViewerByClass(SamplesViewer.class);\n  viewer.getSamplesTable().renameAttribute(attribute,newName);\n}\n"}
{"nl": "Converts an english sampa string into a german sampa string, keeping syllable boundaries and stress markers", "code": "public static String sampaEnString2sampaDeString(String sEn){\n  StringBuilder result=new StringBuilder();\n  StringTokenizer st=new StringTokenizer(sEn,\"-\");\n  while (st.hasMoreTokens()) {\n    boolean stressed=false;\n    String syl=st.nextToken();\n    if (syl.startsWith(\"'\")) {\n      result.append(\"'\");\n      stressed=true;\n    }\n    Allophone[] phon=sampa(Locale.US).splitIntoAllophones(syl);\n    for (int i=0; i < phon.length; i++) {\n      String eng=phon[i].name();\n      String sDe=sampaEn2sampaDe(eng);\n      if (sDe.equals(\"6\") && stressed) {\n        sDe=\"96\";\n      }\n      result.append(sDe);\n    }\n    if (st.hasMoreTokens()) {\n      result.append(\"-\");\n    }\n  }\n  return result.toString();\n}\n"}
{"nl": "paints the chart", "code": "public void paint(Graphics gc0){\n  super.paint(gc0);\n  final Graphics2D gc=(Graphics2D)gc0;\n  bottomMargin=50;\n  if (isShowXAxis()) {\n    double xAxisLabelHeight=computeXAxisLabelHeight(gc);\n    bottomMargin+=xAxisLabelHeight;\n    if (classLabelAngle > 0 && classLabelAngle < Math.PI / 2)     rightMargin=Math.max(75,(int)(0.8 * xAxisLabelHeight));\n  }\n else   bottomMargin+=20;\n  drawTitle(gc);\n  if (getChartData().getRangeX() == null || getChartData().getRangeY() == null)   return;\n  if (isLargeEnough()) {\n    if (gridStyle == GridStyle.BELOW) {\n    }\n    computeScrollBackReferenceRect();\n    drawChart(gc);\n    if (isShowXAxis())     drawXAxis(gc);\n    if (isShowYAxis())     drawYAxis(gc);\n    if (gridStyle == GridStyle.ABOVE) {\n    }\n  }\n}\n"}
{"nl": "Get the name of a relation relating something to the given type", "code": "default String relationName(String type){\n  return String.format(RELATION,type);\n}\n"}
{"nl": "Submits self cancallable job", "code": "public void submitJob(SelfCancalableJob SelfCancalableJob){\n  taskScheduler.schedule(SelfCancalableJob,SelfCancalableJob);\n}\n"}
{"nl": "Returns a resize policy allowing horizontal resizing only", "code": "@NotNull public static ResizePolicy horizontal(){\n  return ourHorizontal;\n}\n"}
{"nl": "send a JS event", "code": "public static void sendEvent(final ReactContext context,final String eventName,final WritableMap params){\n  if (context.hasActiveCatalystInstance()) {\n    context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName,params);\n  }\n else {\n    Log.d(TAG,\"Waiting for CatalystInstance before sending event\");\n  }\n}\n"}
{"nl": "Serialize an object to map", "code": "public static Map<?,?> toMap(Object object){\n  return mapper.convertValue(object,Map.class);\n}\n"}
{"nl": "Below method will be used to get the task id to all the table block info belongs to that task id mapping", "code": "private Map<String,List<TableBlockInfo>> mappedAndGetTaskIdToTableBlockInfo(Map<String,List<TableBlockInfo>> segmentToTableBlocksInfos){\n  Map<String,List<TableBlockInfo>> taskIdToTableBlockInfoMap=new ConcurrentHashMap<String,List<TableBlockInfo>>();\n  Iterator<Entry<String,List<TableBlockInfo>>> iterator=segmentToTableBlocksInfos.entrySet().iterator();\n  while (iterator.hasNext()) {\n    Entry<String,List<TableBlockInfo>> next=iterator.next();\n    List<TableBlockInfo> value=next.getValue();\n    for (    TableBlockInfo blockInfo : value) {\n      String taskNo=DataFileUtil.getTaskNo(blockInfo.getFilePath());\n      List<TableBlockInfo> list=taskIdToTableBlockInfoMap.get(taskNo);\n      if (null == list) {\n        list=new ArrayList<TableBlockInfo>();\n        taskIdToTableBlockInfoMap.put(taskNo,list);\n      }\n      list.add(blockInfo);\n    }\n  }\n  return taskIdToTableBlockInfoMap;\n}\n"}
{"nl": "Special builder method for reading object before replicating", "code": "public static ITemplateHolder createTemplateHolderForReplication(IServerTypeDesc typeDesc,IEntryPacket template,String uid,long expirationTime){\n  return new TemplateHolder(typeDesc,template,uid,expirationTime,null,SystemTime.timeMillis(),SpaceOperations.READ,null,0);\n}\n"}
{"nl": "Make a PATCH call with params", "code": "public Call patch(String url,Map<String,String> params,Callback callback){\n  Request request=new Builder().url(url).patch(bodyFromMap(params)).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n"}
{"nl": "Marks the end of a set of data", "code": "public boolean end(){\n  return true;\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getDuplicateReadFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getDuplicateReadFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "remove an element described by ObjectInfo, while the SL is unlocked", "code": "public void removeUnlocked(IObjectInfo<T> oi){\n  remove_impl((ObjectInfo<T>)oi);\n}\n"}
{"nl": "Types of objects to return", "code": "public AudioGetBroadcastListQuery filter(AudioGetBroadcastListFilter value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "Take a copy of the StyledLayerDescriptor and null out the inline features", "code": "private String preprocessSLD(StyledLayerDescriptor sld){\n  if (sld == null) {\n    return null;\n  }\n  SLDWriterInterface sldWriter=SLDWriterFactory.createWriter(null);\n  DuplicatingStyleVisitor duplicator=new DuplicatingStyleVisitor();\n  sld.accept(duplicator);\n  StyledLayerDescriptor sldCopy=(StyledLayerDescriptor)duplicator.getCopy();\n  for (  StyledLayer styledLayer : sldCopy.layers()) {\n    if (styledLayer instanceof UserLayer) {\n      UserLayerImpl userLayer=(UserLayerImpl)styledLayer;\n      userLayer.setInlineFeatureDatastore(null);\n      userLayer.setInlineFeatureType(null);\n    }\n  }\n  String sldContents=sldWriter.encodeSLD(null,sldCopy);\n  return sldContents;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PollsGetByIdQuery(VkApiClient client,UserActor actor,int pollId){\n  super(client,\"polls.getById\",Utils.buildParametrizedType(List.class,Poll.class));\n  accessToken(actor.getAccessToken());\n  pollId(pollId);\n}\n"}
{"nl": "Default empty Expression", "code": "public Expression(){\n}\n"}
{"nl": "Expands the given number string as pairs as in years or IDs", "code": "public static void expandID(String numberString,WordRelation wordRelation){\n  int numberDigits=numberString.length();\n  if ((numberDigits == 4) && (numberString.charAt(2) == '0') && (numberString.charAt(3) == '0')) {\n    if (numberString.charAt(1) == '0') {\n      expandNumber(numberString,wordRelation);\n    }\n else {\n      expandNumber(numberString.substring(0,2),wordRelation);\n      wordRelation.addWord(\"hundred\");\n    }\n  }\n else   if ((numberDigits == 2) && (numberString.charAt(0) == '0')) {\n    wordRelation.addWord(\"oh\");\n    expandDigits(numberString.substring(1,2),wordRelation);\n  }\n else   if ((numberDigits == 4 && numberString.charAt(1) == '0') || numberDigits < 3) {\n    expandNumber(numberString,wordRelation);\n  }\n else   if (numberDigits % 2 == 1) {\n    String firstDigit=digit2num[numberString.charAt(0) - '0'];\n    wordRelation.addWord(firstDigit);\n    expandID(numberString.substring(1,numberDigits),wordRelation);\n  }\n else {\n    expandNumber(numberString.substring(0,2),wordRelation);\n    expandID(numberString.substring(2,numberDigits),wordRelation);\n  }\n}\n"}
{"nl": "Draw building", "code": "private void drawBuilding(Canvas canvas){\n  final Matrix matrix=mMatrix;\n  matrix.reset();\n  float dragPercent=Math.min(1f,Math.abs(mPercent));\n  float buildingScale;\n  buildingScale=BUILDING_INITIAL_SCALE + (BUILDING_FINAL_SCALE - BUILDING_INITIAL_SCALE) * dragPercent;\n  matrix.preScale(buildingScale,buildingScale);\n  final float offsetX=mScreenWidth / 2 - mBuilding.getWidth() / 2 + (1f - buildingScale) * mBuilding.getWidth() / 2;\n  final float offsetY=mBuildingTopOffset;\n  matrix.postTranslate(offsetX,offsetY);\n  canvas.drawBitmap(mBuilding,matrix,null);\n}\n"}
{"nl": "draw the label", "code": "public void draw(Graphics2D gc,boolean centerLabelWidth,boolean centerLabelHeight){\n  if (centerLabelWidth || centerLabelHeight) {\n    Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();\n    gc.drawString(label,(int)(x - (centerLabelWidth ? labelSize.getWidth() / 2 : 0)),(int)(y + (centerLabelHeight ? labelSize.getHeight() / 2 : 0)));\n  }\n else   gc.drawString(label,x,y);\n}\n"}
{"nl": "Document to map", "code": "public static Map<String,Object> dom2Map(Document doc){\n  Map<String,Object> maproot=new HashMap<String,Object>();\n  if (doc == null)   return maproot;\n  Element root=doc.getRootElement();\n  List list1=root.elements();\n  for (  Object obj : list1) {\n    Element element=(Element)obj;\n    Map<String,Object> map=new HashMap<String,Object>();\n    element2Map(element,map);\n    maproot.put(element.getName(),map);\n  }\n  return maproot;\n}\n"}
{"nl": "true - to post the comment as by the community false - to post the comment as by the user (default)", "code": "public BoardCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n"}
{"nl": "The key of id generator", "code": "public static String keyOfIds(Class<?> clazz){\n  try {\n    return IDS_KEY_CACHE.get(clazz);\n  }\n catch (  ExecutionException e) {\n    throw new KeyException(e);\n  }\n}\n"}
{"nl": "<p>Is specified schema supported by this <code>SchemaFactory</code>?</p>", "code": "@Override public boolean isSchemaLanguageSupported(String schemaLanguage){\n  if (schemaLanguage == null) {\n    throw new NullPointerException(JAXPValidationMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),\"SchemaLanguageNull\",null));\n  }\n  if (schemaLanguage.length() == 0) {\n    throw new IllegalArgumentException(JAXPValidationMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),\"SchemaLanguageLengthZero\",null));\n  }\n  return schemaLanguage.equals(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n}\n"}
{"nl": "Encrypt SHA1", "code": "public static byte[] encryptSHA(byte[] bytes){\n  try {\n    MessageDigest md=MessageDigest.getInstance(\"SHA\");\n    md.update(bytes);\n    return md.digest();\n  }\n catch (  NoSuchAlgorithmException e) {\n    e.printStackTrace();\n  }\n  return new byte[0];\n}\n"}
{"nl": "Set the background color of the buttons when clicked", "code": "public Builder buttonPressedBackgroundColor(int buttonPressedBackgroundColor){\n  this.buttonPressedBackgroundColor=buttonPressedBackgroundColor;\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetCommentsQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n"}
{"nl": "entry function for encoding diagonal line checksum, slope -1,*check_data[p+2]", "code": "void STAR_encoding_diag2(){\n  int i, j, stripe, k;\n  char[] tmp;\n  tmp=new char[p * block_size];\n  for (stripe=0; stripe < block_nbr + 1; stripe++) {\n    for (i=0; i < data_disk_nbr; i++) {\n      for (j=0; j < block_size; j++) {\n        k=(stripe + i + p) % p;\n        if (k < block_nbr)         tmp[stripe * block_size + j]^=check_data[i][k * block_size + j];\n      }\n    }\n  }\n  for (i=0; i < block_nbr; i++) {\n    for (j=0; j < block_size; j++) {\n      tmp[i * block_size + j]^=tmp[block_nbr * block_size + j];\n    }\n  }\n  System.arraycopy(tmp,0,check_data[data_disk_nbr + 2],0,stripe_unit_size);\n}\n"}
{"nl": "User Login", "code": "@Override @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED) public LoginResDto login(LoginReqDto reqDto){\n  LoginResDto resDto=new LoginResDto();\n  User queryUser=new User();\n  queryUser.setUserId(reqDto.getUserId());\n  queryUser.setValid(1);\n  List<User> userList=userDao.searchUser(queryUser);\n  if (userList == null || userList.isEmpty())   throw new RuntimeException(ERR_USER_NOT_EXIST);\n  User findUser=userList.get(0);\n  if (!findUser.getUserPwd().equals(reqDto.getPassword()))   throw new RuntimeException(ERR_PWD_WRONG);\n  LoginHistory loginHistory=new LoginHistory();\n  loginHistory.setUserId(reqDto.getUserId());\n  loginHistory.setDeviceId(reqDto.getDeviceId());\n  loginHistory.setPlatform(reqDto.getPlatform());\n  loginHistoryDao.addLoginHistory(loginHistory);\n  resDto.setMenuList(buildSystemMenus(reqDto.getUserId()));\n  List<String> roleList=userRoleDao.searchRoleByUserId(reqDto.getUserId());\n  String role=StringUtils.concatStrFromList(roleList,null);\n  resDto.setUserId(findUser.getUserId());\n  resDto.setUserName(findUser.getUserName());\n  resDto.setToken(generateAccessToken(reqDto,role));\n  return resDto;\n}\n"}
{"nl": "Returns true if a field was parsed, else false if the end of the bytes was hit first", "code": "private boolean parseUnescapedField(int fieldUpto) throws ParseException {\n  int fieldStart=bufferUpto;\n  while (bufferUpto < chars.length) {\n    char c=chars[bufferUpto++];\n    if (c == delimChar) {\n      addOneField(fieldUpto,fieldStart,bufferUpto - fieldStart - 1);\n      return true;\n    }\n else     if (c == NEWLINE) {\n      addOneField(fieldUpto,fieldStart,bufferUpto - fieldStart - 1);\n      bufferUpto--;\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Parse changeLogVersion node", "code": "protected void readChangeLogVersionNode(XmlPullParser parser,ChangeLog changeLog) throws Exception {\n  if (parser == null)   return;\n  parser.require(XmlPullParser.START_TAG,null,TAG_CHANGELOGVERSION);\n  String versionName=parser.getAttributeValue(null,ATTRIBUTE_VERSIONNAME);\n  String versionCodeStr=parser.getAttributeValue(null,ATTRIBUTE_VERSIONCODE);\n  int versionCode=0;\n  if (versionCodeStr != null) {\n    try {\n      versionCode=Integer.parseInt(versionCodeStr);\n    }\n catch (    NumberFormatException ne) {\n      Log.w(TAG,\"Error while parsing versionCode.It must be a numeric value. Check you file.\");\n    }\n  }\n  String changeDate=parser.getAttributeValue(null,ATTRIBUTE_CHANGEDATE);\n  if (versionName == null)   throw new ChangeLogException(\"VersionName required in changeLogVersion node\");\n  ChangeLogRowHeader row=new ChangeLogRowHeader();\n  row.setVersionName(versionName);\n  row.setChangeDate(changeDate);\n  changeLog.addRow(row);\n  while (parser.next() != XmlPullParser.END_TAG) {\n    if (parser.getEventType() != XmlPullParser.START_TAG) {\n      continue;\n    }\n    String tag=parser.getName();\n    if (mChangeLogTags.contains(tag)) {\n      readChangeLogRowNode(parser,changeLog,versionName,versionCode);\n    }\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"deselect series=all;\");\n}\n"}
{"nl": "Initialize values to default ones", "code": "public void resetMove(){\n  if (owner.getAi2().isLogging()) {\n    AI2Logger.moveinfo(owner,\"MC perform stop\");\n  }\n  started.set(false);\n  targetDestX=0;\n  targetDestY=0;\n  targetDestZ=0;\n  pointX=0;\n  pointY=0;\n  pointZ=0;\n}\n"}
{"nl": "Register WebDriver instance that should be terminated at the end of the suite", "code": "public void add(ClosingAwareWebDriver driver){\n  drivers.add(driver);\n}\n"}
{"nl": "close associated file or database", "code": "@Override public void close() throws IOException {\n  iterator.close();\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-2.226325228634938,-1.156887023657177,-0.643949578356075,-0.2027950777320613,0.305827808237559,6.42632522863494,5.35688702365718,4.843949578356074,4.40279507773206,3.89417219176244};\n}\n"}
{"nl": "draw a transposed Radial Chart", "code": "public void drawChartTransposed(Graphics2D gc){\n  colorByClasses=false;\n  colorBySeries=true;\n  doDraw(gc);\n}\n"}
{"nl": "MONSTER AILMENT QUERIES", "code": "public MonsterAilmentCursor queryAilmentsFromMonster(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_AILMENT;\n  qh.Columns=null;\n  qh.Selection=S.COLUMN_AILMENT_MONSTER_ID + \" = \" + id;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new MonsterAilmentCursor(wrapHelper(qh));\n}\n"}
{"nl": "Making web service call", "code": "public static String makeWebServiceCall(String url,int requestmethod){\n  return makeWebServiceCall(url,requestmethod,null,false);\n}\n"}
{"nl": "Constructs a configuration: (sentence, stack, buffer, arcs)", "code": "public Configuration(Sentence sentence,Stack<Integer> stack,Queue<Integer> queue){\n  this.sentence=sentence;\n  this.stack=stack;\n  this.queue=queue;\n  this.arcs=new ArrayList<Dependency>();\n}\n"}
{"nl": "Call parse of a collection of input data", "code": "private Collection<Map<String,Object>> batchParse(String[] header,Collection<String[]> batch){\n  return batch.stream().map(null).collect(toList());\n}\n"}
{"nl": "Expand a group", "code": "private void expandGroup(ExpandableListPosition listPosition){\n  expandableList.expandedGroupIndexes.put(listPosition.groupPos,true);\n  if (listener != null) {\n    listener.onGroupExpanded(expandableList.getFlattenedGroupIndex(listPosition) + 1,expandableList.groups.get(listPosition.groupPos).getItemCount());\n  }\n}\n"}
{"nl": "tells if given svn resource is dirty or not", "code": "public static boolean isDirty(final ISVNLocalResource svnResource,LocalResourceStatus status){\n  try {\n    if (!svnResource.exists())     return false;\n    if (svnResource.getIResource().getType() == IResource.FILE) {\n      return ((status.isTextModified() || status.isPropModified() || status.isReplaced()|| status.isAdded()) && !status.isIgnored() && !svnResource.isIgnored());\n    }\n else {\n      return svnResource.isDirty();\n    }\n  }\n catch (  SVNException e) {\n    if (!e.operationInterrupted()) {\n      SVNUIPlugin.log(e.getStatus());\n    }\n    return true;\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public UScriptRun(){\n  char[] nullChars=null;\n  reset(nullChars,0,0);\n}\n"}
{"nl": "Reason for the complaint", "code": "public VideoReportCommentQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().isPCoATab() && getViewer().getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(null).size() > 0;\n}\n"}
{"nl": "Reduce the specified columns by taking the range (max-min) of the values", "code": "public Builder rangeColumns(String... columns){\n  return add(ReduceOp.Range,columns);\n}\n"}
{"nl": "Convert date object to milliseconds", "code": "public static long dateToMilliseconds(Date date){\n  return date.getTime();\n}\n"}
{"nl": "install multiDex before install tinker so we don't need to put the tinker lib classes in the main dex", "code": "@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) @Override public void onBaseContextAttached(Context base){\n  super.onBaseContextAttached(base);\n  MultiDex.install(base);\n  SampleApplicationContext.application=getApplication();\n  SampleApplicationContext.context=getApplication();\n  TinkerManager.setTinkerApplicationLike(this);\n  TinkerManager.initFastCrashProtect();\n  TinkerManager.setUpgradeRetryEnable(true);\n  TinkerInstaller.setLogIml(new MyLogImp());\n  TinkerManager.installTinker(this);\n}\n"}
{"nl": "Query if this pointer and qv could point to the same object under any contexts", "code": "@Override public boolean heap_sensitive_intersection(IVarAbstraction qv){\n  int i, j;\n  HeapInsNode qn;\n  SegmentNode p, q, pt[], qt[];\n  qn=(HeapInsNode)qv;\n  for (Iterator<AllocNode> it=pt_objs.keySet().iterator(); it.hasNext(); ) {\n    AllocNode an=it.next();\n    if (an instanceof ClassConstantNode)     continue;\n    if (an instanceof StringConstantNode)     continue;\n    qt=qn.find_points_to(an);\n    if (qt == null)     continue;\n    pt=find_points_to(an);\n    for (i=0; i < HeapInsIntervalManager.Divisions; ++i) {\n      p=pt[i];\n      while (p != null) {\n        for (j=0; j < HeapInsIntervalManager.Divisions; ++j) {\n          q=qt[j];\n          while (q != null) {\n            if (quick_intersecting_test(p,q))             return true;\n            q=q.next;\n          }\n        }\n        p=p.next;\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetTargetGroupsQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getTargetGroups\",Utils.buildParametrizedType(List.class,TargetGroup.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n"}
{"nl": "Initial implementation: return null;", "code": "public Object[] internalGetChildren(Object o,IProgressMonitor monitor){\n  return new Object[0];\n}\n"}
{"nl": "Erase the page related data associated to an experiment", "code": "@Override public void erasePageData(Application.Name applicationName,Experiment.ID experimentID){\n  ExperimentPageList experimentPageList=getExperimentPages(experimentID);\n  for (  ExperimentPage experimentPage : experimentPageList.getPages()) {\n    deletePage(applicationName,experimentID,experimentPage.getName());\n    LOGGER.debug(\"CassandraPagesRepository Removing page: {} from terminated experiment: {} for application: {}\",experimentPage.getName(),experimentID,applicationName);\n  }\n}\n"}
{"nl": "Logs a debug message to the console or logcat", "code": "public static void debug(Object message){\n  Gdx.app.debug(TAG,String.valueOf(message));\n}\n"}
{"nl": "This method logs the INFO message", "code": "public final void info(final Object o,final Throwable t){\n  log(Level.INFO,o,t);\n}\n"}
{"nl": "Set doc id", "code": "protected DocsDeleteQuery docId(int value){\n  return unsafeParam(\"doc_id\",value);\n}\n"}
{"nl": "int database system scema for gameplayer", "code": "private void initCreateUserinfoSchma() throws SQLException {\n  ResultSet rs;\n  rs=stmt.executeQuery(\"show tables from test like'userinformation'\");\n  if (false == rs.next()) {\n    String sql=\"CREATE TABLE userinformation \" + \"(id varchar(10) not NULL, \" + \" password VARCHAR(10) not Null, \"+ \" PRIMARY KEY ( id )) Engine=Innodb default charset = utf8\";\n    stmt.executeUpdate(sql);\n  }\n  rs=stmt.executeQuery(\"show tables from test like'useripandaccess'\");\n  if (false == rs.next()) {\n    String sql=\"CREATE TABLE useripandaccess \" + \"(id varchar(10) not NULL, \" + \"ipaddress varchar(30) not NULL, \"+ \"accessAndTerminateTime datetime not null,\"+ \"type varchar(10)\"+ \") Engine=Innodb default charset = utf8\";\n    stmt.executeUpdate(sql);\n  }\n}\n"}
{"nl": "Helper method to make authenticated HTTP requests to LinkedIn REST api using PUT Method", "code": "public void putRequest(Context context,String url,JSONObject body,ApiListener apiListener){\n  request(context,Request.Method.PUT,url,body,apiListener);\n}\n"}
{"nl": "Atomically increment the counter if it's below the given max value", "code": "public static boolean incrementIfLessThan(AtomicInteger counter,int max){\n  while (true) {\n    int current=counter.intValue();\n    if (current < max) {\n      if (counter.compareAndSet(current,current + 1)) {\n        return true;\n      }\n    }\n else {\n      return false;\n    }\n  }\n}\n"}
{"nl": "Update a speaker if found", "code": "public Speaker update(final Speaker speaker){\n  if (!this.speakers.keySet().contains(speaker.getId()))   throw new IllegalArgumentException(\"Speaker not found \" + speaker.getId());\n  return this.speakers.put(speaker.getId(),speaker);\n}\n"}
{"nl": "Helper to click on object that match the text value", "code": "private void clickByText(String text) throws UiObjectNotFoundException {\n  UiObject obj=new UiObject(new UiSelector().text(text));\n  obj.clickAndWaitForNewWindow();\n}\n"}
{"nl": "Set start from", "code": "public NewsfeedSearchQueryWithExtended startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n"}
{"nl": "Get a flight status based on a Multi-point based flight", "code": "public static void checkFlightPath(List<Coordinate> path,int width,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean showWeather,@Nullable Date date,@Nullable AirMapCallback<AirMapStatus> callback){\n  StatusService.checkFlightPath(path,width,takeOffPoint,types,ignoredTypes,showWeather,date,callback);\n}\n"}
{"nl": "Returns null if this is not a valid Label (if either the package path or rule name are invalid)", "code": "@Nullable public static Label createLabelFromRuleName(@Nullable BlazePackage blazePackage,@Nullable String ruleName){\n  if (blazePackage == null || ruleName == null) {\n    return null;\n  }\n  WorkspacePath packagePath=blazePackage.buildFile.getPackageWorkspacePath();\n  RuleName name=RuleName.createIfValid(ruleName);\n  if (packagePath == null || name == null) {\n    return null;\n  }\n  return new Label(packagePath,name);\n}\n"}
{"nl": "Patches all supported system libraries", "code": "public void patchLibraries(){\n  patchHandlerImplementation();\n  patchThreadImplementation();\n}\n"}
{"nl": "Required for Externalizable", "code": "public OrderByKey(){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureGetUserLevelQuery(VkApiClient client,ServiceActor actor,List<Integer> userIds){\n  super(client,\"secure.getUserLevel\",Utils.buildParametrizedType(List.class,Level.class));\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n"}
{"nl": "Cropping bitmap", "code": "private void applyCrop(){\n  if (isCropping || mBitmap == null) {\n    return;\n  }\n  isCropping=true;\n  final int width=mBitmap.getWidth();\n  final int height=mBitmap.getHeight();\n  String path=new File(getCacheDir(),CROPPED + System.currentTimeMillis() + FORMAT).getPath();\n  mBitmap=mCropView.getCroppedImage();\n  supportInvalidateOptionsMenu();\n  SavePhotoTask task=new SavePhotoTask.Builder().setAngle(mAngle).setSize(width,height).setRect(mCropView.getActualCropRect()).setContext(this).setOutPath(path).setCallback(this).setUri(mUri).build();\n  task.execute();\n}\n"}
{"nl": "Resets all direct permission/restrictions from an identity", "code": "public void resetAll(Identity<?> identity){\n  strictPermission.values().forEach(null);\n}\n"}
{"nl": "Validate specified log against parent objects and project", "code": "private Log validate(String logId,String projectName){\n  Log log=logRepository.findOne(logId);\n  expect(log,notNull()).verify(ErrorType.LOG_NOT_FOUND,logId);\n  final TestItem testItem=testItemRepository.findOne(log.getTestItemRef());\n  expect(testItem,not(Preconditions.IN_PROGRESS)).verify(ErrorType.TEST_ITEM_IS_NOT_FINISHED,formattedSupplier(\"Unable to delete log '{}' when test item '{}' in progress state\",log.getId(),testItem.getId()));\n  final String expectedProjectName=launchRepository.findOne(testItem.getLaunchRef()).getProjectRef();\n  expect(expectedProjectName,equalTo(projectName)).verify(ErrorType.FORBIDDEN_OPERATION,formattedSupplier(\"Log '{}' not under specified '{}' project\",logId,projectName));\n  return log;\n}\n"}
{"nl": "Will resolve ternary operator", "code": "private static void resolveTernaryOperator(TernaryExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){\n  if (null != objSubjectExpression.getTrueVariant()) {\n    resolveExpressionType(objSubjectExpression.getTrueVariant(),objScope,objIndex,objTypesSet);\n  }\n  if (null != objSubjectExpression.getFalseVariant()) {\n    resolveExpressionType(objSubjectExpression.getFalseVariant(),objScope,objIndex,objTypesSet);\n  }\n}\n"}
{"nl": "Set foursquare id", "code": "public PhotosEditQuery foursquareId(String value){\n  return unsafeParam(\"foursquare_id\",value);\n}\n"}
{"nl": "Npc starts singing iu", "code": "public static final void emoteStartSinging(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,113,0));\n}\n"}
{"nl": "Add common codebase JARs", "code": "void addCodebaseComponents(URL[] jars){\n  if (jars == null)   return;\n  for (int i=0; i < jars.length; i++) {\n    if (!codebaseComponents.contains(jars[i]))     codebaseComponents.add(jars[i]);\n  }\n  addCommonJARs(jars);\n}\n"}
{"nl": "NON-DOM:  increment document/doctype counter", "code": "protected synchronized int assignDocumentNumber(){\n  return ++docAndDoctypeCounter;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotificationsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"notifications.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "This will generate a series of uniformally distributed numbers between l times", "code": "public static double[] generateUniform(int l){\n  double[] ret=new double[l];\n  java.util.Random rgen=new java.util.Random();\n  for (int i=0; i < l; i++) {\n    ret[i]=rgen.nextDouble();\n  }\n  return ret;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PagesParseWikiQuery(VkApiClient client,UserActor actor,String text){\n  super(client,\"pages.parseWiki\",String.class);\n  accessToken(actor.getAccessToken());\n  text(text);\n}\n"}
{"nl": "Release the leader lock if necessary", "code": "@PreDestroy public void stop(){\n  if (leaderLock != null) {\n    leaderLock.release();\n  }\n  if (scheduler != null) {\n    scheduler.shutdownNow();\n  }\n  isLeader=false;\n}\n"}
{"nl": "establish a scan position- select a segment", "code": "private SegmentedListIterator<T> establishPos(SegmentedListIterator<T> res){\n  int startSegment=drawSegmentNumber(false);\n  res.setStartSegment((short)startSegment);\n  for (int seg=startSegment, i=0; i < getNumSegments(); i++, seg++) {\n    if (seg == getNumSegments())     seg=0;\n    res.setCurrentSegment((short)seg);\n    Segment<T> segment=_segments[seg];\n    segment.getLock().readLock().lock();\n    try {\n      if (segment.isEmpty())       continue;\n      for (ObjectInfo<T> oi=segment.getHead().getForwardRef(); oi != null; oi=oi.getForwardRef()) {\n        if (!oi.isDeleted() && oi.getSubject() != null) {\n          res.setCurrentOI(oi);\n          res.setSubject(oi.getSubject());\n          return res;\n        }\n      }\n    }\n  finally {\n      segment.getLock().readLock().unlock();\n    }\n  }\n  return null;\n}\n"}
{"nl": "verifies that two arrays are close (sup norm)", "code": "public static void assertEquals(String msg,double[] expected,double[] observed,double tolerance){\n  StringBuilder out=new StringBuilder(msg);\n  if (expected.length != observed.length) {\n    out.append(\"\\n Arrays not same length. \\n\");\n    out.append(\"expected has length \");\n    out.append(expected.length);\n    out.append(\" observed length = \");\n    out.append(observed.length);\n    Assert.fail(out.toString());\n  }\n  boolean failure=false;\n  for (int i=0; i < expected.length; i++) {\n    if (!Precision.equalsIncludingNaN(expected[i],observed[i],tolerance)) {\n      failure=true;\n      out.append(\"\\n Elements at index \");\n      out.append(i);\n      out.append(\" differ. \");\n      out.append(\" expected = \");\n      out.append(expected[i]);\n      out.append(\" observed = \");\n      out.append(observed[i]);\n    }\n  }\n  if (failure) {\n    Assert.fail(out.toString());\n  }\n}\n"}
{"nl": "Allows the cached Endpoints to be reset, forcing a config reload", "code": "@GET public String reset(){\n  this.map.clear();\n  return \"Reset endpoints\";\n}\n"}
{"nl": "unregister from lease manager based on direct backrefs Note: entry/template must be locked", "code": "public void unregister(ILeasedEntryCacheInfo leaseCacheInfo,long expiration){\n  boolean unregister;\n  if (leaseCacheInfo.isOffHeapEntry())   unregister=expiration != Long.MAX_VALUE && !_alwaysDisableEntriesLeases;\n else   unregister=leaseCacheInfo.isConnectedToLeaseManager();\n  if (unregister) {\n    if (!leaseCacheInfo.isOffHeapEntry()) {\n      leaseCacheInfo.getLeaseManagerListRef().remove(leaseCacheInfo.getLeaseManagerPosition());\n    }\n else {\n      Long expirationTime=((expiration / _expirationTimeInterval + 1) * _expirationTimeInterval);\n      Cell cell=_expirationList.get(expirationTime);\n      if (cell != null)       cell.unregisterByPos(leaseCacheInfo.getLeaseManagerPosition(),true);\n    }\n    leaseCacheInfo.setLeaseManagerListRefAndPosition(null,null);\n  }\n}\n"}
{"nl": "download file from storage server", "code": "public int download_file(String group_name,String remote_filename,String local_filename) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file(group_name,remote_filename,file_offset,download_bytes,local_filename);\n}\n"}
{"nl": "the logger", "code": "private XmlOutputter(){\n}\n"}
{"nl": "Set test result", "code": "public LeadsCheckUserQuery testResult(Integer value){\n  return unsafeParam(\"test_result\",value);\n}\n"}
{"nl": "gets the splits as binary sequences in fastA format", "code": "public String toStringAsBinarySequences(Taxa taxa){\n  StringBuilder buf=new StringBuilder();\n  for (Iterator it=taxa.iterator(); it.hasNext(); ) {\n    String name=(String)it.next();\n    int t=taxa.indexOf(name);\n    buf.append(\"> \").append(name).append(\"\\n\");\n    for (int s=1; s <= size(); s++) {\n      Split split=getSplit(s);\n      if (split.getA().get(t))       buf.append(\"1\");\n else       buf.append(\"0\");\n    }\n    buf.append(\"\\n\");\n  }\n  return buf.toString();\n}\n"}
{"nl": "open the wireless network settings", "code": "public static void openWirelessNetworkSettings(Context context){\n  if (android.os.Build.VERSION.SDK_INT > 10) {\n    context.startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));\n  }\n else {\n    context.startActivity(new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS));\n  }\n}\n"}
{"nl": "This method sends request to author instance", "code": "public void sendCrxRequest(HttpUriRequest request,String desiredMessage) throws IOException {\n  String result;\n  try (CloseableHttpResponse response=httpClient.execute(request)){\n    result=EntityUtils.toString(response.getEntity());\n  }\n   if (!result.contains(desiredMessage)) {\n    throw new IOException(\"crx request failure: \" + result + \" doesn't contain desired message: \"+ desiredMessage);\n  }\n}\n"}
{"nl": "Displays a dialog box with an OK button", "code": "public static void showOkDialog(final Activity activity,final String title,final String text){\n  showOkDialog(activity,title,text,null);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosEditQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n"}
{"nl": "Set status", "code": "public AccountSaveProfileInfoQuery status(String value){\n  return unsafeParam(\"status\",value);\n}\n"}
{"nl": "Map Methods", "code": "@Override public void onPause(){\n  super.onPause();\n  mapView.onPause();\n  stopLocationUpdates();\n}\n"}
{"nl": "Should be called after testing completes, to restore original location services values", "code": "void restoreLocationServicesState(@NonNull ContentResolver contentResolver){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n    setLocationServicesStatePreKitKat(contentResolver,originalLocationProviders);\n  }\n else {\n    setLocationServicesState(contentResolver,originalLocationMode);\n  }\n}\n"}
{"nl": "Video IDs", "code": "public VideoGetQueryWithExtended videos(String... value){\n  return unsafeParam(\"videos\",value);\n}\n"}
{"nl": "add checksum to the end of the packet", "code": "private void appendChecksum(byte[] raw,int offset,int length){\n  long chksum=0;\n  int count=length - 4;\n  long ecx;\n  int i;\n  for (i=offset; i < count; i+=4) {\n    ecx=raw[i] & 0xff;\n    ecx|=raw[i + 1] << 8 & 0xff00;\n    ecx|=raw[i + 2] << 0x10 & 0xff0000;\n    ecx|=raw[i + 3] << 0x18 & 0xff000000;\n    chksum^=ecx;\n  }\n  ecx=raw[i] & 0xff;\n  ecx|=raw[i + 1] << 8 & 0xff00;\n  ecx|=raw[i + 2] << 0x10 & 0xff0000;\n  ecx|=raw[i + 3] << 0x18 & 0xff000000;\n  raw[i]=(byte)(chksum & 0xff);\n  raw[i + 1]=(byte)(chksum >> 0x08 & 0xff);\n  raw[i + 2]=(byte)(chksum >> 0x10 & 0xff);\n  raw[i + 3]=(byte)(chksum >> 0x18 & 0xff);\n}\n"}
{"nl": "determine whether current data needs saving and allows the user to do so, if necessary", "code": "private void askToSaveCurrent() throws CanceledException {\n  if (ProgramProperties.isUseGUI()) {\n    if (!doc.getMeganFile().hasDataConnector() && doc.getNumberOfSamples() > 0 && doc.isDirty()) {\n      getFrame().toFront();\n      getFrame().setAlwaysOnTop(true);\n      try {\n        int result=JOptionPane.showConfirmDialog(getFrame(),\"Document has been modified, save before \" + (ProjectManager.isQuitting() ? \"quitting?\" : \"closing?\"),ProgramProperties.getProgramName() + \" - Save Changes?\",JOptionPane.YES_NO_CANCEL_OPTION);\n        if (result == JOptionPane.YES_OPTION) {\n          Boolean[] canceled=new Boolean[]{false};\n          getCommandManager().getCommand(SaveCommand.NAME).actionPerformed(new ActionEvent(canceled,0,\"askToSave\"));\n          if (canceled[0])           throw new CanceledException();\n          doc.setDirty(false);\n        }\n else         if (result == JOptionPane.NO_OPTION)         doc.setDirty(false);\n else         if (result == JOptionPane.CANCEL_OPTION) {\n          throw new CanceledException();\n        }\n      }\n  finally {\n        getFrame().setAlwaysOnTop(false);\n      }\n    }\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public int hashCode(){\n  int result=0;\n  int increment=Math.min(3,this.values.length / 16);\n  for (int i=0; i < this.values.length; i+=increment) {\n    result=result * 37 + this.values[i];\n  }\n  return result;\n}\n"}
{"nl": "Required for Externalizable", "code": "public LocalViewDetails(){\n}\n"}
{"nl": "Show the login screen", "code": "public static void showLogin(Fragment fragment,int requestCode){\n  Intent intent=new Intent(fragment.getActivity(),LoginActivity.class);\n  fragment.startActivityForResult(intent,requestCode);\n}\n"}
{"nl": "Warns all listeners of a new frame added event", "code": "private void fireFrameSaved(int frameNumber){\n  if (listenerList == null)   return;\n  Object[] listeners=listenerList.getListenerList();\n  for (int i=listeners.length - 2; i >= 0; i-=2) {\n    if (listeners[i] == FrameSavedListener.class) {\n      ((FrameSavedListener)listeners[i + 1]).frameSaved(frameNumber);\n    }\n  }\n}\n"}
{"nl": "is taxonomy data available?", "code": "public static boolean isAvailable(){\n  return taxonomyClassification != null;\n}\n"}
{"nl": "Get a cursor with a query to grab all monsters by a location", "code": "public MonsterHabitatCursor queryHabitatLocation(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_HABITAT;\n  qh.Columns=null;\n  qh.Selection=S.COLUMN_HABITAT_LOCATION_ID + \" = ?\";\n  qh.SelectionArgs=new String[]{String.valueOf(id)};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=\"m\" + S.COLUMN_MONSTERS_SORT_NAME + \" ASC\";\n  qh.Limit=null;\n  return new MonsterHabitatCursor(wrapJoinHelper(builderHabitat(qh.Distinct),qh));\n}\n"}
{"nl": "Set album id", "code": "public VideoAddToAlbumQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n"}
{"nl": "constructs a int file putter using the given file and limit", "code": "public IntFilePutter(File file,long limit,boolean inMemory) throws IOException {\n  super(file,4 * limit,inMemory ? Mode.CREATE_READ_WRITE_IN_MEMORY : Mode.CREATE_READ_WRITE);\n}\n"}
{"nl": "Add a roleplayer to the given relation", "code": "private void addCasting(InsertQueryExecutor insertQueryExecutor,Relation relation,VarAdmin.Casting casting){\n  VarAdmin roleVar=casting.getRoleType().orElseThrow(null);\n  RoleType roleType=insertQueryExecutor.getConcept(roleVar).asRoleType();\n  Instance roleplayer=insertQueryExecutor.getConcept(casting.getRolePlayer()).asInstance();\n  relation.putRolePlayer(roleType,roleplayer);\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getReadPairedFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getReadPairedFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Return a new AnyVal that matches any head of a list and any tail of a list", "code": "static <T>AnyVal<Object> anyHeadAnyTail(AnyVal<T> head,AnyVal<? extends List<? extends T>> tail){\n  return new AnyConsImpl(null,head,null,tail);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public char elementAt(char index){\n  int ix=(this.indices[(index >> '\\005')] & 0xFFFF) + (index & 0x1F);\n  return ix >= this.values.length ? this.defaultValue : this.values[ix];\n}\n"}
{"nl": "add an entry to the classification", "code": "public void addToClassification(Integer classId,int size,List<Long> positions) throws IOException {\n  numberOfClasses++;\n  classificationIndexTmpFileWriter.writeInt(classId);\n  if (size == positions.size())   classificationIndexTmpFileWriter.writeInt(size);\n else {\n    classificationIndexTmpFileWriter.writeInt(-size);\n    classificationIndexTmpFileWriter.writeInt(positions.size());\n  }\n  if (positions.size() > 0) {\n    classificationIndexTmpFileWriter.writeLong(io.getPosition());\n    for (    Long pos : positions) {\n      io.writeLong(pos);\n    }\n  }\n else {\n    classificationIndexTmpFileWriter.writeLong(-1);\n  }\n}\n"}
{"nl": "Creates a list of attribute snapshots corresponding to the attributes of the given tag", "code": "@NotNull public static List<AttributeSnapshot> createAttributesForTag(@NotNull XmlTag tag){\n  XmlAttribute[] psiAttributes=tag.getAttributes();\n  List<AttributeSnapshot> attributes=Lists.newArrayListWithExpectedSize(psiAttributes.length);\n  for (  XmlAttribute psiAttribute : psiAttributes) {\n    AttributeSnapshot attribute=createAttributeSnapshot(psiAttribute);\n    if (attribute != null) {\n      attributes.add(attribute);\n    }\n  }\n  return attributes;\n}\n"}
{"nl": "The finalizer", "code": "public void finalize(){\n  NDC.remove();\n}\n"}
{"nl": "Check if packet was correctly decoded, also check if packet was correctly coded by aion client", "code": "private final boolean validateClientPacket(ByteBuffer buf){\n  return buf.getShort(0) == ~buf.getShort(3) && buf.get(2) == staticClientPacketCode;\n}\n"}
{"nl": "Attempt to construct an absolute URI", "code": "private String makeAbsolute(String uri){\n  if (uri == null) {\n    uri=\"\";\n  }\n  try {\n    URL url=new URL(uri);\n    return url.toString();\n  }\n catch (  MalformedURLException mue) {\n    try {\n      URL fileURL=FileURL.makeURL(uri);\n      return fileURL.toString();\n    }\n catch (    MalformedURLException mue2) {\n      return uri;\n    }\n  }\n}\n"}
{"nl": "Loads a text file with filename sFilename and adds all its words to the definitions", "code": "public void loadFromFile(String sFileName) throws FileNotFoundException, IOException {\n  FileReader frFile=new FileReader(sFileName);\n  String sText=\"\";\n  int c=frFile.read();\n  while (c != -1) {\n    sText+=c;\n    c=frFile.read();\n  }\n  addText(sText);\n  frFile.close();\n}\n"}
{"nl": "jude is head view", "code": "public boolean isHeader(int position){\n  return position >= 0 && position < mHeaderViews.size();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallSearchQuery(VkApiClient client){\n  super(client,\"wall.search\",SearchResponse.class);\n}\n"}
{"nl": "send file content callback function, be called only once when the file uploaded", "code": "public int send(OutputStream out) throws IOException {\n  long remainBytes=fileSize;\n  byte[] buff=new byte[256 * 1024];\n  int bytes;\n  while (remainBytes > 0) {\n    try {\n      if ((bytes=inputStream.read(buff,0,remainBytes > buff.length ? buff.length : (int)remainBytes)) < 0) {\n        return -1;\n      }\n    }\n catch (    IOException ex) {\n      ex.printStackTrace();\n      return -1;\n    }\n    out.write(buff,0,bytes);\n    remainBytes-=bytes;\n  }\n  return 0;\n}\n"}
{"nl": "create a new instance of the given type of drawer, sharing internal data structures", "code": "public PieChartDrawer createInstance(){\n  final PieChartDrawer drawer=new PieChartDrawer();\n  drawer.setViewer(viewer);\n  drawer.setChartData(new DefaultChartData());\n  drawer.setClass2HigherClassMapper(class2HigherClassMapper);\n  drawer.setSeriesLabelGetter(seriesLabelGetter);\n  drawer.setExecutorService(executorService);\n  return drawer;\n}\n"}
{"nl": "Writes a 2D 4 byte position information", "code": "public final void writePos(final Point s){\n  writeShort(s.x);\n  writeShort(s.y);\n}\n"}
{"nl": "Checks if target is same as current player", "code": "private boolean isSelf(Player player,int targetObjId){\n  return player.sameObjectId(targetObjId);\n}\n"}
{"nl": "Have the boss resume - Override", "code": "public void resume(){\n  isPaused=false;\n}\n"}
{"nl": "Return a general case expression", "code": "public Value generalCaseExpression(Expression[] exp,Value val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n"}
{"nl": "release SLHolder for this scan", "code": "public void releaseScan(){\n  release();\n}\n"}
{"nl": "call me once per second", "code": "public void print(TorrentSessionState sessionState){\n  if (shutdown) {\n    return;\n  }\n  try {\n    long downloaded=sessionState.getDownloaded();\n    long uploaded=sessionState.getUploaded();\n    graphics.putString(0,2,getDurations(downloaded - this.downloaded,sessionState.getPiecesRemaining(),sessionState.getPiecesTotal()));\n    graphics.putString(0,3,getSessionInfo(sessionState.getConnectedPeers(),downloaded - this.downloaded,uploaded - this.uploaded));\n    graphics.putString(0,4,getProgressBar(sessionState.getPiecesTotal(),sessionState.getPiecesRemaining()));\n    if (sessionState.getPiecesRemaining() == 0) {\n      graphics.putString(0,5,\"Download is complete. Press Ctrl-C to stop seeding and exit.\");\n    }\n    screen.refresh(Screen.RefreshType.DELTA);\n    this.downloaded=downloaded;\n    this.uploaded=uploaded;\n  }\n catch (  Throwable e) {\n    LOGGER.error(\"Unexpected error when printing session state\",e);\n    shutdown();\n  }\n}\n"}
{"nl": "Perform a mathematical operation (add, subtract, scalar max etc) on the specified double column, with a scalar", "code": "public Builder doubleMathOp(String columnName,MathOp mathOp,double scalar){\n  return transform(new DoubleMathOpTransform(columnName,mathOp,scalar));\n}\n"}
{"nl": "Writes a 3-byte little-endian number", "code": "public static byte[] writeLTriad(int triad){\n  byte b1, b2, b3;\n  b3=(byte)(triad & 0xFF);\n  b2=(byte)((triad >> 8) & 0xFF);\n  b1=(byte)((triad >> 16) & 0xFF);\n  return new byte[]{b3,b2,b1};\n}\n"}
{"nl": "prevent handling of all event inputs in this frame", "code": "public void clear(){\n  isClear=true;\n}\n"}
{"nl": "is a global find possible?", "code": "public boolean isGlobalFindable(){\n  return true;\n}\n"}
{"nl": "Subclasses that want something else than the database flusher should override this method", "code": "protected EventFlusher createEventFlusher(){\n  return null;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set labelFillColor=\");\n  Color color=null;\n  if (np.peekMatchIgnoreCase(\"null\"))   np.matchIgnoreCase(\"null\");\n else   color=np.getColor();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof GraphView) {\n    boolean changed=false;\n    GraphView viewer=(GraphView)getViewer();\n    for (    Node v : viewer.getSelectedNodes()) {\n      if (viewer.isLabelVisible(v)) {\n        viewer.setLabelBackgroundColor(v,color);\n        changed=true;\n      }\n    }\n    for (    Edge edge : viewer.getSelectedEdges()) {\n      if (viewer.isLabelVisible(edge)) {\n        viewer.setLabelBackgroundColor(edge,color);\n        changed=true;\n      }\n    }\n    if (changed) {\n      viewer.repaint();\n    }\n  }\n}\n"}
{"nl": "Id of the faculty to get chairs from", "code": "protected DatabaseGetChairsQuery facultyId(int value){\n  return unsafeParam(\"faculty_id\",value);\n}\n"}
{"nl": "Set album id", "code": "public AudioAddQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n"}
{"nl": "explicitly load the taxonomy classification", "code": "public static void load(){\n  taxonomyClassification=ClassificationManager.get(Classification.Taxonomy,true);\n}\n"}
{"nl": "calculate distance Square", "code": "public double distSquared(double x,double y){\n  double distX=this.x - x;\n  double distY=this.y - y;\n  return distX * distX + distY * distY;\n}\n"}
{"nl": "Removes all entries from this map", "code": "public void clear(){\n  internalMap.clear();\n}\n"}
{"nl": "All targets in all packages below the given path", "code": "public static TargetExpression allFromPackageRecursive(WorkspacePath localPackage){\n  if (localPackage.relativePath().isEmpty()) {\n    return new TargetExpression(\"//...:all\");\n  }\n  return new TargetExpression(\"//\" + localPackage.relativePath() + \"/...:all\");\n}\n"}
{"nl": "Method to convert the given data element given by the JSONObject data element into the extracted BigInteger partitions based upon the given queryType", "code": "public static List<BigInteger> partitionDataElement(QuerySchema qSchema,JSONObject jsonData,boolean embedSelector) throws PIRException {\n  List<BigInteger> parts=new ArrayList<>();\n  DataSchema dSchema=DataSchemaRegistry.get(qSchema.getDataSchemaName());\n  if (embedSelector) {\n    String selectorFieldName=qSchema.getSelectorName();\n    String type=dSchema.getElementType(selectorFieldName);\n    String selector=getSelectorByQueryTypeJSON(qSchema,jsonData);\n    parts.addAll(embeddedSelectorToPartitions(selector,type,dSchema.getPartitionerForElement(selectorFieldName)));\n    logger.debug(\"Added embedded selector for selector = \" + selector + \" type = \"+ type+ \" parts.size() = \"+ parts.size());\n  }\n  List<String> dataFieldsToExtract=qSchema.getElementNames();\n  for (  String fieldName : dataFieldsToExtract) {\n    Object dataElement=null;\n    if (jsonData.containsKey(fieldName)) {\n      dataElement=jsonData.get(fieldName);\n    }\n    if (dSchema.isArrayElement(fieldName)) {\n      List<String> elementArray;\n      if (dataElement == null) {\n        elementArray=Collections.singletonList(\"0\");\n      }\n else {\n        elementArray=StringUtils.jsonArrayStringToArrayList(dataElement.toString());\n      }\n      logger.debug(\"Adding parts for fieldName = \" + fieldName + \" type = \"+ dSchema.getElementType(fieldName)+ \" jsonData = \"+ dataElement);\n      parts.addAll(dSchema.getPartitionerForElement(fieldName).arrayToPartitions(elementArray,dSchema.getElementType(fieldName)));\n    }\n else {\n      if (dataElement == null) {\n        dataElement=\"0\";\n      }\n      logger.debug(\"Adding parts for fieldName = \" + fieldName + \" type = \"+ dSchema.getElementType(fieldName)+ \" jsonData = \"+ dataElement);\n      parts.addAll(dSchema.getPartitionerForElement(fieldName).toPartitions(dataElement.toString(),dSchema.getElementType(fieldName)));\n    }\n  }\n  logger.debug(\"parts.size() = \" + parts.size());\n  return parts;\n}\n"}
{"nl": "Set spam", "code": "public MessagesDeleteQuery spam(Boolean value){\n  return unsafeParam(\"spam\",value);\n}\n"}
{"nl": "Create non-permanent spawn template with no respawn", "code": "public static SpawnTemplate addNewSingleTimeSpawn(int worldId,int npcId,float x,float y,float z,byte heading){\n  return addNewSpawn(worldId,npcId,x,y,z,heading,0);\n}\n"}
{"nl": "Sort order", "code": "public FriendsGetRequestsQuery sort(FriendsGetRequestsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Send a debug log message", "code": "public static void log(MethodMsg methodMsg){\n  if (methodMsg != null) {\n    treeMethods.add(methodMsg);\n  }\n else {\n    throw new NullPointerException(\"MethodMsg is null!\");\n  }\n}\n"}
{"nl": "intialize hnm parameters", "code": "private void initializeParameters(){\n  analysisParams=new HntmAnalyzerParams();\n  analysisParams.harmonicModel=HntmAnalyzerParams.HARMONICS_PLUS_NOISE;\n  analysisParams.noiseModel=HntmAnalyzerParams.WAVEFORM;\n  analysisParams.useHarmonicAmplitudesDirectly=true;\n  analysisParams.harmonicSynthesisMethodBeforeNoiseAnalysis=HntmSynthesizerParams.LINEAR_PHASE_INTERPOLATION;\n  analysisParams.regularizedCepstrumWarpingMethod=RegularizedCepstrumEstimator.REGULARIZED_CEPSTRUM_WITH_POST_MEL_WARPING;\n  synthesisParams=new HntmSynthesizerParams();\n  synthesisParams.harmonicPartSynthesisMethod=HntmSynthesizerParams.LINEAR_PHASE_INTERPOLATION;\n  synthesisParams.overlappingHarmonicPartSynthesis=false;\n  synthesisParams.harmonicSynthesisOverlapInSeconds=0.010f;\n  synthesisParams.writeHarmonicPartToSeparateFile=false;\n  synthesisParams.writeNoisePartToSeparateFile=false;\n  synthesisParams.writeTransientPartToSeparateFile=false;\n  synthesisParams.writeOriginalMinusHarmonicPartToSeparateFile=false;\n}\n"}
{"nl": "Verify the user's phone number", "code": "public static void sendVerificationToken(AirMapCallback<Void> listener){\n  String url=String.format(pilotSendVerifyUrl,AirMap.getUserId());\n  AirMap.getClient().post(url,new VoidCallback(listener));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsAreFriendsQuery(VkApiClient client,UserActor actor,List<Integer> userIds){\n  super(client,\"friends.areFriends\",Utils.buildParametrizedType(List.class,FriendStatus.class));\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n"}
{"nl": "Set fields", "code": "public NewsfeedGetCommentsQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Utility method that creates a combo box", "code": "protected Combo createCombo(Composite parent){\n  Combo combo=new Combo(parent,SWT.READ_ONLY);\n  GridData data=new GridData(GridData.FILL_HORIZONTAL);\n  data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;\n  combo.setLayoutData(data);\n  return combo;\n}\n"}
{"nl": "notify that player requested dialog with npc", "code": "public void notifyRequestDialogObservers(Npc npc){\n  notifyObservers(ObserverType.NPCDIALOGREQUEST,npc);\n}\n"}
{"nl": "angle to radian", "code": "public static double angle2Radian(double angle){\n  return angle / 180 * Math.PI;\n}\n"}
{"nl": "a look-up table for mapping rate labels to relative values", "code": "private String rateLabels2RelativeValues(String rateAttribute){\n  if (rateAttribute.equals(\"x-slow\")) {\n    return \"-50%\";\n  }\n else   if (rateAttribute.equals(\"slow\")) {\n    return \"-33.3%\";\n  }\n else   if (rateAttribute.equals(\"medium\")) {\n    return \"+0%\";\n  }\n else   if (rateAttribute.equals(\"fast\")) {\n    return \"+33%\";\n  }\n else   if (rateAttribute.equals(\"x-fast\")) {\n    return \"+100%\";\n  }\n  return \"+0%\";\n}\n"}
{"nl": "Fail if there is already an equal property of this type", "code": "private void testUniqueProperty(UniqueVarProperty property){\n  getProperty(property.getClass()).filter(null).ifPresent(null);\n}\n"}
{"nl": "Checks float parse", "code": "private void checkFloat(float expected,String string,int delta){\n  int expectedBits=Float.floatToRawIntBits(expected);\n  BytesRef bytes=getBytes(string);\n  final float v;\n  try {\n    v=MathUtil.parseFloat(bytes.bytes,bytes.offset,bytes.length);\n  }\n catch (  Throwable t) {\n    throw new AssertionError(string + \" didn't parse to \" + expected+ \", instead hit \"+ t,t);\n  }\n  try {\n    int actualBits=Float.floatToRawIntBits(v);\n    int actualDelta=Math.abs(expectedBits - actualBits);\n    if (actualDelta > delta) {\n      throw new AssertionError(\"expected: <\" + expectedBits + \"> but was:<\"+ actualBits+ \">\");\n    }\n  }\n catch (  Throwable t) {\n    throw new AssertionError(string + \" didn't parse to \" + expected+ \", instead: \"+ v,t);\n  }\n}\n"}
{"nl": "Creates a new executor object for spawning worker threads", "code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Constructs a new MergedManifest", "code": "MergedManifest(@NotNull Module module){\n  myModule=module;\n}\n"}
{"nl": "Adds +live to the query", "code": "public void addLive(boolean live){\n  query.append(\" +live:\" + live);\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String[] firstLines=Basic.getFirstLinesFromFile(new File(fileName),2);\n  return firstLines != null && firstLines.length == 2 && firstLines[0].startsWith(\">\") && Basic.contains(firstLines[1],';',2) && !firstLines[1].toLowerCase().contains(\"root\");\n}\n"}
{"nl": "meizu Flyme set status bar light mode", "code": "public static boolean FlymeSetStatusBarLightMode(Window window,boolean dark){\n  boolean result=false;\n  if (window != null) {\n    try {\n      WindowManager.LayoutParams lp=window.getAttributes();\n      Field darkFlag=WindowManager.LayoutParams.class.getDeclaredField(\"MEIZU_FLAG_DARK_STATUS_BAR_ICON\");\n      Field meizuFlags=WindowManager.LayoutParams.class.getDeclaredField(\"meizuFlags\");\n      darkFlag.setAccessible(true);\n      meizuFlags.setAccessible(true);\n      int bit=darkFlag.getInt(null);\n      int value=meizuFlags.getInt(lp);\n      if (dark) {\n        value|=bit;\n      }\n else {\n        value&=~bit;\n      }\n      meizuFlags.setInt(lp,value);\n      window.setAttributes(lp);\n      result=true;\n    }\n catch (    Exception e) {\n    }\n  }\n  return result;\n}\n"}
{"nl": "Spawn Anuratis Helpers <p/> movement must be better adapted", "code": "protected void spawnHelpers(int npcId,float x,float y,float z,byte h,int count,int action){\n  if (isHome.equals(true) || isAlreadyDead()) {\n    return;\n  }\n  for (int i=0; i < count; i++) {\n    SpawnTemplate summon=SpawnEngine.addNewSingleTimeSpawn(getPosition().getMapId(),npcId,x,y,z,h);\n    VisibleObject npc=SpawnEngine.spawnObject(summon,getPosition().getInstanceId());\n    PacketSendUtility.broadcastPacket(getOwner(),new SM_NPC_INFO((Npc)npc,\"\"));\n    addHelpersSpawn(npc.getObjectId());\nswitch (action) {\ncase 1:\n      moveToForward((Npc)npc,633.7391f,455.4411f,135.82466f,false);\n    break;\ncase 2:\n  moveToForward((Npc)npc,639.51807f,455.4411f,135.82466f,false);\nbreak;\ncase 3:\nmoveToForward((Npc)npc,636.39575f,455.4411f,135.82466f,false);\nbreak;\n}\n}\n}\n"}
{"nl": "pack metadata array to string", "code": "public static String pack_metadata(NameValuePair[] meta_list){\n  if (meta_list.length == 0) {\n    return \"\";\n  }\n  StringBuffer sb=new StringBuffer(32 * meta_list.length);\n  sb.append(meta_list[0].getName()).append(FDFS_FIELD_SEPERATOR).append(meta_list[0].getValue());\n  for (int i=1; i < meta_list.length; i++) {\n    sb.append(FDFS_RECORD_SEPERATOR);\n    sb.append(meta_list[i].getName()).append(FDFS_FIELD_SEPERATOR).append(meta_list[i].getValue());\n  }\n  return sb.toString();\n}\n"}
{"nl": "draw the node and the label", "code": "public void drawNodeAndLabel(Node v,boolean selected){\n  draw(v,selected);\n  drawLabel(v,selected);\n}\n"}
{"nl": "The main method used for finding jobs to index and actually doing the work", "code": "@Override public void execute(JobExecutionContext context) throws JobExecutionException {\n  if (isEnabled() == false) {\n    return;\n  }\n  if (Singleton.getBackgroundJobsEnabled() == false) {\n    return;\n  }\n  Thread.currentThread().setPriority(Thread.MIN_PRIORITY);\n  while (CodeIndexer.shouldPauseAdding()) {\n    Singleton.getLogger().info(\"Pausing parser.\");\n    return;\n  }\n  UniqueRepoQueue repoQueue=this.getNextQueuedRepo();\n  RepoResult repoResult=repoQueue.poll();\n  AbstractMap<String,Integer> runningIndexRepoJobs=Singleton.getRunningIndexRepoJobs();\n  if (repoResult != null && !runningIndexRepoJobs.containsKey(repoResult.getName())) {\n    Singleton.getLogger().info(\"File Indexer Indexing \" + repoResult.getName());\n    try {\n      runningIndexRepoJobs.put(repoResult.getName(),(int)(System.currentTimeMillis() / 1000));\n      JobDataMap data=context.getJobDetail().getJobDataMap();\n      String repoName=repoResult.getName();\n      this.repoName=repoName;\n      String repoRemoteLocation=repoResult.getUrl();\n      String repoLocations=data.get(\"REPOLOCATIONS\").toString();\n      this.LOWMEMORY=Boolean.parseBoolean(data.get(\"LOWMEMORY\").toString());\n      Path docDir=Paths.get(repoRemoteLocation);\n      this.indexDocsByPath(docDir,repoName,repoLocations,repoRemoteLocation,true);\n    }\n  finally {\n      runningIndexRepoJobs.remove(repoResult.getName());\n    }\n  }\n}\n"}
{"nl": "Perform any actions that need to be executed after space recovery and before it is started", "code": "private void postRecoveryActions(ISpaceSynchronizeReplicaState recoveryState) throws Exception {\n  changeSpaceState(ISpaceState.STARTING,true,true);\n  if (recoveryState != null) {\n    int replicationSynchronizationTimeout=5 * 60;\n    try {\n      long syncStartTime=SystemTime.timeMillis();\n      ISpaceSynchronizeResult synchronizeResult=recoveryState.waitForSynchronizeCompletion(replicationSynchronizationTimeout,TimeUnit.SECONDS);\n      if (synchronizeResult != null) {\n        if (synchronizeResult.isFailed()) {\n          if (_logger.isLoggable(Level.WARNING))           _logger.warning(\"Synchronization failed: \" + synchronizeResult.getFailureReason());\n          throw synchronizeResult.getFailureReason();\n        }\n        if (getEngine().getReplicationNode() != null && getEngine().getReplicationNode().getDirectPesistencySyncHandler() != null) {\n          getEngine().getReplicationNode().getDirectPesistencySyncHandler().afterRecovery();\n          getEngine().getReplicationNode().setDirectPersistencyBackupSyncIteratorHandler(null);\n        }\n        if (getDirectPersistencyRecoveryHelper() != null && isBackup()) {\n          getDirectPersistencyRecoveryHelper().setPendingBackupRecovery(false);\n        }\n        if (_logger.isLoggable(Level.INFO)) {\n          long duration=SystemTime.timeMillis() - syncStartTime;\n          _logger.info(\"Synchronization completed [duration=\" + JSpaceUtilities.formatMillis(duration) + \"]\");\n        }\n      }\n    }\n catch (    TimeoutException e) {\n      if (getEngine().getCacheManager().isOffHeapCachePolicy()) {\n        if (_logger.isLoggable(Level.SEVERE))         _logger.severe(\"Timeout occurred [\" + replicationSynchronizationTimeout + \" seconds] while waiting for replication to synchronize. Will shut down space since blobstore inconsistent space can't be started.\");\n        throw e;\n      }\n      if (_logger.isLoggable(Level.WARNING))       _logger.warning(\"Timeout occurred [\" + replicationSynchronizationTimeout + \" seconds] while waiting for replication to synchronize. Starting the space without complete synchronization.\");\n    }\ncatch (    Exception e) {\n      changeSpaceState(ISpaceState.STARTING,true,false);\n      throw e;\n    }\n  }\n}\n"}
{"nl": "prepare the underlying xtn designated by the rendered xid", "code": "public int prepare(Object xid) throws CannotCommitException, UnknownTransactionException, RemoteException {\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.entering(TxnManagerImpl.class.getName(),\"prepare-xid\",xid);\n  }\n  TxnManagerTransaction txntr=_txns.get(xid);\n  if (txntr == null)   throw new UnknownTransactionException(\"unknown transaction\");\n  return txntr.prepare(Long.MAX_VALUE);\n}\n"}
{"nl": "Used when socketing of equipped item", "code": "public static void addStoneStats(Item item,ManaStone stone,CreatureGameStats<?> cgs){\n  List<StatFunction> modifiers=stone.getModifiers();\n  if (modifiers == null) {\n    return;\n  }\n  cgs.addEffect(stone,modifiers);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n"}
{"nl": "length of array", "code": "@Override public long limit(){\n  return fileLength;\n}\n"}
{"nl": "start a new classification", "code": "public void startClassificationSection(String name) throws IOException {\n  currentName=name;\n  dumpStart=io.getPosition();\n  classificationIndexTmpFileWriter=new OutputWriter(rma2File.getClassificationIndexTmpFile());\n  numberOfClasses=0;\n}\n"}
{"nl": "Converts Headers array to Map", "code": "protected static Map<String,String> convertHeaders(Header[] headers){\n  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);\n  for (int i=0; i < headers.length; i++) {\n    result.put(headers[i].getName(),headers[i].getValue());\n  }\n  return result;\n}\n"}
{"nl": "Copies the larger frame data and makes a smaller (half size) version; this is used for faster thumbnail painting during render previews etc", "code": "private FrameData(@NotNull DeviceData deviceData,@NotNull FrameData large){\n  myDeviceData=deviceData;\n  myDouble=large;\n  myOrientation=large.myOrientation;\n  myX=large.myX / 2;\n  myY=large.myY / 2;\n  myWidth=large.myWidth / 2;\n  myHeight=large.myHeight / 2;\n  myFrameWidth=large.myFrameWidth / 2;\n  myFrameHeight=large.myFrameHeight / 2;\n  myCropX1=0;\n  myCropY1=0;\n  myCropX2=myFrameWidth;\n  myCropY2=myFrameHeight;\n}\n"}
{"nl": "Writes a byte to the buffer", "code": "public static void writeByte(PacketBuffer buf,byte value){\n  buf.writeByte(value);\n}\n"}
{"nl": "Initialized based on configuration Set the following attributes in the conf:", "code": "public FileRecordWriter(Configuration conf) throws FileNotFoundException {\n  setConf(conf);\n}\n"}
{"nl": "extract a metadata table containing the named samples", "code": "public SampleAttributeTable extractTable(Collection<String> samples){\n  SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();\n  for (  String sample : getSampleOrder()) {\n    if (samples.contains(sample)) {\n      sampleAttributeTable.addSample(sample,getAttributesToValues(sample),true,true);\n    }\n  }\n  sampleAttributeTable.attributeOrder.clear();\n  sampleAttributeTable.attributeOrder.addAll(attributeOrder);\n  for (  String attribute : attribute2type.keySet()) {\n    sampleAttributeTable.attribute2type.put(attribute,attribute2type.get(attribute));\n  }\n  sampleAttributeTable.removeUndefinedAttributes();\n  return sampleAttributeTable;\n}\n"}
{"nl": "Adds one element to the list", "code": "public void addElem(AnnotationElem elem){\n  if (elems == null)   elems=new ArrayList<AnnotationElem>();\n  elems.add(elem);\n}\n"}
{"nl": "Hides all dialogs and unregisters activity lifecycle callbacks", "code": "public static void release(Application app){\n  if (sLifecycleCallbacks != null) {\n    app.unregisterActivityLifecycleCallbacks(sLifecycleCallbacks);\n  }\n  hideProgressDialogsAll();\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  LoadBalancingPolicy copy=(LoadBalancingPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(empty,copy));\n}\n"}
{"nl": "Set guid", "code": "public NotesCreateCommentQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n"}
{"nl": "Implementation internal", "code": "public XSSimpleTypeDecl newXSSimpleTypeDecl(){\n  return new XSSimpleTypeDecl();\n}\n"}
{"nl": "Create a new MediaWrapper", "code": "public MediaWrapper(Uri uri){\n  if (uri == null)   throw new NullPointerException(\"uri was null\");\n  mUri=uri;\n  init(null);\n}\n"}
{"nl": "Disband group by removing all players one by one", "code": "@GlobalCallback(PlayerGroupDisbandCallback.class) public static void disband(PlayerGroup group){\n  Preconditions.checkState(group.onlineMembers() <= 1,\"Can't disband group with more than one online member\");\n  groups.remove(group.getTeamId());\n  group.onEvent(new GroupDisbandEvent(group));\n}\n"}
{"nl": "For testing only", "code": "public static void main(final String[] args){\n  ConfigurationElementReport report=new ConfigurationElementReport(ConfigConstants.Action.CREATE,ConfigConstants.Entity.ALARM,new Long(100000),ConfigConstants.Status.WARNING,\"DOn't know why\");\n  report.addSubReport(new ConfigurationElementReport(ConfigConstants.Action.CREATE,ConfigConstants.Entity.DATATAG,new Long(400)));\n  System.out.println(report.toXML());\n}\n"}
{"nl": "init The CatchmeBoardStatues Using tagNumber and ItemSetNumber", "code": "public CatchmeBoardStatues(int tagNumber,int itemset){\n  super();\n  this.tagNumber=tagNumber;\n  this.itemset=itemset;\n}\n"}
{"nl": "Saves mood data to DB", "code": "public void savePetMoodData(){\n  DAOManager.getDAO(PlayerPetsDAO.class).savePetMoodData(this);\n}\n"}
{"nl": "Move the boss - Override Update function", "code": "public void move(float delta){\n}\n"}
{"nl": "Construct a list of DOMImplementations from a Vector", "code": "public DOMImplementationListImpl(Vector params){\n  fImplementations=new ArrayList(params);\n}\n"}
{"nl": "draw the x axis", "code": "protected void drawXAxis(Graphics2D gc){\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));\n  int x=5;\n  int y=getHeight() - bottomMargin + 25;\n  if (isTranspose())   gc.drawString(getChartData().getClassesLabel(),x,y);\n else   gc.drawString(getChartData().getSeriesLabel(),x,y);\n}\n"}
{"nl": "Creates the wizard pages", "code": "public void addPages(){\n  ISVNRepositorySourceProvider[] repositorySourceProviders=null;\n  try {\n    repositorySourceProviders=SVNUIPlugin.getRepositorySourceProviders();\n  }\n catch (  Exception e) {\n  }\n  if (repositorySourceProviders != null && repositorySourceProviders.length > 0) {\n    repositorySourceProviderPage=new ConfigurationWizardRepositorySourceProviderPage(\"source\",Policy.bind(\"NewLocationWizard.heading\"),SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_LOCATION),repositorySourceProviders);\n    repositorySourceProviderPage.setDescription(Policy.bind(\"NewLocationWizard.0\"));\n    addPage(repositorySourceProviderPage);\n    for (    ISVNRepositorySourceProvider repositorySourceProvider : repositorySourceProviders) {\n      SVNRepositoryProviderWizardPage wizardPage=repositorySourceProvider.getWizardPage();\n      addPage(wizardPage);\n      wizardPageMap.put(repositorySourceProvider,wizardPage);\n    }\n  }\n  mainPage=new ConfigurationWizardMainPage(\"main\",Policy.bind(\"NewLocationWizard.heading\"),SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_LOCATION));\n  if (properties != null) {\n    mainPage.setProperties(properties);\n  }\n  mainPage.setDescription(Policy.bind(\"NewLocationWizard.description\"));\n  mainPage.setDialogSettings(getDialogSettings());\n  addPage(mainPage);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"messages.getChat\",ChatFull.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n"}
{"nl": "Triggers a first pokemon scan after a successful login", "code": "@Subscribe public void onEvent(LoginEventResult result){\n  if (result.isLoggedIn()) {\n    LatLng latLng=LocationManager.getInstance(MainActivity.this).getLocation();\n    if (latLng != null) {\n      nianticManager.getCatchablePokemon(latLng.latitude,latLng.longitude,0D);\n    }\n else {\n      Snackbar.make(findViewById(R.id.root),getString(R.string.toast_login_error),Snackbar.LENGTH_LONG).show();\n    }\n  }\n}\n"}
{"nl": "whether the index is illegal", "code": "private boolean isIllegalIndex(int i){\n  return i < curStartIndex || i >= curEndIndex;\n}\n"}
{"nl": "Converts a buffered image to a JPEG image", "code": "public static byte[] bufferedImageToJPEG(BufferedImage img,float quality) throws IOException {\n  Iterator<ImageWriter> writers=ImageIO.getImageWritersBySuffix(\"jpeg\");\n  if (!writers.hasNext())   throw new IllegalStateException(\"No writers for jpeg...\");\n  ImageWriter writer=(ImageWriter)writers.next();\n  ImageWriteParam imageWriteParam=writer.getDefaultWriteParam();\n  imageWriteParam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\n  imageWriteParam.setCompressionQuality(quality);\n  IIOImage iioImage=new IIOImage(img,null,null);\n  ByteArrayOutputStream baos=new ByteArrayOutputStream(img.getWidth() * img.getHeight() * 2);\n  MemoryCacheImageOutputStream mcios=new MemoryCacheImageOutputStream(baos);\n  writer.setOutput(mcios);\n  writer.write(null,iioImage,imageWriteParam);\n  baos.flush();\n  mcios.close();\n  return baos.toByteArray();\n}\n"}
{"nl": "Traverse &lt;anyAttribute&gt;", "code": "XSWildcardDecl traverseAnyAttribute(Element elmNode,XSDocumentInfo schemaDoc,SchemaGrammar grammar){\n  Object[] attrValues=fAttrChecker.checkAttributes(elmNode,false,schemaDoc);\n  XSWildcardDecl wildcard=traverseWildcardDecl(elmNode,attrValues,schemaDoc,grammar);\n  fAttrChecker.returnAttrArray(attrValues,schemaDoc);\n  return wildcard;\n}\n"}
{"nl": "compare each other vector, equals", "code": "public boolean equals(Math_Vector other){\n  if (this.x == other.x && this.y == other.y)   return true;\n  return false;\n}\n"}
{"nl": "Updates the view associated to the activity after the finish of an operation trying create a new folder", "code": "private void onCreateFolderOperationFinish(CreateFolderOperation operation,RemoteOperationResult result){\n  if (result.isSuccess()) {\n    refreshListOfFilesFragment();\n  }\n else {\n    try {\n      Toast msg=Toast.makeText(FileDisplayActivity.this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);\n      msg.show();\n    }\n catch (    NotFoundException e) {\n      Log_OC.e(TAG,\"Error while trying to show fail message \",e);\n    }\n  }\n}\n"}
{"nl": "It closes the input stream", "code": "public final void closeFallbackInputStream() throws DataFallbackException {\n  if (getInput() != null) {\n    try {\n      if (LOG.isDebugEnabled())       LOG.debug(\"closeInputStream() : Closing the file reader for the file \" + dataFile.getName());\n      getInput().close();\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n finally {\n      setInput(null);\n    }\n  }\n}\n"}
{"nl": "Check if the class is valid by clzName", "code": "public static boolean isClassSupport(String clzName){\n  try {\n    Class.forName(clzName);\n    return true;\n  }\n catch (  ClassNotFoundException e) {\n    return false;\n  }\n}\n"}
{"nl": "Set sticker id", "code": "public PhotosCreateCommentQuery stickerId(Integer value){\n  return unsafeParam(\"sticker_id\",value);\n}\n"}
{"nl": "Check if this device has a camera", "code": "private boolean checkCameraHardware(Context context){\n  if (isInEditMode()) {\n    return false;\n  }\n  if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Add a boolean to the config", "code": "public ResourcesPoet addBool(String name,boolean value){\n  addBool(name,String.valueOf(value));\n  return this;\n}\n"}
{"nl": "Identifier of an album", "code": "public MarketSearchQueryWithExtended albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n"}
{"nl": "given an object scan the list, find it and remove it, returns true if found", "code": "public boolean removeByObject(T obj){\n  lock.lock();\n  IObjectInfo<T> oi=null;\n  try {\n    if (_objectsMap != null) {\n      if ((oi=_objectsMap.remove(obj)) != null) {\n        remove_impl((ObjectInfo<T>)oi);\n        if (m_Size == 0)         _objectsMap=null;\n        return true;\n      }\n      return false;\n    }\n    return removeByObject_impl(obj);\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "Simple HTTP GET request", "code": "public void sendRequest(String url,final IRequestCallback uiUpdater){\n  Request request=new Request.Builder().url(url).build();\n  sendRequest(request,uiUpdater);\n}\n"}
{"nl": "Need to be called when the mouse is released", "code": "public void mouseReleased(){\n  mSnapCandidates.clear();\n}\n"}
{"nl": "Parse the time in milliseconds into String with the format: hh:mm:ss or mm:ss", "code": "@SuppressLint(\"DefaultLocale\") public static String formatDuration(int duration){\n  duration/=1000;\n  int minute=duration / 60;\n  int hour=minute / 60;\n  minute%=60;\n  int second=duration % 60;\n  if (hour != 0)   return String.format(\"%2d:%02d:%02d\",hour,minute,second);\n else   return String.format(\"%02d:%02d\",minute,second);\n}\n"}
{"nl": "Get an instance of an <code>unsigned byte</code>", "code": "public static UByte valueOf(int value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(value));\n}\n"}
{"nl": "check NetworkAvailable", "code": "public static boolean isNetworkAvailable(Context context){\n  ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n  if (null == manager)   return false;\n  NetworkInfo info=manager.getActiveNetworkInfo();\n  if (null == info || !info.isAvailable())   return false;\n  return true;\n}\n"}
{"nl": "If <restriction> is chosen", "code": "@Override public void applyFacets(XSFacets facets,short presentFacet,short fixedFacet,ValidationContext context) throws InvalidDatatypeFacetException {\n  if (context == null) {\n    context=fEmptyContext;\n  }\n  applyFacets(facets,presentFacet,fixedFacet,SPECIAL_PATTERN_NONE,context);\n}\n"}
{"nl": "Convert an observable to the actual result, recovering the actual exception and throwing that", "code": "public static <T>T toCompose(Observable<T> observable) throws LoginFailedException, RemoteServerException {\n  try {\n    return observable.toBlocking().first();\n  }\n catch (  RuntimeException e) {\n    if (e.getCause() instanceof AsyncLoginFailedException) {\n      throw new LoginFailedException(e.getMessage(),e.getCause());\n    }\n    if (e.getCause() instanceof AsyncRemoteServerException) {\n      throw new RemoteServerException(e.getMessage(),e.getCause());\n    }\n    throw new AsyncPokemonGoException(\"Unknown exception occurred. \",e);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetByIdQuery(VkApiClient client,UserActor actor,List<String> audios){\n  super(client,\"audio.getById\",Utils.buildParametrizedType(List.class,AudioFull.class));\n  accessToken(actor.getAccessToken());\n  audios(audios);\n}\n"}
{"nl": "Sort order", "code": "public PhotosGetCommentsQuery sort(PhotosGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Set fields", "code": "public NewsfeedGetRecommendedQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Shared method which performs all logic for determining and doing if the file is believed to be binary", "code": "public boolean determineBinary(String fileLocation,String fileName,List<String> codeLines,List<String[]> reportList){\n  SearchcodeLib scl=new SearchcodeLib();\n  BinaryFinding binaryFinding=scl.isBinary(codeLines,fileName);\n  if (binaryFinding.isBinary()) {\n    Singleton.getLogger().info(\"Appears to be binary will not index \" + binaryFinding.getReason() + \" \"+ fileLocation);\n    reportList.add(new String[]{fileLocation,\"excluded\",binaryFinding.getReason()});\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Clear all observers", "code": "public void clear(){\n  lock.lock();\n  try {\n    onceUsedObservers.clear();\n  }\n  finally {\n    lock.unlock();\n  }\n  observers.clear();\n  attackCalcObservers.clear();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n"}
{"nl": "Convert an ndarray to a record", "code": "public static List<Writable> toRecord(INDArray array){\n  List<Writable> writables=new ArrayList<>();\n  writables.add(new NDArrayWritable(array));\n  return writables;\n}\n"}
{"nl": "Load the given precompiled join cost file", "code": "@Override public void load(String fileName,InputStream dummy,String dummy2,float dummy3) throws IOException, MaryConfigurationException {\n  DataInputStream dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));\n  hdr=new MaryHeader(dis);\n  if (hdr.getType() != MaryHeader.PRECOMPUTED_JOINCOSTS) {\n    throw new MaryConfigurationException(\"File [\" + fileName + \"] is not a valid Mary precompiled join costs file.\");\n  }\n  int numberOfLeftUnits=dis.readInt();\n  if (numberOfLeftUnits < 0) {\n    throw new MaryConfigurationException(\"File [\" + fileName + \"] has a negative number of units. Aborting.\");\n  }\n  left=new HashMap();\n  for (int i=0; i < numberOfLeftUnits; i++) {\n    int leftIndex=dis.readInt();\n    int numberOfRightUnits=dis.readInt();\n    Map right=new HashMap();\n    left.put(new Integer(leftIndex),right);\n    for (int j=0; j < numberOfRightUnits; j++) {\n      int rightIndex=dis.readInt();\n      float cost=dis.readFloat();\n      right.put(new Integer(rightIndex),new Float(cost));\n    }\n  }\n}\n"}
{"nl": "Will resolve type of new expression", "code": "private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){\n  ClassReference objClassRef=objSubjectExpression.getClassReference();\n  if (null == objClassRef || null == objClassRef.getFQN()) {\n    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);\n    return;\n  }\n  objTypesSet.add(objClassRef.getFQN());\n}\n"}
{"nl": "Draw success", "code": "private void drawDownLoaded(Canvas canvas,STATUS_MARK status,RectF bounds,float angle){\n  publicPaint.setColor(getProgressColor());\nswitch (status) {\ncase DRAW_ARC:\n    canvas.drawArc(bounds,DEGREE_END_ANGLE - angle,0.001f * TOTAL_ANGLE,false,publicPaint);\n  break;\ncase DRAW_MARK:\nfinal Path dst=mDst;\ndst.reset();\ndst.lineTo(0,0);\npathMeasure1.getSegment(mMarkOkstart * mMarkOklength,(mMarkOkstart + mMarkOkdegree) * mMarkOklength,dst,true);\ncanvas.drawPath(dst,publicPaint);\nbreak;\n}\n}\n"}
{"nl": "Gets a caller id (IP + role)", "code": "public String clientAppId(){\n  return (String)httpRequest.getAttribute(AuthenticationFilter.AuthenticatedRoleAttributeName);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketRemoveFromAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,int... albumIds){\n  super(client,\"market.removeFromAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  albumIds(albumIds);\n}\n"}
{"nl": "Update an aircraft for the authenticated user", "code": "public static void updateAircraft(AirMapAircraft aircraft,AirMapCallback<AirMapAircraft> listener){\n  String url=String.format(pilotAircraftByIdUrl,AirMap.getUserId(),aircraft.getAircraftId());\n  AirMap.getClient().patch(url,aircraft.getAsParamsPatch(),new GenericOkHttpCallback(listener,AirMapAircraft.class));\n}\n"}
{"nl": "Specify the icon that will be drawn in the center of the target bounds", "code": "public TapTarget icon(Drawable icon,boolean hasSetBounds){\n  if (icon == null)   throw new IllegalArgumentException(\"Cannot use null drawable\");\n  this.icon=icon;\n  if (!hasSetBounds) {\n    this.icon.setBounds(new Rect(0,0,this.icon.getIntrinsicWidth(),this.icon.getIntrinsicHeight()));\n  }\n  return this;\n}\n"}
{"nl": "Construct an XSNamedMap implementation for a list of namespaces", "code": "public XSNamedMapImpl(String[] namespaces,SymbolHash[] maps,int num){\n  fNamespaces=namespaces;\n  fMaps=maps;\n  fNSNum=num;\n}\n"}
{"nl": "grab the total subject string", "code": "public static String grabSubjectString(String text) throws IOException {\n  BufferedReader r=new BufferedReader(new StringReader(text));\n  String aLine;\n  StringBuilder buf=new StringBuilder();\n  boolean passedScore=false;\n  while ((aLine=r.readLine()) != null) {\n    aLine=aLine.trim();\n    if (aLine.startsWith(\"Score\")) {\n      if (!passedScore)       passedScore=true;\n else       break;\n    }\n    if (aLine.startsWith(\"Sbjct\")) {\n      String[] words=aLine.split(\" +\");\n      buf.append(words[2]);\n    }\n  }\n  return buf.toString().replaceAll(\"\\n\",\"\").replaceAll(\"\\r\",\"\");\n}\n"}
{"nl": "Adds a new UID", "code": "public void add(String uid){\n  cleanIfNeeded();\n  if (currentSet) {\n    _idSet0.add(uid);\n  }\n else {\n    _idSet1.add(uid);\n  }\n}\n"}
{"nl": "Id of an item to place current item before it", "code": "public MarketReorderItemsQuery before(Integer value){\n  return unsafeParam(\"before\",value);\n}\n"}
{"nl": "Perform sorting according to sort type", "code": "private void sortBrokerItems(BrokerItem[] brokerItems,int sortType){\n  Arrays.sort(brokerItems,BrokerItem.getComparatoryByType(sortType));\n}\n"}
{"nl": "Set sound", "code": "public AccountSetSilenceModeQuery sound(Integer value){\n  return unsafeParam(\"sound\",value);\n}\n"}
{"nl": "Rift announce packet", "code": "public SM_RIFT_ANNOUNCE(FastMap<Integer,Integer> rifts){\n  this.actionId=0;\n  this.rifts=rifts;\n}\n"}
{"nl": "Parses the NDEF Message from the intent and prints to the TextView", "code": "void processIntent(Intent intent){\n  Parcelable[] rawMsgs=intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);\n  NdefMessage msg=(NdefMessage)rawMsgs[0];\n  String playerMac=new String(msg.getRecords()[0].getPayload());\n  GameSetupManager.getInstance().addPlayer(playerMac);\n  addingPlayer.show();\n  Toast.makeText(getApplicationContext(),\"Adding Player : \" + playerMac,Toast.LENGTH_LONG).show();\n}\n"}
{"nl": "update User cach And db", "code": "public void updateContactList(List<User> contactInfoList){\n  for (  User u : contactInfoList) {\n    contactList.put(u.getUsername(),u);\n  }\n  ArrayList<User> mList=new ArrayList<User>();\n  mList.addAll(contactList.values());\n  ((DemoHXSDKModel)getModel()).saveContactList(mList);\n}\n"}
{"nl": "ID of a user to save the data", "code": "protected SecureAddAppEventQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "TestCase to reproduce Issue ACT-1344", "code": "@Deployment public void testNonInterruptingSignalWithSubProcess(){\n  ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"nonInterruptingSignalWithSubProcess\");\n  List<Task> tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();\n  assertEquals(1,tasks.size());\n  Task currentTask=tasks.get(0);\n  assertEquals(\"Approve\",currentTask.getName());\n  runtimeService.signalEventReceived(\"alert\");\n  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();\n  assertEquals(2,tasks.size());\n  for (  Task task : tasks) {\n    if (!task.getName().equals(\"Approve\") && !task.getName().equals(\"Review\")) {\n      fail(\"Expected: <Approve> or <Review> but was <\" + task.getName() + \">.\");\n    }\n  }\n  taskService.complete(taskService.createTaskQuery().taskName(\"Approve\").singleResult().getId());\n  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();\n  assertEquals(1,tasks.size());\n  currentTask=tasks.get(0);\n  assertEquals(\"Review\",currentTask.getName());\n  taskService.complete(taskService.createTaskQuery().taskName(\"Review\").singleResult().getId());\n  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();\n  assertEquals(1,tasks.size());\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"load taxonomyFile=\");\n  String treeFile=np.getWordFileNamePunctuation();\n  String mapFile=null;\n  if (np.peekMatchAnyTokenIgnoreCase(\"mapFile\")) {\n    np.matchIgnoreCase(\"mapFile=\");\n    mapFile=np.getWordFileNamePunctuation();\n  }\n  np.matchIgnoreCase(\";\");\n  if (mapFile == null)   mapFile=Basic.replaceFileSuffix(treeFile,\".map\");\n  Classification classification=ClassificationManager.load(Classification.Taxonomy,treeFile,mapFile,getDoc().getProgressListener());\n  Node v=classification.getFullTree().getRoot();\n  if (v != null && (Integer)v.getInfo() == 0) {\n    v.setInfo(1);\n    classification.getFullTree().addId2Node(0,null);\n    classification.getFullTree().addId2Node(1,v);\n    classification.getIdMapper().getName2IdMap().put(\"Root\",1);\n  }\n  Collection<Pair<String,String>> mappingFixes=new LinkedList<>();\n  mappingFixes=ProgramProperties.get(MeganProperties.TAXON_MAPPING_CHANGES,mappingFixes);\n  for (  Pair<String,String> pair : mappingFixes) {\n    String taxonName=pair.getFirst();\n    int taxId=Integer.parseInt(pair.getSecond());\n    System.err.println(\"Changing taxon mapping of '\" + taxonName + \"' from \"+ TaxonomyData.getName2IdMap().get(taxonName)+ \" to \"+ taxId);\n    TaxonomyData.getName2IdMap().put(taxonName,taxId);\n    classification.getIdMapper().getName2IdMap().put(taxonName,taxId);\n    classification.getId2Rank().put(taxId,0);\n  }\n  ProgramProperties.put(MeganProperties.TAXONOMYFILE,treeFile);\n  Document.loadVersionInfo(\"Taxonomy\",treeFile);\n}\n"}
{"nl": "This method reads the load metadata file", "code": "public LoadMetadataDetails[] readLoadMetadata(String tableFolderPath){\n  Gson gsonObjectToRead=new Gson();\n  DataInputStream dataInputStream=null;\n  BufferedReader buffReader=null;\n  InputStreamReader inStream=null;\n  String metadataFileName=tableFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.LOADMETADATA_FILENAME;\n  LoadMetadataDetails[] listOfLoadFolderDetailsArray;\n  AtomicFileOperations fileOperation=new AtomicFileOperationsImpl(metadataFileName,FileFactory.getFileType(metadataFileName));\n  try {\n    if (!FileFactory.isFileExist(metadataFileName,FileFactory.getFileType(metadataFileName))) {\n      return new LoadMetadataDetails[0];\n    }\n    dataInputStream=fileOperation.openForRead();\n    inStream=new InputStreamReader(dataInputStream,Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET));\n    buffReader=new BufferedReader(inStream);\n    listOfLoadFolderDetailsArray=gsonObjectToRead.fromJson(buffReader,LoadMetadataDetails[].class);\n  }\n catch (  IOException e) {\n    return new LoadMetadataDetails[0];\n  }\n finally {\n    closeStreams(buffReader,inStream,dataInputStream);\n  }\n  return listOfLoadFolderDetailsArray;\n}\n"}
{"nl": "Adds a new route", "code": "public synchronized void addRoute(String to,String via){\n  if (routeExists(to,via)) {\n    return;\n  }\n  addForwardEntry(to,via);\n  inverseTable.add(via,to);\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.180535929306,0.262801138133,0.301905425199,0.330899152971,0.353441418887,0.000788590320203,0.00737060094841,0.0177576041516,0.0343043442574,0.065664589369};\n}\n"}
{"nl": "Search query, for example \"pink slippers\"", "code": "public MarketSearchQueryWithExtended q(String value){\n  return unsafeParam(\"q\",value);\n}\n"}
{"nl": "get size", "code": "public int size(){\n  return nsplits;\n}\n"}
{"nl": "Public page subtype", "code": "public GroupsCreateQuery subtype(GroupsCreateSubType value){\n  return unsafeParam(\"subtype\",value);\n}\n"}
{"nl": "Eigenvalue Decomposition", "code": "public EigenValueDecomposition eig(){\n  return new EigenValueDecomposition(this);\n}\n"}
{"nl": "Returns true if the current layout is locale-specific", "code": "public boolean isLocaleSpecificLayout(){\n  return myEditedConfig.getLocaleQualifier() != null;\n}\n"}
{"nl": "Add custom view insertion to adapter", "code": "public boolean addInsertion(Insertion insert){\n  setHasNewItems(true);\n  int insertPosition=getItemCount() <= getFootersCount() ? 0 : getItemCount() - getFootersCount();\n  boolean result;\n  if (getFootersCount() == 0) {\n    mInserts.add(insert);\n    result=getItems().add(null);\n  }\n else {\n    mInserts.add(insertPosition,insert);\n    getItems().add(insertPosition,null);\n    result=true;\n  }\n  updateCounter(insert);\n  notifyIfNeed();\n  return result;\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n"}
{"nl": "Normalize by zero mean unit variance", "code": "public static DataFrame zeromeanUnitVariance(DataFrame frame,List<String> skipColumns){\n  String[] columnNames=frame.columns();\n  for (  String columnName : columnNames) {\n    if (skipColumns.contains(columnName))     continue;\n    DataFrame meanStd=frame.select(columnName).agg(mean(columnName),stddev(columnName));\n    Row r=meanStd.collect()[0];\n    double mean=((Number)r.get(0)).doubleValue();\n    double std=((Number)r.get(1)).doubleValue();\n    if (std == 0.0)     std=1;\n    frame=frame.withColumn(columnName,frame.col(columnName).minus(mean).divide(std));\n  }\n  return frame;\n}\n"}
{"nl": "store the infosection", "code": "public void storeInfoSection() throws IOException {\n  try (InputOutputReaderWriter io=new InputOutputReaderWriter(file,\"rw\")){\n    if (infoSection.getInfoSectionStart() <= 0)     throw new IOException(\"getInfoSectionStart(), illegal value: \" + infoSection.getInfoSectionStart());\n    io.seek(infoSection.getInfoSectionStart());\n    infoSection.write(io);\n    io.setLength(io.getPosition());\n  }\n }\n"}
{"nl": "Handle mouse release event to check for our table click targets", "code": "@Override public void mouseRelease(int x,int y,ViewTransform transform,Selection selection){\n  for (  TableClickTarget target : mTableClickTargets) {\n    if (target.contains(x,y)) {\n      ConstraintTableLayout table=target.getTable();\n      int column=target.getColumn();\n      table.cycleColumnAlignment(column);\n    }\n  }\n}\n"}
{"nl": "calculate the angle", "code": "public double angle(){\n  double angle=Math.atan2(y,x) * TO_DEGREES;\n  if (angle < 0)   angle+=360;\n  return angle;\n}\n"}
{"nl": "Inner method which handles the Configuration Requests", "code": "Collection<? extends ClientRequestResult> handleApplyConfigurationRequest(final ClientRequest configurationRequest,final Session session,final Destination replyDestination){\n  final Collection<ConfigurationReport> reports=new ArrayList<>(configurationRequest.getTagIds().size());\n  for (  Long id : configurationRequest.getTagIds()) {\n    final int configId=castLongToInt(id);\nswitch (configurationRequest.getResultType()) {\ncase TRANSFER_CONFIGURATION_REPORT:\n      ClientRequestReportHandler reportHandler=new ClientRequestReportHandler(session,replyDestination,DEFAULT_REPLY_TTL);\n    reports.add(configurationLoader.applyConfiguration(configId,reportHandler));\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Finished processing reconfiguration request with id \" + configId);\n  }\nbreak;\ndefault :\nLOG.error(\"handleConfigurationRequest() - Could not generate response message. Unknown enum ResultType \" + configurationRequest.getResultType());\n}\n}\nreturn reports;\n}\n"}
{"nl": "gets a short description of a match This is used for BlastTab and similar incomplete formats", "code": "private String shortDescription(){\n  StringBuilder buffer=new StringBuilder();\n  if (refName.length() > 0)   buffer.append(String.format(\">%s\\n\",Basic.fold(refName,ALIGNMENT_FOLD)));\n{\n    if (optionalFields.get(\"ZL\") != null)     buffer.append(String.format(\"\\tLength = %s\\n\\n\",optionalFields.get(\"ZL\").toString()));\n else     buffer.append(\"\\n\");\n  }\n{\n    boolean hasFirst=false;\n    boolean hasSecond=false;\n    if (optionalFields.get(\"AS\") != null && optionalFields.get(\"AS\") instanceof Integer) {\n      buffer.append(String.format(\" Score = %d\",getBitScore()));\n      if (optionalFields.get(\"ZR\") != null && optionalFields.get(\"ZR\") instanceof Integer) {\n        buffer.append(String.format(\" bits (%d)\",getRawScore()));\n      }\n      hasFirst=true;\n    }\n    if (optionalFields.get(\"ZE\") != null && optionalFields.get(\"ZE\") instanceof Float) {\n      if (hasFirst)       buffer.append(\",\");\n      if (getExpected() == 0)       buffer.append(\" Expect = 0\");\n else       buffer.append(String.format(\" Expect = %.1g\",getExpected()));\n      hasSecond=true;\n    }\n    if (hasFirst || hasSecond)     buffer.append(\"\\n\");\n  }\n{\n    if (optionalFields.get(\"AL\") != null)     buffer.append(optionalFields.get(\"AL\").toString()).append(\"\\n\");\n  }\n  return buffer.toString();\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n"}
{"nl": "Specify the text size for the title in SP", "code": "public TapTarget titleTextSize(int sp){\n  if (sp < 0)   throw new IllegalArgumentException(\"Given negative text size\");\n  this.titleTextSize=sp;\n  return this;\n}\n"}
{"nl": "The result is in the form: (p, q, I, 0, L)", "code": "private SegmentNode generate_many_to_all(SegmentNode mp){\n  long left, right;\n  SegmentNode p;\n  left=mp.I1;\n  right=left + mp.L;\n  p=mp.next;\n  while (p != null) {\n    if (p.I1 < left)     left=p.I1;\n    long t=p.I1 + p.L;\n    if (t > right)     right=t;\n    p=p.next;\n  }\n  mp.I1=left;\n  mp.I2=0;\n  mp.L=right - left;\n  mp.next=null;\n  return mp;\n}\n"}
{"nl": "Set fields", "code": "public NewsfeedSearchQueryWithExtended fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Extendable Singleton", "code": "protected Udb82DatabaseType(){\n}\n"}
{"nl": "Reads a text component from the buffer", "code": "public static ITextComponent readTextComponent(PacketBuffer buf){\n  return ITextComponent.a.jsonToComponent(readString(buf));\n}\n"}
{"nl": "Gets the initialization state", "code": "public boolean isInitializationComplete(){\n  return nodeInitStageAdvancer.isInitializationComplete();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  ServicePanel servicePanel=((RemoteServiceBrowser)getViewer()).getServicePanel();\n  np.matchIgnoreCase(\"select samples=\");\n  String what=np.getWordMatchesIgnoringCase(\"all none\");\n  if (what.equalsIgnoreCase(\"all\"))   servicePanel.selectAll(true);\n else   if (what.equals(\"none\"))   servicePanel.selectAll(false);\n  np.matchRespectCase(\";\");\n  System.err.println(\"Number of nodes selected: \" + servicePanel.getSelectedFiles().size());\n}\n"}
{"nl": "construct a parser", "code": "public CommandManagerFX(IDirector dir,List<ICommand> commands){\n  super(dir,commands);\n}\n"}
{"nl": "Checks if a name is forbidden (contains string sequences from config)", "code": "private static boolean isForbiddenByClient(String name){\n  if (!NameConfig.NAME_FORBIDDEN_ENABLE || NameConfig.NAME_FORBIDDEN_CLIENT.equals(\"\")) {\n    return false;\n  }\n  if (forbiddenByClient == null || forbiddenByClient.length == 0) {\n    forbiddenByClient=NameConfig.NAME_FORBIDDEN_CLIENT.split(\",\");\n  }\n  for (  String s : forbiddenByClient) {\n    if (name.equalsIgnoreCase(s)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Creates a simple cluster unit voice for the ARCTIC voices", "code": "public CMUArcticVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){\n  super(name,gender,age,description,locale,domain,organization,lexicon,database);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public CompactCharArray(char[] indexArray,char[] newValues){\n  if (indexArray.length != 2048)   throw new IllegalArgumentException(\"Index out of bounds.\");\n  for (int i=0; i < 2048; i++) {\n    char index=indexArray[i];\n    if ((index < 0) || (index >= newValues.length + 32))     throw new IllegalArgumentException(\"Index out of bounds.\");\n  }\n  this.indices=indexArray;\n  this.values=newValues;\n  this.isCompact=true;\n}\n"}
{"nl": "create multilevel folder", "code": "public static void createFolder(String path){\n  File file=new File(path);\n  file.mkdirs();\n}\n"}
{"nl": "Calculates the intersection between this range and the given range", "code": "public Range intersection(SegmentRange range){\n  if (!hasFunctionCallDescription(this) && !hasFunctionCallDescription(range)) {\n    return handleSegmentWithSegment(range);\n  }\n else   if (!twoBuiltInFunctions(this,range)) {\n    return new CompositeRange(this,range);\n  }\n else   if (hasFunctionOnlyOnOneSide(this,range)) {\n    return new CompositeRange(this,range);\n  }\n else   if (hasFunctionCallDescription(this) && hasFunctionCallDescription(range)) {\n    if (hasSameFunction(range)) {\n      return handleSegmentWithSegment(range);\n    }\n else {\n      return new CompositeRange(this,range);\n    }\n  }\n  return new CompositeRange(this,range);\n}\n"}
{"nl": "Mouse release handling", "code": "public void mouseReleased(MouseEvent e){\n  int x=mViewTransform.getAndroidX(e.getX());\n  int y=mViewTransform.getAndroidY(e.getY());\n  mouseReleased(x,y);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();\n}\n"}
{"nl": "Converts a base64 encoded key into a ByteBuffer", "code": "public static ByteBuffer base64StringToByteBuffer(String base64EncodedKey){\n  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));\n}\n"}
{"nl": "This method checks all restrictions for upload emblem info", "code": "private boolean canUploadEmblemInfo(Player activePlayer){\n  if (!isBrigadeGeneral(activePlayer)) {\n    return false;\n  }\n else   if (activePlayer.getLegion().getLegionLevel() < 3) {\n    return false;\n  }\n else   if (activePlayer.getLegion().getLegionEmblem().isUploading()) {\n    activePlayer.getLegion().getLegionEmblem().setUploading(false);\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Convenience function to snap the width", "code": "private static int snapWidth(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int width,ArrayList<SnapCandidate> snapCandidates){\n  int rightPosition=widget.getDrawX() + width;\n  rightPosition=snapHorizontal(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.RIGHT),rightPosition,snapCandidates);\n  width=rightPosition - widget.getDrawX();\n  return width;\n}\n"}
{"nl": "compute the hash value for a given key", "code": "public static int computeHash(byte[] key,int offset,int length,int mask){\n  return Math.abs(MurmurHash3.murmurhash3x8632(key,offset,length,666) & mask);\n}\n"}
{"nl": "Return current instance with timeZone set to UTC", "code": "public DateTimeUnit toUtc(){\n  return DateTimeUnit.fromJodaDateTime(toJodaDateTime().toDateTime(DateTimeZone.UTC),true);\n}\n"}
{"nl": "Utility method which exposes the toolbar actions in a submenu", "code": "protected void addToolbarActionsToMenu(@NotNull String label,@NotNull List<ViewAction> actions){\n  List<ViewAction> nestedActions=Lists.newArrayList();\n  addToolbarActions(nestedActions);\n  actions.add(new ViewActionMenu(label,null,nestedActions));\n}\n"}
{"nl": "Creates the default inverse cumulative probability density test expected values", "code": "@Override public int[] makeInverseCumulativeTestValues(){\n  return new int[]{-3,-3,-3,-3,-3,-3,-2,1,5,5,5,5,5,5};\n}\n"}
{"nl": "Must be called by the resource owner", "code": "public void closeCurrentConnection(){\n  if (connection != null) {\n    closeUnderlyingConnection();\n    connection=null;\n  }\n}\n"}
{"nl": "Reduce the specified columns by taking the last value", "code": "public Builder takeLastColumns(String... columns){\n  return add(ReduceOp.TakeLast,columns);\n}\n"}
{"nl": "Close the Pulsar admin client to release all the resources", "code": "@Override public void close(){\n  try {\n    if (auth != null) {\n      auth.close();\n    }\n  }\n catch (  IOException e) {\n    LOG.error(\"Failed to close the authentication service\",e);\n  }\n  client.close();\n}\n"}
{"nl": "Prevent instantiation", "code": "private ServiceStarter(){\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();\n  if (remoteServiceBrowser != null) {\n    String url=remoteServiceBrowser.getURL();\n    String user=remoteServiceBrowser.getUser();\n    String password=remoteServiceBrowser.getPasswd();\n    String command=\"openServer url='\" + url + \"'\";\n    if (user.length() > 0)     command+=\" user='\" + user + \"'\";\n    if (password.length() > 0) {\nsynchronized (syncObject) {\n        OpenRemoteServerCommand.hiddenPassword=password;\n      }\n      command+=\" password='\" + HIDDEN_PASSWORD + \"'\";\n    }\n    command+=\";\";\n    if (url.length() > 0) {\n      execute(command);\n    }\n  }\n}\n"}
{"nl": "Verifies that interpolating polynomials satisfy consistency requirement: adjacent polynomials must agree through two derivatives at knot points", "code": "protected void verifyConsistency(PolynomialSplineFunction f,double x[]){\n  PolynomialFunction polynomials[]=f.getPolynomials();\n  for (int i=1; i < x.length - 2; i++) {\n    Assert.assertEquals(polynomials[i].value(x[i + 1] - x[i]),polynomials[i + 1].value(0),0.1);\n    Assert.assertEquals(polynomials[i].polynomialDerivative().value(x[i + 1] - x[i]),polynomials[i + 1].polynomialDerivative().value(0),0.5);\n    Assert.assertEquals(polynomials[i].polynomialDerivative().polynomialDerivative().value(x[i + 1] - x[i]),polynomials[i + 1].polynomialDerivative().polynomialDerivative().value(0),0.5);\n  }\n}\n"}
{"nl": "signals all listener that a remote resource has been created", "code": "public void remoteResourceCreated(ISVNRemoteFolder parent,String resourceName){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.remoteResourceCreated(parent,resourceName);\n  }\n}\n"}
{"nl": "This method is responsible for checking if new value received from data source fits in a proper range", "code": "@SuppressWarnings(\"unchecked\") public boolean isInRange(final SourceDataTag sdt,final Object value){\n  this.equipmentLogger.trace(\"isInRange - entering isInRange()..\");\n  boolean isInRange=true;\n  Comparable convertedValue;\n  setDataTypeOfRangeValue(sdt);\n  if (sdt.getMinValue() != null) {\n    convertedValue=(Comparable)TypeConverter.cast(value,sdt.getDataType());\n    if (compare(sdt.getMinValue(),convertedValue) > 0) {\n      this.equipmentLogger.trace(\"\\tisInRange - out of range : \" + convertedValue + \" is less than the authorized minimum value \"+ sdt.getMinValue());\n      isInRange=false;\n    }\n  }\n  if (isInRange) {\n    if (sdt.getMaxValue() != null) {\n      convertedValue=(Comparable)TypeConverter.cast(value,sdt.getDataType());\n      if (compare(sdt.getMaxValue(),convertedValue) < 0) {\n        this.equipmentLogger.trace(\"\\tisInRange - out of range : \" + convertedValue + \" is greater than the authorized maximum value \"+ sdt.getMaxValue());\n        isInRange=false;\n      }\n    }\n  }\n  this.equipmentLogger.trace(\"isInRange - leaving isInRange(). Is value in range?: \" + isInRange);\n  return isInRange;\n}\n"}
{"nl": "Checks if a system user exists to know if we need to create data or not", "code": "public boolean shouldCreateData(){\n  return userRepository.count() == 0;\n}\n"}
{"nl": "Returns true if field localContext is set (has been assigned a value) and false otherwise", "code": "public boolean isSetLocalContext(){\n  return this.localContext != null;\n}\n"}
{"nl": "Change space background color if space view already set up", "code": "public void changeSpaceBackgroundColor(@ColorInt int color){\n  if (color == spaceBackgroundColor) {\n    Log.d(TAG,\"changeSpaceBackgroundColor: color already changed\");\n    return;\n  }\n  spaceBackgroundColor=color;\n  setBackgroundColors();\n  centreContent.changeBackgroundColor(color);\n}\n"}
{"nl": "Gets the target SDK version for which this application was developed", "code": "public int targetSdkVersion(){\n  List<AXmlNode> usesSdk=this.manifest.getChildrenWithTag(\"uses-sdk\");\n  if (usesSdk == null || usesSdk.isEmpty())   return -1;\n  AXmlAttribute<?> attr=usesSdk.get(0).getAttribute(\"targetSdkVersion\");\n  if (attr == null)   return -1;\n  if (attr.getValue() instanceof Integer)   return (Integer)attr.getValue();\n  return Integer.getInteger((String)attr.getValue());\n}\n"}
{"nl": "Specify whether or not the target should be cancelable", "code": "public TapTarget cancelable(boolean status){\n  this.cancelable=status;\n  return this;\n}\n"}
{"nl": "Set intro", "code": "public AuthConfirmQuery intro(Integer value){\n  return unsafeParam(\"intro\",value);\n}\n"}
{"nl": "if the chart is fully zoomed out, return true", "code": "public boolean isFullyZoomedOut(){\n  return isFullyZoomedOutX() && isFullyZoomedOutY();\n}\n"}
{"nl": "delete the client in the room", "code": "boolean deleteTheClientInTheRooms(Client client){\n  boolean result=false;\n  for (int i=gameRooms.size() - 1; i > -1; i--) {\n    if (gameRooms.get(i).exitTheRoom(client)) {\n      result=true;\n      break;\n    }\n  }\n  return result;\n}\n"}
{"nl": "Check if network connection has changed", "code": "public static boolean isNetworkChanged(Context context,String prevConnectivityType,String mPrevConnectionSubType){\n  String connectivityType=getNetworkType(context);\n  String connectivitySubType=getNetworkSubType(context);\n  if (null == prevConnectivityType) {\n    return false;\n  }\n else   if (!prevConnectivityType.equals(connectivityType)) {\n    return true;\n  }\n else   if (!mPrevConnectionSubType.equals(connectivitySubType)) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Zone update mask management", "code": "public final void updateZone(){\n  ZoneUpdateService.getInstance().add(getOwner());\n}\n"}
{"nl": "Ignore the given render fidelity warning for the current session", "code": "public static void ignoreFidelityWarning(@NotNull Object clientData){\n  if (ourIgnoredFidelityWarnings == null) {\n    ourIgnoredFidelityWarnings=new HashSet<String>();\n  }\n  ourIgnoredFidelityWarnings.add((String)clientData);\n}\n"}
{"nl": "Return true if skillId is present among creature's abnormals", "code": "public boolean isAbnormalPresentBySkillId(int skillId){\n  for (  Effect effect : abnormalEffectMap.values()) {\n    if (effect.getSkillId() == skillId) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Writes an array to the buffer", "code": "public static <T>void writeArray(PacketBuffer buf,T[] value,BiConsumer<PacketBuffer,T> writer){\n  buf.writeInt(value.length);\n  for (  T t : value) {\n    writer.accept(buf,t);\n  }\n}\n"}
{"nl": "%0 Shouts:", "code": "public static SM_SYSTEM_MESSAGE STR_CMD_SHOUT_OUTPUT_NPC(String value0){\n  return new SM_SYSTEM_MESSAGE(1400002,value0);\n}\n"}
{"nl": "called before draw an expand/collapse frame", "code": "private void updateButtons(){\n  List<ButtonData> buttonDatas=allAngleExpandableButton.buttonDatas;\n  int mainButtonRadius=allAngleExpandableButton.mainButtonSizePx / 2;\n  int subButtonRadius=allAngleExpandableButton.subButtonSizePx / 2;\n  Matrix matrix=matrixArray[0];\n  matrix.reset();\n  matrix.postRotate(allAngleExpandableButton.mainButtonRotateDegree * allAngleExpandableButton.rotateProgress,allAngleExpandableButton.rawButtonRectF.centerX(),allAngleExpandableButton.rawButtonRectF.centerY());\n  for (int i=1; i < buttonDatas.size(); i++) {\n    matrix=matrixArray[i];\n    ButtonData buttonData=buttonDatas.get(i);\n    matrix.reset();\n    if (allAngleExpandableButton.expanded) {\n      ExpandMoveCoordinate coordinate=expandDesCoordinateMap.get(buttonData);\n      float dx=allAngleExpandableButton.expandProgress * (coordinate.moveX);\n      float dy=allAngleExpandableButton.expandProgress * (-coordinate.moveY);\n      matrix.postTranslate(dx,dy);\n    }\n else {\n      int radius=mainButtonRadius + subButtonRadius + allAngleExpandableButton.buttonGapPx;\n      float moveX;\n      float moveY;\n      ExpandMoveCoordinate coordinate=expandDesCoordinateMap.get(buttonData);\n      if (coordinate == null) {\n        moveX=allAngleExpandableButton.angleCalculator.getMoveX(radius,i);\n        moveY=allAngleExpandableButton.angleCalculator.getMoveY(radius,i);\n        coordinate=new ExpandMoveCoordinate(moveX,moveY);\n        expandDesCoordinateMap.put(buttonData,coordinate);\n      }\n else {\n        moveX=coordinate.moveX;\n        moveY=coordinate.moveY;\n      }\n      float dx=allAngleExpandableButton.expandProgress * (moveX);\n      float dy=allAngleExpandableButton.expandProgress * (-moveY);\n      matrix.postTranslate(dx,dy);\n    }\n  }\n}\n"}
{"nl": "Creates an iterator over the specified map", "code": "public TLongObjectIterator(TLongObjectHashMap<V> map){\n  super(map);\n  this._map=map;\n}\n"}
{"nl": "The item will NOT be swipeable if already seen or has unseen posts", "code": "public boolean isSwipeable(final int _index){\n  if (getItemViewType(_index) == TYPE_HEADER) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "constructs a set of splits from a tree", "code": "public SplitSystem(Taxa allTaxa,PhyloTree tree){\n  this();\n  splitsFromTreeRec(tree.getRoot(),tree,allTaxa,allTaxa.getBits(),new NodeArray(tree),this);\n}\n"}
{"nl": "Required for Externalizable", "code": "@Override public void writeExternal(ObjectOutput out) throws IOException {\n  PlatformLogicalVersion version=LRMIInvocationContext.getEndpointLogicalVersion();\n  writeExternal(out,version);\n}\n"}
{"nl": "Process properties in the State object", "code": "private void mapStateProperties(ContainerState containerState,Map<String,Object> state){\n  if (state == null) {\n    return;\n  }\n  containerState.started=parseDate(state.get(DOCKER_CONTAINER_STATE_STARTED_PROP_NAME));\n  mapPowerState(containerState,state);\n}\n"}
{"nl": "Check if an email is valid", "code": "public static boolean isValidEmail(String email){\n  return Patterns.EMAIL_ADDRESS.matcher(email).matches();\n}\n"}
{"nl": "If true -- CssFilter cannot be applied to page", "code": "public boolean isElemhide(){\n  return isOptionEnabled(UrlFilterRuleOption.ELEMHIDE);\n}\n"}
{"nl": "/*     ", "code": "@deprecated public TimeZoneFormat cloneAsThawed(){\n  TimeZoneFormat copy=(TimeZoneFormat)super.clone();\n  copy._frozen=false;\n  return copy;\n}\n"}
{"nl": "Creates a new command tag add event", "code": "public CommandTagAdd(){\n}\n"}
{"nl": "Create a new Webster", "code": "public Webster(int port,String roots,String bindAddress) throws BindException {\n  this.port=port;\n  initialize(roots,bindAddress);\n}\n"}
{"nl": "a look-up for pitch labels to relative changes", "code": "private String pitchLabels2RelativeValues(String pitchAttribute){\n  if (pitchAttribute.equals(\"x-low\")) {\n    return \"-50%\";\n  }\n else   if (pitchAttribute.equals(\"low\")) {\n    return \"-25%\";\n  }\n else   if (pitchAttribute.equals(\"medium\")) {\n    return \"+0%\";\n  }\n else   if (pitchAttribute.equals(\"high\")) {\n    return \"+100%\";\n  }\n else   if (pitchAttribute.equals(\"x-high\")) {\n    return \"+200%\";\n  }\n  return \"+0%\";\n}\n"}
{"nl": "Set privacy comment", "code": "public PhotosEditAlbumQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n"}
{"nl": "A method to modify prosody modifications", "code": "private void applyProsodySpecifications(Document doc){\n  TreeWalker tw=DomUtils.createTreeWalker(doc,doc,MaryXML.PHONE,MaryXML.BOUNDARY,MaryXML.PROSODY);\n  Element e=null;\n  while ((e=(Element)tw.nextNode()) != null) {\n    if (\"prosody\".equals(e.getNodeName())) {\n      NodeList nl=e.getElementsByTagName(\"ph\");\n      applyNewContourSpecifications(nl,e);\n      applySpeechRateSpecifications(nl,e);\n    }\n  }\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapStatusAdvisory && getId().equals(((AirMapStatusAdvisory)o).getId());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedGetCommentsQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AuthRestoreQuery(VkApiClient client,String phone){\n  super(client,\"auth.restore\",RestoreResponse.class);\n  phone(phone);\n}\n"}
{"nl": "Add new module", "code": "@Override public long addModule(Module module){\n  return sessionTemplate.insert(NAMESPACE + \".addModule\",module);\n}\n"}
{"nl": "Removes a listener for space availability", "code": "public void removeListener(ISpaceModeListener listener){\n  _listeners.remove(listener);\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ActiveElectionConfig copy=(ActiveElectionConfig)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(empty,copy));\n}\n"}
{"nl": "Set fields", "code": "public UsersGetSubscriptionsQueryWithExtended fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Serialization support", "code": "private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  super.source=source;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "sent from login to target server with character information from source server", "code": "public void cloneCharacter(int taskId,int targetAccountId,String name,String account,byte[] db){\n  if (!PlayerService.isFreeName(name)) {\n    if (PlayerTransferConfig.BLOCK_SAMENAME) {\n      LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.ERROR,taskId,\"Name is already in use\"));\n      return;\n    }\n    log.info(\"Name is already in use `\" + name + \"`\");\n    textLog.info(\"taskId:\" + taskId + \"; [CloneCharacter:!isFreeName]\");\n    String newName=name + PlayerTransferConfig.NAME_PREFIX;\n    int i=0;\n    while (!PlayerService.isFreeName(newName)) {\n      newName=name + PlayerTransferConfig.NAME_PREFIX + i;\n    }\n    name=newName;\n  }\n  if (AccountService.loadAccount(targetAccountId).size() >= GSConfig.CHARACTER_LIMIT_COUNT) {\n    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.ERROR,taskId,\"No free character slots\"));\n    return;\n  }\n  CMT_CHARACTER_INFORMATION acp=new CMT_CHARACTER_INFORMATION(0,State.CONNECTED);\n  acp.setBuffer(ByteBuffer.wrap(db).order(ByteOrder.LITTLE_ENDIAN));\n  Player cha=acp.readInfo(name,targetAccountId,account,rsList,textLog);\n  if (cha == null) {\n    log.error(\"clone failed #\" + taskId + \" `\"+ name+ \"`\");\n    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.ERROR,taskId,\"unexpected sql error while creating a clone\"));\n  }\n else {\n    DAOManager.getDAO(PlayerDAO.class).setPlayerLastTransferTime(cha.getObjectId(),System.currentTimeMillis());\n    LoginServer.getInstance().sendPacket(new SM_PTRANSFER_CONTROL(SM_PTRANSFER_CONTROL.OK,taskId));\n    log.info(\"clone successful #\" + taskId + \" `\"+ name+ \"`\");\n    textLog.info(\"taskId:\" + taskId + \"; [CloneCharacter:Done]\");\n  }\n}\n"}
{"nl": "write a string, compressed, if long enough", "code": "public void writeString(byte[] str,int offset,int length) throws IOException {\n  if (str == null)   writeInt(0);\n else {\n    if (useCompression && length >= Compressor.MIN_SIZE_FOR_DEFLATION) {\n      if (byteBuffer.length < length)       byteBuffer=new byte[2 * length];\n      int numberOfBytes=compressor.deflateString2ByteArray(str,offset,length,byteBuffer);\n      writeInt(numberOfBytes);\n      outs.write(byteBuffer,0,Math.abs(numberOfBytes));\n      position+=Math.abs(numberOfBytes);\n    }\n else {\n      writeInt(length);\n      outs.write(str,offset,length);\n      position+=length;\n    }\n  }\n}\n"}
{"nl": "author  hhj TODO", "code": "public static void debugInfo(String msg){\n  debugInfo(DEFAULT_TAG,msg);\n}\n"}
{"nl": "OpenCV Version", "code": "public List<Sweet> extractSweetsForFeatureWithOpenCV(Mat img,Mat feature,int i){\n  STEP=10;\n  DIFFERENCE_LIMIT=60;\n  Imgproc.pyrDown(feature,feature,new Size(feature.cols() / 2,feature.rows() / 2));\n  Mat result=createResultMat(img,feature);\n  result=matchFeature(img,feature,result);\n  if (i != 5) {\n    THRESHOLD=0.96;\n  }\n else {\n    THRESHOLD=0.85;\n  }\n  Core.MinMaxLocResult mmr=Core.minMaxLoc(result);\n  Point matchLoc=mmr.maxLoc;\n  int refX=(int)matchLoc.x + feature.cols() / 2;\n  int refY=(int)matchLoc.y + feature.rows() / 2;\n  if (!isFeatureAbsent(img,feature,refX,refY)) {\n    Imgproc.threshold(result,result,THRESHOLD,255,Imgproc.THRESH_BINARY);\n    return extractSweetsForFeatureWithOpenCV(result,i);\n  }\n  return Collections.emptyList();\n}\n"}
{"nl": "toolbar menu click callback", "code": "@Override public boolean onMenuItemClick(MenuItem item){\nswitch (item.getItemId()) {\ncase R.id.action_notice:\n    if (getUserConstant().isLogin()) {\n      openActivity(UserMessageActivity.class);\n    }\n else {\n      showShortToast(getString(R.string.toast_no_login));\n    }\n  break;\ncase R.id.action_about:\nOpenWebViewUtils.aboutMe(this);\nbreak;\ncase R.id.action_search:\nshowShortToast(getString(R.string.toast_adorn));\nbreak;\ncase R.id.action_settings:\nopenActivity(SettingActivity.class);\nbreak;\n}\nreturn true;\n}\n"}
{"nl": "Marks the end of a set of data", "code": "public boolean end(){\n  return true;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public CompactCharArray(){\n  this('\\000');\n}\n"}
{"nl": "Disk construction", "code": "public Disk(Vector position,Vector speed,double radius){\n  this.position=position;\n  this.speed=speed;\n  this.radius=radius;\n}\n"}
{"nl": "Save non-vesrioned value in local cache", "code": "private void putLocalNotVersioned(Object key,CacheEntry cacheEntry){\n  CacheEntry oldCacheEntry;\n  if (_putFirst) {\n    oldCacheEntry=_cache.put(key,cacheEntry);\n  }\n else {\n    oldCacheEntry=_cache.replace(key,cacheEntry);\n  }\n  if (oldCacheEntry != null) {\n    if (!(oldCacheEntry instanceof DummyCacheEntry))     _evictionStrategy.discardEntry(oldCacheEntry);\n  }\n else   if (_putFirst && _cache.size() >= _sizeLimit) {\n    _evictionStrategy.evict(this);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallSearchQueryWithExtended(VkApiClient client){\n  super(client,\"wall.search\",SearchExtendedResponse.class);\n  extended(true);\n}\n"}
{"nl": "update the data in collection", "code": "final public static long updateCollection(String collection,Object id,V v){\n  return updateCollection(collection,new BasicDBObject(X.ID,id),v);\n}\n"}
{"nl": "Expected value for the testArray defined in UnivariateStatisticAbstractTest", "code": "public double expectedWeightedValue(){\n  return this.weightedMean;\n}\n"}
{"nl": "Print index entries (for debugging)", "code": "public void dumpIndex(){\n  for (  Map.Entry<String,IndexEntry> entry : datasetIndex.entrySet()) {\n    String dsName=entry.getKey();\n    TDFDataset ds=getDataset(dsName);\n    int size=0;\n    for (    int sz : ds.tileSizes) {\n      size+=sz;\n    }\n    System.out.println(dsName + \"\\t\" + size);\n    datasetCache.clear();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsDeleteAllRequestsQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.deleteAllRequests\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public MessagesGetChatQueryWithChatIds nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Returns when request succeeds", "code": "public void onSuccess(int statusCode,Header[] headers,JSONArray response){\n}\n"}
{"nl": "Call to retry upload identified by remotePath", "code": "public void retry(Context context,OCUpload upload){\n  if (upload != null && context != null) {\n    Account account=AccountUtils.getOwnCloudAccountByName(context,upload.getAccountName());\n    retry(context,account,upload);\n  }\n else {\n    throw new IllegalArgumentException(\"Null parameter!\");\n  }\n}\n"}
{"nl": "Sets the package patterns to scan", "code": "public static Patterns packages(String[] includes){\n  return new Patterns(includes,new String[]{});\n}\n"}
{"nl": "Create a unit file reader from the given unit file", "code": "public SCostFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n"}
{"nl": "Npc starts following other creature", "code": "public static final void emoteStartFollowing(Npc owner){\n  owner.unsetState(CreatureState.WALKING);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));\n}\n"}
{"nl": "Constructs a ExitMonitorInst() grammar chunk", "code": "public ExitMonitorInst newExitMonitorInst(){\n  return new BExitMonitorInst();\n}\n"}
{"nl": "Required for Externalizable", "code": "public AbstractSpaceRequestInfo(){\n}\n"}
{"nl": "resets the circle-colors array and creates a new one", "code": "public void resetCircleColors(){\n  mCircleColors=new ArrayList<>();\n}\n"}
{"nl": "Determines whether the current AirMapFlight is valid or not", "code": "public boolean isValid(){\n  return getFlightId() != null;\n}\n"}
{"nl": "Create time in milliseconds from a formatted string with specific date format", "code": "public static long stringToMilliseconds(String formattedDate,SimpleDateFormat dateFormat){\n  try {\n    return dateFormat.parse(formattedDate).getTime();\n  }\n catch (  ParseException e) {\n    e.printStackTrace();\n  }\n  return -1;\n}\n"}
{"nl": "load data from the set file", "code": "public void loadMeganFile() throws IOException, CanceledException {\n  clearReads();\n  getProgressListener().setTasks(\"Loading MEGAN File\",getMeganFile().getName());\n  if (getMeganFile().hasDataConnector()) {\n    IConnector connector=getMeganFile().getDataConnector();\n    SyncArchiveAndDataTable.syncArchive2Summary(meganFile.getFileName(),connector,dataTable,sampleAttributeTable);\n    if (dataTable.getTotalReads() == 0 && connector.getNumberOfReads() > 0) {\n      SyncArchiveAndDataTable.syncRecomputedArchive2Summary(getMeganFile().getName(),\"merge\",dataTable.getBlastMode(),\"\",connector,dataTable,0);\n    }\n    setNumberReads(getDataTable().getTotalReads());\n    setAdditionalReads(getDataTable().getAdditionalReads());\n    getActiveViewers().clear();\n    getActiveViewers().addAll(Arrays.asList(connector.getAllClassificationNames()));\n    String parameters=getDataTable().getParameters();\n    if (parameters != null) {\n      parseParameterString(parameters);\n    }\n    getSampleAttributeTable().addAttribute(SampleAttributeTable.HiddenAttribute.Source.toString(),getMeganFile().getFileName(),true);\n  }\n else   if (getMeganFile().isMeganSummaryFile()) {\n    loadMeganSummaryFile();\n  }\n else   throw new IOException(\"File format not (or no longer) supported\");\n  loadColorTableFromDataTable();\n  lastRecomputeTime=System.currentTimeMillis();\n  colorsArray=new Color[getNumberOfSamples()];\n}\n"}
{"nl": "Returns the name of this audioplayer", "code": "public String toString(){\n  return \"MultiFile8BitAudioPlayer\";\n}\n"}
{"nl": "Are we past a version used to implement a conditional change for other releases results when alpha and beta both > 0 is undefined", "code": "private static boolean versionGreaterThan(GradleVersion v,int major,int minor,int micro,int beta,int alpha){\n  if (v == null) {\n    return true;\n  }\n  if (v.getMajor() != major) {\n    return v.getMajor() > major;\n  }\n  if (v.getMinor() != minor) {\n    return (v.getMinor() > minor);\n  }\n  if (v.getMicro() != micro) {\n    return (v.getMicro() > micro);\n  }\n  if (alpha > 0) {\n    if (\"alpha\".equals(v.getPreviewType())) {\n      return (v.getPreview() > alpha);\n    }\n else {\n      return true;\n    }\n  }\n  if (beta > 0) {\n    if (\"beta\".equals(v.getPreviewType())) {\n      return (v.getPreview() > beta);\n    }\n else {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Something has changed on the selection of NlModel", "code": "@Override public void selectionChanged(@NotNull SelectionModel model,@NotNull List<NlComponent> selection){\n  if (selection.isEmpty()) {\n    return;\n  }\n  boolean different=selection.size() != mySelection.size();\n  if (!different) {\n    for (    NlComponent component : model.getSelection()) {\n      if (!mySelection.contains(myWidgetsScene.getWidget(component))) {\n        different=true;\n        break;\n      }\n    }\n  }\n  if (!different) {\n    return;\n  }\n  mySelection.silentClear();\n  for (  NlComponent component : model.getSelection()) {\n    ConstraintWidget widget=myWidgetsScene.getWidget(component);\n    if (widget != null && !widget.isRoot() && !widget.isRootContainer()) {\n      mySelection.silentAdd(widget);\n    }\n  }\n}\n"}
{"nl": "A method to be called when a character data node has been modified", "code": "void modifiedCharacterData(NodeImpl node,String oldvalue,String value,boolean replace){\n}\n"}
{"nl": "is table empty?", "code": "public boolean isEmpty(){\n  return dataMap.isEmpty();\n}\n"}
{"nl": "It opens a file input stream", "code": "public final void openFallbackInputStream() throws DataFallbackException {\n  if (inputBuf == null) {\n    if (LOG.isDebugEnabled())     LOG.debug(\"openFallbackInputStream() : Opening the reader for the \" + dataFile.getName() + \"file\");\n    try {\n      setInput(new BufferedReader(new FileReader(dataFile)));\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n  }\n}\n"}
{"nl": "Get rid of traffic that is no longer valid (the traffic is expired)", "code": "private void clearOldTraffic(){\n  List<AirMapTraffic> oldAllTraffic=new ArrayList<>();\n  for (  AirMapTraffic traffic : allTraffic) {\n    if (trafficExpired(traffic)) {\n      oldAllTraffic.add(traffic);\n      allTraffic.remove(traffic);\n    }\n  }\n  notifyRemoved(oldAllTraffic);\n}\n"}
{"nl": "write float, little endian", "code": "public void writeFloat(float a) throws IOException {\n  byteBuffer.putFloat(0,a);\n  byteBuffer.rewind();\n  byteBuffer.get(bytes,0,4);\n  swap(bytes,4);\n  outs.write(bytes,0,4);\n}\n"}
{"nl": "Called before target member is added", "code": "public void beforeMemberAdded(MemberAddedEvent memberAddedEvent){\n}\n"}
{"nl": "Check if object is null and throw", "code": "public static <T>T checkNotNull(T object,String message){\n  if (object == null) {\n    throw new NullPointerException(message);\n  }\n  return object;\n}\n"}
{"nl": "select the given column", "code": "private void selectColumn(int col){\n  for (int row=0; row < dataGrid.getRowCount(); row++)   spreadsheetView.getSelectionModel().select(row,spreadsheetView.getColumns().get(col));\n}\n"}
{"nl": "Show snackbar message", "code": "public void showMessage(String message){\n  showError(message);\n}\n"}
{"nl": "output the json as \"application/json\" to end-user", "code": "final public void response(JSON jo){\n  if (jo == null) {\n    responseJson(\"{}\");\n  }\n else {\n    responseJson(jo.toString());\n  }\n}\n"}
{"nl": "create an RMA6 file from a DAA file", "code": "public static void createRMA6FileFromDAA(String creator,String daaFile,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {\n  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,BlastFileFormat.DAA,doc.getBlastMode(),new String[]{daaFile},new String[]{},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);\n  rma6Creator.parseFiles(progressListener);\n}\n"}
{"nl": "Community type", "code": "public GroupsCreateQuery type(GroupsCreateType value){\n  return unsafeParam(\"type\",value);\n}\n"}
{"nl": "Draws a small button with the twitter logo on it", "code": "public static void drawButtonTwitter(IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){\n  if (!visible)   return;\n  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);\n  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);\n  getTextureHandler().bindModTexture(\"textures/misc/twitter256.png\");\n  getGlStateManager().color(1.0F,1.0F,1.0F);\n  drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14);\n}\n"}
{"nl": "Construct a lexical analyzer to analysis a piece of code as String", "code": "public Lex(String code){\n  this(new StringReader(code));\n}\n"}
{"nl": "Set privacy view", "code": "public NotesAddQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "add a tab at the indicated position", "code": "public void addTab(int index,ITab tab){\n  JPanel panel=(JPanel)tab;\n  tabbedPane.insertTab(tab.getLabel(),null,panel,tab.getLabel(),index);\n  if (PCoA_TAB_INDEX >= index)   PCoA_TAB_INDEX++;\n  if (NJ_TAB_INDEX >= index)   NJ_TAB_INDEX++;\n  if (NNET_TAB_INDEX >= index)   NNET_TAB_INDEX++;\n  if (UPGMA_TAB_INDEX >= index)   UPGMA_TAB_INDEX++;\n  if (MATRIX_TAB_INDEX >= index)   MATRIX_TAB_INDEX++;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  ClusterViewer viewer=getViewer();\n  np.matchIgnoreCase(\"rotate axis=\");\n  String axis=np.getWordMatchesIgnoringCase(\"x y z\");\n  np.matchIgnoreCase(\"angle=\");\n  double angle=np.getDouble();\n  Matrix3D matrix=viewer.getPcoaTab().getTransformation3D();\n  if (axis.equalsIgnoreCase(\"x\")) {\n    matrix.rotateX(angle);\n  }\n else   if (axis.equalsIgnoreCase(\"y\")) {\n    matrix.rotateY(angle);\n  }\n else   if (axis.equalsIgnoreCase(\"z\")) {\n    matrix.rotateZ(angle);\n  }\n  viewer.getPcoaTab().updateTransform(true);\n  if (viewer.getPcoaTab().isShowGroupsAsConvexHulls())   viewer.getPcoaTab().computeConvexHullsAndEllipsesForGroups(viewer.getGroup2Nodes());\n  np.matchIgnoreCase(\";\");\n}\n"}
{"nl": "Set privacy view", "code": "public PhotosCreateAlbumQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "Displays a dialog box with an OK button", "code": "public static AlertDialog createOkDialog(final Activity activity,final String title,final String text,final DialogInterface.OnClickListener okListener){\n  AlertDialog dialog=new AlertDialog.Builder(activity).setTitle(title).setMessage(text).setPositiveButton(android.R.string.ok,okListener).create();\n  dialog.setOwnerActivity(activity);\n  return dialog;\n}\n"}
{"nl": "export all reads for given set of classids in the given classification", "code": "public static int export(String classification,Collection<Integer> classIds,IConnector connector,String fileName,ProgressListener progressListener) throws IOException, CanceledException {\n  int total=0;\n  try {\n    progressListener.setTasks(\"Export\",\"Writing selected reads\");\n    try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){\n      int maxProgress=100000 * classIds.size();\n      int currentProgress;\n      progressListener.setMaximum(maxProgress);\n      progressListener.setProgress(0);\n      int countClassIds=0;\n      for (      Integer classId : classIds) {\n        countClassIds++;\n        currentProgress=100000 * countClassIds;\n        IReadBlockIterator it=connector.getReadsIterator(classification,classId,0,10000,true,false);\n        long progressIncrement=100000 / (it.getMaximumProgress() + 1);\n        while (it.hasNext()) {\n          total++;\n          write(it.next(),w);\n          progressListener.setProgress(currentProgress);\n          currentProgress+=progressIncrement;\n        }\n      }\n    }\n   }\n catch (  CanceledException ex) {\n    System.err.println(\"USER CANCELED\");\n  }\n  return total;\n}\n"}
{"nl": "compute table with tranposed rows and cols", "code": "public Table<C,R,V> computeTransposedTable(){\n  final Table<C,R,V> transposed=new Table<>();\n  for (  R row : rowKeySet())   for (  C col : columnKeySet())   transposed.put(col,row,get(row,col));\n  return transposed;\n}\n"}
{"nl": "Instantiate an image with the given height and width", "code": "public ImageLoader(int height,int width,int channels){\n  super();\n  this.height=height;\n  this.width=width;\n  this.channels=channels;\n}\n"}
{"nl": "Calculate host number", "code": "public int calculateCount(String desktopstate,int concurrentvms,int vmsperhost,double vcenterhamultiplier){\n  int i=0;\n  Float f=null;\n  if (desktopstate.equalsIgnoreCase(\"on\")) {\n    f=((float)concurrentvms / (float)vmsperhost);\n  }\n else   if (desktopstate.equalsIgnoreCase(\"off\")) {\n    f=((float)concurrentvms / (float)vmsperhost);\n  }\n else   if (desktopstate.equalsIgnoreCase(\"suspend\")) {\n    f=((float)concurrentvms / (float)vmsperhost);\n  }\n else {\n    f=((float)concurrentvms / (float)vmsperhost);\n  }\n  f=(float)Math.ceil(f * 2) / 2;\n  f=(float)Math.round(f);\n  f=(float)(f * vcenterhamultiplier);\n  f=(float)Math.ceil(f * 2) / 2;\n  final Float ftemp=(float)0.5;\n  if (ftemp == (f % 1)) {\n    f+=ftemp;\n  }\n  i=f.intValue();\n  return i;\n}\n"}
{"nl": "if the given key is present in the map, create a long switch (--switch) with the given switch name", "code": "public CommandBuilder withLongSwitchIfPresent(Map<String,Object> properties,String key,String switchName){\n  Object value=properties.get(key);\n  if (value != null) {\n    if (value.getClass().isArray()) {\n      Object[] valueArray=(Object[])value;\n      for (      Object valueArrayElement : valueArray) {\n        withLongSwitch(switchName,valueArrayElement);\n      }\n    }\n else {\n      withLongSwitch(switchName,value);\n    }\n  }\n  return this;\n}\n"}
{"nl": "Find a single face within a given url", "code": "@NotNull public Face findSingleFace(@NotNull String imageUrl){\n  List<Face> faces=faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,imageUrl).withResult();\n  if (Utils.isEmpty(faces) || faces.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(faces) ? 0 : faces.size(),\"a single face was not present\");\n  return faces.get(0);\n}\n"}
{"nl": "Gets if global or non world specific nodes should be applied", "code": "public boolean isIncludeGlobalWorld(){\n  return this.includeGlobalWorld;\n}\n"}
{"nl": "Creates a meta storable fence which is a logical 'or' of all the given fences", "code": "@NonNull public static StorableFence or(@NonNull Collection<StorableFence> fences){\n  StorableFence metaFence=new StorableFence(Type.META);\n  metaFence.mOrFences.addAll(fences);\n  return metaFence;\n}\n"}
{"nl": "Returns true if the given component is part of the selection", "code": "public boolean isSelected(@NotNull NlComponent component){\n  return mySelection.contains(component);\n}\n"}
{"nl": "init Initializes the OCR helper and readies it for use", "code": "public static OcrHelper init(String dataPath,int widthPixels,int heightPixels,String nidoFemale,String nidoMale,boolean isPokeSpamEnabled){\n  if (instance == null) {\n    instance=new OcrHelper(dataPath,widthPixels,heightPixels,nidoFemale,nidoMale,isPokeSpamEnabled);\n  }\n  return instance;\n}\n"}
{"nl": "If the key(s) is mapped add an argument with the mapped value", "code": "public CommandBuilder withArgumentIfPresent(Map<String,Object> properties,String... keys){\n  for (  String key : keys) {\n    Object value=properties.get(key);\n    if (value != null) {\n      if (value.getClass().isArray()) {\n        withArguments(ArrayUtils.toStringArray(value));\n      }\n else {\n        withArguments(value.toString());\n      }\n    }\n  }\n  return this;\n}\n"}
{"nl": "Show error view with a button when something goes wrong and prompting the user to try again", "code": "public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener){\n  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());\n}\n"}
{"nl": "Required for Externalizable", "code": "public TypeQueryExtensionImpl(){\n}\n"}
{"nl": "Change the zoom level", "code": "public void zoomTo(float zoom){\n  this.zoom=zoom;\n}\n"}
{"nl": "write long, little endian", "code": "public void writeLong(long a) throws IOException {\n  outs.write((byte)(a));\n  outs.write((byte)(a >> 8));\n  outs.write((byte)(a >> 16));\n  outs.write((byte)(a >> 24));\n  outs.write((byte)(a >> 32));\n  outs.write((byte)(a >> 40));\n  outs.write((byte)(a >> 48));\n  outs.write((byte)(a >> 56));\n}\n"}
{"nl": "Creates a StoredList that can be scanned from random position", "code": "public static <T>IStoredList<T> createRandomScanList(boolean reuseLocks){\n  return createStoredList(true,reuseLocks);\n}\n"}
{"nl": "Create a MultiTraversal that follows shortcut edges", "code": "private void makeMultiTraversal(){\n  Optional<String> roleA=roletypes.get(0);\n  String playerA=roleplayers.get(0);\n  Optional<String> roleB=roletypes.get(1);\n  String playerB=roleplayers.get(1);\n  multiTraversal=MultiTraversal.create(new FragmentImpl(null,FragmentPriority.EDGE_RELATION,playerA,playerB),new FragmentImpl(null,FragmentPriority.EDGE_RELATION,playerB,playerA));\n}\n"}
{"nl": "is the entry returned already matched against the searching template currently is true if the underlying scan made by CacheManager::EntriesIter", "code": "public boolean isAlreadyMatched(){\n  return false;\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected void handleComputeFields(int julianDay){\n  int[] fields=new int[3];\n  jdToCE(julianDay,getJDEpochOffset(),fields);\n  int year;\n  int era;\n  int year;\n  if (isAmeteAlemEra()) {\n    int era=0;\n    year=fields[0] + 5500;\n  }\n else {\n    int year;\n    if (fields[0] > 0) {\n      int era=1;\n      year=fields[0];\n    }\n else {\n      era=0;\n      year=fields[0] + 5500;\n    }\n  }\n  internalSet(19,fields[0]);\n  internalSet(0,era);\n  internalSet(1,year);\n  internalSet(2,fields[1]);\n  internalSet(5,fields[2]);\n  internalSet(6,30 * fields[1] + fields[2]);\n}\n"}
{"nl": "Sends this packet to all the players in the world within the radius", "code": "public void toAllInRadius(WorldServer world,Vec3i pos,double radius){\n  toAllInRadius(world,new Vec3d(pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5),radius);\n}\n"}
{"nl": "Construct the overlay", "code": "public Layer(){\n  super();\n}\n"}
{"nl": "This method will decrease the kinah amount of a player", "code": "private static void decreaseKinahAmount(Player player,long price){\n  player.getInventory().decreaseKinah(price);\n}\n"}
{"nl": "register one global element", "code": "public void addGlobalElementDeclAll(XSElementDecl decl){\n  if (fAllGlobalElemDecls.get(decl) == null) {\n    fAllGlobalElemDecls.put(decl,decl);\n    if (decl.fSubGroup != null) {\n      if (fSubGroupCount == fSubGroups.length)       fSubGroups=resize(fSubGroups,fSubGroupCount + INC_SIZE);\n      fSubGroups[fSubGroupCount++]=decl;\n    }\n  }\n}\n"}
{"nl": "all options get saved as (alias, value) pair", "code": "protected void okPressed(){\n  if (createNewConfig())   super.okPressed();\n else {\n    Shell defaultShell=SootPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getShell();\n    String projectName=getSootMainProjectWidget().getText().getText();\n    MessageDialog.openError(defaultShell,\"Unable to find Soot Main Project\",\"Project \" + projectName + \" does not exist,\"+ \" is no Java project or is closed.\");\n  }\n}\n"}
{"nl": "delete all the selected nodes", "code": "public void deleteSelectedNodes(){\n  DefaultTreeModel model=(DefaultTreeModel)dataTree.getModel();\n  TreePath[] selectedPaths=dataTree.getSelectionPaths();\n  if (selectedPaths != null) {\n    for (    TreePath selectedPath : selectedPaths) {\n      DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectedPath.getLastPathComponent();\n      node.removeAllChildren();\n      model.nodeStructureChanged(node);\n      DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();\n      if (parent != null) {\n        parent.remove(node);\n        model.nodeStructureChanged(parent);\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a new SubEquipmentCacheObject containing the information provided within the parameters", "code": "public SubEquipmentCacheObject(final Long pId,final String pName,final String pDescription,final String pHandlerClassName,final Long pStateTagId,final Long pAliveTagId,final int pAliveInterval,final Long pCommfaultTagId,final Long pParentId){\n  super(pId,pName,pDescription,pHandlerClassName,pStateTagId,pAliveTagId,pAliveInterval,pCommfaultTagId);\n  this.parentId=pParentId;\n}\n"}
{"nl": "replace the location manager by a new one", "code": "public void replaceLocationManager(LocationManager locationManager) throws IOException {\n  InfoSection infoSection=loadInfoSection();\n  infoSection.syncLocationManager2InfoSection(locationManager);\n  storeInfoSection();\n}\n"}
{"nl": "Get the class which implements the ServiceMonitor", "code": "@Override protected void monitor() throws Exception {\n  checkAvailability();\n  if (serviceMonitor == null)   serviceMonitor=new GSPingManager();\n}\n"}
{"nl": "handle shell btn event", "code": "public void handleBtnKeyEvent(KeyEvent e){\nswitch (e.getCode()) {\ncase ENTER:\n    processCommand();\n  break;\ncase BACK_SPACE:\nbreak;\ncase UP:\nif (nCommandIndicatorPoisition != nCommandsContainerIndicator && nCommandIndicatorPoisition > Settings.ERRORCODE) setServerCommandTextEdit();\nif (nCommandIndicatorPoisition != nCommandsContainerIndicator) nCommandIndicatorPoisition--;\nif (nCommandIndicatorPoisition < 0 && sCommandsContainer[Settings.nMaximumSizeOfCommandsContainer - 1] != null) nCommandIndicatorPoisition=Settings.nMaximumSizeOfCommandsContainer - 1;\nbreak;\ncase DOWN:\nif (nCommandIndicatorPoisition != _firstPoistion) nCommandIndicatorPoisition++;\nif (nCommandIndicatorPoisition >= Settings.nMaximumSizeOfCommandsContainer && sCommandsContainer[Settings.ZEROINIT] != null) nCommandIndicatorPoisition=Settings.ZEROINIT;\nif (nCommandIndicatorPoisition != nCommandsContainerIndicator && nCommandIndicatorPoisition > Settings.ERRORCODE) setServerCommandTextEdit();\nbreak;\ncase LEFT:\nbreak;\ncase RIGHT:\nbreak;\ndefault :\ne.consume();\nbreak;\n}\n}\n"}
{"nl": "Purge the status information from the cache", "code": "public void purgeCache(IContainer root,boolean deep) throws SVNException {\n  statusCache.purgeCache(root,deep);\n}\n"}
{"nl": "Cast the object to Comparable otherwise throws an IllegalArgumentException exception", "code": "private static Comparable<?> castToComparable(Object obj){\n  try {\n    return (Comparable<?>)obj;\n  }\n catch (  ClassCastException cce) {\n    throw new IllegalArgumentException(\"Type \" + obj.getClass() + \" doesn't implement Comparable, Serialization mode might be different than \"+ StorageType.OBJECT+ \".\",cce);\n  }\n}\n"}
{"nl": "triggers the update of weather to all players", "code": "private void onWeatherChange(int mapId,Player player){\n  WeatherEntry[] weatherEntries=getWeatherEntries(mapId);\n  if (weatherEntries == null) {\n    return;\n  }\n  if (player == null) {\n    for (Iterator<Player> playerIterator=World.getInstance().getPlayersIterator(); playerIterator.hasNext(); ) {\n      Player currentPlayer=playerIterator.next();\n      if (!currentPlayer.isSpawned()) {\n        continue;\n      }\n      if (currentPlayer.getWorldId() == mapId) {\n        PacketSendUtility.sendPacket(currentPlayer,new SM_WEATHER(weatherEntries));\n      }\n    }\n  }\n else {\n    PacketSendUtility.sendPacket(player,new SM_WEATHER(weatherEntries));\n  }\n}\n"}
{"nl": "Add given socket to the watched objects (request group)", "code": "public WatchedObject addRequestWatch(SocketChannel sock,ConnectionResource client){\n  return addWatch(new WatchedObject(this,sock,client));\n}\n"}
{"nl": "Creates a remote folder", "code": "public void createRemoteFolder(ISVNRemoteFolder parent,String folderName,String message,IProgressMonitor monitor) throws SVNException {\n  parent.createRemoteFolder(folderName,message,monitor);\n}\n"}
{"nl": "Returns the set of views that depend on the given node in either the horizontal or vertical direction", "code": "public Set<NlComponent> dependsOn(Collection<? extends NlComponent> nodes,boolean vertical){\n  List<ViewData> reachable=new ArrayList<ViewData>();\n  Set<ViewData> visiting=new HashSet<ViewData>();\n  for (  NlComponent node : nodes) {\n    ViewData view=myNodeToView.get(node);\n    if (view != null) {\n      findBackwards(view,visiting,reachable,vertical,view);\n    }\n  }\n  Set<NlComponent> dependents=new HashSet<NlComponent>(reachable.size());\n  for (  ViewData v : reachable) {\n    dependents.add(v.node);\n  }\n  return dependents;\n}\n"}
{"nl": "Used to scan effects for Stumble/Stagger/Spin/OpenAerial", "code": "public boolean hasPhysicalStateEffect(){\n  Iterator<Effect> effectIterator=this.abnormalEffectMap.values().iterator();\n  while (effectIterator.hasNext()) {\n    Effect localEffect=effectIterator.next();\n    if (localEffect.isPhysicalState()) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Requires the selection to have the given number of selected widgets", "code": "@NotNull public DesignSurfaceFixture requireSelection(@NotNull List<NlComponentFixture> components){\n  assertEquals(components,getSelection());\n  return this;\n}\n"}
{"nl": "Constructs reverse CounterMap where the count of a pair (k,v) is the count of (v,k) in the current CounterMap", "code": "public CounterMap<V,K> invert(){\n  CounterMap<V,K> invertCounterMap=new CounterMap<>();\n  for (  K key : this.keySet()) {\n    Counter<V> keyCounts=this.getCounter(key);\n    for (    V val : keyCounts.keySet()) {\n      double count=keyCounts.getCount(val);\n      invertCounterMap.setCount(val,key,count);\n    }\n  }\n  return invertCounterMap;\n}\n"}
{"nl": "Requests for an upload to the FileUploader service", "code": "private void requestForUpload(OCFile file){\n  FileUploader.UploadRequester requester=new FileUploader.UploadRequester();\n  requester.uploadUpdate(mContext,mAccount,file,FileUploader.LOCAL_BEHAVIOUR_MOVE,true);\n  mTransferWasRequested=true;\n}\n"}
{"nl": "Method to start NetLog to log Cronet events", "code": "private void startNetLog(){\n  File outputFile;\n  try {\n    outputFile=File.createTempFile(\"cronet\",\"log\",Environment.getExternalStorageDirectory());\n    cronetEngine.startNetLogToFile(outputFile.toString(),false);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "remove this taxon", "code": "public void remove(String name){\n  Integer tt=name2index.get(name);\n  if (tt != null) {\n    name2index.keySet().remove(name);\n    index2name.remove(tt);\n    ntax--;\n    bits.set(tt,false);\n  }\n}\n"}
{"nl": "copy to database in device which copy assets folder database", "code": "private void copyDatabase() throws Exception {\n  try {\n    InputStream input=mContext.getAssets().open(DB_NAME);\n    String outFileName=DB_PATH + DB_NAME;\n    OutputStream output=new FileOutputStream(outFileName);\n    byte[] buffer=new byte[1024];\n    int length;\n    while (((length=input.read(buffer)) > 0)) {\n      output.write(buffer,0,length);\n    }\n    output.flush();\n    input.close();\n    output.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    Log.e(\"DB_ERROR\",\"copyDatabase(): Could not copy DB\");\n  }\n}\n"}
{"nl": "upload file to storage server (by file buff, slave file mode)", "code": "public String upload_file1(String master_file_id,String prefix_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(master_file_id,parts);\n  if (this.errno != 0) {\n    return null;\n  }\n  parts=this.upload_file(parts[0],parts[1],prefix_name,file_buff,offset,length,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "END OF LOCAL PAIR CLASS", "code": "public ReachingCopies(Object analyze){\n  super();\n  DavaFlowSet temp=(DavaFlowSet)process(analyze,new DavaFlowSet());\n}\n"}
{"nl": "Appends new content type to restricted list (depending on the current restricted content types)", "code": "private void appendRestrictedContentType(ContentType contentType){\n  if (restrictedContentTypesMask == 0) {\n    restrictedContentTypesMask=contentType.getFlagValue();\n  }\n else {\n    restrictedContentTypesMask|=contentType.getFlagValue();\n  }\n}\n"}
{"nl": "Creates new startup manager and configures it", "code": "private void initSpaceStartupStateManager() throws CreateException {\n  List<String> targetNames=_clusterPolicy.m_ReplicationPolicy.m_ReplicationGroupMembersNames;\n  String spaceName=_clusterPolicy.m_ReplicationPolicy.m_OwnMemberName;\n  _startupManager=new ReplicationStartupManager(spaceName);\n  for (  String name : targetNames) {\n    if (name.equals(spaceName))     continue;\n  }\n  try {\n    if (_startupManager.shouldWait(targetNames)) {\n      _logger.info(\"Waiting for the first space in cluster to start\");\n      _startupManager.waitForLastSpace();\n    }\n  }\n catch (  InterruptedException e) {\n    throw new CreateException(\"ReplicationStartupManager was interrupted\",e);\n  }\n}\n"}
{"nl": "author  hhj TODO", "code": "public static void warnInfo(String msg){\n  warnInfo(\"zhibo\",msg);\n}\n"}
{"nl": "paint the ellipse", "code": "public void paint(Graphics g,Transform trans){\n  final Graphics2D g2d=(Graphics2D)g;\n  if (color != null)   g2d.setColor(color);\n  final Point center=trans.w2d(centerX,centerY);\n  final double lenX=Geometry.length(Geometry.diff(trans.w2d(lengthA,0),trans.w2d(0,0)));\n  final double lenY=Geometry.length(Geometry.diff(trans.w2d(0,lengthB),trans.w2d(0,0)));\n  final AffineTransform old=g2d.getTransform();\n  g2d.rotate(angleInRadians,center.getX(),center.getY());\n  g2d.drawOval((int)Math.round(center.getX() - lenX),(int)Math.round(center.getY() - lenY),(int)Math.round(2 * lenX),(int)Math.round(2 * lenY));\n  g2d.setTransform(old);\n}\n"}
{"nl": "Computes the Jacobsthal number with the given index using the closed-form equation: J(n) = (2^n - (-1)^n) / 3", "code": "private static BigInteger forIndex(int n){\n  if (n == 0)   return BigInteger.ZERO;\n  BigInteger val=BigInteger.ONE.shiftLeft(n);\n  if (n % 2 == 0) {\n    val=val.subtract(BigInteger.ONE);\n  }\n else {\n    val=val.add(BigInteger.ONE);\n  }\n  return val.divide(BigInteger.valueOf(3));\n}\n"}
{"nl": "Change space state and store it", "code": "public synchronized void changeState(StartupState newState){\n  if (_currentSpaceState == newState)   return;\n  if (_logger.isLoggable(Level.FINE)) {\n    _logger.log(Level.FINE,\"Changing space [\" + _spaceName + \"] state from \"+ _currentSpaceState+ \" to \"+ newState);\n  }\n  try {\n    saveState(newState);\n  }\n catch (  IOException e) {\n    if (_logger.isLoggable(Level.WARNING)) {\n      _logger.log(Level.WARNING,\" Error on space connect [\" + _spaceName + \"] state.\",e);\n    }\n  }\n  _currentSpaceState=newState;\n}\n"}
{"nl": "Computes the call flow function for the given call-site abstraction", "code": "protected Set<D> computeCallFlowFunction(FlowFunction<D> callFlowFunction,D d1,D d2){\n  return callFlowFunction.computeTargets(d2);\n}\n"}
{"nl": "mul the Math_Vector using scalar", "code": "public Math_Vector mul(Math_Vector other){\n  this.x*=other.x;\n  this.y*=other.y;\n  return this;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public final void reset(char[] chars){\n  int length=0;\n  if (chars != null) {\n    length=chars.length;\n  }\n  reset(chars,0,length);\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n"}
{"nl": "deletes the object", "code": "@Override public void deleteObject(String sObjectName,String sObjectCategory){\n  int index;\n  super.deleteObject(sObjectName,sObjectCategory);\n  ArrayList<String> nlist=(ArrayList<String>)loadObject(sObjectCategory,ListCategoryName);\n  index=nlist.indexOf(sObjectName);\n  nlist.remove(index);\n  super.saveObject(nlist,sObjectCategory,ListCategoryName);\n}\n"}
{"nl": "Clears the data tags of this time deadband activator", "code": "@Override public void clearDataTags(){\n  dataTagTable.clear();\n}\n"}
{"nl": "Cancel the flow", "code": "public void cancel(){\n  mDna.eliminate();\n}\n"}
{"nl": "Check for each field if the field already exists in the Host structure, if not the method will add this new field to the Host structure", "code": "private void addFieldToHostStructure(Structure hostStructure,String fieldName,Field.FieldType fieldtype,Field.DataType fieldDataType,int order){\n  try {\n    Field field=FieldFactory.getFieldByName(\"Host\",fieldName);\n    if (null == field.getVelocityVarName() || field.getVelocityVarName().isEmpty()) {\n      Field newField=new Field(fieldName,fieldtype,fieldDataType,hostStructure,false,false,true,order,false,false,true);\n      Logger.info(this,\"*Added the field '\" + fieldName + \"' to the Host structure\");\n      FieldFactory.saveField(newField);\n    }\n  }\n catch (  DotHibernateException e) {\n    throw new RuntimeException(e.toString(),e);\n  }\n}\n"}
{"nl": "Searches market items in a community's catalog", "code": "public MarketSearchQueryWithExtended searchExtended(UserActor actor,int ownerId){\n  return new MarketSearchQueryWithExtended(getClient(),actor,ownerId);\n}\n"}
{"nl": "random cat images bitmap", "code": "@TargetApi(Build.VERSION_CODES.CUPCAKE) public static void image(BitmapListener listener,String type){\n  BitmapTask task=new BitmapTask();\n  task.setListener(listener);\n  task.execute(imageUrl(type));\n}\n"}
{"nl": "This returns the given column over an n arrays", "code": "private static double[] column(int column,double[]... nums) throws IllegalArgumentException {\n  double[] ret=new double[nums.length];\n  for (int i=0; i < nums.length; i++) {\n    double[] curr=nums[i];\n    ret[i]=curr[column];\n  }\n  return ret;\n}\n"}
{"nl": "Reversed sort by virtual field", "code": "public void testSortByVirtualFieldReversed() throws Exception {\n  deleteAllDocs();\n  send(\"addDocument\",\"{fields: {id: 0, boost: 1.0}}\");\n  send(\"addDocument\",\"{fields: {id: 1, boost: 2.0}}\");\n  send(\"search\",\"{query: MatchAllDocsQuery, sort: {fields: [{field: logboost, reverse: true}]}, retrieveFields: [id]}\");\n  assertEquals(2,getInt(\"totalHits\"));\n  assertEquals(1,getInt(\"hits[0].fields.id\"));\n  assertEquals(0,getInt(\"hits[1].fields.id\"));\n  assertEquals(.6931f,getFloat(\"hits[0].fields.sortFields.logboost\"),.0001f);\n  assertEquals(0.0f,getFloat(\"hits[1].fields.sortFields.logboost\"),.0001f);\n}\n"}
{"nl": "Get a flight status based on a Multi-point based flight", "code": "public static void checkFlightPath(List<Coordinate> path,int width,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean weather,Date date,AirMapCallback<AirMapStatus> listener){\n  String url=statusPathUrl;\n  Map<String,String> params=AirMapStatus.getAsParams(takeOffPoint,types,ignoredTypes,weather,date);\n  params.put(\"geometry\",\"LINESTRING(\" + makeGeoString(path) + \")\");\n  AirMap.getClient().get(url,params,new GenericOkHttpCallback(listener,AirMapStatus.class));\n}\n"}
{"nl": "Return a tap target for the navigation button (back, up, etc) from the given toolbar", "code": "public static ToolbarTapTarget forToolbarNavigationIcon(Toolbar toolbar,CharSequence title){\n  return forToolbarNavigationIcon(toolbar,title,null);\n}\n"}
{"nl": "Post an Event", "code": "@Override public void accept(@NonNull final Object reference){\nsynchronized (this) {\n    this.reference=reference;\n  }\n  updateDispatcher.update();\n}\n"}
{"nl": "Receiving speech input", "code": "@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){\n  super.onActivityResult(requestCode,resultCode,data);\nswitch (requestCode) {\ncase REQ_CODE_SPEECH_INPUT:\n{\n      if (resultCode == RESULT_OK && null != data) {\n        ArrayList<String> result=data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);\n        sendMessage(result.get(0));\n      }\n      break;\n    }\n}\n}\n"}
{"nl": "ask view to prevent user input", "code": "public void lockUserInput(){\n  isLocked=true;\n  getTabbedPane().setEnabled(false);\n  if (commandManager != null)   commandManager.setEnableCritical(false);\n  setCursor(new Cursor(Cursor.WAIT_CURSOR));\n}\n"}
{"nl": "Get the next record", "code": "@Override public List<Writable> next(){\n  List<String> next=dataIter.next();\n  invokeListeners(next);\n  List<Writable> ret=new ArrayList<>();\n  for (  String s : next)   ret.add(new Text(s));\n  return ret;\n}\n"}
{"nl": "Save activity report for unit", "code": "@RequestMapping(method=RequestMethod.POST,value=\"orgUnits/{id}/activities\") @ResponseBody public String saveActivityReport2_8(@PathVariable int id,@RequestBody ActivityValue activityValue) throws NotAllowedException {\n  activityReportingService.saveActivityReport(getUnit(id),activityValue,0);\n  return ACTIVITY_REPORT_UPLOADED;\n}\n"}
{"nl": "paste into table", "code": "public void pasteClipboard(){\n  final Clipboard clipboard=Clipboard.getSystemClipboard();\n  if (clipboard.getContent(fmt) != null) {\n    spreadsheetView.pasteClipboard();\n  }\n else {\n    String contents=clipboard.getString().trim().replaceAll(\"\\r\\n\",\"\\n\").replaceAll(\"\\r\",\"\\n\");\n    String[] lines=contents.split(\"\\n\");\n    paste(lines);\n  }\n}\n"}
{"nl": "Set group ids", "code": "public NewsfeedDeleteBanQuery groupIds(List<Integer> value){\n  return unsafeParam(\"group_ids\",value);\n}\n"}
{"nl": "Migrate a foreign key column as a relation", "code": "private Collection<Var> migrateAsRelation(String entityTypeParent,String columnType,String childType){\n  String roleParentName=namer.roleParentName(columnType);\n  String roleChildName=namer.roleChildName(columnType);\n  Var entityTypeChild=var().id(childType).isa(\"entity-type\");\n  Var roleTypeParent=var().id(roleParentName).isa(\"role-type\");\n  Var roleTypeChild=var().id(roleChildName).isa(\"role-type\");\n  Var relationType=var().id(namer.relationName(columnType)).isa(\"relation-type\").hasRole(roleParentName).hasRole(roleChildName);\n  Var entityTypeParentPlayingRole=var().id(entityTypeParent).playsRole(roleParentName);\n  entityTypeChild.playsRole(roleChildName);\n  return Lists.newArrayList(entityTypeChild,roleTypeParent,roleTypeChild,relationType,entityTypeParentPlayingRole);\n}\n"}
{"nl": "Creates a new instance of RecentProjects", "code": "public ShowNextTime(){\n  super(new BorderLayout());\n  setOpaque(false);\n  button=new JCheckBox(BundleSupport.getLabel(\"ShowOnStartup\"));\n  button.setSelected(WelcomeOptions.getDefault().isShowOnStartup());\n  button.setOpaque(false);\n  BundleSupport.setAccessibilityProperties(button,\"ShowOnStartup\");\n  add(button,BorderLayout.CENTER);\n  button.addActionListener(this);\n}\n"}
{"nl": "Creates a status notification to show the download progress", "code": "private void notifyDownloadStart(DownloadFileOperation download){\n  mLastPercent=0;\n  mNotificationBuilder=NotificationUtils.newNotificationBuilder(this);\n  mNotificationBuilder.setSmallIcon(R.drawable.notification_icon).setTicker(getString(R.string.downloader_download_in_progress_ticker)).setContentTitle(getString(R.string.downloader_download_in_progress_ticker)).setOngoing(true).setProgress(100,0,download.getSize() < 0).setContentText(String.format(getString(R.string.downloader_download_in_progress_content),0,new File(download.getSavePath()).getName()));\n  Intent showDetailsIntent=null;\n  if (PreviewImageFragment.canBePreviewed(download.getFile())) {\n    showDetailsIntent=new Intent(this,PreviewImageActivity.class);\n  }\n else {\n    showDetailsIntent=new Intent(this,FileDisplayActivity.class);\n  }\n  showDetailsIntent.putExtra(FileActivity.EXTRA_FILE,download.getFile());\n  showDetailsIntent.putExtra(FileActivity.EXTRA_ACCOUNT,download.getAccount());\n  showDetailsIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n  mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showDetailsIntent,0));\n  mNotificationManager.notify(R.string.downloader_download_in_progress_ticker,mNotificationBuilder.build());\n}\n"}
{"nl": "Create a Integer arrayList from String arrayList", "code": "public static ArrayList<Integer> convertStringArrayToIntegerArray(List<String> arrayList){\n  ArrayList<Integer> integers=new ArrayList<>();\n  for (  String str : arrayList) {\n    integers.add(Integer.valueOf(str));\n  }\n  return integers;\n}\n"}
{"nl": "Writes a pbs entry packet to the stream", "code": "public static void writeNullablePbsEntryPacket(PbsOutputStream output,PbsEntryPacket pbsEntry){\n  if (pbsEntry != null) {\n    output.writeBoolean(true);\n    PbsEntryFormatter.writePbsEntryPacket(output,pbsEntry);\n  }\n else   output.writeBoolean(false);\n}\n"}
{"nl": "Required for Externalizable", "code": "public UpdateLeasesSpaceOperationRequest(){\n}\n"}
{"nl": "Logs with warn level", "code": "public static void warn(@NonNull String tag,String message,Object... args){\n  android.util.Log.w(tag,String.format(Locale.ENGLISH,message,args));\n}\n"}
{"nl": "Create a variation (copy) of a given resource file", "code": "public static void forkResourceFile(@NotNull DesignSurface surface,@Nullable String newFolder,boolean open){\n  Configuration configuration=surface.getConfiguration();\n  if (configuration == null) {\n    assert false;\n    return;\n  }\n  final VirtualFile file=configuration.getFile();\n  if (file == null) {\n    assert false;\n    return;\n  }\n  Module module=configuration.getModule();\n  if (module == null) {\n    assert false;\n    return;\n  }\n  XmlFile xmlFile=(XmlFile)configuration.getPsiFile();\n  ResourceFolderType folderType=ResourceHelper.getFolderType(xmlFile);\n  if (folderType == null) {\n    folderType=ResourceFolderType.LAYOUT;\n  }\n  forkResourceFile(module.getProject(),folderType,file,xmlFile,newFolder,configuration,open);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set flipV=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show what=all;\");\n}\n"}
{"nl": "REST GET for introducing type to space", "code": "@Deprecated @RequestMapping(value=\"/{type}/_introduce_type\",method=RequestMethod.GET,produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> introduceType(@PathVariable String type,@RequestParam(value=SPACEID_PARAM,defaultValue=\"id\") String spaceID){\n  if (logger.isLoggable(Level.FINE))   logger.fine(\"introducing type: \" + type);\n  Map<String,Object> result=new Hashtable<String,Object>();\n  try {\n    GigaSpace gigaSpace=ControllerUtils.xapCache.get();\n    SpaceTypeDescriptor typeDescriptor=gigaSpace.getTypeManager().getTypeDescriptor(type);\n    if (typeDescriptor != null) {\n      throw new TypeAlreadyRegisteredException(type);\n    }\n    SpaceTypeDescriptor spaceTypeDescriptor=new SpaceTypeDescriptorBuilder(type).idProperty(spaceID).routingProperty(spaceID).supportsDynamicProperties(true).create();\n    gigaSpace.getTypeManager().registerTypeDescriptor(spaceTypeDescriptor);\n    result.put(\"status\",\"success\");\n  }\n catch (  IllegalStateException e) {\n    throw new RestException(e.getMessage());\n  }\n  return result;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  ParametersDialog viewer=(ParametersDialog)getParent();\n  viewer.setVisible(false);\n}\n"}
{"nl": "Performs the next operation in the queue", "code": "private void doOperation(Account account,String remotePath){\n  mCurrentSyncOperation=mPendingOperations.get(account.name,remotePath);\n  if (mCurrentSyncOperation != null) {\n    RemoteOperationResult result=null;\n    try {\n      if (mCurrentAccount == null || !mCurrentAccount.equals(account)) {\n        mCurrentAccount=account;\n        mStorageManager=new FileDataStorageManager(account,mService.getContentResolver());\n      }\n      OwnCloudAccount ocAccount=new OwnCloudAccount(account,mService);\n      mOwnCloudClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,mService);\n      result=mCurrentSyncOperation.execute(mOwnCloudClient,mStorageManager);\n    }\n catch (    AccountsException e) {\n      Log_OC.e(TAG,\"Error while trying to get authorization\",e);\n    }\ncatch (    IOException e) {\n      Log_OC.e(TAG,\"Error while trying to get authorization\",e);\n    }\n finally {\n      mPendingOperations.removePayload(account.name,remotePath);\n      mService.dispatchResultToOperationListeners(mCurrentSyncOperation,result);\n      sendBroadcastFinishedSyncFolder(account,remotePath,result.isSuccess());\n    }\n  }\n}\n"}
{"nl": "Test whether this block has a variant attribute which matches the list of allowed variants", "code": "public static boolean blockVariantMatches(IBlockState bs,List<Variation> allowedVariants){\n  for (  IProperty prop : (java.util.Set<IProperty>)bs.getProperties().keySet()) {\n    if (prop.getName().equals(\"variant\") && prop.getValueClass().isEnum()) {\n      Object current=bs.getValue(prop);\n      if (current != null) {\n        for (        Variation var : allowedVariants) {\n          if (var.getValue().equalsIgnoreCase(current.toString()))           return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "Creates a new instance of GraphSimilarity", "code": "public GraphSimilarity(){\n  this.ValueSimilarity=0.0;\n  this.ContainmentSimilarity=0.0;\n  this.SizeSimilarity=0.0;\n}\n"}
{"nl": "check storage socket, if null create a new connection", "code": "protected boolean newUpdatableStorageConnection(String group_name,String remote_filename) throws IOException, MyException {\n  if (this.storageServer != null) {\n    return false;\n  }\n else {\n    TrackerClient tracker=new TrackerClient();\n    this.storageServer=tracker.getUpdateStorage(this.trackerServer,group_name,remote_filename);\n    if (this.storageServer == null) {\n      throw new MyException(\"getStoreStorage fail, errno code: \" + tracker.getErrorCode());\n    }\n    return true;\n  }\n}\n"}
{"nl": "Copy sorted records to UpdateScan", "code": "public boolean copyToScan(UpdateScan s){\n  if (!this.next())   return false;\n  s.insert();\n  for (  String fldName : sch.fields()) {\n    s.setVal(fldName,this.getVal(fldName));\n  }\n  return true;\n}\n"}
{"nl": "NOTE: this is a slow method, since it makes many objects just to format one date/time value", "code": "private static String msecToDateString(FieldDef fd,long value){\n  assert fd.valueType == FieldDef.FieldValueType.DATE_TIME;\n  Calendar calendar=new GregorianCalendar(TimeZone.getTimeZone(\"UTC\"),Locale.ROOT);\n  calendar.setLenient(false);\n  SimpleDateFormat dateTimeFormat=new SimpleDateFormat(fd.dateTimeFormat,Locale.ROOT);\n  dateTimeFormat.setCalendar(calendar);\n  Date date=new Date(value);\n  String result=dateTimeFormat.format(date);\n  System.out.println(\"MSEC TO DATE: value=\" + value + \" s=\"+ result);\n  return result;\n}\n"}
{"nl": "Required for Externalizable", "code": "public RegisterTypeDescriptorRequestInfo(){\n}\n"}
{"nl": "Forward to the model(url), do not response yet", "code": "final public void forward(String model){\n  Controller.dispatch(model,req,resp,method);\n}\n"}
{"nl": "prop is considered dirty if prop status is either conflicted or modified", "code": "public boolean isPropDirty(){\n  SVNStatusKind thePropStatus=getPropStatus();\n  return thePropStatus.equals(SVNStatusKind.CONFLICTED) || thePropStatus.equals(SVNStatusKind.MODIFIED);\n}\n"}
{"nl": "Change to rest mode", "code": "public void restMode(){\n  SummonsService.restMode(getOwner());\n}\n"}
{"nl": "Records the baseline edge for the given node to the potential match list", "code": "protected int addBaseLine(NlComponent node,String id){\n  int baselineY=node.getBaseline();\n  if (baselineY != -1) {\n    Rectangle b=new Rectangle(node.x,node.y,node.w,node.h);\n    myHorizontalEdges.add(new Segment(b.y + baselineY,b.x,x2(b),node,id,SegmentType.BASELINE,NO_MARGIN));\n  }\n  return baselineY;\n}\n"}
{"nl": "Note: A visibility annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public VisibilityAnnotationAttr(String kind,ArrayList annotations){\n  attr=new AsciiCP(kind + \"Annotations\");\n  list=annotations;\n  this.kind=kind;\n}\n"}
{"nl": "De-register a listener", "code": "public void removeRepositoryListener(ISVNListener listener){\n  repositoryListeners.remove(listener);\n}\n"}
{"nl": "Creates the default cumulative probability density test expected values", "code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0,0,0,0,0.791089998892,0.730456085931,0.689667290488,0.645278794701,0.578763688757};\n}\n"}
{"nl": "Ids of additional photos", "code": "public MarketEditQuery photoIds(Integer... value){\n  return unsafeParam(\"photo_ids\",value);\n}\n"}
{"nl": "returns true, if split separates taxa a and b", "code": "public boolean separates(int a,int b){\n  return A.get(a) && B.get(b) || A.get(b) && B.get(a);\n}\n"}
{"nl": "It stops the thread and removes the reference to the PersistenceManager object so its memory can be released by the garbage collector", "code": "public final void stop(){\n  if (!isRunning()) {\n    resetPersistenceManager();\n  }\n  stopped=true;\n}\n"}
{"nl": "Called when a Block is right-clicked with this Item", "code": "public EnumActionResult onItemUse(ItemStack stack,EntityPlayer playerIn,World worldIn,BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){\n  if (facing != EnumFacing.UP) {\n    return EnumActionResult.FAIL;\n  }\n else {\n    IBlockState iblockstate=worldIn.getBlockState(pos);\n    Block block=iblockstate.getBlock();\n    if (!block.isReplaceable(worldIn,pos)) {\n      pos=pos.offset(facing);\n    }\n    if (playerIn.canPlayerEdit(pos,facing,stack) && this.block.canPlaceBlockAt(worldIn,pos)) {\n      EnumFacing enumfacing=EnumFacing.fromAngle((double)playerIn.rotationYaw);\n      int i=enumfacing.getFrontOffsetX();\n      int j=enumfacing.getFrontOffsetZ();\n      placeDoor(worldIn,pos,enumfacing,this.block);\n      SoundType soundtype=this.block.getSoundType();\n      worldIn.playSound(playerIn,pos,soundtype.getPlaceSound(),SoundCategory.BLOCKS,(soundtype.getVolume() + 1.0F) / 2.0F,soundtype.getPitch() * 0.8F);\n      --stack.stackSize;\n      return EnumActionResult.SUCCESS;\n    }\n else {\n      return EnumActionResult.FAIL;\n    }\n  }\n}\n"}
{"nl": "Cover photo identifier", "code": "protected MarketAddQuery mainPhotoId(int value){\n  return unsafeParam(\"main_photo_id\",value);\n}\n"}
{"nl": "send quit command to server and close socket", "code": "public static void quit(Socket sock) throws IOException {\n  PkgHeader header;\n  byte[] bs=new byte[FDHT_PROTO_PKG_HEADER_SIZE];\n  header=new PkgHeader();\n  header.cmd=FDHT_PROTO_CMD_QUIT;\n  packHeader(header,bs);\n  sock.getOutputStream().write(bs);\n  sock.close();\n}\n"}
{"nl": "Prevent construction of utility class", "code": "private ClassHelper(){\n}\n"}
{"nl": "Perform a mathematical operation (add, subtract, scalar min/max only) on the specified time column", "code": "public Builder timeMathOp(String columnName,MathOp mathOp,long timeQuantity,TimeUnit timeUnit){\n  return transform(new TimeMathOpTransform(columnName,mathOp,timeQuantity,timeUnit));\n}\n"}
{"nl": "Creates a new instance of DocumentWordGraph", "code": "public DocumentWordGraph(){\n  MinSize=1;\n  MaxSize=2;\n  CorrelationWindow=3;\n  InitGraphs();\n}\n"}
{"nl": "Removes an item from one or multiple collections", "code": "public MarketRemoveFromAlbumQuery removeFromAlbum(UserActor actor,int ownerId,int itemId,List<Integer> albumIds){\n  return new MarketRemoveFromAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);\n}\n"}
{"nl": "truncate appender file to size 0 from storage server", "code": "public int truncate_file1(String appender_file_id) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.truncate_file(parts[0],parts[1]);\n}\n"}
{"nl": "Zoom by a percentage of the current view range using the center as the anchor", "code": "public void zoom(float percentage){\n  double zoomDelta=mViewRange.getLength() * percentage;\n  requestZoom(mViewRange.getMin() - zoomDelta,mViewRange.getMax() + zoomDelta);\n}\n"}
{"nl": "count number of letters in sequence", "code": "private int countLetters(Lane lane){\n  int count=0;\n  for (int i=lane.getFirstNonGapPosition(); i <= lane.getLastNonGapPosition(); i++) {\n    if (Character.isLetter(lane.charAt(i)))     count++;\n  }\n  return count;\n}\n"}
{"nl": "buff convert to int", "code": "public static int buff2int(byte[] bs,int offset){\n  return (((int)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 24) | (((int)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 16) | (((int)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 8)| ((int)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3]));\n}\n"}
{"nl": "Instantiate an image with the given height and width", "code": "public NativeImageLoader(int height,int width,int channels,ImageTransform imageTransform){\n  this(height,width,channels);\n  this.imageTransform=imageTransform;\n  this.converter=new OpenCVFrameConverter.ToMat();\n}\n"}
{"nl": "Determine the converter with the field type", "code": "public static Converter<String,?> determine(Field field){\n  Class clazz=field.getType();\n  Converter<String,?> converter=determinePrimitiveConverter(clazz);\n  if (converter != null) {\n    return converter;\n  }\n  if (List.class.equals(clazz) || Map.class.equals(clazz) || Set.class.equals(clazz)) {\n    return determineCollectionConverter((ParameterizedType)field.getGenericType());\n  }\n  return new JsonConverter(clazz);\n}\n"}
{"nl": "Registers the callback methods in the given layout control so that they are included in the dummy main method", "code": "private void registerCallbackMethodsForView(SootClass callbackClass,LayoutControl lc){\n  if (callbackClass.getName().startsWith(\"android.\"))   return;\n  if (lc.getViewClass().getName().startsWith(\"android.\"))   return;\n{\n    SootClass sc=lc.getViewClass();\n    boolean isView=false;\n    while (sc.hasSuperclass()) {\n      if (sc.getName().equals(\"android.view.View\")) {\n        isView=true;\n        break;\n      }\n      sc=sc.getSuperclass();\n    }\n    if (!isView)     return;\n  }\n  SootClass sc=lc.getViewClass();\n  Set<String> systemMethods=new HashSet<String>(10000);\n  for (  SootClass parentClass : Scene.v().getActiveHierarchy().getSuperclassesOf(sc)) {\n    if (parentClass.getName().startsWith(\"android.\"))     for (    SootMethod sm : parentClass.getMethods())     if (!sm.isConstructor())     systemMethods.add(sm.getSubSignature());\n  }\n  for (  SootMethod sm : sc.getMethods())   if (!sm.isConstructor())   if (systemMethods.contains(sm.getSubSignature()))   addCallbackMethod(callbackClass.getName(),new AndroidMethod(sm));\n}\n"}
{"nl": "Base58 helper method", "code": "private byte divmod58(byte[] number,int startAt){\n  int remainder=0;\n  for (int i=startAt; i < number.length; i++) {\n    int digit256=(int)number[i] & 0xFF;\n    int temp=remainder * BASE_256 + digit256;\n    number[i]=(byte)(temp / BASE_58);\n    remainder=temp % BASE_58;\n  }\n  return (byte)remainder;\n}\n"}
{"nl": "show deny page with error info to end-user", "code": "final public void deny(String url,String error){\n  if (log.isDebugEnabled())   log.debug(this.getClass().getName() + \"[\" + this.getURI()+ \"]\",new Exception(\"deny \" + error));\n  if (isAjax()) {\n    JSON jo=new JSON();\n    jo.put(X.STATE,HttpServletResponse.SC_UNAUTHORIZED);\n    jo.put(X.MESSAGE,lang.get(\"access.deny\"));\n    jo.put(X.ERROR,error);\n    jo.put(X.URL,url);\n    this.response(jo);\n  }\n else {\n    setStatus(HttpServletResponse.SC_FORBIDDEN);\n    this.set(\"me\",this.getUser());\n    this.set(X.ERROR,error);\n    this.set(X.URL,url);\n    this.show(\"/deny.html\");\n  }\n}\n"}
{"nl": "Returns true if indexing should be paused, false otherwise used by the parsers to know if they should continue processing or not", "code": "public static synchronized boolean shouldPauseAdding(){\n  if (Singleton.getPauseBackgroundJobs()) {\n    return true;\n  }\n  int indexQueueSize=Singleton.getCodeIndexQueue().size();\n  int codeIndexLinesCount=Singleton.getCodeIndexLinesCount();\n  if (indexQueueSize > MAXINDEXSIZE) {\n    Singleton.getLogger().info(\"indexQueueSize \" + indexQueueSize + \" larger then \"+ MAXINDEXSIZE);\n    return true;\n  }\n  if (codeIndexLinesCount > MAXLINESINDEXSIZE) {\n    Singleton.getLogger().info(\"codeIndexLinesCount \" + codeIndexLinesCount + \" larger then \"+ MAXLINESINDEXSIZE);\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Scale based on min,max", "code": "public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data,double min,double max){\n  DataFrame frame=DataFrames.toDataFrame(schema,data);\n  return DataFrames.toRecords(normalize(frame,min,max,Collections.<String>emptyList())).getSecond();\n}\n"}
{"nl": "Creates new area from given points", "code": "public PolyArea(ZoneName zoneName,int worldId,Point2D[] points,float zMin,float zMax){\n  super(zoneName,worldId,zMin,zMax);\n  if (points.length < 3) {\n    throw new IllegalArgumentException(\"Not enough points, needed at least 3 but got \" + points.length);\n  }\n  float[] xPoints=new float[points.length];\n  float[] yPoints=new float[points.length];\n  for (int i=0, n=points.length; i < n; i++) {\n    Point2D p=points[i];\n    xPoints[i]=p.getX();\n    yPoints[i]=p.getY();\n  }\n  this.poly=new Polygon2D(xPoints,yPoints,points.length);\n}\n"}
{"nl": "Generates out of this class instance a JSON message", "code": "public final String toJson(){\n  return getGson().toJson(this);\n}\n"}
{"nl": "Remove a file", "code": "public static boolean removeFile(File file){\n  if (fileExists(file)) {\n    return file.delete();\n  }\n else {\n    return true;\n  }\n}\n"}
{"nl": "AnObject field should always assigned new instance", "code": "public void testAnObjectField() throws Exception {\n  AnObject empty=new AnObject();\n  AnObject full=helper.fill(new AnObject());\n  assertTrue(helper.areEquals(full,full));\n  assertFalse(helper.areEquals(empty,full));\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void v(String msg){\n  if (isDebug) {\n    Log.v(TAG,msg);\n  }\n}\n"}
{"nl": "This method logs the TRACE message", "code": "public final void trace(final Object o,final Throwable t){\n  log(Level.TRACE,o,t);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set show-reference=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().setShowReference(value);\n}\n"}
{"nl": "Checks if there is Internet connection", "code": "private boolean isThereInternetConnection(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();\n  return (networkInfo != null && networkInfo.isConnectedOrConnecting());\n}\n"}
{"nl": "return mean of two profiles", "code": "private static double[] computeMean(double[] px,double[] py){\n  double[] m=new double[px.length];\n  for (int i=0; i < px.length; i++)   m[i]=0.5 * (px[i] + py[i]);\n  return m;\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowGroupsAsConvexHulls();\n}\n"}
{"nl": "Set peer id", "code": "public MessagesGetHistoryQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"wall.restoreComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketGetCategoriesQuery(VkApiClient client,UserActor actor){\n  super(client,\"market.getCategories\",GetCategoriesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "true - to return a list of mutual friends (up to 20), if any", "code": "protected FriendsGetRequestsQueryWithNeedMutual needMutual(Boolean value){\n  return unsafeParam(\"need_mutual\",value);\n}\n"}
{"nl": "Show only icon in item", "code": "public void showIconOnly(){\n  isIconOnlyMode=true;\n}\n"}
{"nl": "Removes option with specified bytecode", "code": "public void removeOption(byte entryCode){\n  this.optionsTable.remove(new Byte(entryCode));\n}\n"}
{"nl": "Check for the \"environment\" key in the pluginAPI", "code": "private boolean isConfigurationPluginAvailable(){\n  if (configurationPluginAvailable == null) {\n    try {\n      String value=APILocator.getPluginAPI().loadProperty(pluginName,\"environment\");\n      configurationPluginAvailable=(value != null);\n    }\n catch (    Exception e) {\n      Logger.warn(this,\"Exception while trying to get property 'environment' \",e);\n      configurationPluginAvailable=false;\n    }\n    Logger.info(this,\"Configuration plugin available: \" + configurationPluginAvailable);\n  }\n  return configurationPluginAvailable;\n}\n"}
{"nl": "Split a string using the given separator", "code": "public static String[] split(String str,char escapeChar,char separator){\n  if (str == null) {\n    return null;\n  }\n  List<String> strList=new ArrayList<>();\n  StringBuilder split=new StringBuilder();\n  int index=0;\n  while ((index=findNext(str,separator,escapeChar,index,split)) >= 0) {\n    ++index;\n    strList.add(split.toString());\n    split.setLength(0);\n  }\n  strList.add(split.toString());\n  int last=strList.size();\n  while (--last >= 0 && \"\".equals(strList.get(last))) {\n    strList.remove(last);\n  }\n  return strList.toArray(new String[strList.size()]);\n}\n"}
{"nl": "Builds the FitBoundsOptions new instance", "code": "public FitBoundsOptions build(){\n  FitBoundsOptions options=new FitBoundsOptions();\n  options.paddingTopLeft=this.paddingTopLeft;\n  options.paddingBottomRight=this.paddingBottomRight;\n  options.padding=this.padding;\n  options.maxZoom=this.maxZoom;\n  return options;\n}\n"}
{"nl": "Log to the appropiate log level the output of the command", "code": "private static void logOutput(Level level,Command cmd,final String outputType,ByteArrayOutputStream outputBytes){\n  String string=asString(outputBytes).trim();\n  if (string.isEmpty()) {\n    return;\n  }\n  for (  String line : string.split(System.lineSeparator())) {\n    logger.log(level,\"'\" + cmd.getCommandLineElements()[0] + \"' \"+ outputType+ \": \"+ line);\n  }\n}\n"}
{"nl": "Show progessbar when loading data", "code": "private void showLoading(){\n  progressBar.setVisibility(View.VISIBLE);\n  recyclerView.setVisibility(View.GONE);\n  emptyTextView.setVisibility(View.GONE);\n}\n"}
{"nl": "remove an element described by ObjectInfo", "code": "public void remove(IObjectInfo<T> oi){\n  lock.lock();\n  try {\n    remove_impl((ObjectInfo<T>)oi);\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "meizu Flyme set status bar light mode", "code": "public static boolean FlymeSetStatusBarLightMode(Window window,boolean dark){\n  boolean result=false;\n  if (window != null) {\n    try {\n      WindowManager.LayoutParams lp=window.getAttributes();\n      Field darkFlag=WindowManager.LayoutParams.class.getDeclaredField(\"MEIZU_FLAG_DARK_STATUS_BAR_ICON\");\n      Field meizuFlags=WindowManager.LayoutParams.class.getDeclaredField(\"meizuFlags\");\n      darkFlag.setAccessible(true);\n      meizuFlags.setAccessible(true);\n      int bit=darkFlag.getInt(null);\n      int value=meizuFlags.getInt(lp);\n      if (dark) {\n        value|=bit;\n      }\n else {\n        value&=~bit;\n      }\n      meizuFlags.setInt(lp,value);\n      window.setAttributes(lp);\n      result=true;\n    }\n catch (    Exception e) {\n    }\n  }\n  return result;\n}\n"}
{"nl": "Player entered world - search for non expired alliance", "code": "public static final void onPlayerLogin(Player player){\n  for (  PlayerAlliance alliance : alliances.values()) {\n    PlayerAllianceMember member=alliance.getMember(player.getObjectId());\n    if (member != null) {\n      alliance.onEvent(new PlayerConnectedEvent(alliance,player));\n    }\n  }\n}\n"}
{"nl": "Constructs new <tt>SM_L2AUTH_LOGIN_CHECK </tt> packet", "code": "public SM_L2AUTH_LOGIN_CHECK(boolean ok,String accountName){\n  this.ok=ok;\n  this.accountName=accountName;\n}\n"}
{"nl": "calls the dispatcher message of the consumer on this task", "code": "public void run(){\n  consumerObject.dispatch(task);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosCreateCommentQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n"}
{"nl": "Test to validate fix for ACT-1549: endTime of joining parallel gateway is not set", "code": "@Deployment public void testParallelJoinEndTime(){\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"forkJoin\");\n  List<Task> tasksToComplete=taskService.createTaskQuery().processInstanceId(processInstance.getId()).list();\n  assertEquals(2,tasksToComplete.size());\n  taskService.complete(tasksToComplete.get(0).getId());\n  taskService.complete(tasksToComplete.get(1).getId());\n  List<HistoricActivityInstance> historicActivityInstance=historyService.createHistoricActivityInstanceQuery().activityId(\"join\").processInstanceId(processInstance.getId()).list();\n  assertNotNull(historicActivityInstance);\n  assertEquals(2,historicActivityInstance.size());\n  assertNotNull(historicActivityInstance.get(0).getEndTime());\n  assertNotNull(historicActivityInstance.get(1).getEndTime());\n}\n"}
{"nl": "Clear all the listeners", "code": "public void removeAllListeners(){\n  listeners.clear();\n}\n"}
{"nl": "Paging configs", "code": "@RequestMapping(value=\"/configs\",method=RequestMethod.GET) public JsonResponse pagingConfig(@RequestParam(\"appId\") Long appId,@RequestParam(value=\"configName\",defaultValue=\"\") String configName,@RequestParam(value=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(value=\"pageSize\",defaultValue=\"10\") Integer pageSize){\n  Response<Page<Config>> pagingResp=configService.pagingConfig(appId,configName,pageNo,pageSize);\n  if (!pagingResp.isSuccess()) {\n    Logs.error(\"failed to paging config(appId={}, configName={}), cause: {}\",appId,configName,pagingResp.getErr());\n    return JsonResponse.notOk(pagingResp.getErr());\n  }\n  return JsonResponse.ok(pagingResp.getData());\n}\n"}
{"nl": "determine the size of datasets from the taxonomy classification", "code": "private void determineSizesFromTaxonomyClassification(){\n  Map<Integer,Integer[]> class2count=classification2class2counts.get(ClassificationType.Taxonomy.toString());\n  if (class2count != null) {\n    int[] sizes=new int[getNumberOfSamples()];\n    for (    Integer classId : class2count.keySet()) {\n      Integer[] counts=class2count.get(classId);\n      if (counts != null) {\n        for (int i=0; i < getNumberOfSamples(); i++) {\n          if (counts[i] != null)           sizes[i]+=counts[i];\n        }\n      }\n    }\n    sampleSizes.clear();\n    for (    Integer size : sizes)     sampleSizes.add(size);\n  }\n}\n"}
{"nl": "<p>Title:use</p> <p>Description: use [ind] as an entry<p>", "code": "public void use(int ind){\n  if (dat.get(ind).check >= 0)   System.out.println(\"cell reused!!\");\n  if (dat.get(ind).base == 1) {\n    head=dat.get(ind).check;\n  }\n else {\n    dat.get(-dat.get(ind).base).check=dat.get(ind).check;\n  }\n  if (dat.get(ind).check == -datSize) {\n    tail=dat.get(ind).base;\n  }\n else {\n    dat.get(-dat.get(ind).check).base=dat.get(ind).base;\n  }\n  dat.get(ind).check=ind;\n}\n"}
{"nl": "Init the hashcode according to the identity HashCode", "code": "private void init(T referent){\n  _hashCode=System.identityHashCode(referent);\n}\n"}
{"nl": "Helper method which validates the new tag value and triggers an invalidation in case of a problem", "code": "private boolean checkValidation(final SourceDataTag currentSourceDataTag,final ValueUpdate update){\n  if (!isTimestampValid(currentSourceDataTag,update)) {\n    return false;\n  }\n  if (!isConvertible(currentSourceDataTag,update)) {\n    return false;\n  }\n  if (isNumber(currentSourceDataTag.getDataType()) && !isInRange(currentSourceDataTag,update)) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "gets the endpoints for the builder", "code": "public List<String> endpoints(){\n  return this.endpoints;\n}\n"}
{"nl": "Edits created polls", "code": "public PollsEditQuery edit(UserActor actor,int ownerId,int pollId){\n  return new PollsEditQuery(getClient(),actor,ownerId,pollId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountSetInfoQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.setInfo\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Player registered from server side", "code": "public ChatClient registerPlayer(int playerId,String playerLogin,String nick) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n  MessageDigest md=MessageDigest.getInstance(\"SHA-256\");\n  md.reset();\n  md.update(playerLogin.getBytes(\"UTF-8\"),0,playerLogin.length());\n  byte[] accountToken=md.digest();\n  byte[] token=generateToken(accountToken);\n  ChatClient chatClient=new ChatClient(playerId,token,nick);\n  players.put(playerId,chatClient);\n  return chatClient;\n}\n"}
{"nl": "Finds the minimum/maximum value of given column", "code": "public Object minMax(SelectColumn funcColumn,IQueryResultSet<IEntryPacket> entries,boolean isMax){\n  Object value, maxMin=null;\n  Iterator<IEntryPacket> iter=entries.iterator();\n  while (iter.hasNext()) {\n    IEntryPacket entry=iter.next();\n    value=entries.getFieldValue(funcColumn,entry);\n    if (value == null)     continue;\n    if (maxMin != null)     if (isMax)     maxMin=(((Comparable)value).compareTo(maxMin) > 0) ? value : maxMin;\n else     maxMin=(((Comparable)value).compareTo(maxMin) < 0) ? value : maxMin;\n else     maxMin=value;\n  }\n  return maxMin;\n}\n"}
{"nl": "Test that \"path\" attribute prefix inside \"data\" tag leads to correct completion results", "code": "public void testDataAttributeCompletion() throws Throwable {\n  doTestCompletionVariants(\"dataAttributeCompletion.xml\",\"android:path\",\"android:pathPrefix\",\"android:pathPattern\");\n}\n"}
{"nl": "Starts the first sample timer", "code": "public void startFirstSampleTimer(){\n  timer.start(\"firstAudio\");\n  firstSample=true;\n}\n"}
{"nl": "Ensures that the \"accept\" header is either set to JSON or empty", "code": "private Response assureAcceptJSON(IHTTPSession session){\n  final Map<String,String> headers=session.getHeaders();\n  if (!APPLICATION_JSON.equals(headers.get(ACCEPT_FIELD))) {\n    return newFixedLengthResponse(Response.Status.NOT_ACCEPTABLE,MIME_PLAINTEXT,\"set accept to application/json or remove it\");\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedSearchQueryWithExtended(VkApiClient client){\n  super(client,\"newsfeed.search\",SearchExtendedResponse.class);\n  extended(true);\n}\n"}
{"nl": "Set privacy comment", "code": "public VideoSaveQuery privacyComment(String... value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n"}
{"nl": "Sets all options equal to incoming options", "code": "public Builder cloneFrom(DisplayImageOptions options){\n  imageResOnLoading=options.imageResOnLoading;\n  imageResForEmptyUri=options.imageResForEmptyUri;\n  imageResOnFail=options.imageResOnFail;\n  imageOnLoading=options.imageOnLoading;\n  imageForEmptyUri=options.imageForEmptyUri;\n  imageOnFail=options.imageOnFail;\n  resetViewBeforeLoading=options.resetViewBeforeLoading;\n  cacheInMemory=options.cacheInMemory;\n  cacheOnDisc=options.cacheOnDisc;\n  imageScaleType=options.imageScaleType;\n  decodingOptions=options.decodingOptions;\n  delayBeforeLoading=options.delayBeforeLoading;\n  considerExifParams=options.considerExifParams;\n  extraForDownloader=options.extraForDownloader;\n  preProcessor=options.preProcessor;\n  postProcessor=options.postProcessor;\n  displayer=options.displayer;\n  handler=options.handler;\n  isSyncLoading=options.isSyncLoading;\n  return this;\n}\n"}
{"nl": "upload appender file to storage server (by file buff)", "code": "public String[] upload_appender_file(byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_appender_file(group_name,file_buff,offset,length,file_ext_name,meta_list);\n}\n"}
{"nl": "Requests a network update", "code": "public void requestRequestNetworkUpdate(){\n  enqueue(new RequestNetworkUpdateMessageClass().doRequest());\n  logger.debug(\"ZWave controller request network update\");\n}\n"}
{"nl": "Stop receiving notifications for traffic alerts", "code": "public static void clearComm(AirMapFlight flight,@Nullable AirMapCallback<Void> callback){\n  FlightService.clearCommKey(flight,callback);\n}\n"}
{"nl": "Rift announce packet", "code": "public SM_RIFT_ANNOUNCE(RVController rift,boolean isMaster){\n  this.rift=rift;\n  this.actionId=isMaster ? 2 : 3;\n}\n"}
{"nl": "Creates a new instance of INSECTDocumentGraph", "code": "public DocumentNGramGraph(){\n  InitGraphs();\n}\n"}
{"nl": "enemy moving attack position", "code": "private void begin_Pos(){\n  if (position.x < posX + this.map_controler.syncCnt)   dir=2;\n else   dir=14;\n  if (position.y < posY)   dir=(dir == 2) ? 6 : 10;\n  sx=this.map_controler.get_Direc_Dis_X(dir);\n  sy=this.map_controler.get_Direc_Dis_Y(dir);\n  status=POSITION;\n}\n"}
{"nl": "Push the item down towards the bottom of the tree (highest reading position)", "code": "private void siftDown(final Item item){\n  while (true) {\n    Item j=null;\n    Item right=getRight(item);\n    if (right != null && right.position.compareTo(item.position) < 0) {\n      Item left=getLeft(item);\n      if (left.position.compareTo(right.position) < 0) {\n        j=left;\n      }\n else {\n        j=right;\n      }\n    }\n else {\n      Item left=getLeft(item);\n      if (left != null && left.position.compareTo(item.position) < 0) {\n        j=left;\n      }\n    }\n    if (j != null) {\n      swap(item,j);\n    }\n else {\n      break;\n    }\n  }\n}\n"}
{"nl": "Perform reward operation", "code": "public void doReward(){\n}\n"}
{"nl": "write int, little endian", "code": "public void writeIntLittleEndian(int a) throws IOException {\n  ensureSize(size + 4);\n  bytes[size++]=((byte)(a));\n  bytes[size++]=((byte)(a >> 8));\n  bytes[size++]=((byte)(a >> 16));\n  bytes[size++]=((byte)(a >> 24));\n}\n"}
{"nl": "Returns when request failed", "code": "public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){\n}\n"}
{"nl": "Forcefully make this space to be primary", "code": "public void forceMoveToPrimary() throws RemoteException {\n  _electManager.forceMoveToPrimary();\n}\n"}
{"nl": "Set the connectivity text when phone is connected", "code": "private void inflateConnectedText(){\n  if (mConnectedText != R.string.text_connected) {\n    connectivityText.setText(mConnectedText);\n  }\n}\n"}
{"nl": "Creates a test CommandTag", "code": "public static CommandTagCacheObject createTestCommandTag(){\n  CommandTagCacheObject commandTag=new CommandTagCacheObject(Long.valueOf(2000),\"Test command tag\",\"Test command tag desc\",\"Float\",DataTagConstants.MODE_OPERATIONAL);\n  commandTag.setEquipmentId(Long.valueOf(100));\n  commandTag.setMaximum(Float.valueOf(5));\n  commandTag.setMinimum(Float.valueOf(1));\n  RbacAuthorizationDetails details=new RbacAuthorizationDetails();\n  details.setRbacClass(\"class\");\n  details.setRbacDevice(\"device\");\n  details.setRbacProperty(\"property\");\n  commandTag.setAuthorizationDetails(details);\n  commandTag.setClientTimeout(10000);\n  try {\n    commandTag.setHardwareAddress(new OPCHardwareAddressImpl(\"test\"));\n  }\n catch (  ConfigurationException e) {\n    e.printStackTrace();\n  }\n  commandTag.setSourceTimeout(10000);\n  commandTag.setSourceRetries(4);\n  commandTag.setExecTimeout(10000);\n  commandTag.setProcessId(Long.valueOf(90));\n  CommandExecutionDetails<Long> commandExecutionDetails=new CommandExecutionDetails<Long>();\n  commandExecutionDetails.setExecutionStartTime(new Timestamp(System.currentTimeMillis() - 1000));\n  commandExecutionDetails.setExecutionEndTime(new Timestamp(System.currentTimeMillis()));\n  commandExecutionDetails.setValue(10L);\n  commandTag.setCommandExecutionDetails(commandExecutionDetails);\n  return commandTag;\n}\n"}
{"nl": "Returns the table name of this TableInfo", "code": "public String tableName(){\n  return tblName;\n}\n"}
{"nl": "Creates a new instance of SenseComparator", "code": "public SenseComparator(){\n}\n"}
{"nl": "Test whether this block has a colour attribute which matches the list of allowed colours", "code": "public static boolean blockColourMatches(IBlockState bs,List<Colour> allowedColours){\n  for (  IProperty prop : (java.util.Set<IProperty>)bs.getProperties().keySet()) {\n    if (prop.getName().equals(\"color\") && prop.getValueClass() == net.minecraft.item.EnumDyeColor.class) {\n      net.minecraft.item.EnumDyeColor current=(net.minecraft.item.EnumDyeColor)bs.getValue(prop);\n      for (      Colour col : allowedColours) {\n        if (current.getName().equalsIgnoreCase(col.name()))         return true;\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "%0 skill (Level %1)", "code": "public static SM_SYSTEM_MESSAGE STR_TITLE_BONUS_SKILL(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1300775,value0,value1);\n}\n"}
{"nl": "Calculate storage requirements for deployment", "code": "public static double calculateViewStorage(int connectionServerCount,int securityServerCount,int vCenterServerCount){\n  final int cs=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.connectionserver.storage.default\")) * connectionServerCount;\n  final int ss=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.securityserver.storage.default\")) * securityServerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.vcenter.storage.default\")) * vCenterServerCount;\n  final int co=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.composer.storage.default\"));\n  final double d=(cs + ss + vc+ co) / 1048576.0;\n  return d;\n}\n"}
{"nl": "[%SkillTarget] is no longer bound", "code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_ME_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200469,skilltarget);\n}\n"}
{"nl": "Schedule new following checker task", "code": "public static final Future<?> newFollowingToTargetCheckTask(final QuestEnv env,Npc npc,float x,float y,float z){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowingNpcCheckTask(env,new CoordinateDestinationChecker(npc,x,y,z)),1000,1000);\n}\n"}
{"nl": "Make a copy of the writable object using serialization to a buffer", "code": "@SuppressWarnings(\"unchecked\") public static <T>T copy(Configuration conf,T src,T dst) throws IOException {\n  CopyInCopyOutBuffer buffer=cloneBuffers.get();\n  buffer.outBuffer.reset();\n  SerializationFactory factory=getFactory(conf);\n  Class<T> cls=(Class<T>)src.getClass();\n  Serializer<T> serializer=factory.getSerializer(cls);\n  serializer.open(buffer.outBuffer);\n  serializer.serialize(src);\n  buffer.moveData();\n  Deserializer<T> deserializer=factory.getDeserializer(cls);\n  deserializer.open(buffer.inBuffer);\n  dst=deserializer.deserialize(dst);\n  return dst;\n}\n"}
{"nl": "Returns true if the given style represents a project theme", "code": "public static boolean isProjectStyle(@NotNull String styleResourceUrl){\n  return !styleResourceUrl.startsWith(ANDROID_STYLE_RESOURCE_PREFIX);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"show webpage taxon=\");\n  String taxon=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  if (viewer != null) {\n    boolean ok=false;\n    int taxId;\n    if (Basic.isInteger(taxon))     taxId=Integer.parseInt(taxon);\n else     taxId=TaxonomyData.getName2IdMap().get(taxon);\n    if (taxId > 0) {\n      try {\n        final URL url=new URL(\"http://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=\" + taxId);\n        Basic.openWebPage(url);\n        ok=true;\n      }\n catch (      Exception e1) {\n        Basic.caught(e1);\n      }\n    }\n    if (!ok)     NotificationsInSwing.showError(viewer.getFrame(),\"Failed to open NCBI website for taxon: \" + taxon);\n  }\n}\n"}
{"nl": "It prepares the file descriptor to read from a certain number of lines", "code": "public final void goToLine(final int lineNumber) throws DataFallbackException {\n  boolean moreLines=true;\n  int readlines=0;\n  openFallbackInputStream();\n  if (lineNumber != 0) {\n    try {\n      while (moreLines && readlines < lineNumber) {\n        if (getInput().readLine() == null)         moreLines=false;\n else         readlines++;\n      }\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n  }\n}\n"}
{"nl": "Creates a data frame from a collection of writables rdd given a schema", "code": "public static DataFrame toDataFrame(Schema schema,JavaRDD<List<Writable>> data){\n  JavaSparkContext sc=new JavaSparkContext(data.context());\n  SQLContext sqlContext=new SQLContext(sc);\n  JavaRDD<Row> rows=data.map(new ToRow(schema));\n  DataFrame dataFrame=sqlContext.createDataFrame(rows,fromSchema(schema));\n  return dataFrame;\n}\n"}
{"nl": "Checks whether the given class name belongs to a system package", "code": "public static boolean isClassInSystemPackage(String className){\n  return className.startsWith(\"android.\") || className.startsWith(\"java.\") || className.startsWith(\"sun.\");\n}\n"}
{"nl": "Hide badge at index", "code": "public void hideBudgeAtIndex(final int index){\n  if (badgeList.get(index).getVisibility() == GONE) {\n    Log.d(TAG,\"Budge at index: \" + index + \" already hidden\");\n  }\n else {\n    BadgeHelper.hideBadge(badgeList.get(index));\n    badgeSaveInstanceHashMap.remove(index);\n  }\n}\n"}
{"nl": "Below method will be called if any thread fails during execution", "code": "public void notifyFailed(Throwable exception) throws CarbonSortKeyAndGroupByException {\n  dataSorterAndWriterExecutorService.shutdownNow();\n  intermediateFileMerger.close();\n  parameters.getObserver().setFailed(true);\n  LOGGER.error(exception);\n  throw new CarbonSortKeyAndGroupByException(exception);\n}\n"}
{"nl": "Set count", "code": "public FaveGetLinksQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Fill an array with the values of a rectangular window function", "code": "private void rectangle(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  for (int i=start; i < stop; i++)   windowFunction[i]=1.0 / (double)size;\n}\n"}
{"nl": "Wraps the given selector to handle \"local\" addresses", "code": "private ProxyBypassListSelector buildLocalBypassSelector(ProtocolDispatchSelector ps){\n  List<UriFilter> localBypassFilter=new ArrayList<UriFilter>();\n  localBypassFilter.add(new IELocalByPassFilter());\n  return new ProxyBypassListSelector(localBypassFilter,ps);\n}\n"}
{"nl": "Constructrs authentification using provided credentials and authorities", "code": "public static Authentication newAuthentication(String user,String password,final boolean authenticated,GrantedAuthority... authorities){\n  return new TestingAuthenticationToken(user,password,ImmutableList.<org.springframework.security.core.GrantedAuthority>builder().add(authorities).build()){\n    private static final long serialVersionUID=1L;\n{\n      setAuthenticated(authenticated);\n    }\n  }\n;\n}\n"}
{"nl": "calculate each vector's distance", "code": "public double dist(Math_Vector other){\n  double distX=this.x - other.x;\n  double distY=this.y - other.y;\n  return Math.sqrt(distX * distX + distY * distY);\n}\n"}
{"nl": "A method to be called when a character data node is about to be modified", "code": "void modifyingCharacterData(NodeImpl node,boolean replace){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GiftsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"gifts.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "save crash to local", "code": "private void saveCrashToLocal(Throwable ex){\n  LogUtil.d(\"saveCrashToLocal\");\n  if (config.isSaveToLocal()) {\n    String localFolderPath=config.getLocalFolderPath();\n    if (null != localFolderPath && localFolderPath.length() > 2) {\n      File file=new File(localFolderPath);\n      file.mkdirs();\n      if (file.exists() && file.isDirectory()) {\n        AECHFileWriter.getInstance(mContext).writeEx2File(ex,localFolderPath);\n      }\n else {\n        AECHFileWriter.getInstance(mContext).writeEx2File(ex);\n      }\n    }\n else {\n      AECHFileWriter.getInstance(mContext).writeEx2File(ex);\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsCheckLinkQuery(VkApiClient client,UserActor actor,int accountId,AdsCheckLinkType linkType,String linkUrl){\n  super(client,\"ads.checkLink\",LinkStatus.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  linkType(linkType);\n  linkUrl(linkUrl);\n}\n"}
{"nl": "Creates a new instance of PathController", "code": "public PathController(JList l,JLabel label,DefaultListModel model,JButton add,JFileChooser chooser,JButton remove,JButton up,JButton down,ListDataListener lstnr){\n  this.l=l;\n  this.label=label;\n  this.model=model;\n  this.add=add;\n  this.remove=remove;\n  this.up=up;\n  this.down=down;\n  this.chooser=chooser;\n  this.lstnr=lstnr;\n  l.setModel(model);\n  if (model != null) {\n    model.addListDataListener(this);\n  }\n  add.setActionCommand(\"add\");\n  remove.setActionCommand(\"remove\");\n  up.setActionCommand(\"up\");\n  down.setActionCommand(\"down\");\n  add.addActionListener(this);\n  remove.addActionListener(this);\n  up.addActionListener(this);\n  down.addActionListener(this);\n  l.addListSelectionListener(this);\n  remove.setEnabled(false);\n  up.setEnabled(false);\n  down.setEnabled(false);\n}\n"}
{"nl": "Player leaved world - set last online on member", "code": "public static final void onPlayerLogout(Player player){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    PlayerAllianceMember member=alliance.getMember(player.getObjectId());\n    member.updateLastOnlineTime();\n    alliance.onEvent(new PlayerDisconnectedEvent(alliance,player));\n  }\n}\n"}
{"nl": "Allows to start this activity", "code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,CreateTaskActivity.class);\n  _context.startActivity(intent);\n}\n"}
{"nl": "This method sends request to author instance", "code": "public JsonObject sendCrxRequest(HttpUriRequest request) throws IOException {\n  String resultJson;\n  try (CloseableHttpResponse response=httpClient.execute(request)){\n    resultJson=EntityUtils.toString(response.getEntity());\n  }\n   JsonObject result;\n  try {\n    result=new JsonParser().parse(resultJson).getAsJsonObject();\n  }\n catch (  JsonSyntaxException e) {\n    throw new JsonSyntaxException(\"Unable to parse as Json: \" + resultJson,e);\n  }\n  if (result.get(\"success\").getAsBoolean()) {\n    return result;\n  }\n  throw new IOException(result.get(\"msg\").getAsString());\n}\n"}
{"nl": "Write a string without compression", "code": "public void writeStringNoCompression(String str) throws IOException {\n  if (str == null) {\n    writeInt(0);\n  }\n else {\n    writeInt(str.length());\n    for (int i=0; i < str.length(); i++)     outs.write((byte)str.charAt(i));\n    position+=str.length();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetStatisticsQuery(VkApiClient client,UserActor actor,int accountId,AdsGetStatisticsIdsType idsType,String ids,AdsGetStatisticsPeriod period,String dateFrom,String dateTo){\n  super(client,\"ads.getStatistics\",Utils.buildParametrizedType(List.class,Stats.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  idsType(idsType);\n  ids(ids);\n  period(period);\n  dateFrom(dateFrom);\n  dateTo(dateTo);\n}\n"}
{"nl": "Find next broke url in round-robin", "code": "LoadReport nextBroker(){\n  List<LoadReport> availableBrokers=zkCache.getAvailableBrokers();\n  if (availableBrokers.isEmpty()) {\n    throw new RestException(Status.SERVICE_UNAVAILABLE,\"No active broker is available\");\n  }\n else {\n    int brokersCount=availableBrokers.size();\n    int nextIdx=Math.abs(counter.getAndIncrement()) % brokersCount;\n    return availableBrokers.get(nextIdx);\n  }\n}\n"}
{"nl": "component shown", "code": "public void componentShown(ComponentEvent ev){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketEditAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int albumId,String title){\n  super(client,\"market.editAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  albumId(albumId);\n  title(title);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallDeleteQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Delete pet", "code": "public static void surrenderPet(Player player,int petId){\n  PetCommonData petCommonData=player.getPetList().getPet(petId);\n  if (player.getPet() != null && player.getPet().getPetId() == petCommonData.getPetId()) {\n    if (petCommonData.getFeedProgress() != null) {\n      petCommonData.setCancelFeed(true);\n    }\n    PetSpawnService.dismissPet(player,false);\n  }\n  player.getPetList().deletePet(petCommonData.getPetId());\n  PacketSendUtility.sendPacket(player,new SM_PET(2,petCommonData));\n}\n"}
{"nl": "updates deletion status details for each load and returns invalidLoadIds", "code": "public List<String> updateDeletionStatus(List<String> loadIds,LoadMetadataDetails[] listOfLoadFolderDetailsArray,List<String> invalidLoadIds){\n  for (  String loadId : loadIds) {\n    boolean loadFound=false;\n    for (    LoadMetadataDetails loadMetadata : listOfLoadFolderDetailsArray) {\n      if (loadId.equalsIgnoreCase(loadMetadata.getLoadName())) {\n        if (CarbonCommonConstants.SEGMENT_COMPACTED.equalsIgnoreCase(loadMetadata.getLoadStatus())) {\n          LOG.error(\"Cannot delete the Segment which is compacted. Segment is \" + loadId);\n          invalidLoadIds.add(loadId);\n          return invalidLoadIds;\n        }\n        if (!CarbonCommonConstants.MARKED_FOR_DELETE.equals(loadMetadata.getLoadStatus())) {\n          loadFound=true;\n          loadMetadata.setLoadStatus(CarbonCommonConstants.MARKED_FOR_DELETE);\n          loadMetadata.setModificationOrdeletionTimesStamp(readCurrentTime());\n          LOG.info(\"Segment ID \" + loadId + \" Marked for Delete\");\n        }\n        break;\n      }\n    }\n    if (!loadFound) {\n      LOG.audit(\"Delete segment by ID is failed. No matching segment id found :\" + loadId);\n      invalidLoadIds.add(loadId);\n      return invalidLoadIds;\n    }\n  }\n  return invalidLoadIds;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show replaceToolbar=\" + !isSelected() + \";\");\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  ChartViewer viewer=(ChartViewer)getViewer();\n  ChartColorManager chartColors=viewer.getChartColorManager();\n  np.matchIgnoreCase(\"set color=\");\n  Color color=np.getColor();\n  String series=null;\n  if (np.peekMatchIgnoreCase(\"series\")) {\n    np.matchIgnoreCase(\"series=\");\n    series=np.getLabelRespectCase();\n  }\n  String className=null;\n  if (np.peekMatchIgnoreCase(\"class\")) {\n    np.matchIgnoreCase(\"class=\");\n    className=np.getLabelRespectCase();\n  }\n  np.matchIgnoreCase(\";\");\n  if (series != null)   chartColors.setSampleColor(series,color);\n  if (className != null)   chartColors.setClassColor(className,color);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetAdsPostsReachQuery(VkApiClient client,UserActor actor,int accountId,String adsIds){\n  super(client,\"ads.getAdsPostsReach\",Utils.buildParametrizedType(List.class,PostStats.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  adsIds(adsIds);\n}\n"}
{"nl": "Set the text color of the buttons", "code": "public Builder buttonTextColor(int buttonTextColor){\n  this.buttonTextColor=buttonTextColor;\n  return this;\n}\n"}
{"nl": "Return a new instance of WidgetDecorator given a component and its ConstraintWidget", "code": "private static WidgetDecorator createDecorator(NlComponent component,ConstraintWidget widget){\n  WidgetDecorator decorator=null;\n  if (component.getTagName().equalsIgnoreCase(SdkConstants.TEXT_VIEW)) {\n    decorator=new TextWidget(widget,ConstraintUtilities.getResolvedText(component));\n  }\n else   if (component.getTagName().equalsIgnoreCase(SdkConstants.BUTTON)) {\n    decorator=new ButtonWidget(widget,ConstraintUtilities.getResolvedText(component));\n  }\n else   if (component.getTagName().equalsIgnoreCase(SdkConstants.RADIO_BUTTON)) {\n    decorator=new RadiobuttonWidget(widget,ConstraintUtilities.getResolvedText(component));\n  }\n else   if (component.getTagName().equalsIgnoreCase(SdkConstants.CHECK_BOX)) {\n    decorator=new CheckboxWidget(widget,ConstraintUtilities.getResolvedText(component));\n  }\n else   if (component.getTagName().equalsIgnoreCase(SdkConstants.SWITCH)) {\n    decorator=new SwitchWidget(widget,ConstraintUtilities.getResolvedText(component));\n  }\n else   if (component.getTagName().equalsIgnoreCase(SdkConstants.IMAGE_VIEW)) {\n    decorator=new ImageViewWidget(widget);\n  }\n else   if (component.getTagName().equalsIgnoreCase(SdkConstants.WEB_VIEW)) {\n    decorator=new WebViewWidget(widget);\n  }\n else   if (component.getTagName().equalsIgnoreCase(SdkConstants.EDIT_TEXT)) {\n    decorator=new TextWidget(widget,ConstraintUtilities.getResolvedText(component));\n  }\n  if (decorator == null) {\n    decorator=new WidgetDecorator(widget);\n  }\n  return decorator;\n}\n"}
{"nl": "%0%'s hidden enchantment level has increased by 1 level", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_STIGMA_ENCHANT_HIDDEN_SKILL(DescriptionId descriptionId){\n  return new SM_SYSTEM_MESSAGE(1402944,descriptionId);\n}\n"}
{"nl": "Locates a particular interface within the type's object hierarchy", "code": "private Type<?> findInterface(final Class<?> theInterface){\n  Type<?> theInterfaceType=null;\n  LinkedList<Type<?>> types=new LinkedList<Type<?>>();\n  types.add(this);\n  while (theInterfaceType == null && !types.isEmpty()) {\n    Type<?> currentType=types.removeFirst();\n    if (theInterface.equals(currentType.getRawType())) {\n      theInterfaceType=currentType;\n    }\n else     if (!currentType.equals(TypeFactory.TYPE_OF_OBJECT)) {\n      types.addAll(Arrays.asList(currentType.getInterfaces()));\n      types.add(currentType.getSuperType());\n    }\n  }\n  return theInterfaceType;\n}\n"}
{"nl": "Npc starts attacking from idle state", "code": "public static final void emoteStartAttacking(Npc owner){\n  Creature target=(Creature)owner.getTarget();\n  owner.unsetState(CreatureState.WALKING);\n  if (!owner.isInState(CreatureState.WEAPON_EQUIPPED)) {\n    owner.setState(CreatureState.WEAPON_EQUIPPED);\n    PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,target.getObjectId()));\n    PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.ATTACKMODE,0,target.getObjectId()));\n  }\n}\n"}
{"nl": "Creates a meta storable fence which is a logical 'not' of the given fence", "code": "@NonNull public static StorableFence not(@NonNull StorableFence fence){\n  StorableFence metaFence=new StorableFence(Type.META);\n  metaFence.mNotFence=fence;\n  return metaFence;\n}\n"}
{"nl": "Returns the most dominate emotion and the score for that emotion", "code": "@NotNull public static String listAllEmotions(@NotNull Emotion emotion){\n  return emotion.scores.scores().entrySet().stream().map(null).collect(Collectors.joining());\n}\n"}
{"nl": "Check whether supplied time in ms is expired", "code": "public static final boolean isExpired(long time){\n  return time < System.currentTimeMillis();\n}\n"}
{"nl": "The method indicates the end of list of children", "code": "@Override public boolean endContentModel(int[] currentState){\n  boolean isFinal=false;\n  int state=currentState[0];\n  return state >= 0;\n}\n"}
{"nl": "Builds the PathOptions new instance", "code": "public PathOptions build(){\n  PathOptions options=new PathOptions();\n  options.stroke=this.stroke;\n  options.color=this.color;\n  options.weight=this.weight;\n  options.fill=this.fill;\n  options.fillColor=this.fillColor;\n  options.fillOpacity=this.fillOpacity;\n  options.fillRule=this.fillRule;\n  options.dashArray=this.dashArray;\n  options.lineCap=this.lineCap;\n  options.lineJoin=this.lineJoin;\n  options.clickable=this.clickable;\n  options.pointerEvents=this.pointerEvents;\n  options.className=this.className;\n  return options;\n}\n"}
{"nl": "Gets the XInclude processing mode for this parser", "code": "@Override public boolean isXIncludeAware(){\n  try {\n    return xmlReader.getFeature(XINCLUDE_FEATURE);\n  }\n catch (  SAXException exc) {\n    return false;\n  }\n}\n"}
{"nl": "Start timing", "code": "public void start(){\n  this.startTime=this.world.getTotalWorldTime();\n  this.stopTime=0;\n}\n"}
{"nl": "The method validates the space URL parameter names", "code": "private static void validateURL(SpaceURL spaceURL) throws SpaceURLValidationException {\n  Enumeration names=spaceURL.propertyNames();\n  while (names.hasMoreElements()) {\n    String property=names.nextElement().toString();\n    if (_logger.isLoggable(Level.FINE))     _logger.fine(\"Validating Space URL property: \" + property + \" = \"+ spaceURL.getProperty(property));\n    if (!urlElements.contains(property.toLowerCase()))     throw new SpaceURLValidationException(\"Invalid space url property - '\" + property + \"'\");\n  }\n}\n"}
{"nl": "create a SPTK Pitch reader writer with external contour", "code": "public SPTKPitchReaderWriter(double[] contour,PitchFileHeader header){\n  this.contour=contour;\n  this.header=header;\n}\n"}
{"nl": "Creates a packet builder for sending a packet", "code": "public PacketBuilder send(String id){\n  if (!specs.containsKey(id))   throw new IllegalArgumentException(\"Invalid PacketSpec name \" + id);\n  return new PacketBuilder(this,specs.get(id));\n}\n"}
{"nl": "Describe the attribute evaluator", "code": "public String toString(){\n  StringBuffer text=new StringBuffer();\n  if (m_InfoGains == null) {\n    text.append(\"Information Gain attribute evaluator has not been built\");\n  }\n else {\n    text.append(\"\\tInformation Gain Ranking Filter\");\n    if (!m_missing_merge) {\n      text.append(\"\\n\\tMissing values treated as seperate\");\n    }\n    if (m_Binarize) {\n      text.append(\"\\n\\tNumeric attributes are just binarized\");\n    }\n  }\n  text.append(\"\\n\");\n  return text.toString();\n}\n"}
{"nl": "Delete an aircraft from the authenticated pilots' profile", "code": "public static void deleteAircraft(AirMapAircraft aircraft,@Nullable AirMapCallback<Void> callback){\n  PilotService.deleteAircraft(aircraft,callback);\n}\n"}
{"nl": "Returns when request failed", "code": "public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){\n}\n"}
{"nl": "used when deleting letter", "code": "public SM_MAIL_SERVICE(int[] letterIds){\n  super(null);\n  this.serviceId=6;\n  this.letterIds=letterIds;\n}\n"}
{"nl": "recursively move all reads that land on taxa with too little support to higher level nodes", "code": "private int computeOrphan2AncestorMappingRec(Node v,Map<Integer,Integer> orphan2AncestorMapping,Set<Integer> orphans) throws CanceledException {\n  progressListener.incrementProgress();\n  int taxId=(Integer)v.getInfo();\n  if (taxId < 0)   return 0;\n  int below=0;\n  Set<Integer> orphansBelow=new HashSet<>();\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    Node w=e.getTarget();\n    below+=computeOrphan2AncestorMappingRec(w,orphan2AncestorMapping,orphansBelow);\n  }\n  Integer count=taxId2count.get(taxId);\n  if (count == null)   count=0;\n  if (below + count >= minSupport) {\n    for (    Integer id : orphansBelow) {\n      orphan2AncestorMapping.put(id,taxId);\n    }\n  }\n else {\n    if (count > 0) {\n      orphansBelow.add(taxId);\n    }\n    orphans.addAll(orphansBelow);\n  }\n  return below + count;\n}\n"}
{"nl": "function method", "code": "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setHasOptionsMenu(true);\n}\n"}
{"nl": "To interpolate Zero values with respect to NonZero values", "code": "public static double[] interpolateNonZeroValues(double[] contour){\n  for (int i=0; i < contour.length; i++) {\n    if (contour[i] == 0) {\n      int index=findNextIndexNonZero(contour,i);\n      if (index == -1) {\n        for (int j=(i == 0 ? 1 : i); j < contour.length; j++) {\n          contour[j]=contour[j - 1];\n        }\n        break;\n      }\n else {\n        for (int j=i; j < index; j++) {\n          if (i == 0) {\n            contour[j]=contour[index];\n          }\n else {\n            contour[j]=contour[j - 1] + ((contour[index] - contour[i - 1]) / (index - i));\n          }\n        }\n        i=index - 1;\n      }\n    }\n  }\n  return contour;\n}\n"}
{"nl": "Check if a ServiceUnit is already loaded by this ResourceUnit", "code": "public boolean isServiceUnitLoaded(String suName){\n  return this.loadedBundles.contains(suName);\n}\n"}
{"nl": "error log", "code": "public static void e(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.e(tag,buildMsg(msg));\n  }\n}\n"}
{"nl": "Does a HTTP POST with an empty body", "code": "public Response doPost(String url){\n  return doPost(url,null);\n}\n"}
{"nl": "compute correlation distance between two classes", "code": "private static double computeCorrelationDistanceBetweenClasses(String classA,String classB,Table<String,String,Double> seriesAndClass2Value){\n  final Set<String> series=seriesAndClass2Value.rowKeySet();\n  final ArrayList<Double> xValues=new ArrayList<>(series.size());\n  final ArrayList<Double> yValues=new ArrayList<>(series.size());\n  for (  String seriesName : series) {\n    xValues.add(seriesAndClass2Value.get(seriesName,classA));\n    yValues.add(seriesAndClass2Value.get(seriesName,classB));\n  }\n  return 1 - Correlation.computePersonsCorrelationCoefficent(series.size(),xValues,yValues);\n}\n"}
{"nl": "Idle state tracking, and messaging with the task manager when significant state changes occur", "code": "private void initIdleStateTracking(){\n  mIdleTracker=new IdlenessTracker();\n  mIdleTracker.startTracking();\n}\n"}
{"nl": "Set the text color of the buttons when clicked", "code": "public Builder buttonPressedTextColor(int buttonPressedTextColor){\n  this.buttonPressedTextColor=buttonPressedTextColor;\n  return this;\n}\n"}
{"nl": "back position", "code": "private void back_Position(){\n  sncX=(int)this.map_controler.get_Direc_Dis_X(this.map_controler.dir);\n  velocity.y=-80;\n  position.x+=sncX;\n  if (Math.abs(position.y - posY) <= 4) {\n    GetPath(a_Kind + 10);\n    status=ATTACK;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallRestoreQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Returns the greatest integer less than or equal to the double argument", "code": "public static int floor_double(double value){\n  int i=(int)value;\n  return value < (double)i ? i - 1 : i;\n}\n"}
{"nl": "A resource has been deleted", "code": "public void resourceDeleted(ISVNRemoteResource resource){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceDeleted(resource);\n  }\n}\n"}
{"nl": "Initialize geodata based on configuration, load necessary structures", "code": "public void initializeGeo(){\nswitch (getConfiguredGeoType()) {\ncase GEO_MESHES:\n    geoData=new RealGeoData();\n  break;\ncase NO_GEO:\ngeoData=new DummyGeoData();\nbreak;\n}\nlog.info(\"Configured Geo type: \" + getConfiguredGeoType());\ngeoData.loadGeoMaps();\n}\n"}
{"nl": "Creates a new instance of INSECTMemoryDB", "code": "public INSECTMemoryDB(){\n  ObjectMap=new HashMap();\n}\n"}
{"nl": "We could have made some extensive xml format for those searches, but i'm lazy :p", "code": "public List<LogFile> searchRemoteLogs(String search){\n  List<LogFile> logs=new FastList<LogFile>();\n  if (!isConnected()) {\n    PacketSamurai.getUserInterface().log(\"You have to be connected to use the Remote Log Repository\");\n    return null;\n  }\n  PostMethod post=new PostMethod(_repoLocation + \"/rpc.php\");\n  post.addParameter(\"user\",getUserName());\n  post.addParameter(\"pass\",getPassword());\n  CompoundXmlRequest req=new CompoundXmlRequest();\n  Request listReq=req.createRequest(\"list\");\n  listReq.addPart(new RequestPart(\"matchQuery\",search));\n  post.addParameter(\"req\",req.toXml());\n  try {\n    int response=_httpClient.executeMethod(post);\n    if (response != HttpStatus.SC_OK) {\n    }\n    post.getResponseHeaders();\n    post.getResponseBodyAsStream();\n  }\n catch (  HttpException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\n  return logs;\n}\n"}
{"nl": "Creates HttpPost request for replication", "code": "public HttpPost createReplicateRequest(String path){\n  return new HttpPost(String.format(REQUEST_STRING_WITH_PATH,authorIp,path,Commands.REPLICATE.getCommand()));\n}\n"}
{"nl": "gc2gc: generalized cepstral transformation", "code": "public static void gc2gc(double c1[],int m1,double g1,double c2[],int m2,double g2){\n  double[] gc2gc_buff=Arrays.copyOf(c1,m1 + 1);\n  c2[0]=gc2gc_buff[0];\n  for (int i=1; i <= m2; i++) {\n    double ss1=0.0;\n    double ss2=0.0;\n    int min=m1 < i ? m1 : i - 1;\n    for (int k=1; k <= min; k++) {\n      int mk=i - k;\n      double cc=gc2gc_buff[k] * c2[mk];\n      ss2+=k * cc;\n      ss1+=mk * cc;\n    }\n    if (i <= m1)     c2[i]=gc2gc_buff[i] + (g2 * ss2 - g1 * ss1) / i;\n else     c2[i]=(g2 * ss2 - g1 * ss1) / i;\n  }\n}\n"}
{"nl": "Test that \"add service\" quick intention does show up and works", "code": "public void testAddService() throws Exception {\n  final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyService.java\",\"src/com/example/DummyService.java\");\n  myFixture.configureFromExistingVirtualFile(file);\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,\"Add service to manifest\");\n  assertNotNull(action);\n  action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());\n  myFixture.checkResultByFile(\"AndroidManifest.xml\",\"intentions/DummyService_manifest_after.xml\",true);\n}\n"}
{"nl": "static factory method", "code": "public static SuperPrefs newInstance(Context context){\n  return new SuperPrefs(context);\n}\n"}
{"nl": "add the service to pigeon and publish the service to registry", "code": "public static <T>void addService(String url,Class<T> serviceInterface,T service,int port) throws RpcException {\n  ProviderConfig<T> providerConfig=new ProviderConfig<T>(serviceInterface,service);\n  providerConfig.setUrl(url);\n  providerConfig.getServerConfig().setPort(port);\n  addService(providerConfig);\n}\n"}
{"nl": "Generate token from login request and user role", "code": "private String generateAccessToken(LoginReqDto reqDto,String role){\n  PlatformUser platformUser=new PlatformUser(reqDto.getUserId(),StringConstant.EMPTY_STRING,new ArrayList<GrantedAuthority>());\n  platformUser.setDeviceId(reqDto.getDeviceId());\n  platformUser.setPlatform(reqDto.getPlatform());\n  platformUser.setRole(role);\n  platformUser.setLoginTime(new Date().getTime());\n  String token=jwtService.generateToken(platformUser);\n  if (StringUtils.isEmpty(token))   throw new RuntimeException(ERR_FAIL_TO_CREATE_TOKEN);\n  return token;\n}\n"}
{"nl": "Call if have some problem with getting content", "code": "@Override public void onError(String error){\n}\n"}
{"nl": "****************************** GATHERING QUERIES", "code": "public GatheringCursor queryGatheringItem(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_GATHERING;\n  qh.Selection=\"g.\" + S.COLUMN_GATHERING_ITEM_ID + \" = ? \";\n  qh.SelectionArgs=new String[]{\"\" + id};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=\"g.\" + S.COLUMN_GATHERING_RANK + \" DESC, \"+ \"l.\"+ S.COLUMN_LOCATIONS_MAP+ \" ASC\";\n  qh.Limit=null;\n  return new GatheringCursor(wrapJoinHelper(builderGathering(),qh));\n}\n"}
{"nl": "Called on Aggro when NPC is ready to attack", "code": "public static void onAttackBegin(NpcAI2 npcAI,Creature creature){\n  Npc npc=npcAI.getOwner();\n  if (DataManager.NPC_SHOUT_DATA.hasAnyShout(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.ATTACK_BEGIN)) {\n    List<NpcShout> shouts=DataManager.NPC_SHOUT_DATA.getNpcShouts(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.ATTACK_BEGIN,null,0);\n    NpcShoutsService.getInstance().shout(npc,creature,shouts,0,false);\n    shouts.clear();\n    return;\n  }\n}\n"}
{"nl": "For transferring item from inventory to house registry", "code": "public static HouseObject<?> createNew(House house,ItemTemplate itemTemplate){\n  if (itemTemplate.getActions() == null) {\n    throw new IncompleteArgumentException(\"template actions null\");\n  }\n  SummonHouseObjectAction action=itemTemplate.getActions().getHouseObjectAction();\n  if (action == null) {\n    throw new IncompleteArgumentException(\"template actions miss SummonHouseObjectAction\");\n  }\n  int objectTemplateId=action.getTemplateId();\n  HouseObject<?> obj=createNew(house,IDFactory.getInstance().nextId(),objectTemplateId);\n  if (obj.getObjectTemplate().getUseDays() > 0) {\n    int expireEnd=(int)(DateTime.now().plusDays(obj.getObjectTemplate().getUseDays()).getMillis() / 1000);\n    obj.setExpireTime(expireEnd);\n  }\n  return obj;\n}\n"}
{"nl": "Java Compatibility", "code": "public Iterable<T> asIterable(){\n  return internalArray;\n}\n"}
{"nl": "In case of creating view from code", "code": "public PresenterLayout(Context context){\n  super(context);\n  initializedDefaultsFromXml();\n  initLayout();\n  if (mInflateDefaultViews) {\n    inflateDefaultOverlappingViews();\n  }\n}\n"}
{"nl": "Show an error indicating a drawable that exceeds project specifications", "code": "private void showDrawableError(){\n  Dialog dialog=new Dialog(\"Error...\",getSkin());\n  Label label=new Label(\"Error while adding new drawables.\\nEnsure that image dimensions are\\nless than maximums specified in project.\\nRolling back changes...\",getSkin());\n  label.setAlignment(Align.center);\n  dialog.text(label);\n  dialog.button(\"OK\");\n  dialog.show(getStage());\n}\n"}
{"nl": "ask view to allow user input", "code": "public void unlockUserInput(){\n}\n"}
{"nl": "Constructs new instance of <tt>CM_REVIVE </tt> packet", "code": "public CM_REVIVE(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Verifies that all elements in an array initializer expression are within the allowed values", "code": "private static InspectionResult checkArrayInitializerExpression(@NotNull PsiArrayInitializerExpression e,@NotNull AllowedValues allowedValues,@NotNull PsiElement scope,@NotNull PsiManager manager,@Nullable Set<PsiExpression> visited){\n  for (  PsiExpression arrayValueExpression : e.getInitializers()) {\n    InspectionResult result=isGoodExpression(arrayValueExpression,allowedValues,scope,manager,visited).useErrorNode(arrayValueExpression);\n    if (result.isInvalid()) {\n      return result;\n    }\n  }\n  return InspectionResult.valid();\n}\n"}
{"nl": "See if the root is using a wildcard", "code": "boolean hasWildcard(){\n  boolean wildcarded=false;\n  for (int i=0; i < websterRoot.length; i++) {\n    String root=websterRoot[i];\n    if ((root.indexOf('*')) != -1) {\n      wildcarded=true;\n      break;\n    }\n  }\n  return (wildcarded);\n}\n"}
{"nl": "init The ClientAccessInformation Using User's IpAddress and Access or terminate Time and Access Type", "code": "public ClientAccessInformation(String ipAddress,String accessAndTerminateTime,String type){\n  super();\n  this.ipAddress=ipAddress;\n  AccessAndTerminateTime=accessAndTerminateTime;\n  this.type=type;\n}\n"}
{"nl": "insert to the table according the Map(table) declaration", "code": "final public static int insertTable(V sets,Class<? extends Bean> t){\n  Table mapping=(Table)t.getAnnotation(Table.class);\n  if (mapping == null) {\n    if (log.isErrorEnabled())     log.error(\"mapping missed in [\" + t + \"] declaretion\");\n    return -1;\n  }\n  if (!X.isEmpty(mapping.name())) {\n    return insertTable(mapping.name(),sets);\n  }\n  return -1;\n}\n"}
{"nl": "Determine whether a char is an alphanumeric: 0-9, a-z or A-Z", "code": "private static boolean isAlphanum(char p_char){\n  return (p_char <= 'z' && (fgLookupTable[p_char] & MASK_ALPHA_NUMERIC) != 0);\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return locked;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public StatusSetQuery(VkApiClient client,UserActor actor){\n  super(client,\"status.set\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Load and parse the R class such that resource references in the layout rendering can refer to local resources properly", "code": "public void loadAndParseRClassSilently(){\n  final String rClassName=getRClassName(myModule);\n  try {\n    if (rClassName == null) {\n      LOG.info(String.format(\"loadAndParseRClass: failed to find manifest package for project %1$s\",myModule.getProject().getName()));\n      return;\n    }\n    myLogger.setResourceClass(rClassName);\n    loadAndParseRClass(rClassName);\n  }\n catch (  ClassNotFoundException e) {\n    myLogger.setMissingResourceClass(true);\n  }\ncatch (  NoClassDefFoundError e) {\n    myLogger.setMissingResourceClass(true);\n  }\ncatch (  InconvertibleClassError e) {\n    assert rClassName != null;\n    myLogger.addIncorrectFormatClass(rClassName,e);\n  }\n}\n"}
{"nl": "Special access key for private photos", "code": "public PhotosCopyQuery accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedGetRecommendedQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getRecommended\",GetRecommendedResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Southern Shield Generator", "code": "private void startWaveSouthernShieldGenerator2(){\n  sp(284847,337.93338f,257.88702f,292.43845f,(byte)60,1000,\"SouthernShieldGenerator1\");\n  sp(284848,338.05304f,254.6424f,292.3325f,(byte)60,1000,\"SouthernShieldGenerator2\");\n  sp(284849,338.13315f,251.34738f,292.48932f,(byte)59,1000,\"SouthernShieldGenerator3\");\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void i(String tag,String msg){\n  if (isDebug) {\n    Log.i(tag,msg);\n  }\n}\n"}
{"nl": "Block on the queue until an entry is been cleaned by the GC", "code": "@Override public void run(){\n  while (!isInterrupted()) {\n    try {\n      Reference ref=_queue.remove();\n      _entryInfos.remove(ref);\n    }\n catch (    InterruptedException e) {\n      interrupt();\n      break;\n    }\n  }\n}\n"}
{"nl": "Heal a pokemon, using various fallbacks for potions", "code": "public UseItemPotionResponse.Result heal() throws LoginFailedException, RemoteServerException {\n  if (!isInjured())   return UseItemPotionResponse.Result.ERROR_CANNOT_USE;\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_POTION);\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_SUPER_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_SUPER_POTION);\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_HYPER_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_HYPER_POTION);\n  if (api.getInventories().getItemBag().getItem(ItemId.ITEM_MAX_POTION).getCount() > 0)   return usePotion(ItemId.ITEM_MAX_POTION);\n  return UseItemPotionResponse.Result.ERROR_CANNOT_USE;\n}\n"}
{"nl": "Set fields", "code": "public GroupsGetBannedQuery fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Action to open a SVN Annotate View", "code": "public void execute(IAction action) throws InvocationTargetException, InterruptedException {\n  if (action != null && !action.isEnabled()) {\n    action.setEnabled(true);\n  }\n else {\n    final ISVNRemoteFile svnResource=getSingleSelectedSVNRemoteFile();\n    execute(svnResource);\n  }\n}\n"}
{"nl": "Call this method to initialize the library", "code": "public static FingerLockManager initialize(@NonNull AppCompatActivity activity,@NonNull String keyName){\n  if (activity == null) {\n    return null;\n  }\n  FingerLock fragment=(FingerLock)activity.getSupportFragmentManager().findFragmentByTag(TAG_FINGER_LOCK_FRAGMENT);\n  if (fragment == null) {\n    fragment=createInstance(keyName);\n    activity.getSupportFragmentManager().beginTransaction().add(fragment,TAG_FINGER_LOCK_FRAGMENT).commitNow();\n  }\n  return fragment;\n}\n"}
{"nl": "call this when tab containing list is activated", "code": "public void activate(){\n  getViewer().getSearchManager().setSearcher(getSearcher());\n  getViewer().getSearchManager().getFindDialogAsToolBar().clearMessage();\n  if (!inSelection) {\n    inSelection=true;\n    try {\n      chartSelection.clearSelectionAttributes();\n      chartSelection.setSelectedAttribute(getSelectedLabels(),true);\n      this.repaint();\n    }\n  finally {\n      inSelection=false;\n    }\n  }\n}\n"}
{"nl": "Tests the isPublic() method", "code": "public void testIsPublic(){\n  VirtualFile myFile=myFixture.copyFileToProject(\"themeEditor/styles_1.xml\",\"res/values/styles.xml\");\n  Configuration configuration=myFacet.getConfigurationManager().getConfiguration(myFile);\n  ThemeResolver themeResolver=new ThemeResolver(configuration);\n  ConfiguredThemeEditorStyle projectTheme=themeResolver.getTheme(\"AppTheme\");\n  assertNotNull(projectTheme);\n  assertTrue(projectTheme.isPublic());\n  ConfiguredThemeEditorStyle frameworkPublicTheme=themeResolver.getTheme(\"android:Theme.Material\");\n  assertNotNull(frameworkPublicTheme);\n  assertTrue(frameworkPublicTheme.isPublic());\n  ConfiguredThemeEditorStyle frameworkPrivateTheme=themeResolver.getTheme(\"android:Theme.Material.Dialog.NoFrame\");\n  assertNotNull(frameworkPrivateTheme);\n  assertFalse(frameworkPrivateTheme.isPublic());\n}\n"}
{"nl": "Creates the default CMU Lexicon which is a binary lexicon", "code": "public CMULexicon(){\n  this(\"cmulex\");\n}\n"}
{"nl": "Identifier of an album", "code": "public MarketGetQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n"}
{"nl": "Shows metrics for this audio player", "code": "public void showMetrics(){\n}\n"}
{"nl": "ARMOR QUERIES", "code": "public ArmorCursor queryArmorSearch(String search){\n  return mHelper.queryArmorSearch(search);\n}\n"}
{"nl": "entry function for encoding computing checksum in every row,*check_data[p]", "code": "private void STAR_encoding_row(){\n  int i, j;\n  for (i=0; i < stripe_unit_size; i++) {\n    for (j=0; j < data_disk_nbr; j++) {\n      check_data[data_disk_nbr][i]^=check_data[j][i];\n    }\n  }\n}\n"}
{"nl": "show a toast", "code": "public static void show(Context context,String text){\n  if (mToast == null) {\n    mToast=Toast.makeText(context,text,Toast.LENGTH_SHORT);\n  }\n  mToast.setDuration(Toast.LENGTH_SHORT);\n  mToast.setText(text);\n  mToast.show();\n}\n"}
{"nl": "This method will fill the carbon measures", "code": "private void populateCarbonMeasures(String[] measures){\n  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(meta.getDatabaseName() + CarbonCommonConstants.UNDERSCORE + meta.getTableName());\n  meta.carbonMeasures=new CarbonMeasure[measures.length];\n  msrDataType=new DataType[measures.length];\n  for (int i=0; i < measures.length; i++) {\n    CarbonMeasure carbonMeasure=carbonTable.getMeasureByName(meta.getTableName(),measures[i]);\n    msrDataType[i]=carbonMeasure.getDataType();\n    if (DataType.DECIMAL == carbonMeasure.getDataType()) {\n      meta.carbonMeasures[i]=carbonMeasure;\n    }\n  }\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.contains(\"Naive Bayesian rRNA Classifier\");\n}\n"}
{"nl": "Creates a new executor proxy of type T", "code": "public T proxy(){\n  executorFactoryBean.afterPropertiesSet();\n  return (T)executorFactoryBean.getObject();\n}\n"}
{"nl": "unable server shell text editor", "code": "private void unableServerTextEdit(){\n  serverTextEdit.setEditable(false);\n  serverTextEdit.setVisible(false);\n  serverTextEdit.setPromptText(\"\");\n}\n"}
{"nl": "Create a OPCHardwareAddress object", "code": "public OPCHardwareAddressImpl(final String pItemName,final int pCommandPulseLength) throws ConfigurationException {\n  setOPCItemName(pItemName);\n  setCommandPulseLength(pCommandPulseLength);\n  setCurrentOPCItemName(getOPCItemName());\n}\n"}
{"nl": "Accessor for mouse down check", "code": "public boolean isMouseDown(){\n  return mMouseDown;\n}\n"}
{"nl": "Set owner id", "code": "protected VideoGetAlbumsByVideoQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "Add multiple Integer columns with no restrictions on the min/max allowable values", "code": "public Builder addColumnsInteger(String... names){\n  for (  String s : names)   addColumnInteger(s);\n  return this;\n}\n"}
{"nl": "The two addresses are considered equals if they're of the same type and all their non-static attributes are equal", "code": "@Override public final boolean equals(final Object copy){\n  boolean result=copy != null && copy instanceof HardwareAddress && this.getClass().equals(copy.getClass());\n  if (result) {\n    Field[] fields=this.getClass().getDeclaredFields();\n    for (    Field field : fields) {\n      if (!Modifier.isFinal(field.getModifiers()) && !Modifier.isStatic(field.getModifiers()) && !Modifier.isTransient(field.getModifiers())) {\n        try {\n          if ((field.get(this) != null && field.get(copy) == null) || (field.get(this) == null && field.get(copy) != null)) {\n            result=false;\n          }\n else           if (field.get(this) != null && field.get(copy) != null) {\n            if (field.getType().isArray()) {\n              if (Object[].class.isAssignableFrom(field.getType())) {\n                result=Arrays.equals((Object[])field.get(this),(Object[])field.get(copy));\n              }\n else {\n                result=ArrayUtils.isEquals(field.get(this),field.get(copy));\n              }\n            }\n else {\n              result=field.get(this).equals(field.get(copy));\n            }\n          }\n        }\n catch (        Exception e) {\n          result=false;\n        }\n      }\n      if (!result)       break;\n    }\n  }\n  return result;\n}\n"}
{"nl": "recursively compute the taxon-id to species-id map", "code": "private void computeTax2SpeciesMapRec(final Node v,int speciesId,final IntIntMap taxId2SpeciesId,final ProgressListener progress) throws CanceledException {\n  final int taxId=(Integer)v.getInfo();\n  if (speciesId == 0) {\n    if (name2IdMap.getRank(taxId) == TaxonomicLevels.getSpeciesId()) {\n      speciesId=taxId;\n      taxId2SpeciesId.put(taxId,speciesId);\n    }\n  }\n else   taxId2SpeciesId.put(taxId,speciesId);\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e))   computeTax2SpeciesMapRec(e.getTarget(),speciesId,taxId2SpeciesId,progress);\n  progress.incrementProgress();\n}\n"}
{"nl": "test is empty bean", "code": "@Override public final boolean isEmpty(){\n  return getAll().isEmpty();\n}\n"}
{"nl": "Check to see if this set is in an immutable form", "code": "public boolean isImmutable(){\n  return true;\n}\n"}
{"nl": "Send an before text change event to child listeners", "code": "private void sendBeforeTextChanged(CharSequence s,int start,int count,int after){\n  if (mListeners != null) {\n    for (int i=0; i < mListeners.size(); i++) {\n      mListeners.get(i).beforeTextChanged(s,start,count,after);\n    }\n  }\n}\n"}
{"nl": "Paging the config push logs", "code": "@RequestMapping(value=\"/push_logs\",method=RequestMethod.GET) public JsonResponse pagingPushLogs(@RequestParam(\"appId\") Long appId,@RequestParam(value=\"pageNo\",defaultValue=\"1\") Integer pageNo,@RequestParam(value=\"pageSize\",defaultValue=\"10\") Integer pageSize){\n  Response<Page<PushLog>> pageResp=pushLogService.pagingConfigPushLog(appId,pageNo,pageSize);\n  if (!pageResp.isSuccess()) {\n    Logs.error(\"failed to paging push logs(appId={}, pageNo={}, pageSize={}), cause: {}\",appId,pageNo,pageSize,pageResp.getErr());\n    return JsonResponse.notOk(pageResp.getErr());\n  }\n  Page<PushLogDto> logDtoPage=render2PushLogDto(pageResp.getData());\n  return JsonResponse.ok(logDtoPage);\n}\n"}
{"nl": "Execute an HTTP request", "code": "public static HttpResponse execute(HttpMethod method,String targetUrl,String body) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {\n  return execute(method,targetUrl,body,null);\n}\n"}
{"nl": "Returns the hex dump of the given byte array as 16 bytes per line", "code": "public static String hexDump(byte[] b){\n  if (b == null)   return \"\";\n  StringBuffer buf=new StringBuffer();\n  int size=b.length;\n  for (int i=0; i < size; i++) {\n    if ((i + 1) % 16 == 0) {\n      buf.append(zeropad(Integer.toHexString(byteToUInt(b[i])).toUpperCase(),2));\n      buf.append(\"\\n\");\n    }\n else {\n      buf.append(zeropad(Integer.toHexString(byteToUInt(b[i])).toUpperCase(),2));\n      buf.append(\" \");\n    }\n  }\n  return buf.toString();\n}\n"}
{"nl": "add key-value pair to map, both key and value need not null or empty", "code": "public static boolean putMapNotEmptyKeyAndValue(Map<String,String> map,String key,String value){\n  if (map == null || StringUtil.isEmpty(key) || StringUtil.isEmpty(value)) {\n    return false;\n  }\n  map.put(key,value);\n  return true;\n}\n"}
{"nl": "Serialize an Object to a ByteArray", "code": "public static byte[] writeObject(Object object) throws IOException {\n  ByteArrayOutputStream buffer=new ByteArrayOutputStream();\n  ObjectOutputStream out=new ObjectOutputStream(buffer);\n  out.writeObject(object);\n  out.close();\n  return buffer.toByteArray();\n}\n"}
{"nl": "Creates InputStream using the same data that is written into this stream with no copying in memory", "code": "public FastByteArrayInputStream convertToInputStream(){\n  return new FastByteArrayInputStream(buf,count);\n}\n"}
{"nl": "Generate one pitch period from Fourier magnitudes", "code": "public static double[] genPulseFromFourierMag(double[] mag,double f0){\n  int numHarm=mag.length;\n  int currentF0=(int)Math.round(f0);\n  int T;\n  if (currentF0 < 512)   T=512;\n else   T=1024;\n  int T2=2 * T;\n  double[] pulse=new double[T];\n  double[] real=new double[T2];\n  double[] imag=new double[T2];\n  real[0]=real[T]=0.0;\n  for (int i=1; i <= numHarm; i++) {\n    real[i]=real[T - i]=real[T + i]=real[T2 - i]=mag[i - 1];\n    imag[i]=imag[T - i]=imag[T + i]=imag[T2 - i]=0.0;\n  }\n  for (int i=(numHarm + 1); i < (T - numHarm); i++) {\n    real[i]=real[T - i]=real[T + i]=real[T2 - i]=1.0;\n    imag[i]=imag[T - i]=imag[T + i]=imag[T2 - i]=0.0;\n  }\n  FFT.transform(real,imag,true);\n  double sqrt_f0=Math.sqrt(currentF0);\n  for (int i=0; i < T; i++)   pulse[i]=real[(i - numHarm) % T] * sqrt_f0;\n  return pulse;\n}\n"}
{"nl": "get the md5 hash of a string", "code": "private String md5(String str){\n  if (str == null) {\n    return null;\n  }\n  MessageDigest messageDigest=null;\n  try {\n    messageDigest=MessageDigest.getInstance(QuickPayConf.signType);\n    messageDigest.reset();\n    messageDigest.update(str.getBytes(QuickPayConf.charset));\n  }\n catch (  NoSuchAlgorithmException e) {\n    return str;\n  }\ncatch (  UnsupportedEncodingException e) {\n    return str;\n  }\n  byte[] byteArray=messageDigest.digest();\n  StringBuffer md5StrBuff=new StringBuffer();\n  for (int i=0; i < byteArray.length; i++) {\n    if (Integer.toHexString(0xFF & byteArray[i]).length() == 1)     md5StrBuff.append(\"0\").append(Integer.toHexString(0xFF & byteArray[i]));\n else     md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));\n  }\n  return md5StrBuff.toString();\n}\n"}
{"nl": "Increments the primitive value mapped to key by 1", "code": "public boolean increment(K key){\n  return adjustValue(key,(long)1);\n}\n"}
{"nl": "is canvas large enough to draw chart?", "code": "private boolean isLargeEnough(){\n  int x0=leftMargin;\n  int x1=getWidth() - rightMargin;\n  int y0=getHeight() - bottomMargin;\n  int y1=topMargin;\n  return x0 < x1 && y0 > y1;\n}\n"}
{"nl": "****************************** SKILL QUERIES", "code": "public SkillCursor querySkillFromTree(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=false;\n  qh.Table=S.TABLE_SKILLS;\n  qh.Columns=null;\n  qh.Selection=S.COLUMN_SKILLS_SKILL_TREE_ID + \" = ?\";\n  qh.SelectionArgs=new String[]{String.valueOf(id)};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new SkillCursor(wrapHelper(qh));\n}\n"}
{"nl": "init permissions ArrayList", "code": "private void initArray(){\n  this.permissionsGranted=new ArrayList<>();\n  this.permissionsDenied=new ArrayList<>();\n  this.permissionsDeniedForever=new ArrayList<>();\n  this.permissionToAsk=new ArrayList<>();\n}\n"}
{"nl": "fail any pending batch messages that were enqueued, however batch was not closed out", "code": "private void failPendingBatchMessages(PulsarClientException ex){\n  if (batchMessageContainer.isEmpty()) {\n    return;\n  }\n  int numMessagesInBatch=batchMessageContainer.numMessagesInBatch;\n  semaphore.release(numMessagesInBatch);\n  try {\n    batchMessageContainer.firstCallback.sendComplete(ex);\n  }\n catch (  Throwable t) {\n    log.warn(\"[{}] [{}] Got exception while completing the callback for msg {}:\",topic,producerName,batchMessageContainer.sequenceId,t);\n  }\n  ReferenceCountUtil.safeRelease(batchMessageContainer.getBatchedSingleMessageMetadataAndPayload());\n  batchMessageContainer.clear();\n}\n"}
{"nl": "close all servers", "code": "public void closeAll(){\n  if (this.servers == null) {\n    return;\n  }\n  for (int i=0; i < this.servers.length; i++) {\n    this.forceClose(this.servers[i]);\n  }\n}\n"}
{"nl": "make delay for the sending delay packet", "code": "public void delayMethod(int deltaTime){\n  Robot robot;\n  try {\n    robot=new Robot();\n    robot.delay(deltaTime);\n  }\n catch (  AWTException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "initialize the labels : the title, the lft label and the right one", "code": "private void initLabels(){\n  CompareConfiguration cc=getCompareConfiguration();\n  String resourceName=resource.getName();\n  setTitle(Policy.bind(\"SVNCompareRevisionsInput.compareResourceAndVersions\",new Object[]{resourceName}));\n  cc.setLeftEditable(!readOnly);\n  cc.setRightEditable(false);\n  String leftLabel=Policy.bind(\"SVNCompareRevisionsInput.workspace\",new Object[]{resourceName});\n  cc.setLeftLabel(leftLabel);\n  String remoteResourceName=null;\n  if (remoteResource != null) {\n    remoteResourceName=remoteResource.getName();\n  }\n else {\n    remoteResourceName=resourceName;\n  }\n  String rightLabel=Policy.bind(\"SVNCompareRevisionsInput.repository\",new Object[]{remoteResourceName});\n  cc.setRightLabel(rightLabel);\n}\n"}
{"nl": "Toggle markdown file rendering", "code": "public SourceEditor toggleMarkdown(){\n  return setMarkdown(!markdown);\n}\n"}
{"nl": "Return information about users who created topics or who posted there last", "code": "protected BoardGetTopicsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Create Action object with specified type and values", "code": "public Action(String type,Object[] values){\n  this.type=type;\n  this.values=values;\n}\n"}
{"nl": "Check if a valid class to instantiate", "code": "private static boolean validClass(Class<?> clazz,Class<?> classToIgnore){\n  return ((clazz.getName().compareTo(classToIgnore.getName()) != 0) && (clazz.getSimpleName().compareTo(PACKAGE_INFO) != 0));\n}\n"}
{"nl": "Draws all elements stored in the container", "code": "@Override public void render(SpriteBatch sb){\n  for (  UIElement element : elements)   element.render(sb);\n}\n"}
{"nl": "Returns true if field debug is set (has been assigned a value) and false otherwise", "code": "public boolean isSetDebug(){\n  return __isset_bit_vector.get(__DEBUG_ISSET_ID);\n}\n"}
{"nl": "Changes the default permission for a flag and removes all direct restrictions, direct permissions will be kept", "code": "public void allowAll(PermissionFlag flag){\n  generalPermissions.remove(flag);\n  strictPermission.getOrDefault(flag,emptyMap()).values().removeIf(null);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set pc1=1 pc2=2 pc3=3;\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoHideCatalogSectionQuery(VkApiClient client,UserActor actor,int sectionId){\n  super(client,\"video.hideCatalogSection\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  sectionId(sectionId);\n}\n"}
{"nl": "Migrate a column value as a resource", "code": "private Collection<Var> migrateColumnValueAsResource(Var instance,String columnName,Object columnValue,String tableName){\n  if (columnValue == null) {\n    return Collections.emptyList();\n  }\n  return Collections.singleton(var().id(id(instance)).has(namer.resourceName(tableName,columnName),columnValue));\n}\n"}
{"nl": "Returns true if the resource type constraint is compatible with the other resource type constraint", "code": "public boolean isCompatibleWith(@NotNull ResourceTypeAllowedValues other){\n  for (  ResourceType type : other.types) {\n    if (isTypeAllowed(type)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public boolean isAlias(String k){\n  return ICUResourceBundleReader.RES_GET_TYPE(getTableResource(k)) == 3;\n}\n"}
{"nl": "compares the blocks allocation", "code": "private boolean compareResult(Map<String,List<Distributable>> expectedResult,Map<String,List<Distributable>> actualResult){\n  expectedResult=sortByListSize(expectedResult);\n  actualResult=sortByListSize(actualResult);\n  List<List<Distributable>> expectedList=new LinkedList(expectedResult.entrySet());\n  List<List<Distributable>> mapOfNodesList=new LinkedList(actualResult.entrySet());\n  boolean isEqual=expectedList.size() == mapOfNodesList.size();\n  if (isEqual) {\n    for (int i=0; i < expectedList.size(); i++) {\n      int size1=((List)((Map.Entry)(expectedList.get(i))).getValue()).size();\n      int size2=((List)((Map.Entry)(mapOfNodesList.get(i))).getValue()).size();\n      isEqual=size1 == size2;\n      if (!isEqual) {\n        break;\n      }\n    }\n  }\n  return isEqual;\n}\n"}
{"nl": "Test to validate fix for ACT-1399: Boundary-event and event-based auditing", "code": "@Deployment public void testBoundaryEvent(){\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"boundaryEventProcess\");\n  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n  assertNotNull(task);\n  taskService.complete(task.getId());\n  assertEquals(0L,runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());\n  HistoricActivityInstance historicActivityInstance=historyService.createHistoricActivityInstanceQuery().activityId(\"boundary\").processInstanceId(processInstance.getId()).singleResult();\n  assertNull(historicActivityInstance);\n  processInstance=runtimeService.startProcessInstanceByKey(\"boundaryEventProcess\");\n  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n  Execution signalExecution=runtimeService.createExecutionQuery().signalEventSubscriptionName(\"alert\").singleResult();\n  runtimeService.signalEventReceived(\"alert\",signalExecution.getId());\n  assertEquals(0L,runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());\n  historicActivityInstance=historyService.createHistoricActivityInstanceQuery().activityId(\"boundary\").processInstanceId(processInstance.getId()).singleResult();\n  assertNotNull(historicActivityInstance);\n  assertNotNull(historicActivityInstance.getStartTime());\n  assertNotNull(historicActivityInstance.getEndTime());\n}\n"}
{"nl": "Calculate HA multiplier", "code": "public static double calcHaMultiplier(Boolean vcenterhastate){\n  double d=0;\n  if (vcenterhastate) {\n    d=1.125;\n  }\n else {\n    d=1;\n  }\n  return d;\n}\n"}
{"nl": "count the data", "code": "public static long count(String table,String where,Object[] args){\n  TimeStamp t=TimeStamp.create();\n  StringBuilder sum=new StringBuilder();\n  sum.append(\"select count(*) t from \").append(table);\n  if (where != null) {\n    sum.append(\" where \").append(where);\n  }\n  Connection c=null;\n  PreparedStatement p=null;\n  ResultSet r=null;\n  try {\n    c=getConnection();\n    if (c == null)     return 0;\n    p=c.prepareStatement(sum.toString());\n    int order=1;\n    if (args != null) {\n      for (int i=0; i < args.length; i++) {\n        Object o=args[i];\n        setParameter(p,order++,o);\n      }\n    }\n    r=p.executeQuery();\n    if (r.next()) {\n      return r.getInt(\"t\");\n    }\n  }\n catch (  Exception e) {\n    if (log.isErrorEnabled())     log.error(sum.toString() + toString(args),e);\n  }\n finally {\n    close(r,p,c);\n    if (t.past() > 2 && sqllog.isDebugEnabled()) {\n      sqllog.debug(\"cost:\" + t.past() + \"ms, sql=[\"+ sum+ \"]; [\"+ sum+ \"]\");\n    }\n  }\n  return 0;\n}\n"}
{"nl": "Clamp to the bounds of the base panel", "code": "private static int clampX(int x,ConstraintWidget base){\n  if (x < base.getX()) {\n    x=base.getX();\n  }\n else   if (x > base.getRight()) {\n    x=base.getRight();\n  }\n  return x;\n}\n"}
{"nl": "Method called when the field has been selected from a combo box and may need to be initialised", "code": "@Override public void justSelected(){\n  setCachedExpression(generateExpression());\n  checkSymbolIsValid();\n}\n"}
{"nl": "Set is board", "code": "public PollsDeleteVoteQuery isBoard(Boolean value){\n  return unsafeParam(\"is_board\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetSettingsQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.getSettings\",GroupSettings.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "Id of a collection to place current collection after it", "code": "public MarketReorderAlbumsQuery after(Integer value){\n  return unsafeParam(\"after\",value);\n}\n"}
{"nl": "Start/stop stop watch in batches for text unit processing", "code": "protected void stopWatchTextUnit(){\n  if (!textUnitStopWatch.isRunning()) {\n    textUnitStopWatch.start(\"start creating text unit\");\n  }\n  if (++numOfTextUnitProcess % 500 == 0) {\n    logger.info(\"num of text unit added:  {}\",numOfTextUnitProcess);\n    textUnitStopWatch.stop();\n    textUnitStopWatch.start(\"batch \" + numOfTextUnitProcess);\n  }\n}\n"}
{"nl": "Creates an output file with the specified <code>RandomAccessFile</code>", "code": "public LogOutputStream(RandomAccessFile raf) throws IOException {\n  this.raf=raf;\n}\n"}
{"nl": "Apply the size behaviour", "code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n"}
{"nl": "Helper method for the user so they can access the map", "code": "AnnotationView viewForAnnotation(Annotation annotation){\n  return this.annotationToAnnotationViewMap.get(annotation);\n}\n"}
{"nl": "Create a document scanner: this scanner performs namespace binding", "code": "@Override protected XMLDocumentScanner createDocumentScanner(){\n  fNamespaceScanner=new XMLNSDocumentScannerImpl();\n  return fNamespaceScanner;\n}\n"}
{"nl": "client's construct", "code": "Client(Socket socket,String name,String clientIpAddress,Date accessTime){\n  this.dAccessTime=accessTime;\n  this.ticTacToc=new ClientGameInformation(Settings.sGameStringStyleTicTacToc);\n  this.catchMe=new ClientGameInformation(Settings.sGameStringStyleCatchMe);\n  this.meteor=new ClientGameInformation(Settings.sGameStringStyleMeteorGame);\n  this.pangPang=new ClientGameInformation(Settings.sGameStringStylePangPang);\n  this.sEnteredRoom=null;\n  this.clientName=name;\n  this.socket=socket;\n  this.nDestoryMeteor=Settings.ZEROINIT;\n  this.clientIpAddress=clientIpAddress;\n  this.queryDataSet=FXCollections.observableArrayList();\n  this.setGameStartSet(false);\n  this.setPlayToken(false);\n  this.setRename(false);\n  this.clientGameTag=Settings.ERRORCODE;\n  this.rnd=new Random();\n  this.nCatchmePlayCount=Settings.nCatchMeMAXClickCount;\n  executorServiceSending=Executors.newSingleThreadExecutor();\n  receive();\n  checkTheTime();\n}\n"}
{"nl": "Figure out what ratio we can load our image into memory at while still being bigger than our desired width and height", "code": "public static int calculateSampleSize(int srcWidth,int srcHeight,int dstWidth,int dstHeight){\n  final float srcAspect=(float)srcWidth / (float)srcHeight;\n  final float dstAspect=(float)dstWidth / (float)dstHeight;\n  if (srcAspect > dstAspect) {\n    return srcWidth / dstWidth;\n  }\n else {\n    return srcHeight / dstHeight;\n  }\n}\n"}
{"nl": "Creates new AbstractArea with min and max z", "code": "protected AbstractArea(ZoneName zoneName,int worldId,float minZ,float maxZ){\n  if (minZ > maxZ) {\n    throw new IllegalArgumentException(\"minZ(\" + minZ + \") > maxZ(\"+ maxZ+ \")\");\n  }\n  this.minZ=minZ;\n  this.maxZ=maxZ;\n  this.zoneName=zoneName;\n  this.worldId=worldId;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"video.deleteComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  ClusterViewer viewer=getViewer();\n  np.matchIgnoreCase(\"select=\");\n  String target=np.getWordMatchesIgnoringCase(\"all none invert\");\n  if (target.equalsIgnoreCase(\"all\"))   viewer.selectAll(true);\n else   if (target.equalsIgnoreCase(\"invert\"))   viewer.selectInverted();\n else   viewer.selectAll(false);\n  np.matchIgnoreCase(\";\");\n}\n"}
{"nl": "Convert writables to a byte array", "code": "public static byte[] toByteArray(Writable... writables){\n  final DataOutputBuffer out=new DataOutputBuffer();\n  try {\n    for (    Writable w : writables) {\n      w.write(out);\n    }\n    out.close();\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Fail to convert writables to a byte array\",e);\n  }\n  return out.getData();\n}\n"}
{"nl": "Calculates RESIST chance", "code": "public static int calculateMagicalResistRate(Creature attacker,Creature attacked,int accMod){\n  if (attacked.getObserveController().checkAttackStatus(AttackStatus.RESIST)) {\n    return 1000;\n  }\n  int attackerLevel=attacker.getLevel();\n  int targetLevel=attacked.getLevel();\n  int resistRate=attacked.getGameStats().getMResist().getCurrent() - attacker.getGameStats().getMainHandMAccuracy().getCurrent() - attacker.getGameStats().getStat(StatEnum.PVP_MAGICAL_HIT_ACCURACY,0).getCurrent()- accMod;\n  if ((targetLevel - attackerLevel) > 2) {\n    resistRate+=(targetLevel - attackerLevel - 2) * 100;\n  }\n  if (resistRate <= 0) {\n    resistRate=1;\n  }\n  if (resistRate > 500) {\n    resistRate=500;\n  }\n  return resistRate;\n}\n"}
{"nl": "Will resolve self-assignments", "code": "private static void resolveSelfAssignmentExpression(SelfAssignmentExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){\n  storeAsTypeWithSignaturesImport(objSubjectExpression.getType().toString(),objScope,objIndex,objTypesSet);\n}\n"}
{"nl": "Displays All 151 Pokemon Names for all Supported Locales", "code": "public static void main(String[] args){\n  Locale chs=new Locale(\"zh\",\"CN\");\n  for (int i=1; i < 152; i++) {\n    try {\n      System.out.println(String.format(chs,\"Pokedex# %d is %s in %s\",i,PokeDictionary.translateName(PokeDictionary.getDisplayName(i,Locale.ENGLISH),chs),chs.getDisplayName(chs)));\n    }\n catch (    MissingResourceException e) {\n      Log.e(\"Main\",\"Unable to find Pokemon name with given Pokedex: \",e);\n    }\n  }\n}\n"}
{"nl": "get Use Status", "code": "public boolean using(){\n  return mUsing;\n}\n"}
{"nl": "Send ACTIVATE event to all objects with AI2", "code": "private final void activateObjects(){\n  for (  VisibleObject visObject : objects.values()) {\n    if (visObject instanceof Creature) {\n      Creature creature=(Creature)visObject;\n      creature.getAi2().onGeneralEvent(AIEventType.ACTIVATE);\n    }\n  }\n}\n"}
{"nl": "Creates a new instance of ConceptualGraph", "code": "public ConceptualGraph(){\n}\n"}
{"nl": "Set extended", "code": "protected WallGetCommentsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Clear all constraints", "code": "public void clearAllConstraints(){\n  for (  ConstraintWidget widget : getWidgets()) {\n    widget.resetAllConstraints();\n  }\n  mSelection.clear();\n  mSelection.setSelectedAnchor(null);\n}\n"}
{"nl": "Decodes UTF-16BE", "code": "private void processBE(final char ch[],int offset,final int count){\n  int curPos=0;\n  for (int i=0; i < count; ++i) {\n    final int b0=fBuffer[curPos++] & 0xff;\n    final int b1=fBuffer[curPos++] & 0xff;\n    ch[offset++]=(char)((b0 << 8) | b1);\n  }\n}\n"}
{"nl": "Create a new instance", "code": "public SharedIteratorSpaceDataSourceDecorator(SpaceDataSource spaceDataSource,long timeToLive){\n  _spaceDataSource=spaceDataSource;\n  _timeToLive=timeToLive;\n  _queryToSources=new ConcurrentHashMap<DataSourceSQLQuery,SharedDataIteratorSource<Object>>();\n  _sourcesToQuery=new ConcurrentHashMap<SharedDataIteratorSource<Object>,DataSourceSQLQuery>();\n}\n"}
{"nl": "Creates the test query schema file", "code": "public static void createQuerySchema(String schemaFile,String querySchemaName,String dataSchemaNameInput,String selectorNameInput,List<String> elementNames,List<String> filterNames,String filter) throws IOException {\n  createQuerySchema(schemaFile,querySchemaName,dataSchemaNameInput,selectorNameInput,elementNames,filterNames,filter,true,null,false,null);\n}\n"}
{"nl": "Print the tables involved int centering the widgets", "code": "public void printCenterTable(ScoutWidget[] list){\n  System.out.println(\"----------------- BASE TABLE --------------------\");\n  final int SIZE=10;\n  String padd=new String(new char[SIZE]).replace('\\0',' ');\n  System.out.print(\"  \");\n  for (int i=0; i < len; i++) {\n    String dbg=\"[\" + i + \"] \"+ list[i]+ \"-------------------------\";\n    dbg=dbg.substring(0,20);\n    System.out.print(dbg + ((i == len - 1) ? \"\\n\" : \"\"));\n  }\n  String str=\"[\";\n  for (int con=0; con < len * 2; con++) {\n    int opposite=con & 0x1;\n    str+=(con / 2 + ((opposite == 0) ? \"->\" : \"<-\") + \"           \").substring(0,10);\n  }\n  System.out.println(\"  \" + str);\n  for (int i=1; i < len; i++) {\n    for (int dir=0; dir < mBinaryProbability[i].length; dir++) {\n      String tab=\"\";\n      for (int k=0; k < mBinaryProbability[i][dir].length; k++) {\n        tab+=Utils.toS(mBinaryProbability[i][dir][k]) + \"\\n  \";\n      }\n      System.out.println(Direction.toString(dir) + \" \" + tab);\n    }\n  }\n}\n"}
{"nl": "update the data using values", "code": "public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){\n  Table mapping=(Table)t.getAnnotation(Table.class);\n  if (mapping == null) {\n    if (log.isErrorEnabled())     log.error(\"mapping missed in [\" + t + \"] declaretion\");\n    return -1;\n  }\n  if (!X.isEmpty(mapping.name())) {\n    return updateTable(mapping.name(),where,args,sets);\n  }\n  return -1;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"print;\");\n  System.err.println(\"Print command: not implemented\");\n}\n"}
{"nl": "write a float", "code": "public void writeFloat(float a) throws IOException {\n  writeInt(Float.floatToIntBits(a));\n}\n"}
{"nl": "Calculate memory requirements for deployment", "code": "public static int calculateViewMemory(int connectionServerCount,int securityServerCount,int vCenterServerCount){\n  final int cs=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.connectionserver.memory.default\")) * connectionServerCount;\n  final int ss=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.securityserver.memory.default\")) * securityServerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.vcenter.memory.default\")) * securityServerCount;\n  final int co=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.composer.memory.default\"));\n  return cs + ss + vc+ co;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public char first(){\n  this.pos=this.begin;\n  return current();\n}\n"}
{"nl": "Npc starts walking (either random or path)", "code": "public static final void emoteStartWalking(Npc owner){\n  owner.setState(CreatureState.WALKING);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.WALK));\n}\n"}
{"nl": "share to weixin circle", "code": "protected void shareByWeixinCircle(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_WEIXIN_CIRCLE,getShareData(ShareConstant.SHARE_CHANNEL_WEIXIN_CIRCLE),ShareConstant.REQUEST_CODE);\n}\n"}
{"nl": "self title set", "code": "public SM_TITLE_INFO(int titleId){\n  this.action=1;\n  this.titleId=titleId;\n}\n"}
{"nl": "turn dp to px", "code": "private float dp2px(float dp){\n  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,getResources().getDisplayMetrics());\n}\n"}
{"nl": "Construct a User reference", "code": "public User(String username){\n  if (username == null)   throw new IllegalArgumentException(\"user's name can't be null\");\n  this.username=username;\n}\n"}
{"nl": "MONSTER HABITAT QUERIES", "code": "public MonsterHabitatCursor queryHabitatMonster(long id){\n  return mHelper.queryHabitatMonster(id);\n}\n"}
{"nl": "Find view in the middle of screen", "code": "private View findCurrentCenterView(){\n  float centerX=getWidth() / 2;\n  float viewHalfWidth=settings.getViewWidthPx() / 2;\n  View nearestToCenterView=null;\n  int nearestDeltaX=0;\n  View item;\n  int centerXView;\n  for (int count=getChildCount(), i=0; i < count; i++) {\n    item=getChildAt(i);\n    centerXView=(int)(getDecoratedLeft(item) + viewHalfWidth);\n    if (nearestToCenterView == null || Math.abs(nearestDeltaX) > Math.abs(centerX - centerXView)) {\n      nearestToCenterView=item;\n      nearestDeltaX=(int)(centerX - centerXView);\n    }\n  }\n  return nearestToCenterView;\n}\n"}
{"nl": "Log the given exception along with the provided message and severity indicator", "code": "public static void log(int severity,String message,Throwable e){\n  log(new Status(severity,SVNUIPlugin.ID,0,message,e));\n}\n"}
{"nl": "Parse platform user object from json web token", "code": "@Override public PlatformUser parseToken(String token){\n  try {\n    Claims body=Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();\n    String role=(String)body.get(ROLE);\n    List<GrantedAuthority> authorityList=AuthorityUtils.commaSeparatedStringToAuthorityList(role);\n    PlatformUser user=new PlatformUser(body.getSubject(),StringConstant.EMPTY_STRING,authorityList);\n    user.setDeviceId((String)body.get(DEVICE_ID));\n    user.setPlatform((String)body.get(PLATFORM));\n    user.setRole(role);\n    user.setLoginTime((Long)body.get(LOGIN_TIME));\n    return user;\n  }\n catch (  Exception e) {\n    return null;\n  }\n}\n"}
{"nl": "Add a string to the config", "code": "public ResourcesPoet addString(String name,String value){\n  Element element=document.createElement(\"string\");\n  element.setAttribute(\"name\",name);\n  element.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(element);\n  return this;\n}\n"}
{"nl": "pre multiple mat x this", "code": "public void preMultiply(MatrixN mat){\n  final MatrixN tmp=new MatrixN(size());\n  for (int j=0; j < size(); j++)   for (int i=0; i < size(); i++) {\n    double f=0.;\n    for (int k=0; k < size(); k++)     f+=mat.get(i,k) * get(k,j);\n    tmp.set(i,j,f);\n  }\n  set(tmp);\n}\n"}
{"nl": "start the view's animations", "code": "public void startAnimations(){\n  isStopSearchingAnim=false;\n  if (animatorSet == null) {\n    animatorSet=new AnimatorSet();\n    animatorSet.playTogether(lineCircleAnim(),rotateCircleAnim(),smallCircleAnim(),largeCircleAnim());\n  }\n  animatorSet.start();\n}\n"}
{"nl": "Adds all predicates defined by query instance to this object", "code": "public TrafficLogPredicate add(TrafficLogPredicate query){\n  predicates.addAll(query.getPredicates());\n  return this;\n}\n"}
{"nl": "Constructs a MultiFile8BitAudioPlayer", "code": "public MultiFile8BitAudioPlayer(String baseName,AudioFileFormat.Type type){\n  this.baseName=baseName;\n  this.outputType=type;\n  debug=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.debug\");\n}\n"}
{"nl": "Convert an image in to a raveled tensor of the bgr values of the image", "code": "public INDArray toRaveledTensor(BufferedImage image){\n  try {\n    image=scalingIfNeed(image,false);\n    return toINDArrayBGR(image).ravel();\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Unable to load image\",e);\n  }\n}\n"}
{"nl": "Notice that the union method only merges the elements of the flow set DavaFlowSet also contains information regarding abrupt control flow This should also be merged using the copyInternalDataFrom method", "code": "public void union(FlowSet<T> otherFlow,FlowSet<T> destFlow){\n  if (sameType(otherFlow) && sameType(destFlow)) {\n    DavaFlowSet<T> other=(DavaFlowSet<T>)otherFlow;\n    DavaFlowSet<T> dest=(DavaFlowSet<T>)destFlow;\n    if (dest == other) {\n      for (int i=0; i < this.numElements; i++)       dest.add(this.elements[i]);\n    }\n else {\n      if (this != dest)       copy(dest);\n      for (int i=0; i < other.numElements; i++)       dest.add(other.elements[i]);\n    }\n  }\n else   super.union(otherFlow,destFlow);\n}\n"}
{"nl": "Returns when request failed", "code": "public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){\n}\n"}
{"nl": "is this a hidden attribute (such as color etc)", "code": "public boolean isHiddenAttribute(String attribute){\n  return attribute.endsWith(\" [hidden]\");\n}\n"}
{"nl": "remove a sample from the table", "code": "public void removeSample(String name){\n  if (table.rowKeySet().contains(name)) {\n    table.rowKeySet().remove(name);\n    sampleOrder.remove(name);\n  }\n}\n"}
{"nl": "Inner method which synchronizes the live cache with the C2MON server", "code": "private void synchronizeCache(final Set<Long> pTagIds) throws CacheSynchronizationException {\n  try {\n    if (!liveCache.isEmpty()) {\n      final Set<Long> unsynchronizedTagIds;\n      if (pTagIds == null || jmsConnectionDown || heartbeatExpired) {\n        unsynchronizedTagIds=new HashSet<Long>(liveCache.keySet());\n      }\n else {\n        unsynchronizedTagIds=new HashSet<Long>(pTagIds);\n      }\n      unsynchronizedTagIds.removeAll(synchronizeTags(unsynchronizedTagIds));\n      for (      Long tagId : unsynchronizedTagIds) {\n        final ClientDataTagImpl liveTag=liveCache.get(tagId);\n        if (liveTag.getDataTagQuality().isExistingTag()) {\n          if (jmsProxy.isRegisteredListener(liveTag)) {\n            try {\n              jmsProxy.unregisterUpdateListener(liveTag);\n            }\n catch (            Exception e) {\n              LOG.warn(\"synchronizeCache() - Could not unregister tag \" + tagId + \" from JmsProxy. Reason: \"+ e.getMessage());\n            }\n          }\n          supervisionManager.removeSupervisionListener(liveTag);\n          final ClientDataTagImpl unkownTag=new ClientDataTagImpl(tagId,true);\n          unkownTag.addUpdateListeners(liveTag.getUpdateListeners());\n          liveCache.put(tagId,unkownTag);\n        }\n      }\n    }\n    jmsConnectionDown=false;\n    heartbeatExpired=false;\n  }\n catch (  Exception e) {\n    throw new CacheSynchronizationException(\"Could not refresh tags in the live cache.\",e);\n  }\n}\n"}
{"nl": "Set filter", "code": "public WallGetQuery filter(WallGetFilter value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "Following methods add a new node to the end of the nodeStack arrayList Since that node becomes the closest target of an implicit break or continue", "code": "public void inASTWhileNode(ASTWhileNode node){\n  nodeStack.add(node);\n}\n"}
{"nl": "Updates the task", "code": "public void updateTask(){\n  this.villager.getLookHelper().setLookPositionWithEntity(this.mate,10.0F,(float)this.villager.getVerticalFaceSpeed());\n  this.villager.getNavigator().tryMoveToEntityLiving(this.mate,this.moveSpeed);\n  ++this.spawnBabyDelay;\n  if (this.spawnBabyDelay >= 60 && this.villager.getDistanceSqToEntity(this.mate) < 9.0D) {\n    this.spawnBaby();\n  }\n}\n"}
{"nl": "Creates a new instance of DefaultMovieInfoProvider", "code": "public DefaultMovieInfoProvider(){\n}\n"}
{"nl": "Propose user to uninstall the given application", "code": "public static void uinstallApplication(final Context context,final String packageName){\n  final Intent intent=new Intent(Intent.ACTION_DELETE,Uri.fromParts(\"package\",packageName,null));\n  context.startActivity(intent);\n}\n"}
{"nl": "Sets what patterns to include", "code": "public static String[] include(String... includes){\n  return includes;\n}\n"}
{"nl": "Searches the set for <tt>val</tt>", "code": "public boolean contains(short val){\n  return index(val) >= 0;\n}\n"}
{"nl": "recursively does the work", "code": "private int determineMaxLevelRec(int level,Node v){\n  int newLevel=level;\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1);\n  }\n  return newLevel;\n}\n"}
{"nl": "does not take into account escaped separators", "code": "public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){\n  int len=str.length();\n  if (len == 0) {\n    return new String[0];\n  }\n  List<String> list=new ArrayList<String>();\n  int i=0;\n  int start=0;\n  boolean match=false;\n  while (i < len) {\n    if (str.charAt(i) == '\\\\') {\n      match=true;\n      i+=2;\n    }\n else     if (str.charAt(i) == separatorChar) {\n      if (retainEmpty || match) {\n        list.add(str.substring(start,i));\n        match=false;\n      }\n      start=++i;\n    }\n else {\n      match=true;\n      i++;\n    }\n  }\n  if (retainEmpty || match) {\n    list.add(str.substring(start,i));\n  }\n  return list.toArray(new String[list.size()]);\n}\n"}
{"nl": "Search order by primary key", "code": "@Override public Order searchById(Long id){\n  return sessionTemplate.selectOne(NAMESPACE + \".searchById\",id);\n}\n"}
{"nl": "Since inventory is not using FK - need to clean items", "code": "@Override public boolean deletePlayerItems(final int playerId){\n  Connection con=null;\n  try {\n    con=DatabaseFactory.getConnection();\n    PreparedStatement stmt=con.prepareStatement(DELETE_CLEAN_QUERY);\n    stmt.setInt(1,playerId);\n    stmt.execute();\n    stmt.close();\n  }\n catch (  Exception e) {\n    log.error(\"Error Player all items. PlayerObjId: \" + playerId,e);\n    return false;\n  }\n finally {\n    DatabaseFactory.close(con);\n  }\n  return true;\n}\n"}
{"nl": "Load String Data", "code": "public void loadString(TRSHttpRequest request,TRSStringHttpCallback callback){\n  mProvider.loadString(request,callback);\n}\n"}
{"nl": "extract chain of nodes", "code": "private static void extractChainRec(Node v,Edge e,NodeSet used,List<Node> order,EdgeSet selectedEdges){\n  if (!used.contains(v)) {\n    used.add(v);\n    order.add(v);\n    for (Edge f=v.getFirstAdjacentEdge(); f != null; f=v.getNextAdjacentEdge(f)) {\n      if (f != e && selectedEdges.contains(f))       extractChainRec(f.getOpposite(v),f,used,order,selectedEdges);\n    }\n  }\n else   throw new RuntimeException(\"Illegal cycle at: \" + v);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public Transliterator safeClone(){\n  UnicodeFilter filter=getFilter();\n  if ((filter != null) && ((filter instanceof UnicodeSet))) {\n    filter=new UnicodeSet((UnicodeSet)filter);\n  }\n  return new RuleBasedTransliterator(getID(),this.data,filter);\n}\n"}
{"nl": "Creates a new statement that throws a NullPointerException", "code": "private void createThrowStmt(Body body,Unit oldStmt,LocalCreation lc){\n  RefType tp=RefType.v(\"java.lang.NullPointerException\");\n  Local lcEx=lc.newLocal(tp);\n  SootMethodRef constructorRef=Scene.v().makeConstructorRef(tp.getSootClass(),Collections.singletonList((Type)RefType.v(\"java.lang.String\")));\n  Stmt newExStmt=Jimple.v().newAssignStmt(lcEx,Jimple.v().newNewExpr(tp));\n  body.getUnits().insertBefore(newExStmt,oldStmt);\n  Stmt invConsStmt=Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(lcEx,constructorRef,Collections.singletonList(StringConstant.v(\"Null throw statement replaced by Soot\"))));\n  body.getUnits().insertBefore(invConsStmt,oldStmt);\n  body.getUnits().swapWith(oldStmt,Jimple.v().newThrowStmt(lcEx));\n}\n"}
{"nl": "read the header from a file", "code": "public void read(IInputReader reader,long startPos) throws IOException {\n  reader.seek(startPos);\n  final int magicNumber=reader.readInt();\n  if (magicNumber != RMA2File.MAGIC_NUMBER) {\n    throw new IOException(\"Not an RMA file\");\n  }\n  final int version=reader.readInt();\n  if (version != 3) {\n    throw new IOException(\"Not an RMA 3 file\");\n  }\n  setFormatDef(reader.readString());\n  FormatDefinition formatDefinition=FormatDefinition.fromString(getFormatDef());\n  for (  Pair<String,FormatDefinition.Type> pair : formatDefinition.getList()) {\n    if (pair.getFirst().equals(\"Creator\"))     setCreator(reader.readString());\n else     if (pair.getFirst().equals(\"CreationDate\"))     setCreationDate(reader.readLong());\n  }\n}\n"}
{"nl": "Helper method to create Product", "code": "public Boolean createProduct(EntityManager em,String productId){\n  Boolean status=true;\n  Product product=new Product();\n  try {\n    em.getTransaction().begin();\n    product.setProductId(productId);\n    product.setCategory(\"SMARTPHONE\");\n    product.setQuantityUnit(\"EA\");\n    product.setWeightUnit(\"KG\");\n    product.setPrice(BigDecimal.valueOf(Double.parseDouble(\"500\")));\n    em.persist(product);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during creation of product. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "Gather a list of containers that are children of the given container", "code": "private static ArrayList<ConstraintWidgetContainer> gatherContainers(ConstraintWidgetContainer container){\n  ArrayList<ConstraintWidgetContainer> containers=new ArrayList<>();\n  for (  ConstraintWidget widget : container.getChildren()) {\n    if (widget instanceof ConstraintWidgetContainer) {\n      containers.add((ConstraintWidgetContainer)widget);\n    }\n  }\n  return containers;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LikesGetListQueryWithExtended(VkApiClient client,UserActor actor,LikesType type){\n  super(client,\"likes.getList\",GetListExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  extended(true);\n}\n"}
{"nl": "Use when you don't need a reference to the actual conflicting data", "code": "@ObjectiveCName(\"init:\") public RecordMergeStrategyException(String error){\n  this(-1,null,-1,null,error);\n}\n"}
{"nl": "This returns the root mean squared error of two data sets", "code": "public static double rootMeansSquaredError(double[] real,double[] predicted){\n  double ret=0.0;\n  for (int i=0; i < real.length; i++) {\n    ret+=Math.pow((real[i] - predicted[i]),2);\n  }\n  return Math.sqrt(ret / real.length);\n}\n"}
{"nl": "*************************** WYPORIUM TRADE QUERIES", "code": "public WyporiumTradeCursor queryWyporiumTrades(){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_WYPORIUM_TRADE;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new WyporiumTradeCursor(wrapJoinHelper(builderWyporiumTrade(),qh));\n}\n"}
{"nl": "split metadata to name value pair array", "code": "public static NameValuePair[] split_metadata(String meta_buff,String recordSeperator,String filedSeperator){\n  String[] rows;\n  String[] cols;\n  NameValuePair[] meta_list;\n  rows=meta_buff.split(recordSeperator);\n  meta_list=new NameValuePair[rows.length];\n  for (int i=0; i < rows.length; i++) {\n    cols=rows[i].split(filedSeperator,2);\n    meta_list[i]=new NameValuePair(cols[0]);\n    if (cols.length == 2) {\n      meta_list[i].setValue(cols[1]);\n    }\n  }\n  return meta_list;\n}\n"}
{"nl": "write a char", "code": "public void writeChar(char a) throws IOException {\n  io.write((byte)(a >> 8));\n  io.write((byte)(a));\n}\n"}
{"nl": "Specialized quick fix is not available on singleLine=\"false\"", "code": "public void testSingleLineFalse() throws Exception {\n  deleteManifest();\n  myFixture.copyFileToProject(BASE_PATH_GLOBAL + \"deprecation/AndroidManifest.xml\",\"AndroidManifest.xml\");\n  myFixture.enableInspections(new AndroidLintInspectionToolProvider.AndroidLintDeprecatedInspection());\n  myFixture.configureFromExistingVirtualFile(myFixture.copyFileToProject(BASE_PATH + \"singleLineFalse.xml\",\"res/layout/singleLineFalse.xml\"));\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,\"Replace singleLine=\\\"true\\\" with maxLines=\\\"1\\\"\");\n  assertNull(action);\n}\n"}
{"nl": "Negates a Zmat", "code": "public static Zmat o(Zmat A){\n  Zmat B=new Zmat(A.nrow,A.ncol);\n  for (int i=0; i < A.nrow; i++)   for (int j=0; j < A.ncol; j++) {\n    B.re[i][j]=-A.re[i][j];\n    B.im[i][j]=-A.im[i][j];\n  }\n  return B;\n}\n"}
{"nl": "Executed from managed ledger thread when the message is persisted", "code": "@Override public void completed(Exception exception,long ledgerId,long entryId){\n  if (exception != null) {\n    producer.cnx.ctx().channel().eventLoop().execute(null);\n  }\n else {\n    if (log.isDebugEnabled()) {\n      log.debug(\"[{}] [{}] [{}] triggered send callback. cnx {}, sequenceId {}\",producer.topic,producer.producerName,producer.producerId,producer.cnx.clientAddress(),sequenceId);\n    }\n    this.ledgerId=ledgerId;\n    this.entryId=entryId;\n    producer.cnx.ctx().channel().eventLoop().execute(this);\n  }\n}\n"}
{"nl": "Change group's loot rules and notify team members", "code": "public static final void changeGroupRules(PlayerGroup group,LootGroupRules lootRules){\n  group.onEvent(new ChangeGroupLootRulesEvent(group,lootRules));\n}\n"}
{"nl": "Notify the listener for each lease", "code": "private void tell(List<Entry> bad){\n  for (Iterator<Entry> iter=bad.iterator(); iter.hasNext(); ) {\n    Entry e=iter.next();\n    if (e.renewalsDone()) {\n      final DesiredExpirationListener del=e.desiredExpirationListener();\n      if (del != null) {\n        del.expirationReached(new LeaseRenewalEvent(this,e.lease,e.expiration,null));\n      }\n      continue;\n    }\n    e.listener.notify(new LeaseRenewalEvent(this,e.lease,e.expiration,e.ex));\n  }\n}\n"}
{"nl": "SKILL QUERIES", "code": "public SkillCursor querySkillFromTree(long id){\n  return mHelper.querySkillFromTree(id);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  viewer.setMethod(TaxonomicProfileDialog.ProfileMethod.ReadSpreading);\n}\n"}
{"nl": "Attempts to delete all Minecraft Worlds with \"TEMP_\" in front of the name", "code": "public static void cleanupTemporaryWorlds(String currentWorld){\n  List<SaveFormatComparator> saveList;\n  ISaveFormat isaveformat=Minecraft.getMinecraft().getSaveLoader();\n  isaveformat.flushCache();\n  try {\n    saveList=isaveformat.getSaveList();\n  }\n catch (  AnvilConverterException e) {\n    e.printStackTrace();\n    return;\n  }\n  String searchString=tempMark + AddressHelper.getMissionControlPort() + \"_\";\n  for (  SaveFormatComparator s : saveList) {\n    String folderName=s.getFileName();\n    if (folderName.startsWith(searchString) && !folderName.equals(currentWorld)) {\n      isaveformat.deleteWorldDirectory(folderName);\n    }\n  }\n}\n"}
{"nl": "Custom oval shape", "code": "@Override protected void drawBlurredBitmap(Canvas canvas,Bitmap blurredBitmap,int overlayColor){\n  if (blurredBitmap != null) {\n    mRectF.right=getWidth();\n    mRectF.bottom=getHeight();\n    mPaint.reset();\n    mPaint.setAntiAlias(true);\n    BitmapShader shader=new BitmapShader(blurredBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);\n    Matrix matrix=new Matrix();\n    matrix.postScale(mRectF.width() / blurredBitmap.getWidth(),mRectF.height() / blurredBitmap.getHeight());\n    shader.setLocalMatrix(matrix);\n    mPaint.setShader(shader);\n    canvas.drawOval(mRectF,mPaint);\n    mPaint.reset();\n    mPaint.setAntiAlias(true);\n    mPaint.setColor(overlayColor);\n    canvas.drawOval(mRectF,mPaint);\n  }\n}\n"}
{"nl": "clustering with default target cluster size and default linkage type It uses 'Average' linkage clustering approach as default", "code": "private void clustering(){\n  clustering(CLUSTER_DEFAULT_SIZE,\"Average\");\n}\n"}
{"nl": "Creates new form MainFrame", "code": "public MainFrame(){\n  initComponents();\n  saveAsItem.setEnabled(itemIsEnable);\n  forceLayoutItem.setEnabled(itemIsEnable);\n  CircleLayoutItem.setEnabled(itemIsEnable);\n  randomLayoutItem.setEnabled(itemIsEnable);\n  gridLayoutItem.setEnabled(itemIsEnable);\n  fruchtermanLayoutItem.setEnabled(itemIsEnable);\n  radialTreeLayout.setEnabled(itemIsEnable);\n  nodeLinkTreeLayoutItem.setEnabled(itemIsEnable);\n  noTextItem.setEnabled(itemIsEnable);\n  textOnlyItem.setEnabled(itemIsEnable);\n  textAndImageItem.setEnabled(itemIsEnable);\n  rectangleItem.setEnabled(itemIsEnable);\n  roundItem.setEnabled(itemIsEnable);\n  roundRectangleItem.setEnabled(itemIsEnable);\n  curveItem.setEnabled(itemIsEnable);\n  straightItem.setEnabled(itemIsEnable);\n  zoomToFitItem.setEnabled(itemIsEnable);\n  switchButton.setEnabled(itemIsEnable);\n  backgroundButton.setEnabled(itemIsEnable);\n}\n"}
{"nl": "Override the monitor method to ensure a non-clustered proxy is used", "code": "@Override public void monitor(Object proxy,ServiceID serviceID) throws Exception {\n  spaceProxy=proxy;\n  super.monitor(proxy,serviceID);\n}\n"}
{"nl": "Provides Auth0 API access", "code": "@Bean public Auth0Client auth0Client(){\n  return new Auth0Client(clientId,issuer);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetByIdQuery(VkApiClient client,UserActor actor,String... posts){\n  super(client,\"wall.getById\",Utils.buildParametrizedType(List.class,WallpostFull.class));\n  accessToken(actor.getAccessToken());\n  posts(posts);\n}\n"}
{"nl": "Writes out a source/sink specification object for Java method parameters", "code": "private void writeJavaParameterSpec(JavaParameterSpec spec,Document document,Element parentElement){\n  Element parameter=document.createElement(\"parameter\");\n  parentElement.appendChild(parameter);\n  parameter.setAttribute(\"package\",spec.getPackageName());\n  parameter.setAttribute(\"class\",spec.getClassName());\n  parameter.setAttribute(\"method\",spec.getHalfSignature());\n  parameter.setAttribute(\"parameter\",Integer.toString(spec.getParamIdx()));\n}\n"}
{"nl": "Initialize an AirMapSchoolProperties from JSON", "code": "public AirMapSchoolProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n"}
{"nl": "check whether the given state is one of the final states", "code": "public boolean isFinalState(int state){\n  return (state < 0) ? false : fFinalStateFlags[state];\n}\n"}
{"nl": "gets the format string", "code": "public String toString(){\n  return format;\n}\n"}
{"nl": "disarms a given alarm", "code": "@Override public ListenableFuture<AlarmResponse> disalarm(AlarmMember member){\n  AlarmRequest alarmRequest=AlarmRequest.newBuilder().setAlarm(AlarmType.NOSPACE).setAction(AlarmRequest.AlarmAction.DEACTIVATE).setMemberID(member.getMemberID()).build();\n  checkArgument(member.getMemberID() != 0,\"the member id can not be 0\");\n  checkArgument(member.getAlarm() != AlarmType.NONE,\"alarm type can not be NONE\");\n  return this.futureStub.alarm(alarmRequest);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsAddOfficeUsersQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.addOfficeUsers\",Boolean.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n"}
{"nl": "Convert date from String to Date format", "code": "public static Date stringToDate(String date,String datePattern){\n  DateFormat format=new SimpleDateFormat(datePattern,Locale.ENGLISH);\n  try {\n    return format.parse(date);\n  }\n catch (  ParseException e) {\n    Log.e(\" \" + e.getMessage(),\" Please check if you have valid pattern! \");\n  }\n  return null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesGetByIdQuery(VkApiClient client,UserActor actor,int noteId){\n  super(client,\"notes.getById\",Note.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n}\n"}
{"nl": "start the thread", "code": "private void startThread(Context context){\n  this.mContext=context;\n  post(this);\n}\n"}
{"nl": "check if wizard can finish", "code": "public boolean canFinish(){\n  IWizardPage page=getContainer().getCurrentPage();\n  if (page == directoryPage) {\n    return directoryPage.useProjectName() || directoryPage.getDirectoryName() != null;\n  }\n else   if (page == finishPage) {\n    return true;\n  }\n  return super.canFinish();\n}\n"}
{"nl": "Call parse of a collection of input data", "code": "private Collection<Map<String,Object>> batchParse(Collection<Json> batch){\n  return batch.stream().map(null).collect(toList());\n}\n"}
{"nl": "Populates the description values", "code": "private static void populate(){\n  if (descriptionMap.isEmpty()) {\n    descriptionMap.put(jpg,\"JPEG (*.png)\");\n    descriptionMap.put(gif,\"GIF (*.gif)\");\n    descriptionMap.put(tif,\"TIFF (*.tif)\");\n    descriptionMap.put(png,\"PNG (*.png)\");\n  }\n}\n"}
{"nl": "Returns true if the device is overridden", "code": "public final boolean isOverridingDevice(){\n  return (myOverride & CFG_DEVICE) != 0;\n}\n"}
{"nl": "Community age limits", "code": "public GroupsEditQuery ageLimits(GroupsEditAgeLimit value){\n  return unsafeParam(\"age_limits\",value);\n}\n"}
{"nl": "BELOW METHODS FOR BOUNDS CHECK", "code": "public boolean isInBoundsX(float x){\n  return isInBoundsLeft(x) && isInBoundsRight(x);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ClusterViewer viewer=getViewer();\n  if (viewer.getMatrixTab() != null) {\n    TableModel model=viewer.getMatrixTab().getTable().getModel();\n    return model.getRowCount() > 1;\n  }\n  return false;\n}\n"}
{"nl": "mlsadf: HTS Mel Log Spectrum Approximation filter", "code": "public static double mlsadf(double x,double b[],int m,double a,double d[],int pt2,int pt3[]){\n  x=mlsadf1(x,b,m,a,d);\n  x=mlsadf2(x,b,m - 1,a,d,pt2,pt3);\n  return x;\n}\n"}
{"nl": "Creates a new BlacklistEntry which will match both a URL and an HTTP method", "code": "public BlacklistEntry(String urlPattern,int statusCode,String httpMethodPattern){\n  this.urlPattern=Pattern.compile(urlPattern);\n  this.statusCode=statusCode;\n  if (httpMethodPattern == null || httpMethodPattern.isEmpty()) {\n    this.httpMethodPattern=null;\n  }\n else {\n    this.httpMethodPattern=Pattern.compile(httpMethodPattern);\n  }\n}\n"}
{"nl": "add an attribute", "code": "public boolean addAttribute(String attribute,Map<String,Object> sample2value,boolean allowReplaceAttribute,boolean allowAddSample){\n  if (allowReplaceAttribute || !table.columnKeySet().contains(attribute)) {\n    if (sample2value.size() > 0) {\n      for (      String sample : sample2value.keySet()) {\n        if (allowAddSample || getSampleSet().contains(sample))         put(sample,attribute,sample2value.get(sample));\n      }\n    }\n else {\n      for (      String sample : getSampleSet()) {\n        put(sample,attribute,null);\n      }\n    }\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Make circle drawable for badge background", "code": "static ShapeDrawable makeShapeDrawable(int color){\n  ShapeDrawable badgeBackground=new ShapeDrawable(new OvalShape());\n  badgeBackground.setIntrinsicWidth(10);\n  badgeBackground.setIntrinsicHeight(10);\n  badgeBackground.getPaint().setColor(color);\n  return badgeBackground;\n}\n"}
{"nl": "Constructs a new notify packet", "code": "public SM_FRIEND_NOTIFY(int code,String name){\n  this.code=code;\n  this.name=name;\n}\n"}
{"nl": "gradle sync", "code": "public static void startSync(Project project,GradleSyncListener listener){\n  GradleProjectImporter.getInstance().requestProjectSync(project,listener);\n}\n"}
{"nl": "create a service", "code": "public <S>S createService(Class<S> serviceClass){\n  String baseUrl=\"\";\n  try {\n    Field field1=serviceClass.getField(\"BASE_URL\");\n    baseUrl=(String)field1.get(serviceClass);\n  }\n catch (  NoSuchFieldException e) {\n    e.printStackTrace();\n  }\ncatch (  IllegalAccessException e) {\n    e.getMessage();\n    e.printStackTrace();\n  }\n  Retrofit retrofit=new Retrofit.Builder().baseUrl(baseUrl).client(getOkHttpClient()).addConverterFactory(GsonConverterFactory.create(mGsonDateFormat)).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).build();\n  return retrofit.create(serviceClass);\n}\n"}
{"nl": "Imports a existing SVN Project to the workbench", "code": "boolean importExistingProject(IProgressMonitor monitor) throws TeamException {\n  if (directory == null) {\n    return false;\n  }\n  try {\n    monitor.beginTask(\"Importing\",3 * 1000);\n    createExistingProject(new SubProgressMonitor(monitor,1000));\n    monitor.subTask(\"Refreshing \" + project.getName());\n    RepositoryProvider.map(project,SVNProviderPlugin.getTypeId());\n    monitor.worked(1000);\n    SVNWorkspaceRoot.setSharing(project,new SubProgressMonitor(monitor,1000));\n    return true;\n  }\n catch (  CoreException ce) {\n    throw new SVNException(\"Failed to import External SVN Project\" + ce,ce);\n  }\n finally {\n    monitor.done();\n  }\n}\n"}
{"nl": "Generates a salt string from random bytes <code>Random</code>", "code": "private static String genSalt(final byte[] Random){\n  final StringBuilder Salt=new StringBuilder(\"$H$\");\n  Salt.append(iota64[30]);\n  Salt.append(encode64(Random));\n  return Salt.toString();\n}\n"}
{"nl": "get the number of taxa", "code": "public int size(){\n  return bits.cardinality();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n"}
{"nl": "paint the tree", "code": "public void paint(Graphics2D gc,Rectangle rect){\n  try {\n    if (gc instanceof SelectionGraphics) {\n      final SelectionGraphics sgc=(SelectionGraphics)gc;\n      select(rect,sgc.getSelectionRectangle(),sgc.getMouseClicks());\n    }\n else     if (!inUpdate) {\n      doPaint(gc,rect);\n    }\n  }\n catch (  Exception ex) {\n  }\n}\n"}
{"nl": "Converts single external entry expression to a range", "code": "@SuppressWarnings(\"deprecation\") public static Range toRange(String colName,FunctionCallDescription functionCallDescription,Object value,short matchCode){\nswitch (matchCode) {\ncase TemplateMatchCodes.IS_NULL:\n    return new IsNullRange(colName,functionCallDescription);\ncase TemplateMatchCodes.NOT_NULL:\n  return new NotNullRange(colName,functionCallDescription);\ncase TemplateMatchCodes.EQ:\nreturn new EqualValueRange(colName,functionCallDescription,value);\ncase TemplateMatchCodes.NE:\nreturn new NotEqualValueRange(colName,functionCallDescription,value);\ncase TemplateMatchCodes.GT:\nreturn new SegmentRange(colName,functionCallDescription,castToComparable(value),false,null,false);\ncase TemplateMatchCodes.GE:\nreturn new SegmentRange(colName,functionCallDescription,castToComparable(value),true,null,false);\ncase TemplateMatchCodes.LE:\nreturn new SegmentRange(colName,functionCallDescription,null,false,castToComparable(value),true);\ncase TemplateMatchCodes.LT:\nreturn new SegmentRange(colName,functionCallDescription,null,false,castToComparable(value),false);\ncase TemplateMatchCodes.REGEX:\nreturn new RegexRange(colName,functionCallDescription,(String)value);\ncase TemplateMatchCodes.NOT_REGEX:\nreturn new NotRegexRange(colName,functionCallDescription,(String)value);\ncase TemplateMatchCodes.IN:\nreturn new InRange(colName,functionCallDescription,(Set)value);\n}\nreturn Range.EMPTY_RANGE;\n}\n"}
{"nl": "Clear the selection status for all items", "code": "public void clearSelection(){\n  List<Integer> selection=getSelectedItemsPosition();\n  selectedItems.clear();\n  for (  Integer i : selection) {\n    notifyItemChanged(i);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public StatsTrackVisitorQuery(VkApiClient client,UserActor actor){\n  super(client,\"stats.trackVisitor\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "draw the ring", "code": "private void drawRing(Canvas canvas,Rect bounds){\n  final RectF arcBounds=mTempBounds;\n  final Ring ring=mRing;\n  arcBounds.set(bounds);\n  arcBounds.inset(ring.strokeInset,ring.strokeInset);\n  canvas.drawArc(arcBounds,ring.start,ring.sweep,false,mPaint);\n}\n"}
{"nl": "Create a DataProvider that specifies in which country a specific circuit can be found (specify that Monza  is in Italy, for example)", "code": "@DataProvider(name=\"circuits\") public String[][] createCircuitData(){\n  return new String[][]{{\"monza\",\"Italy\"},{\"spa\",\"Belgium\"},{\"sepang\",\"Malaysia\"}};\n}\n"}
{"nl": "Sets all options equal to incoming options", "code": "public Builder cloneFrom(DisplayImageOptions options){\n  imageResOnLoading=options.imageResOnLoading;\n  imageResForEmptyUri=options.imageResForEmptyUri;\n  imageResOnFail=options.imageResOnFail;\n  imageOnLoading=options.imageOnLoading;\n  imageForEmptyUri=options.imageForEmptyUri;\n  imageOnFail=options.imageOnFail;\n  resetViewBeforeLoading=options.resetViewBeforeLoading;\n  cacheInMemory=options.cacheInMemory;\n  cacheOnDisc=options.cacheOnDisc;\n  imageScaleType=options.imageScaleType;\n  decodingOptions=options.decodingOptions;\n  delayBeforeLoading=options.delayBeforeLoading;\n  considerExifParams=options.considerExifParams;\n  extraForDownloader=options.extraForDownloader;\n  preProcessor=options.preProcessor;\n  postProcessor=options.postProcessor;\n  displayer=options.displayer;\n  handler=options.handler;\n  isSyncLoading=options.isSyncLoading;\n  return this;\n}\n"}
{"nl": "Constructs a new space health status object", "code": "public SpaceHealthStatus(Throwable[] healthIssueErrors){\n  this.healthIssueErrors=healthIssueErrors;\n}\n"}
{"nl": "Set user ids", "code": "public NewsfeedDeleteBanQuery userIds(Integer... value){\n  return unsafeParam(\"user_ids\",value);\n}\n"}
{"nl": "register a pattern and an associated string", "code": "public void register(String pattern,String result){\n  Assert.isTrue(matchers.size() == results.size());\n  pattern=pattern.trim();\n  if (pattern.length() == 0) {\n    return;\n  }\n  matchers.add(new StringMatcher(pattern,false,false));\n  results.add(result);\n}\n"}
{"nl": "To check the equality", "code": "@Override public boolean equals(Object obj){\n  if (this == obj) {\n    return true;\n  }\n  if (obj == null) {\n    return false;\n  }\n  if (!(obj instanceof BlockInfo)) {\n    return false;\n  }\n  BlockInfo other=(BlockInfo)obj;\n  if (!info.getSegmentId().equals(other.info.getSegmentId())) {\n    return false;\n  }\n  if (info.getBlockOffset() != other.info.getBlockOffset()) {\n    return false;\n  }\n  if (info.getBlockLength() != info.getBlockLength()) {\n    return false;\n  }\n  if (info.getFilePath() == null && other.info.getFilePath() != null) {\n    return false;\n  }\n else   if (info.getFilePath() != null && other.info.getFilePath() == null) {\n    return false;\n  }\n else   if (!info.getFilePath().equals(other.info.getFilePath())) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Set privacy view", "code": "public VideoSaveQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n"}
{"nl": "Helper method to create CustomerReview", "code": "public Boolean createCustomerReview(EntityManager em,String customerReviewId){\n  Boolean status=true;\n  Date date=null;\n  CustomerReview customerReview=new CustomerReview();\n  Calendar cal=Calendar.getInstance();\n  DateFormat formatter=new SimpleDateFormat(\"yyyymmdd\");\n  try {\n    date=formatter.parse(\"19770707\");\n    cal.setTime(date);\n    em.getTransaction().begin();\n    customerReview.setCustomerReviewId(customerReviewId);\n    customerReview.setComment(\"This product is really great. I like especially the design, speed and performance\");\n    customerReview.setRating(5);\n    customerReview.setFirstName(\"John\");\n    customerReview.setLastName(\"Smith\");\n    customerReview.setProductId(\"HT-2001\");\n    customerReview.setCreationDate(cal);\n    em.persist(customerReview);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during creation of customer review. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "Set votes", "code": "protected OrdersGetAmountQuery votes(String... value){\n  return unsafeParam(\"votes\",value);\n}\n"}
{"nl": "Build space template", "code": "public QueryTemplatePacket buildTemplate(LiteralNode node,QueryColumnData queryColumnData,short op,short nullOp,FunctionCallDescription functionCallDescription) throws SQLException {\n  QueryTableData tableData=queryColumnData.getColumnTableData();\n  ITypeDesc typeDesc=tableData.getTypeDesc();\n  Object value=node.getConvertedObject(typeDesc,queryColumnData.getColumnPath());\n  return new QueryTemplatePacket(tableData,query.getQueryResultType(),queryColumnData.getColumnPath(),toRange(queryColumnData.getColumnPath(),functionCallDescription,value,value == null ? nullOp : op));\n}\n"}
{"nl": "Returns true if field traceId is set (has been assigned a value) and false otherwise", "code": "public boolean isSetTraceId(){\n  return this.traceId != null;\n}\n"}
{"nl": "perform objects equality , cater for null and also first use == which is not always true for various class  \"equals\"", "code": "static boolean objectsEquality(Object a,Object b){\n  if (a == null)   return b == null;\n  if (a == b)   return true;\n  return (a.equals(b));\n}\n"}
{"nl": "is viewer uptodate?", "code": "public boolean isUptoDate(){\n  return uptodate;\n}\n"}
{"nl": "Add an horizontal spring between (x1, y0) and (x2, y0) to the given path object", "code": "private static void addHorizontalSmallSpring(Path2D.Float path,int y0,int x1,int x2){\n  int springHeight=2;\n  int springWidth=2;\n  int distance=Math.abs(x2 - x1);\n  int numSprings=(distance / (springHeight));\n  int leftOver=(distance - (numSprings * springHeight)) / 2;\n  path.lineTo(x1,y0);\n  path.lineTo(x1 - leftOver,y0 - leftOver);\n  int count=0;\n  if (x1 > x2) {\n    for (int x=x1 - leftOver; x > x2 + leftOver; x-=springHeight) {\n      int y=(count % 2 == 0) ? y0 - springWidth : y0 + springWidth;\n      path.lineTo(x,y);\n      count++;\n    }\n  }\n else {\n    for (int x=x1 + leftOver; x < x2 - leftOver; x+=springHeight) {\n      int y=(count % 2 == 0) ? y0 - springWidth : y0 + springWidth;\n      path.lineTo(x,y);\n      count++;\n    }\n  }\n  path.lineTo(x2 + leftOver,y0);\n  path.lineTo(x2,y0);\n}\n"}
{"nl": "Allows to fetch the RemoteConfig remote values", "code": "public Single<Void> fetch(){\n  int cache=0;\n  if (!this.firebaseRemoteConfig.getInfo().getConfigSettings().isDeveloperModeEnabled()) {\n    cache=3600;\n  }\n  return observeSingleValue(this.firebaseRemoteConfig.fetch(cache));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountGetAppPermissionsQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"account.getAppPermissions\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getLength() > 0;\n}\n"}
{"nl": "Method to start the computation", "code": "public void start(){\n  logger.info(\"Starting computation...\");\n  jssc.start();\n  try {\n    jssc.awaitTermination();\n  }\n catch (  InterruptedException e) {\n    Thread.interrupted();\n  }\n}\n"}
{"nl": "asks the user if he wants to add the resources if some of them are ignored", "code": "private boolean promptForAddOfIgnored(){\n  IResource[] resources=getSelectedResources();\n  boolean prompt=false;\n  for (int i=0; i < resources.length; i++) {\n    ISVNLocalResource resource=SVNWorkspaceRoot.getSVNResourceFor(resources[i]);\n    try {\n      if (resource.isIgnored()) {\n        prompt=true;\n        break;\n      }\n    }\n catch (    SVNException e) {\n      handle(e);\n    }\n  }\n  if (prompt) {\n    return MessageDialog.openQuestion(getShell(),Policy.bind(\"AddAction.addIgnoredTitle\"),Policy.bind(\"AddAction.addIgnoredQuestion\"));\n  }\n  return true;\n}\n"}
{"nl": "Construct an LSInputList implementation", "code": "public LSInputListImpl(LSInput[] array,int length){\n  fArray=array;\n  fLength=length;\n}\n"}
{"nl": "Create a SAX parser with the associated features", "code": "SAXParserImpl(SAXParserFactoryImpl spf,Hashtable features) throws SAXException {\n  this(spf,features,false);\n}\n"}
{"nl": "Find a Class using the specified ClassLoader", "code": "static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    final int lastDot=className.lastIndexOf(\".\");\n    String packageName=className;\n    if (lastDot != -1)     packageName=className.substring(0,lastDot);\n    security.checkPackageAccess(packageName);\n  }\n  Class providerClass;\n  if (cl == null) {\n    providerClass=Class.forName(className);\n  }\n else {\n    try {\n      providerClass=cl.loadClass(className);\n    }\n catch (    ClassNotFoundException x) {\n      if (doFallback) {\n        ClassLoader current=ObjectFactory.class.getClassLoader();\n        if (current == null) {\n          providerClass=Class.forName(className);\n        }\n else         if (cl != current) {\n          cl=current;\n          providerClass=cl.loadClass(className);\n        }\n else {\n          throw x;\n        }\n      }\n else {\n        throw x;\n      }\n    }\n  }\n  return providerClass;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveRemoveUserQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"fave.removeUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "/*     ", "code": "@deprecated public final String format(Style style,TimeZone tz,long date){\n  return format(style,tz,date,null);\n}\n"}
{"nl": "Creates the reference to the object in the registry table", "code": "private void registerValue(int index){\nsynchronized (L) {\n    L.pushValue(index);\n    int key=L.Lref(LuaState.LUA_REGISTRYINDEX.intValue());\n    ref=new Integer(key);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,String groupId,List<Integer> userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatusFull.class));\n  groupId(groupId);\n  extended(true);\n  userIds(userIds);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  if (viewer != null) {\n    viewer.doSortByAlpha=false;\n    viewer.doSortByNrOfReads=true;\n    int div=viewer.getSplitPane().getDividerLocation();\n    viewer.getSplitPane().remove(viewer.getSplitPane().getTopComponent());\n    viewer.getSplitPane().setTopComponent(viewer.getTreePanel());\n    viewer.getSplitPane().setDividerLocation(div);\n  }\n}\n"}
{"nl": "Adds a host limit to the query", "code": "public ContentletQuery addHost(Host host){\n  return addHost(host.getIdentifier());\n}\n"}
{"nl": "Allows using a single razzberry to attempt capture", "code": "public CatchOptions useRazzberry(boolean useRazzBerry){\n  this.useRazzBerry=useRazzBerry;\n  return this;\n}\n"}
{"nl": "store an element, while the SL is unlocked", "code": "public IObjectInfo<T> addUnlocked(T subject){\n  return store_impl(subject);\n}\n"}
{"nl": "This object gives you access to the rpc response state to respond to a request", "code": "@ObjectiveCName(\"init:data:\") RpcResult(boolean success,Object data){\n  this.success=success;\n  this.data=data;\n}\n"}
{"nl": "Set date", "code": "public MessagesSearchQuery date(Integer value){\n  return unsafeParam(\"date\",value);\n}\n"}
{"nl": "Sends message to all legion members", "code": "private void broadcastToLegionMembers(final Player player){\n  if (player.isLegionMember()) {\n    PacketSendUtility.broadcastPacketToLegion(player.getLegion(),new SM_MESSAGE(player,message,type));\n  }\n}\n"}
{"nl": "acquire the lock", "code": "public boolean acquire(){\n  int timeout=acquireTimeout;\n  while (timeout >= 0) {\n    if (ops.setIfAbsent(lockKey,lockValue)) {\n      new Thread(new LockExpiredTask()).start();\n      isHold=true;\n      return true;\n    }\n    try {\n      timeout-=DEFAULT_ACQUIRE_PAUSE_MILLIS;\n      Thread.sleep(DEFAULT_ACQUIRE_PAUSE_MILLIS);\n    }\n catch (    InterruptedException e) {\n    }\n  }\n  return false;\n}\n"}
{"nl": "Intent Factories", "code": "public static Intent createIntent(Context ctx){\n  return createIntent(ctx,null);\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public UsersGetNearbyQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Return photo sizes in a special format", "code": "public PhotosGetQuery photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n"}
{"nl": "converts an address to numbers of easier display", "code": "public static String toNumbers(String address){\n  StringBuilder buf=new StringBuilder();\n  for (int i=0; i < address.length(); i++)   buf.append(String.format(\"%d.\",(int)address.charAt(i)));\n  return buf.toString();\n}\n"}
{"nl": "Required for Externalizable", "code": "public SpaceQueryDetails(){\n}\n"}
{"nl": "Indicates whether the value type of this data element is a file (externally stored resource)", "code": "public boolean isFileType(){\n  return getValueType().isFile();\n}\n"}
{"nl": "Rejects the duel request", "code": "private void rejectDuelRequest(Player requester,Player responder){\n  log.debug(\"[Duel] Player \" + responder.getName() + \" rejected duel request from \"+ requester.getName());\n  PacketSendUtility.sendPacket(requester,new SM_DUEL_REQUEST_CANCEL(1300097,responder.getName()));\n  PacketSendUtility.sendPacket(responder,SM_SYSTEM_MESSAGE.STR_DUEL_REJECT_DUEL(requester.getName()));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetBroadcastListQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getBroadcastList\",Utils.buildParametrizedType(List.class,UserBroadcast.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "/*    ", "code": "@deprecated private LanguageMatcherData addDistance(String desired,String supported,int percent){\n  return addDistance(desired,supported,percent,false,null);\n}\n"}
{"nl": "Creates a repo supporting few languages, a TM and processes an asset to add text units", "code": "public Repository createRepoAndAssetAndTextUnits(TestIdWatcher testIdWatcher) throws RepositoryNameAlreadyUsedException {\n  Repository repository=createRepository(testIdWatcher);\n  try {\n    PollableFuture<Asset> assetResult=assetService.addOrUpdateAssetAndProcessIfNeeded(repository.getId(),getTestSourceAssetContent(),\"path/to/asset.xliff\");\n    pollableTaskService.waitForPollableTask(assetResult.getPollableTask().getId());\n  }\n catch (  PollableTaskException|InterruptedException|ExecutionException e) {\n    throw new RuntimeException(\"Could not update asset and process it\",e);\n  }\n  return repository;\n}\n"}
{"nl": "Help count how much newline and margin whitespace we have stripped up to a particular index so we know how to offset anchors", "code": "Map<Integer,Integer> strippedWhitespaceUpToColumn(String intro){\n  Map<Integer,Integer> stripped=new TreeMap<>();\n  boolean countingWhitespace=false;\n  int col=0;\n  int count=0;\n  for (  char c : intro.toCharArray()) {\n    if (c == '\\n' && !countingWhitespace) {\n      countingWhitespace=true;\n    }\n else     if (countingWhitespace) {\n      if (Character.isWhitespace(c))       count++;\n else       countingWhitespace=false;\n    }\n    stripped.put(col,count);\n    col++;\n  }\n  return stripped;\n}\n"}
{"nl": "Returns a string containing the tokens joined by delimiters, taking in considerations if the token of the iterable is null", "code": "public static String join(CharSequence delimiter,Iterable tokens){\n  StringBuilder sb=new StringBuilder();\n  boolean firstTime=true;\n  for (  Object token : tokens) {\n    if (token == null || isEmpty(token.toString())) {\n      continue;\n    }\n    if (firstTime) {\n      firstTime=false;\n    }\n else {\n      sb.append(delimiter);\n    }\n    sb.append(token.toString());\n  }\n  if (firstTime) {\n    return null;\n  }\n  return sb.toString();\n}\n"}
{"nl": "Returns true if the given tag prefix has been seen", "code": "public boolean seenTagPrefix(@NotNull String prefix){\n  if (myTags != null) {\n    for (    String tag : myTags.keySet()) {\n      if (tag.startsWith(prefix)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "skip lines starting with #?", "code": "public boolean isSkipCommentLines(){\n  return iterator.isSkipCommentLines();\n}\n"}
{"nl": "When valuePosition is OutsideSlice, this allows variable line length", "code": "@Override public boolean isValueLineVariableLength(){\n  return mValueLineVariableLength;\n}\n"}
{"nl": "Expected value for the testArray defined in UnivariateStatisticAbstractTest", "code": "public double expectedWeightedValue(){\n  return this.weightedSum;\n}\n"}
{"nl": "Creates a Range object with lower and upper bound", "code": "public static Range of(int lowerBound,int upperBound){\n  return new Range(lowerBound,upperBound);\n}\n"}
{"nl": "Set text and show stopped layout", "code": "public void stopAndError(String errorMessage){\n  mBasoStatus=BasoStatus.ERROR;\n  setFinishedText(errorMessage);\n  toggleLayout();\n}\n"}
{"nl": "Build host id <ul> <li>in a group returns group::hostId <li>not in a group returns hostId </ul>", "code": "public static String buildHostId(List<String> tenantLinks,String hostId){\n  AssertUtil.assertNotNull(hostId,\"hostId\");\n  String group=extractGroup(tenantLinks);\n  String id=extractHostId(hostId);\n  if (group == null || group.isEmpty()) {\n    return id;\n  }\n else {\n    return group + HOST_ID_TENANT_SEPARATOR + id;\n  }\n}\n"}
{"nl": "Deletes an item's comment", "code": "public MarketDeleteCommentQuery deleteComment(UserActor actor,int ownerId,int commentId){\n  return new MarketDeleteCommentQuery(getClient(),actor,ownerId,commentId);\n}\n"}
{"nl": "Time remaining until disbanding: %DURATIONDAY0", "code": "public static SM_SYSTEM_MESSAGE STR_GUILD_DISPERSE_TIME(String durationday0){\n  return new SM_SYSTEM_MESSAGE(1300308,durationday0);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set showLabels=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Create and insert a new group from a given list of widgets", "code": "public void createGroupFromWidgets(ArrayList<ConstraintWidget> widgets){\n  ConstraintWidgetContainer container=new ConstraintWidgetContainer();\n  container.setCompanionWidget(WidgetCompanion.create(container));\n  createContainerFromWidgets(widgets,container,createContainerName(\"group\"));\n}\n"}
{"nl": "component hidded", "code": "public void componentHidden(ComponentEvent ev){\n}\n"}
{"nl": "Interprets the message to create a string representation", "code": "private String interpretMessage(Message message,boolean displayHex) throws IOException {\n  byte[] msgData=message.getData();\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  if (!displayHex) {\n    return new String(msgData);\n  }\n else {\n    HexDump.dump(msgData,0,out,0);\n    return new String(out.toByteArray());\n  }\n}\n"}
{"nl": "draw circle, around the middle of the cell decided by the index", "code": "private void drawCircle(Canvas canvas,int index,Paint paint,float radius){\n  if (isIllegalIndex(index)) {\n    return;\n  }\n  int x=getXByIndex(index);\n  int y=getYByIndex(index);\n  float centreY=cellHeight + (y - 1) * cellHeight + cellHeight * 0.5f;\n  float centreX=cellWidth * (x - 1) + cellWidth * 0.5f;\n  canvas.drawCircle(centreX,centreY,radius,paint);\n}\n"}
{"nl": "Gets dialog type (Light/Dark) from current theme", "code": "public static boolean isDarkTheme(Context context,boolean current){\n  return resolveBoolean(context,R.attr.themeDark,current);\n}\n"}
{"nl": "reset all components before parsing", "code": "protected void reset() throws XNIException {\n  if (fValidationManager != null)   fValidationManager.reset();\n  int count=fComponents.size();\n  for (int i=0; i < count; i++) {\n    XMLComponent c=(XMLComponent)fComponents.get(i);\n    c.reset(this);\n  }\n}\n"}
{"nl": "Constructs new instance of <tt>CM_TITLE_SET </tt> packet", "code": "public CM_TITLE_SET(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Serve an Observable GoogleApiClient", "code": "public static Observable<GoogleApiClient> observable(Context context,Api api){\n  return GoogleApiClientObservable.create(context.getApplicationContext(),new ApiDefinition(api));\n}\n"}
{"nl": "Saves an Array of Entries to the specified location on the sdcard", "code": "public static void saveToSdCard(List<Entry> entries,String path){\n  File sdcard=Environment.getExternalStorageDirectory();\n  File saved=new File(sdcard,path);\n  if (!saved.exists()) {\n    try {\n      saved.createNewFile();\n    }\n catch (    IOException e) {\n      Log.e(LOG,e.toString());\n    }\n  }\n  BufferedWriter buf=null;\n  try {\n    buf=new BufferedWriter(new FileWriter(saved,true));\n    for (    Entry e : entries) {\n      buf.append(e.getVal() + \"#\" + e.getXIndex());\n      buf.newLine();\n    }\n  }\n catch (  IOException e) {\n    Log.e(LOG,e.toString());\n  }\n finally {\n    if (buf != null)     try {\n      buf.close();\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"}
{"nl": "Creates the test query schema file", "code": "public static void createQuerySchema(String schemaFile,String querySchemaName,String dataSchemaNameInput,String selectorNameInput,List<String> elementNames,List<String> filterNames,String filter,boolean append,FileSystem fs,boolean hdfs) throws IOException {\n  createQuerySchema(schemaFile,querySchemaName,dataSchemaNameInput,selectorNameInput,elementNames,filterNames,filter,append,fs,hdfs,null);\n}\n"}
{"nl": "Rollback the transaction, removing uncommitted changes", "code": "void rollback(){\n  queryExecutor.submit(null);\n}\n"}
{"nl": "Fetch config from server", "code": "List<ConfigItem> fetchConfigs(Set<String> names){\n  Map<String,Object> params=Maps.newHashMapWithExpectedSize(1);\n  params.put(\"names\",Joiners.COMMA.join(names));\n  return doGet(ClientUris.CONFIG_FETCHES,headers,params,JsonUtil.LIST_CONFIG_ITEM_TYPE);\n}\n"}
{"nl": "In this tree, replace the given leaf with the given CART", "code": "public static Node replaceLeafByCart(CART cart,LeafNode leaf){\n  DecisionNode mother=(DecisionNode)leaf.getMother();\n  Node newNode=cart.getRootNode();\n  mother.replaceDaughter(newNode,leaf.getNodeIndex());\n  newNode.setIsRoot(false);\n  return newNode;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"show gapBetweenBars=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof ChartViewer) {\n    ((ChartViewer)getViewer()).setShowGapsBetweenBars(show);\n  }\n}\n"}
{"nl": "Changes ui when logout executed", "code": "@Override public void logoutWithoutApi(){\n  if ((mSelectedMenuItemId == R.id.my_tickets || mSelectedMenuItemId == R.id.drafts)) {\n    mSelectedMenuItemId=R.id.all_tickets;\n    mTitleId=R.string.all_tickets;\n    mCurrentFragment=TicketsFragment.newInstance(false,mOnPageChangeListener);\n    performScreenChange(mSelectedMenuItemId);\n    setTitle(mTitleId);\n  }\n}\n"}
{"nl": "gets next element of getLetterCodeIterator", "code": "public T next(){\n  if (enable) {\n    if (done) {\n      return null;\n    }\n    if (next == null)     hasNext();\n    if (next != null) {\n      T result=(T)next;\n      next=null;\n      return result;\n    }\n else {\n      return null;\n    }\n  }\n else   return iterator.next();\n}\n"}
{"nl": "convert correlations into distances by subtracting from 1 and dividing by 2", "code": "private static void convertCorrelationsToDistances(Distances distances){\n  for (int i=1; i <= distances.getNtax(); i++) {\n    for (int j=i + 1; j <= distances.getNtax(); j++) {\n      distances.set(i,j,(1.0 - distances.get(i,j) * distances.get(i,j)));\n    }\n  }\n}\n"}
{"nl": "private ctor to prevent instantiation", "code": "private Singletons(){\n}\n"}
{"nl": "Escape commas in the string using the default escape char", "code": "public static String escapeString(String str){\n  return escapeString(str,ESCAPE_CHAR,COMMA);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PagesClearCacheQuery(VkApiClient client,String url){\n  super(client,\"pages.clearCache\",OkResponse.class);\n  url(url);\n}\n"}
{"nl": "Deletes an edge of a specific type going to a specific concept", "code": "void deleteEdgeTo(Schema.EdgeLabel type,Concept toConcept){\n  GraphTraversal<Vertex,Edge> traversal=mindmapsGraph.getTinkerPopGraph().traversal().V(getBaseIdentifier()).outE(type.getLabel()).as(\"edge\").otherV().hasId(((ConceptImpl)toConcept).getBaseIdentifier()).select(\"edge\");\n  if (traversal.hasNext())   traversal.next().remove();\n}\n"}
{"nl": "required for Externalizable", "code": "public TypeQueryExtensionsImpl(){\n}\n"}
{"nl": "Stores newly created legion", "code": "private void storeLegion(Legion legion){\n  storeLegion(legion,false);\n}\n"}
{"nl": "Common code for translating exceptions", "code": "private SAXParserImpl newSAXParserImpl() throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException {\n  SAXParserImpl saxParserImpl;\n  try {\n    saxParserImpl=new SAXParserImpl(this,features);\n  }\n catch (  SAXNotSupportedException e) {\n    throw e;\n  }\ncatch (  SAXNotRecognizedException e) {\n    throw e;\n  }\ncatch (  SAXException se) {\n    throw new ParserConfigurationException(se.getMessage());\n  }\n  return saxParserImpl;\n}\n"}
{"nl": "Types of communities to return", "code": "public GroupsGetQueryWithExtended filter(GroupsGetFilter... value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getDoc().getNumberOfReads() > 0;\n}\n"}
{"nl": "Populate the dialog", "code": "public void populate(List<SLDDataInterface> sldDataList){\n  List<ScaleSLDData> scaleDataList=new ArrayList<ScaleSLDData>();\n  for (  SLDDataInterface sldData : sldDataList) {\n    List<ScaleSLDData> scaleSLDDataList=ScalePanelUtils.containsScales(sldData);\n    if ((scaleSLDDataList != null) && !scaleSLDDataList.isEmpty()) {\n      scaleDataList.addAll(scaleSLDDataList);\n    }\n  }\n  dataModel.loadData(scaleDataList);\n}\n"}
{"nl": "This method will load the legion information", "code": "private void loadLegionInfo(Legion legion){\n  if (legion == null) {\n    return;\n  }\n  legion.setLegionMembers(DAOManager.getDAO(LegionMemberDAO.class).loadLegionMembers(legion.getLegionId()));\n  legion.setAnnouncementList(DAOManager.getDAO(LegionDAO.class).loadAnnouncementList(legion.getLegionId()));\n  legion.setLegionEmblem(DAOManager.getDAO(LegionDAO.class).loadLegionEmblem(legion.getLegionId()));\n  legion.setLegionWarehouse(DAOManager.getDAO(LegionDAO.class).loadLegionStorage(legion));\n  if (legionRanking.containsKey(legion.getLegionId())) {\n    legion.setLegionRank(legionRanking.get(legion.getLegionId()));\n  }\n  DAOManager.getDAO(LegionDAO.class).loadLegionHistory(legion);\n}\n"}
{"nl": "Extract microdump-free logcat for more informative crash reports", "code": "@VisibleForTesting protected static List<String> extractLogcatFromReader(BufferedReader reader,int maxLines) throws IOException {\n  return extractLogcatFromReaderInternal(reader,maxLines);\n}\n"}
{"nl": "Set country", "code": "public LeadsCheckUserQuery country(String value){\n  return unsafeParam(\"country\",value);\n}\n"}
{"nl": "Build system menu from module", "code": "private SysMenu buildMenuFromModule(Module module){\n  SysMenu sysMenu=new SysMenu();\n  sysMenu.setId(module.getId());\n  sysMenu.setCode(module.getCode());\n  sysMenu.setName(module.getName());\n  sysMenu.setParent(module.getParent());\n  sysMenu.setUrl(module.getUrl());\n  sysMenu.setController(module.getController());\n  sysMenu.setTemplate(module.getTemplate());\n  sysMenu.setOrderId(module.getOrderId());\n  return sysMenu;\n}\n"}
{"nl": "Extracts the colorPrimary color attribute of the passing Context's theme", "code": "@ColorInt public int extractPrimaryColorFrom(Context context){\n  return extractIntAttribute(context,PRIMARY);\n}\n"}
{"nl": "Removes last point if the first and last point are the same", "code": "public void removeIfFirstLastSame(){\n  if (wktPointList != null) {\n    if (wktPointList.size() > 1) {\n      WKTPoint firstPoint=wktPointList.get(0);\n      WKTPoint lastPoint=wktPointList.get(wktPointList.size() - 1);\n      if (firstPoint.equals(lastPoint)) {\n        wktPointList.remove(wktPointList.size() - 1);\n      }\n    }\n  }\n}\n"}
{"nl": "Change the facing attribute of the Minecraft block", "code": "static IBlockState applyFacing(IBlockState state,Facing facing){\n  for (  IProperty prop : (java.util.Set<IProperty>)state.getProperties().keySet()) {\n    if (prop.getName().equals(\"facing\")) {\n      if (prop.getValueClass() == EnumFacing.class) {\n        EnumFacing current=(EnumFacing)state.getValue(prop);\n        if (!current.getName().equalsIgnoreCase(facing.name())) {\n          return state.withProperty(prop,EnumFacing.valueOf(facing.name()));\n        }\n      }\n else       if (prop.getValueClass() == EnumOrientation.class) {\n        EnumOrientation current=(EnumOrientation)state.getValue(prop);\n        if (!current.getName().equalsIgnoreCase(facing.name())) {\n          return state.withProperty(prop,EnumOrientation.valueOf(facing.name()));\n        }\n      }\n    }\n  }\n  return state;\n}\n"}
{"nl": "Test confirming fix for ACT-1731", "code": "@Deployment(resources={\"org/activiti/engine/test/api/task/TaskQueryTest.testProcessDefinition.bpmn20.xml\"}) public void testIncludeBinaryVariables() throws Exception {\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"oneTaskProcess\",Collections.singletonMap(\"binaryVariable\",(Object)\"It is I, le binary\".getBytes()));\n  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n  assertNotNull(task);\n  taskService.setVariableLocal(task.getId(),\"binaryTaskVariable\",(Object)\"It is I, le binary\".getBytes());\n  task=taskService.createTaskQuery().taskId(task.getId()).includeProcessVariables().singleResult();\n  assertNotNull(task);\n  assertNotNull(task.getProcessVariables());\n  byte[] bytes=(byte[])task.getProcessVariables().get(\"binaryVariable\");\n  assertEquals(\"It is I, le binary\",new String(bytes));\n  task=taskService.createTaskQuery().taskId(task.getId()).includeTaskLocalVariables().singleResult();\n  assertNotNull(task);\n  assertNotNull(task.getTaskLocalVariables());\n  bytes=(byte[])task.getTaskLocalVariables().get(\"binaryTaskVariable\");\n  assertEquals(\"It is I, le binary\",new String(bytes));\n}\n"}
{"nl": "skip n bytes", "code": "public void skip(long n) throws IOException {\n  seek(getPosition() + n);\n}\n"}
{"nl": "Instantiates and tests the", "code": "public static <T extends ExtensionPoint>T newInstance(Class<T> clazz,String pluginId) throws SparklerException {\n  try {\n    T instance=clazz.newInstance();\n    instance.init(JOB_CONTEXT,pluginId);\n    return instance;\n  }\n catch (  InstantiationException|IllegalAccessException e) {\n    throw new SparklerException(\"Could not create instance of \" + clazz.getName(),e);\n  }\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void v(String tag,String msg){\n  if (isDebug) {\n    Log.v(tag,msg);\n  }\n}\n"}
{"nl": "if we receive any result, we can delete the temp retry info file", "code": "public void onPatchServiceResult(boolean isUpgradePatch){\n  if (!isRetryEnable) {\n    TinkerLog.w(TAG,\"onPatchServiceResult retry disabled, just return\");\n    return;\n  }\n  if (!isUpgradePatch) {\n    TinkerLog.w(TAG,\"onPatchServiceResult is not upgrade patch, just return\");\n    return;\n  }\n  if (retryInfoFile.exists()) {\n    SharePatchFileUtil.safeDeleteFile(retryInfoFile);\n  }\n  if (tempPatchFile.exists()) {\n    SharePatchFileUtil.safeDeleteFile(tempPatchFile);\n  }\n}\n"}
{"nl": "Resolve a given query using the rule base", "code": "public QueryAnswers resolve(MatchQuery inputQuery,boolean materialise){\n  Query query=new ReasonerMatchQuery(inputQuery,graph);\n  return resolveQuery(query,materialise);\n}\n"}
{"nl": "Helper method to build the url to the given test file", "code": "private String toUrl(String testFile) throws MalformedURLException {\n  return new File(TestUtil.TEST_DATA_FOLDER + \"pac\",testFile).toURI().toURL().toString();\n}\n"}
{"nl": "Writes the packet to the given buffer", "code": "@Override public void writePacketData(PacketBuffer buf) throws IOException {\n  buf.writeInt(ChannelManager.getID(channel));\n  channel.write(buf,packet);\n}\n"}
{"nl": "Converts an input stream to a byte array", "code": "public static byte[] convertInputStreamToByteArray(InputStream inputStream,int inputStreamLength) throws IOException {\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  int blockSize=DEFAULT_BUFFER_SIZE;\n  byte[] buffer=new byte[blockSize];\n  int left=inputStreamLength;\n  while (left > 0) {\n    int read=inputStream.read(buffer,0,left > blockSize ? blockSize : left);\n    if (read == -1)     break;\n    out.write(buffer,0,read);\n    left-=read;\n  }\n  return out.toByteArray();\n}\n"}
{"nl": "Set pts", "code": "public MessagesGetLongPollHistoryQuery pts(Integer value){\n  return unsafeParam(\"pts\",value);\n}\n"}
{"nl": "compare each other Value, equals", "code": "public boolean equals(double other_x,double other_y){\n  if (this.x == other_x && this.y == other_y) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Creates a new command tag update", "code": "public CommandTagUpdate(){\n}\n"}
{"nl": "Formats a message picking the format string depending on number of arguments", "code": "public static String formatElementListString(Iterable<String> values,String oneElementMessage,String twoOrThreeElementsMessage,String moreThenThreeElementsMessage){\n  int size=Iterables.size(values);\n  if (size <= 1) {\n    return String.format(oneElementMessage,Iterables.getFirst(values,\"<validation error>\"));\n  }\n else   if (size <= 3) {\n    return String.format(twoOrThreeElementsMessage,atMostTwo(values,size),Iterables.getLast(values));\n  }\n else {\n    return String.format(moreThenThreeElementsMessage,atMostTwo(values,size),size - 2);\n  }\n}\n"}
{"nl": "Thread UNSAFE This method should be called in completeHandler", "code": "public void outputComplete(){\n  final int bufferIndex=(int)(outputCnt % bufferSize);\n  inputs.set(bufferIndex,null);\n  outputs.set(bufferIndex,null);\n  outputCnt++;\n  outputThreadLock.unlock();\n}\n"}
{"nl": "Calculate number of security servers", "code": "public static int calculateSecurityServerCount(int externalsessioncount){\n  Float f=(externalsessioncount / (float)2000.00);\n  f=(float)Math.ceil(f);\n  if (f > 0.0) {\n    f++;\n  }\n  final int i=f.intValue();\n  return i;\n}\n"}
{"nl": "sync collapsed nodes from summary to main viewer", "code": "public static void syncCollapsedFromSummaryToTaxonomyViewer(DataTable table,MainViewer mainViewer){\n  Document doc=mainViewer.getDir().getDocument();\n  mainViewer.getCollapsedIds().clear();\n  if (table.getCollapsed(ClassificationType.Taxonomy.toString()) != null)   mainViewer.getCollapsedIds().addAll(table.getCollapsed(ClassificationType.Taxonomy.toString()));\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] bytes,int offset,int size){\n  try {\n    os.write(bytes,offset,size);\n  }\n catch (  IOException ioe) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Make a singleton MutableContextSet from a context pair", "code": "public static MutableContextSet singleton(String key,String value){\n  MutableContextSet set=new MutableContextSet();\n  set.add(key,value);\n  return set;\n}\n"}
{"nl": "recursively visit all nodes that we need to use due to user selection", "code": "private static boolean visitNodesToUseRec(ViewerBase viewer,Node v,NodeSet toUse){\n  boolean use=viewer.getSelected(v);\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    if (visitNodesToUseRec(viewer,e.getTarget(),toUse))     use=true;\n  }\n  if (use)   toUse.add(v);\n  return use;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesDeleteChatPhotoQuery(VkApiClient client,UserActor actor,int chatId){\n  super(client,\"messages.deleteChatPhoto\",DeleteChatPhotoResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n}\n"}
{"nl": "This will be used to remove a particular blocks useful in case of deletion of some of the blocks in case of retention or may be some other scenario", "code": "public void removeTableBlocks(List<String> segmentsToBeRemoved,AbsoluteTableIdentifier absoluteTableIdentifier){\n  Object lockObject=tableLockMap.get(absoluteTableIdentifier);\n  if (null == lockObject) {\n    return;\n  }\n  Map<BlockInfo,AbstractIndex> map=tableBlocksMap.get(absoluteTableIdentifier);\n  if (null == map || map.isEmpty()) {\n    return;\n  }\n  Map<String,List<BlockInfo>> segmentIdToBlockInfoMap=segmentIdToBlockListMap.get(absoluteTableIdentifier);\n  if (null == segmentIdToBlockInfoMap || segmentIdToBlockInfoMap.isEmpty()) {\n    return;\n  }\nsynchronized (lockObject) {\n    for (    String segmentId : segmentsToBeRemoved) {\n      List<BlockInfo> tableBlockInfoList=segmentIdToBlockInfoMap.remove(segmentId);\n      if (null == tableBlockInfoList) {\n        continue;\n      }\n      Iterator<BlockInfo> tableBlockInfoIterator=tableBlockInfoList.iterator();\n      while (tableBlockInfoIterator.hasNext()) {\n        BlockInfo info=tableBlockInfoIterator.next();\n        map.remove(info);\n      }\n    }\n  }\n}\n"}
{"nl": "save to a file", "code": "public void save(String fileName) throws IOException {\n  try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName),1000000)){\n    for (    String key : keySet()) {\n      Integer value=get(key);\n      if (value != null)       w.write(key + \"\\t\" + value+ \"\\n\");\n    }\n  }\n }\n"}
{"nl": "Draw the foreground layer for the GuiContainer (everything in front of the items)", "code": "protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){\n  this.fontRendererObj.drawString(this.name,8,6,4210752);\n  this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(),8,this.ySize - 96 + 2,4210752);\n}\n"}
{"nl": "unpublish all pigeon services from registry", "code": "public static void unpublishAllServices() throws RpcException {\n  try {\n    ServicePublisher.unpublishAllServices();\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while unpublishing all services\",e);\n  }\n}\n"}
{"nl": "Logs with warn level", "code": "public static void warn(@Nullable Class<?> caller,String message,Object... args){\n  android.util.Log.w(tag(caller),String.format(Locale.ENGLISH,message,args));\n}\n"}
{"nl": "Asserts the null hypothesis that the observed counts follow the given distribution implied by expected, using a G-test", "code": "public static void assertGTest(final double[] expected,long[] observed,double alpha){\n  if (gTest(expected,observed) < alpha) {\n    StringBuilder msgBuffer=new StringBuilder();\n    DecimalFormat df=new DecimalFormat(\"#.##\");\n    msgBuffer.append(\"G test failed\");\n    msgBuffer.append(\" p-value = \");\n    msgBuffer.append(gTest(expected,observed));\n    msgBuffer.append(\". \\n\");\n    msgBuffer.append(\"value\\texpected\\tobserved\\n\");\n    for (int i=0; i < expected.length; i++) {\n      msgBuffer.append(df.format(expected[i]));\n      msgBuffer.append(\"\\t\\t\");\n      msgBuffer.append(observed[i]);\n      msgBuffer.append(\"\\n\");\n    }\n    msgBuffer.append(\"This test can fail randomly due to sampling error with probability \");\n    msgBuffer.append(alpha);\n    msgBuffer.append(\".\");\n    Assert.fail(msgBuffer.toString());\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public RbnfScannerProviderImpl(){\n  this.cache=new HashMap();\n}\n"}
{"nl": "Returns true if this policy allows resizing the top edge", "code": "public boolean topAllowed(){\n  return (myFlags & TOP_EDGE) != 0;\n}\n"}
{"nl": "Adds a Job, and starts a Scheduler when none was yet started", "code": "protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){\n  String jobName=clazz.getName();\n  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();\n  JobDetail job=new JobDetail(jobName,jobGroup,clazz);\n  job.setDurability(false);\n  job.setVolatility(true);\n  job.setDescription(jobName);\n  try {\n    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);\n    if (scheduler == null) {\n      if (schedulerProperties == null) {\n        schedulerProperties=getDefaultSchedulerProperties();\n      }\n      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();\n      scheduler.start();\n    }\n    Date date=scheduler.scheduleJob(job,trigger);\n    Logger.info(this,\"Scheduled job \" + jobName + \", next trigger is on \"+ date);\n  }\n catch (  ParseException e) {\n    Logger.error(this,\"Cron expression '\" + cronExpression + \"' has an exception. Throwing IllegalArgumentException\",e);\n    throw new IllegalArgumentException(e);\n  }\ncatch (  SchedulerException e) {\n    Logger.error(this,\"Unable to schedule job \" + jobName,e);\n  }\n}\n"}
{"nl": "Creates the table for the repositories", "code": "protected TableViewer createTable(Composite parent,int span){\n  Table table=new Table(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE| SWT.FULL_SELECTION);\n  GridData data=new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL);\n  data.horizontalSpan=span;\n  table.setLayoutData(data);\n  TableLayout layout=new TableLayout();\n  layout.addColumnData(new ColumnWeightData(100,true));\n  table.setLayout(layout);\n  TableColumn col=new TableColumn(table,SWT.NONE);\n  col.setResizable(true);\n  return new TableViewer(table);\n}\n"}
{"nl": "Synthesize a vocalization which fits better for given target, in addition, impose intonation from closest best vocalization according to given feature definition for intonation selection", "code": "private AudioInputStream synthesizeImposedIntonation(AudioFileFormat aft,Element domElement) throws SynthesisException {\n  SourceTargetPair imposeF0Data=vSelector.getBestCandidatePairtoImposeF0(domElement);\n  int targetIndex=imposeF0Data.getTargetUnitIndex();\n  int sourceIndex=imposeF0Data.getSourceUnitIndex();\n  Log.d(Mary.LOG,\"Synthesizing candidate \" + sourceIndex + \" with intonation contour \"+ targetIndex);\n  if (targetIndex == sourceIndex) {\n    return synthesizeSelectedVocalization(sourceIndex,aft,domElement);\n  }\n  return imposeF0ContourOnVocalization(sourceIndex,targetIndex,aft,domElement);\n}\n"}
{"nl": "freqt: frequency transformation", "code": "public static void freqt(double c1[],int m1,double c2[],int m2,double a){\n  double b=1 - a * a;\n  double freqt_buff[]=new double[(m2 + m2 + 2)];\n  int g=m2 + 1;\n  for (int i=-m1; i <= 0; i++) {\n    if (0 <= m2)     freqt_buff[g + 0]=c1[-i] + a * (freqt_buff[0]=freqt_buff[g + 0]);\n    if (1 <= m2)     freqt_buff[g + 1]=b * freqt_buff[0] + a * (freqt_buff[1]=freqt_buff[g + 1]);\n    for (int j=2; j <= m2; j++)     freqt_buff[g + j]=freqt_buff[j - 1] + a * ((freqt_buff[j]=freqt_buff[g + j]) - freqt_buff[g + j - 1]);\n  }\n  System.arraycopy(freqt_buff,g,c2,0,m2);\n}\n"}
{"nl": "The Filter type number", "code": "FilterType(final int number){\n  this.number=number;\n}\n"}
{"nl": "Set user id", "code": "protected AppsGetScoreQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Writes an integer to the output stream, byte-swapping as necessary", "code": "public static void writeInt(DataOutputStream dis,boolean isBigEndian,int val) throws IOException {\n  if (!isBigEndian) {\n    writeLittleEndianInt(dis,val);\n  }\n else {\n    dis.writeInt(val);\n  }\n}\n"}
{"nl": "Increases game time by a minute", "code": "public void increase(){\n  gameTime++;\n  if (getMinute() == 0) {\n    checkDayTimeChange();\n  }\n}\n"}
{"nl": "Request for camera permission", "code": "private void captureImageWithPermission(){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n    int rc=ActivityCompat.checkSelfPermission(this,Manifest.permission.CAMERA);\n    if (rc == PackageManager.PERMISSION_GRANTED) {\n      captureImage();\n    }\n else {\n      Log.w(TAG,\"Camera permission is not granted. Requesting permission\");\n      requestCameraPermission();\n    }\n  }\n else {\n    captureImage();\n  }\n}\n"}
{"nl": "Quest acquired: %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_ACQUIRE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300617,value0);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected Object handleGetObject(String key) throws MissingResourceException {\n  Object o=null;\n  for (int i=0; i < this.bundles.length; i++) {\n    load(i);\n    try {\n      o=this.bundles[i].getObject(key);\n    }\n catch (    MissingResourceException e) {\n      if (i == this.bundles.length - 1) {\n        throw e;\n      }\n    }\n    if (o != null) {\n      break;\n    }\n  }\n  return o;\n}\n"}
{"nl": "returns the splits as an array", "code": "public Split[] asArray(){\n  Split[] result=new Split[size()];\n  int count=0;\n  for (Iterator it=iterator(); it.hasNext(); ) {\n    result[count++]=(Split)it.next();\n  }\n  return result;\n}\n"}
{"nl": "Notifies the EventHandler immediately prior to this processor shutting down", "code": "private void notifyShutdown(){\n  if (eventHandler instanceof LifecycleAware) {\n    try {\n      ((LifecycleAware)eventHandler).onShutdown();\n    }\n catch (    final Throwable ex) {\n      exceptionHandler.handleOnShutdownException(ex);\n    }\n  }\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return locked;\n}\n"}
{"nl": "calculate the lost experience must be called before setexp", "code": "public void calculateExpLoss(){\n  long expLost=XPLossEnum.getExpLoss(this.level,this.getExpNeed());\n  int unrecoverable=(int)(expLost * 0.33333333);\n  int recoverable=(int)expLost - unrecoverable;\n  long allExpLost=recoverable + this.expRecoverable;\n  if (this.getExpShown() > unrecoverable) {\n    this.exp=this.exp - unrecoverable;\n  }\n else {\n    this.exp=this.exp - this.getExpShown();\n  }\n  if (this.getExpShown() > recoverable) {\n    this.expRecoverable=allExpLost;\n    this.exp=this.exp - recoverable;\n  }\n else {\n    this.expRecoverable=this.expRecoverable + this.getExpShown();\n    this.exp=this.exp - this.getExpShown();\n  }\n  if (this.expRecoverable > getExpNeed() * 0.25) {\n    this.expRecoverable=Math.round(getExpNeed() * 0.25);\n  }\n  if (this.getPlayer() != null) {\n    PacketSendUtility.sendPacket(getPlayer(),new SM_STATUPDATE_EXP(getExpShown(),getExpRecoverable(),getExpNeed(),this.getCurrentReposteEnergy(),this.getMaxReposteEnergy(),this.getCurrentEventExp()));\n  }\n}\n"}
{"nl": "calculate each vector's distance Square", "code": "public double distSquared(Math_Vector other){\n  double distX=this.x - other.x;\n  double distY=this.y - other.y;\n  return distX * distX + distY * distY;\n}\n"}
{"nl": "Get the gap between two specific edges of widgets", "code": "private static int gap(ConstraintWidget widget1,Direction direction1,ConstraintWidget widget2,Direction direction2){\nswitch (direction1) {\ncase NORTH:\ncase WEST:\n    return getPos(widget1,direction1) - getPos(widget2,direction2);\ncase SOUTH:\ncase EAST:\n  return getPos(widget2,direction2) - getPos(widget1,direction1);\n}\nreturn 0;\n}\n"}
{"nl": "emit event, when book changed", "code": "public Observable<Book> observeChangingBooks(){\n  return changingBookSubject;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosCopyQuery(VkApiClient client,UserActor actor,int ownerId,int photoId){\n  super(client,\"photos.copy\",Integer.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  photoId(photoId);\n}\n"}
{"nl": "verifies that two vectors are close (sup norm)", "code": "protected void assertClose(double[] m,double[] n,double tolerance){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors not same length\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(m[i],n[i],tolerance);\n  }\n}\n"}
{"nl": "Does a HTTP DELETE with an empty body", "code": "public Response doDelete(String url){\n  return doDelete(url,null);\n}\n"}
{"nl": "fetches the next read that matches the search pattern", "code": "private IReadBlock fetchNext(){\n  while (!canceled.get() && allReadsIterator.hasNext()) {\n    IReadBlock readBlock=allReadsIterator.next();\n    if (FindSelection.doesMatch(findSelector,readBlock,pattern))     return readBlock;\n  }\n  return null;\n}\n"}
{"nl": "Set fields", "code": "public NewsfeedGetQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "read bytes until next end of line", "code": "public String readLine() throws IOException {\n  StringBuilder buf=new StringBuilder();\n  byte b=(byte)read();\n  while (b != '\\n') {\n    buf.append((char)b);\n    b=(byte)in.read();\n    if (getPosition() >= length())     break;\n  }\n  return buf.toString();\n}\n"}
{"nl": "Set peer id", "code": "public MessagesDeleteDialogQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n"}
{"nl": "Remove appear event", "code": "@Override public void unbindAppearEvent(WXComponent component){\n  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getInnerView());\n  if (appearMap == null) {\n    return;\n  }\n  AppearData appearData=appearMap.get(component.getRef());\n  if (appearData == null) {\n    return;\n  }\n  appearData.hasAppear=false;\n  if (!appearData.hasDisappear) {\n    appearMap.remove(component.getRef());\n  }\n}\n"}
{"nl": "Determine if we are storing the images in internal or external storage", "code": "private Uri whichContentStore(){\n  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n    return android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n  }\n else {\n    return android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI;\n  }\n}\n"}
{"nl": "Change given image view tint", "code": "static void changeImageViewTint(ImageView imageView,int color){\n  imageView.setColorFilter(color);\n}\n"}
{"nl": "Indicates that the transaction for the incoming message is canceled by a command class", "code": "public boolean isTransactionCanceled(){\n  return transactionCanceled;\n}\n"}
{"nl": "check if nullable object interfaces", "code": "public static boolean isNullableObjectInterface(HashSet<String> resolvedTypesSet){\n  int intCountTypesToInspect=resolvedTypesSet.size();\n  if (resolvedTypesSet.contains(Types.strClassNotResolved)) {\n    --intCountTypesToInspect;\n  }\n  if (resolvedTypesSet.contains(Types.strNull)) {\n    --intCountTypesToInspect;\n  }\n  if (intCountTypesToInspect == 0) {\n    return false;\n  }\n  for (  String strTypeToInspect : resolvedTypesSet) {\n    if (strTypeToInspect.charAt(0) != '\\\\' && !strTypeToInspect.equals(Types.strNull)) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Key typed", "code": "public void keyTyped(KeyEvent ke){\n}\n"}
{"nl": "Starts the output of a set of data", "code": "public void begin(int size){\n}\n"}
{"nl": "Sends this packet to the given player", "code": "public void toPlayer(EntityPlayerMP player){\n  player.connection.sendPacket(new PacketWrapper(channel,new Packet(this)));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketReportQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,ReportReason reason){\n  super(client,\"market.report\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  reason(reason);\n}\n"}
{"nl": "Set return system", "code": "public FriendsGetListsQuery returnSystem(Boolean value){\n  return unsafeParam(\"return_system\",value);\n}\n"}
{"nl": "Intercepts te", "code": "public Response interceptResponse(Request request,Response response){\n  Response finalResponse=response;\n  Log.d(\"Response\",String.format(\"%s \\n%s\",request.url(),request.headers().toString()));\n  try {\n    ResponseBody responseBody=response.body();\n    String responseBodyString=responseBody.string();\n    Log.d(\"Response data\",responseBodyString);\n    finalResponse=response.newBuilder().body(ResponseBody.create(responseBody.contentType(),responseBodyString)).build();\n  }\n catch (  IOException e) {\n    Log.e(\"Response\",\"Error while parsing the response.\");\n  }\n  return finalResponse;\n}\n"}
{"nl": "Return system albums", "code": "public VideoGetAlbumsQuery needSystem(Boolean value){\n  return unsafeParam(\"need_system\",value);\n}\n"}
{"nl": "waits until all viewers are uptodate", "code": "public void WaitUntilAllViewersAreUptoDate(){\n  while (!isAllViewersUptodate()) {\n    try {\n      Thread.sleep(10);\n    }\n catch (    Exception e) {\n    }\n  }\n}\n"}
{"nl": "true - call the phone number and leave a voice message of the authorization code false - send the code by SMS (default)", "code": "public AuthSignupQuery voice(Boolean value){\n  return unsafeParam(\"voice\",value);\n}\n"}
{"nl": "is this taxon, or one of its ancestors, disabled? Taxa that are disabled are ignored by LCA algorithm", "code": "public static boolean isTaxonDisabled(Integer taxonId){\n  return taxonId == null || taxonomyClassification.getIdMapper().getDisabledIds().contains(taxonId);\n}\n"}
{"nl": "show the dialog", "code": "public boolean apply(){\n  setVisible(true);\n  return !isCanceled();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetRequestsQueryWithFields(VkApiClient client,UserActor actor,int groupId,UserField... fields){\n  super(client,\"groups.getRequests\",GetRequestsFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  fields(fields);\n}\n"}
{"nl": "Gets whether an access path can point to the same runtime object as another or to an object reachable through the other", "code": "public AccessPath mayAlias(AccessPath taintedAP,AccessPath referencedAP){\n  if (taintedAP.equals(referencedAP))   return taintedAP;\n  if (taintedAP.isInstanceFieldRef() || taintedAP.isLocal()) {\n    if (taintedAP.getPlainValue() != referencedAP.getPlainValue())     return null;\n    if (referencedAP.getFieldCount() == 0)     return taintedAP;\n    if (!referencedAP.isInstanceFieldRef())     return null;\n  }\n  if (taintedAP.isStaticFieldRef())   if (!referencedAP.isStaticFieldRef())   return null;\n  return getReferencedAPBase(taintedAP,referencedAP.getFields());\n}\n"}
{"nl": "Increment the references", "code": "void incrementRefCounter(){\nsynchronized (mutex) {\n    refCounter++;\n  }\n}\n"}
{"nl": "Create a new ThresholdValues", "code": "public ThresholdValues(){\n}\n"}
{"nl": "packagid + newResPath", "code": "public static boolean saveDynamicResInfo(HashMap<String,String> dynamicRes){\n  boolean result=true;\n  SharedPreferences sp=getDynamicInfoSp();\n  SharedPreferences.Editor editor=sp.edit();\n  for (  String packageId : dynamicRes.keySet()) {\n    String pendingPath=dynamicRes.get(packageId);\n    editor.putString(getDynamicResPathKey(packageId),pendingPath);\n  }\n  editor.commit();\n  Log.i(TAG,\"apply res :\" + dynamicRes);\n  injectResources();\n  return result;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsGetTypesQuery(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"docs.getTypes\",GetTypesResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n}\n"}
{"nl": "Add a color to the config", "code": "public ResourcesPoet addColor(String name,String value){\n  Element element=document.createElement(\"color\");\n  element.setAttribute(\"name\",name);\n  element.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(element);\n  return this;\n}\n"}
{"nl": "Returns whether a menu path is enabled", "code": "public boolean isMenuPathEnabled(@NotNull String... path){\n  return getMenuFixture().isMenuPathEnabled(path);\n}\n"}
{"nl": "Cancels the current running interaction", "code": "public void cancelInteraction(){\n  finishInteraction(myLastMouseX,myLastMouseY,ourLastStateMask,true);\n}\n"}
{"nl": "Helper method to serialize a POJO into JSON", "code": "private Response buildJSONResponse(Object o) throws JsonProcessingException {\n  return newFixedLengthResponse(MAPPER.writeValueAsString(o));\n}\n"}
{"nl": "Walks up PSI tree of local file, checking PsiNamedElements", "code": "public static void searchInScope(PsiElement originalElement,Processor<BuildElement> processor){\n  boolean topLevelScope=true;\n  PsiElement element=originalElement;\n  while (!(element instanceof PsiFileSystemItem)) {\n    PsiElement parent=element.getParent();\n    if (parent instanceof BuildFile) {\n      if (!((BuildFile)parent).searchSymbolsInScope(processor,topLevelScope ? element : null)) {\n        return;\n      }\n    }\n else     if (parent instanceof FunctionStatement) {\n      topLevelScope=false;\n      for (      Parameter param : ((FunctionStatement)parent).getParameters()) {\n        if (!processor.process(param)) {\n          return;\n        }\n      }\n    }\n else     if (parent instanceof ForStatement) {\n      for (      Expression expr : ((ForStatement)parent).getForLoopVariables()) {\n        if (expr instanceof TargetExpression && !processor.process(expr)) {\n          return;\n        }\n      }\n    }\n else     if (parent instanceof StatementList) {\n      if (!visitChildAssignmentStatements((BuildElement)parent,(Processor)processor)) {\n        return;\n      }\n    }\n    element=parent;\n  }\n}\n"}
{"nl": "Find a faces within a local image", "code": "@NotNull public List<Emotion> findEmotionFaces(@NotNull String image){\n  return emotionBuilder.emotionRecognition(image).withResult();\n}\n"}
{"nl": "listen notify1", "code": "private void notify_1(){\n  bleManager.notifyDevice(UUID_SERVICE,UUID_NOTIFY_1,notifyCallback_1);\n}\n"}
{"nl": "Delete the app", "code": "@RequestMapping(value=\"/apps/del\",method=RequestMethod.POST) public JsonResponse delApp(@RequestParam(\"appName\") String appName){\n  Response<Boolean> delResp=appService.delete(appName);\n  if (!delResp.isSuccess()) {\n    Logs.error(\"failed to delete app({}), cause: {}\",appName,delResp.getErr());\n  }\n  return JsonResponse.ok(delResp.getData());\n}\n"}
{"nl": "Fire timeout event about the watched object to the <i>TimeoutObserver</i>", "code": "protected void fireTimeoutOccured(Map<WatchedObject,Collection<WatchedObject>> watchedObjects) throws Exception {\n  for (  Collection<WatchedObject> bucket : watchedObjects.values()) {\n    _observer.timeoutOccured(bucket);\n  }\n}\n"}
{"nl": "add header View with the head height and expandheight", "code": "public void addHeaderView(View view,int viewHeight,int expandHeight){\n  if (expandHeight != -1) {\n    mHeaderViewExpandHeight=ScreenUtil.dip2px(mContext,expandHeight);\n  }\n  mHeaderViews.clear();\n  mHeaderView=view;\n  if (mHeaderView.getLayoutParams() == null) {\n    mHeaderView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,ScreenUtil.dip2px(mContext,viewHeight)));\n  }\n  markHeaderViewHeight(mHeaderView);\n  mHeaderView.getLayoutParams().height=0;\n  mHeaderViews.add(mHeaderView);\n  if (mAdapter != null) {\n    if (!(mAdapter instanceof XWrapAdapter)) {\n      mAdapter=new XWrapAdapter(mHeaderViews,mFootViews,mAdapter);\n    }\n  }\n}\n"}
{"nl": "Creates a MutableContextSet from an existing iterable of Map Entries", "code": "public static MutableContextSet fromEntries(Iterable<Map.Entry<String,String>> iterable){\n  MutableContextSet set=new MutableContextSet();\n  set.addAll(iterable);\n  return set;\n}\n"}
{"nl": "check if there is a valid svn directory", "code": "private boolean doesSVNDirectoryExist(){\n  boolean isSVNFolder=false;\n  try {\n    projectStatus=SVNWorkspaceRoot.peekResourceStatusFor(project);\n    ;\n    isSVNFolder=(projectStatus != null) && projectStatus.hasRemote();\n  }\n catch (  final SVNException e) {\n    Shell shell=null;\n    if (getContainer() != null) {\n      shell=getContainer().getShell();\n    }\n    SVNUIPlugin.openError(shell,null,null,e);\n  }\n  return isSVNFolder;\n}\n"}
{"nl": "Determines the width of this view", "code": "private int measureLong(int measureSpec){\n  int result;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {\n    result=specSize;\n  }\n else {\n    final int count=mViewPager.getAdapter().getCount();\n    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count + 1) * mRadius + (count - 1) * mIndicatorBetween);\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return result;\n}\n"}
{"nl": "Construct BrowserLogEntry", "code": "public BrowserLogEntry(String message){\n  this.message=message;\n}\n"}
{"nl": "Add a range to the composite ranges", "code": "public CompositeRange add(Range range){\n  _ranges.add(range);\n  ((AllSpacePredicate)this.getPredicate()).addOperand(range.getPredicate());\n  return this;\n}\n"}
{"nl": "Maintain the aspect ratio so the resulting image does not look smooshed", "code": "public int[] calculateAspectRatio(int origWidth,int origHeight){\n  int newWidth=this.targetWidth;\n  int newHeight=this.targetHeight;\n  if (newWidth <= 0 && newHeight <= 0) {\n    newWidth=origWidth;\n    newHeight=origHeight;\n  }\n else   if (newWidth > 0 && newHeight <= 0) {\n    newHeight=(newWidth * origHeight) / origWidth;\n  }\n else   if (newWidth <= 0 && newHeight > 0) {\n    newWidth=(newHeight * origWidth) / origHeight;\n  }\n else {\n    double newRatio=newWidth / (double)newHeight;\n    double origRatio=origWidth / (double)origHeight;\n    if (origRatio > newRatio) {\n      newHeight=(newWidth * origHeight) / origWidth;\n    }\n else     if (origRatio < newRatio) {\n      newWidth=(newHeight * origWidth) / origHeight;\n    }\n  }\n  int[] retval=new int[2];\n  retval[0]=newWidth;\n  retval[1]=newHeight;\n  return retval;\n}\n"}
{"nl": "pastes lines into table guided by an attribute", "code": "public void pasteClipboardByAttribute(String attribute) throws IOException {\n  final Clipboard clipboard=Clipboard.getSystemClipboard();\n  Set<Pair<Integer,Integer>> selectedPairs=getSelectedPairs();\n  if (selectedPairs.size() > 0) {\n    BitSet rows=getSelectedSampleIndices();\n    String contents=clipboard.getString().trim().replaceAll(\"\\r\\n\",\"\\n\").replaceAll(\"\\r\",\"\\n\");\n    String[] lines=contents.split(\"\\n\");\n    if (lines.length > 0) {\n      final int guideCol=dataGrid.findColumn(attribute);\n      final Map<String,String> attributeValue2Line=new HashMap<>();\n      int inputLineNumber=0;\n      String[] toPaste=new String[getNumberOfSelectedSamples()];\n      int expandedLineNumber=0;\n      for (int row=rows.nextSetBit(1); row != -1; row=rows.nextSetBit(row + 1)) {\n        String value=dataGrid.getValue(row,guideCol);\n        if (!attributeValue2Line.containsKey(value)) {\n          if (inputLineNumber == lines.length)           break;\n          toPaste[expandedLineNumber++]=lines[inputLineNumber];\n          attributeValue2Line.put(value,lines[inputLineNumber++]);\n        }\n else {\n          if (expandedLineNumber == toPaste.length)           break;\n          toPaste[expandedLineNumber++]=attributeValue2Line.get(value);\n        }\n      }\n      if (attributeValue2Line.size() != lines.length) {\n        throw new IOException(\"Mismatch between number of lines pasted (\" + lines.length + \") and number of attribute values (\"+ attributeValue2Line.size()+ \")\");\n      }\n      paste(toPaste);\n    }\n  }\n}\n"}
{"nl": "debug log", "code": "public static void d(String msg){\n  if (LOG_ENABLE) {\n    Log.d(TAG,buildMsg(msg));\n  }\n}\n"}
{"nl": "Creates a tokenization,/stemming pipeline", "code": "public static AnalysisEngine defaultAnalysisEngine(){\n  try {\n    if (defaultAnalysisEngine == null)     defaultAnalysisEngine=AnalysisEngineFactory.createEngine(AnalysisEngineFactory.createEngineDescription(SentenceAnnotator.getDescription(),TokenizerAnnotator.getDescription()));\n    return defaultAnalysisEngine;\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "Destroyer Kunax Skill's AI", "code": "private void useSkill(int skillId,VisibleObject target){\n  SkillEngine.getInstance().getSkill(getOwner(),skillId,65,target).useSkill();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoAddAlbumQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.addAlbum\",AddAlbumResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "is a selection find possible", "code": "public boolean isSelectionFindable(){\n  return mainViewer.getSelectedNodes().size() > 0;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  File lastOpenFile=ProgramProperties.getFile(MeganProperties.MEGANFILE);\n  MeganAndRMAFileFilter meganAndRMAFileFilter=new MeganAndRMAFileFilter();\n  meganAndRMAFileFilter.setAllowGZipped(true);\n  meganAndRMAFileFilter.setAllowZipped(true);\n  meganAndRMAFileFilter.add(MeganizedDAAFileFilter.getInstance());\n  getDir().notifyLockInput();\n  CompareWindow viewer=(CompareWindow)getParent();\n  Collection<File> files;\n  try {\n    files=ChooseFileDialog.chooseFilesToOpen(viewer,lastOpenFile,meganAndRMAFileFilter,meganAndRMAFileFilter,ev,\"Add MEGAN file\");\n  }\n  finally {\n    getDir().notifyUnlockInput();\n  }\n  if (files != null && files.size() > 0) {\n    StringBuilder buf=new StringBuilder();\n    for (    File file : files) {\n      if (file != null && file.exists() && file.canRead()) {\n        ProgramProperties.put(MeganProperties.MEGANFILE,file.getAbsolutePath());\n        buf.append(\"add file='\").append(file.getPath()).append(\"';\");\n      }\n    }\n    execute(buf.toString());\n  }\n}\n"}
{"nl": "Creates a new instance of DocumentNGramSymWinDistroGraph", "code": "public DocumentNGramSymWinDistroGraph(){\n  InitGraphs();\n}\n"}
{"nl": "Creates a new instance of SpectralSpellInteroperator", "code": "public SpectralSpellInteroperator(String sInputFile,String[] sArgs){\n  InputFile=sInputFile;\n  Args=sArgs;\n}\n"}
{"nl": "Update user roles", "code": "@PUT @Path(\"/roles\") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value=\"Update roles for a list of users and applications\") @Timed public Response updateUserRoles(@ApiParam(name=\"userRoleList\",value=\"Please see model example\",required=true) final UserRoleList userRoleList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  List<Map> statuses=updateUserRole(userRoleList,authorizationHeader);\n  return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put(\"assignmentStatuses\",statuses).build()).build();\n}\n"}
{"nl": "Path to which we will save the screenshots", "code": "public Builder path(@NonNull File path){\n  if (path == null)   throw new IllegalArgumentException(\"path == null\");\n  this.path=path;\n  return this;\n}\n"}
{"nl": "Make a PATCH call with JSON body", "code": "public Call patch(String url,JSONObject params,Callback callback){\n  MediaType JSON=MediaType.parse(\"application/json; charset=utf-8\");\n  RequestBody body=RequestBody.create(JSON,params.toString());\n  Request request=new Builder().url(url).patch(body).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n"}
{"nl": "completely uncollapse all nodes", "code": "public void uncollapseAll(){\n  getCollapsedIds().clear();\n  updateTree();\n}\n"}
{"nl": "Perform an inspect command to check the container's run status", "code": "protected void verifyContainerProperty(String propertyPath,Object expectedValue) throws Throwable {\n  CommandInput commandInput=new CommandInput().withDockerUri(getDockerVersionedUri()).withCredentials(getDockerCredentials()).withProperty(DockerAdapterCommandExecutor.DOCKER_CONTAINER_ID_PROP_NAME,containerId);\n  host.testStart(1);\n  getTestCommandExecutor().inspectContainer(commandInput,null);\n  host.testWait();\n}\n"}
{"nl": "Make sure source dependencies are picked recursively", "code": "public void testCircularDependencies() throws IOException {\n  VirtualFile project1=createGradleProjectToImport(dir,module(1),module(3));\n  VirtualFile project2=createGradleProjectToImport(dir,module(2),module(1));\n  VirtualFile project3=createGradleProjectToImport(dir,module(3),module(2));\n  configureTopLevelProject(dir,Arrays.asList(module(1),module(2),module(3)),Collections.<String>emptySet());\n  Map<String,VirtualFile> projects=moduleListToMap(GradleModuleImporter.getRelatedProjects(project3,getProject()));\n  assertEquals(3,projects.size());\n  assertEquals(project1,projects.get(pathToGradleName(module(1))));\n  assertEquals(project2,projects.get(pathToGradleName(module(2))));\n  assertEquals(project3,projects.get(pathToGradleName(module(3))));\n}\n"}
{"nl": "Returns true if field queueSize is set (has been assigned a value) and false otherwise", "code": "public boolean isSetQueueSize(){\n  return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID);\n}\n"}
{"nl": "Converts a DataTagShortTermLog object into a string representation", "code": "public final String toString(){\n  StringBuffer str=new StringBuffer();\n  str.append(getTagId());\n  str.append('\\t');\n  str.append(getTagName());\n  str.append('\\t');\n  if (getTagValue() != null) {\n    str.append(getTagValue());\n  }\n else {\n    str.append(\"null\");\n  }\n  str.append('\\t');\n  str.append(getTagValueDesc());\n  str.append('\\t');\n  str.append(getTagDataType());\n  str.append('\\t');\n  str.append(getSourceTimestamp());\n  str.append('\\t');\n  str.append(getDaqTimestamp());\n  str.append('\\t');\n  str.append(getServerTimestamp());\n  str.append('\\t');\n  str.append(getTagQualityCode());\n  str.append('\\t');\n  if ((getTagQualityDesc() != null) && (getTagQualityDesc().equals(\"\"))) {\n    str.append(\"null\");\n  }\n else {\n    str.append(getTagQualityDesc());\n  }\n  str.append('\\t');\n  str.append(getTagMode());\n  str.append('\\t');\n  str.append(getTagDir());\n  str.append('\\t');\n  str.append(new Timestamp(System.currentTimeMillis()));\n  return str.toString();\n}\n"}
{"nl": "Register to receive notification of repository creation and disposal", "code": "public void addRepositoryListener(ISVNListener listener){\n  repositoryListeners.add(listener);\n}\n"}
{"nl": "ping the url, throw exception if occur error", "code": "public static int ping(String url) throws Exception {\n  URL u=new URL(url);\n  HttpURLConnection c=(HttpURLConnection)u.openConnection();\n  c.connect();\n  int code=c.getResponseCode();\n  log.debug(\"ping=\" + url + \", response.code=\"+ code);\n  c.disconnect();\n  return code;\n}\n"}
{"nl": "Return an additional \"likes\" field", "code": "public PhotosGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "must x and y coordinates by zoomed together?", "code": "@Override public boolean isXYLocked(){\n  return true;\n}\n"}
{"nl": "executes the given transactional command with the custom number of retries", "code": "public <R>R executeTransactionalCommand(final TransactionalCommand<R> command,final int retryCount) throws MithraBusinessException {\n  return this.executeTransactionalCommand(command,new TransactionStyle(this.transactionTimeout,retryCount));\n}\n"}
{"nl": "Sort order", "code": "public FriendsGetRequestsQueryWithNeedMutual sort(FriendsGetRequestsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Return a tap target for the menu item from the given toolbar", "code": "public static ToolbarTapTarget forToolbarMenuItem(android.widget.Toolbar toolbar,@IdRes int menuItemId,CharSequence title,@Nullable CharSequence description){\n  return new ToolbarTapTarget(toolbar,menuItemId,title,description);\n}\n"}
{"nl": "This function returns true when the iNum is between the limits [iMin,iMax]", "code": "public final boolean between(int iNum,int iMin,int iMax){\n  return (iNum >= iMin) && (iNum <= iMax);\n}\n"}
{"nl": "Choose a given flavor", "code": "public void choose(Flavor item){\n  checkInit();\n  int index=mFlavors.indexOf(item);\n  mPreferences.edit().putInt(PREFERENCE_FLAVOR_KEY,index).apply();\n}\n"}
{"nl": "It does nothing, but look as a cool huh", "code": "public void ready(){\n}\n"}
{"nl": "Verifies that the connection is open", "code": "protected void ensureOpen() throws IllegalStateException {\n  if (closed) {\n    throw new IllegalStateException(\"Forbidden call on a closed connection.\");\n  }\n}\n"}
{"nl": "sub the value to this Math_Vector", "code": "public Math_Vector sub(Math_Vector other){\n  this.x-=other.x;\n  this.y-=other.y;\n  return this;\n}\n"}
{"nl": "Converts field annotations from Dexlib to Jimple", "code": "void handleFieldAnnotation(Host h,Field f){\n  Set<? extends Annotation> aSet=f.getAnnotations();\n  if (aSet != null && !aSet.isEmpty()) {\n    List<Tag> tags=handleAnnotation(aSet,null);\n    if (tags != null)     for (    Tag t : tags)     if (t != null) {\n      h.addTag(t);\n      Debug.printDbg(\"add field annotation: \",t);\n    }\n  }\n}\n"}
{"nl": "TODO: Javadoc", "code": "private int calcSignum(boolean isPositive){\n  if ((years == null || years.signum() == 0) && (months == null || months.signum() == 0) && (days == null || days.signum() == 0)&& (hours == null || hours.signum() == 0)&& (minutes == null || minutes.signum() == 0)&& (seconds == null || seconds.signum() == 0)) {\n    return 0;\n  }\n  if (isPositive) {\n    return 1;\n  }\n else {\n    return -1;\n  }\n}\n"}
{"nl": "Check if the URL already is registered", "code": "private boolean hasURL(URL url){\n  URL[] urls=getURLs();\n  for (int i=0; i < urls.length; i++) {\n    if (urls[i].equals(url))     return (true);\n  }\n  return (false);\n}\n"}
{"nl": "download file from storage server", "code": "public int download_file1(String file_id,long file_offset,long download_bytes,String local_filename) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.download_file(parts[0],parts[1],file_offset,download_bytes,local_filename);\n}\n"}
{"nl": "Show badge at index", "code": "public void showBadgeAtIndex(int itemIndex,int badgeText,@ColorInt int badgeColor){\n  if (itemIndex < 0 || itemIndex > spaceItems.size()) {\n    throwArrayIndexOutOfBoundsException(itemIndex);\n  }\n else {\n    RelativeLayout badgeView=badgeList.get(itemIndex);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n      badgeView.setBackground(BadgeHelper.makeShapeDrawable(badgeColor));\n    }\n else {\n      badgeView.setBackgroundDrawable(BadgeHelper.makeShapeDrawable(badgeColor));\n    }\n    BadgeItem badgeItem=new BadgeItem(itemIndex,badgeText,badgeColor);\n    BadgeHelper.showBadge(badgeView,badgeItem,shouldShowBadgeWithNinePlus);\n    badgeSaveInstanceHashMap.put(itemIndex,badgeItem);\n  }\n}\n"}
{"nl": "register one global type", "code": "public void addGlobalTypeDecl(XSTypeDefinition decl){\n  fGlobalTypeDecls.put(decl.getName(),decl);\n  if (decl instanceof XSComplexTypeDecl) {\n    ((XSComplexTypeDecl)decl).setNamespaceItem(this);\n  }\n else   if (decl instanceof XSSimpleTypeDecl) {\n    ((XSSimpleTypeDecl)decl).setNamespaceItem(this);\n  }\n}\n"}
{"nl": "Loads the abbreviations list from the given path and stores its items under the given class name", "code": "private void loadList(String listPath,String className) throws IOException {\n  BufferedReader in=new BufferedReader(new InputStreamReader(FileTools.openResourceFileAsStream(listPath.toString()),StandardCharsets.UTF_8));\n  Set<String> items=new HashSet<String>();\n  String line;\n  while ((line=in.readLine()) != null) {\n    line=line.trim();\n    if (line.startsWith(\"#\") || (line.length() == 0)) {\n      continue;\n    }\n    int end=line.indexOf('#');\n    if (-1 != end) {\n      line=line.substring(0,end).trim();\n      if (line.length() == 0) {\n        continue;\n      }\n    }\n    items.add(line);\n    items.add(line.toUpperCase());\n    char firstChar=line.charAt(0);\n    if (Character.isLowerCase(firstChar)) {\n      firstChar=Character.toUpperCase(firstChar);\n      items.add(firstChar + line.substring(1));\n    }\n  }\n  in.close();\n  this.getClassMembersMap().put(className,items);\n}\n"}
{"nl": "Checks to make sure that the actual quantile position (normalized rank) of value is within tolerance of quantile", "code": "private void checkQuantileError(double[] data,double value,double quantile,double tolerance,double referenceValue){\n  final double n=(double)data.length;\n  int nLess=0;\n  for (  double val : data) {\n    if (val < value) {\n      nLess++;\n    }\n  }\n  if (Double.isNaN(referenceValue)) {\n    assertTrue(Double.isNaN(value));\n  }\n else   if (Double.isInfinite(value)) {\n    assertTrue(value == referenceValue);\n  }\n else {\n    assertTrue(\"Quantile error exceeded: value returned = \" + value + \" Reference value = \"+ referenceValue+ \" quantile = \"+ quantile+ \" n = \"+ n+ \" error = \"+ (quantile - (double)nLess / n),FastMath.abs(quantile - (double)nLess / n) < tolerance);\n  }\n}\n"}
{"nl": "Load weights and values from the given file", "code": "public void load(String joinFileName,InputStream joinPdfStream,InputStream joinTreeStream,String trickyPhonesFile) throws IOException, MaryConfigurationException {\n  jcf=new JoinCostFeatures(joinFileName);\n  assert featureDef != null : \"Expected to have a feature definition, but it is null!\";\n  HTSCARTReader htsReader=new HTSCARTReader();\n  int numStates=1;\n  PhoneTranslator phTranslator=new PhoneTranslator(new FileInputStream(trickyPhonesFile));\n  try {\n    joinTree=htsReader.load(numStates,joinTreeStream,joinPdfStream,PdfFileFormat.join,featureDef,phTranslator);\n  }\n catch (  Exception e) {\n    IOException ioe=new IOException(\"Cannot load join model trees\");\n    ioe.initCause(e);\n    throw ioe;\n  }\n}\n"}
{"nl": "Save fingerprint to a file", "code": "public void saveFingerprintAsFile(byte[] fingerprint,String filename){\n  FileOutputStream fileOutputStream;\n  try {\n    fileOutputStream=new FileOutputStream(filename);\n    fileOutputStream.write(fingerprint);\n    fileOutputStream.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Below method will be used to start the intermediate file merging", "code": "private void startIntermediateMerging(File[] intermediateFiles){\n  File file=new File(parameters.getTempFileLocation() + File.separator + parameters.getTableName()+ System.nanoTime()+ CarbonCommonConstants.MERGERD_EXTENSION);\n  IntermediateFileMerger merger=new IntermediateFileMerger(parameters,intermediateFiles,file);\n  executorService.submit(merger);\n}\n"}
{"nl": "store an element, while the SL is unlocked", "code": "public IObjectInfo<T> addUnlocked(T subject){\n  return store_impl(subject);\n}\n"}
{"nl": "Is the given value in the set of ranges", "code": "public boolean isIncluded(int value){\n  for (  Range r : ranges) {\n    if (r.start <= value && value <= r.end) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Required for Externalizable", "code": "public GroupByValue(){\n}\n"}
{"nl": "Answers list, for example: [\"yes\",\"no\",\"maybe\"]", "code": "public PollsEditQuery addAnswers(String value){\n  return unsafeParam(\"add_answers\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PollsAddVoteQuery(VkApiClient client,UserActor actor,int pollId,int answerId){\n  super(client,\"polls.addVote\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  pollId(pollId);\n  answerId(answerId);\n}\n"}
{"nl": "Creates a new instance of DocumentNGramDistroGraph", "code": "public DocumentNGramDistroGraph(){\n  InitGraphs();\n}\n"}
{"nl": "For boundaries, this does nothing;", "code": "@Override public void loadData(){\n  return;\n}\n"}
{"nl": "load the data from the table", "code": "public static Data load(String table,W q){\n  return Helper.load(table,q,Data.class);\n}\n"}
{"nl": "Create a template parser", "code": "private TemplateParser(){\n  registerDefaultMacros();\n}\n"}
{"nl": "Execute the different managers given their positions, it represents their dependencies", "code": "private void execute(){\n  for (  AbstractAnnotationManager manager : managers)   manager.execute(target,context);\n}\n"}
{"nl": "update the enable state", "code": "public void updateEnableState(){\n  if (SwingUtilities.isEventDispatchThread())   super.updateEnableState();\n  for (  MenuItem menuItem : menuItem2CommandFX.keySet()) {\n    ICommand command=menuItem2CommandFX.get(menuItem);\n    menuItem.setDisable(!command.isApplicable());\n    if (command instanceof ICheckBoxCommand) {\n      ((CheckMenuItem)menuItem).setSelected(((ICheckBoxCommand)command).isSelected());\n    }\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  SelectedBlock selectedBlock=viewer.getSelectedBlock();\n  return viewer.getAlignment().getNumberOfSequences() > 0 && selectedBlock.isSelected() && selectedBlock.getFirstRow() > 0;\n}\n"}
{"nl": "converts an image to JPEG", "code": "public static byte[] convertImageToJPEG(BufferedImage img,float quality) throws IOException {\n  return bufferedImageToJPEG(img,quality);\n}\n"}
{"nl": "Creates a new instance of WordEvaluatorAdapter", "code": "public WordEvaluatorAdapter(){\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  if (inspectorWindow.getDataTree().getSelectionCount() == 0)   inspectorWindow.clear();\n else   inspectorWindow.deleteSelectedNodes();\n}\n"}
{"nl": "This method will handle announcement and self intro changement", "code": "public void handleLegionRequest(int exOpcode,Player activePlayer,String text){\nswitch (exOpcode) {\ncase 0x09:\n    changeAnnouncement(activePlayer,text);\n  break;\ncase 0x0A:\nchangeSelfIntro(activePlayer,text);\nbreak;\n}\n}\n"}
{"nl": "This method creates a HashMap with all skills assigned to their representative cooldownIds", "code": "public void initializeCooldownGroups(){\n  cooldownGroups=new HashMap<Integer,ArrayList<Integer>>();\n  for (  SkillTemplate skillTemplate : skillTemplates) {\n    int cooldownId=skillTemplate.getCooldownId();\n    if (!cooldownGroups.containsKey(cooldownId)) {\n      cooldownGroups.put(cooldownId,new ArrayList<Integer>());\n    }\n    cooldownGroups.get(cooldownId).add(skillTemplate.getSkillId());\n  }\n}\n"}
{"nl": "is this node available?", "code": "@Override public boolean isAvailable(){\n  return true;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();\n  if (samples.size() > 0)   execute(\"set nodeShape=square sample='\" + Basic.toString(samples,\"' '\") + \"';\");\n}\n"}
{"nl": "generate graph", "code": "private static void generateGraph(IDataProcessStatus dataProcessTaskStatus,SchemaInfo info,String tableName,String partitionID,CarbonDataLoadSchema schema,String factStoreLocation,List<LoadMetadataDetails> loadMetadataDetails) throws GraphGeneratorException {\n  DataLoadModel model=new DataLoadModel();\n  model.setCsvLoad(null != dataProcessTaskStatus.getCsvFilePath() || null != dataProcessTaskStatus.getFilesToProcess());\n  model.setSchemaInfo(info);\n  model.setTableName(dataProcessTaskStatus.getTableName());\n  model.setTaskNo(\"1\");\n  model.setBlocksID(dataProcessTaskStatus.getBlocksID());\n  model.setFactTimeStamp(readCurrentTime());\n  model.setEscapeCharacter(dataProcessTaskStatus.getEscapeCharacter());\n  model.setQuoteCharacter(dataProcessTaskStatus.getQuoteCharacter());\n  model.setCommentCharacter(dataProcessTaskStatus.getCommentCharacter());\n  if (null != loadMetadataDetails && !loadMetadataDetails.isEmpty()) {\n    model.setLoadNames(CarbonDataProcessorUtil.getLoadNameFromLoadMetaDataDetails(loadMetadataDetails));\n    model.setModificationOrDeletionTime(CarbonDataProcessorUtil.getModificationOrDeletionTimesFromLoadMetadataDetails(loadMetadataDetails));\n  }\n  boolean hdfsReadMode=dataProcessTaskStatus.getCsvFilePath() != null && dataProcessTaskStatus.getCsvFilePath().startsWith(\"hdfs:\");\n  int allocate=null != dataProcessTaskStatus.getCsvFilePath() ? 1 : dataProcessTaskStatus.getFilesToProcess().size();\n  String outputLocation=CarbonProperties.getInstance().getProperty(\"store_output_location\",\"../carbon-store/system/carbon/etl\");\n  GraphGenerator generator=new GraphGenerator(model,hdfsReadMode,partitionID,factStoreLocation,allocate,schema,\"0\",outputLocation);\n  generator.generateGraph();\n}\n"}
{"nl": "server shell text edit init", "code": "private void serverTextCommandEditInit(){\n  serverTextEdit.setEditable(true);\n  serverTextEdit.setVisible(true);\n  serverTextEdit.setPromptText(\"Input your shell command\");\n}\n"}
{"nl": "get distance to the container in a direction caches the distance", "code": "public float connectedDistanceToRoot(ScoutWidget[] list,Direction direction){\n  float value=recursiveConnectedDistanceToRoot(list,direction);\n  cacheRootDistance(direction,value);\n  return value;\n}\n"}
{"nl": "Type of object from which to unsubscribe", "code": "protected NewsfeedUnsubscribeQuery type(NewsfeedItemType value){\n  return unsafeParam(\"type\",value);\n}\n"}
{"nl": "Compute the key to access a matrix element", "code": "private int computeKey(int row,int column){\n  return row * columns + column;\n}\n"}
{"nl": "Check if the given unit index is a sentence start", "code": "private boolean isSentenceStart(int index){\n  FeatureVector fv=features.getFeatureVector(index);\n  return fv.getByteFeature(fiSentenceStart) == 0 && fv.getByteFeature(fiWordStart) == 0 && (!isHalfphone || fv.getByteFeature(fiLR) == fvLR_L);\n}\n"}
{"nl": "SCIPIO: Checks if the interval passed is a valid one", "code": "public static boolean checkValidInterval(String interval){\n  return Arrays.asList(TIME_INTERVALS).contains(interval);\n}\n"}
{"nl": "Zeros the array", "code": "public void clear(){\n  for (  int[] segment : segments) {\n    Arrays.fill(segment,0);\n  }\n  maxIndex=-1;\n  numberOfNonZeroEntries=0;\n}\n"}
{"nl": "Constructs a configuration exception with the specified type, feature/property identifier, and error message", "code": "public XMLConfigurationException(short type,String identifier,String message){\n  super(message);\n  fType=type;\n  fIdentifier=identifier;\n}\n"}
{"nl": "Listener Methods", "code": "@Override public void onItemClicked(View view,Flavor item,int position){\n  Scoop.getInstance().choose(item);\n  mAdapter.setCurrentFlavor(item);\n  Intent restart=new Intent(this,ScoopSettingsActivity.class);\n  setResult(RESULT_OK);\n  finish();\n  startActivity(restart);\n  overridePendingTransition(0,0);\n}\n"}
{"nl": "Add to result collection only items witch suits player's level", "code": "private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){\n  int playerLevel=player.getLevel();\n  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();\n  for (  ExtractedItemsCollection collection : itemsCollections) {\n    if (collection.getMinLevel() > playerLevel) {\n      continue;\n    }\n    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {\n      continue;\n    }\n    result.add(collection);\n  }\n  return result;\n}\n"}
{"nl": "write file", "code": "public static boolean writeFile(String filePath,List<String> contentList,boolean append){\n  if (ListUtil.isEmpty(contentList)) {\n    return false;\n  }\n  FileWriter fileWriter=null;\n  try {\n    makeDirs(filePath);\n    fileWriter=new FileWriter(filePath,append);\n    int i=0;\n    for (    String line : contentList) {\n      if (i++ > 0) {\n        fileWriter.write(\"\\r\\n\");\n      }\n      fileWriter.write(line);\n    }\n    return true;\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"IOException occurred. \",e);\n  }\n finally {\n    IOUtil.close(fileWriter);\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showBiPlot=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Utility function to draw a circle text centered at coordinates (x, y)", "code": "public static void drawRoundRectText(Graphics2D g,Font font,Color textColor,String text,int x,int y){\n  Graphics2D g2=(Graphics2D)g.create();\n  g2.setFont(font);\n  FontMetrics fm=g2.getFontMetrics();\n  int padding=2;\n  Rectangle2D bounds=fm.getStringBounds(text,g2);\n  double th=bounds.getHeight() + padding * 2;\n  double tw=bounds.getWidth() + padding * 2;\n  int radius=(int)(Math.min(th,tw) / 3);\n  g2.fillRoundRect((int)(x - tw / 2),(int)(y - th / 2),(int)tw,(int)th,radius,radius);\n  g2.setColor(textColor);\n  g2.drawString(text,(int)(x - tw / 2 + padding),(int)(y - th / 2 + fm.getAscent()));\n  if (DEBUG) {\n    g2.setColor(Color.RED);\n    g2.drawLine(x - 50,y,x + 50,y);\n    g2.drawLine(x,y - 50,x,y + 50);\n  }\n  g2.dispose();\n}\n"}
{"nl": "the xor operation is used to ensure the order of operands does not impact the hashcode", "code": "public int hashCode(){\n  this.combineOperands();\n  return operands.hashCode();\n}\n"}
{"nl": "Utility method to create a radio button", "code": "protected Button createRadioButton(Composite parent,String label,int span){\n  Button button=new Button(parent,SWT.RADIO);\n  button.setText(label);\n  GridData data=new GridData();\n  data.horizontalSpan=span;\n  button.setLayoutData(data);\n  return button;\n}\n"}
{"nl": "Deletes an entry with the matching Key and RecordID", "code": "public boolean deleteKey(DataType key,RecordID rid){\n  throw new BPlusTreeException(\"BPlusTree#DeleteKey Not Implemented!\");\n}\n"}
{"nl": "Called when one or more attributes of the configuration has changed", "code": "public void updated(int flags){\n  myNotifyDirty|=flags;\n  myFolderConfigDirty|=flags;\n  myModificationCount++;\n  if (myManager.getStateVersion() != myProjectStateVersion) {\n    myNotifyDirty|=MASK_PROJECT_STATE;\n    myFolderConfigDirty|=MASK_PROJECT_STATE;\n    myDevice=null;\n    myState=null;\n  }\n  if (myBulkEditingCount == 0) {\n    int changed=myNotifyDirty;\n    if (myListeners != null) {\n      for (      ConfigurationListener listener : myListeners) {\n        listener.changed(changed);\n      }\n    }\n    myNotifyDirty=0;\n  }\n}\n"}
{"nl": "store an element", "code": "public IObjectInfo<T> add(T subject){\n  return addImpl(subject);\n}\n"}
{"nl": "Convert data from given ByteBuffer to hex", "code": "public static String toHexStream(ByteBuffer data){\n  StringBuilder result=new StringBuilder();\n  int counter=0;\n  int b;\n  while (data.hasRemaining()) {\n    b=data.get() & 0xff;\n    result.append(String.format(\"%02X \",b));\n    counter++;\n    if (counter % 16 == 0) {\n      result.append(\"\\n\");\n    }\n  }\n  return result.toString();\n}\n"}
{"nl": "Convert a given Row to a list of writables, given the specified Schema", "code": "public static List<Writable> rowToWritables(Schema schema,Row row){\n  List<Writable> ret=new ArrayList<>();\n  for (int i=0; i < row.size(); i++) {\nswitch (schema.getType(i)) {\ncase Double:\n      ret.add(new DoubleWritable(row.getDouble(i)));\n    break;\ncase Float:\n  ret.add(new FloatWritable(row.getFloat(i)));\nbreak;\ncase Integer:\nret.add(new IntWritable(row.getInt(i)));\nbreak;\ncase Long:\nret.add(new LongWritable(row.getLong(i)));\nbreak;\ncase String:\nret.add(new Text(row.getString(i)));\nbreak;\ndefault :\nthrow new IllegalStateException(\"Illegal type\");\n}\n}\nreturn ret;\n}\n"}
{"nl": "Creates a new instance of NotificationAdapter", "code": "public NotificationAdapter(){\n}\n"}
{"nl": "Default is Little endian provide a prepared BteBuffer if you want to use an other order", "code": "public DataStructure(byte[] raw,Format format){\n  this(ByteBuffer.wrap(raw).order(ByteOrder.LITTLE_ENDIAN),format);\n}\n"}
{"nl": "write to file", "code": "public void write(IOutputWriter writer,Map<Integer,ListOfLongs> classId2locations) throws IOException {\n  writer.writeInt(map.size());\n  for (  Object key : map.keySet()) {\n    writer.writeInt((Integer)key);\n    final Integer sum=map.get(key);\n    writer.writeInt(sum);\n    if (classId2locations != null) {\n      final ListOfLongs list=classId2locations.get(key);\n      if (list.size() != sum)       throw new IOException(\"Wrong number of locations: \" + list.size() + \", should be: \"+ sum);\n      for (int i=0; i < list.size(); i++)       writer.writeLong(list.get(i));\n    }\n  }\n}\n"}
{"nl": "Wraps the given strings in the standard conflict syntax", "code": "private static String wrapWithMergeConflict(String original,String added){\n  String sep=\"\\n\";\n  return \"<<<<<<< Original\" + sep + original+ sep+ \"=======\"+ sep+ added+ \">>>>>>> Added\"+ sep;\n}\n"}
{"nl": "Put a ViewModel into the cache", "code": "void put(int key,MvvmViewModel cacheViewModel){\n  cache.put(key,cacheViewModel);\n}\n"}
{"nl": "get scope global rather than selected", "code": "public boolean isGlobalScope(){\n  return true;\n}\n"}
{"nl": "publish the service to registry", "code": "public static <T>void publishService(String url) throws RpcException {\n  try {\n    ServicePublisher.publishService(url);\n  }\n catch (  RegistryException t) {\n    throw new RpcException(\"error while publishing service:\" + url,t);\n  }\n}\n"}
{"nl": "Force Minecraft to resize its GUI", "code": "private void forceResize(int width,int height){\n  boolean devEnv=(Boolean)Launch.blackboard.get(\"fml.deobfuscatedEnvironment\");\n  String resizeMethodName=devEnv ? \"resize\" : \"func_71370_a\";\n  Class[] cArgs=new Class[2];\n  cArgs[0]=int.class;\n  cArgs[1]=int.class;\n  Method resize;\n  try {\n    resize=Minecraft.class.getDeclaredMethod(resizeMethodName,cArgs);\n    resize.setAccessible(true);\n    resize.invoke(Minecraft.getMinecraft(),width,height);\n  }\n catch (  NoSuchMethodException e) {\n    e.printStackTrace();\n  }\ncatch (  SecurityException e) {\n    e.printStackTrace();\n  }\ncatch (  IllegalAccessException e) {\n    e.printStackTrace();\n  }\ncatch (  IllegalArgumentException e) {\n    e.printStackTrace();\n  }\ncatch (  InvocationTargetException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Checks whether the given service is a GCM BaseIntentService", "code": "private boolean isGCMBaseIntentService(SootClass currentClass){\n  while (currentClass.hasSuperclass()) {\n    if (currentClass.getSuperclass().getName().equals(AndroidEntryPointConstants.GCMBASEINTENTSERVICECLASS))     return true;\n    currentClass=currentClass.getSuperclass();\n  }\n  return false;\n}\n"}
{"nl": "create a ConversationListFragment instance", "code": "public static ConversationListFragment newInstance(String anchorId,boolean isNormalStyle){\n  ConversationListFragment fragment=new ConversationListFragment();\n  Bundle bundle=new Bundle();\n  bundle.putString(ARG_ANCHOOR,anchorId);\n  bundle.putBoolean(ARG_IS_NORMAL,isNormalStyle);\n  fragment.setArguments(bundle);\n  return fragment;\n}\n"}
{"nl": "Dummy implemented methods", "code": "@Override public void copyContentlet(Contentlet arg0,Folder arg1,User arg2,boolean arg3,boolean arg4,Contentlet arg5){\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected void handleComputeFields(int julianDay){\n  int[] fields=new int[3];\n  jdToCE(julianDay,getJDEpochOffset(),fields);\n  int year;\n  int era;\n  int year;\n  if (fields[0] <= 0) {\n    int era=0;\n    year=1 - fields[0];\n  }\n else {\n    era=1;\n    year=fields[0];\n  }\n  internalSet(19,fields[0]);\n  internalSet(0,era);\n  internalSet(1,year);\n  internalSet(2,fields[1]);\n  internalSet(5,fields[2]);\n  internalSet(6,30 * fields[1] + fields[2]);\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public UsersGetFollowersQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Collection id", "code": "protected MarketReorderAlbumsQuery albumId(int value){\n  return unsafeParam(\"album_id\",value);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public StringCharacterIterator(String text,int pos){\n  this(text,0,text.length(),pos);\n}\n"}
{"nl": "Add an Long column with the specified min/max allowable values", "code": "public Builder addColumnLong(String name,Long minAllowedValue,Long maxAllowedValue){\n  return addColumn(new LongMetaData(name,minAllowedValue,maxAllowedValue));\n}\n"}
{"nl": "returns true if this highlight object is equal to the other (compares xIndex and dataSetIndex)", "code": "public boolean equalTo(Highlight h){\n  if (h == null)   return false;\n else {\n    return (this.mDataSetIndex == h.mDataSetIndex && this.mXIndex == h.mXIndex && this.mStackIndex == h.mStackIndex);\n  }\n}\n"}
{"nl": "Deny default construction; we need a SymtolTable!", "code": "public XMLDTDLoader(){\n  this(new SymbolTable());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioSaveQuery(VkApiClient client,UserActor actor,int server,String audio){\n  super(client,\"audio.save\",Utils.buildParametrizedType(List.class,Audio.class));\n  accessToken(actor.getAccessToken());\n  server(server);\n  audio(audio);\n}\n"}
{"nl": "Item identifier", "code": "protected NewsfeedIgnoreItemQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "Called when there was an error connecting", "code": "@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){\n  exception.printStackTrace();\n  Log.e(\"TrafficService\",\"Error connecting: \" + exception.getMessage());\n  onDisconnect(false);\n}\n"}
{"nl": "Add all question in single page", "code": "private void addQuestions(ApiResult ar,String questions,int page,long fromDate,long toDate,String tag,NotifyMe notifyMe) throws JSONException, IOException {\n  String url=CloseVoteFinder.getInstance().getApiUrl(questions,page,fromDate,toDate,tag);\n  addQuestions(ar,url,tag,notifyMe);\n}\n"}
{"nl": "Get a transaction builder for inserting/updating stuff", "code": "public static Transaction startTransaction(SQLiteDatabase writableDb){\n  return new Transaction(writableDb);\n}\n"}
{"nl": "returns a string like \"Sequence[a, b, c]\"", "code": "@Override public String toString(){\n  return \"Sequence\" + sequence;\n}\n"}
{"nl": "Below method will be used to start file based merge", "code": "private void startFileBasedMerge() throws CarbonSortKeyAndGroupByException {\n  try {\n    dataSorterAndWriterExecutorService.shutdown();\n    dataSorterAndWriterExecutorService.awaitTermination(2,TimeUnit.DAYS);\n  }\n catch (  InterruptedException e) {\n    throw new CarbonSortKeyAndGroupByException(\"Problem while shutdown the server \",e);\n  }\n}\n"}
{"nl": "utility for resizing an array of weighted addresses", "code": "public static WeightedAddress[] resizeArray(WeightedAddress[] array,int size){\n  WeightedAddress[] result=new WeightedAddress[size];\n  System.arraycopy(array,0,result,0,array.length);\n  for (int i=array.length; i < result.length; i++)   result[i]=new WeightedAddress();\n  return result;\n}\n"}
{"nl": "assuming that the FileIterator has just returned the header line of a fastA or fastQ record, writes the full text of the match", "code": "public static void skipFastAText(FileIterator it,boolean isFastA){\n  if (isFastA) {\n    while (it.hasNext() && it.peekNextByte() != '>') {\n      it.next();\n    }\n  }\n else {\n    if (it.hasNext()) {\n      it.next();\n    }\n    if (it.hasNext()) {\n      it.next();\n    }\n    if (it.hasNext()) {\n      it.next();\n    }\n  }\n}\n"}
{"nl": "verifies that two matrices are equal", "code": "public static void assertEquals(FieldMatrix<? extends FieldElement<?>> expected,FieldMatrix<? extends FieldElement<?>> observed){\n  Assert.assertNotNull(\"Observed should not be null\",observed);\n  if (expected.getColumnDimension() != observed.getColumnDimension() || expected.getRowDimension() != observed.getRowDimension()) {\n    StringBuilder messageBuffer=new StringBuilder();\n    messageBuffer.append(\"Observed has incorrect dimensions.\");\n    messageBuffer.append(\"\\nobserved is \" + observed.getRowDimension() + \" x \"+ observed.getColumnDimension());\n    messageBuffer.append(\"\\nexpected \" + expected.getRowDimension() + \" x \"+ expected.getColumnDimension());\n    Assert.fail(messageBuffer.toString());\n  }\n  for (int i=0; i < expected.getRowDimension(); ++i) {\n    for (int j=0; j < expected.getColumnDimension(); ++j) {\n      FieldElement<?> eij=expected.getEntry(i,j);\n      FieldElement<?> oij=observed.getEntry(i,j);\n      Assert.assertEquals(eij,oij);\n    }\n  }\n}\n"}
{"nl": "constructs an instance and sets to the given format", "code": "public ReadBlockRMA2Formatter(String format){\n  this.format=format;\n  decode(format);\n}\n"}
{"nl": "Google Play Services Lifecycle methods", "code": "@Override public void onConnected(Bundle connectionHint){\n  Log.i(TAG,\"onConnected: Is connected to Google Play Services\");\n}\n"}
{"nl": "Creates a cached copy of a typeface from the given path", "code": "private Typeface cacheFont(String fontPath){\n  Typeface cached=mTypefaceMap.get(fontPath);\n  if (cached == null) {\n    cached=Typeface.createFromAsset(mAssetManager,fontPath);\n    mTypefaceMap.put(fontPath,cached);\n  }\n  return cached;\n}\n"}
{"nl": "Move the playingIndex forward depends on the play mode", "code": "public Song next(){\nswitch (playMode) {\ncase LOOP:\ncase LIST:\ncase SINGLE:\n    int newIndex=playingIndex + 1;\n  if (newIndex >= songs.size()) {\n    newIndex=0;\n  }\nplayingIndex=newIndex;\nbreak;\ncase SHUFFLE:\nplayingIndex=randomPlayIndex();\nbreak;\n}\nreturn songs.get(playingIndex);\n}\n"}
{"nl": "returns a string representation of the entry containing x-index and value", "code": "@Override public String toString(){\n  return \"Entry, x: \" + x + \" y (sum): \"+ getY();\n}\n"}
{"nl": "Add all the configuration fields that are required for the Twitter plugin", "code": "public void createFieldsInHosts(){\n  if (!fieldsExistsInHost()) {\n    Logger.info(this,\"********************START CREATE FIELDS FOR TWITTER PLUGIN*********************\");\n    Logger.info(this,\"*The required fields for the Twitter plugin didn't exits in the Host structure*\");\n    Structure hostStructure=StructureFactory.getStructureByVelocityVarName(\"Host\");\n    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERLINEDIVIDER,Field.FieldType.LINE_DIVIDER,Field.DataType.SECTION_DIVIDER,95);\n    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERCONSUMERKEY,Field.FieldType.TEXT,Field.DataType.TEXT,96);\n    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERSECRETCONSUMERKEY,Field.FieldType.TEXT,Field.DataType.TEXT,97);\n    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERACCESSTOKEN,Field.FieldType.TEXT,Field.DataType.TEXT,98);\n    addFieldToHostStructure(hostStructure,Configuration.HOSTFIELDNAME_TWITTERSECRETACCESSTOKEN,Field.FieldType.TEXT,Field.DataType.TEXT,99);\n    FieldsCache.removeFields(hostStructure);\n    ContentTypeCacheImpl contentTypeCache=new ContentTypeCacheImpl();\n    contentTypeCache.remove(hostStructure);\n    try {\n      StructureFactory.saveStructure(hostStructure);\n    }\n catch (    DotHibernateException e) {\n      throw new RuntimeException(e.toString(),e);\n    }\n    FieldsCache.addFields(hostStructure,hostStructure.getFieldsBySortOrder());\n    Logger.info(this,\"*All the missing fields for the Twitter plugin are added to the Host structure*\");\n    Logger.info(this,\"*********************END CREATE FIELDS FOR TWITTER PLUGIN**********************\");\n  }\n}\n"}
{"nl": "For Externalizable", "code": "public ApplicationException(){\n}\n"}
{"nl": "Helper method to make authenticated HTTP requests to LinkedIn REST api using DELETE Method", "code": "public void deleteRequest(@NonNull Context context,String url,ApiListener apiListener){\n  request(context,Request.Method.DELETE,url,null,apiListener);\n}\n"}
{"nl": "Get information about methods returning class type of the original class so we can duplicate them in the generated class for chaining purposes", "code": "private void collectMethodsReturningClassType(TypeElement originalClass){\n  TypeElement clazz=originalClass;\n  while (clazz.getSuperclass().getKind() != TypeKind.NONE) {\n    for (    Element subElement : clazz.getEnclosedElements()) {\n      Set<Modifier> modifiers=subElement.getModifiers();\n      if (subElement.getKind() == ElementKind.METHOD && !modifiers.contains(Modifier.PRIVATE) && !modifiers.contains(Modifier.FINAL) && !modifiers.contains(Modifier.STATIC)) {\n        TypeMirror methodReturnType=((ExecutableType)subElement.asType()).getReturnType();\n        if (methodReturnType.equals(clazz.asType()) || typeUtils.isSubtype(clazz.asType(),methodReturnType)) {\n          List<? extends TypeMirror> params=((ExecutableType)subElement.asType()).getParameterTypes();\n          String methodName=subElement.getSimpleName().toString();\n          if (methodName.equals(RESET_METHOD) && params.isEmpty()) {\n            continue;\n          }\n          if (params.size() == 1) {\n            TypeMirror param=params.get(0);\n            ParameterSpec parameterSpec;\n            if (methodName.equals(LAYOUT_METHOD) && param.getKind() == TypeKind.INT) {\n              parameterSpec=ParameterSpec.builder(int.class,methodName).addAnnotation(LAYOUT_RES_ANNOTATION).build();\n            }\n else {\n              parameterSpec=ParameterSpec.builder(TypeName.get(param),methodName).build();\n            }\n            methodsReturningClassType.add(new MethodInfo(methodName,modifiers,Collections.singletonList(parameterSpec)));\n          }\n else {\n            methodsReturningClassType.add(new MethodInfo(methodName,modifiers,buildParamList(params)));\n          }\n        }\n      }\n    }\n    clazz=(TypeElement)typeUtils.asElement(clazz.getSuperclass());\n  }\n}\n"}
{"nl": "Clears the set", "code": "public void clear(){\nsynchronized (contexts) {\n    contexts.clear();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetFollowersQuery(VkApiClient client,UserActor actor){\n  super(client,\"users.getFollowers\",GetFollowersResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Mark the asset extraction as last successful", "code": "@VisibleForTesting @Transactional public void markAssetExtractionAsLastSuccessful(Asset asset,AssetExtraction assetExtraction){\n  logger.debug(\"Marking asset extraction as last successful, assetExtractionId: {}\",assetExtraction.getId());\n  asset.setLastSuccessfulAssetExtraction(assetExtraction);\n  assetRepository.save(asset);\n}\n"}
{"nl": "Waits for all queued audio to be played", "code": "public boolean drain(){\n  return true;\n}\n"}
{"nl": "Create a buffered writer given an output stream", "code": "private static void createWriter(OutputStream outputStream){\n  try {\n    closeWriter();\n    Writer oWriter=new OutputStreamWriter(outputStream,\"UTF-8\");\n    writer=new BufferedWriter(oWriter);\n  }\n catch (  UnsupportedEncodingException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Called by Play Services when the user's location changes", "code": "@Override public void onLocationChanged(Location loc){\n  mCurLocation=loc;\n  LocationService.location=loc;\n  updateUI();\n}\n"}
{"nl": "Mouse entered handling", "code": "public void mouseEntered(MouseEvent e){\n  mIsControlDown=e.isControlDown();\n  mIsShiftDown=e.isShiftDown();\n  mIsAltDown=e.isAltDown();\n}\n"}
{"nl": "Method called when the field has been selected from a combo box and may need to be initialised", "code": "@Override public void justSelected(){\n  setCachedExpression(generateExpression());\n  checkSymbolIsValid();\n}\n"}
{"nl": "init: load comic -> load chapter -> load download if load download fail, we still show the layout", "code": "@Override public void onComicLoadSuccess(Comic comic){\n  mDetailAdapter.setInfo(comic.getSource(),comic.getCover(),comic.getTitle(),comic.getAuthor(),comic.getIntro(),comic.getFinish(),comic.getUpdate(),comic.getLast());\n  if (comic.getTitle() != null && comic.getCover() != null) {\n    int resId=comic.getFavorite() != null ? R.drawable.ic_favorite_white_24dp : R.drawable.ic_favorite_border_white_24dp;\n    mStarButton.setImageResource(resId);\n    mStarButton.setVisibility(View.VISIBLE);\n  }\n}\n"}
{"nl": "Tests setValue method for following cases: values, values-v21, values-night, value-port, values-port-v21 setValue(\"colorAccent\", \"#000000\")", "code": "public void testSetValue(){\n  VirtualFile file=myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_2.xml\",\"res/values/styles.xml\");\n  myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_2.xml\",\"res/values-v21/styles.xml\");\n  myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_2.xml\",\"res/values-night/styles.xml\");\n  myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_2.xml\",\"res/values-port/styles.xml\");\n  myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_2.xml\",\"res/values-port-v21/styles.xml\");\n  ItemResourceValue item=new ItemResourceValue(\"colorAccent\",false,\"#000000\",false,null);\n  checkSetValue(file,item,\"\",\"-v21\",\"-night\",\"-port\",\"-port-v21\");\n}\n"}
{"nl": "Sends all through timedeadband delayed values immediately", "code": "public void sendDelayedTimeDeadbandValues(){\n  this.equipmentLogger.trace(\"sendDelayedTimeDeadbandValues - Sending all time deadband delayed values to the server\");\n  for (  SDTTimeDeadbandScheduler tagScheduler : this.sdtTimeDeadbandSchedulers.values()) {\n    if (tagScheduler.isScheduledForSending()) {\n      tagScheduler.run();\n    }\n  }\n}\n"}
{"nl": "given a uid, signal the entry as rewritten under the xtn", "code": "public void signalRewrittenEntry(String uid){\n  if (_reWrittenEntries == null)   _reWrittenEntries=new ConcurrentHashMap<String,String>();\n  _reWrittenEntries.put(uid,uid);\n}\n"}
{"nl": "Print mean and variance of each state", "code": "public void printMcepMean(){\n  printVectors(mcepMean,mcepVariance);\n}\n"}
{"nl": "replace all NaN by zero", "code": "public boolean replaceNaNByZero(){\n  boolean changed=false;\n  for (int i=0; i < matrix.length; i++) {\n    for (int j=0; j < matrix.length; j++) {\n      if (Double.isNaN(matrix[i][j])) {\n        matrix[i][j]=0;\n        changed=true;\n      }\n    }\n  }\n  return changed;\n}\n"}
{"nl": "draw the x axis", "code": "protected void drawXAxis(Graphics2D gc){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsEditListQuery(VkApiClient client,UserActor actor,int listId){\n  super(client,\"friends.editList\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  listId(listId);\n}\n"}
{"nl": "Handle target attacked events", "code": "public static void onAttack(NpcAI2 npcAI,Creature creature){\n  handleNumericEvent(npcAI,creature,ShoutEventType.ATTACK_K);\n}\n"}
{"nl": "draw the title of the chart", "code": "private void drawTitle(Graphics2D gc){\n  if (chartTitle != null) {\n    Dimension labelSize=Basic.getStringSize(gc,chartTitle,gc.getFont()).getSize();\n    int x=(getWidth() - labelSize.width) / 2;\n    int y=labelSize.height + 5;\n    gc.setFont(getFont(ChartViewer.FontKeys.TitleFont.toString()));\n    gc.setColor(getFontColor(ChartViewer.FontKeys.TitleFont.toString(),Color.BLACK));\n    gc.drawString(chartTitle,x,y);\n  }\n}\n"}
{"nl": "Load bitmaps from the cache if it is available in cache otherwise process the bitmap and save it in cache", "code": "public boolean loadBitmap(final String type,final Long resourceId,final ImageView imageView,final String path){\n  final String imageKey=String.valueOf(resourceId);\n  BitmapDrawable bitmap=mCacheManager.getBitmapFromMemCache(imageKey);\n  if (bitmap != null) {\n    imageView.setImageDrawable(bitmap);\n    return true;\n  }\n  if (GalleryLoader.cancelPotentialWork(resourceId,imageView)) {\n    GalleryLoader galleryLoader=new GalleryLoader(mContext,imageView,type,mCacheManager,path);\n    GalleryLoader.AsyncDrawable asyncDrawable=new GalleryLoader.AsyncDrawable(mContext.getResources(),mPlaceHolderBitmap,galleryLoader);\n    imageView.setImageDrawable(asyncDrawable);\n    try {\n      galleryLoader.execute(resourceId);\n    }\n catch (    RejectedExecutionException exception) {\n      exception.printStackTrace();\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Concatenate with comma", "code": "public static String httpArray2(List<String> classIds){\n  String s=\"\";\n  for (  Object o : classIds) {\n    s=s + o.toString() + \",\";\n  }\n  return s.substring(0,s.length() - 1);\n}\n"}
{"nl": "Compares this time and the time given", "code": "public boolean isGreaterThan(GameTime gt){\n  return this.getTime() > gt.getTime();\n}\n"}
{"nl": "generates more specific warnings for given expression", "code": "private void triggerProblem(BinaryExpression objExpression){\n  PsiElement objLeftOperand=objExpression.getLeftOperand();\n  PsiElement objRightOperand=objExpression.getRightOperand();\n  if (objRightOperand instanceof StringLiteralExpression || objLeftOperand instanceof StringLiteralExpression) {\n    PsiElement objNonStringOperand;\n    String strLiteralValue;\n    if (objRightOperand instanceof StringLiteralExpression) {\n      strLiteralValue=((StringLiteralExpression)objRightOperand).getContents();\n      objNonStringOperand=objLeftOperand;\n    }\n else {\n      strLiteralValue=((StringLiteralExpression)objLeftOperand).getContents();\n      objNonStringOperand=objRightOperand;\n    }\n    objNonStringOperand=ExpressionSemanticUtil.getExpressionTroughParenthesis(objNonStringOperand);\n    if (null != objNonStringOperand && ClassInStringContextStrategy.apply(objNonStringOperand,holder,objExpression,strProblemDescriptionMissingToStringMethod)) {\n      return;\n    }\n    if (strLiteralValue.length() > 0 && !strLiteralValue.matches(\"^[0-9\\\\+\\\\-]+$\")) {\n      holder.registerProblem(objExpression,strProblemDescriptionSafeToReplace,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n      return;\n    }\n  }\n  holder.registerProblem(objExpression,strProblemDescription,ProblemHighlightType.WEAK_WARNING);\n}\n"}
{"nl": "Remove a user", "code": "public String removeUser(String user){\n  ResponseEntity<String> response=restTemplate.exchange(url + RMAControllerMappings.REMOVE_USER_MAPPING + \"userName=\"+ user,HttpMethod.GET,request,String.class);\n  return response.getBody();\n}\n"}
{"nl": "Process properties in the Config object", "code": "private void mapConfigProperties(ContainerState containerState,Map<String,Object> config){\n  if (config == null) {\n    return;\n  }\n  @SuppressWarnings(\"unchecked\") Collection<String> commandList=(Collection<String>)config.get(DOCKER_CONTAINER_COMMAND_PROP_NAME);\n  if (commandList != null) {\n    containerState.command=commandList.toArray(new String[0]);\n  }\n  String image=(String)config.get(DOCKER_CONTAINER_IMAGE_PROP_NAME);\n  if (image != null) {\n    containerState.image=image;\n  }\n}\n"}
{"nl": "create MBean server connection according to certain JNDI URL", "code": "public static MBeanServerConnection createMBeanServerConnection(String jndiURL) throws Exception {\n  JMXServiceURL url=new JMXServiceURL(JMXUtilities.createJMXUrl(jndiURL));\n  JMXConnector jmxc=JMXConnectorFactory.connect(url,null);\n  return jmxc.getMBeanServerConnection();\n}\n"}
{"nl": "Default order is Little endian", "code": "public OrderedDataOutputStream(OutputStream out){\n  super(out);\n  _order=ByteOrder.LITTLE_ENDIAN;\n}\n"}
{"nl": "Filter for hidden files", "code": "public Vector<OCFile> filterHiddenFiles(Vector<OCFile> files){\n  Vector<OCFile> ret=new Vector<>();\n  OCFile current;\n  for (int i=0; i < files.size(); i++) {\n    current=files.get(i);\n    if (!current.isHidden()) {\n      ret.add(current);\n    }\n  }\n  return ret;\n}\n"}
{"nl": "Cancels currently playing audio", "code": "public synchronized void cancel(){\n}\n"}
{"nl": "Create a TimeMetaData column with no restriction on the allowable times", "code": "public TimeMetaData(String name,DateTimeZone timeZone){\n  this(name,timeZone,null,null);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n"}
{"nl": "cancel all singleTask in the scheduler", "code": "public void cancelAllTasks(boolean mayInterruptIfRunning){\n  for (  SingleAsyncTask singleAsyncTask : mSingleAsyncTaskList) {\n    cancelTask(singleAsyncTask,mayInterruptIfRunning);\n  }\n  mSingleAsyncTaskList.clear();\n}\n"}
{"nl": "Returns true if field responseInfo is set (has been assigned a value) and false otherwise", "code": "public boolean isSetResponseInfo(){\n  return this.responseInfo != null;\n}\n"}
{"nl": "Remove player from alliance (ban)", "code": "public static final void banPlayer(Player bannedPlayer,Player banGiver){\n  Preconditions.checkNotNull(bannedPlayer,\"Banned player should not be null\");\n  Preconditions.checkNotNull(banGiver,\"Bangiver player should not be null\");\n  PlayerAlliance alliance=banGiver.getPlayerAlliance2();\n  if (alliance != null) {\n    if (alliance.getTeamType().isDefence()) {\n      VortexService.getInstance().removeDefenderPlayer(bannedPlayer);\n    }\n    PlayerAllianceMember bannedMember=alliance.getMember(bannedPlayer.getObjectId());\n    if (bannedMember != null) {\n      alliance.onEvent(new PlayerAllianceLeavedEvent(alliance,bannedMember.getObject(),LeaveReson.BAN,banGiver.getName()));\n    }\n else {\n      log.warn(\"TEAM2: banning player not in alliance {}\",alliance.onlineMembers());\n    }\n  }\n}\n"}
{"nl": "Assert that two JSON arrays are equal", "code": "private static void assertJsonArrayEquals(String expected,String actual){\n  ObjectMapper mapper=new ObjectMapper();\n  TypeReference<List<Object>> ref=new TypeReference<List<Object>>(){\n  }\n;\n  try {\n    List<Object> el=mapper.readValue(expected,ref);\n    List<Object> al=mapper.readValue(actual,ref);\n    assertEquals(el,al);\n  }\n catch (  IOException e) {\n    throw new IllegalStateException(e);\n  }\n}\n"}
{"nl": "computes the consensus for a set of reads or references", "code": "private String computeConsensus(Map<String,String> globalAlignment,char unknownChar){\n  if (globalAlignment.size() > 0) {\n    String firstRow=globalAlignment.values().iterator().next();\n    StringBuilder buf=new StringBuilder();\n    Map<Character,Integer> char2count=new HashMap<>();\n    for (int i=0; i < firstRow.length(); i++) {\n      for (      String row : globalAlignment.values()) {\n        char ch=row.charAt(i);\n        if (Character.isLetter(ch)) {\n          Integer count=char2count.get(ch);\n          if (count == null)           char2count.put(ch,1);\n else           char2count.put(ch,count + 1);\n        }\n      }\n      char bestChar=unknownChar;\n      int bestCount=0;\n      for (      Character ch : char2count.keySet()) {\n        if (char2count.get(ch) > bestCount) {\n          bestChar=ch;\n          bestCount=char2count.get(ch);\n        }\n      }\n      buf.append(bestChar);\n      char2count.clear();\n    }\n    return buf.toString();\n  }\n else   return \"\";\n}\n"}
{"nl": "This method will be used to delete sort temp location is it is exites", "code": "public void deleteSortLocationIfExists() throws CarbonSortKeyAndGroupByException {\n  CarbonDataProcessorUtil.deleteSortLocationIfExists(parameters.getTempFileLocation());\n}\n"}
{"nl": "used only for character transfers", "code": "public Item add_CharacterTransfer(Item item){\n  if (item.getItemTemplate().isKinah()) {\n    this.kinahItem=item;\n  }\n else   if (!itemStorage.putItem(item)) {\n    return null;\n  }\n  item.setItemLocation(storageType.getId());\n  setPersistentState(PersistentState.UPDATE_REQUIRED);\n  return item;\n}\n"}
{"nl": "Creates a storable location fence which will be valid when the user leaves the given region", "code": "public static StorableLocationFence exiting(double latitude,double longitude,double radius){\n  return new StorableLocationFence(EXIT_TYPE,latitude,longitude,radius,0);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set pc1=1 pc2=3;\");\n}\n"}
{"nl": "Gets the time from ping command (if there is)", "code": "private String parseTimeFromPing(String ping){\n  String time=\"\";\n  if (ping.contains(TIME_PING)) {\n    int index=ping.indexOf(TIME_PING);\n    time=ping.substring(index + 5);\n    index=time.indexOf(\" \");\n    time=time.substring(0,index);\n  }\n  return time;\n}\n"}
{"nl": "Initializes service to send Telemetry data", "code": "public TelemetryService(AirMapFlight flight){\n  this.flight=flight;\n  connect();\n}\n"}
{"nl": "Create a unit file reader from the given unit file", "code": "public UnitFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n"}
{"nl": "how many objects are there?", "code": "public int numberOfObjects(){\n  return numberOfObjects;\n}\n"}
{"nl": "Boolean Response Retryer", "code": "public static boolean retryInfinitelyBoolean(final Callable<Boolean> callable){\n  return booleanResponseRetryer.retryInfinitely(callable);\n}\n"}
{"nl": "Return photos in reverse chronological order", "code": "public PhotosGetQuery rev(Boolean value){\n  return unsafeParam(\"rev\",value);\n}\n"}
{"nl": "Checks that an experiment has a state \"draft\" and throws an exception if it doesn't", "code": "public void ensureStateIsDraft(Experiment experiment){\n  Experiment.State state=experiment.getState();\n  if (!state.equals(Experiment.State.DRAFT)) {\n    throw new InvalidExperimentStateException(experiment.getID(),Experiment.State.DRAFT,experiment.getState());\n  }\n}\n"}
{"nl": "Release a series of key", "code": "public void release(int... keys){\n  for (  int key : keys) {\n    release(key);\n  }\n}\n"}
{"nl": "JSON representation of the EsSupervisionEvent", "code": "@Override public String toString(){\n  return gson.toJson(this);\n}\n"}
{"nl": "recursively assigns coordinates to all nodes", "code": "private void assignCoordinatesToNodesRec(Node v,BitSet splitsInPath,NodeSet nodesVisited,boolean useWeights,PhyloTreeView view) throws NotOwnerException {\n  PhyloTree graph=(PhyloTree)view.getGraph();\n  if (!nodesVisited.contains(v)) {\n    nodesVisited.add(v);\n    Iterator it=graph.getAdjacentEdges(v);\n    while (it.hasNext()) {\n      Edge e=(Edge)it.next();\n      int s=graph.getSplit(e);\n      if (!splitsInPath.get(s)) {\n        Node w=graph.getOpposite(v,e);\n        Point2D p=Geometry.translateByAngle(view.getLocation(v),graph.getAngle(e),useWeights ? graph.getWeight(e) : 1);\n        view.setLocation(w,p);\n        splitsInPath.set(s,true);\n        assignCoordinatesToNodesRec(w,splitsInPath,nodesVisited,useWeights,view);\n        splitsInPath.set(s,false);\n      }\n    }\n  }\n}\n"}
{"nl": "Override this method to update your footers", "code": "protected void onBindFooterViewHolder(RecyclerView.ViewHolder holder,int position){\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected void handleTransliterate(Replaceable text,Transliterator.Position index,boolean incremental){\nsynchronized (this.data) {\n    int loopCount=0;\n    int loopLimit=index.limit - index.start << 4;\n    if (loopLimit < 0) {\n      loopLimit=Integer.MAX_VALUE;\n    }\n    while ((index.start < index.limit) && (loopCount <= loopLimit) && (this.data.ruleSet.transliterate(text,index,incremental))) {\n      loopCount++;\n    }\n  }\n}\n"}
{"nl": "Utility function to draw a circle text centered at coordinates (x, y)", "code": "public static void drawCircledText(Graphics2D g,String text,int x,int y){\n  drawCircledText(g,sSmallFont,text,x,y);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();\n  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null;\n}\n"}
{"nl": "Cleans the peak mark Will repaint the component", "code": "public void unsetPeak(){\n  peak=Integer.MIN_VALUE;\n  repaint();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"compute diversityRatio kmer=\");\n  int kmer=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\"step=\");\n  int step=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\"mindepth=\");\n  int mindepth=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  Pair<Double,Double> kn=ComputeAlignmentProperties.computeSequenceDiversityRatio(viewer.getAlignment(),step,kmer,mindepth,((Director)getDir()).getDocument().getProgressListener());\n  ((Director)getDir()).getDocument().getProgressListener().close();\n  NotificationsInSwing.showInformation(viewer.getFrame(),\"Average diversity ratio:\\n\" + (float)(0 + kn.getFirst()) + \" / \"+ (float)(0 + kn.getSecond())+ \" = \"+ (float)(kn.getFirst() / kn.getSecond()));\n}\n"}
{"nl": "Initialize the view in the layout", "code": "@Override protected void initViews(Bundle savedInstanceState){\n  getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n  Intent intent=getIntent();\n  path=intent.getStringExtra(\"path\");\n  tvFilePath=(TextView)findViewById(R.id.tvFilePath);\n  videoListView=(RecyclerView)findViewById(R.id.videoListView);\n  mAdapter=new VideoListAdapter();\n  mLayoutManager=new LinearLayoutManager(this);\n  mLayoutManager.setOrientation(OrientationHelper.VERTICAL);\n  videoListView.setLayoutManager(mLayoutManager);\n  videoListView.setAdapter(mAdapter);\n}\n"}
{"nl": "Writes system time (milliseconds since January 1, 1970) as an NTP time stamp as defined in RFC-1305 at the given offset in the buffer", "code": "private void _writeTimeStamp(byte[] buffer,int offset,long time){\n  long seconds=time / 1000L;\n  long milliseconds=time - seconds * 1000L;\n  seconds+=OFFSET_1900_TO_1970;\n  buffer[offset++]=(byte)(seconds >> 24);\n  buffer[offset++]=(byte)(seconds >> 16);\n  buffer[offset++]=(byte)(seconds >> 8);\n  buffer[offset++]=(byte)(seconds >> 0);\n  long fraction=milliseconds * 0x100000000L / 1000L;\n  buffer[offset++]=(byte)(fraction >> 24);\n  buffer[offset++]=(byte)(fraction >> 16);\n  buffer[offset++]=(byte)(fraction >> 8);\n  buffer[offset++]=(byte)(Math.random() * 255.0);\n}\n"}
{"nl": "Adds an item to one or multiple collections", "code": "public MarketAddToAlbumQuery addToAlbum(UserActor actor,int ownerId,int itemId,List<Integer> albumIds){\n  return new MarketAddToAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);\n}\n"}
{"nl": "Finds a match of the given string in the given array, and returns the element at the same index in the returnInArray", "code": "private static String findMatchInArray(String strToMatch,String[] matchInArray,String[] returnInArray){\n  for (int i=0; i < matchInArray.length; i++) {\n    if (strToMatch.equals(matchInArray[i])) {\n      if (i < returnInArray.length) {\n        return returnInArray[i];\n      }\n else {\n        return null;\n      }\n    }\n  }\n  return null;\n}\n"}
{"nl": "Create a leaf node", "code": "public BlockletBTreeLeafNode(BTreeBuilderInfo builderInfos,int leafIndex,long nodeNumber){\n  BlockletMinMaxIndex minMaxIndex=builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getBlockletIndex().getMinMaxIndex();\n  maxKeyOfColumns=minMaxIndex.getMaxValues();\n  minKeyOfColumns=minMaxIndex.getMinValues();\n  numberOfKeys=builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getNumberOfRows();\n  dimensionChunksReader=new CompressedDimensionChunkFileBasedReader(builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getDimensionColumnChunk(),builderInfos.getDimensionColumnValueSize(),builderInfos.getFooterList().get(0).getBlockInfo().getTableBlockInfo().getFilePath());\n  ValueCompressionModel valueCompressionModel=CarbonUtil.getValueCompressionModel(builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getMeasureColumnChunk());\n  measureColumnChunkReader=new CompressedMeasureChunkFileBasedReader(builderInfos.getFooterList().get(0).getBlockletList().get(leafIndex).getMeasureColumnChunk(),valueCompressionModel,builderInfos.getFooterList().get(0).getBlockInfo().getTableBlockInfo().getFilePath());\n  this.nodeNumber=nodeNumber;\n}\n"}
{"nl": "creat a uri for takePhoto <p> I don't know the name , what's the meaning of \"GetWorld\"?", "code": "public static Uri createImageUri(Context context){\n  if (\"Lenovo\".equals(Build.MODEL.split(\" \")[0])) {\n    Intent intent=new Intent();\n    intent.setAction(MediaStore.ACTION_IMAGE_CAPTURE);\n    String path=Environment.getExternalStorageDirectory() + \"/zjb/photoCache\" + System.currentTimeMillis()+ \".jpg\";\n    imgUri=Uri.parse(\"file:///\" + path);\n  }\n else {\n    String name=\"GetWorld\" + System.currentTimeMillis();\n    ContentValues values=new ContentValues();\n    values.put(MediaStore.Images.Media.TITLE,name);\n    values.put(MediaStore.Images.Media.DISPLAY_NAME,name + \".jpeg\");\n    values.put(MediaStore.Images.Media.MIME_TYPE,\"image/jpeg\");\n    imgUri=context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);\n  }\n  return imgUri;\n}\n"}
{"nl": "QUEST REWARD QUERIES", "code": "public QuestRewardCursor queryQuestRewardItem(long id){\n  return mHelper.queryQuestRewardItem(id);\n}\n"}
{"nl": "Duplicate this transition", "code": "public Transition<A> dup(){\n  INDArray[] dupObservation=dup(observation);\n  INDArray nextObs=nextObservation.dup();\n  return new Transition<>(dupObservation,action,reward,isTerminal,nextObs);\n}\n"}
{"nl": "Returns hash code based on values of statistics", "code": "@Override public int hashCode(){\n  int result=31 + MathUtils.hash(getN());\n  result=result * 31 + MathUtils.hash(getGeometricMean());\n  result=result * 31 + MathUtils.hash(getMax());\n  result=result * 31 + MathUtils.hash(getMean());\n  result=result * 31 + MathUtils.hash(getMin());\n  result=result * 31 + MathUtils.hash(getSum());\n  result=result * 31 + MathUtils.hash(getSumSq());\n  result=result * 31 + MathUtils.hash(getSumLog());\n  result=result * 31 + getCovariance().hashCode();\n  return result;\n}\n"}
{"nl": "calculates the maximum stacksize that occurs in the Entries array of this DataSet", "code": "private void calcStackSize(List<BarEntry> yVals){\n  for (int i=0; i < yVals.size(); i++) {\n    float[] vals=yVals.get(i).getYVals();\n    if (vals != null && vals.length > mStackSize)     mStackSize=vals.length;\n  }\n}\n"}
{"nl": "Creates new form DatabaseConfFrame", "code": "public DatabaseConfFrame(){\n  initComponents();\n}\n"}
{"nl": "Checks if new player cube is not max", "code": "private static boolean validateNewSize(int level){\n  return !(level < MIN_EXPAND || level > MAX_EXPAND);\n}\n"}
{"nl": "load all query locations for a given classification and class ids", "code": "public static ListOfLongs loadQueryLocations(DAAHeader daaHeader,String classificationName,Collection<Integer> classIds) throws IOException {\n  for (int i=0; i < daaHeader.getBlockTypeRankArrayLength() - 1; i++) {\n    final int j=i + 1;\n    if (daaHeader.getBlockType(i) == BlockType.megan_classification_key_block && daaHeader.getBlockType(j) == BlockType.megan_classification_dump_block) {\n      try (InputReaderLittleEndian insKey=new InputReaderLittleEndian(new FileRandomAccessReadOnlyAdapter(daaHeader.getFileName()))){\n        final long keyBase=daaHeader.computeBlockStart(i);\n        insKey.seek(keyBase);\n        final String cName=insKey.readNullTerminatedBytes();\n        if (cName.equals(classificationName)) {\n          final int numberOfClasses=insKey.readInt();\n          final ListOfLongs list=new ListOfLongs(100000);\n          try (InputReaderLittleEndian insDump=new InputReaderLittleEndian(new FileRandomAccessReadOnlyAdapter(daaHeader.getFileName()))){\n            final long dumpBase=daaHeader.computeBlockStart(j);\n            insDump.seek(dumpBase);\n            if (!insDump.readNullTerminatedBytes().equals(classificationName))             throw new IOException(\"Internal error: key-dump mismatch\");\n            for (int c=0; c < numberOfClasses; c++) {\n              int classId=insKey.readInt();\n              insKey.skip(4);\n              int size=insKey.readInt();\n              final long offset=insKey.readLong();\n              if (classIds.contains(classId)) {\n                insDump.seek(dumpBase + offset);\n                for (int n=0; n < size; n++) {\n                  list.add(insDump.readLong());\n                }\n              }\n            }\n          }\n           return list;\n        }\n      }\n     }\n  }\n  return null;\n}\n"}
{"nl": "POST /rest/activiti/jobs/{jobId} -> execute job", "code": "@RequestMapping(value=\"/rest/activiti/jobs/{jobId}\",method=RequestMethod.POST,produces=\"application/json\") @ResponseStatus(value=HttpStatus.OK) public void executeJob(@PathVariable String jobId) throws BadRequestException {\n  ServerConfig serverConfig=retrieveServerConfig();\n  try {\n    clientService.executeJob(serverConfig,jobId);\n  }\n catch (  ActivitiServiceException e) {\n    throw new BadRequestException(e.getMessage());\n  }\n}\n"}
{"nl": "Get a cursor with a query to grab all habitats of a monster", "code": "public MonsterHabitatCursor queryHabitatMonster(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_HABITAT;\n  qh.Columns=null;\n  qh.Selection=S.COLUMN_HABITAT_MONSTER_ID + \" = ?\";\n  qh.SelectionArgs=new String[]{String.valueOf(id)};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new MonsterHabitatCursor(wrapJoinHelper(builderHabitat(qh.Distinct),qh));\n}\n"}
{"nl": "Determine if switch should be lookup or table - this doesn't always get the same result as javac  lookup: non-table table: sequential (no gaps)", "code": "private boolean isLookupSwitch(polyglot.ast.Switch switchStmt){\n  int lowest=0;\n  int highest=0;\n  int counter=0;\n  Iterator it=switchStmt.elements().iterator();\n  while (it.hasNext()) {\n    Object next=it.next();\n    if (next instanceof polyglot.ast.Case) {\n      polyglot.ast.Case caseStmt=(polyglot.ast.Case)next;\n      if (caseStmt.isDefault())       continue;\n      int caseValue=(int)caseStmt.value();\n      if (caseValue <= lowest || counter == 0) {\n        lowest=caseValue;\n      }\n      if (caseValue >= highest || counter == 0) {\n        highest=caseValue;\n      }\n      counter++;\n    }\n  }\n  if ((counter - 1) == (highest - lowest))   return false;\n  return true;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public VariableField(String string,boolean strict){\n  this.canonicalIndex=DateTimePatternGenerator.getCanonicalIndex(string,strict);\n  if (this.canonicalIndex < 0) {\n    throw new IllegalArgumentException(\"Illegal datetime field:\\t\" + string);\n  }\n  this.string=string;\n}\n"}
{"nl": "Build a Selfie with all the parameters", "code": "Selfie build(){\n  return new Selfie(format,path,quality);\n}\n"}
{"nl": "Create a formatted date with specific date format", "code": "public static String dateToString(Date date,SimpleDateFormat dateFormat){\n  return dateFormat.format(date);\n}\n"}
{"nl": "if we receive any result, we can delete the temp retry info file", "code": "public void onPatchServiceResult(boolean isUpgradePatch){\n  if (!isRetryEnable) {\n    TinkerLog.w(TAG,\"onPatchServiceResult retry disabled, just return\");\n    return;\n  }\n  if (!isUpgradePatch) {\n    TinkerLog.w(TAG,\"onPatchServiceResult is not upgrade patch, just return\");\n    return;\n  }\n  if (retryInfoFile.exists()) {\n    SharePatchFileUtil.safeDeleteFile(retryInfoFile);\n  }\n  if (tempPatchFile.exists()) {\n    SharePatchFileUtil.safeDeleteFile(tempPatchFile);\n  }\n}\n"}
{"nl": "Method used to calculate number of effects of given dispelcategory, targetslot and dispelLevel used only in DispelBuffCounterAtk, therefore rest of cases are skipped", "code": "public int calculateNumberOfEffects(int dispelLevel){\n  int number=0;\n  for (  Effect effect : abnormalEffectMap.values()) {\n    DispelCategoryType dispelCat=effect.getDispelCategory();\n    SkillTargetSlot tragetSlot=effect.getSkillTemplate().getTargetSlot();\n    if (effect.getDuration() >= 86400000 && !removebleEffect(effect)) {\n      continue;\n    }\n    if (effect.isSanctuaryEffect()) {\n      continue;\n    }\n    if (tragetSlot != SkillTargetSlot.BUFF && (tragetSlot != SkillTargetSlot.DEBUFF && dispelCat != DispelCategoryType.ALL) || effect.getTargetSlotLevel() >= 2) {\n      continue;\n    }\nswitch (dispelCat) {\ncase ALL:\ncase BUFF:\n      if (effect.getReqDispelLevel() <= dispelLevel) {\n        number++;\n      }\n    break;\ndefault :\n  break;\n}\n}\nreturn number;\n}\n"}
{"nl": "Parses space name -name parameter", "code": "public static String parse(CommandLineParser.Parameter[] params) throws IOException {\n  String name=null;\n  for (int i=0; i < params.length; i++) {\n    if (params[i].getName().equalsIgnoreCase(SPACE_NAME_PARAMETER)) {\n      for (int j=0; j < params[i].getArguments().length; j++) {\n        name=params[i].getArguments()[j];\n        break;\n      }\n    }\n  }\n  return name;\n}\n"}
{"nl": "Normalize a bitmap to 640px", "code": "public static Bitmap normalize(Context context,Uri selectedImage){\n  return normalize(context,selectedImage,MAX_BITMAP_WIDTH,MAX_BITMAP_HEIGHT);\n}\n"}
{"nl": "Impose target intonation contour on given vocalization using HNM technology", "code": "@Override public AudioInputStream synthesizeUsingImposedF0(int sourceIndex,int targetIndex,AudioFileFormat aft) throws SynthesisException {\n  if (!f0ContourImposeSupport) {\n    throw new SynthesisException(\"Mary configuration of this voice doesn't support intonation contour imposition\");\n  }\n  int numberOfUnits=unitFileReader.getNumberOfUnits();\n  if (sourceIndex >= numberOfUnits || targetIndex >= numberOfUnits) {\n    throw new IllegalArgumentException(\"sourceIndex(\" + sourceIndex + \") and targetIndex(\"+ targetIndex+ \") are should be less than number of available units (\"+ numberOfUnits+ \")\");\n  }\n  if (sourceIndex == targetIndex) {\n    return reSynthesize(sourceIndex,aft);\n  }\n  double[] sourceF0=this.vIntonationReader.getContour(sourceIndex);\n  double[] targetF0coeffs=this.vIntonationReader.getIntonationCoeffs(targetIndex);\n  double[] sourceF0coeffs=this.vIntonationReader.getIntonationCoeffs(sourceIndex);\n  if (targetF0coeffs == null || sourceF0coeffs == null) {\n    return reSynthesize(sourceIndex,aft);\n  }\n  if (targetF0coeffs.length == 0 || sourceF0coeffs.length == 0) {\n    return reSynthesize(sourceIndex,aft);\n  }\n  double[] targetF0=Polynomial.generatePolynomialValues(targetF0coeffs,sourceF0.length,0,1);\n  sourceF0=Polynomial.generatePolynomialValues(sourceF0coeffs,sourceF0.length,0,1);\n  assert targetF0.length == sourceF0.length;\n  double[] tScalesArray=new double[sourceF0.length];\n  double[] pScalesArray=new double[sourceF0.length];\n  for (int i=0; i < targetF0.length; i++) {\n    pScalesArray[i]=(float)(targetF0[i] / sourceF0[i]);\n    tScalesArray[i]=(float)(1.0);\n  }\n  return synthesizeUsingF0Modification(sourceIndex,pScalesArray,tScalesArray,aft);\n}\n"}
{"nl": "Classifies the type of word break", "code": "public static String wordBreak(Item item) throws ProcessException {\n  Item ww=item.getItemAs(Relation.PHRASE);\n  if (ww == null || ww.getNext() != null) {\n    return \"1\";\n  }\n else {\n    String pname=ww.getParent().toString();\n    if (pname.equals(\"BB\")) {\n      return \"4\";\n    }\n else     if (pname.equals(\"B\")) {\n      return \"3\";\n    }\n else {\n      return \"1\";\n    }\n  }\n}\n"}
{"nl": "Creates a matrix with no data", "code": "public Array2DRowFieldMatrix(final Field<T> field){\n  super(field);\n}\n"}
{"nl": "Handle a request for synthesis of vocalization", "code": "public AudioInputStream synthesize(Voice voice,AudioFileFormat aft,Element domElement) throws Exception {\n  if (!voice.hasVocalizationSupport())   return null;\n  if (domElement.hasAttribute(\"variant\")) {\n    return synthesizeVariant(aft,domElement);\n  }\n  if (f0ContourImposeSupport) {\n    return synthesizeImposedIntonation(aft,domElement);\n  }\n  return synthesizeVocalization(aft,domElement);\n}\n"}
{"nl": "Verifies that the session is under TX", "code": "protected void ensureTX() throws IllegalStateException {\n  if (m_acknowledgeMode != Session.SESSION_TRANSACTED) {\n    throw new IllegalStateException(\"Forbidden call on a non transacted session.\");\n  }\n}\n"}
{"nl": "Uses an access code to login and get tokens", "code": "public void login(String authCode) throws LoginFailedException, RemoteServerException {\n  HttpUrl url=HttpUrl.parse(OAUTH_TOKEN_ENDPOINT).newBuilder().addQueryParameter(\"code\",authCode).addQueryParameter(\"client_id\",CLIENT_ID).addQueryParameter(\"client_secret\",SECRET).addQueryParameter(\"grant_type\",\"authorization_code\").addQueryParameter(\"scope\",\"openid email https://www.googleapis.com/auth/userinfo.email\").addQueryParameter(\"redirect_uri\",\"urn:ietf:wg:oauth:2.0:oob\").build();\n  RequestBody reqBody=RequestBody.create(null,new byte[0]);\n  Request request=new Request.Builder().url(url).method(\"POST\",reqBody).build();\n  Response response=null;\n  try {\n    response=client.newCall(request).execute();\n  }\n catch (  IOException e) {\n    throw new RemoteServerException(\"Network Request failed to fetch tokenId\",e);\n  }\n  Moshi moshi=new Moshi.Builder().build();\n  GoogleAuthTokenJson googleAuth=null;\n  try {\n    googleAuth=moshi.adapter(GoogleAuthTokenJson.class).fromJson(response.body().string());\n    Log.d(TAG,\"\" + googleAuth.getExpiresIn());\n  }\n catch (  IOException e) {\n    throw new RemoteServerException(\"Failed to unmarshell the Json response to fetch tokenId\",e);\n  }\n  Log.d(TAG,\"Got token: \" + googleAuth.getAccessToken());\n  expiresTimestamp=time.currentTimeMillis() + (googleAuth.getExpiresIn() * 1000 - REFRESH_TOKEN_BUFFER_TIME);\n  tokenId=googleAuth.getIdToken();\n  refreshToken=googleAuth.getRefreshToken();\n  authbuilder=AuthInfo.newBuilder();\n}\n"}
{"nl": "Adds http header attributes to profile (does not override existing profile attributes) We only use the first attribute if multiple attributes with same key are provided in header", "code": "protected SegmentationProfile mergeHeaderWithProfile(SegmentationProfile segmentationProfile,HttpHeaders headers){\n  if (segmentationProfile != null && segmentationProfile.getProfile() != null && headers != null) {\n    for (    String headerKey : headers.getRequestHeaders().keySet()) {\n      if (!segmentationProfile.hasAttribute(headerKey)) {\n        segmentationProfile.addAttribute(headerKey,headers.getRequestHeader(headerKey).get(0));\n      }\n    }\n  }\n else   if ((segmentationProfile == null || segmentationProfile.getProfile() == null) && headers != null) {\n    Map profileMap=new HashMap();\n    segmentationProfile=new SegmentationProfile.Builder(profileMap).build();\n    for (    String headerKey : headers.getRequestHeaders().keySet()) {\n      if (!segmentationProfile.hasAttribute(headerKey)) {\n        segmentationProfile.addAttribute(headerKey,headers.getRequestHeader(headerKey).get(0));\n      }\n    }\n  }\n  return segmentationProfile;\n}\n"}
{"nl": "Will be called from effect controller when effect starts", "code": "@Override public void startEffect(Effect effect){\n  if (change == null) {\n    return;\n  }\n  Creature effected=effect.getEffected();\n  CreatureGameStats<? extends Creature> cgs=effected.getGameStats();\n  List<IStatFunction> modifiers=getModifiers(effect);\n  if (modifiers.size() > 0) {\n    cgs.addEffect(effect,modifiers);\n  }\n  if (maxstat) {\n    effected.getLifeStats().increaseHp(TYPE.HP,effected.getGameStats().getMaxHp().getCurrent());\n    effected.getLifeStats().increaseMp(TYPE.HEAL_MP,effected.getGameStats().getMaxMp().getCurrent());\n  }\n}\n"}
{"nl": "Build a new cart with the given node as the root node", "code": "public CART(Node rootNode,FeatureDefinition featDef){\n  super(rootNode,featDef);\n}\n"}
{"nl": "Writes a signed boolean as a byte", "code": "public static byte writeBool(boolean b){\n  if (b) {\n    return 0x01;\n  }\n else {\n    return 0x00;\n  }\n}\n"}
{"nl": "Exits a code region where the sandbox was not needed", "code": "public static void exitSafeRegion(boolean token){\n  sEnabled=token;\n}\n"}
{"nl": "Adds of of the values in another ContextSet to this set", "code": "public void addAll(ContextSet contextSet){\n  if (contextSet == null) {\n    throw new NullPointerException(\"contextSet\");\n  }\nsynchronized (this.contexts) {\n    this.contexts.addAll(contextSet.toSet());\n  }\n}\n"}
{"nl": "Gets a SerialMessage with the MULTI_ASSOCIATIONCMD_REMOVE command", "code": "public SerialMessage removeAssociationMessage(int group,int node,int endpoint){\n  logger.debug(\"NODE {}: Creating new message for command MULTI_ASSOCIATIONCMD_REMOVE node {}, endpoint {}, group {}\",getNode().getNodeId(),node,endpoint,group);\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);\n  ByteArrayOutputStream outputData=new ByteArrayOutputStream();\n  outputData.write(this.getNode().getNodeId());\n  outputData.write(6);\n  outputData.write(getCommandClass().getKey());\n  outputData.write(MULTI_ASSOCIATIONCMD_REMOVE);\n  outputData.write(group);\n  outputData.write(0);\n  outputData.write(node);\n  outputData.write(endpoint);\n  result.setMessagePayload(outputData.toByteArray());\n  return result;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();\n  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getSelectedFiles().size() > 1;\n}\n"}
{"nl": "Returns the id of a Var", "code": "private String id(Var instance){\n  return instance.admin().getId().get();\n}\n"}
{"nl": "Set target uids", "code": "public FriendsGetMutualQuery targetUids(Integer... value){\n  return unsafeParam(\"target_uids\",value);\n}\n"}
{"nl": "This method logs the WARNING message", "code": "public final void warn(final Object o,final Throwable t){\n  log(Level.WARN,o,t);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  ChartViewer viewer=(ChartViewer)getViewer();\n  np.matchIgnoreCase(\"hide what=\");\n  final String what=np.getWordMatchesIgnoringCase(\"all none selected unselected\");\n  final LabelsJList list;\n  if (np.peekMatchIgnoreCase(\"target=\")) {\n    np.matchIgnoreCase(\"target=\");\n    list=viewer.getLabelsJList(np.getWordMatchesIgnoringCase(\"series classes attributes\"));\n  }\n else {\n    list=viewer.getActiveLabelsJList();\n  }\n  np.matchIgnoreCase(\";\");\n  if (what.equalsIgnoreCase(\"none\")) {\n    list.enableLabels(list.getAllLabels());\n  }\n else   if (what.equalsIgnoreCase(\"selected\")) {\n    list.disableLabels(list.getSelectedLabels());\n  }\n else   if (what.equalsIgnoreCase(\"unselected\")) {\n    final Set<String> labels=new HashSet<>();\n    labels.addAll(list.getAllLabels());\n    labels.removeAll(list.getSelectedLabels());\n    list.disableLabels(labels);\n  }\n else {\n    list.disableLabels(list.getAllLabels());\n  }\n  if (list.getName().equalsIgnoreCase(\"series\"))   viewer.getChartData().setEnabledSeries(list.getEnabledLabels());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UtilsResolveScreenNameQuery(VkApiClient client,UserActor actor,String screenName){\n  super(client,\"utils.resolveScreenName\",DomainResolved.class);\n  accessToken(actor.getAccessToken());\n  screenName(screenName);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  final ClusterViewer viewer=getViewer();\n  int maxPC=viewer.getPcoaTab().getPCoA().getNumberOfPositiveEigenValues();\n  np.matchIgnoreCase(\"set pc1=\");\n  int pc1=np.getInt(1,maxPC);\n  np.matchIgnoreCase(\"pc2=\");\n  int pc2=np.getInt(1,maxPC);\n  int pc3=Math.max(pc1,pc2) + 1;\n  if (np.peekMatchIgnoreCase(\";\")) {\n    viewer.getPcoaTab().set3dMode(false);\n  }\n else {\n    np.matchIgnoreCase(\"pc3=\");\n    pc3=np.getInt(1,maxPC);\n    viewer.getPcoaTab().set3dMode(true);\n  }\n  np.matchIgnoreCase(\";\");\n  if (pc1 == pc2)   throw new IOException(\"pc1==pc2\");\n  if (pc1 == pc3)   throw new IOException(\"pc1==pc3\");\n  if (pc2 == pc3)   throw new IOException(\"pc2==pc3\");\n{\n    viewer.getPcoaTab().setFirstPC(pc1 - 1);\n    viewer.getPcoaTab().setSecondPC(pc2 - 1);\n    viewer.getPcoaTab().setThirdPC(pc3 - 1);\n    final Taxa taxa=new Taxa();\n    java.util.List<String> pids=((Director)getDir()).getDocument().getSampleNames();\n    for (    String name : pids) {\n      taxa.add(name);\n    }\n    viewer.getPcoaTab().setData(taxa,null);\n    viewer.updateConvexHulls=true;\n    viewer.addFormatting(viewer.getPcoaTab().getGraphView());\n  }\n}\n"}
{"nl": "Unset current thread as space initializer", "code": "public static void unsetInitializer(){\n  _threadId.set(null);\n}\n"}
{"nl": "Returns a resize policy allowing scaled / aspect-ratio preserving resizing only", "code": "@NotNull public static ResizePolicy scaled(){\n  return ourScaled;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetSchoolsQuery(VkApiClient client,int cityId){\n  super(client,\"database.getSchools\",GetSchoolsResponse.class);\n  cityId(cityId);\n}\n"}
{"nl": "package content layout", "code": "private void handleDefaultTopBar(){\n  ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);\n  setLayoutParams(params);\n  topBarView=iTopBarInterface.getDefaultTopBarView();\n  topBarView.setBackgroundColor(getColor(XUIConfig.getTopBarBgColor()));\n  topBarView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,(int)getDefaultTopBarHeight()));\n  addView(topBarView);\n  FrameLayout.LayoutParams userViewParams=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);\n  userViewParams.topMargin=(int)getContentTopMargin();\n  addView(mContentView,userViewParams);\n  initLoadContainer((int)getContentTopMargin());\n  addView(loadContainer);\n  handleTopBarShadow();\n}\n"}
{"nl": "Helper method to delete Supplier", "code": "public Boolean deleteSupplier(EntityManager em,String id){\n  Boolean status=true;\n  Supplier supplier=null;\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    supplier=em.find(Supplier.class,id);\n    em.remove(supplier);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during delete of Supplier. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "When a image name part can be ambiguously either host or namespace, check which one it is based on a regex of valid characters for the namespace part", "code": "public static boolean isValidNamespace(String namespaceCandidate){\n  return NAMESPACE_PATTERN.matcher(namespaceCandidate).matches();\n}\n"}
{"nl": "returns true is this table references given dest table", "code": "private boolean references(QueryTableData dest){\n  QueryTableData source=this;\n  while (source != null) {\n    if (source.equals(dest))     return true;\n    source=source.getJoinTable();\n  }\n  return false;\n}\n"}
{"nl": "length of array", "code": "@Override public long limit(){\n  try {\n    return length() >>> 2;\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n    return 0;\n  }\n}\n"}
{"nl": "Grid data", "code": "public static GridData createHVFillGridData(){\n  return createHVFillGridData(1);\n}\n"}
{"nl": "Api Methods", "code": "public void bind(Activity activity){\n  List<IBinding> bindings=getViewBinder(activity).bind(activity);\n  Set<IBinding> _bindings=getBindings(activity.getClass());\n  _bindings.addAll(bindings);\n}\n"}
{"nl": "Show error view with a button when something goes wrong and prompting the user to try again", "code": "public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){\n  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,skipIds);\n}\n"}
{"nl": "test is configured", "code": "public static boolean isConfigured(){\n  return ds != null;\n}\n"}
{"nl": "Format a map scale into a string", "code": "private static String format(double value){\n  return String.format(\"%s%s\",SCALE_PREFIX,NumberFormat.getIntegerInstance().format((int)value));\n}\n"}
{"nl": "collapse an array of paths", "code": "public void collapse(TreePath[] paths){\n  for (  TreePath path : paths) {\n    this.collapse((DefaultMutableTreeNode)path.getLastPathComponent());\n  }\n}\n"}
{"nl": "Returns true if this locale specifies a specific region", "code": "public boolean hasRegion(){\n  return qualifier.getRegion() != null && !FAKE_VALUE.equals(qualifier.getRegion());\n}\n"}
{"nl": "Used for update mobile", "code": "public Authentication(String mobile){\n  this.mobile=mobile;\n}\n"}
{"nl": "Quest completion", "code": "public boolean isCompleteQuest(int questId){\n  QuestState qs=getQuestStateList().getQuestState(questId);\n  if (qs == null) {\n    return false;\n  }\n  return qs.getStatus() == QuestStatus.COMPLETE;\n}\n"}
{"nl": "This method will remove a legion member", "code": "private boolean removeLegionMember(String charName,boolean kick,String playerName){\n  LegionMemberEx legionMember=getLegionMemberEx(charName);\n  if (legionMember == null) {\n    log.error(\"Char name does not exist in legion member table: \" + charName);\n    return false;\n  }\n  deleteLegionMemberFromDB(legionMember);\n  Player player=world.findPlayer(charName);\n  if (player != null) {\n    PacketSendUtility.broadcastPacket(player,new SM_LEGION_UPDATE_TITLE(player.getObjectId(),0,\"\",2),true);\n  }\n  if (kick) {\n    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(1300247,legionMember.getObjectId(),playerName,legionMember.getName()));\n  }\n else {\n    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(900699,legionMember.getObjectId(),charName));\n  }\n  return true;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set fillColor=\");\n  Color color=null;\n  if (np.peekMatchIgnoreCase(\"null\"))   np.matchIgnoreCase(\"null\");\n else   color=np.getColor();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof GraphView) {\n    boolean changed=false;\n    GraphView viewer=(GraphView)getViewer();\n    for (    Node v : viewer.getSelectedNodes()) {\n      viewer.setBackgroundColor(v,color);\n      changed=true;\n    }\n    if (changed) {\n      viewer.repaint();\n    }\n  }\n}\n"}
{"nl": "draw scale", "code": "private void drawScale(Graphics2D gc,double drawWidth,int boxValue){\n  int x=20;\n  int y=topMargin - 30;\n  Rectangle rect=new Rectangle(x,y,(int)drawWidth,(int)drawWidth);\n  gc.setColor(Color.LIGHT_GRAY);\n  gc.fill(rect);\n  gc.setColor(Color.DARK_GRAY);\n  gc.draw(rect);\n  gc.setFont(getFont(ChartViewer.FontKeys.LegendFont.toString()));\n  gc.drawString(String.format(\" = %,d\",boxValue),(int)(x + rect.getWidth()),(int)(y + rect.getHeight()));\n}\n"}
{"nl": "Below method will be used to process data to next step", "code": "private boolean processRowToNextStep() throws KettleException {\n  if (null == this.sortDataRows) {\n    LOGGER.info(\"Record Processed For table: \" + meta.getTabelName());\n    LOGGER.info(\"Number of Records was Zero\");\n    String logMessage=\"Summary: Carbon Sort Key Step: Read: \" + 0 + \": Write: \"+ 0;\n    LOGGER.info(logMessage);\n    putRow(data.getOutputRowMeta(),new Object[0]);\n    setOutputDone();\n    return false;\n  }\n  try {\n    this.sortDataRows.startSorting();\n    this.intermediateFileMerger.finish();\n    LOGGER.info(\"Record Processed For table: \" + meta.getTabelName());\n    String logMessage=\"Summary: Carbon Sort Key Step: Read: \" + readCounter + \": Write: \"+ writeCounter;\n    LOGGER.info(logMessage);\n    putRow(data.getOutputRowMeta(),new Object[0]);\n    setOutputDone();\n    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordSortRowsStepTotalTime(meta.getPartitionID(),System.currentTimeMillis());\n    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordDictionaryValuesTotalTime(meta.getPartitionID(),System.currentTimeMillis());\n    return false;\n  }\n catch (  CarbonSortKeyAndGroupByException e) {\n    throw new KettleException(e);\n  }\n}\n"}
{"nl": "Set name", "code": "public AppsSendRequestQuery name(String value){\n  return unsafeParam(\"name\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetFollowersQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){\n  super(client,\"users.getFollowers\",GetFollowersFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "download file from storage server", "code": "public byte[] download_file1(String file_id,long file_offset,long download_bytes) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return null;\n  }\n  return this.download_file(parts[0],parts[1],file_offset,download_bytes);\n}\n"}
{"nl": "Clear the the table", "code": "public void clear(){\n  _entryInfos.clear();\n}\n"}
{"nl": "Return additional fields", "code": "protected MarketGetByIdQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ChartViewer viewer=(ChartViewer)getViewer();\n  return (viewer.isSeriesTabSelected() && viewer.getChartData().getChartSelection().getSelectedSeries().size() > 0) || (!viewer.isSeriesTabSelected() && viewer.getChartData().getChartSelection().getSelectedClasses().size() > 0);\n}\n"}
{"nl": "Used to send the resume event in the case that the Activity is destroyed by the OS", "code": "public void sendResumeEvent(PluginResult resumeEvent){\nsynchronized (messageChannelLock) {\n    if (messageChannel != null) {\n      sendEventMessage(resumeEvent);\n    }\n else {\n      this.pendingResume=resumeEvent;\n    }\n  }\n}\n"}
{"nl": "Creates a new instance of GraphSimilarity", "code": "public GraphSimilarity(){\n  this.ValueSimilarity=0.0;\n  this.ContainmentSimilarity=0.0;\n  this.SizeSimilarity=0.0;\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n"}
{"nl": "return true if the handoff data was updated since the last time wizard ran", "code": "private static boolean isHandoff(AndroidFirstRunPersistentData persistentData){\n  if (InstallerData.exists()) {\n    if (!persistentData.isSdkUpToDate() || !persistentData.isSameTimestamp(InstallerData.get().getTimestamp())) {\n      return InstallerData.get().isCurrentVersion();\n    }\n  }\n  return false;\n}\n"}
{"nl": "Set value", "code": "public AccountSetInfoQuery value(String value){\n  return unsafeParam(\"value\",value);\n}\n"}
{"nl": "COMPONENT QUERIES", "code": "public ComponentCursor queryComponentCreated(long id){\n  return mHelper.queryComponentCreated(id);\n}\n"}
{"nl": "removes the luaState from the states list", "code": "public synchronized static void removeLuaState(int idx){\n  states.add(idx,null);\n}\n"}
{"nl": "DataTag id: 1000", "code": "public static Configuration createSubEquipmentDataTag(Long parentId){\n  Configuration configuration=new Configuration();\n  DataTag dataTag=DataTag.create(\"DATA_INI_TEST\",Integer.class,new DataTagAddress()).subEquipmentId(parentId).id(1000L).build();\n  configuration.addEntity(dataTag);\n  return configuration;\n}\n"}
{"nl": "Log the given exception along with the provided message and severity indicator", "code": "public static void log(int severity,String message,Throwable e){\n  log(new Status(severity,PLUGIN_ID,0,message,e));\n}\n"}
{"nl": "ARENA QUESTS QUERIES", "code": "public ArenaQuestCursor queryArenaQuests(){\n  return mHelper.queryArenaQuests();\n}\n"}
{"nl": "Returned data from database converter in UI style charts", "code": "private static Map<String,List<ChartObject>> databaseDataConverter(Map<String,ComplexValue> dbData,int launches,Launch last){\n  DecimalFormat formatter=new DecimalFormat(\"###.##\");\n  Map<String,List<ChartObject>> result=new LinkedHashMap<>();\n  if (dbData.keySet().isEmpty())   return result;\n  for (  Entry<String,ComplexValue> pair : dbData.entrySet()) {\n    ChartObject object=new ChartObject();\n    Map<String,String> values=new HashMap<>();\n    values.put(ALL_RUNS,String.valueOf(pair.getValue().getTotal()));\n    values.put(FAILED,String.valueOf(pair.getValue().getCount()));\n    double value=(double)pair.getValue().getCount() / pair.getValue().getTotal() * 100;\n    values.put(AFFECTED_BY,String.valueOf(formatter.format(value)));\n    values.put(LAST_FAIL_CAPTION,String.valueOf(pair.getValue().getStartTime()));\n    object.setValues(values);\n    result.put(pair.getKey(),Lists.newArrayList(object));\n  }\n  ChartObject lastLaunch=new ChartObject();\n  lastLaunch.setName(last.getName());\n  lastLaunch.setNumber(last.getNumber().toString());\n  lastLaunch.setId(last.getId());\n  result.put(LAST_FOUND_LAUNCH,Lists.newArrayList(lastLaunch));\n  return result;\n}\n"}
{"nl": "return the shortname of the class, cut the prefix by module package", "code": "public static String shortName(Class<? extends Model> model){\n  if (model == null || home == null) {\n    return X.EMPTY;\n  }\n  return home._shortName(model);\n}\n"}
{"nl": "Audio file IDs, in the following format: {owner_id}_{audio_id}", "code": "protected AudioGetByIdQuery audios(String... value){\n  return unsafeParam(\"audios\",value);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"show taxon=\");\n  String name=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof InspectorWindow) {\n    InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n    int taxId;\n    if (Basic.isInteger(name))     taxId=Integer.parseInt(name);\n else     taxId=TaxonomyData.getName2IdMap().get(name);\n    if (taxId == 0) {\n      NotificationsInSwing.showWarning(inspectorWindow.getFrame(),\"Unknown taxon: \" + name);\n    }\n else     inspectorWindow.addTopLevelNode(name,taxId,Classification.Taxonomy);\n  }\n else   NotificationsInSwing.showError(getViewer().getFrame(),\"Command in invalid context\");\n}\n"}
{"nl": "Scale based on min,max", "code": "public static DataFrame normalize(DataFrame dataFrame,double min,double max,List<String> skipColumns){\n  String[] columnNames=dataFrame.columns();\n  for (  String columnName : columnNames) {\n    if (skipColumns.contains(columnName))     continue;\n    DataFrame minMax=dataFrame.select(columnName).agg(min(columnName),max(columnName));\n    Row r=minMax.collect()[0];\n    double dMin=((Number)r.get(0)).doubleValue();\n    double dMax=((Number)r.get(1)).doubleValue();\n    double maxSubMin=dMax - dMin;\n    if (maxSubMin == 0)     maxSubMin=1;\n    Column newCol=dataFrame.col(columnName).minus(dMin).divide(maxSubMin).multiply(max - min).plus(min);\n    dataFrame=dataFrame.withColumn(columnName,newCol);\n  }\n  return dataFrame;\n}\n"}
{"nl": "Adds all process id's of that list as dependency to this tag", "code": "public void addProcessIds(final Collection<Long> processIds){\n  for (  Long processId : processIds) {\n    addProcessId(processId);\n  }\n}\n"}
{"nl": "do embedding of graph", "code": "private void embedGraph(){\n  FruchtermanReingoldLayout fruchtermanReingoldLayout=new FruchtermanReingoldLayout(graph,null);\n  NodeArray<Point2D> coordinates=new NodeArray<>(graph);\n  fruchtermanReingoldLayout.apply(1000,coordinates);\n  boolean first=true;\n  for (Node v=graph.getFirstNode(); v != null; v=v.getNext()) {\n    NodeData nodeData=(NodeData)v.getData();\n    nodeData.setLocation(coordinates.get(v));\n    if (first) {\n      boundingBox.setRect(coordinates.get(v).getX(),coordinates.get(v).getY(),1,1);\n      first=false;\n    }\n else     boundingBox.add(coordinates.get(v));\n  }\n  boundingBox.setRect(boundingBox.getX() - maxRadius,boundingBox.getY() - maxRadius,boundingBox.getWidth() + 2 * maxRadius,boundingBox.getHeight() + 2 * maxRadius);\n}\n"}
{"nl": "Checks if the specified name is a valid Android component name", "code": "private boolean isValidComponentName(String name){\n  if (name.isEmpty())   return false;\n  if (name.equals(\"true\") || name.equals(\"false\"))   return false;\n  if (Character.isDigit(name.charAt(0)))   return false;\n  if (name.startsWith(\".\"))   return true;\n  return false;\n}\n"}
{"nl": "Logs an error message to the console or logcat", "code": "public static void error(Object message,Throwable exception){\n  Gdx.app.error(TAG,String.valueOf(message),exception);\n}\n"}
{"nl": "Called when view focus is changed", "code": "@Override public void onWindowFocusChanged(boolean hasFocus){\n  super.onWindowFocusChanged(hasFocus);\n  if (hasFocus && immersiveMode) {\n    final int uiOptions=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n    getWindow().getDecorView().setSystemUiVisibility(uiOptions);\n  }\n}\n"}
{"nl": "Registers the given event to the specified listener using a directly passed EventExecutor", "code": "public void registerEvent(Class<? extends Event> event,Listener listener,EventPriority priority,EventExecutor executor,Plugin plugin,boolean ignoreCancelled){\n  Validate.notNull(listener,\"Listener cannot be null\");\n  Validate.notNull(priority,\"Priority cannot be null\");\n  Validate.notNull(executor,\"Executor cannot be null\");\n  Validate.notNull(plugin,\"Plugin cannot be null\");\n  if (!plugin.isEnabled()) {\n    throw new IllegalPluginAccessException(\"Plugin attempted to register \" + event + \" while not enabled\");\n  }\n  getEventListeners(event).register(new RegisteredListener(listener,executor,priority,plugin,ignoreCancelled));\n}\n"}
{"nl": "Release summon", "code": "public static final void release(final Summon summon,final UnsummonType unsummonType,final boolean isAttacked){\n  if (summon.getMode() == SummonMode.RELEASE) {\n    return;\n  }\n  summon.getController().cancelCurrentSkill();\n  summon.setMode(SummonMode.RELEASE);\n  final Player master=summon.getMaster();\nswitch (unsummonType) {\ncase COMMAND:\n    PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_UNSUMMON_FOLLOWER(summon.getNameId()));\n  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));\nbreak;\ncase DISTANCE:\nPacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_UNSUMMON_BY_TOO_DISTANCE);\nPacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));\nbreak;\ncase LOGOUT:\ncase UNSPECIFIED:\nbreak;\n}\nsummon.getObserveController().notifySummonReleaseObservers();\nsummon.setReleaseTask(ThreadPoolManager.getInstance().schedule(new ReleaseSummonTask(summon,unsummonType,isAttacked),5000));\n}\n"}
{"nl": "Disconnects from Traffic Alerts", "code": "public static void disableTrafficAlerts(){\n  getAirMapTrafficService().disconnect();\n  getAirMapTrafficService().removeAllListeners();\n}\n"}
{"nl": "Check if element is neither present nor visible", "code": "public static ExpectedCondition<Boolean> elementNotPresentOrVisible(final By bySelector){\n  return null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetQueryWithFields(VkApiClient client,List<UserField> fields){\n  super(client,\"friends.get\",GetFieldsResponse.class);\n  fields(fields);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountGetProfileInfoQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getProfileInfo\",UserSettings.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final ClusterViewer viewer=getViewer();\n  int max=viewer.getPcoaTab().getPCoA().getLoadingVectorsBiPlot().size();\n  int number=Math.min(max,viewer.getPcoaTab().getBiplotSize());\n  String result=JOptionPane.showInputDialog(viewer.getFrame(),\"Number of biplot vectors (0-\" + max + \"): \",number);\n  if (result != null && Basic.isInteger(result))   executeImmediately(\"set biplotSize=\" + Basic.parseInt(result) + \";\");\n}\n"}
{"nl": "Creates a new empty feature set", "code": "public FeatureSetImpl(){\n  featureMap=new LinkedHashMap();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsBanUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.banUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n"}
{"nl": "Adds a language limit to the query", "code": "public void addLanguage(String languageId){\n  query.append(\" +languageId:\" + languageId);\n}\n"}
{"nl": "Close current activity correctly", "code": "private void close(){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   supportFinishAfterTransition();\n else   finish();\n}\n"}
{"nl": "execute the comparison", "code": "public void execute(){\n  InputDataItem first=(InputDataItem)dataCBox1.getSelectedItem();\n  InputDataItem second=(InputDataItem)dataCBox2.getSelectedItem();\n  IMethodItem item=(IMethodItem)methodCBox.getSelectedItem();\n  if (item != null && !item.isApplicable()) {\n    NotificationsInSwing.showError(this,\"Statistical method '\" + item.getName() + \"' is not correctly configured\");\n    return;\n  }\n  if (first != null && second != null && item != null) {\n    dir.execute(\"compare\" + \" stats=\" + item.getName() + \" pid1=\"+ first.getPID()+ \" pid2=\"+ second.getPID()+ \" \"+ item.getOptionsString()+ \";\",dir.getMainViewer().getCommandManager());\n  }\n}\n"}
{"nl": "Listener Methods", "code": "@OnClick({R.id.primary1,R.id.primary2,R.id.primary3,R.id.primary4,R.id.primary5,R.id.primary6}) void onPrimaryColorClicked(View view){\n  Button btn=(Button)view;\n  int tintColor=btn.getBackgroundTintList().getDefaultColor();\n  Scoop.getInstance().update(Toppings.PRIMARY,tintColor);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  SearchManager searchManager=((IViewerWithFindToolBar)getViewer()).getSearchManager();\n  if (searchManager != null)   searchManager.applyFindNext();\n}\n"}
{"nl": "Bind a view to a topping on a given object", "code": "public Scoop bind(Object obj,int toppingId,View view){\n  return bind(obj,toppingId,view,null);\n}\n"}
{"nl": "Below method will be used to initialize the the parser", "code": "public void initialize() throws IOException {\n  CsvParserSettings parserSettings=new CsvParserSettings();\n  parserSettings.getFormat().setDelimiter(csvParserVo.getDelimiter().charAt(0));\n  parserSettings.getFormat().setComment(csvParserVo.getCommentCharacter().charAt(0));\n  parserSettings.setLineSeparatorDetectionEnabled(true);\n  parserSettings.setMaxColumns(getMaxColumnsForParsing(csvParserVo.getNumberOfColumns(),csvParserVo.getMaxColumns()));\n  parserSettings.setNullValue(\"\");\n  parserSettings.setIgnoreLeadingWhitespaces(false);\n  parserSettings.setIgnoreTrailingWhitespaces(false);\n  parserSettings.setSkipEmptyLines(false);\n  parserSettings.getFormat().setQuote(null == csvParserVo.getQuoteCharacter() ? '\\\"' : csvParserVo.getQuoteCharacter().charAt(0));\n  parserSettings.getFormat().setQuoteEscape(null == csvParserVo.getEscapeCharacter() ? '\\\\' : csvParserVo.getEscapeCharacter().charAt(0));\n  blockCounter++;\n  initializeReader();\n  if (csvParserVo.getBlockDetailsList().get(blockCounter).getBlockOffset() == 0) {\n    parserSettings.setHeaderExtractionEnabled(csvParserVo.isHeaderPresent());\n  }\n  parser=new CsvParser(parserSettings);\n  parser.beginParsing(inputStreamReader);\n}\n"}
{"nl": "Change the name of the file", "code": "public static File renameFile(File file,String newName){\n  String absolutePath=file.getAbsolutePath();\n  String fileName=file.getName();\n  String newAbsolutePath=absolutePath.substring(0,absolutePath.lastIndexOf(fileName)) + newName;\n  return new File(newAbsolutePath);\n}\n"}
{"nl": "Converts a dp value to a px value", "code": "public static int dpToPx(float dp){\n  return Math.round(dp * getDensity());\n}\n"}
{"nl": "error log", "code": "public static void e(String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.e(TAG,buildMsg(msg),e);\n  }\n}\n"}
{"nl": "Create an AggregateConfig", "code": "public AggregateConfig(String[] configs) throws ConfigurationException {\n  specific=ConfigurationProvider.getInstance(configs);\n}\n"}
{"nl": "Create an <code>unsigned int</code>", "code": "public static UInteger uint(String value) throws NumberFormatException {\n  return value == null ? null : UInteger.valueOf(value);\n}\n"}
{"nl": "Release the CPeer when called on un register from the Selector", "code": "public void close(){\n  connectionPool.freeConnection(cpeer);\n}\n"}
{"nl": "Construct an XSNamedMap implementation for one namespace", "code": "public XSNamedMap4Types(String namespace,SymbolHash map,short type){\n  super(namespace,map);\n  fType=type;\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && !viewer.getPcoaTab().isIs3dMode();\n}\n"}
{"nl": "//agg getMergeColumns getAliaColumns //group by setGroupbyColumns", "code": "public void test(String sql){\n  ParseResult result=new ParseResult();\n  ExecutePlan plan=new ExecutePlan();\n  parser.init(sql,null);\n  parser.parse(result);\n  plan.setExecuteType(ExecuteType.PARTITION);\n  SQLSelectStatement stmt=(SQLSelectStatement)parser.statement;\n  parser.parseMysqlQueary(result,plan,(MySqlSelectQueryBlock)stmt.getSelect().getQuery());\n  StringBuilder out=new StringBuilder();\n  MySqlOutputVisitor outPutVisitor=new MySqlOutputVisitor(out);\n  stmt.accept(outPutVisitor);\n  System.out.println();\n  System.out.println(\"/***********************agg*************************/\");\n  System.out.println(plan.getMergeColumns());\n  System.out.println(\"setHasAllColumnExpr:\" + result.isHasAllColumnExpr());\n  System.out.println(out.toString());\n  PrintUtil.printFildAlisMap(result.getAliaColumns());\n  System.out.println(\"/*********************group by**********************/\");\n  System.out.println(plan.getGroupbyColumns());\n  System.out.println(\"/*********************order by**********************/\");\n  System.out.println(plan.getOrderbyColumns());\n}\n"}
{"nl": "Dump the graph in Mary format", "code": "public void saveGraph(DirectedGraph graph,String destFile) throws IOException {\n  if (graph == null)   throw new NullPointerException(\"Cannot dump null graph\");\n  if (destFile == null)   throw new NullPointerException(\"No destination file\");\n  Log.d(Mary.LOG,\"Dumping directed graph in Mary format to \" + destFile + \" ...\");\n  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destFile)));\n  MaryHeader hdr=new MaryHeader(MaryHeader.DIRECTED_GRAPH);\n  hdr.writeTo(out);\n  Properties props=graph.getProperties();\n  if (props == null) {\n    out.writeShort(0);\n  }\n else {\n    ByteArrayOutputStream baos=new ByteArrayOutputStream();\n    props.store(baos,null);\n    byte[] propData=baos.toByteArray();\n    out.writeShort(propData.length);\n    out.write(propData);\n  }\n  graph.getFeatureDefinition().writeBinaryTo(out);\n  dumpBinary(graph,out);\n  out.close();\n  Log.d(Mary.LOG,\" ... done\\n\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetAvailableForCallQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){\n  super(client,\"friends.getAvailableForCall\",GetAvailableForCallFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "enable a set of samples", "code": "public void enableSamples(Collection<String> sampleNames){\n  int size=disabledSamples.size();\n  disabledSamples.removeAll(sampleNames);\n  if (size != disabledSamples.size()) {\n    if (originalData == null) {\n      originalData=new DataTable();\n      originalData.copy(this);\n    }\n    Set<String> newDisabled=new HashSet<>();\n    newDisabled.addAll(disabledSamples);\n    copyEnabled(newDisabled,originalData);\n  }\n}\n"}
{"nl": "[x, y, angle]", "code": "public static Transform valueOf(String string){\n  Transform result=new Transform();\n  String[] tokens=StringUtil.split(string,\",\");\n  double x=Double.valueOf(tokens[0]);\n  double y=Double.valueOf(tokens[1]);\n  double angle=Double.valueOf(tokens[2]);\n  result.setTranslation(x,y);\n  result.setRotation(Math.toRadians(angle));\n  return result;\n}\n"}
{"nl": "Gets a context that will allow all nodes", "code": "public static Contexts allowAll(){\n  return new Contexts(ContextSet.empty(),true,true,true,true,true,true);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AppsGetCatalogQuery(VkApiClient client,int count){\n  super(client,\"apps.getCatalog\",GetCatalogResponse.class);\n  count(count);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public CompactCharArray(char defaultValue){\n}\n"}
{"nl": "Compares the new and the old Parser for different xml files", "code": "private void compareParserResults(String xmlFile,String oldXmlFile) throws IOException {\n  XMLSourceSinkParser newParser=XMLSourceSinkParser.fromFile(xmlFile);\n  PermissionMethodParser oldParser=PermissionMethodParser.fromFile(oldXmlFile);\n  if (newParser != null && oldParser != null) {\n    Assert.assertEquals(oldParser.getSources(),newParser.getSources());\n    Assert.assertEquals(oldParser.getSinks(),newParser.getSinks());\n  }\n else   Assert.fail();\n}\n"}
{"nl": "Performs the removal of the local copy of the target file", "code": "@Override public void onCancel(String callerTag){\n  ComponentsGetter cg=(ComponentsGetter)getActivity();\n  ArrayList<OCFile> list=new ArrayList<>();\n  list.add(mTargetFile);\n  cg.getFileOperationsHelper().removeFiles(list,true);\n  FileDataStorageManager storageManager=cg.getStorageManager();\n  boolean containsFavorite=false;\n  if (mTargetFile.isFolder()) {\n    Vector<OCFile> files=storageManager.getFolderContent(mTargetFile,false);\n    for (    OCFile file : files) {\n      containsFavorite=file.isFavorite() || containsFavorite;\n      if (containsFavorite)       break;\n    }\n  }\n  if (mTargetFile.isFavorite() || containsFavorite) {\n    OCFile folder=null;\n    if (mTargetFile.isFolder()) {\n      folder=mTargetFile;\n    }\n else {\n      folder=storageManager.getFileById(mTargetFile.getParentId());\n    }\n    folder.setEtag(\"\");\n    storageManager.saveFile(folder);\n  }\n}\n"}
{"nl": "Allows to start this activity", "code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,LoginActivity.class);\n  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n  _context.startActivity(intent);\n}\n"}
{"nl": "verifies that two arrays are equal", "code": "public static <T extends FieldElement<T>>void assertEquals(T[] m,T[] n){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors not same length\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(m[i],n[i]);\n  }\n}\n"}
{"nl": "Return additional fields", "code": "public PhotosGetByIdQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  final CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null && viewer.getMode() == Comparer.COMPARISON_MODE.RELATIVE;\n}\n"}
{"nl": "Remove a previously added delegate", "code": "public X509TrustManager removeDelegate(Object key){\n  return delegates.remove(key);\n}\n"}
{"nl": "ask view to allow user input", "code": "public void unlockUserInput(){\n  locked=false;\n  tabbedPane.setEnabled(true);\n  setCursor(Cursor.getDefaultCursor());\n  getCommandManager().setEnableCritical(true);\n  getCommandManager().updateEnableState();\n}\n"}
{"nl": "create the output file name", "code": "private String createOutputFileName(String outputFileTemplate,int classId,String className,int numberOfIds){\n  String outputFile=null;\n  if (outputFileTemplate.contains(\"%d\"))   outputFile=outputFileTemplate.replaceAll(\"%d\",\"\" + classId);\n  if (outputFileTemplate.contains(\"%s\"))   outputFile=(outputFile == null ? outputFileTemplate : outputFile).replaceAll(\"%s\",Basic.toCleanName(className));\n  if (outputFile == null && numberOfIds > 1)   outputFile=Basic.replaceFileSuffix(outputFileTemplate,\"-\" + classId + \".fasta\");\n  if (outputFile == null)   outputFile=outputFileTemplate;\n  return outputFile;\n}\n"}
{"nl": "Show overlapping container", "code": "public void showOverlappingContainer(){\n  mFrameLayoutOverlappingViewContainer.setVisibility(VISIBLE);\n}\n"}
{"nl": "Set video id", "code": "protected VideoRemoveFromAlbumQuery videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n"}
{"nl": "Removes account from list of connections", "code": "public static synchronized void removeAccountOnLS(Account account){\n  accountsOnLS.remove(account.getId());\n}\n"}
{"nl": "setup the green gradient", "code": "public RedGradient(int maxCount){\n  this.maxCount=maxCount;\n  factor=maxCount / Math.log(maxCount);\n}\n"}
{"nl": "Return \"wall\", \"profiles\", and \"groups\" fields", "code": "protected WallGetQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Create an instance registered with queue", "code": "WeakRef(Remote impl){\n  super(impl,queue);\n}\n"}
{"nl": "Determines if current L&F is GTK using Nimbus theme", "code": "public static boolean isNimbusGTKTheme(){\n  return UIUtils.isNimbusGTKTheme();\n}\n"}
{"nl": "Restore changed icons,colors and texts from saveInstance", "code": "@SuppressWarnings(\"unchecked\") private void restoreChangedIconsAndTexts(){\n  Bundle restoredBundle=savedInstanceState;\n  if (restoredBundle != null) {\n    if (restoredBundle.containsKey(CHANGED_ICON_AND_TEXT_BUNDLE_KEY)) {\n      changedItemAndIconHashMap=(HashMap<Integer,SpaceItem>)restoredBundle.getSerializable(CHANGED_ICON_AND_TEXT_BUNDLE_KEY);\n      if (changedItemAndIconHashMap != null) {\n        SpaceItem spaceItem;\n        for (int i=0; i < changedItemAndIconHashMap.size(); i++) {\n          spaceItem=changedItemAndIconHashMap.get(i);\n          spaceItems.get(i).setItemIcon(spaceItem.getItemIcon());\n          spaceItems.get(i).setItemName(spaceItem.getItemName());\n        }\n      }\n    }\n    if (restoredBundle.containsKey(CENTRE_BUTTON_ICON_KEY)) {\n      centreButtonIcon=restoredBundle.getInt(CENTRE_BUTTON_ICON_KEY);\n      fab.setImageResource(centreButtonIcon);\n    }\n    if (restoredBundle.containsKey(SPACE_BACKGROUND_COLOR_KEY)) {\n      int backgroundColor=restoredBundle.getInt(SPACE_BACKGROUND_COLOR_KEY);\n      changeSpaceBackgroundColor(backgroundColor);\n    }\n  }\n}\n"}
{"nl": "A method to modify prosody modifications", "code": "public void process(Document doc){\n  TreeWalker tw=DomUtils.createTreeWalker(doc,MaryXML.PROSODY);\n  Element e=null;\n  while ((e=(Element)tw.nextNode()) != null) {\n    Log.d(Mary.LOG,\"Found prosody element around '\" + DomUtils.getPlainTextBelow(e) + \"'\");\n    boolean hasRateAttribute=e.hasAttribute(\"rate\");\n    boolean hasContourAttribute=e.hasAttribute(\"contour\");\n    boolean hasPitchAttribute=e.hasAttribute(\"pitch\");\n    NodeList nl=e.getElementsByTagName(\"ph\");\n    if (nl.getLength() == 0) {\n      continue;\n    }\n    if (hasRateAttribute) {\n      applySpeechRateSpecifications(nl,e.getAttribute(\"rate\"));\n    }\n    if (hasPitchAttribute || hasContourAttribute) {\n      double[] f0Contour=getF0Contour(nl);\n      double[] coeffs=Polynomial.fitPolynomial(f0Contour,1);\n      double[] baseF0Contour=Polynomial.generatePolynomialValues(coeffs,F0CONTOUR_LENGTH,0,1);\n      double[] diffF0Contour=new double[F0CONTOUR_LENGTH];\n      for (int i=0; i < f0Contour.length; i++) {\n        diffF0Contour[i]=f0Contour[i] - baseF0Contour[i];\n      }\n      if (hasPitchAttribute) {\n        baseF0Contour=applyPitchSpecifications(nl,baseF0Contour,e.getAttribute(\"pitch\"));\n      }\n      if (hasContourAttribute) {\n        baseF0Contour=applyContourSpecifications(nl,baseF0Contour,e.getAttribute(\"contour\"));\n      }\n      for (int i=0; i < f0Contour.length; i++) {\n        f0Contour[i]=diffF0Contour[i] + baseF0Contour[i];\n      }\n      setModifiedContour(nl,f0Contour);\n    }\n  }\n}\n"}
{"nl": "Create a new Webster", "code": "public Webster(int port,String roots) throws BindException {\n  this.port=port;\n  initialize(roots);\n}\n"}
{"nl": "modify intonation contour using HNM technology", "code": "private AudioInputStream synthesizeUsingF0Modification(int backchannelNumber,float[] pScalesArray,float[] pScalesTimes,float[] tScalesArray,float[] tScalesTimes,AudioFileFormat aft) throws SynthesisException {\n  if (backchannelNumber > vHNMFeaturesReader.getNumberOfUnits()) {\n    throw new IllegalArgumentException(\"requesting unit should not be more than number of units\");\n  }\n  if (!f0ContourImposeSupport) {\n    throw new SynthesisException(\"Mary configuration of this voice doesn't support intonation contour imposition\");\n  }\n  BasicProsodyModifierParams pmodParams=new BasicProsodyModifierParams(tScalesArray,tScalesTimes,pScalesArray,pScalesTimes);\n  HntmSpeechSignal hnmSignal=vHNMFeaturesReader.getHntmSpeechSignal(backchannelNumber);\n  HntmSynthesizer hs=new HntmSynthesizer();\n  HntmSynthesizedSignal xhat=hs.synthesize(hnmSignal,null,null,pmodParams,null,analysisParams,synthesisParams);\n  AudioFormat af;\n  if (aft == null) {\n    float sampleRate=16000.0F;\n    int sampleSizeInBits=16;\n    int channels=1;\n    boolean signed=true;\n    boolean bigEndian=false;\n    af=new AudioFormat(sampleRate,sampleSizeInBits,channels,signed,bigEndian);\n  }\n else {\n    af=aft.getFormat();\n  }\n  double[] audio_double=xhat.output;\n  double MaxSample=MathUtils.getAbsMax(audio_double);\n  for (int i=0; i < audio_double.length; i++) {\n    audio_double[i]=0.3 * (audio_double[i] / MaxSample);\n  }\n  DDSAudioInputStream oais=new DDSAudioInputStream(new BufferedDoubleDataSource(audio_double),af);\n  return oais;\n}\n"}
{"nl": "Hate based on BOOST_HATE stat Now used only from skills, probably need to use for regular attack", "code": "public static int calculateHate(Creature creature,int value){\n  Stat2 stat=new AdditionStat(StatEnum.BOOST_HATE,value,creature,0.1f);\n  return (int)(creature.getGameStats().getStat(StatEnum.BOOST_HATE,stat).getCurrent());\n}\n"}
{"nl": "Gets if OP defaults should be included", "code": "public boolean isOp(){\n  return this.op;\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void v(Class<?> clazz,String msg){\n  if (isDebug) {\n    Log.v(clazz.getSimpleName(),msg);\n  }\n}\n"}
{"nl": "Reset the image zoom to default value for each CachedFragments", "code": "public void resetZoom(){\n  Iterator<FileFragment> entries=mCachedFragments.values().iterator();\n  while (entries.hasNext()) {\n    FileFragment fileFragment=(FileFragment)entries.next();\n    if (fileFragment instanceof PreviewImageFragment) {\n      ((PreviewImageFragment)fileFragment).getImageView().resetZoom();\n    }\n  }\n}\n"}
{"nl": "Convert the given image to an rgb image", "code": "public void toBufferedImageRGB(INDArray arr,BufferedImage image){\n  if (arr.rank() < 3)   throw new IllegalArgumentException(\"Arr must be 3d\");\n  image=scalingIfNeed(image,arr.size(-2),arr.size(-1),true);\n  for (int i=0; i < image.getWidth(); i++) {\n    for (int j=0; j < image.getHeight(); j++) {\n      int r=arr.slice(0).getInt(i,j);\n      int g=arr.slice(1).getInt(i,j);\n      int b=arr.slice(2).getInt(i,j);\n      int a=1;\n      int col=(a << 24) | (r << 16) | (g << 8)| b;\n      image.setRGB(i,j,col);\n    }\n  }\n}\n"}
{"nl": "copy the Math_Vector", "code": "public Math_Vector cpy(){\n  return new Math_Vector(x,y);\n}\n"}
{"nl": "write TextGrid to text file which can be used by Praat", "code": "public void writeToFile(String fileName) throws IOException {\n  FileWriter fw=new FileWriter(fileName);\n  fw.append(this.toString());\n  fw.close();\n}\n"}
{"nl": "Starts the streaming consumption", "code": "@Override public void startStreamingConsumption(long timeout){\n  jssc.start();\n  if (timeout < 0)   jssc.awaitTermination();\n else   jssc.awaitTermination(timeout);\n}\n"}
{"nl": "Add an attr to the config", "code": "public ResourcesPoet addAttr(Attr attr){\n  Element element=document.createElement(\"attr\");\n  element.setAttribute(\"name\",attr.name);\n  if (attr.formats != null && !attr.formats.isEmpty()) {\n    String formatString=\"\";\n    for (    Attr.Format format : attr.formats) {\n      formatString=formatString + format.toString() + \"|\";\n    }\n    formatString=formatString.substring(0,formatString.length() - 1);\n    element.setAttribute(\"format\",formatString);\n  }\n  resourceElement.appendChild(element);\n  return this;\n}\n"}
{"nl": "Set a maximum number of pokeballs", "code": "public CatchOptions maxPokeballs(int maxPokeballs){\n  if (maxPokeballs <= 1)   maxPokeballs=-1;\n  this.maxPokeballs=maxPokeballs;\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetSubscriptionsQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"users.getSubscriptions\",GetSubscriptionsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SearchGetHintsQuery(VkApiClient client,UserActor actor){\n  super(client,\"search.getHints\",Utils.buildParametrizedType(List.class,Hint.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Add the specified int token", "code": "private void addToken(int token){\n  try {\n    fTokens[fTokenCount]=token;\n  }\n catch (  ArrayIndexOutOfBoundsException ex) {\n    int[] oldList=fTokens;\n    fTokens=new int[fTokenCount << 1];\n    System.arraycopy(oldList,0,fTokens,0,fTokenCount);\n    fTokens[fTokenCount]=token;\n  }\n  fTokenCount++;\n}\n"}
{"nl": "Checks if new player cube is not max", "code": "private static boolean validateNewSize(int level){\n  return !(level < MIN_EXPAND || level > MAX_EXPAND);\n}\n"}
{"nl": "Return progress of load content from cloud", "code": "@Override public void onLoadContentProgress(int loadPercent){\n}\n"}
{"nl": "remove the pending search object & if requested disable initial search indicator NOTE- should be done when template is locked", "code": "public void removePendingFifoSearchObject(boolean disableInitialSearch){\n  _pendingFifoSearch=null;\n  if (disableInitialSearch)   resetInitialFifoSearchActive();\n}\n"}
{"nl": "Do a DFS traversal", "code": "private void trace(VarNode node,PrintStream ps,HashSet<Node> visitedNodes,int level){\n  if (level < 1)   return;\n  ps.println(\"\\t\" + translateLabel(node));\n  Node[] succs=pag.simpleInvLookup(node);\n  for (int i=0; i < succs.length; i++) {\n    if (visitedNodes.contains(succs[i]))     continue;\n    ps.println(\"\\t\" + translateLabel(succs[i]));\n    ps.println(\"\\t\" + translateEdge(node,succs[i],\"assign\"));\n    visitedNodes.add(succs[i]);\n    trace((VarNode)succs[i],ps,visitedNodes,level - 1);\n  }\n  succs=pag.allocInvLookup(node);\n  for (int i=0; i < succs.length; i++) {\n    if (visitedNodes.contains(succs[i]))     continue;\n    ps.println(\"\\t\" + translateLabel(succs[i]));\n    ps.println(\"\\t\" + translateEdge(node,succs[i],\"new\"));\n  }\n  succs=vmatches.get(node);\n  if (succs != null) {\n    for (int i=0; i < succs.length; i++) {\n      if (visitedNodes.contains(succs[i]))       continue;\n      ps.println(\"\\t\" + translateLabel(succs[i]));\n      ps.println(\"\\t\" + translateEdge(node,succs[i],\"vmatch\"));\n      trace((VarNode)succs[i],ps,visitedNodes,level - 1);\n    }\n  }\n}\n"}
{"nl": "Creates new form LayoutTest", "code": "public LayoutTest(){\n  initComponents();\n}\n"}
{"nl": "Tints a drawable with the provided color", "code": "public static Drawable tintDrawable(@Nullable Drawable drawable,@ColorInt int color){\n  if (drawable != null) {\n    drawable.setColorFilter(color,PorterDuff.Mode.SRC_IN);\n  }\n  return drawable;\n}\n"}
{"nl": "Writes Image Descriptor", "code": "protected void writeImageDesc() throws IOException {\n  out.write(0x2c);\n  writeShort(x);\n  writeShort(y);\n  writeShort(width);\n  writeShort(height);\n  if (firstFrame) {\n    out.write(0);\n  }\n else {\n    out.write(0x80 | 0 | 0| 0| palSize);\n  }\n}\n"}
{"nl": "call this method to exit full screen", "code": "public void exitFullScreen(){\n  View decorView=mContext.getWindow().getDecorView();\n  showSystemUI(decorView);\n  for (  View view : views) {\n    view.setVisibility(View.VISIBLE);\n    view.invalidate();\n  }\n}\n"}
{"nl": "Check all online servers are health & remove dead online servers", "code": "public void check(){\n  Response<Set<String>> serversResp=clusterService.listOnlineServers();\n  if (!serversResp.isSuccess()) {\n    Logs.error(\"failed to get all online servers, cause: {}\",serversResp.getErr());\n    return;\n  }\n  try {\n    Set<String> allServers=serversResp.getData();\n    final Set<String> failedServers=Sets.newHashSet();\n    doCheck(allServers,failedServers);\n    removeFailedServers(failedServers);\n  }\n catch (  InterruptedException e) {\n    Logs.error(\"failed to check online servers: {}\",Throwables.getStackTraceAsString(e));\n  }\n}\n"}
{"nl": "Creates new form InputMapping", "code": "public InputMapping(){\n  initComponents();\n}\n"}
{"nl": "Animation Layout Helpers", "code": "private void layoutAppearingViews(RecyclerView.Recycler recycler,View referenceView,int referencePosition,int extraCount,int offset){\n  if (extraCount < 1)   return;\n  for (int extra=1; extra <= extraCount; extra++) {\n    final int extraPosition=referencePosition + extra;\n    if (extraPosition < 0 || extraPosition >= getItemCount()) {\n      continue;\n    }\n    View appearing=recycler.getViewForPosition(extraPosition);\n    addView(appearing);\n    final int newRow=getGlobalRowOfPosition(extraPosition + offset);\n    final int rowDelta=newRow - getGlobalRowOfPosition(referencePosition + offset);\n    final int newCol=getGlobalColumnOfPosition(extraPosition + offset);\n    final int colDelta=newCol - getGlobalColumnOfPosition(referencePosition + offset);\n    layoutTempChildView(appearing,rowDelta,colDelta,referenceView);\n  }\n}\n"}
{"nl": "Publisher listener", "code": "@Override public void onStreamCreated(PublisherKit publisherKit,Stream stream){\n  sendEvent(Events.EVENT_PUBLISH_START,Arguments.createMap());\n}\n"}
{"nl": "/*     ", "code": "@deprecated public TimeZone parse(Style style,String text,ParsePosition pos,Output<TimeType> timeType){\n  return parse(style,text,pos,this._parseAllStyles,timeType);\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  NIOConfiguration copy=(NIOConfiguration)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(empty,copy));\n}\n"}
{"nl": "Add an animation to the choreographer and starts it immediately", "code": "public void addAnimation(Animation animation){\n  if (mAnimations.contains(animation)) {\n    return;\n  }\n  mAnimations.add(animation);\n  animation.start();\n}\n"}
{"nl": "Change centre button icon if space navigation already set up", "code": "public void changeCenterButtonIcon(int icon){\n  if (fab == null) {\n    Log.e(TAG,\"You should call setCentreButtonIcon() instead, \" + \"changeCenterButtonIcon works if space navigation already set up\");\n  }\n else {\n    fab.setImageResource(icon);\n    centreButtonIcon=icon;\n  }\n}\n"}
{"nl": "Create an iterator which stars iterating over the packets which reside in external storage", "code": "public BufferedReadOnlyIterator(StorageReadOnlyIterator<T> externalIterator){\n  this._externalIterator=externalIterator;\n}\n"}
{"nl": "Creates a Predictor", "code": "public static Predictor createPredictor(DataElement writes,String uniqueCharacter,Expression expr,Expression skipTest,PeriodType periodType,OrganisationUnitLevel organisationUnitLevel,int sequentialSampleCount,int sequentialSkipCount,int annualSampleCount){\n  Predictor predictor=new Predictor();\n  Set<OrganisationUnitLevel> orglevels=Sets.newHashSet(organisationUnitLevel);\n  predictor.setAutoFields();\n  predictor.setOutput(writes);\n  predictor.setName(\"Predictor\" + uniqueCharacter);\n  predictor.setDescription(\"Description\" + uniqueCharacter);\n  predictor.setGenerator(expr);\n  predictor.setSampleSkipTest(skipTest);\n  predictor.setPeriodType(periodType);\n  predictor.setOrganisationUnitLevels(orglevels);\n  predictor.setSequentialSampleCount(sequentialSampleCount);\n  predictor.setAnnualSampleCount(annualSampleCount);\n  predictor.setSequentialSkipCount(sequentialSkipCount);\n  return predictor;\n}\n"}
{"nl": "Create a unit file reader from the given unit file", "code": "public VocalizationUnitFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n"}
{"nl": "Check SKILL_AUTOLEARN property Check skill already learned Check skill template auto-learn attribute", "code": "private static boolean checkLearnIsPossible(Player player,PlayerSkillList playerSkillList,SkillLearnTemplate template){\n  if (playerSkillList.isSkillPresent(template.getSkillId()))   return true;\n  if (player.havePermission(MembershipConfig.STIGMA_AUTOLEARN) && template.isStigma())   return true;\n  if (template.isAutolearn())   return true;\n  return false;\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return locked;\n}\n"}
{"nl": "Constructs a JSON parser", "code": "public JsonParser(Charset charset){\n  this(new DefaultJsonFeeder(charset));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetUniversitiesQuery(VkApiClient client){\n  super(client,\"database.getUniversities\",GetUniversitiesResponse.class);\n}\n"}
{"nl": "true - to return outgoing requests false - to return incoming requests (default)", "code": "public FriendsGetRequestsQueryWithExtended out(Boolean value){\n  return unsafeParam(\"out\",value);\n}\n"}
{"nl": "checks if all <code>names</code> elements are in <code>theAppended</code>", "code": "private static boolean inAppended(String[] names){\n  for (int i=0; i < names.length; i++) {\n    if (!theAppended.contains(names[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "add footer view with the footer height", "code": "public void addFootView(View view,int footerHeight){\n  addFootView(view,footerHeight,false);\n}\n"}
{"nl": "Write a DataAnalysis to HDFS (or locally) as a HTML file", "code": "public static void writeAnalysisHTMLToFile(String outputPath,DataAnalysis dataAnalysis,JavaSparkContext sc){\n  try {\n    String analysisAsHtml=HtmlAnalysis.createHtmlAnalysisString(dataAnalysis);\n    writeStringToFile(outputPath,analysisAsHtml,sc);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Error generating or writing HTML analysis file (normalized data)\",e);\n  }\n}\n"}
{"nl": "Checks if the response status is unauthenticated", "code": "protected boolean isUnauthenticated(ClientHttpResponse clientHttpResponse) throws IOException {\n  return (clientHttpResponse.getStatusCode().equals(HttpStatus.FOUND) && clientHttpResponse.getHeaders().getLocation().getPath().equals(\"/login\")) || (clientHttpResponse.getStatusCode().equals(HttpStatus.UNAUTHORIZED));\n}\n"}
{"nl": "Reduce the specified columns by taking the first value", "code": "public Builder takeFirstColumns(String... columns){\n  return add(ReduceOp.TakeFirst,columns);\n}\n"}
{"nl": "Gets whether a value and an access path may potentially point to the same runtime object", "code": "public AccessPath mayAlias(AccessPath ap,Value val){\n  if (!AccessPath.canContainValue(val))   return null;\n  if (val instanceof Constant)   return null;\n  if (val instanceof Local)   if (ap.getPlainValue() != val)   return null;\n  if (val instanceof ArrayRef)   if (ap.getPlainValue() != ((ArrayRef)val).getBase())   return null;\n  if (val instanceof InstanceFieldRef) {\n    if (!ap.isLocal() && !ap.isInstanceFieldRef())     return null;\n    if (((InstanceFieldRef)val).getBase() != ap.getPlainValue())     return null;\n  }\n  if (val instanceof StaticFieldRef)   if (!ap.isStaticFieldRef())   return null;\n  SootField[] fields=val instanceof FieldRef ? new SootField[]{((FieldRef)val).getField()} : new SootField[0];\n  return getReferencedAPBase(ap,fields);\n}\n"}
{"nl": "Converts a CamelCase word into an underlined_word", "code": "public static String camelCaseToUnderlines(String string){\n  if (string.isEmpty()) {\n    return string;\n  }\n  StringBuilder sb=new StringBuilder(2 * string.length());\n  int n=string.length();\n  boolean lastWasUpperCase=Character.isUpperCase(string.charAt(0));\n  for (int i=0; i < n; i++) {\n    char c=string.charAt(i);\n    boolean isUpperCase=Character.isUpperCase(c);\n    if (isUpperCase && !lastWasUpperCase) {\n      sb.append('_');\n    }\n    lastWasUpperCase=isUpperCase;\n    c=Character.toLowerCase(c);\n    sb.append(c);\n  }\n  return sb.toString();\n}\n"}
{"nl": "collapse  all selected  nodes", "code": "public void collapseSelectedNodes(){\n  for (Node v=getSelectedNodes().getFirstElement(); v != null; v=getSelectedNodes().getNextElement(v)) {\n    getCollapsedIds().add((Integer)v.getInfo());\n  }\n  updateTree();\n}\n"}
{"nl": "Starts the first sample timer", "code": "public void startFirstSampleTimer(){\n  firstSound=true;\n  timer.start(\"AudioFirstSound\");\n}\n"}
{"nl": "Creates a new instance of Jim2Mov", "code": "public Jim2Mov(ImageProvider ip,MovieInfoProvider mip,FrameSavedListener listener){\n  this(ip,mip);\n  addFrameSavedListener(listener);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  ChartViewer viewer=(ChartViewer)getViewer();\n  np.matchIgnoreCase(\"show what=\");\n  String what=np.getWordMatchesIgnoringCase(\"all none selected\");\n  final LabelsJList list;\n  if (np.peekMatchIgnoreCase(\"target=\")) {\n    np.matchIgnoreCase(\"target=\");\n    list=viewer.getLabelsJList(np.getWordMatchesIgnoringCase(\"series classes attributes\"));\n  }\n else {\n    list=viewer.getActiveLabelsJList();\n  }\n  np.matchIgnoreCase(\";\");\n  if (what.equalsIgnoreCase(\"none\")) {\n    list.disableLabels(list.getAllLabels());\n  }\n else   if (what.equalsIgnoreCase(\"selected\")) {\n    list.enableLabels(list.getSelectedLabels());\n  }\n else {\n    list.enableLabels(list.getAllLabels());\n  }\n}\n"}
{"nl": "Subtract the given game time from this game time", "code": "public GameTime minus(GameTime gt){\n  return new GameTime(this.getTime() - gt.getTime());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetCategoriesQuery(VkApiClient client,UserActor actor){\n  super(client,\"ads.getCategories\",Utils.buildParametrizedType(List.class,Category.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "test whether the query is exists in", "code": "public static boolean exists(Bson query,Class<? extends Bean> t) throws Exception {\n  String collection=getCollection(t);\n  if (collection != null) {\n    return exists(collection,query);\n  }\n  throw new Exception(\"the Class<\" + t.getName() + \"> doest annotated by @DBMapping()!\");\n}\n"}
{"nl": "Checks whether we've already checked the given template in a new project or existing project context", "code": "private static boolean haveChecked(String category,String name,boolean createWithProject){\n  String key=getCheckKey(category,name,createWithProject);\n  return ourTemplatesChecked.contains(key);\n}\n"}
{"nl": "Converts comma separated string to Set", "code": "public static <T>Set<T> stringToSet(String val,Class<T> type){\n  String[] tokens=trim(val).split(\",\");\n  return Arrays.stream(tokens).map(null).collect(Collectors.toSet());\n}\n"}
{"nl": "Converts an ascii input stream to a string", "code": "public static String convertAsciiInputStreamToString(InputStream inputStream,int inputStreamLength) throws IOException {\n  InputStreamReader in=new InputStreamReader(inputStream);\n  StringWriter writer=new StringWriter();\n  int blockSize=DEFAULT_BUFFER_SIZE;\n  char[] buffer=new char[blockSize];\n  int left=inputStreamLength;\n  while (left > 0) {\n    int read=in.read(buffer,0,left > blockSize ? blockSize : left);\n    if (read == -1)     break;\n    writer.write(buffer,0,read);\n    left-=read;\n  }\n  writer.close();\n  return writer.toString();\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.GOODALL_NORMALIZED + \";\");\n}\n"}
{"nl": "Process packets obtained from batch packets Required to perform additional analyses and filter unnecessary packets", "code": "public void processPackets(Player player,List<DataPacket> packets){\n  if (packets.isEmpty())   return;\n  List<Byte> filter=new ArrayList<>();\n  for (  DataPacket packet : packets) {\n    player.handleDataPacket(packet);\n  }\n}\n"}
{"nl": "Adds a new key value pair to the set", "code": "public void add(Map.Entry<String,String> entry){\n  if (entry == null) {\n    throw new NullPointerException(\"context\");\n  }\nsynchronized (contexts) {\n    contexts.add(Maps.immutableEntry(entry.getKey(),entry.getValue()));\n  }\n}\n"}
{"nl": "Check if the set is empty", "code": "public boolean isEmpty(){\nsynchronized (contexts) {\n    return contexts.isEmpty();\n  }\n}\n"}
{"nl": "Create an XMLContentSpec for a two child leaf", "code": "protected int addContentSpecNode(short nodeType,int leftNodeIndex,int rightNodeIndex){\n  int contentSpecIndex=createContentSpec();\n  int[] leftIntArray=new int[1];\n  int[] rightIntArray=new int[1];\n  leftIntArray[0]=leftNodeIndex;\n  rightIntArray[0]=rightNodeIndex;\n  fContentSpec.setValues(nodeType,leftIntArray,rightIntArray);\n  setContentSpec(contentSpecIndex,fContentSpec);\n  return contentSpecIndex;\n}\n"}
{"nl": "author  hhj TODO", "code": "public static void debugLongInfo(String str){\n  debugLongInfo(\"zhibo\",str);\n}\n"}
{"nl": "Adds a new receiver to the manifest", "code": "public void addReceiver(AXmlNode node){\n  if (receivers.isEmpty())   receivers=new ArrayList<AXmlNode>();\n  receivers.add(node);\n}\n"}
{"nl": "center the given widget horizontally", "code": "public void centerHorizontally(ConstraintWidget widget){\n  ConstraintAnchor left=getClosestHorizontalWidgetAnchor(widget,true);\n  ConstraintAnchor right=getClosestHorizontalWidgetAnchor(widget,false);\n  widget.connect(widget.getAnchor(ConstraintAnchor.Type.LEFT),left,0);\n  widget.connect(widget.getAnchor(ConstraintAnchor.Type.RIGHT),right,0);\n}\n"}
{"nl": "Initialize an AirMapStatusAdvisory with default values", "code": "public AirMapStatusAdvisory(){\n}\n"}
{"nl": "Callback for when the command is executed", "code": "public void execute(MinecraftServer server,ICommandSender sender,String[] args) throws CommandException {\n  EntityPlayerMP entityplayermp=args.length == 0 ? getCommandSenderAsPlayer(sender) : getPlayer(server,sender,args[0]);\n  NBTTagCompound nbttagcompound=null;\n  CyberwareAPI.getCapability(entityplayermp).resetWare(entityplayermp);\n  CyberwareAPI.updateData(entityplayermp);\n  notifyCommandListener(sender,this,\"cyberware.commands.clearCyberware.success\",new Object[]{entityplayermp.getName()});\n}\n"}
{"nl": "Check all conditions before using skill", "code": "private boolean preUsageCheck(){\n  Conditions skillConditions=skillTemplate.getUseconditions();\n  return skillConditions != null ? skillConditions.validate(this) : true;\n}\n"}
{"nl": "Return additional \"wall\", \"profiles\", and \"groups\" fields false - (default)", "code": "public FaveGetPostsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "check storage socket, if null create a new connection", "code": "protected boolean newReadableStorageConnection(String group_name,String remote_filename) throws IOException, MyException {\n  if (this.storageServer != null) {\n    return false;\n  }\n else {\n    TrackerClient tracker=new TrackerClient();\n    this.storageServer=tracker.getFetchStorage(this.trackerServer,group_name,remote_filename);\n    if (this.storageServer == null) {\n      throw new MyException(\"getStoreStorage fail, errno code: \" + tracker.getErrorCode());\n    }\n    return true;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoEditAlbumQuery(VkApiClient client,UserActor actor,int albumId,String title){\n  super(client,\"video.editAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n  title(title);\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public FriendsSearchQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Generates a random integer between the specified numbers", "code": "public static int randomNumberBetween(double begin,double end){\n  if (begin > end)   throw new IllegalArgumentException(\"Begin must not be less than end\");\n  return (int)begin + (int)(Math.random() * ((end - begin) + 1));\n}\n"}
{"nl": "SCIPIO: Creates JS script to populate the target hidden form with the corresponding fields of the row that triggered the submission (only when use-submit-row is false)", "code": "@Deprecated private static void makeJSForInlineSubmit(Appendable writer,Map<String,Object> context,ModelForm modelForm,String hiddenFormName) throws IOException {\n  List<ModelFormField> rowSubmitFields=modelForm.getMultiSubmitFields();\n  if (rowSubmitFields != null) {\n    writer.append(\"<script type=\\\"text/javascript\\\">\\r\\n\");\n    writer.append(\"jQuery(document).ready(function() {\\r\\n\");\n    writer.append(\"\\tvar submitForm = $(\\\"form[name=\" + hiddenFormName + \"]\\\");\\r\\n\");\n    writer.append(\"\\tif (submitForm) {\\r\\n\");\n    for (    ModelFormField rowSubmitField : rowSubmitFields) {\n      writer.append(\"\\t\\tvar id = $(\\\"[id^=\" + rowSubmitField.getCurrentContainerId(context) + \"]\\\");\\r\\n\");\n      writer.append(\"\\t\\t$(id).click(function(e) {\\r\\n\");\n      writer.append(\"\\t\\te.preventDefault();\\r\\n\");\n      makeHiddenFieldsForHiddenForm(writer);\n      writer.append(\"\\t\\t\\tsubmitForm.submit();\\r\\n\");\n      writer.append(\"\\t\\t});\\r\\n\");\n    }\n    writer.append(\"\\t} else {\\r\\n\");\n    writer.append(\"\\t\\treturn false;\\r\\n\");\n    writer.append(\"\\t}\\r\\n\");\n    writer.append(\"});\\r\\n\");\n    writer.append(\"</script>\\r\\n\");\n  }\n}\n"}
{"nl": "terminate the PrimarySpaceSelector", "code": "synchronized public void terminate(){\n  if (_isTerminated)   return;\n  _isTerminated=true;\n  if (_electManager != null)   _electManager.terminate();\n  _namingService.terminate();\n  _primarySpaceModeListeners.clear();\n}\n"}
{"nl": "whether the index is illegal", "code": "private boolean isIllegalIndex(int i){\n  return i < curStartIndex || i >= curEndIndex;\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public DoubleElemValPair(String name,char kind,double val){\n  super(name,kind);\n  this.val=new DoubleCP(val);\n}\n"}
{"nl": "method name to field name", "code": "public static String methodNameToFieldName(String methodPrefix,String methodName,boolean ignoreFirstLetterCase){\n  String fieldName=null;\n  if (methodName != null && methodName.length() > methodPrefix.length()) {\n    int front=methodPrefix.length();\n    if (ignoreFirstLetterCase) {\n      fieldName=methodName.substring(front,front + 1) + methodName.substring(front + 1);\n    }\n else {\n      fieldName=methodName.substring(front,front + 1).toLowerCase() + methodName.substring(front + 1);\n    }\n  }\n  return fieldName;\n}\n"}
{"nl": "write dictionary metadata file and close thrift object", "code": "@Override public void close() throws IOException {\n  if (null != dictionaryThriftWriter && dictionaryThriftWriter.isOpen()) {\n    writeDictionaryFile();\n    closeThriftWriter();\n  }\n}\n"}
{"nl": "Set shorter", "code": "public VideoSearchQueryWithExtended shorter(Integer value){\n  return unsafeParam(\"shorter\",value);\n}\n"}
{"nl": "Send a single query result back to the client", "code": "private void sendQueryResult(String result){\n  Iterable<String> splitResult=Splitter.fixedLength(QUERY_CHUNK_SIZE).split(result + \"\\n\");\n  for (  String resultChunk : splitResult) {\n    sendJson(Json.object(ACTION,ACTION_QUERY,QUERY_RESULT,resultChunk));\n  }\n}\n"}
{"nl": "Checks if node has specified property", "code": "public Boolean hasNodeProperty(String nodePath,String propertyName) throws RepositoryException {\n  LOG.debug(\"Checking if node '{}' has property '{}'\",nodePath,propertyName);\n  session.refresh(true);\n  return session.getNode(nodePath).hasProperty(propertyName);\n}\n"}
{"nl": "ClassToSourceMap is for classes whos names don't match the source file name - ex: multiple top level classes in a single file", "code": "private void addToClassToSourceMap(String className,String sourceName){\n  if (classToSourceMap == null) {\n    classToSourceMap=new HashMap<String,String>();\n  }\n  classToSourceMap.put(className,sourceName);\n}\n"}
{"nl": "A check to be used as method reference", "code": "public boolean isAllow(){\n  return message == null;\n}\n"}
{"nl": "discard (clear) all the traffic logs collected so far", "code": "public void discard(){\n  hars.clear();\n}\n"}
{"nl": "Construct an empty DavaBody", "code": "DavaBody(SootMethod m){\n  super(m);\n  pMap=new HashMap<Integer,Value>();\n  consumedConditions=new HashSet<Object>();\n  thisLocals=new HashSet<Object>();\n  synchronizedBlockFacts=new IterableSet<ExceptionNode>();\n  exceptionFacts=new IterableSet<ExceptionNode>();\n  monitorFacts=new IterableSet<AugmentedStmt>();\n  importList=new IterableSet<String>();\n  caughtrefs=new LinkedList<CaughtExceptionRef>();\n  controlLocal=null;\n  constructorExpr=null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetVideoUploadURLQuery(VkApiClient client,UserActor actor){\n  super(client,\"ads.getVideoUploadURL\",String.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Northern Shield Generator", "code": "private void startWaveNorthernShieldGenerator2(){\n  sp(284838,174.50981f,251.38982f,292.43088f,(byte)0,1000,\"NorthernShieldGenerator1\");\n  sp(284839,174.9973f,254.4739f,292.3325f,(byte)0,1000,\"NorthernShieldGenerator2\");\n  sp(284840,174.84029f,257.80832f,292.4389f,(byte)0,1000,\"NorthernShieldGenerator3\");\n}\n"}
{"nl": "get the ignore status", "code": "public boolean isIgnore(){\n  return false;\n}\n"}
{"nl": "Construct an EventDescriptor with attributes set to null", "code": "public EventDescriptor(){\n}\n"}
{"nl": "Decode a given image file with the specified dimensions", "code": "public static Bitmap decodeSampledBitmapFromFilePath(String filePath,int reqWidth,int reqHeight){\n  final BitmapFactory.Options options=new BitmapFactory.Options();\n  options.inJustDecodeBounds=true;\n  BitmapFactory.decodeFile(filePath,options);\n  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);\n  options.inJustDecodeBounds=false;\n  return BitmapFactory.decodeFile(filePath,options);\n}\n"}
{"nl": "Get an angle between the line defined by two objects and the horizontal axis", "code": "public static float calculateAngleFrom(VisibleObject obj1,VisibleObject obj2){\n  return calculateAngleFrom(obj1.getX(),obj1.getY(),obj2.getX(),obj2.getY());\n}\n"}
{"nl": "Check for permissions and create a snapshot", "code": "public boolean snap(Activity activity){\n  boolean hasPermission=(ContextCompat.checkSelfPermission(activity,Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED);\n  if (!hasPermission) {\n    ActivityCompat.requestPermissions(activity,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},REQUEST_WRITE_STORAGE);\n    return false;\n  }\n else {\n    return takeScreenShot(activity);\n  }\n}\n"}
{"nl": "Constructs new instance of <tt>CM_PRIVATE_STORE </tt> packet", "code": "public CM_PRIVATE_STORE_NAME(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallEditQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetMarketUploadServerQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"photos.getMarketUploadServer\",GetMarketUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "Create an AggregateConfig", "code": "public AggregateConfig(String[] configs,ClassLoader loader) throws ConfigurationException {\n  specific=ConfigurationProvider.getInstance(configs,loader);\n}\n"}
{"nl": "* Eastern Shield Generator Periodic Spawn  *", "code": "private void startWaveEasternShieldGenerator1(){\n  sp(233720,252.68709f,333.483f,325.59268f,(byte)90,1000,\"EasternShieldGenerator1\");\n  sp(233721,255.74022f,333.2762f,325.49332f,(byte)90,1000,\"EasternShieldGenerator2\");\n  sp(233881,258.72256f,333.27713f,325.58722f,(byte)90,6000,\"EasternShieldGenerator3\");\n}\n"}
{"nl": "zoom to fit", "code": "public void zoomToFit(){\n  if (is3dMode) {\n    getTransformation3D().identity();\n    updateTransform(is3dMode);\n  }\n  graphView.fitGraphToWindow();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set showLabels=\");\n  boolean showLabels=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.setShowLabels(showLabels);\n}\n"}
{"nl": "Returns true if the night mode is alternated", "code": "public final boolean isAlternatingNightMode(){\n  return (myAlternate & CFG_NIGHT_MODE) != 0;\n}\n"}
{"nl": "Notify the listeners that traffic has been updated", "code": "private void notifyUpdated(List<AirMapTraffic> updated){\n  if (updated == null || updated.isEmpty()) {\n    return;\n  }\n  for (  AirMapTrafficListener listener : listeners) {\n    listener.onUpdateTraffic(updated);\n  }\n}\n"}
{"nl": "Reads this packet from the given buffer", "code": "@Override public void read(PacketBuffer buf){\n  types.forEach(null);\n}\n"}
{"nl": "Creates a new instance of TextSpectralSpellPreprocessor", "code": "public TextSpectralSpellPreprocessor(String sArgs){\n  tWords=null;\n  hFoundWords=new Hashtable();\n  sWordMapSem=new Semaphore(1);\n  Args=sArgs.split(\" \");\n}\n"}
{"nl": "Checks if file passed is a video", "code": "public static boolean isVideo(File file){\n  Uri selectedUri=Uri.fromFile(file);\n  String fileExtension=MimeTypeMap.getFileExtensionFromUrl(selectedUri.toString().toLowerCase());\n  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);\n  return (mimeType != null && mimeType.startsWith(\"video/\"));\n}\n"}
{"nl": "Creates an empty quests list", "code": "public QuestStateList(){\n  _quests=new TreeMap<Integer,QuestState>();\n}\n"}
{"nl": "draws the hole in the center of the chart and the transparent circle / hole", "code": "protected void drawHole(Canvas c){\n  if (mChart.isDrawHoleEnabled() && mBitmapCanvas != null) {\n    float radius=mChart.getRadius();\n    float holeRadius=radius * (mChart.getHoleRadius() / 100);\n    MPPointF center=mChart.getCenterCircleBox();\n    if (Color.alpha(mHolePaint.getColor()) > 0) {\n      mBitmapCanvas.drawCircle(center.x,center.y,holeRadius,mHolePaint);\n    }\n    if (Color.alpha(mTransparentCirclePaint.getColor()) > 0 && mChart.getTransparentCircleRadius() > mChart.getHoleRadius()) {\n      int alpha=mTransparentCirclePaint.getAlpha();\n      float secondHoleRadius=radius * (mChart.getTransparentCircleRadius() / 100);\n      mTransparentCirclePaint.setAlpha((int)((float)alpha * mAnimator.getPhaseX() * mAnimator.getPhaseY()));\n      mHoleCirclePath.reset();\n      mHoleCirclePath.addCircle(center.x,center.y,secondHoleRadius,Path.Direction.CW);\n      mHoleCirclePath.addCircle(center.x,center.y,holeRadius,Path.Direction.CCW);\n      mBitmapCanvas.drawPath(mHoleCirclePath,mTransparentCirclePaint);\n      mTransparentCirclePaint.setAlpha(alpha);\n    }\n    MPPointF.recycleInstance(center);\n  }\n}\n"}
{"nl": "Required for Externalizable", "code": "public CompoundResult(){\n}\n"}
{"nl": "error log", "code": "public static void e(String msg){\n  if (LOG_ENABLE) {\n    Log.e(TAG,buildMsg(msg));\n  }\n}\n"}
{"nl": "execute shell commands, default return result msg", "code": "public static CommandResult execCommand(String[] commands,boolean isRoot,String path){\n  return execCommand(commands,isRoot,true,path);\n}\n"}
{"nl": "Open webpage in default web browser", "code": "void openURI(final String uri){\n  try {\n    java.awt.Desktop.getDesktop().browse(new URI(uri));\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  URISyntaxException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "This object provides a number of methods that allow a rpc provider to respond to a request", "code": "@ObjectiveCName(\"init:name:correlationId:\") RpcResponse(IConnection connection,String name,String correlationId){\n  this.connection=connection;\n  this.name=name;\n  this.correlationId=correlationId;\n  this.isAcknowledged=false;\n  this.isComplete=false;\n  this.ack();\n}\n"}
{"nl": "reads an archived string", "code": "public int readString(byte[] tmp,byte[] target) throws IOException {\n  int size=readInt();\n  if (size > 0) {\n    if (size > target.length)     throw new IOException(\"Unreasonable string length: \" + size);\n    return in.read(target,0,size);\n  }\n else {\n    size=-size;\n    if (size > tmp.length)     throw new IOException(\"Unreasonable string length: \" + size);\n    int got=in.read(tmp,0,size);\n    if (got != size)     throw new IOException(\"Bytes read: \" + got + \", expected: \"+ size);\n    try {\n      return compressor.inflateByteArray(size,tmp,target);\n    }\n catch (    DataFormatException e) {\n      throw new IOException(e.getMessage());\n    }\n  }\n}\n"}
{"nl": "Filter from the input map the unmapped field of this entity", "code": "protected Map<String,Object> filterItemValue(String entityName,Map<String,Object> itemValues){\n  ClassMetadata classMetadata=getSessionFactory().getClassMetadata(entityName);\n  String[] propertyNames=classMetadata.getPropertyNames();\n  List<String> names=Arrays.asList(propertyNames);\n  HashMap<String,Object> filteredItems=new HashMap<String,Object>();\n  Iterator<Entry<String,Object>> iterator=itemValues.entrySet().iterator();\n  while (iterator.hasNext()) {\n    Entry<String,Object> next=iterator.next();\n    if (names.contains(next.getKey())) {\n      filteredItems.put(next.getKey(),next.getValue());\n    }\n  }\n  return filteredItems;\n}\n"}
{"nl": "Parses the string with the model", "code": "public static String parse(String s,Map<String,Object> m) throws Exception {\n  log.debug(\"vengine.parse ...\");\n  if (X.isEmpty(s)) {\n    return s;\n  }\n  try {\n    VelocityContext context=new VelocityContext(m);\n    StringWriter out=new StringWriter();\n    Velocity.evaluate(context,out,\"ve\",s);\n    log.debug(\"s=\" + s + \", out=\"+ out);\n    return out.toString();\n  }\n catch (  Exception e) {\n    log.error(s,e);\n    throw e;\n  }\n}\n"}
{"nl": "edit the conflicts using built-in merger", "code": "private void editConflictsInternal(IFile resource,IFile conflictOldFile,IFile conflictWorkingFile,IFile conflictNewFile) throws InvocationTargetException, InterruptedException {\n  CompareConfiguration cc=new CompareConfiguration();\n  ConflictsCompareInput fInput=new ConflictsCompareInput(cc);\n  fInput.setResources(conflictOldFile,conflictWorkingFile,conflictNewFile,(IFile)resource);\n  CompareUI.openCompareEditorOnPage(fInput,getTargetPage());\n}\n"}
{"nl": "Simple XOR encryption", "code": "public static String xor(String key,String input){\n  StringBuilder output=new StringBuilder();\n  for (int i=0; i < input.length(); i++) {\n    output.append((char)(input.charAt(i) ^ key.charAt(i % key.length())));\n  }\n  return output.toString();\n}\n"}
{"nl": "A private method used to add an element into a List if it is NOT a duplicate", "code": "private List<DavaFlowSet<T>> addIfNotDuplicate(List<DavaFlowSet<T>> into,DavaFlowSet<T> addThis){\n  Iterator<DavaFlowSet<T>> it=into.iterator();\n  boolean found=false;\n  while (it.hasNext()) {\n    DavaFlowSet<T> temp=it.next();\n    if (temp.equals(addThis) && temp.internalDataMatchesTo(addThis)) {\n      found=true;\n      break;\n    }\n  }\n  if (!found)   into.add(addThis);\n  return into;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetCountriesByIdQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getCountriesById\",Utils.buildParametrizedType(List.class,Country.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Check if Twitter configuration field is filled, if not there will be a NullPointerException", "code": "private String checkIfValueIsNotEmpty(Host hostWithTwitterSettings,String fieldVarName){\n  String tempValue=hostWithTwitterSettings.getStringProperty(fieldVarName);\n  if (tempValue == null || tempValue.isEmpty()) {\n    throw new NullPointerException(\"The value of field '\" + fieldVarName + \"' is not filled in the Host\");\n  }\n  return tempValue;\n}\n"}
{"nl": "****************************** ARENA REWARD QUERIES", "code": "public ArenaRewardCursor queryArenaRewardItem(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_ARENA_REWARDS;\n  qh.Selection=\"ar.\" + S.COLUMN_ARENA_REWARDS_ITEM_ID + \" = ? \";\n  qh.SelectionArgs=new String[]{\"\" + id};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=\"ar.\" + S.COLUMN_ARENA_REWARDS_PERCENTAGE + \" DESC\";\n  qh.Limit=null;\n  return new ArenaRewardCursor(wrapJoinHelper(builderArenaReward(),qh));\n}\n"}
{"nl": "MONSTER TO ARENA QUERIES", "code": "public MonsterToArenaCursor queryMonsterToArenaMonster(long id){\n  return mHelper.queryMonsterToArenaMonster(id);\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0,0,1};\n}\n"}
{"nl": "Creates a new instance of WebLink", "code": "public WebLink(String key){\n  this(BundleSupport.getLabel(key),BundleSupport.getURL(key),true);\n}\n"}
{"nl": "Construct an XSNamedMap implementation one namespace from an array", "code": "public XSNamedMapImpl(XSObject[] array,int length){\n  if (length == 0) {\n    fNamespaces=null;\n    fMaps=null;\n    fNSNum=0;\n    fArray=array;\n    fLength=0;\n    return;\n  }\n  fNamespaces=new String[]{array[0].getNamespace()};\n  fMaps=null;\n  fNSNum=1;\n  fArray=array;\n  fLength=length;\n}\n"}
{"nl": "Adds an association node", "code": "public void addAssociation(int node){\n  addAssociation(node,0);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  ClusterViewer viewer=getViewer();\n  PageFormat pageFormat=ProgramProperties.getPageFormat();\n  PrinterJob job=PrinterJob.getPrinterJob();\n  if (pageFormat != null)   job.setPrintable(viewer,pageFormat);\n else   job.setPrintable(viewer);\n  if (job.printDialog()) {\n    try {\n      job.print();\n    }\n catch (    Exception ex) {\n      Basic.caught(ex);\n      NotificationsInSwing.showError(viewer.getFrame(),\"Print failed: \" + ex);\n    }\n  }\n}\n"}
{"nl": "Returns the sum of a sequence of numbers in a specified range", "code": "public static int sumFromTo(int iStart,int iEnd){\n  int iRes=0;\n  for (int iCnt=iStart; iCnt <= iEnd; iRes+=iCnt++)   ;\n  return iRes;\n}\n"}
{"nl": "Perform drop operation", "code": "public void doDrop(Player player){\n}\n"}
{"nl": "Cancels all the uploads for an account", "code": "public void cancel(Account account){\n  Log_OC.d(TAG,\"Account= \" + account.name);\n  if (mCurrentUpload != null) {\n    Log_OC.d(TAG,\"Current Upload Account= \" + mCurrentUpload.getAccount().name);\n    if (mCurrentUpload.getAccount().name.equals(account.name)) {\n      mCurrentUpload.cancel();\n    }\n  }\n  cancelUploadsForAccount(account);\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getPCoA() != null && viewer.getPcoaTab().getPCoA().getNumberOfPositiveEigenValues() > 3 && !(viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 1 && viewer.getPcoaTab().getThirdPC() == 2) && viewer.getPcoaTab().isIs3dMode();\n}\n"}
{"nl": "loading status", "code": "public void loading(){\n}\n"}
{"nl": "Put Methods", "code": "public void putSingleString(Activity activity,String key,String string) throws ClassNotFoundException {\n  HashMap<String,String> hashMap=receiveHashMap(activity);\n  hashMap.put(key,string);\n  pushHashMap(activity,hashMap);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetWallUploadServerQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getWallUploadServer\",PhotoUpload.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  final ParametersDialog parametersDialog=(ParametersDialog)getParent();\n  final Director dir=(Director)getDir();\n  parametersDialog.setVisible(false);\n  if (dir.getDocument().getMeganFile().hasDataConnector()) {\n    ReadMagnitudeParser.setEnabled(parametersDialog.isUseMagnitudes());\n    int numberOfMatches=0;\n    try {\n      final IConnector connector=dir.getDocument().getMeganFile().getDataConnector();\n      numberOfMatches=connector.getNumberOfMatches();\n    }\n catch (    IOException e) {\n      Basic.caught(e);\n    }\n    if (numberOfMatches > 10000000) {\n      int result=JOptionPane.showConfirmDialog(MainViewer.getLastActiveFrame(),String.format(\"This sample contains %,d matches, processing may take a long time, proceed?\",numberOfMatches),\"Very large dataset, proceed?\",JOptionPane.YES_NO_OPTION);\n      if (result != JOptionPane.YES_OPTION)       return;\n    }\n  }\n  parametersDialog.setCanceled(false);\n}\n"}
{"nl": "Legion Message: %0 %DATETIME1", "code": "public static SM_SYSTEM_MESSAGE STR_GUILD_NOTICE(String value0,long i){\n  return new SM_SYSTEM_MESSAGE(1400019,value0,i,2);\n}\n"}
{"nl": "calculate the bitmap sampleSize", "code": "public static int calculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){\n  final int height=options.outHeight;\n  final int width=options.outWidth;\n  int inSampleSize=1;\n  if (rqsW == 0 || rqsH == 0)   return 1;\n  if (height > rqsH || width > rqsW) {\n    final int heightRatio=Math.round((float)height / (float)rqsH);\n    final int widthRatio=Math.round((float)width / (float)rqsW);\n    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;\n  }\n  return inSampleSize;\n}\n"}
{"nl": "Extra Local Variables Generation", "code": "protected soot.Local generateLocal(polyglot.types.Type polyglotType){\n  soot.Type type=Util.getSootType(polyglotType);\n  return lg.generateLocal(type);\n}\n"}
{"nl": "POST /rest/activiti/deployments: upload a deployment", "code": "@RequestMapping(method=RequestMethod.POST,produces=\"application/json\") public JsonNode handleFileUpload(HttpServletRequest request,@RequestParam(\"file\") MultipartFile file){\n  if (!file.isEmpty()) {\n    try {\n      ServerConfig serverConfig=retrieveServerConfig();\n      String fileName=file.getOriginalFilename();\n      if (fileName != null && (fileName.endsWith(\".bpmn\") || fileName.endsWith(\".bpmn20.xml\") || fileName.endsWith(\".zip\")|| fileName.endsWith(\".bar\"))) {\n        return clientService.uploadDeployment(serverConfig,fileName,file.getInputStream());\n      }\n else {\n        throw new BadRequestException(\"Invalid file name\");\n      }\n    }\n catch (    IOException e) {\n      throw new InternalServerErrorException(\"Could not deploy file: \" + e.getMessage());\n    }\n  }\n else {\n    throw new BadRequestException(\"No file found in POST body\");\n  }\n}\n"}
{"nl": "check if the connectivity view was overridden by a custom view via xml or programmatically", "code": "private boolean isConnectivityLayoutOverridden(){\n  verifyOverrideRulesForConnectivity();\n  return mConnectedLayout != 0 && mDisconnectedLayout != 0;\n}\n"}
{"nl": "SAX2 API", "code": "@Override public void fatalError(SAXParseException exception){\n  errorCount++;\n  fatalCount++;\n  if (showErrors && (errorCount + warningCount < maxMessages)) {\n    message(\"Fatal error\",exception);\n  }\n}\n"}
{"nl": "Converts from JDK Date to DateUnit", "code": "public static DateTimeUnit fromJdkDate(Date date){\n  return fromJodaDateTime(new DateTime(date.getTime()),true);\n}\n"}
{"nl": "Register the default macros that can be used by the visitor", "code": "private void registerDefaultMacros(){\n  macros=new HashMap<>();\n  registerMacro(\"noescp\",new NoescpMacro());\n  registerMacro(\"int\",new IntMacro());\n  registerMacro(\"double\",new DoubleMacro());\n  registerMacro(\"equals\",new EqualsMacro());\n}\n"}
{"nl": "init refrsh data", "code": "private void initRefreshData(){\n  for (int i=0; i < 1; i++) {\n    List<String> url=new ArrayList<>();\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114606_1.jpg\");\n    url.add(\"http://qq1234.org/uploads/allimg/140404/3_140404114555_6.jpg\");\n    mLists.add(url);\n  }\n}\n"}
{"nl": "It sends the email using the information provided by the MailDetailsBean object", "code": "public void sendMail(MailDetailsBean mDetails) throws MailSenderException {\n  createConnection(mDetails.getServer());\n  createMessage(mDetails);\n  setTransportForm();\n}\n"}
{"nl": "unescape UTF8/URL encoded strings", "code": "public static String unescape(String s){\n  try {\n    return URLDecoder.decode(s,\"UTF-8\");\n  }\n catch (  Exception e) {\n    return s;\n  }\n}\n"}
{"nl": "Don't let anyone instantiate this class", "code": "private JMXServiceURLFactory(){\n}\n"}
{"nl": "Analyzes the given APK file for data flows", "code": "public InfoflowResults analyzeAPKFile(String fileName) throws IOException, XmlPullParserException {\n  return analyzeAPKFile(fileName,false,true,false);\n}\n"}
{"nl": "Find autocomplete results and send them to the client", "code": "void autocomplete(Json json){\n  queryExecutor.submit(null);\n}\n"}
{"nl": "Validates INSERT query's update columns", "code": "private void validateUpdateColumns() throws SQLException {\n  for (  UpdateColumn column : _updatedColumns) {\n    column.createColumnData(this);\n    if (column.isSelfIncremented())     column.validateSelfIncrementedColumnName(this);\n  }\n}\n"}
{"nl": "Specify the icon that will be drawn in the center of the target bounds", "code": "public TapTarget icon(Drawable icon){\n  return icon(icon,false);\n}\n"}
{"nl": "Write an object array of nullable pbs entries to the stream", "code": "public static void writeNullablePbsEntryPacketObjectArray(PbsOutputStream output,Object[] objects){\n  if (objects != null) {\n    output.writeInt(objects.length);\n    for (    Object entry : objects)     writeNullablePbsEntryPacket(output,(PbsEntryPacket)entry);\n  }\n else   output.writeInt(-1);\n}\n"}
{"nl": "Check if loading state is shown", "code": "public boolean isLoading(){\n  return state == State.LOADING;\n}\n"}
{"nl": "Sort order", "code": "public AppsGetCatalogQuery sort(AppsGetCatalogSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Normalizes the values of the distribution to the range [0,1]", "code": "public void normalize(){\n  normalizeTo(1.0);\n}\n"}
{"nl": "Types of potential friends to return", "code": "public FriendsGetSuggestionsQuery filter(FriendsGetSuggestionsFilter... value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "ldlFactorization: Factorize W'*U^{-1}*W to L*D*L' (L: lower triangular, D: diagonal)", "code": "private static void ldlFactorization(double[][] mywuw){\n  for (int t=0; t < mywuw.length; t++) {\n    for (int i=1; (i < WIDTH) && (t - i >= 0); i++)     mywuw[t][0]-=mywuw[t - i][i] * mywuw[t - i][i] * mywuw[t - i][0];\n    for (int i=2; i <= WIDTH; i++) {\n      for (int j=1; (i + j <= WIDTH) && (t - j >= 0); j++)       mywuw[t][i - 1]-=mywuw[t - j][j] * mywuw[t - j][i + j - 1] * mywuw[t - j][0];\n      mywuw[t][i - 1]/=mywuw[t][0];\n    }\n  }\n}\n"}
{"nl": "Initialise the injector and create the app graph", "code": "private void initInjector(){\n  appComponent=DaggerAppComponent.builder().networkModule(new NetworkModule(this)).dataModule(new DataModule(this)).build();\n}\n"}
{"nl": "This method will handle the creation of a legion", "code": "public void createLegion(Player activePlayer,String legionName){\n  if (legionRestrictions.canCreateLegion(activePlayer,legionName)) {\n    Legion legion=new Legion(IDFactory.getInstance().nextId(),legionName);\n    legion.addLegionMember(activePlayer.getObjectId());\n    activePlayer.getInventory().decreaseKinah(LegionConfig.LEGION_CREATE_REQUIRED_KINAH);\n    storeLegion(legion,true);\n    Timestamp currentTime=new Timestamp(System.currentTimeMillis());\n    storeNewAnnouncement(legion.getLegionId(),currentTime,\"\");\n    legion.addAnnouncementToList(currentTime,\"\");\n    addLegionMember(legion,activePlayer,LegionRank.BRIGADE_GENERAL);\n    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x05,(int)(System.currentTimeMillis() / 1000),\"\"));\n    addHistory(legion,\"\",LegionHistoryType.CREATE);\n    addHistory(legion,activePlayer.getName(),LegionHistoryType.JOIN);\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATED(legion.getLegionName()));\n  }\n}\n"}
{"nl": "Remove a key value pair from this set", "code": "public void remove(String key,String value){\n  if (key == null) {\n    throw new NullPointerException(\"key\");\n  }\n  if (value == null) {\n    throw new NullPointerException(\"value\");\n  }\nsynchronized (contexts) {\n    contexts.removeIf(null);\n  }\n}\n"}
{"nl": "Creates a GPOS with the given part-of-speech table", "code": "public Gpos(PartOfSpeech pos){\n  this.pos=pos;\n}\n"}
{"nl": "Used during equip process and analyzes equipped slots", "code": "private boolean validateEquippedArmor(Item item,boolean validateOnly){\n  ArmorType armorType=item.getItemTemplate().getArmorType();\n  if (armorType == null) {\n    return true;\n  }\n  if (armorType == ArmorType.ARROW) {\n    return false;\n  }\n  int[] requiredSkills=armorType.getRequiredSkills();\n  if (!checkAvailableEquipSkills(requiredSkills)) {\n    return false;\n  }\n  ItemSlot slotToCheck1=ItemSlot.MAIN_HAND;\n  ItemSlot slotToCheck2=ItemSlot.SUB_HAND;\n  if ((item.getEquipmentSlot() & ItemSlot.MAIN_OFF_OR_SUB_OFF.getSlotIdMask()) != 0) {\n    slotToCheck1=ItemSlot.MAIN_OFF_HAND;\n    slotToCheck2=ItemSlot.SUB_OFF_HAND;\n  }\n  Item itemInMainHand=equipment.get(slotToCheck1.getSlotIdMask());\n  if (itemInMainHand != null && armorType == ArmorType.SHIELD && itemInMainHand.getItemTemplate().isTwoHandWeapon()) {\n    if (validateOnly) {\n      if (owner.getInventory().isFull()) {\n        return false;\n      }\n      markedFreeSlots.add(slotToCheck1.getSlotIdMask());\n      markedFreeSlots.add(slotToCheck2.getSlotIdMask());\n    }\n else {\n      unEquip(slotToCheck1.getSlotIdMask() | slotToCheck2.getSlotIdMask());\n    }\n  }\n  return true;\n}\n"}
{"nl": "Specify the color resource for the title text", "code": "public TapTarget titleTextColor(@ColorRes int color){\n  this.titleTextColor=color;\n  return this;\n}\n"}
{"nl": "Constructs a default JavaClipAudioPlayer", "code": "public JavaClipAudioPlayer(){\n  debug=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.debug\");\n  drainDelay=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.drainDelay\",150L).longValue();\n  openFailDelayMs=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.openFailDelayMs\",0).longValue();\n  totalOpenFailDelayMs=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.totalOpenFailDelayMs\",0).longValue();\n  audioMetrics=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.showAudioMetrics\");\n  setPaused(false);\n}\n"}
{"nl": "array resize to target size using linear interpolation", "code": "public static double[] arrayResize(double[] source,int targetSize){\n  if (source.length == targetSize) {\n    return source;\n  }\n  int sourceSize=source.length;\n  double fraction=(double)source.length / (double)targetSize;\n  double[] newSignal=new double[targetSize];\n  for (int i=0; i < targetSize; i++) {\n    double posIdx=fraction * i;\n    int nVal=(int)Math.floor(posIdx);\n    double diffVal=posIdx - nVal;\n    if (nVal >= sourceSize - 1) {\n      newSignal[i]=source[sourceSize - 1];\n      continue;\n    }\n    double fVal=(diffVal * source[nVal + 1]) + ((1 - diffVal) * source[nVal]);\n    newSignal[i]=fVal;\n  }\n  return newSignal;\n}\n"}
{"nl": "Breaks any cycles detected by the handler", "code": "public void removeCycles(){\n  if (myHorizontalCycle != null) {\n    removeCycles(myHorizontalDeps);\n  }\n  if (myVerticalCycle != null) {\n    removeCycles(myVerticalDeps);\n  }\n}\n"}
{"nl": "Creates a new instance of NormalizerAdapter", "code": "public NormalizerAdapter(){\n}\n"}
{"nl": "Adds input to foodExhaustionLevel to a max of 40", "code": "@Override public void addExhaustion(float exhaustion){\n  super.addExhaustion(exhaustion * EntityPlayerExt.getArmorExhaustionModifier(player));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WidgetsGetPagesQuery(VkApiClient client){\n  super(client,\"widgets.getPages\",GetPagesResponse.class);\n}\n"}
{"nl": "Collections identifiers to obtain data from", "code": "protected MarketGetAlbumByIdQuery albumIds(int... value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "Creates the message that would be sent within the email with the information specified by the parameter", "code": "private void createMessage(MailDetailsBean mDetails) throws MailSenderException {\n  message=new MimeMessage(session);\n  try {\n    message.setFrom(new InternetAddress(mDetails.getSender()));\n    message.setSubject(mDetails.getSubject());\n    message.setText(mDetails.getMessage());\n    for (int i=0; i < mDetails.getToRecipients().size(); i++) {\n      message.addRecipient(Message.RecipientType.TO,new InternetAddress((String)mDetails.getToRecipients().get(i)));\n    }\n    for (int i=0; i < mDetails.getCcRecipients().size(); i++) {\n      message.addRecipient(Message.RecipientType.CC,new InternetAddress((String)mDetails.getCcRecipients().get(i)));\n    }\n    for (int i=0; i < mDetails.getBccRecipients().size(); i++) {\n      message.addRecipient(Message.RecipientType.BCC,new InternetAddress((String)mDetails.getBccRecipients().get(i)));\n    }\n    LOG.debug(\"createMessage() - The email \" + mDetails.getSubject() + \" has being successfully composed \");\n  }\n catch (  AddressException e) {\n    throw new MailSenderException(\"One of the emails adrresses was not correctly formatted \");\n  }\ncatch (  MessagingException e) {\n    throw new MailSenderException(\"An error ocurred while preparing the message to be sent \");\n  }\n}\n"}
{"nl": "Effect of DEBUFF should not be added if duel ended (friendly unit)", "code": "private boolean checkDuelCondition(Effect effect){\n  Creature creature=effect.getEffector();\n  if (creature instanceof Player) {\n    if (!getOwner().isEnemy(creature) && effect.getTargetSlot() == SkillTargetSlot.DEBUFF.ordinal()) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Opens an indexjoin scan for this query", "code": "@Override public Scan open(){\n  Scan s=p1.open();\n  TableScan ts=(TableScan)tp2.open();\n  Index idx=ii.open(tx);\n  return new IndexJoinScan(s,idx,joinField,ts);\n}\n"}
{"nl": "Process the data source properties by translating them and adding default values", "code": "protected Map<String,String> process(Map<String,String> propertyMap){\n  Map<String,String> newPropertyMap=new LinkedHashMap<String,String>();\n  for (  String esriField : translationMap.keySet()) {\n    String value=propertyMap.get(esriField);\n    newPropertyMap.put(translationMap.get(esriField),value);\n  }\n  for (  String field : defaultsMap.keySet()) {\n    newPropertyMap.put(field,defaultsMap.get(field));\n  }\n  return newPropertyMap;\n}\n"}
{"nl": "Subscribe all callbacks to current record", "code": "private void subscribeRecord(){\n  for (  Subscription subscription : this.subscriptions) {\n    if (subscription.recordPathChangedCallback != null) {\n      this.record.subscribe(subscription.path,subscription.recordPathChangedCallback,true);\n    }\n else     if (subscription.recordChangedCallback != null) {\n      this.record.subscribe(subscription.recordChangedCallback,true);\n    }\n  }\n}\n"}
{"nl": "All resources which can be loaded not in onCreate(), should be load here, this function called while splash screen is active", "code": "public static void initAllResources(){\n  if (!isLoaded) {\n    databaseManager=new SQLdatabaseManager(applicationContext);\n    SettingsManager.getInstace().init();\n    Category.initPodcastsCatrgories();\n    SimpleCacheManager.getInstance().removeExpiredCache();\n    runMainService();\n    setAlarmManagerTasks();\n    isLoaded=true;\n  }\n}\n"}
{"nl": "Set peer id", "code": "public MessagesMarkAsReadQuery peerId(String value){\n  return unsafeParam(\"peer_id\",value);\n}\n"}
{"nl": "Returns true if this resource type constraint allows a type of the given name", "code": "public boolean isTypeAllowed(@NotNull ResourceType type){\n  return isTypeAllowed(type.getName());\n}\n"}
{"nl": "remove the name from the model", "code": "final public void remove(String name){\n  if (context != null) {\n    context.remove(name);\n  }\n}\n"}
{"nl": "- Inititialize all maps for subsequent use - Don't nullify initial chest list as it will be used during reload", "code": "void afterUnmarshal(Unmarshaller u,Object parent){\n  chestData.clear();\n  instancesMap.clear();\n  namedChests.clear();\n  for (  ChestTemplate chest : chests) {\n    chestData.put(chest.getNpcId(),chest);\n    if (chest.getName() != null && !chest.getName().isEmpty()) {\n      namedChests.put(chest.getName(),chest);\n    }\n  }\n}\n"}
{"nl": "put brackets around all inserts in the read sequence", "code": "private String placeBracketsAroundInsertionsInReadSequence(boolean dna2ProteinMode,String refSequence,String readSequence){\n  StringBuilder buf=new StringBuilder();\n  int readPos=0;\n  boolean inInsertion=false;\n  for (int i=0; i < refSequence.length() && readPos < readSequence.length(); i++) {\n    final boolean isInsertion=(refSequence.charAt(i) == '-' && readSequence.charAt(readPos) != '-');\n    if (!inInsertion && isInsertion) {\n      buf.append(\"[\");\n      inInsertion=true;\n    }\n    if (inInsertion && !isInsertion) {\n      buf.append(\"]\");\n      inInsertion=false;\n    }\n    if (dna2ProteinMode) {\n      buf.append(readSequence.charAt(readPos++));\n      buf.append(readSequence.charAt(readPos++));\n      buf.append(readSequence.charAt(readPos++));\n    }\n else     buf.append(readSequence.charAt(readPos++));\n  }\n  if (inInsertion) {\n    buf.append(\"]\");\n  }\n  return buf.toString();\n}\n"}
{"nl": "Generate json web token from platform user object", "code": "@Override public String generateToken(PlatformUser user){\n  Claims claims=Jwts.claims().setSubject(user.getUsername());\n  claims.put(DEVICE_ID,user.getDeviceId());\n  claims.put(PLATFORM,user.getPlatform());\n  claims.put(ROLE,user.getRole());\n  claims.put(LOGIN_TIME,user.getLoginTime());\n  return Jwts.builder().setClaims(claims).signWith(SignatureAlgorithm.HS512,secret).compact();\n}\n"}
{"nl": "/*     ", "code": "@deprecated public static boolean isJavaLetterOrDigit(int cp){\n  return isJavaIdentifierPart(cp);\n}\n"}
{"nl": "Finds the closest matching segments among the given list of edges for the given dragged edge, and returns these as a list of matches", "code": "protected List<Match> findClosest(Segment draggedEdge,List<Segment> edges){\n  List<Match> closest=new ArrayList<Match>();\n  addClosest(draggedEdge,edges,closest);\n  return closest;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetByIdQueryWithExtended(VkApiClient client,List<String> photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,PhotoFull.class));\n  photos(photos);\n  extended(true);\n}\n"}
{"nl": "Dist between coordinates", "code": "public static double distFrom(double lat1,double lng1,double lat2,double lng2){\n  double earthRadius=6371000;\n  double lat=Math.toRadians(lat2 - lat1);\n  double lng=Math.toRadians(lng2 - lng1);\n  double haversine=Math.sin(lat / 2) * Math.sin(lat / 2) + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.sin(lng / 2)* Math.sin(lng / 2);\n  return earthRadius * (2 * Math.atan2(Math.sqrt(haversine),Math.sqrt(1 - haversine)));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedUnsubscribeQuery(VkApiClient client,UserActor actor,NewsfeedItemType type,int itemId){\n  super(client,\"newsfeed.unsubscribe\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  itemId(itemId);\n}\n"}
{"nl": "compute an embedding of the graph", "code": "public boolean computeEmbedding(PhyloTreeView treeView,PhyloTree tree){\n  treeView.removeAllInternalPoints();\n  if (tree.getNumberOfNodes() == 0)   return true;\n  treeView.removeAllInternalPoints();\n  Node root=tree.getFirstNode();\n  NodeSet leaves=new NodeSet(tree);\n  for (Node v=tree.getFirstNode(); v != null; v=tree.getNextNode(v)) {\n    if (tree.getDegree(v) == 1)     leaves.add(v);\n    if (tree.getDegree(v) > tree.getDegree(root))     root=v;\n  }\n  EdgeDoubleArray angle=new EdgeDoubleArray(tree);\n  Random rand=new Random();\n  rand.setSeed(1);\n  int seen=setAnglesRec(tree,0,root,null,leaves,angle,rand);\n  if (seen != leaves.size())   System.err.println(\"Warning: Number of nodes seen: \" + seen + \" != Number of leaves: \"+ leaves.size());\n  setCoordsRec(treeView,tree,root,null,angle);\n  treeView.trans.setCoordinateRect(treeView.getBBox());\n  treeView.resetViews();\n  treeView.fitGraphToWindow();\n  return true;\n}\n"}
{"nl": "record Page End", "code": "public static void recordPageEnd(){\n  TcStatSdk.getInstance(context).recordPageEnd();\n}\n"}
{"nl": "did the user select apply?", "code": "public boolean isOk(){\n  return ok;\n}\n"}
{"nl": "Below method will be used to write data to file", "code": "private void writeDataTofile(Object[][] recordHolderList,int entryCountLocal,File file) throws CarbonSortKeyAndGroupByException {\n  if (parameters.isSortFileCompressionEnabled() || parameters.isPrefetch()) {\n    writeSortTempFile(recordHolderList,entryCountLocal,file);\n    return;\n  }\n  writeData(recordHolderList,entryCountLocal,file);\n}\n"}
{"nl": "Filter for hidden files", "code": "public File[] filterHiddenFiles(File[] files){\n  List<File> ret=new ArrayList<>();\n  for (  File file : files) {\n    if (!file.isHidden()) {\n      ret.add(file);\n    }\n  }\n  return ret.toArray(new File[ret.size()]);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioMoveToAlbumQuery(VkApiClient client,UserActor actor,List<Integer> audioIds){\n  super(client,\"audio.moveToAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioIds(audioIds);\n}\n"}
{"nl": "Get a flight status based on a flight within a polygon", "code": "public static void checkPolygon(List<Coordinate> geometry,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean weather,Date date,AirMapCallback<AirMapStatus> listener){\n  String url=statusPolygonUrl;\n  Map<String,String> params=AirMapStatus.getAsParams(takeOffPoint,types,ignoredTypes,weather,date);\n  params.put(\"geometry\",\"POLYGON(\" + makeGeoString(geometry) + \")\");\n  AirMap.getClient().get(url,params,new GenericOkHttpCallback(listener,AirMapStatus.class));\n}\n"}
{"nl": "Right click mouse with default delay", "code": "public void rightClick() throws InterruptedException {\n  click(InputEvent.BUTTON3_MASK);\n}\n"}
{"nl": "Standard deviation for a column", "code": "public static Column std(DataFrame dataFrame,String columnName){\n  return functions.sqrt(var(dataFrame,columnName));\n}\n"}
{"nl": "Recursively walk through the path and return all found files (not directory)", "code": "public static List<File> walk(String path){\n  LinkedList<File> output=new LinkedList<File>();\n  File root=new File(path);\n  File[] list=root.listFiles();\n  if (list == null) {\n    return output;\n  }\n  for (  File f : list) {\n    if (f.isDirectory()) {\n      output.addAll(walk(f.getAbsolutePath()));\n    }\n else {\n      output.addLast(f);\n    }\n  }\n  return output;\n}\n"}
{"nl": "This method will handle the changement of permissions", "code": "public void changePermissions(Legion legion,short deputyPermission,short centurionPermission,short legionarPermission,short volunteerPermission){\n  if (legion.setLegionPermissions(deputyPermission,centurionPermission,legionarPermission,volunteerPermission)) {\n    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x02,legion));\n  }\n}\n"}
{"nl": "Unregister the listener", "code": "public void unRegister(Object listener){\n  eventBus.unregister(listener);\n  Logs.info(\"un register an listener({})\",listener);\n}\n"}
{"nl": "Repeat the playback of the video", "code": "public VideoSaveQuery repeat(Boolean value){\n  return unsafeParam(\"repeat\",value);\n}\n"}
{"nl": "Search only by artist name", "code": "public AudioSearchQuery performerOnly(Boolean value){\n  return unsafeParam(\"performer_only\",value);\n}\n"}
{"nl": "sort by ascending start position and descending end position", "code": "public int compare(MatchData o1,MatchData o2){\n  if (o1.firstPosInRef < o2.firstPosInRef)   return -1;\n  if (o1.firstPosInRef > o2.firstPosInRef)   return 1;\n  if (o1.lastPosInRef < o2.lastPosInRef)   return 1;\n  if (o1.lastPosInRef > o2.lastPosInRef)   return -1;\n  if (o1.read.getId() < o2.read.getId())   return -1;\n  if (o1.read.getId() > o2.read.getId())   return 1;\n  return 0;\n}\n"}
{"nl": "Update the user's profile", "code": "public static void updatePilot(AirMapPilot pilot,AirMapCallback<AirMapPilot> listener){\n  String url=String.format(pilotByIdUrl,pilot.getPilotId());\n  AirMap.getClient().patch(url,pilot.getAsParams(),new GenericOkHttpCallback(listener,AirMapPilot.class));\n}\n"}
{"nl": "Build a map of dimensions key to list of destination stats <p>", "code": "private Map<Metrics,List<ManagedLedgerImpl>> groupLedgersByDimension(){\n  Map<Metrics,List<ManagedLedgerImpl>> ledgersByDimensionMap=Maps.newHashMap();\n  Map<String,ManagedLedgerImpl> ledgersMap=getManagedLedgers();\n  for (  Entry<String,ManagedLedgerImpl> e : ledgersMap.entrySet()) {\n    String ledgerName=e.getKey();\n    ManagedLedgerImpl ledger=e.getValue();\n    String namespace=parseNamespaceFromLedgerName(ledgerName);\n    Metrics metrics=createMetricsByDimension(namespace);\n    populateDimensionMap(ledgersByDimensionMap,metrics,ledger);\n  }\n  return ledgersByDimensionMap;\n}\n"}
{"nl": "Klatt Rule 8: Lengthening for emphasis", "code": "private int klattRule8(Element segment){\n  Element syllable=getSyllable(segment);\n  if (hasAccent(syllable)) {\n    if (isInNucleus(segment)) {\n      return getPropertyAsInteger(\"rule8.accent\");\n    }\n  }\n  return 100;\n}\n"}
{"nl": "Update the number of screen displayed in X and Y axis", "code": "private void updateScreenNumber(@Nullable DesignSurface surface){\n  if (surface != null) {\n    myXScreenNumber=!surface.isStackVertically() && surface.getScreenMode() == BOTH ? 2 : 1;\n    myYScreenNumber=surface.isStackVertically() && surface.getScreenMode() == BOTH ? 2 : 1;\n  }\n}\n"}
{"nl": "/** given an entry + template- perform the xtn locks and set the appropriate", "code": "public void xtnLockEntryOnTemplateOperation(Context context,IEntryHolder eh,ITemplateHolder th,XtnEntry alreadyLockedXtn){\n  if (th.getXidOriginated() != alreadyLockedXtn && th.getXidOriginated() != null)   th.getXidOriginated().lock();\n}\n"}
{"nl": "collapse an array of paths", "code": "public void collapse(TreePath[] paths){\n  for (  TreePath path : paths) {\n    collapse((DefaultMutableTreeNode)path.getLastPathComponent());\n  }\n}\n"}
{"nl": "Check if content is shown", "code": "public boolean isContent(){\n  return state == State.CONTENT;\n}\n"}
{"nl": "Close client socket", "code": "private void close(Collection<WatchedObject> bucket,SocketAddress serverAddress,Exception e,long originalInvocationVersion) throws IOException {\n  for (  WatchedObject watched : bucket) {\n    long currentWatchedInvocationVersion=watched.getVersion();\n    if (!RequestResponseTimeoutObserver.DISABLE_RESPONSE_WATCH && currentWatchedInvocationVersion > originalInvocationVersion) {\n      if (_logger.isLoggable(Level.FINER)) {\n        _logger.log(Level.FINER,\"Not closing invalid connection as current invocation version does not match\" + \" original invocation version. [original version=\" + originalInvocationVersion + \", current version=\"+ currentWatchedInvocationVersion+ \"original message [\"+ getInvalidConnectionMessage(serverAddress,watched.getSocket(),watched)+ \"[\"+ e+ \"]]\");\n      }\n      continue;\n    }\n    try {\n      watched.stopWatch();\n      watched.setException(e);\n      Level closeConnectionLoggingLevel=getCloseConnectionLoggingLevel();\n      if (_logger.isLoggable(closeConnectionLoggingLevel)) {\n        String invalidConnectionMessage=getInvalidConnectionMessage(serverAddress,watched.getSocket(),watched);\n        _logger.log(closeConnectionLoggingLevel,invalidConnectionMessage + \"[\" + e+ \"]\",e);\n      }\n      if (watched.getSocket().isBlocking()) {\n        watched.getSocket().close();\n      }\n else {\n        AsyncContext context=((CPeer)watched.getClient()).getAsyncContext();\n        if (context != null) {\n          context.setSelectionKey(null);\n          context.close(new ClosedChannelException());\n        }\n      }\n    }\n catch (    Exception ex) {\n      if (_logger.isLoggable(Level.FINE)) {\n        _logger.log(Level.FINE,getFailureToCloseInvalidConnectionMessage(serverAddress,watched.getSocket()),ex);\n      }\n    }\n  }\n}\n"}
{"nl": "Handles exception on ping", "code": "private void onException(Exception e){\n  if (e instanceof IllegalArgumentException) {\n  }\n else {\n  }\n  finishedTasks++;\n}\n"}
{"nl": "Marks that we've already checked the given template in a new project or existing project context", "code": "private static void markChecked(String category,String name,boolean createWithProject){\n  String key=getCheckKey(category,name,createWithProject);\n  ourTemplatesChecked.add(key);\n}\n"}
{"nl": "Checks if we have at least one route to the target", "code": "public boolean routeExists(String to){\n  RoutesMap routesMap=forwardTable.get(to);\n  if (routesMap == null) {\n    return false;\n  }\n  return (routesMap.size() > 0);\n}\n"}
{"nl": "Quest acquired: %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_ACQUIRE_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300613,value0);\n}\n"}
{"nl": "Utility method to substitute '?num' for parameters in the given SQL statement, and fill-in the order of the parameter tokens", "code": "public static String substituteParams(String sql,List<Integer> paramOrder) throws IOException {\n  if (sql.indexOf(\"?\") == -1)   return sql;\n  paramOrder.clear();\n  StreamTokenizer tok=new StreamTokenizer(new StringReader(sql));\n  tok.resetSyntax();\n  tok.quoteChar('\\'');\n  tok.wordChars('0','9');\n  tok.wordChars('?','?');\n  StringBuilder buf=new StringBuilder(sql.length());\n  for (int ttype; (ttype=tok.nextToken()) != StreamTokenizer.TT_EOF; ) {\nswitch (ttype) {\ncase StreamTokenizer.TT_WORD:\n      if (tok.sval.startsWith(\"?\")) {\n        buf.append(\"?\");\n        String pIndex=tok.sval.substring(1);\n        if (pIndex.length() > 0) {\n          paramOrder.add(Integer.valueOf(pIndex));\n        }\n else {\n          paramOrder.add(paramOrder.size() + 1);\n        }\n      }\n else       buf.append(tok.sval);\n    break;\ncase '\\'':\n  buf.append('\\'');\nif (tok.sval != null) {\n  buf.append(tok.sval);\n  buf.append('\\'');\n}\nbreak;\ndefault :\nbuf.append((char)ttype);\n}\n}\nreturn buf.toString();\n}\n"}
{"nl": "if CatchMe Game Start, this method is called by game room's manager and the manager have game token and item set number", "code": "public void sendCatchMeClickedInitNumber(){\n  for (int i=0; i < roomClients.size(); i++)   if (roomClients.get(i).getsEnteredRoom().equals(getsRoomName())) {\n    roomClients.get(i).setnCatchmePlayCount(getnCatchmePlayCount());\n    roomClients.get(i).sendPacket(Settings._ANSWER_CATCHME_INIT_PLAY_CLICKED_NUMBER + \"\",roomClients.get(i).getnCatchmePlayCount() + \"\");\n  }\n}\n"}
{"nl": "Update current blowfish key with the new one and reinitialize the P-array and S-boxes", "code": "public void updateKey(byte[] blowfishKey){\n  this.blowfishKey=blowfishKey;\n  System.arraycopy(SBOX_INIT_0,0,sBoxes[0],0,256);\n  System.arraycopy(SBOX_INIT_1,0,sBoxes[1],0,256);\n  System.arraycopy(SBOX_INIT_2,0,sBoxes[2],0,256);\n  System.arraycopy(SBOX_INIT_3,0,sBoxes[3],0,256);\n  initArrays();\n}\n"}
{"nl": "Allows to _create_ a user with a given email address and password", "code": "public Single<AuthResult> createUserWithEmailAndPassword(final String _email,final String _password){\n  return observeSingleValue(firebaseAuth.createUserWithEmailAndPassword(_email,_password));\n}\n"}
{"nl": "Show empty data", "code": "private void showEmpty(){\n  progressBar.setVisibility(View.GONE);\n  recyclerView.setVisibility(View.GONE);\n  emptyTextView.setVisibility(View.VISIBLE);\n}\n"}
{"nl": "Generates a binomial distributed number using the given rng", "code": "public static int binomial(RandomGenerator rng,int n,double p){\n  if ((p < 0) || (p > 1)) {\n    return 0;\n  }\n  int c=0;\n  for (int i=0; i < n; i++) {\n    if (rng.nextDouble() < p) {\n      c++;\n    }\n  }\n  return c;\n}\n"}
{"nl": "Get an instance of an <code>unsigned byte</code>", "code": "public static UByte valueOf(long value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(value));\n}\n"}
{"nl": "Set the connectivity text color when phone is connected", "code": "private void inflateConnectedTextColor(){\n  if (mConnectedTextColor != R.color.connectivity_color) {\n    connectivityText.setTextColor(ColorUtil.getColorWrapper(mContext,mConnectedTextColor));\n  }\n}\n"}
{"nl": "Loads the given Language", "code": "public final void load(String locale){\n  if (locale != null)   locale=locale.replace('-','_');\n  try {\n    URL url=locale == null ? this.getDefaultLanguageFile() : this.getClass().getResource(\"/assets/rewimod/lang/\" + locale + \".lang\");\n    if (url == null) {\n      url=this.getDefaultLanguageFile();\n    }\n    InputStreamReader reader=new InputStreamReader(url.openStream(),StandardCharsets.UTF_8);\n    this.parse(new BufferedReader(reader));\n  }\n catch (  IOException ex) {\n    RewiMod.LOGGER.fatal(\"Error while loading Language File\",ex);\n  }\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  super.destroyView();\n}\n"}
{"nl": "Close the disk cache used for storing Bitmaps", "code": "public void close(){\n  getDiskCache().close();\n}\n"}
{"nl": "draw the label of the node", "code": "public void drawLabel(Node v,boolean selected){\n  viewer.getNV(v).drawLabel(gc,viewer.trans,viewer.getFont(),selected);\n  if (selected)   hiliteLabel(v,(NodeData)v.getData());\n}\n"}
{"nl": "Really simple fuzzy match using JaroWinklerDistance", "code": "private static boolean isMatch(String left,String right){\n  left=null != left ? left : \"\";\n  right=null != right ? right : \"\";\n  return StringUtils.getJaroWinklerDistance(left,right) > 0.85;\n}\n"}
{"nl": "make a list of all OrderPaymentPreferences and Billing info including all payment methods and types", "code": "public List<GenericValue> makeAllOrderPaymentInfos(LocalDispatcher dispatcher){\n  Delegator delegator=this.getDelegator();\n  List<GenericValue> allOpPrefs=new LinkedList<GenericValue>();\n  BigDecimal remainingAmount=this.getGrandTotal().subtract(this.getPaymentTotal());\n  remainingAmount=remainingAmount.setScale(2,BigDecimal.ROUND_HALF_UP);\n  if (getBillingAccountId() != null && this.billingAccountAmt.compareTo(BigDecimal.ZERO) <= 0) {\n    BigDecimal billingAccountAvailableAmount=CheckOutHelper.availableAccountBalance(getBillingAccountId(),dispatcher);\n    if (this.billingAccountAmt.compareTo(BigDecimal.ZERO) == 0 && billingAccountAvailableAmount.compareTo(BigDecimal.ZERO) > 0) {\n      this.billingAccountAmt=billingAccountAvailableAmount;\n    }\n    if (remainingAmount.compareTo(getBillingAccountAmount()) < 0) {\n      this.billingAccountAmt=remainingAmount;\n    }\n    if (billingAccountAvailableAmount.compareTo(getBillingAccountAmount()) < 0) {\n      this.billingAccountAmt=billingAccountAvailableAmount;\n    }\n  }\n  for (  CartPaymentInfo inf : paymentInfo) {\n    if (inf.amount == null) {\n      inf.amount=remainingAmount;\n      remainingAmount=BigDecimal.ZERO;\n    }\n    allOpPrefs.addAll(inf.makeOrderPaymentInfos(delegator,this));\n  }\n  return allOpPrefs;\n}\n"}
{"nl": "Remove the value with the supplied key", "code": "public void remove(String key){\n  internalMap.remove(key);\n}\n"}
{"nl": "Migrate a table as an entity type", "code": "private Collection<Var> migrateAsEntity(SQLTable currentTable){\n  Var type=var().isa(\"entity-type\").id(currentTable.getEntityType());\n  return Lists.newArrayList(type);\n}\n"}
{"nl": "Called whenever a use whats to search pokemons on a different position", "code": "@Subscribe public void onEvent(SearchInPosition event){\n  List<LatLng> list=MapHelper.getSearchArea(event.getSteps(),new LatLng(event.getPosition().latitude,event.getPosition().longitude));\n  snackMe(getString(R.string.toast_searching));\n  nianticManager.getGyms(event.getPosition().latitude,event.getPosition().longitude,0D);\n  nianticManager.getPokeStops(event.getPosition().latitude,event.getPosition().longitude,0D);\n  nianticManager.getLuredPokemon(event.getPosition().latitude,event.getPosition().longitude,0D);\n  for (  LatLng p : list) {\n    nianticManager.getCatchablePokemon(p.latitude,p.longitude,0D);\n  }\n}\n"}
{"nl": "Find and remove a ReggieStat based on the provided ServiceID", "code": "private ReggieStat removeReggieStat(ServiceID id){\n  if (id == null)   throw new NullPointerException(\"id is null\");\n  ReggieStat rStat=null;\nsynchronized (discoveryTimes) {\n    for (Iterator it=discoveryTimes.iterator(); it.hasNext(); ) {\n      ReggieStat rt=(ReggieStat)it.next();\n      if (rt.serviceID.equals(id)) {\n        rStat=rt;\n        discoveryTimes.remove(rt);\n        break;\n      }\n    }\n  }\n  return (rStat);\n}\n"}
{"nl": "info log", "code": "public static void i(String msg){\n  if (LOG_ENABLE) {\n    Log.i(TAG,buildMsg(msg));\n  }\n}\n"}
{"nl": "Called by client when some action is performed or on finish gathering Called by move observer on player move", "code": "public void finishGathering(Player player){\n  if (currentGatherer == player.getObjectId()) {\n    if (state == GatherState.GATHERING) {\n      task.abort();\n    }\n    currentGatherer=0;\n    state=GatherState.IDLE;\n  }\n}\n"}
{"nl": "Set fields", "code": "public UsersGetSubscriptionsQueryWithExtended fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();\n  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getSelectedFiles().size() > 0;\n}\n"}
{"nl": "Fill an array with the values of a standard Hanning window function", "code": "private void hanning(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double factor=twoPI / (size - 1.0d);\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=0.5 * (1 - Math.cos(factor * i));\n}\n"}
{"nl": "determines whether two byte arrays are equalOverShorterOfBoth over the whole minimum of their two lengths", "code": "public static boolean equalOverShorterOfBoth(byte[] a,byte[] b){\n  int top=Math.min(a.length,b.length);\n  for (int i=0; i < top; i++) {\n    if (a[i] != b[i])     return false;\n  }\n  return true;\n}\n"}
{"nl": "read double, little endian", "code": "public void writeDouble(double a) throws IOException {\n  byteBuffer.putDouble(0,a);\n  byteBuffer.rewind();\n  byteBuffer.get(bytes,0,8);\n  swap(bytes,8);\n  outs.write(bytes,0,8);\n}\n"}
{"nl": "Constructs an <code>CommitJob</code>", "code": "public CommitJob(Transaction tr,TaskManager pool,WakeupManager wm,ClientLog log,ParticipantHandle[] handles,Object xid){\n  super(pool,wm,false);\n  if (log == null)   throw new IllegalArgumentException(\"CommitJob: CommitJob: \" + \"log is null\");\n  this.log=log;\n  if (!(tr instanceof ServerTransaction))   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"must be a ServerTransaction\");\n  this.tr=(ServerTransaction)tr;\n  if (handles == null)   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"must have participants\");\n  if (handles.length == 0)   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"must have participants\");\n  this.handles=handles;\n  _xid=xid;\n}\n"}
{"nl": "execute a command within the swing thread", "code": "public boolean executeImmediately(final String command,CommandManager commandManager){\n  System.err.println(\"Executing: \" + command);\n  try {\n    if (doc.getProgressListener() == null) {\n      ProgressListener progressListener=new ProgressPercentage();\n      doc.setProgressListener(progressListener);\n    }\n    if (commandManager != null)     commandManager.execute(command);\n else     throw new Exception(\"Internal error: commandManager==null\");\n    if (viewer == null || !viewer.isLocked()) {\n      notifyUpdateViewer(Director.ENABLE_STATE);\n      WaitUntilAllViewersAreUptoDate();\n      notifyUnlockInput();\n    }\n    return true;\n  }\n catch (  CanceledException ex) {\n    System.err.println(\"USER CANCELED EXECUTE\");\n    NotificationsInSwing.showInformation(\"USER CANCELED EXECUTE\");\n    return false;\n  }\ncatch (  Exception ex) {\n    NotificationsInSwing.showError(\"Command failed: \" + ex.getMessage());\n    return false;\n  }\n}\n"}
{"nl": "Left click mouse at a point with specified delay", "code": "public void leftClick(int x,int y,int delay) throws InterruptedException {\n  move(x,y);\n  click(InputEvent.BUTTON1_MASK,delay);\n}\n"}
{"nl": "Calculate number of vCenter servers", "code": "public static int calculatevCenterServerCount(int vmconcurrentcount,int vcvmlimit){\n  Float f=((float)vmconcurrentcount / (float)vcvmlimit);\n  f=(float)Math.ceil(f);\n  final int i=f.intValue();\n  return i;\n}\n"}
{"nl": "Sends this packet to all the players in the given list", "code": "public void toAll(List<EntityPlayerMP> players){\n  PacketWrapper packet=new PacketWrapper(channel,new Packet(this));\n  players.stream().map(null).forEach(null);\n}\n"}
{"nl": "Checks whether we've already checked the given template in a new project or existing project context", "code": "private static boolean haveChecked(File templateFile,boolean createWithProject){\n  return haveChecked(templateFile.getParentFile().getName(),templateFile.getName(),createWithProject);\n}\n"}
{"nl": "Capitalize the first character of the string if possible", "code": "public static String upperCaseFirst(String input){\n  if (input.charAt(0) >= 'a' && input.charAt(0) <= 'z') {\n    return (\"\" + input.charAt(0)).toUpperCase() + input.substring(1);\n  }\n else {\n    return input;\n  }\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.000756494565517,0.0109109752919,0.0303377878006,0.0637967988952,0.128289492005,0.000756494565517,0.0109109752919,0.0303377878006,0.0637967988952,0.128289492005};\n}\n"}
{"nl": "Will be called when the sensor selection dialog has been closed after sensors from all nodes have been selected", "code": "@Override public void onSensorsFromAllNodesSelected(Map<String,List<DeviceSensor>> selectedSensors){\n  Log.d(TAG,\"Sensors from all nodes selected\");\n  this.selectedSensors=selectedSensors;\n  for (  Map.Entry<String,List<DeviceSensor>> selectedSensorsEntry : selectedSensors.entrySet()) {\n    for (    DeviceSensor deviceSensor : selectedSensorsEntry.getValue()) {\n      Bundle bundle=new Bundle();\n      bundle.putString(FirebaseAnalytics.Param.ITEM_ID,String.valueOf(deviceSensor.getType()));\n      bundle.putString(FirebaseAnalytics.Param.ITEM_NAME,deviceSensor.getName());\n      bundle.putString(FirebaseAnalytics.Param.ITEM_CATEGORY,deviceSensor.getStringType());\n      app.getAnalytics().logEvent(FirebaseAnalytics.Event.VIEW_ITEM,bundle);\n    }\n  }\n}\n"}
{"nl": "Constructs new instance of <tt>CM_QUIT </tt> packet", "code": "public CM_QUIT(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "init blocks get created within init methods in Jimple", "code": "private void handleInitializerBlocks(soot.SootMethod sootMethod){\n  ArrayList<Block> initializerBlocks=((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).getInitializerBlocks();\n  if (initializerBlocks != null) {\n    handleStaticBlocks(initializerBlocks);\n  }\n}\n"}
{"nl": "Check Coordinate with formula: \" sqrt((x-x0)^2 + (y-y0)^2 + (z-z0)^2) < radius \"", "code": "public static boolean isInSphere(final VisibleObject obj,final float centerX,final float centerY,final float centerZ,final float radius){\n  float dx=(obj.getX() - centerX);\n  float dy=(obj.getY() - centerY);\n  float dz=(obj.getZ() - centerZ);\n  return dx * dx + dy * dy + dz * dz < radius * radius;\n}\n"}
{"nl": "Synthesize given vocalization using MLSA vocoder", "code": "@Override public AudioInputStream synthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {\n  if (backchannelNumber > vMLSAFeaturesReader.getNumberOfUnits()) {\n    throw new IllegalArgumentException(\"requesting unit should not be more than number of units\");\n  }\n  if (backchannelNumber < 0) {\n    throw new IllegalArgumentException(\"requesting unit index should not be less than zero\");\n  }\n  double[] lf0=vMLSAFeaturesReader.getUnitLF0(backchannelNumber);\n  boolean[] voiced=vMLSAFeaturesReader.getVoicedFrames(backchannelNumber);\n  double[][] mgc=vMLSAFeaturesReader.getUnitMGCs(backchannelNumber);\n  double[][] strengths=vMLSAFeaturesReader.getUnitStrengths(backchannelNumber);\n  return synthesizeUsingMLSAVocoder(mgc,strengths,lf0,voiced,aft);\n}\n"}
{"nl": "Transfer to the internal adapter", "code": "public void notifyDataSetChanged(){\n  internalAdapter.notifyDataSetChanged();\n}\n"}
{"nl": "Method to do some drawing on faces", "code": "private Bitmap drawOnFace(SparseArray<Face> faceArray,int stroke,int color){\n  Bitmap outBitmap=Bitmap.createBitmap(getMyPhoto().getWidth(),getMyPhoto().getHeight(),Bitmap.Config.RGB_565);\n  Canvas canvas=new Canvas(outBitmap);\n  canvas.drawBitmap(getMyPhoto(),0,0,null);\n  for (int i=0; i < faceArray.size(); i++) {\n    int key=faceArray.keyAt(i);\n    Face face=faceArray.get(key);\n    drawRectangle(canvas,face.getPosition(),face.getWidth(),face.getHeight(),stroke,color);\n    this.listLandMarkPhoto=face.getLandmarks();\n  }\n  return outBitmap;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesSendQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.send\",Integer.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Add a value to the data", "code": "public void addValue(double value){\n  secondMoment.increment(value);\n  minImpl.increment(value);\n  maxImpl.increment(value);\n  sumImpl.increment(value);\n  sumOfSquaresImpl.increment(value);\n  sumOfLogsImpl.increment(value);\n  n++;\n}\n"}
{"nl": "Give back the phone class of the target", "code": "@Override public byte process(Target target){\n  Element segment=navigator.getElement(target);\n  if (segment == null)   return values.get(\"0\");\n  if (!segment.getTagName().equals(MaryXML.PHONE))   return 0;\n  String ph=segment.getAttribute(\"p\");\n  String phoneClass=phones2Classes.get(ph);\n  if (phoneClass == null) {\n    return values.get(\"0\");\n  }\n  return values.get(phoneClass);\n}\n"}
{"nl": "converts the file", "code": "public static void main(String[] args) throws Exception {\n  if (args.length == 0 && System.getProperty(\"user.name\").equals(\"huson\")) {\n    args=new String[]{\"-ref\",\"/Users/huson/data/michael/test/dna/references-aligned.fasta\",\"-rea\",\"/Users/huson/data/michael/test/dna/reads-aligned.fasta\"};\n    args=new String[]{\"-ref\",\"/Users/huson/data/michael/test/references-aligned-sg.fasta\",\"-rea\",\"/Users/huson/data/michael/test/reads-aligned-sg.fasta\",\"-d2p\",\"-f\",\"BlastNText\"};\n    args=new String[]{\"-ref\",\"/Users/huson/data/michael/adam/try-alignments/880_rpoB_sequences_min_1000_AAs.mafft\",\"-rea\",\"/Users/huson/data/michael/adam/try-alignments/use\",\"-d2p\",\"-o\",\"/Users/huson/data/michael/adam/try-alignments/out.blastn\",\"-f\",\"BlastNText\",\"-n\",\"880_rpoB_sequences_min_1000_AAs|kegg|3043\"};\n    args=new String[]{\"-ref\",\"/Users/huson/data/michael/test/references-aligned.fasta\",\"-rea\",\"/Users/huson/data/michael/test/reads-aligned.fasta\",\"-d2p\",\"-f\",\"BlastNText\"};\n    args=new String[]{\"-ref\",\"/Users/huson/data/michael/adam/try-alignments/references-aligned.fasta\",\"-rea\",\"/Users/huson/data/michael/adam/try-alignments/use\",\"-d2p\",\"-o\",\"/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.blastn\",\"-f\",\"BlastNText\",\"-n\",\"880_rpoB_sequences_min_1000_AAs|kegg|3043\",\"-r\",\"/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.fasta\"};\n    args=new String[]{\"-ref\",\"/Users/huson/data/michael/adam/try-alignments/references-top-aligned.fasta\",\"-rea\",\"/Users/huson/data/michael/adam/try-alignments/use\",\"-d2p\",\"-o\",\"/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.blastn\",\"-f\",\"BlastNText\",\"-n\",\"references-top|kegg|3043\",\"-r\",\"/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.fasta\"};\n    args=new String[]{\"-ref\",\"/Users/huson/data/michael/adam/try-alignments/one-aligned.fasta\",\"-rea\",\"/Users/huson/data/michael/adam/try-alignments/two-reads-aligned.fasta\",\"-d2p\",\"-o\",\"/Users/huson/data/michael/adam/try-alignments/two.blastn\",\"-f\",\"BlastNText\",\"-n\",\"references-top|kegg|3043\"};\n    args=new String[]{\"-ref\",\"/Users/huson/data/michael/adam/try-alignments/references-82-aligned.fasta\",\"-rea\",\"/Users/huson/data/michael/adam/try-alignments/use82\",\"-d2p\",\"-o\",\"/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB-82.blastn\",\"-f\",\"BlastNText\",\"-n\",\"references-top|kegg|3043\",\"-r\",\"/Users/huson/data/michael/adam/try-alignments/SRR172902-rpoB.fasta\"};\n  }\n  try {\n    long start=System.currentTimeMillis();\n    (new MergeAlignments()).run(args);\n    System.err.println(\"Time: \" + ((System.currentTimeMillis() - start) / 1000) + \"s\");\n    System.exit(0);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n    System.exit(1);\n  }\n}\n"}
{"nl": "SCIPIO: Type conversion of Strings that resemble \"Y\" or \"N\" values to Boolean", "code": "public static Boolean toBoolean(String value){\n  if (\"Y\".equalsIgnoreCase(value)) {\n    return true;\n  }\n else   if (\"N\".equalsIgnoreCase(value)) {\n    return false;\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Reconstruct from parcel", "code": "protected OCUpload(Parcel source){\n  readFromParcel(source);\n}\n"}
{"nl": "finds captured variable occurrences in a query and replaces them with fresh variables", "code": "private void resolveCaptures(){\n  Set<String> captures=new HashSet<>();\n  getVarSet().forEach(null);\n  captures.forEach(null);\n}\n"}
{"nl": "Writes out a source or sink domain pair", "code": "private void writeSourceSinkDomPair(SourceSinkDomPair pair,Document document,Element rootElement){\n  final Element pairElement;\n  final Element sourceSinkElement;\nswitch (pair.getType()) {\ncase SourceDomPair:\n    pairElement=document.createElement(\"sourcedompair\");\n  sourceSinkElement=document.createElement(\"source\");\nbreak;\ncase SinkDomPair:\npairElement=document.createElement(\"sinkdompair\");\nsourceSinkElement=document.createElement(\"sink\");\nbreak;\ndefault :\nthrow new RuntimeException(\"Invalid source/sink domain pair type\");\n}\nrootElement.appendChild(pairElement);\npairElement.appendChild(sourceSinkElement);\nwriteSourceSinkSpec(pair.getSourceOrSink(),document,sourceSinkElement);\nwriteDomainSpec(pair.getDomain(),document,pairElement);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int writeValueAndFinal(int i,boolean isFinal){\n}\n"}
{"nl": "deflate current SAM line by replacing all fields that equalOverShorterOfBoth previous line by an ampersand", "code": "public static String deflate(String previous,String current){\n  if (previous == null)   return current;\n  StringBuilder buf=new StringBuilder();\n  int start1=0;\n  int start2=0;\n  while (start1 < previous.length() && start2 < current.length()) {\n    int end1=start1;\n    int end2=start2;\n    while (end1 <= previous.length() && end2 <= current.length()) {\n      int c1=(end1 < previous.length() ? previous.charAt(end1) : '\\t');\n      int c2=(end2 < current.length() ? current.charAt(end2) : '\\t');\n      if (c1 == c2) {\n        if (c1 == '\\t') {\n          buf.append(\"&\");\n          break;\n        }\n else {\n          end1++;\n          end2++;\n        }\n      }\n else {\n        while (end1 < previous.length() && previous.charAt(end1) != '\\t') {\n          end1++;\n        }\n        while (end2 < current.length() && current.charAt(end2) != '\\t') {\n          end2++;\n        }\n        for (int i=start2; i < end2; i++)         buf.append(current.charAt(i));\n        break;\n      }\n    }\n    start1=end1 + 1;\n    start2=end2 + 1;\n    if (start2 < current.length())     buf.append(\"\\t\");\n  }\n  return buf.toString();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PlacesAddQuery(VkApiClient client,UserActor actor,String title,float latitude,float longitude){\n  super(client,\"places.add\",AddResponse.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n  latitude(latitude);\n  longitude(longitude);\n}\n"}
{"nl": "add highlights for the given region on the given pane", "code": "public static void markText(JTextComponent pane,int start,int end,SimpleMarker marker){\n  try {\n    Highlighter hiliter=pane.getHighlighter();\n    int selStart=pane.getSelectionStart();\n    int selEnd=pane.getSelectionEnd();\n    if (selStart == selEnd || end < selStart || start > selStart) {\n      hiliter.addHighlight(start,end,marker);\n      return;\n    }\n    if (selStart > start && selStart < end) {\n      hiliter.addHighlight(start,selStart,marker);\n    }\n    if (selEnd > start && selEnd < end) {\n      hiliter.addHighlight(selEnd,end,marker);\n    }\n  }\n catch (  BadLocationException ex) {\n    LOG.log(Level.SEVERE,null,ex);\n  }\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.0346808448626,0.0937009113303,0.143313661184,0.202008445998,0.293728320107,20.8026639595,8.74589525602,5.98756512605,4.38737418741,3.10751166664};\n}\n"}
{"nl": "upload file to storage server (by callback)", "code": "public String[] upload_file(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String master_filename=null;\n  final String prefix_name=null;\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE,group_name,master_filename,prefix_name,file_ext_name,file_size,callback,meta_list);\n}\n"}
{"nl": "Returns a description of the given elements, suitable as unit test golden file output", "code": "public static String describeElements(@Nullable PsiElement[] elements){\n  if (elements == null) {\n    return \"Empty\";\n  }\n  StringBuilder sb=new StringBuilder();\n  for (  PsiElement target : elements) {\n    appendElementDescription(sb,target);\n  }\n  return sb.toString();\n}\n"}
{"nl": "Dynamic time warping (DTW) cost signal and reference Default 'Euclidean' distance function", "code": "public DTW(double[][] signal,double[][] reference){\n  this.signal=signal;\n  this.reference=reference;\n  this.distanceFunction=\"Euclidean\";\n  setCost(dpDistance());\n}\n"}
{"nl": "true - to return outgoing requests false - to return incoming requests (default)", "code": "public FriendsGetRequestsQueryWithNeedMutual out(Boolean value){\n  return unsafeParam(\"out\",value);\n}\n"}
{"nl": "Compute the distance between two LSF frames", "code": "private double computeOneFrameDistance(double[] l1,double[] l2,boolean isBark,double upperFreqInHz){\n  int maxInd1=MathUtils.getLargestIndexSmallerThan(l1,upperFreqInHz);\n  int maxInd2=MathUtils.getLargestIndexSmallerThan(l2,upperFreqInHz);\n  int maxInd=Math.min(maxInd1,maxInd2);\n  double[] tmp1;\n  double[] tmp2;\n  if (maxInd + 1 == l1.length) {\n    tmp1=l1;\n  }\n else {\n    tmp1=new double[maxInd + 1];\n    System.arraycopy(l1,0,tmp1,0,maxInd + 1);\n  }\n  if (maxInd + 1 == l2.length) {\n    tmp2=l2;\n  }\n else {\n    tmp2=new double[maxInd + 1];\n    System.arraycopy(l2,0,tmp2,0,maxInd + 1);\n  }\n  double distance;\n  if (!isBark) {\n    distance=SignalProcUtils.getRmsDistance(tmp1,tmp2);\n  }\n else {\n    distance=SignalProcUtils.getRmsDistance(SignalProcUtils.freq2bark(tmp1),SignalProcUtils.freq2bark(tmp2));\n  }\n  return distance;\n}\n"}
{"nl": "is a selection find possible", "code": "public boolean isSelectionFindable(){\n  return selected.size() > 0;\n}\n"}
{"nl": "draw heat map with colors representing series", "code": "public void drawChartTransposed(Graphics2D gc){\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n}\n"}
{"nl": "Linearly interpolates a float value from start to end for given progress", "code": "public static float lerp(float start,float end,float progress){\n  return start - progress * (start - end);\n}\n"}
{"nl": "Flush all data left in lame buffer to file", "code": "private void flushAndRelease(){\n  final int flushResult=LameUtil.flush(mp3Buffer);\n  if (flushResult > 0) {\n    try {\n      mFileOutputStream.write(mp3Buffer,0,flushResult);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n finally {\n      if (mFileOutputStream != null) {\n        try {\n          mFileOutputStream.close();\n        }\n catch (        IOException e) {\n          e.printStackTrace();\n        }\n      }\n      LameUtil.close();\n    }\n  }\n}\n"}
{"nl": "Counters information of which shall be returned", "code": "public AccountGetCountersQuery filter(List<AccountGetCountersFilter> value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "Call user data handlers when a node is deleted (finalized)", "code": "void callUserDataHandlers(Node n,Node c,short operation,Hashtable userData){\n  if (userData == null || userData.isEmpty()) {\n    return;\n  }\n  Iterator entries=userData.entrySet().iterator();\n  while (entries.hasNext()) {\n    Map.Entry entry=(Map.Entry)entries.next();\n    String key=(String)entry.getKey();\n    UserDataRecord r=(UserDataRecord)entry.getValue();\n    if (r.fHandler != null) {\n      r.fHandler.handle(operation,key,r.fData,n,c);\n    }\n  }\n}\n"}
{"nl": "Return a new immutable map consisting of keys,values using the given pairs", "code": "@SafeVarargs public static <K,V>Map<K,V> Map(Tuple2<K,V>... kvs){\n  if ((kvs == null) || (kvs.length == 0)) {\n    return Collections.emptyMap();\n  }\n  Map<K,V> map=new HashMap<>(kvs.length);\n  for (  Tuple2<K,V> t : kvs) {\n    map.put(t._1,t._2);\n  }\n  return Collections.unmodifiableMap(map);\n}\n"}
{"nl": "Create an attribute with PSVI information", "code": "@Override public Attr createAttributeNS(String namespaceURI,String qualifiedName,String localName) throws DOMException {\n  return new PSVIAttrNSImpl(this,namespaceURI,qualifiedName,localName);\n}\n"}
{"nl": "Validation procedure for specified test item", "code": "private TestItem verifyTestItem(final String testItemId,FinishTestItemRQ finishExecutionRQ,Optional<Status> actualStatus){\n  TestItem testItem=testItemRepository.findOne(testItemId);\n  try {\n    expect(testItem,notNull()).verify(TEST_ITEM_NOT_FOUND,testItemId);\n    expect(testItem,not(Preconditions.TEST_ITEM_FINISHED)).verify(REPORTING_ITEM_ALREADY_FINISHED,testItem.getId());\n    boolean statusProvided=actualStatus.isPresent();\n    List<TestItem> descendants=testItemRepository.findDescendants(testItem.getId());\n    boolean hasDescendants=!descendants.isEmpty();\n    expect(!statusProvided && !hasDescendants,Predicates.equalTo(Boolean.FALSE),formattedSupplier(\"There is no status provided from request and there are no descendants to check statistics for test item id '{}'\",testItemId)).verify();\n    expect(descendants,not(Preconditions.HAS_IN_PROGRESS_ITEMS)).verify(FINISH_ITEM_NOT_ALLOWED,formattedSupplier(\"Test item '{}' has descendants with '{}' status. All descendants '{}'\",testItemId,IN_PROGRESS.name(),descendants));\n    expect(finishExecutionRQ,Preconditions.finishSameTimeOrLater(testItem.getStartTime())).verify(FINISH_TIME_EARLIER_THAN_START_TIME,finishExecutionRQ.getEndTime(),testItem.getStartTime(),testItemId);\n  }\n catch (  BusinessRuleViolationException e) {\n    fail().withError(AMBIGUOUS_TEST_ITEM_STATUS,e.getMessage());\n  }\n  return testItem;\n}\n"}
{"nl": "Opens the specified file in the editor", "code": "public static boolean openEditor(@NotNull Project project,@NotNull VirtualFile vFile){\n  OpenFileDescriptor descriptor;\n  if (vFile.getFileType() == StdFileTypes.XML && AndroidEditorSettings.getInstance().getGlobalState().isPreferXmlEditor()) {\n    descriptor=new OpenFileDescriptor(project,vFile,0);\n  }\n else {\n    descriptor=new OpenFileDescriptor(project,vFile);\n  }\n  return !FileEditorManager.getInstance(project).openEditor(descriptor,true).isEmpty();\n}\n"}
{"nl": "Sends correctly warehouse packets", "code": "public static void sendWarehouseInfo(Player player,boolean sendAccountWh){\n  List<Item> items=player.getStorage(StorageType.REGULAR_WAREHOUSE.getId()).getItems();\n  int whSize=player.getWarehouseSize();\n  int itemsSize=items.size();\n  boolean firstPacket=true;\n  if (itemsSize != 0) {\n    int index=0;\n    while (index + 10 < itemsSize) {\n      PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(items.subList(index,index + 10),StorageType.REGULAR_WAREHOUSE.getId(),whSize,firstPacket,player));\n      index+=10;\n      firstPacket=false;\n    }\n    PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(items.subList(index,itemsSize),StorageType.REGULAR_WAREHOUSE.getId(),whSize,firstPacket,player));\n  }\n  PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(null,StorageType.REGULAR_WAREHOUSE.getId(),whSize,false,player));\n  if (sendAccountWh) {\n    PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(player.getStorage(StorageType.ACCOUNT_WAREHOUSE.getId()).getItemsWithKinah(),StorageType.ACCOUNT_WAREHOUSE.getId(),0,true,player));\n  }\n  PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_INFO(null,StorageType.ACCOUNT_WAREHOUSE.getId(),0,false,player));\n}\n"}
{"nl": "Create the list of targets from the segments to be synthesized Prepend and append pauses if necessary", "code": "public static List<Target> createTargetsWithPauses(List<Element> segmentsAndBoundaries,String silenceSymbol){\n  List<Target> targets=new ArrayList<Target>();\n  if (segmentsAndBoundaries.size() == 0)   return targets;\n  Element last=segmentsAndBoundaries.get(segmentsAndBoundaries.size() - 1);\n  if (!last.getTagName().equals(MaryXML.BOUNDARY)) {\n    Element finalPause=MaryXML.createElement(last.getOwnerDocument(),MaryXML.BOUNDARY);\n    Element token=(Element)DomUtils.getAncestor(last,MaryXML.TOKEN);\n    Element parent=(Element)token.getParentNode();\n    parent.appendChild(finalPause);\n    segmentsAndBoundaries.add(finalPause);\n  }\n  for (  Element sOrB : segmentsAndBoundaries) {\n    String phone=UnitSelector.getPhoneSymbol(sOrB);\n    Target t=(Target)sOrB.getUserData(\"target\");\n    if (t == null) {\n      t=new Target(phone,sOrB);\n      sOrB.setUserData(\"target\",t,Target.targetFeatureCloner);\n    }\n    targets.add(t);\n  }\n  return targets;\n}\n"}
{"nl": "Check if the date is less than 7 days from now", "code": "private static boolean isLessThanOneWeek(Date date){\n  Calendar calendar=Calendar.getInstance();\n  calendar.add(Calendar.DAY_OF_MONTH,-6);\n  return date.after(calendar.getTime());\n}\n"}
{"nl": "Create an <code>unsigned byte</code>", "code": "public static UByte ubyte(String value) throws NumberFormatException {\n  return value == null ? null : UByte.valueOf(value);\n}\n"}
{"nl": "Silently returns null if this is not a valid Label", "code": "@Nullable public static Label createIfValid(String label){\n  if (validate(label)) {\n    return new Label(label);\n  }\n  return null;\n}\n"}
{"nl": "write a long", "code": "public void writeLong(long a) throws IOException {\n  io.write((byte)(a >> 56));\n  io.write((byte)(a >> 48));\n  io.write((byte)(a >> 40));\n  io.write((byte)(a >> 32));\n  io.write((byte)(a >> 24));\n  io.write((byte)(a >> 16));\n  io.write((byte)(a >> 8));\n  io.write((byte)(a));\n}\n"}
{"nl": "Set album ids", "code": "public VideoRemoveFromAlbumQuery albumIds(Integer... value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "Creates a new instance of INSECTDocumentGraph", "code": "public DocumentNGramGaussNormGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  CorrelationWindow=iCorrelationWindow;\n  InitGraphs();\n}\n"}
{"nl": "Signals that the user has long clicked inside of the target", "code": "public void onTargetLongClick(TapTargetView view){\n  onTargetClick(view);\n}\n"}
{"nl": "Writes elements of the resultMap to output file, one line for each element, where each line is a string representation of the corresponding QueryResponseJSON object", "code": "public static void writeResultFile(String filename,Map<String,List<QueryResponseJSON>> resultMap) throws IOException {\n  try (BufferedWriter bw=new BufferedWriter(new FileWriter(new File(filename)))){\n    for (    Entry<String,List<QueryResponseJSON>> entry : resultMap.entrySet()) {\n      for (      QueryResponseJSON hitJSON : entry.getValue()) {\n        bw.write(hitJSON.getJSONString());\n        bw.newLine();\n      }\n    }\n  }\n }\n"}
{"nl": "Create read track", "code": "public TrackReads(String bam,GenomicCoords gc,int maxReadStack) throws IOException {\n  if (!Utils.bamHasIndex(bam)) {\n    System.err.println(\"\\nAlignment file \" + bam + \" has no index.\\n\");\n    throw new RuntimeException();\n  }\n  this.setFilename(bam);\n  this.setGc(gc);\n  this.maxReadStack=maxReadStack;\n  this.update();\n}\n"}
{"nl": "Poll owner id", "code": "protected PollsEditQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "upload file to storage server (by file buff, slave file mode)", "code": "public String[] upload_file(String group_name,String master_filename,String prefix_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  if ((group_name == null || group_name.length() == 0) || (master_filename == null || master_filename.length() == 0) || (prefix_name == null)) {\n    throw new MyException(\"invalid arguement\");\n  }\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,file_buff.length,new UploadBuff(file_buff,0,file_buff.length),meta_list);\n}\n"}
{"nl": "if the given key(s) is present in the map, create a long switch (--switch) with the same name as the key", "code": "public CommandBuilder withLongSwitchIfPresent(Map<String,Object> properties,String... keys){\n  withLongSwitchIfPresent(properties,UnaryOperator.identity(),keys);\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AppsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"apps.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Disables all checks done by the Quality Checker", "code": "public void disableAllChecks(){\n  super.reset();\n  setLeadingWS(false);\n  setTrailingWS(false);\n  setEmptyTarget(false);\n  setEmptySource(false);\n  setTargetSameAsSource(false);\n  setTargetSameAsSourceForSameLanguage(false);\n  setTargetSameAsSourceWithCodes(false);\n  setCodeDifference(false);\n  setGuessOpenClose(false);\n  setCheckXliffSchema(false);\n  setCheckPatterns(false);\n  setCheckWithLT(false);\n  setTranslateLTMsg(false);\n  setLtBilingualMode(false);\n  setDoubledWord(false);\n  setCorruptedCharacters(false);\n  setCheckMaxCharLength(false);\n  setCheckMinCharLength(false);\n  setCheckStorageSize(false);\n  setCheckAbsoluteMaxCharLength(false);\n  setCheckAllowedCharacters(false);\n  setCheckCharacters(false);\n  setCheckTerms(false);\n  setStringMode(false);\n  setBetweenCodes(false);\n  setCheckBlacklist(false);\n}\n"}
{"nl": "Flatten the given string so it contains no more line breaks", "code": "private String flattenComment(String string){\n  StringBuffer buffer=new StringBuffer(string.length() + 20);\n  boolean skipAdjacentLineSeparator=true;\n  for (int i=0; i < string.length(); i++) {\n    char c=string.charAt(i);\n    if (c == '\\r' || c == '\\n') {\n      if (!skipAdjacentLineSeparator)       buffer.append(Policy.bind(\"separator\"));\n      skipAdjacentLineSeparator=true;\n    }\n else {\n      buffer.append(c);\n      skipAdjacentLineSeparator=false;\n    }\n  }\n  return buffer.toString();\n}\n"}
{"nl": "Parse the first byte of a vint/vlong to determine the number of bytes", "code": "public static int decodeVIntSize(byte value){\n  if (value >= -112) {\n    return 1;\n  }\n else   if (value < -120) {\n    return -119 - value;\n  }\n  return -111 - value;\n}\n"}
{"nl": "Accumulate the label from the path", "code": "protected void accumulateLabel(String path){\n  String name=getLabel(path);\n  if (!labels.contains(name))   labels.add(name);\n}\n"}
{"nl": "Creates the default cumulative probability distribution test expected values", "code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0,1};\n}\n"}
{"nl": "Sets the expression", "code": "public Builder expression(final String expression){\n  this.expression=expression;\n  return this;\n}\n"}
{"nl": "Creates a new instance of DocumentWordDistroGraph", "code": "public DocumentWordDistroGraph(){\n  MinSize=1;\n  MaxSize=2;\n  CorrelationWindow=3;\n}\n"}
{"nl": "Display the authenticated pilot's profile", "code": "public static void showProfile(Activity activity,String pilotId,@Nullable HashMap<String,String> extras){\n  if ((pilotId == null || pilotId.isEmpty()) && AirMap.hasValidAuthenticatedUser()) {\n    pilotId=AirMap.getUserId();\n  }\n  Intent intent=new Intent(activity,ProfileActivity.class);\n  intent.putExtra(ProfileActivity.ARG_PILOT_ID,pilotId);\n  if (extras != null) {\n    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);\n  }\n  activity.startActivity(intent);\n}\n"}
{"nl": "Item identifier", "code": "protected MarketAddToAlbumQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "Quantize an array of floats over the 16bits signed short range", "code": "public static short[] quantize(float[] f,float fMin,float fRange){\n  int len=f.length;\n  short[] ret=new short[len];\n  for (int i=0; i < len; i++)   ret[i]=quantize(f[i],fMin,fRange);\n  return (ret);\n}\n"}
{"nl": "Spawn Helpers in Range", "code": "protected void spawnHelpers(int npcId,int count,int distance){\n  if (!isAlreadyDead()) {\n    for (int i=0; i < count; i++) {\n      SpawnTemplate summon=null;\n      summon=rndSpawnInRange(npcId,distance);\n      VisibleObject npc=SpawnEngine.spawnObject(summon,getPosition().getInstanceId());\n      PacketSendUtility.broadcastPacket(getOwner(),new SM_NPC_INFO((Npc)npc,\"\"));\nsynchronized (spawnedNpc) {\n        spawnedNpc.add(npc.getObjectId());\n      }\n    }\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public OverlayBundle(String[] baseNames,Locale locale){\n  this.baseNames=baseNames;\n  this.locale=locale;\n  this.bundles=new ResourceBundle[baseNames.length];\n}\n"}
{"nl": "Creates a LineString instance from the specified points", "code": "public static LineString lineString(Collection<Point> points){\n  return lineString(points.toArray(new Point[points.size()]));\n}\n"}
{"nl": "Display the log the message in the progress monitor and increase the progress by 1", "code": "public void onNotify(File path,SVNNodeKind kind){\n  this.path=path;\n  if (monitor != null) {\n    monitor.worked(1);\n    subTask();\n  }\n}\n"}
{"nl": "release SLHolder for this scan", "code": "public void releaseScan() throws SAException {\n  if (_curValueList != null) {\n    _curValueList.releaseScan();\n    _curValueList=null;\n  }\n}\n"}
{"nl": "pack header by FastDFS transfer protocol", "code": "public static byte[] packHeader(byte cmd,long pkg_len,byte errno) throws UnsupportedEncodingException {\n  byte[] header;\n  byte[] hex_len;\n  header=new byte[FDFS_PROTO_PKG_LEN_SIZE + 2];\n  Arrays.fill(header,(byte)0);\n  hex_len=ProtoCommon.long2buff(pkg_len);\n  System.arraycopy(hex_len,0,header,0,hex_len.length);\n  header[PROTO_HEADER_CMD_INDEX]=cmd;\n  header[PROTO_HEADER_STATUS_INDEX]=errno;\n  return header;\n}\n"}
{"nl": "Create a daemon thread", "code": "public Requestor(String[] groups,int port,boolean delayFlag) throws IOException {\n  super(\"GS-multicast-discovery-request\");\n  setDaemon(true);\n  sock=new MulticastSocket(Constants.getDiscoveryPort());\n  sock.setTimeToLive(multicastRequestConstraints.getMulticastTimeToLive(Constants.getTtl()));\n  responsePort=port;\n  this.groups=groups == null ? new String[0] : groups;\n  this.delayFlag=delayFlag;\n}\n"}
{"nl": "Binary log: finds the smallest power k such that 2^k>=n", "code": "public static int binaryLogUp(long n_){\n  int k=0;\n  while ((1L << k) < n_)   k++;\n  return k;\n}\n"}
{"nl": "Apply all effect templates", "code": "public void applyEffect(){\n  if (isFearEffect()) {\n    if (getEffected().isInState(CreatureState.GLIDING)) {\n      if (getEffected() instanceof Player) {\n        if (!((Player)getEffected()).isInFlyingMode()) {\n          ((Player)getEffected()).getFlyController().onStopGliding(true);\n          return;\n        }\n      }\n    }\n  }\n  if (effectHate != 0) {\n    if (getEffected() instanceof Npc && !isDelayedDamage() && !isPetOrder()&& !isSummoning()) {\n      getEffected().getAggroList().addHate(effector,1);\n    }\n    effector.getController().broadcastHate(effectHate);\n  }\n  if (skillTemplate.getEffects() == null || successEffects.isEmpty()) {\n    return;\n  }\n  for (  EffectTemplate template : successEffects.values()) {\n    if (getEffected() != null) {\n      if (getEffected().getLifeStats().isAlreadyDead() && !skillTemplate.hasResurrectEffect()) {\n        continue;\n      }\n    }\n    template.applyEffect(this);\n    template.startSubEffect(this);\n  }\n}\n"}
{"nl": "Sends this packet to all players on the server", "code": "public void toAll(){\n  toAll(OpenModLoader.getSidedHandler().getServer().getPlayerList().getPlayerList());\n}\n"}
{"nl": "Total variance in target attribute", "code": "public static double ssTotal(double[] residuals,double[] targetAttribute){\n  return ssReg(residuals,targetAttribute) + ssError(residuals,targetAttribute);\n}\n"}
{"nl": "Construct an empty ByteArray", "code": "public ByteArray(){\n}\n"}
{"nl": "Inserts a slot on a specified position", "code": "private Slot insertSlotAt(final int position,@NonNull final Slot slot){\n  if (position < 0 || size < position) {\n    throw new IndexOutOfBoundsException(\"New slot position should be inside the mask. Or on the tail (position = size)\");\n  }\n  final Slot toInsert=new Slot(slot);\n  Slot currentSlot=getSlot(position);\n  Slot leftNeighbour;\n  Slot rightNeighbour=null;\n  if (currentSlot == null) {\n    leftNeighbour=lastSlot;\n  }\n else {\n    leftNeighbour=currentSlot.getPrevSlot();\n    rightNeighbour=currentSlot;\n  }\n  toInsert.setNextSlot(rightNeighbour);\n  toInsert.setPrevSlot(leftNeighbour);\n  if (rightNeighbour != null) {\n    rightNeighbour.setPrevSlot(toInsert);\n  }\n  if (leftNeighbour != null) {\n    leftNeighbour.setNextSlot(toInsert);\n  }\n  if (position == 0) {\n    firstSlot=toInsert;\n  }\n else   if (position == size) {\n    lastSlot=toInsert;\n  }\n  size++;\n  return toInsert;\n}\n"}
{"nl": "Creates a rank ordered priority list", "code": "@PUT @Path(\"/{applicationName}/priorities\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Create global priority list for an application\",notes=\"Experiments can only be placed in a priority list in DRAFT, RUNNING, and PAUSED states.\") @Timed public Response createPriorities(@PathParam(\"applicationName\") @ApiParam(value=\"Application Name\") final Application.Name applicationName,@ApiParam(required=true,defaultValue=DEFAULT_MODEXP) final ExperimentIDList experimentIDList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  authorization.checkUserPermissions(authorization.getUser(authorizationHeader),applicationName,UPDATE);\n  priorities.createPriorities(applicationName,experimentIDList,true);\n  return httpHeader.headers(NO_CONTENT).build();\n}\n"}
{"nl": "disable the named labels", "code": "public void disableLabels(Collection<String> labels){\n  disabledLabels.addAll(labels);\n}\n"}
{"nl": "Create picture attributes", "code": "public static PictureAttributes createPictureAttributes(){\n  return new PictureAttributes();\n}\n"}
{"nl": "Sets an event listener that uses method name as an adapter", "code": "public SimplePollingContainerConfigurer eventListenerMethod(Object eventListener,String methodName){\n  MethodEventListenerAdapter methodEventListenerAdapter=new MethodEventListenerAdapter();\n  methodEventListenerAdapter.setDelegate(eventListener);\n  methodEventListenerAdapter.setMethodName(methodName);\n  methodEventListenerAdapter.afterPropertiesSet();\n  pollingEventListenerContainer.setEventListener(methodEventListenerAdapter);\n  return this;\n}\n"}
{"nl": "This method will handle unbanning a character", "code": "public static void unbanChar(int playerId){\n  DAOManager.getDAO(PlayerPunishmentsDAO.class).unpunishPlayer(playerId,PunishmentType.CHARBAN);\n}\n"}
{"nl": "Called whenever the OSGi framework starts our bundle", "code": "@Override public void start(BundleContext bc) throws Exception {\n  context=bc;\n  logger.debug(\"Z-Wave binding started. Version {}\",ZWaveActivator.getVersion());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureGetTransactionsHistoryQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.getTransactionsHistory\",Utils.buildParametrizedType(List.class,Transaction.class));\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n"}
{"nl": "Will check weather or not calling pkg is authorized to talk with this provider", "code": "private void checkCallingPackage() throws SecurityException {\n  String callingPkg=null;\n  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {\n    callingPkg=getCallingPackage();\n  }\n  if (\"org.kustom.wallpaper\".equals(callingPkg))   return;\n  if (\"org.kustom.widget\".equals(callingPkg))   return;\n  throw new SecurityException(\"Unauthorized\");\n}\n"}
{"nl": "Klatt Rule 7: Unstressed shortening", "code": "private int klattRule7(Element segment){\n  Element token=getToken(segment);\n  Element syllable=getSyllable(segment);\n  int stress=getStress(syllable);\n  if (stress == 2 || stress == 0) {\n    if (isInOnset(segment)) {\n      if (isLiquid(segment) || isGlide(segment)) {\n        return (getPropertyAsInteger(\"rule7.onset.liquids\"));\n      }\n else {\n        return (getPropertyAsInteger(\"rule7.others\"));\n      }\n    }\n else     if (isInNucleus(segment)) {\n      if (isWordMedial(syllable)) {\n        return (getPropertyAsInteger(\"rule7.nucleus.medial\"));\n      }\n else {\n        return (getPropertyAsInteger(\"rule7.nucleus.others\"));\n      }\n    }\n else {\n      return (getPropertyAsInteger(\"rule7.others\"));\n    }\n  }\n  return 100;\n}\n"}
{"nl": "fill the popup menu for the table", "code": "private void fillTableMenu(IMenuManager manager){\n  manager.add(getRefreshAction());\n  Action action=getAddPropertyAction();\n  try {\n    if (resource != null)     action.setEnabled(resource.isManaged());\n else     action.setEnabled(false);\n  }\n catch (  SVNException e) {\n    action.setEnabled(false);\n  }\n  manager.add(action);\n  manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));\n}\n"}
{"nl": "Set your own onPageChangeListener", "code": "public void addOnPageChangeListener(ViewPager.OnPageChangeListener onPageChangeListener){\n  this.onPageChangeListener=onPageChangeListener;\n}\n"}
{"nl": "rescan a specific classification", "code": "public void updateClassification(ClassificationType classificationType,Map<Integer,ListOfLongs> classId2locations) throws IOException {\n  getClassificationsFooter().setStart(classificationType,io.getPosition());\n  getClassificationsFooter().setDo(classificationType);\n  final ClassificationBlockRMA3 classificationBlock=new ClassificationBlockRMA3(classificationType);\n  for (  Integer classId : classId2locations.keySet()) {\n    classificationBlock.setSum(classId,classId2locations.get(classId).size());\n  }\n  classificationBlock.write(io,classId2locations);\n  getClassificationsFooter().setEnd(classificationType,io.getPosition());\n}\n"}
{"nl": "Use min priority in thread execution", "code": "public EventBuilder minPriority(){\n  this.event.setPriority(Thread.MIN_PRIORITY);\n  return this;\n}\n"}
{"nl": "Shows metrics for this audio player", "code": "public void showMetrics(){\n}\n"}
{"nl": "make a SAM line", "code": "private String makeSAM(String queryName,String refName,float bitScore,float expect,float percentIdentity,int queryStart,int referenceStart,int referenceEnd,String line) throws IOException {\n  final StringBuilder buffer=new StringBuilder();\n  buffer.append(queryName).append(\"\\t\");\n  boolean reverseComplemented=(referenceStart > referenceEnd);\n  if (reverseComplemented) {\n    buffer.append(0x10);\n  }\n else   buffer.append(0);\n  buffer.append(\"\\t\");\n  buffer.append(refName).append(\"\\t\");\n  if (reverseComplemented)   buffer.append(referenceEnd).append(\"\\t\");\n else   buffer.append(referenceStart).append(\"\\t\");\n  buffer.append(\"255\\t\");\n  buffer.append(\"*\\t\");\n  buffer.append(\"*\\t\");\n  buffer.append(\"0\\t\");\n  buffer.append(\"0\\t\");\n  buffer.append(\"*\\t\");\n  buffer.append(\"*\\t\");\n  buffer.append(String.format(\"AS:i:%d\\t\",(int)Math.round(bitScore)));\n  buffer.append(String.format(\"ZE:f:%g\\t\",expect));\n  buffer.append(String.format(\"ZI:i:%d\\t\",(int)Math.round(percentIdentity)));\n  buffer.append(String.format(\"ZS:i:%s\\t\",queryStart));\n  buffer.append(String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' ')));\n  return buffer.toString();\n}\n"}
{"nl": "Set start comment id", "code": "public WallGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n"}
{"nl": "Creates a new instance of NormalizerAdapter", "code": "public NormalizerAdapter(){\n}\n"}
{"nl": "set a label 2 label map", "code": "public void put(String label,String newLabel){\n  label2label.put(label,newLabel);\n}\n"}
{"nl": "Dismiss dialog safely", "code": "public static void dismissDialogSafely(Dialog dialog){\n  if (dialog != null && dialog.isShowing()) {\n    dialog.dismiss();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsUpdateCampaignsQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.updateCampaigns\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n"}
{"nl": "This method checks all restrictions for appointing brigade general", "code": "private boolean canAppointBrigadeGeneral(Player activePlayer,Player targetPlayer){\n  Legion legion=activePlayer.getLegion();\n  if (!isBrigadeGeneral(activePlayer)) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MEMBER_RANK_DONT_HAVE_RIGHT);\n    return false;\n  }\n  if (isSelf(activePlayer,targetPlayer.getObjectId())) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MASTER_ERROR_SELF);\n    return false;\n  }\n else   if (!legion.isMember(targetPlayer.getObjectId())) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Called before object is placed into world", "code": "public void onBeforeSpawn(){\n}\n"}
{"nl": "Set a specific Pokeball to use", "code": "public CatchOptions usePokeball(Pokeball pokeBall){\n  this.pokeBall=pokeBall;\n  return this;\n}\n"}
{"nl": "Writes the Cart to the given DataOut in Wagon Format", "code": "private void toWagonFormat(IntAndFloatArrayLeafNode node,DataOutputStream out,String extension,PrintWriter pw) throws IOException {\n  StringBuilder sb=new StringBuilder();\n  int data[]=node.getIntData();\n  float floats[]=node.getFloatData();\n  sb.append(\"(((\");\n  for (int i=0; i < data.length; i++) {\n    sb.append(\"(\" + data[i] + \" \"+ floats[i]+ \")\");\n    if (i + 1 != data.length) {\n      sb.append(\" \");\n    }\n  }\n  sb.append(\") 0))\" + extension);\n  if (out != null) {\n    writeStringToOutput(sb.toString(),out);\n  }\n else {\n  }\n  if (pw != null) {\n    pw.println(sb.toString());\n  }\n}\n"}
{"nl": "get the next element in scan order", "code": "public IStoredListIterator<T> next(IStoredListIterator<T> slh){\n  IStoredListIterator<T> slnext=nextPos((StoredListIterator<T>)slh);\n  if (slnext == null)   slh.release();\n  return slnext;\n}\n"}
{"nl": "erase the block (for reuse)", "code": "public void clear(){\n  uid=0;\n  bitScore=0;\n  percentIdentity=0;\n  refSeqId=null;\n  expected=0;\n  length=0;\n  ignore=false;\n  text=null;\n  cName2id.clear();\n}\n"}
{"nl": "Set guid", "code": "public WallPostQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n"}
{"nl": "store an element", "code": "public IObjectInfo<T> add(T subject){\n  return store_impl(subject);\n}\n"}
{"nl": "Check if the scan is not present in the user folder", "code": "public boolean checkIfScanIsNotPresentForUser(final String userId,final String scanId) throws UnsupportedEncodingException, ParserConfigurationException, IOException, SAXException, DASTProxyException, XPathExpressionException {\n  LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...1\");\n  boolean retValue=true;\n  try {\n    final XPathFactory factory=XPathFactory.newInstance();\n    final XPath xpath=factory.newXPath();\n    LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...2\");\n    xpath.setNamespaceContext(_nsContext);\n    Document response=sendRESTRequestToASE(AppScanConstants.APPSCAN_BASE_URL + \"folders/\" + userId+ \"/folderitems\",\"\");\n    LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...3...response...=\" + response);\n    LOGGER.debug(\"Check if scan exists in the system. \");\n    checkForError(response,null);\n    final XPathExpression expr=xpath.compile(\"//ase:folder-items/ase:content-scan-job[contains(ase:id,'\" + scanId + \"')]/ase:id/text()\");\n    LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...4....expr=\" + expr);\n    final String id=(String)expr.evaluate(response,XPathConstants.STRING);\n    LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...5....id=\" + id);\n    if (id != null && !id.isEmpty()) {\n      LOGGER.debug(\"Inside checkIfScanIsNotPresentForUser...6\");\n      retValue=false;\n    }\n  }\n catch (  ConnectException ce) {\n    LOGGER.error(\"Failed in checking if the scan is present for user...userId=\" + userId + \" scanId=\"+ scanId);\n    LOGGER.error(ce);\n  }\n  return retValue;\n}\n"}
{"nl": "Remove any expired nonces from our table", "code": "private void cleanup(){\n  Iterator<Entry<Byte,Nonce>> iter=table.entrySet().iterator();\n  while (iter.hasNext()) {\n    Nonce nonce=iter.next().getValue();\n    if (nonce.getTimer() != null) {\n      long removeAt=nonce.getTimer().getExpiresAt() + 10000;\n      if (System.currentTimeMillis() > removeAt) {\n        logger.warn(\"NODE {}: Expiring nonce with id={}\",node.getNodeId(),nonce.getNonceId());\n        iter.remove();\n        expiredNonceIdList.add(nonce.getNonceId());\n      }\n    }\n  }\n}\n"}
{"nl": "perform an update operation- make it atomic NOTE- returnonlyUID is ignored", "code": "public ExtendedAnswerHolder update(IEntryPacket updated_entry,Transaction txn,long lease,long timeout,SpaceContext sc,boolean fromReplication,boolean origin,boolean newRouter,int modifiers) throws UnusableEntryException, UnknownTypeException, TransactionException, RemoteException, InterruptedException {\n  if (Modifiers.contains(modifiers,Modifiers.EXPLAIN_PLAN)) {\n    throw new UnsupportedOperationException(\"Sql explain plan is not supported for update operation\");\n  }\n  return update(updated_entry,txn,lease,timeout,sc,fromReplication,origin,newRouter,modifiers,null);\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  searchManager.getFindDialogAsToolBar().close();\n  frame.setVisible(false);\n  doc.getSampleSelection().removeSampleSelectionListener(selectionListener);\n  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());\n  dir.removeViewer(this);\n  frame.dispose();\n}\n"}
{"nl": "Find the index at which a key should be inserted", "code": "private int findInsertionIndex(final int key){\n  return findInsertionIndex(keys,states,key,mask);\n}\n"}
{"nl": "you must install tinker first!!", "code": "public void install(Intent intentResult,Class<? extends AbstractResultService> serviceClass,AbstractPatch upgradePatch,AbstractPatch repairPatch){\n  sInstalled=true;\n  AbstractResultService.setResultServiceClass(serviceClass);\n  TinkerPatchService.setPatchProcessor(upgradePatch,repairPatch);\n  if (!isTinkerEnabled()) {\n    TinkerLog.e(TAG,\"tinker is disabled\");\n    return;\n  }\n  if (intentResult == null) {\n    throw new TinkerRuntimeException(\"intentResult must not be null.\");\n  }\n  tinkerLoadResult=new TinkerLoadResult();\n  tinkerLoadResult.parseTinkerResult(getContext(),intentResult);\n  loadReporter.onLoadResult(patchDirectory,tinkerLoadResult.loadCode,tinkerLoadResult.costTime);\n  if (!loaded) {\n    TinkerLog.w(TAG,\"tinker load fail!\");\n  }\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public MessagesGetChatUsersQueryWithChatIds nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "For adopt only", "code": "public SM_PET(int actionId,PetCommonData commonData){\n  this.actionId=actionId;\n  this.commonData=commonData;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQueryWithUserIds(VkApiClient client,UserActor actor,String groupId,List<Integer> userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatus.class));\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userIds(userIds);\n}\n"}
{"nl": "Set app id", "code": "public AppsSendRequestQuery appId(Integer value){\n  return unsafeParam(\"app_id\",value);\n}\n"}
{"nl": "Returns the sum of a sequence of numbers in a specified range", "code": "public static int sumFromTo(int iStart,int iEnd){\n  int iRes=0;\n  for (int iCnt=iStart; iCnt <= iEnd; iRes+=iCnt++)   ;\n  return iRes;\n}\n"}
{"nl": "compute top-level names", "code": "protected ArrayList computeNames(AbstractTextEditor editor){\n  IJavaElement jElem=getJavaElement(editor);\n  ArrayList names=new ArrayList();\n  if (jElem instanceof ICompilationUnit) {\n    ICompilationUnit cu=(ICompilationUnit)jElem;\n    return getNames(cu);\n  }\n else {\n    return names;\n  }\n}\n"}
{"nl": "Set start comment id", "code": "public PhotosGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n"}
{"nl": "Executes an inner query", "code": "public void execute(InnerQueryNode innerQueryNode,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {\n  SelectQuery innerQuery=innerQueryNode.getInnerQuery();\n  innerQuery.validateQuery(space);\n  innerQuery.setPreparedValues(query.getPreparedValues());\n  innerQuery.setRouting(query.getRouting());\n  if (!innerQuery.isPrepared() && !innerQuery.containsSubQueries())   innerQuery.build();\n  ResponsePacket innerResponse=innerQuery.executeOnSpace(space,txn);\n  innerQueryNode.setResults(innerResponse.getResultEntry());\n}\n"}
{"nl": "throws ClosedChannelException if remote peer socket closed", "code": "private void throwCloseConnection() throws ClosedChannelException {\n  ClosedChannelException closeEx=new ClosedChannelException();\n  closeEx.initCause(new IOException(\"Connection has been closed by peer\"));\n  throw closeEx;\n}\n"}
{"nl": "Updates the cache for the given key using the value from the source", "code": "public void updateWithItemHandler(String key){\n  remove(key);\n  put(key,itemHandler.get(key));\n}\n"}
{"nl": "upload file to storage server (by file buff)", "code": "public String[] upload_file(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE,group_name,null,null,file_ext_name,file_buff.length,new UploadBuff(file_buff,0,file_buff.length),meta_list);\n}\n"}
{"nl": "Simple demonstration of how Principal info can be accessed", "code": "private void printGrantedAuthorities(final Auth0JWTToken principal){\n  for (  final GrantedAuthority grantedAuthority : principal.getAuthorities()) {\n    final String authority=grantedAuthority.getAuthority();\n    logger.info(authority);\n  }\n}\n"}
{"nl": "Adds paging to the query", "code": "public void addPaging(Integer pageSize,Integer pageIndex){\n  ParamValidationUtil.validateParamNotNull(pageSize,\"pageSize\");\n  ParamValidationUtil.validateParamNotNull(pageIndex,\"pageIndex\");\n  int offset=pageIndex * pageSize;\n  this.offset=offset;\n  this.limit=pageSize;\n  this.usePaging=true;\n}\n"}
{"nl": "Is update header visible?", "code": "protected final boolean isUpdateHeaderVisible(){\n  return mUpdateHeader == getChildAt(0);\n}\n"}
{"nl": "Refresh completely zone irrespective of the current zone", "code": "public void refreshZoneImpl(){\n  getOwner().revalidateZones();\n}\n"}
{"nl": "Return an additional \"likes\" field", "code": "public PhotosGetUserPhotosQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Sort a list of integers and remove duplicates", "code": "static int[] sortUnique(int[] list){\n  Arrays.sort(list);\n  int count=1;\n  for (int i=1; i < list.length; i++) {\n    if (list[i] != list[i - 1]) {\n      count++;\n    }\n  }\n  int[] ret=new int[count];\n  count=1;\n  ret[0]=list[0];\n  for (int i=1; i < list.length; i++) {\n    if (list[i] != list[i - 1]) {\n      ret[count++]=list[i];\n    }\n  }\n  return ret;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set contract-gaps=\");\n  boolean collapse=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().getSelectedBlock().clear();\n  viewer.setContractGaps(collapse);\n}\n"}
{"nl": "Called when a button is clicked (the button in the layout file attaches to this method with the android:onClick attribute)", "code": "public void onButtonClick(View v){\n  if (mBound) {\n    int num=mService.getRandomNumber();\n    Toast.makeText(this,\"number: \" + num,Toast.LENGTH_SHORT).show();\n  }\n}\n"}
{"nl": "****************************** COMBINING QUERIES", "code": "public CombiningCursor queryCombinings(){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_COMBINING;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new CombiningCursor(wrapJoinHelper(builderCursor(),qh));\n}\n"}
{"nl": "This method will add a new dictionary chunk to existing list of dictionary chunks", "code": "@Override public void addDictionaryChunk(List<byte[]> newDictionaryChunk){\n  if (dictionaryChunks.size() > 0) {\n    List<byte[]> lastDictionaryChunk=dictionaryChunks.get(dictionaryChunks.size() - 1);\n    int dictionaryOneChunkSize=CarbonUtil.getDictionaryChunkSize();\n    int differenceInLastDictionaryAndOneChunkSize=dictionaryOneChunkSize - lastDictionaryChunk.size();\n    if (differenceInLastDictionaryAndOneChunkSize > 0) {\n      if (differenceInLastDictionaryAndOneChunkSize >= newDictionaryChunk.size()) {\n        lastDictionaryChunk.addAll(newDictionaryChunk);\n      }\n else {\n        List<byte[]> subListOfNewDictionaryChunk=newDictionaryChunk.subList(0,differenceInLastDictionaryAndOneChunkSize);\n        lastDictionaryChunk.addAll(subListOfNewDictionaryChunk);\n        List<byte[]> remainingNewDictionaryChunk=newDictionaryChunk.subList(differenceInLastDictionaryAndOneChunkSize,newDictionaryChunk.size());\n        dictionaryChunks.add(remainingNewDictionaryChunk);\n      }\n    }\n else {\n      dictionaryChunks.add(newDictionaryChunk);\n    }\n  }\n else {\n    dictionaryChunks.add(newDictionaryChunk);\n  }\n}\n"}
{"nl": "Cancel current skill and remove cooldown", "code": "public void cancelCurrentSkill(){\n  if (getOwner().getCastingSkill() == null) {\n    return;\n  }\n  Creature creature=getOwner();\n  Skill castingSkill=creature.getCastingSkill();\n  castingSkill.cancelCast();\n  creature.removeSkillCoolDown(castingSkill.getSkillTemplate().getCooldownId());\n  creature.setCasting(null);\n  PacketSendUtility.broadcastPacketAndReceive(creature,new SM_SKILL_CANCEL(creature,castingSkill.getSkillTemplate().getSkillId()));\n  if (getOwner().getAi2() instanceof NpcAI2) {\n    NpcAI2 npcAI=(NpcAI2)getOwner().getAi2();\n    npcAI.setSubStateIfNot(AISubState.NONE);\n    npcAI.onGeneralEvent(AIEventType.ATTACK_COMPLETE);\n    if (creature.getSkillNumber() > 0) {\n      creature.setSkillNumber(creature.getSkillNumber() - 1);\n    }\n  }\n}\n"}
{"nl": "Constructs a new SVNChangeSetCollector used to collect incoming change sets", "code": "public SVNChangeSetCollector(ISynchronizePageConfiguration configuration){\n  super(configuration);\n}\n"}
{"nl": "Draw resize handle selection", "code": "public static void drawResizeHandleSelection(ViewTransform transform,Graphics2D g,ResizeHandle selectedResizeHandle){\n  Rectangle bounds=selectedResizeHandle.getSwingBounds(transform);\n  g.drawRect(bounds.x,bounds.y,bounds.width,bounds.height);\n}\n"}
{"nl": "applies the top percent filter to a set of active matches", "code": "public static void applyTopPercentFilter(double topPercent,double bestScore,float minPercentIdentity,IReadBlock readBlock,BitSet activeMatches){\n  if (topPercent > 0 && topPercent < 100) {\n    if (bestScore == 0) {\n      for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {\n        final IMatchBlock matchBlock=readBlock.getMatchBlock(i);\n        if (matchBlock.getPercentIdentity() >= minPercentIdentity) {\n          bestScore=Math.max(bestScore,matchBlock.getBitScore());\n        }\n      }\n    }\n    final double threshold=(1 - topPercent / 100.0) * bestScore;\n    for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {\n      final IMatchBlock matchBlock=readBlock.getMatchBlock(i);\n      if (matchBlock.getBitScore() < threshold && matchBlock.getPercentIdentity() >= minPercentIdentity)       activeMatches.set(i,false);\n    }\n  }\n}\n"}
{"nl": "Schedule a render", "code": "public void requestRender(){\n  ourLock.lock();\n  ConstraintUtilities.renderModel(this);\n  ourLock.unlock();\n}\n"}
{"nl": "is the current object set?", "code": "public boolean isCurrentSet(){\n  return currentTaxonIterator != null && currentTaxonId != null;\n}\n"}
{"nl": "Parse any part of a Graql query", "code": "private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,String queryString){\n  GraqlLexer lexer=getLexer(queryString);\n  GraqlErrorListener errorListener=new GraqlErrorListener(queryString);\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(errorListener);\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  return parseQueryFragment(parseRule,visit,errorListener,tokens);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.CHISSQUARE + \";\");\n}\n"}
{"nl": "Npc starts dancing iu 1", "code": "public static final void emoteStartDancing1(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,134,0));\n}\n"}
{"nl": "Sets the maximum dimension for thumbnails", "code": "public ImageFixture withThumbnailSize(int size){\n  myThumbnailSize=size;\n  return this;\n}\n"}
{"nl": "Clamps the value to a discrete value", "code": "public static int clamp(int value,int min,int max){\n  if (value < min)   value=min;\n  if (value > max)   value=max;\n  return value;\n}\n"}
{"nl": "This method is called whenever caller wants to reduce creatures's MP", "code": "public int reduceFp(int value){\n  fpLock.lock();\n  try {\n    int newFp=this.currentFp - value;\n    if (newFp < 0) {\n      newFp=0;\n    }\n    this.currentFp=newFp;\n  }\n  finally {\n    fpLock.unlock();\n  }\n  onReduceFp();\n  return currentFp;\n}\n"}
{"nl": "Call if user manual cancel picking or taking content", "code": "@Override public void onCanceled(){\n}\n"}
{"nl": "This method checks all restrictions for legion creation", "code": "private boolean canCreateLegion(Player activePlayer,String legionName){\n  if (!isValidName(legionName)) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATE_INVALID_GUILD_NAME);\n    return false;\n  }\n else   if (!isFreeName(legionName)) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATE_SAME_GUILD_EXIST);\n    return false;\n  }\n else   if (activePlayer.isLegionMember()) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATE_ALREADY_BELONGS_TO_GUILD);\n    return false;\n  }\n else   if (activePlayer.getInventory().getKinah() < LegionConfig.LEGION_CREATE_REQUIRED_KINAH) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CREATE_NOT_ENOUGH_MONEY);\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "whether the user has been locked", "code": "public boolean isLocked(){\n  return getInt(\"locked\") > 0;\n}\n"}
{"nl": "Group id to return invited users for", "code": "protected GroupsGetInvitedUsersQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n"}
{"nl": "Authentication logic", "code": "@Override public Authentication attemptAuthentication(HttpServletRequest request,HttpServletResponse response) throws AuthenticationException, IOException, ServletException {\n  boolean isLogin=StringUtils.getValidString(request.getRequestURI()).contains(USER_LOGIN);\n  if (isLogin) {\n    return new UsernamePasswordAuthenticationToken(null,null);\n  }\n  String header=request.getHeader(HEADER_AUTHORIZATION);\n  if (header == null || !header.startsWith(BEARER_PREFIX))   throw new JwtTokenMissingException(\"Invalid authentication\");\n  String authToken=header.substring(7);\n  JwtAuthenticationToken authRequest=new JwtAuthenticationToken(authToken);\n  return getAuthenticationManager().authenticate(authRequest);\n}\n"}
{"nl": "Register listener", "code": "public void registerListener(FCMListener fcmListener){\n  this.mFCMListener=fcmListener;\n}\n"}
{"nl": "Prints out the help message", "code": "private void printHelp(){\n  HelpFormatter formatter=new HelpFormatter();\n  formatter.setWidth(140);\n  formatter.printHelp(\"ResponderDriver\",cliOptions);\n}\n"}
{"nl": "Builds a new ControlAttributionOptions instance", "code": "public ControlAttributionOptions build(){\n  ControlAttributionOptions options=new ControlAttributionOptions();\n  options.position=this.position;\n  options.prefix=this.prefix;\n  return options;\n}\n"}
{"nl": "return a date string from milliseconds with a specific date format", "code": "public static String millisecondsToString(long milliseconds,SimpleDateFormat dateFormat){\n  return dateFormat.format(new Date(milliseconds));\n}\n"}
{"nl": "Creates a new instance of DefaultMovieInfoProvider", "code": "public DefaultMovieInfoProvider(String fileToSave){\n  this(MovieUtils.createMediaLocator(fileToSave));\n}\n"}
{"nl": "Executes the \"jimplify\" operation for a virtual invocation", "code": "protected void jimplifyVirtual(DexBody body){\n  SootMethodRef ref=getSootMethodRef();\n  if (ref.declaringClass().isInterface()) {\n    methodRef=null;\n    jimplifyInterface(body);\n    return;\n  }\n  List<Local> parameters=buildParameters(body,false);\n  invocation=Jimple.v().newVirtualInvokeExpr(parameters.get(0),ref,parameters.subList(1,parameters.size()));\n  body.setDanglingInstruction(this);\n}\n"}
{"nl": "Video IDs", "code": "public VideoGetQuery videos(List<String> value){\n  return unsafeParam(\"videos\",value);\n}\n"}
{"nl": "Get lower end of histogram range", "code": "public double min(){\n  return m_min;\n}\n"}
{"nl": "Does this class declare a method with the given subsignature?", "code": "public boolean declaresMethod(NumberedString subsignature){\n  checkLevel(SIGNATURES);\n  SootMethod ret=subSigToMethods.get(subsignature);\n  return ret != null;\n}\n"}
{"nl": "Set user id", "code": "public GroupsGetBannedQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsGetWallUploadServerQuery(VkApiClient client,Actor actor){\n  super(client,\"docs.getWallUploadServer\",GetWallUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Convert a sequence to a set of individual values (by treating each value in each sequence as a separate example)", "code": "public Builder convertFromSequence(){\n  actionList.add(new DataAction(new ConvertFromSequence()));\n  return this;\n}\n"}
{"nl": "Go to the next step", "code": "public void goToNextStep(){\n  goToStep(activeStep + 1,false);\n}\n"}
{"nl": "Updates the values of this <code>BufferObject</code> instance", "code": "private boolean invalidate(final TagQualityStatus pQuality,final String pDescription,final Timestamp pTimestamp){\n  if (pQuality == null) {\n    throw new IllegalArgumentException(\"invalidate(..) method called with null TagQualityStatus argument.\");\n  }\n  boolean retval=false;\n  if (this.timestamp.before(pTimestamp) || this.timestamp.equals(pTimestamp)) {\n    this.qualityCollection.add(pQuality);\n    this.qualityDescriptions.put(pQuality,pDescription);\n    this.timestamp=pTimestamp;\n    retval=true;\n  }\n  return retval;\n}\n"}
{"nl": "DELETE /rest/activiti/jobs/{jobId} -> delete job", "code": "@RequestMapping(value=\"/rest/activiti/jobs/{jobId}\",method=RequestMethod.DELETE,produces=\"application/json\") @ResponseStatus(value=HttpStatus.OK) public void deleteJob(@PathVariable String jobId) throws BadRequestException {\n  ServerConfig serverConfig=retrieveServerConfig();\n  try {\n    clientService.deleteJob(serverConfig,jobId);\n  }\n catch (  ActivitiServiceException e) {\n    throw new BadRequestException(e.getMessage());\n  }\n}\n"}
{"nl": "Creates the default inverse cumulative probability test input values", "code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0d,0.001d,0.010d,0.025d,0.050d,0.100d,0.999d,0.990d,0.975d,0.950d,0.900d,1d};\n}\n"}
{"nl": "Set a graph from which to get information", "code": "public SQLSchemaMigrator graph(MindmapsGraph graph){\n  this.graph=graph;\n  return this;\n}\n"}
{"nl": "Regenerates item count upon each call // TODO input parameters - based on attacker stats // TODO more precise calculations (non-linear)", "code": "public void calculateCount(){\n  count=Rnd.get(dropTemplate.getMinAmount(),dropTemplate.getMaxAmount());\n}\n"}
{"nl": "check if date has event or not, then", "code": "public void fetchEvents(String date){\n  boolean flag=false;\n  int pos=0;\n  for (int i=0; i < Singleton.getInstance().getEventManager().size(); i++) {\n    if (Singleton.getInstance().getEventManager().get(i).getDate().equalsIgnoreCase(date)) {\n      flag=true;\n      pos=i;\n    }\n  }\n  ArrayList<EventData> eventDataArrayList=new ArrayList();\n  if (flag) {\n    if (Singleton.getInstance().getEventManager().get(pos).getEventData() != null) {\n      eventDataArrayList=Singleton.getInstance().getEventManager().get(pos).getEventData();\n    }\n  }\n  if (mCustomCalendar != null)   mCustomCalendar.setDateSelectionData(eventDataArrayList);\n}\n"}
{"nl": "Specify the color resource for all text", "code": "public TapTarget textColor(@ColorRes int color){\n  this.titleTextColor=color;\n  this.descriptionTextColor=color;\n  return this;\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public MessagesGetChatUsersQueryWithChatIdsFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Convert the given Mary node tree into a CART with the leaves containing featureVectors", "code": "public FeatureVectorCART(MaryNode tree,FeatureArrayIndexer ffi){\n  featDef=ffi.getFeatureDefinition();\n  addDaughters(null,tree,ffi);\n  if (rootNode instanceof DecisionNode) {\n    ((DecisionNode)rootNode).countData();\n  }\n}\n"}
{"nl": "Forcefully make this space to be primary", "code": "public void forceMoveToPrimary() throws RemoteException {\n  if (getState() == State.ACTIVE)   return;\n  changeState(State.PENDING,State.ACTIVE,true);\n  notifyListenerOnActive(new ServiceItem(_electTemplate.getServiceID(),_electTemplate.getService(),null));\n}\n"}
{"nl": "Adds a new field to the SlickForm's fields collection", "code": "public SlickForm withField(FormField field){\n  this.formFields.add(field);\n  return this;\n}\n"}
{"nl": "should not be instantiated directly", "code": "private SkillEngine(){\n}\n"}
{"nl": "Returns a representation of all the object states that were in allowed states but do not match the state list state", "code": "@NotNull private static ImmutableSet<ImmutableMap<String,Boolean>> removeState(@NotNull StateListState state,@NotNull ImmutableSet<ImmutableMap<String,Boolean>> allowedStates){\n  ImmutableSet.Builder<ImmutableMap<String,Boolean>> remainingStates=ImmutableSet.builder();\n  Map<String,Boolean> stateAttributes=state.getAttributes();\n  for (  String attribute : stateAttributes.keySet()) {\n    for (    ImmutableMap<String,Boolean> allowedState : allowedStates) {\n      if (!allowedState.containsKey(attribute)) {\n        ImmutableMap.Builder<String,Boolean> newAllowedState=ImmutableMap.builder();\n        newAllowedState.putAll(allowedState).put(attribute,!stateAttributes.get(attribute));\n        remainingStates.add(newAllowedState.build());\n      }\n else       if (allowedState.get(attribute) != stateAttributes.get(attribute)) {\n        remainingStates.add(allowedState);\n      }\n    }\n  }\n  return remainingStates.build();\n}\n"}
{"nl": "give an attribute 2 series 2 values mapping for taxa, computes one for microbial attributes tree window", "code": "public void computeAttributes2Taxa2Values(Map<String,Map<String,Number>> taxa2dataset2value,Map<String,Map<String,Number>> attribute2taxa2value){\n  attribute2taxa2value.clear();\n  for (  String attribute : attribute2kind2taxaNames.keySet()) {\n    Map<String,ArrayList<String>> kind2taxaNames=attribute2kind2taxaNames.get(attribute);\n    for (    String kind : kind2taxaNames.keySet()) {\n      String attributeKindPair=attribute + \":\" + kind;\n      List<String> taxonNames=kind2taxaNames.get(kind);\n      for (      String taxonName : taxonNames) {\n        Map<String,Number> dataset2value=taxa2dataset2value.get(taxonName);\n        if (dataset2value != null) {\n          int sum=0;\n          for (          String dataset : dataset2value.keySet()) {\n            if (dataset2value.get(dataset) != null)             sum+=dataset2value.get(dataset).intValue();\n          }\n          if (sum > 0) {\n            Map<String,Number> taxa2value;\n            if (attribute2taxa2value.get(attributeKindPair) != null) {\n              taxa2value=attribute2taxa2value.get(attributeKindPair);\n            }\n else {\n              taxa2value=new TreeMap<>();\n              attribute2taxa2value.put(attributeKindPair,taxa2value);\n            }\n            taxa2value.put(taxonName,sum);\n          }\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Writes out a source/sink specification object", "code": "private void writeSourceSinkSpec(SourceSinkSpec spec,Document document,Element parentElement){\n  if (spec instanceof JavaParameterSpec)   writeJavaParameterSpec((JavaParameterSpec)spec,document,parentElement);\n else   if (spec instanceof JavaFieldSpec)   writeJavaFieldSpec((JavaFieldSpec)spec,document,parentElement);\n else   throw new RuntimeException(\"Unsupported source or sink specification type\");\n}\n"}
{"nl": "Filter and sort", "code": "public void filter(QuestionsFilter questionFilter,Comparator<Question> sorter){\n  filterdQuestions=new ArrayList<Question>(apiResult.getQuestions().size());\n  for (  Question q : apiResult.getQuestions()) {\n    if (questionFilter.isAccepted(q)) {\n      if (!filterdQuestions.contains(q)) {\n        filterdQuestions.add(q);\n      }\n    }\n  }\n  Collections.sort(filterdQuestions,sorter);\n  if (filterdQuestions.size() > questionFilter.getNumberOfQuestions()) {\n    filterdQuestions.subList(questionFilter.getNumberOfQuestions(),filterdQuestions.size()).clear();\n  }\n}\n"}
{"nl": "write to stream in binary", "code": "public void write(OutputWriter outs) throws IOException {\n  for (long index=0; index < maxIndex; index++) {\n    outs.writeInt(get(index));\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesGetCommentsQuery(VkApiClient client,UserActor actor,int noteId){\n  super(client,\"notes.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n}\n"}
{"nl": "Start a pattern matcher on the given value", "code": "public static <ARG>Matcher<ARG> match(ARG arg){\n  return new Matcher<>(arg);\n}\n"}
{"nl": "For debugging only", "code": "public String toStringVerbose(int windowSize){\n  List<Double> mapping=seqFromToLenOut();\n  String str=\"Genome coords: \" + from + \"-\"+ to+ \"; screen width: \"+ mapping.size()+ \"; scale: \"+ this.getBpPerScreenColumn()+ \" bp/column\"+ \"; Mapping: \"+ mapping;\n  str+=\"\\n\";\n  str+=this.toString();\n  return str;\n}\n"}
{"nl": "Shield Control Room Teleporter", "code": "private void spawnShieldControlRoomTeleporter(){\n  deleteNpc(702010);\n  deleteNpc(702011);\n  deleteNpc(702012);\n  deleteNpc(702013);\n  spawn(730886,255.47392f,293.56177f,321.18497f,(byte)89);\n  spawn(730886,255.55742f,216.03549f,321.21344f,(byte)30);\n  spawn(730886,294.20718f,254.60352f,295.7729f,(byte)60);\n  spawn(730886,216.97739f,254.4616f,295.77353f,(byte)0);\n}\n"}
{"nl": "Create AppPreferences", "code": "public AppPreferences(final Context context){\n  preferences=context.getApplicationContext().getSharedPreferences(\"io.github.azaiats.androidmvvm.sample.AppPreferences\",Context.MODE_PRIVATE);\n}\n"}
{"nl": "stop the auto circle", "code": "public void stopAutoCycle(){\n  if (mCycleTask != null) {\n    mCycleTask.cancel();\n  }\n  if (mCycleTimer != null) {\n    mCycleTimer.cancel();\n  }\n  if (mResumingTimer != null) {\n    mResumingTimer.cancel();\n  }\n  if (mResumingTask != null) {\n    mResumingTask.cancel();\n  }\n  mAutoCycle=false;\n  mCycling=false;\n}\n"}
{"nl": "Player registered from client request", "code": "public void registerPlayerConnection(int playerId,byte[] token,byte[] identifier,ClientChannelHandler channelHandler,String realName) throws UnsupportedEncodingException {\n  ChatClient chatClient=players.get(playerId);\n  if (chatClient != null) {\n    byte[] regToken=chatClient.getToken();\n    chatClient.same(realName);\n    if (Arrays.equals(regToken,token)) {\n      String sreal=chatClient.getRealName() + \"@\" + new String(identifier);\n      chatClient.setIdentifier(sreal.getBytes(\"utf-16le\"));\n      chatClient.setChannelHandler(channelHandler);\n      channelHandler.sendPacket(new SM_PLAYER_AUTH_RESPONSE());\n      channelHandler.setState(State.AUTHED);\n      channelHandler.setChatClient(chatClient);\n      broadcastService.addClient(chatClient);\n    }\n  }\n}\n"}
{"nl": "reads a null-terminated string", "code": "public String readNullTerminatedBytes() throws IOException {\n  StringBuilder buf=new StringBuilder();\n  while (true) {\n    byte letter=(byte)ins.read();\n    if (letter == -1)     throw new IOException(\"readNullTerminatedBytes(): failed (EOF)\");\n    if (letter == 0)     break;\n else     buf.append((char)letter);\n  }\n  return buf.toString();\n}\n"}
{"nl": "Notify the listeners that traffic has been removed", "code": "private void notifyRemoved(List<AirMapTraffic> removed){\n  if (removed == null || removed.isEmpty()) {\n    return;\n  }\n  for (  AirMapTrafficListener listener : listeners) {\n    listener.onRemoveTraffic(removed);\n  }\n}\n"}
{"nl": "Remove all identifiers from the ID table", "code": "protected final void clearIdentifiers(){\n  if (identifiers != null) {\n    identifiers.clear();\n  }\n}\n"}
{"nl": "Check if the sync is complete from a task status", "code": "private boolean isSyncComplete(JSONObject taskStatus,JSONObject taskDetails){\n  try {\n    if (taskStatus.getBoolean(\"complete\")) {\n      return true;\n    }\n    if (taskDetails.has(\"error\")) {\n      throw new RuntimeException(\"Sync failed with error: '\" + taskDetails.getString(\"error\") + \"'!\");\n    }\n    return false;\n  }\n catch (  JSONException e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "Create an XMLContentSpec for a single non-leaf", "code": "protected int addContentSpecNode(short nodeType,String nodeValue){\n  int contentSpecIndex=createContentSpec();\n  fContentSpec.setValues(nodeType,nodeValue,null);\n  setContentSpec(contentSpecIndex,fContentSpec);\n  return contentSpecIndex;\n}\n"}
{"nl": "Inverse document frequency: the total docs divided by the number of times the word appeared in a document", "code": "public static double idf(double totalDocs,double numTimesWordAppearedInADocument){\n  return totalDocs > 0 ? Math.log10(totalDocs / numTimesWordAppearedInADocument) : 0;\n}\n"}
{"nl": "Set offset", "code": "public MarketGetCategoriesQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WidgetsGetPagesQuery(VkApiClient client,UserActor actor){\n  super(client,\"widgets.getPages\",GetPagesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Function Import implementation for cancelling a sales order", "code": "@SuppressWarnings(\"unchecked\") @EdmFunctionImport(name=\"CancelSalesOrder\",entitySet=\"SalesOrderHeaders\",returnType=@ReturnType(type=Type.ENTITY,isCollection=true)) public List<SalesOrderHeader> cancelSalesOrder(@EdmFunctionImportParameter(name=\"SalesOrderId\") String salesOrderId) throws ODataException {\n  EntityManagerFactory emf=Utility.getEntityManagerFactory();\n  EntityManager em=emf.createEntityManager();\n  try {\n    Query query=em.createQuery(\"SELECT s FROM SalesOrderHeader s WHERE s.salesOrderId =\" + salesOrderId);\n    try {\n      SalesOrderHeader so=(SalesOrderHeader)query.getSingleResult();\n      em.getTransaction().begin();\n      so.setLifeCycleStatus(\"X\");\n      so.setLifeCycleStatusName(\"Cancelled\");\n      em.persist(so);\n      em.getTransaction().commit();\n      List<SalesOrderHeader> salesOrderList=null;\n      query=em.createQuery(\"SELECT s FROM SalesOrderHeader s WHERE s.salesOrderId ='\" + salesOrderId + \"'\");\n      salesOrderList=query.getResultList();\n      return salesOrderList;\n    }\n catch (    NoResultException e) {\n      throw new ODataApplicationException(\"No Sales Order with Sales Order Id:\" + salesOrderId,Locale.ENGLISH,HttpStatusCodes.BAD_REQUEST);\n    }\n  }\n  finally {\n    em.close();\n  }\n}\n"}
{"nl": "Check if the location lies within the organisation unit boundary", "code": "@RequestMapping(value=\"/locationWithinOrgUnitBoundary\",method=RequestMethod.GET,produces={\"*/*\",\"application/json\"}) public void checkLocationWithinOrgUnit(@RequestParam String orgUnitUid,@RequestParam Double longitude,@RequestParam Double latitude,HttpServletResponse response) throws Exception {\n  boolean withinOrgUnit=false;\n  List<OrganisationUnit> organisationUnits=new ArrayList<>();\n  organisationUnits.add(organisationUnitService.getOrganisationUnit(orgUnitUid));\n  FilterUtils.filter(organisationUnits,new OrganisationUnitPolygonCoveringCoordinateFilter(longitude,latitude));\n  if (!organisationUnits.isEmpty()) {\n    withinOrgUnit=true;\n  }\n  renderService.toJson(response.getOutputStream(),withinOrgUnit);\n}\n"}
{"nl": "Record a sound file with the recording being limited to a given amount of time", "code": "public static void timedRecord(String filename,long millis,AudioFormat audioFormat){\n  File outputFile=new File(filename);\n  timedRecord(outputFile,millis,audioFormat);\n}\n"}
{"nl": "Construct an EventDescriptor with a class", "code": "public EventDescriptor(Class eventClass){\n  this(eventClass,null);\n}\n"}
{"nl": "Removes all jump functions", "code": "public synchronized void clear(){\n  this.nonEmptyForwardLookup.clear();\n  this.nonEmptyLookupByTargetNode.clear();\n  this.nonEmptyReverseLookup.clear();\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-5.89342953136,-3.36492999891,-2.57058183564,-2.01504837333,-1.47588404882,5.89342953136,3.36492999891,2.57058183564,2.01504837333,1.47588404882};\n}\n"}
{"nl": "Create an <code>unsigned int</code>", "code": "private UInteger(String value) throws NumberFormatException {\n  this.value=rangeCheck(Long.parseLong(value));\n}\n"}
{"nl": "Parse a json from a string", "code": "public static JsonRootNode jsonFromString(String input){\n  try {\n    return new JdomParser().parse(input);\n  }\n catch (  InvalidSyntaxException e) {\n    return null;\n  }\n}\n"}
{"nl": "Below method will be used to process data to next step", "code": "private boolean processRowToNextStep(SortDataRows sortDataRows) throws CarbonDataLoadingException {\n  if (null == sortDataRows) {\n    LOGGER.info(\"Record Processed For table: \" + parameters.getTableName());\n    LOGGER.info(\"Number of Records was Zero\");\n    String logMessage=\"Summary: Carbon Sort Key Step: Read: \" + 0 + \": Write: \"+ 0;\n    LOGGER.info(logMessage);\n    return false;\n  }\n  try {\n    sortDataRows.startSorting();\n    LOGGER.info(\"Record Processed For table: \" + parameters.getTableName());\n    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordSortRowsStepTotalTime(parameters.getPartitionID(),System.currentTimeMillis());\n    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordDictionaryValuesTotalTime(parameters.getPartitionID(),System.currentTimeMillis());\n    return false;\n  }\n catch (  CarbonSortKeyAndGroupByException e) {\n    throw new CarbonDataLoadingException(e);\n  }\n}\n"}
{"nl": "Initialize Key Generator (Blowfish keygen and RSA keygen)", "code": "public static void init() throws GeneralSecurityException {\n  log.info(\"Initializing Key Generator...\");\n  blowfishKeyGen=KeyGenerator.getInstance(\"Blowfish\");\n  KeyPairGenerator rsaKeyPairGenerator=KeyPairGenerator.getInstance(\"RSA\");\n  RSAKeyGenParameterSpec spec=new RSAKeyGenParameterSpec(1024,RSAKeyGenParameterSpec.F4);\n  rsaKeyPairGenerator.initialize(spec);\n  encryptedRSAKeyPairs=new EncryptedRSAKeyPair[10];\n  for (int i=0; i < 10; i++) {\n    encryptedRSAKeyPairs[i]=new EncryptedRSAKeyPair(rsaKeyPairGenerator.generateKeyPair());\n  }\n  Cipher rsaCipher=Cipher.getInstance(\"RSA/ECB/nopadding\");\n  rsaCipher.init(Cipher.DECRYPT_MODE,encryptedRSAKeyPairs[0].getRSAKeyPair().getPrivate());\n}\n"}
{"nl": "pastes lines into table", "code": "private void paste(String[] lines){\n  if (lines.length > 0) {\n    Set<Pair<Integer,Integer>> selectedPairs=getSelectedPairs();\n    if (selectedPairs.size() > 0) {\n      BitSet rows=getSelectedSampleIndices();\n      BitSet cols=getSelectedAttributesIndices();\n      int row=rows.nextSetBit(1);\n      for (      String line : lines) {\n        int col=cols.nextSetBit(1);\n        String[] values=line.trim().split(\"\\t\");\n        for (        String value : values) {\n          value=value.trim();\n          while (col != -1 && !selectedPairs.contains(new Pair<>(row,col)))           col=cols.nextSetBit(col + 1);\n          if (col != -1) {\n            final SpreadsheetCell cell=getSpreadsheetView().getGrid().getRows().get(row).get(col);\n            boolean succeed=cell.getCellType().match(value);\n            if (succeed) {\n              getSpreadsheetView().getGrid().setCellValue(cell.getRow(),cell.getColumn(),cell.getCellType().convertValue(value));\n            }\n            col=cols.nextSetBit(col + 1);\n          }\n else           break;\n        }\n        row=rows.nextSetBit(row + 1);\n        if (row == -1)         break;\n      }\n    }\n  }\n}\n"}
{"nl": "Builds the required API \"hash\" parameter (timeStamp + privateKey + publicKey)", "code": "private static String buildMd5AuthParameter(long timeStamp){\n  try {\n    MessageDigest md=MessageDigest.getInstance(\"MD5\");\n    byte[] messageDigest=md.digest((timeStamp + BuildConfig.PRIVATE_KEY + BuildConfig.PUBLIC_KEY).getBytes());\n    BigInteger number=new BigInteger(1,messageDigest);\n    String md5=number.toString(16);\n    while (md5.length() < 32) {\n      md5=0 + md5;\n    }\n    return md5;\n  }\n catch (  NoSuchAlgorithmException e) {\n    Log.e(\"DataManager\",\"Error hashing required parameters: \" + e.getMessage());\n    return \"\";\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardDeleteCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId,int commentId){\n  super(client,\"board.deleteComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  commentId(commentId);\n}\n"}
{"nl": "Creates a new instance of DOTInteroperator", "code": "public DOTInteroperator() throws IOException {\n  Process p=Runtime.getRuntime().exec(\"dot -V\");\n  try {\n    p.waitFor();\n  }\n catch (  InterruptedException iee) {\n    return;\n  }\n}\n"}
{"nl": "ask whether user wants to quit", "code": "private boolean confirmQuit() throws CanceledException {\n  if (ProgramProperties.isUseGUI()) {\n    getFrame().toFront();\n    int result=JOptionPane.showConfirmDialog(getLastActiveFrame(),\"Quit \" + ProgramProperties.getProgramName() + \"?\",ProgramProperties.getProgramVersion() + \" - Quit?\",JOptionPane.YES_NO_CANCEL_OPTION);\n    if (result == JOptionPane.CANCEL_OPTION) {\n      throw new CanceledException();\n    }\n else     return result != JOptionPane.NO_OPTION;\n  }\n else   return true;\n}\n"}
{"nl": "Create an <code>unsigned short</code>", "code": "public static UShort valueOf(String value) throws NumberFormatException {\n  return new UShort(value);\n}\n"}
{"nl": "copy file to destination", "code": "private static void copyFile(File file,InputStream is,String mode) throws IOException, InterruptedException {\n  final String abspath=file.getAbsolutePath();\n  final FileOutputStream out=new FileOutputStream(file);\n  byte buf[]=new byte[1024];\n  int len;\n  while ((len=is.read(buf)) > 0) {\n    out.write(buf,0,len);\n  }\n  out.close();\n  is.close();\n  Runtime.getRuntime().exec(\"chmod \" + mode + \" \"+ abspath).waitFor();\n}\n"}
{"nl": "Checks if all four fields have been filled", "code": "public boolean hasValidOTP(){\n  return makeOTP().length() == 4;\n}\n"}
{"nl": "Super user roles are allowed to do anything, used for replication primarily", "code": "public boolean isSuperUser(String role){\n  Set<String> superUserRoles=conf.getSuperUserRoles();\n  return role != null && superUserRoles.contains(role) ? true : false;\n}\n"}
{"nl": "Returns <code>true</code> when fingerprint authentication is available and supported", "code": "@Override public boolean isFingerprintAuthSupported(){\n  return impl.isFingerprintAuthSupported();\n}\n"}
{"nl": "load the data", "code": "public void load(String treeFile,String mapFile,ProgressListener progress){\n  progress.setCancelable(false);\n  try {\n    progress.setSubtask(\"Loading \" + mapFile);\n    progress.setMaximum(2);\n    progress.setProgress(0);\n    Document.loadVersionInfo(cName + \" tree\",Basic.replaceFileSuffix(treeFile,\".info\"));\n    name2IdMap.loadFromFile(mapFile);\n    progress.setProgress(1);\n    progress.setSubtask(\"Loading \" + treeFile);\n    if (cName.equals(Classification.Taxonomy)) {\n      if (name2IdMap.get(3554) != null && name2IdMap.get(3554).equals(\"Beta\"))       name2IdMap.put(\"Beta <vulgaris>\",3554);\n    }\n    fullTree.loadFromFile(treeFile);\n    progress.setProgress(2);\n  }\n catch (  Exception e) {\n    Basic.caught(e);\n    NotificationsInSwing.showError(MainViewer.getLastActiveFrame(),\"Failed to open files: \" + treeFile + \" and \"+ mapFile+ \": \"+ e.getMessage());\n  }\n finally {\n    progress.setCancelable(true);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsSetCallbackServerQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.setCallbackServer\",SetCallbackServerResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "is viewer uptodate?", "code": "public boolean isUptoDate(){\n  return isUpToDate;\n}\n"}
{"nl": "is there an unaligned character at this position?", "code": "public boolean hasUnalignedCharAt(int col){\n  if (col < getFirstNonGapPosition()) {\n    int firstUnalignedPrefixPos=getFirstNonGapPosition() - unalignedPrefix.length();\n    if (col > firstUnalignedPrefixPos)     return true;\n  }\n else   if (col >= getLastNonGapPosition()) {\n    int lastUnalignedSuffixPos=getLastNonGapPosition() + unalignedSuffix.length();\n    if (col < lastUnalignedSuffixPos)     return true;\n  }\n  return false;\n}\n"}
{"nl": "Hash method to optionally specify a hash type other than the default java hashCode() hashType must be MD5, SHA-1, or SHA-256", "code": "public static int hash(String key,int bitSize,String input,String hashType){\n  int bitLimitedHash;\n  try {\n    MessageDigest md=MessageDigest.getInstance(hashType);\n    byte[] array=md.digest(input.getBytes());\n    int hashInt=fromByteArray(array);\n    bitLimitedHash=hashInt;\n    if (bitSize < 32) {\n      bitLimitedHash=(0xFFFFFFFF >>> (32 - bitSize)) & hashInt;\n    }\n    logger.debug(\"hashInt = \" + hashInt + \" bitLimitedHash = \"+ bitLimitedHash);\n  }\n catch (  NoSuchAlgorithmException e) {\n    logger.info(e.toString());\n    bitLimitedHash=hash(key,bitSize,input);\n  }\n  return bitLimitedHash;\n}\n"}
{"nl": "install apk", "code": "public static void installApk(Context context,String filename){\n  Intent intent=new Intent();\n  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  intent.setAction(Intent.ACTION_VIEW);\n  String type=\"application/vnd.android.package-archive\";\n  File pluginfile=new File(filename);\n  intent.setDataAndType(Uri.fromFile(pluginfile),type);\n  if (context instanceof Activity) {\n    ((Activity)context).startActivityForResult(intent,REQUEST_INSTALL);\n  }\n  context.startActivity(intent);\n}\n"}
{"nl": "Analyzes the given APK file for data flows with a given xml file", "code": "public InfoflowResults analyzeAPKFile(String apkFileName,String xmlFileName) throws IOException, XmlPullParserException {\n  return analyzeAPKFile(apkFileName,xmlFileName,false,false,false);\n}\n"}
{"nl": "Return a when scalar_expression clause", "code": "public Expression whenScalar(Value val1,Value val2){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n"}
{"nl": "Load the definitions of the android compilation targets", "code": "private static void loadTargets(){\n  ourTargets.clear();\n  IAndroidTarget[] targets=getCompilationTargets();\n  if (AndroidSdkUtils.isAndroidSdkAvailable()) {\n    String[] knownVersions=TemplateUtils.getKnownVersions();\n    for (int i=0; i < knownVersions.length; i++) {\n      AndroidTargetComboBoxItem targetInfo=new AndroidTargetComboBoxItem(knownVersions[i],i + 1);\n      ourTargets.add(targetInfo);\n    }\n  }\n  for (  IAndroidTarget target : targets) {\n    if (target.getVersion().isPreview() || !target.getAdditionalLibraries().isEmpty()) {\n      AndroidTargetComboBoxItem targetInfo=new AndroidTargetComboBoxItem(target);\n      ourTargets.add(targetInfo);\n    }\n  }\n}\n"}
{"nl": "Check for the \"environment\" key in the pluginAPI", "code": "private boolean isConfigurationPluginAvailable(){\n  if (configurationPluginAvailable == null) {\n    try {\n      String value=APILocator.getPluginAPI().loadProperty(pluginName,\"environment\");\n      configurationPluginAvailable=(value != null);\n    }\n catch (    Exception e) {\n      Logger.warn(this,\"Exception while trying to get property 'environment' \",e);\n      configurationPluginAvailable=false;\n    }\n    Logger.info(this,\"Configuration plugin available: \" + configurationPluginAvailable);\n  }\n  return configurationPluginAvailable;\n}\n"}
{"nl": "calculates the needed angles for the chart slices", "code": "private void calcAngles(){\n  int entryCount=mData.getEntryCount();\n  if (mDrawAngles.length != entryCount) {\n    mDrawAngles=new float[entryCount];\n  }\n else {\n    for (int i=0; i < entryCount; i++) {\n      mDrawAngles[i]=0;\n    }\n  }\n  if (mAbsoluteAngles.length != entryCount) {\n    mAbsoluteAngles=new float[entryCount];\n  }\n else {\n    for (int i=0; i < entryCount; i++) {\n      mAbsoluteAngles[i]=0;\n    }\n  }\n  float yValueSum=mData.getYValueSum();\n  List<IPieDataSet> dataSets=mData.getDataSets();\n  int cnt=0;\n  for (int i=0; i < mData.getDataSetCount(); i++) {\n    IPieDataSet set=dataSets.get(i);\n    for (int j=0; j < set.getEntryCount(); j++) {\n      mDrawAngles[cnt]=calcAngle(Math.abs(set.getEntryForIndex(j).getY()),yValueSum);\n      if (cnt == 0) {\n        mAbsoluteAngles[cnt]=mDrawAngles[cnt];\n      }\n else {\n        mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];\n      }\n      cnt++;\n    }\n  }\n}\n"}
{"nl": "Creates a SOLR collection in which documents can later be ingested", "code": "private static void createCollection(HttpSolrClient solrClient){\n  final CollectionAdminRequest.Create createCollectionRequest=new CollectionAdminRequest.Create();\n  createCollectionRequest.setCollectionName(Constants.COLLECTION_NAME);\n  createCollectionRequest.setConfigName(Constants.CONFIGURATION_NAME);\n  logger.info(Messages.getString(\"SetupThread.CREATING_COLLECTION\"));\n  CollectionAdminResponse response=null;\n  try {\n    response=createCollectionRequest.process(solrClient);\n  }\n catch (  SolrServerException e) {\n    logger.error(e.getMessage());\n  }\ncatch (  IOException e) {\n    logger.error(e.getMessage());\n  }\n  if (!response.isSuccess()) {\n    logger.error(Messages.getString(\"SetupThread.CREATING_COLLECTION_FAILED\") + response.getErrorMessages().toString());\n  }\n  logger.info(Messages.getString(\"SetupThread.COLLECTION_CREATED\"));\n}\n"}
{"nl": "Intercept refresh view and loading view", "code": "@Override public void addChild(WXComponent child,int index){\n  if (child == null || index < -1) {\n    return;\n  }\n  checkRefreshOrLoading(child);\n  if (child instanceof WXBaseRefresh) {\n    return;\n  }\n  if (mChildren == null) {\n    mChildren=new ArrayList<>();\n  }\n  int count=mChildren.size();\n  index=index >= count ? -1 : index;\n  if (index == -1) {\n    mChildren.add(child);\n  }\n else {\n    mChildren.add(index,child);\n  }\n}\n"}
{"nl": "Check if there is a valid Activity for the intent", "code": "public static boolean isActivityAvailableForIntent(Context context,Intent intent){\n  return intent.resolveActivity(context.getPackageManager()) != null;\n}\n"}
{"nl": "When valuePosition is OutsideSlice, this allows variable line length", "code": "@Override public boolean isValueLineVariableLength(){\n  return mValueLineVariableLength;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetRequestsQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.getRequests\",GetRequestsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "Required for Externalizable", "code": "public RegisterReplicationLocalViewResponseInfo(){\n}\n"}
{"nl": "Add header before all items and after TYPE_ABSOLUTE_HEADER", "code": "public void addHeader(@LayoutRes int layoutId,Object data){\n  int insertPosition=calcInsertPosition(0);\n  mInserts.add(insertPosition,new Insertion(layoutId,data,Insertion.TYPE_HEADER));\n  getItems().add(insertPosition,null);\n  mHeadersCount+=1;\n  notifyIfNeed();\n}\n"}
{"nl": "Generates a full class name from a short class name by appending the globally-defined package when necessary", "code": "private String expandClassName(String className){\n  String packageName=getPackageName();\n  if (className.startsWith(\".\"))   return packageName + className;\n else   if (className.substring(0,1).equals(className.substring(0,1).toUpperCase()))   return packageName + \".\" + className;\n else   return className;\n}\n"}
{"nl": "Checks if the underlaying vertex has not been removed and if it is not a ghost", "code": "boolean isAlive(){\n  if (vertex == null)   return false;\n  try {\n    return vertex.property(Schema.BaseType.TYPE.name()).isPresent();\n  }\n catch (  IllegalStateException e) {\n    return false;\n  }\n}\n"}
{"nl": "Constructs a default JavaStreamingAudioPlayer", "code": "public JavaStreamingAudioPlayer(){\n  debug=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.debug\");\n  cancelDelay=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.cancelDelay\",0L).longValue();\n  drainDelay=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.drainDelay\",150L).longValue();\n  openFailDelayMs=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.openFailDelayMs\",0L).longValue();\n  totalOpenFailDelayMs=Utilities.getLong(\"com.sun.speech.freetts.audio.AudioPlayer.totalOpenFailDelayMs\",0L).longValue();\n  audioMetrics=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.showAudioMetrics\");\n  line=null;\n  setPaused(false);\n}\n"}
{"nl": "truncate appender file from storage server", "code": "public int truncate_file1(String appender_file_id,long truncated_file_size) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.truncate_file(parts[0],parts[1],truncated_file_size);\n}\n"}
{"nl": "Returns the string representation of the <CODE>CronExpression</CODE>", "code": "public String toString(){\n  return cronExpression;\n}\n"}
{"nl": "Returns true is current thread is initializer thread", "code": "public static boolean isInitializer(){\n  return _threadId.get() != null && INITIALIZER_ID.equals(_threadId.get());\n}\n"}
{"nl": "Calcualtes x_i = (x_i - mean(x)) / std(x) This function can deal with NaNs", "code": "public static double[] normalizeZscore(double[] x){\n  double mn=mean(x,0);\n  double sd=standardDeviation(x,0);\n  for (int i=0; i < x.length; i++)   if (!Double.isNaN(x[i]))   x[i]=(x[i] - mn) / sd;\n  return x;\n}\n"}
{"nl": "Transform the selected table to a normal container", "code": "public void transformTableToContainer(ConstraintTableLayout table){\n  ConstraintWidgetContainer container=new ConstraintWidgetContainer();\n  container.setDebugName(createContainerName(\"container\"));\n  transformContainerToContainer(table,container);\n}\n"}
{"nl": "Helper method to send a patch to the specified service", "code": "private static void sendPatch(StatefulService service,Object body){\n  Operation patch=Operation.createPatch(service.getUri()).setBody(body).setCompletion(null);\n  service.sendRequest(patch);\n}\n"}
{"nl": "Waits for all queued audio to be played", "code": "public boolean drain(){\n  timer.stop(\"speakableOut\");\n  return true;\n}\n"}
{"nl": "recv file content callback function, may be called more than once when the file downloaded", "code": "public int recv(long fileSize,byte[] data,int bytes){\n  try {\n    out.write(data,0,bytes);\n  }\n catch (  IOException ex) {\n    ex.printStackTrace();\n    return -1;\n  }\n  currentBytes+=bytes;\n  if (this.currentBytes == fileSize) {\n    this.currentBytes=0;\n  }\n  return 0;\n}\n"}
{"nl": "change the jar file path as the makeDexElements do", "code": "public static String optimizedPathFor(File path,File optimizedDirectory){\n  String fileName=path.getName();\n  if (!fileName.endsWith(ShareConstants.DEX_SUFFIX)) {\n    int lastDot=fileName.lastIndexOf(\".\");\n    if (lastDot < 0) {\n      fileName+=ShareConstants.DEX_SUFFIX;\n    }\n else {\n      StringBuilder sb=new StringBuilder(lastDot + 4);\n      sb.append(fileName,0,lastDot);\n      sb.append(ShareConstants.DEX_SUFFIX);\n      fileName=sb.toString();\n    }\n  }\n  File result=new File(optimizedDirectory,fileName);\n  return result.getPath();\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  String result=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter Id\",\"Select Node by Id\",JOptionPane.QUESTION_MESSAGE);\n  if (result != null)   execute(\"select id=\" + result + \";\");\n}\n"}
{"nl": "Save an issue", "code": "@Override public void saveIssue(Issue issue){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.saveOrUpdate(issue);\n  transaction.commit();\n  session.close();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PagesSaveAccessQuery(VkApiClient client,UserActor actor,int pageId){\n  super(client,\"pages.saveAccess\",Integer.class);\n  accessToken(actor.getAccessToken());\n  pageId(pageId);\n}\n"}
{"nl": "(Re)Construct an object from the given bytes", "code": "protected RemoteResourceStatus(byte[] bytes) throws SVNException {\n  super();\n  StatusFromBytesStream in=new StatusFromBytesStream(bytes);\n  initFromBytes(in);\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(replicationPolicyDesc);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ReplicationPolicyDescription copy=(ReplicationPolicyDescription)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(replicationPolicyDesc,copy));\n}\n"}
{"nl": "Used to toggle the menu drawer", "code": "private void toggleMenuDrawer(){\n  if (isMenuDrawerOpen()) {\n    closeMenuDrawer();\n  }\n else {\n    openMenuDrawer();\n  }\n}\n"}
{"nl": "is this a horizontal guide line on the image", "code": "public boolean isHorizontalGuideline(){\n  if (mConstraintWidget instanceof Guideline) {\n    Guideline g=(Guideline)mConstraintWidget;\n    return g.getOrientation() == Guideline.HORIZONTAL;\n  }\n  return false;\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapPermitAnswer && getId().equals(((AirMapPermitAnswer)o).getId());\n}\n"}
{"nl": "Adds another meta argument to the script", "code": "public StaticScript metaArguments(Object... metaArguments){\n  this.metaArguments=metaArguments;\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetLongPollHistoryQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.getLongPollHistory\",GetLongPollHistoryResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates the wizard pages", "code": "public void addPages(){\n  mainPage=new MoveRemoteResourceWizardMainPage(\"newRemoteFolderPage1\",Policy.bind(\"MoveRemoteFolderWizard.heading\"),SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER));\n  mainPage.setRemoteResource(selection);\n  addPage(mainPage);\n  String pageTitle=Policy.bind(\"CommentCommitWizardPage.pageTitle\");\n  String pageDescription=Policy.bind(\"CommentCommitWizardPage.pageDescription\");\n  ImageDescriptor image=SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER);\n  commitCommentPage=new CommentCommitWizardPage(parentDialog,pageTitle,pageTitle,image,pageDescription);\n  addPage(commitCommentPage);\n}\n"}
{"nl": "compute the input map from all nodes of the input taxonomy", "code": "static Map<Integer,Integer> computeInputMapFromLeaves(Director dir,boolean useInternal,boolean useUnassigned){\n  Map<Integer,Integer> map=new TreeMap<>();\n  PhyloTree tree=dir.getMainViewer().getTree();\n  for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {\n    if (useInternal || v.getDegree() == 1) {\n      Integer taxId=(Integer)v.getInfo();\n      if (taxId != null && (useUnassigned || !(taxId.equals(IdMapper.NOHITS_ID) || taxId.equals(IdMapper.UNASSIGNED_ID) || taxId.equals(IdMapper.LOW_COMPLEXITY_ID)))) {\n        int count=((NodeData)v.getData()).getCountSummarized();\n        map.put(taxId,count);\n      }\n    }\n  }\n  return map;\n}\n"}
{"nl": "Auto generating bean ids to avoid the error Configuration problem: Id is required for element when used as a top-level tag", "code": "@Override protected boolean shouldGenerateIdAsFallback(){\n  return true;\n}\n"}
{"nl": "does the tree have exactly one selected subtree?", "code": "public boolean hasSelectedSubTree(){\n  boolean foundASelectedRoot=false;\n  if (treeView.getNumberSelectedNodes() > 1) {\n    for (    Node v : treeView.getSelectedNodes()) {\n      if (v.getInDegree() == 0 || !treeView.getSelected(v.getFirstInEdge().getSource())) {\n        if (foundASelectedRoot)         return false;\n else         foundASelectedRoot=true;\n      }\n    }\n  }\n  return foundASelectedRoot;\n}\n"}
{"nl": "Returns whether the overlay is hidden", "code": "public boolean isHidden(){\n  return myHidden;\n}\n"}
{"nl": "Locate a file using the starting base directory, traversing down the directory tree as sub-directories are encountered", "code": "private static String locate(File baseDir,String fileName){\n  if (baseDir == null)   throw new IllegalArgumentException(\"baseDir is null\");\n  if (fileName == null)   throw new IllegalArgumentException(\"subDirName is null\");\n  String foundFile=null;\n  File[] files=BootIOUtils.listFiles(baseDir);\n  List<File> dirList=new ArrayList<File>();\n  for (  File file1 : files) {\n    if (file1.getName().equals(fileName)) {\n      try {\n        foundFile=file1.getCanonicalPath();\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n      }\n      break;\n    }\n else {\n      if (file1.isDirectory() && file1.canRead())       dirList.add(file1);\n    }\n  }\n  if (foundFile == null) {\n    File[] dirs=dirList.toArray(new File[dirList.size()]);\n    for (    File dir : dirs) {\n      String file=locate(dir,fileName);\n      if (file != null) {\n        foundFile=file;\n        break;\n      }\n    }\n  }\n  return (foundFile);\n}\n"}
{"nl": "Opens Site Admin at specified node: http://domain/siteadmin#/nodePath", "code": "public SiteAdminPage open(String nodePath){\n  webDriver.get(authorDomain + WCM_PATH + \"#\"+ nodePath);\n  String wcmTitle=getWcmTitle();\n  if (StringUtils.isNotBlank(nodePath)) {\n    bobcatWait.withTimeout(Timeouts.BIG).until(not(titleIs(wcmTitle)));\n  }\n else {\n    bobcatWait.withTimeout(Timeouts.BIG).until(titleIs(wcmTitle));\n  }\n  grid.getActionBar().waitToBeDisplayed();\n  grid.waitForLoaderNotPresent();\n  return this;\n}\n"}
{"nl": "Filter ScoutWidget's of GuideLine objects", "code": "private static ScoutWidget[] removeGuidelines(ScoutWidget[] list){\n  ArrayList<ScoutWidget> al=new ArrayList<>();\n  for (  ScoutWidget aList : list) {\n    if (aList.mConstraintWidget instanceof Guideline) {\n      continue;\n    }\n    al.add(aList);\n  }\n  return al.toArray(new ScoutWidget[al.size()]);\n}\n"}
{"nl": "Id of a comment to reply with current comment to", "code": "public MarketCreateCommentQuery replyToComment(Integer value){\n  return unsafeParam(\"reply_to_comment\",value);\n}\n"}
{"nl": "Creates new error", "code": "public NotSetPositionException(Throwable cause){\n  super(cause);\n}\n"}
{"nl": "Change alliance's loot rules and notify team members", "code": "public static final void changeGroupRules(PlayerAlliance alliance,LootGroupRules lootRules){\n  alliance.onEvent(new ChangeAllianceLootRulesEvent(alliance,lootRules));\n}\n"}
{"nl": "MONSTER WEAKNESS QUERIES", "code": "public MonsterWeaknessCursor queryWeaknessFromMonster(long id){\n  return mHelper.queryWeaknessFromMonster(id);\n}\n"}
{"nl": "Checks if name is already taken or not", "code": "public static boolean isFreeName(String name){\n  return !DAOManager.getDAO(PlayerDAO.class).isNameUsed(name);\n}\n"}
{"nl": "Use the filter to see if there's a target language", "code": "private boolean isSourceXliff(){\n  return xliffFilter.getCurrentTargetLocale() == null || xliffFilter.getCurrentTargetLocale().equals(LocaleId.EMPTY) || xliffFilter.getCurrentTargetLocale().equals(sourceLocaleId);\n}\n"}
{"nl": "Order by date ascending", "code": "@Override public int compareTo(PlayerHouseBid o){\n  return (int)(time.getTime() - o.getTime().getTime());\n}\n"}
{"nl": "Return true if we are animating a color transition", "code": "public boolean isAnimating(){\n  return mAnimation.step();\n}\n"}
{"nl": "Creates a CartPaymentInfo object with a possible authCode (may be null)", "code": "public CartPaymentInfo makePaymentInfo(String id,String refNum,String authCode,BigDecimal amount){\n  CartPaymentInfo inf=new CartPaymentInfo();\n  inf.refNum[0]=refNum;\n  inf.refNum[1]=authCode;\n  inf.amount=amount;\n  inf.origAmount=amount;\n  if (!isPaymentMethodType(id)) {\n    inf.paymentMethodTypeId=this.getPaymentMethodTypeId(id);\n    inf.paymentMethodId=id;\n  }\n else {\n    inf.paymentMethodTypeId=id;\n  }\n  return inf;\n}\n"}
{"nl": "Builds th DivIconOptions new instance", "code": "public DivIconOptions build(){\n  DivIconOptions options=new DivIconOptions();\n  options.iconSize=this.iconSize;\n  options.iconAnchor=this.iconAnchor;\n  options.popUpAnchor=this.popUpAnchor;\n  options.className=this.className;\n  options.html=this.html;\n  return options;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetUniversitiesQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getUniversities\",GetUniversitiesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioReorderQuery(VkApiClient client,UserActor actor,int audioId){\n  super(client,\"audio.reorder\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioId(audioId);\n}\n"}
{"nl": "Initialise the fields of this instance from the specified JSON", "code": "public RenderRequest(JsonObject json){\n  this.request=new HttpRequestWrapper(json.getJsonObject(\"request\"));\n  if (json.containsKey(\"template\")) {\n    this.template=json.getString(\"template\");\n  }\n}\n"}
{"nl": "Execute a command in the environment", "code": "public static String execute(String command){\n  return SubprocessUttility.execute(command);\n}\n"}
{"nl": "This method is responsible for taking the screenshot and creating a file", "code": "private boolean takeScreenShot(Activity activity){\n  Date now=new Date();\n  android.text.format.DateFormat.format(fileFormat,now);\n  View v1=activity.getWindow().getDecorView().getRootView();\n  v1.setDrawingCacheEnabled(true);\n  Bitmap bitmap=Bitmap.createBitmap(v1.getDrawingCache());\n  v1.setDrawingCacheEnabled(false);\n  File imageFile=new File(path,now + \".jpg\");\n  try {\n    FileOutputStream outputStream=new FileOutputStream(imageFile);\n    bitmap.compress(Bitmap.CompressFormat.JPEG,quality,outputStream);\n    outputStream.flush();\n    outputStream.close();\n  }\n catch (  IOException ex) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Test the CSS Minifier API", "code": "public boolean testCssMinifier(){\n  StringBuilder sbCss1=new StringBuilder();\n  sbCss1.append(\"body {\");\n  sbCss1.append(\"\\n\\tbackground-color: black;\");\n  sbCss1.append(\"\\n\\tfont-size: Arial;\");\n  sbCss1.append(\"\\n}\");\n  StringBuilder sbCss2=new StringBuilder();\n  sbCss2.append(\"div {\");\n  sbCss2.append(\"\\n\\tcolor: red;\");\n  sbCss2.append(\"\\n\\tpadding: 10px;\");\n  sbCss2.append(\"\\n}\");\n  MinifierAPI minAPI=new MinifierAPI();\n  String minifiedCss1=minAPI.getMinfiedCss(sbCss1.toString());\n  String minifiedCss2=minAPI.getMinfiedCss(sbCss2.toString());\n  String actualMinifiedCss=minifiedCss1 + minifiedCss2;\n  String expectedMinifiedCssResult=\"body{background-color:black;font-size:Arial}div{color:red;padding:10px}\";\n  return actualMinifiedCss.equals(expectedMinifiedCssResult);\n}\n"}
{"nl": "error log", "code": "public static void e(String tag,String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.e(tag,buildMsg(msg),e);\n  }\n}\n"}
{"nl": "****************************** MONSTER QUERIES", "code": "public MonsterCursor queryMonsters(){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_MONSTERS;\n  qh.Columns=null;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=S.COLUMN_MONSTERS_SORT_NAME;\n  qh.Limit=null;\n  return new MonsterCursor(wrapHelper(qh));\n}\n"}
{"nl": "Logs with error level and logs stack trace for the throwable", "code": "public static void error(@Nullable Class<?> caller,Throwable throwable,String message,Object... args){\n  android.util.Log.e(tag(caller),String.format(Locale.ENGLISH,message,args),throwable);\n}\n"}
{"nl": "Factory method to create action with defined type and any number of attached values as payload", "code": "public static Action create(String type,Object... values){\n  return new Action(type,values);\n}\n"}
{"nl": "Video IDs", "code": "public VideoGetQuery videos(String... value){\n  return unsafeParam(\"videos\",value);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getParent() != null;\n}\n"}
{"nl": "compute the size of the classification", "code": "private int computeSize(Map<Integer,Integer[]> integerMap){\n  int count=0;\n  for (  Integer taxonId : integerMap.keySet()) {\n    Integer value=integerMap.get(taxonId)[0];\n    if (value != null)     count+=value;\n  }\n  return count;\n}\n"}
{"nl": "Helper method for creating uuid", "code": "protected UUID makeUUID(){\n  return UUIDGen.getTimeUUID();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set colorMatchesVsReference=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Assert that two JSON objects are equal", "code": "private static void assertJsonObjectEquals(String expected,String actual){\n  ObjectMapper mapper=new ObjectMapper();\n  TypeReference<Map<String,Object>> ref=new TypeReference<Map<String,Object>>(){\n  }\n;\n  try {\n    Map<String,Object> em=mapper.readValue(expected,ref);\n    Map<String,Object> am=mapper.readValue(actual,ref);\n    assertEquals(em,am);\n  }\n catch (  IOException e) {\n    throw new IllegalStateException(e);\n  }\n}\n"}
{"nl": "Called when the map is long clicked", "code": "@Override public void onMapLongClick(@NonNull LatLng point){\n  AirMap.createFlight(this,REQUEST_FLIGHT,getCoordinateFromLatLng(point),null);\n}\n"}
{"nl": "Waits for all queued audio to be played", "code": "public boolean drain(){\n  if (line != null) {\n    debugPrint(\"started draining...\");\n    if (line.isOpen()) {\n      line.drain();\n      if (drainDelay > 0L) {\n        try {\n          Thread.sleep(drainDelay);\n        }\n catch (        InterruptedException ie) {\n        }\n      }\n    }\n    debugPrint(\"...finished draining\");\n  }\n  timer.stop(\"audioOut\");\n  return !isCancelled();\n}\n"}
{"nl": "clean the patch version files, such as tinker/patch-641e634c", "code": "public void cleanPatchByVersion(String versionName){\n  if (patchDirectory == null || versionName == null) {\n    return;\n  }\n  String path=patchDirectory.getAbsolutePath() + \"/\" + versionName;\n  SharePatchFileUtil.deleteDir(path);\n}\n"}
{"nl": "Creates a new indexselect scan for this query", "code": "@Override public Scan open(){\n  TableScan ts=(TableScan)tp.open();\n  Index idx=ii.open(tx);\n  return new IndexSelectScan(idx,searchRange,ts);\n}\n"}
{"nl": "Remove the details of a submitted proxy entity", "code": "public boolean removeEntity(final ProxyEntity proxyEntity){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.delete(proxyEntity);\n  transaction.commit();\n  session.close();\n  return true;\n}\n"}
{"nl": "Set a capture probability before switching balls or the minimum probability for a specific ball", "code": "public AsyncCatchOptions withProbability(double probability){\n  this.probability=probability;\n  return this;\n}\n"}
{"nl": "Create a PropertySource and store its resource", "code": "public SVNRemoteResourcePropertySource(ISVNRemoteResource resource){\n  this.resource=resource;\n}\n"}
{"nl": "get the user-agent of browser", "code": "final public String browser(){\n  return this.getHeader(\"user-agent\");\n}\n"}
{"nl": "Save the config", "code": "public void save(Boolean isCreate,Config config){\n  configDao.save(config);\n  if (isCreate) {\n    configDao.index(config);\n    if (!configDao.bindApp(config)) {\n      Logs.error(\"failed to bind app of config({})\",config);\n    }\n  }\n}\n"}
{"nl": "Create an <code>unsigned byte</code>", "code": "private UByte(short value) throws NumberFormatException {\n  this.value=rangeCheck(value);\n}\n"}
{"nl": "Add SlideFragment to IntroScreen", "code": "@SuppressWarnings(\"unused\") public void addSlide(SlideFragment slideFragment,MessageButtonBehaviour messageButtonBehaviour){\n  adapter.addItem(slideFragment);\n  messageButtonBehaviours.put(adapter.getLastItemPosition(),messageButtonBehaviour);\n}\n"}
{"nl": "Substract to the instance x and y the values of the given coord", "code": "public Coord minus(Coord coord){\n  return new Coord(x - coord.x,y - coord.y);\n}\n"}
{"nl": "get string", "code": "public String toString(){\n  String s=\"{\";\n  for (int j=0; j < size(); j++)   s+=(j == 0 ? \"\" : \",\") + get(j);\n  return s + \"}\";\n}\n"}
{"nl": "erase shapes", "code": "public void clearShapes(){\n  sample2shape.clear();\n}\n"}
{"nl": "Utility method computing the size of the widget if dimensions are set to wrap_content, using the default font", "code": "protected void wrapContent(){\n  mWidget.setMinWidth(100);\n  mWidget.setMinHeight(30);\n  int tw=mWidget.getMinWidth();\n  int th=mWidget.getMinHeight();\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setWidth(tw);\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setHeight(th);\n  }\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getWidth() <= mWidget.getMinWidth()) {\n      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getHeight() <= mWidget.getMinHeight()) {\n      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  mWidget.setBaselineDistance(0);\n}\n"}
{"nl": "Determine the collection type's converter", "code": "public static JavaTypeConverter determineCollectionConverter(ParameterizedType ptype){\n  JavaType javaType;\n  Type rawType=ptype.getRawType();\n  if (List.class.equals(rawType)) {\n    Class<?> listGenericType=(Class<?>)ptype.getActualTypeArguments()[0];\n    javaType=JsonUtil.INSTANCE.createCollectionType(List.class,listGenericType);\n  }\n else   if (Set.class.equals(rawType)) {\n    Class<?> setGenericType=(Class<?>)ptype.getActualTypeArguments()[0];\n    javaType=JsonUtil.INSTANCE.createCollectionType(Set.class,setGenericType);\n  }\n else {\n    Class<?> mapKeyType=(Class<?>)ptype.getActualTypeArguments()[0];\n    Class<?> mapValueType=(Class<?>)ptype.getActualTypeArguments()[1];\n    javaType=JsonUtil.INSTANCE.createCollectionType(Map.class,mapKeyType,mapValueType);\n  }\n  return new JavaTypeConverter(javaType);\n}\n"}
{"nl": "Use skill with default level 1", "code": "public final boolean useSkill(int skillId){\n  return useSkill(skillId,1);\n}\n"}
{"nl": "Block the main thread until all of the transactions have finished loading", "code": "public void waitToFinish(){\n  flush();\n  if (future != null) {\n    try {\n      future.get();\n    }\n catch (    InterruptedException|ExecutionException e) {\n      LOG.error(e.getMessage());\n    }\n  }\n  LOG.info(\"All tasks done!\");\n}\n"}
{"nl": "Converts dateUnit to JDK Date", "code": "public Date toJdkDate(){\n  return toJodaDateTime().toDate();\n}\n"}
{"nl": "Read a float from the input stream, byte-swapping as necessary", "code": "public static float readFloat(DataInputStream dis,boolean isBigEndian) throws IOException {\n  float val;\n  if (!isBigEndian) {\n    val=readLittleEndianFloat(dis);\n  }\n else {\n    val=dis.readFloat();\n  }\n  return val;\n}\n"}
{"nl": "Set skip own", "code": "public LikesGetListQueryWithExtended skipOwn(Boolean value){\n  return unsafeParam(\"skip_own\",value);\n}\n"}
{"nl": "read String from DataInputStream motivation: readUTF can't print lines larger than USHORTMAX", "code": "public static String readString(DataInputStream in) throws IOException {\n  int llength=in.readInt();\n  if (llength == -1)   return null;\n  byte a[]=new byte[llength];\n  in.readFully(a,0,llength);\n  return new String(a);\n}\n"}
{"nl": "Launch gallery pick flow", "code": "@PickTriggerResult public int fromGallery(){\n  return this.triggerPick(this.prepareGalleryIntent(),QiPick.REQ_GALLERY);\n}\n"}
{"nl": "Create a String from stacktrace", "code": "public static String exceptionStackTraceToString(Exception ex){\n  StringWriter errors=new StringWriter();\n  ex.printStackTrace(new PrintWriter(errors));\n  return errors.toString();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetChairsQuery(VkApiClient client,int facultyId){\n  super(client,\"database.getChairs\",GetChairsResponse.class);\n  facultyId(facultyId);\n}\n"}
{"nl": "agglomerate 2 nodes", "code": "void agg2way(NetNode x,NetNode y){\n  x.nbr=y;\n  y.nbr=x;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(getSyntax());\n}\n"}
{"nl": "Used to create master rifts or slave rifts (slave == null)", "code": "public RVController(Npc slave,RiftEnum riftTemplate){\n  this.riftTemplate=riftTemplate;\n  this.isVortex=riftTemplate.isVortex();\n  this.maxEntries=riftTemplate.getEntries();\n  this.minLevel=riftTemplate.getMinLevel();\n  this.maxLevel=riftTemplate.getMaxLevel();\n  this.deSpawnedTime=((int)(System.currentTimeMillis() / 1000)) + (isVortex ? VortexService.getInstance().getDuration() * 3600 : RiftService.getInstance().getDuration() * 3600);\n  if (slave != null) {\n    this.slave=slave;\n    this.slaveSpawnTemplate=slave.getSpawn();\n    isMaster=true;\n    isAccepting=true;\n  }\n}\n"}
{"nl": "Determine whether this is a voiced phone", "code": "public boolean isVoiced(){\n  Allophone allophone=getAllophone();\n  return allophone.isVoiced();\n}\n"}
{"nl": "100         startPoint(300,100)               endPoint(900,100) 300                      assistPoint(600,300)", "code": "private void init(){\n  mPaint=new Paint();\n  mPath=new Path();\n  startPoint=new Point(300,100);\n  endPoint=new Point(900,100);\n  assistPoint=new Point(600,300);\n  mPaint.setAntiAlias(true);\n  mPaint.setDither(true);\n}\n"}
{"nl": "construct this ActiveElectionState with the given State", "code": "ActiveElectionState(State state){\n  setState(state);\n}\n"}
{"nl": "mlsafir: sub functions for MLSA filter", "code": "private static double mlsafir(double x,double b[],int m,double a,double d[],int _pt3){\n  d[_pt3 + 0]=x;\n  d[_pt3 + 1]=(1 - a * a) * d[_pt3 + 0] + (a * d[_pt3 + 1]);\n  for (int i=2; i <= m; i++) {\n    d[_pt3 + i]+=a * (d[_pt3 + i + 1] - d[_pt3 + i - 1]);\n  }\n  double y=0.0;\n  for (int i=2; i <= m; i++) {\n    y+=d[_pt3 + i] * b[i];\n  }\n  for (int i=m + 1; i > 1; i--) {\n    d[_pt3 + i]=d[_pt3 + i - 1];\n  }\n  return y;\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  FailOverPolicy.FailOverPolicyDescription copy=(FailOverPolicy.FailOverPolicyDescription)is.readObject();\n  is.close();\n  os.close();\n  assertNull(copy.m_BackupMemberNames);\n  assertNull(copy.m_BackupOnly);\n  assertEquals(-1,copy.m_PolicyType);\n}\n"}
{"nl": "Gets the XInclude processing mode for this parser", "code": "@Override public boolean isXIncludeAware(){\n  try {\n    return domParser.getFeature(XINCLUDE_FEATURE);\n  }\n catch (  SAXException exc) {\n    return false;\n  }\n}\n"}
{"nl": "Checks double parse", "code": "private void checkDouble(double expected,String string,int delta){\n  long expectedBits=Double.doubleToRawLongBits(expected);\n  BytesRef bytes=getBytes(string);\n  final double v;\n  try {\n    v=MathUtil.parseDouble(bytes.bytes,bytes.offset,bytes.length);\n  }\n catch (  Throwable t) {\n    throw new AssertionError(string + \" didn't parse to \" + expected+ \", instead hit \"+ t,t);\n  }\n  try {\n    long actualBits=Double.doubleToRawLongBits(v);\n    long actualDelta=Math.abs(expectedBits - actualBits);\n    if (actualDelta > delta) {\n      throw new AssertionError(\"expected: <\" + expectedBits + \"> but was:<\"+ actualBits+ \">\");\n    }\n  }\n catch (  Throwable t) {\n    throw new AssertionError(string + \" didn't parse to \" + expected+ \", instead: \"+ v,t);\n  }\n}\n"}
{"nl": "Converts year object representation to String", "code": "@Override protected String dateToString(DateTimeData date){\n  StringBuffer message=new StringBuffer(5);\n  append(message,date.year,4);\n  append(message,(char)date.utc,0);\n  return message.toString();\n}\n"}
{"nl": "Load CART from file for this Model", "code": "@Override protected void loadData() throws IOException, MaryConfigurationException {\n  cart=new DirectedGraphReader().load(dataStream);\n  try {\n    predictionFeatureNames=cart.getFeatureDefinition().getFeatureNames();\n  }\n catch (  NullPointerException e) {\n    throw new IOException(\"Could not get FeatureDefinition from CART\",e);\n  }\n  if (predictionFeatureNames.length() == 0) {\n    throw new IOException(\"Could not get prediction feature names\");\n  }\n}\n"}
{"nl": "Returns true if legion is in cached by id", "code": "public boolean contains(int legionId){\n  return legionsById.containsKey(legionId);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null;\n}\n"}
{"nl": "Create MainViewModel with preferences", "code": "public MainViewModel(AppPreferences preferences){\n  this.preferences=preferences;\n}\n"}
{"nl": "Implementation of the ObjectRenderer interface", "code": "@Override public String doRender(Object o){\n  if (o != null) {\n    if (o instanceof Alarm) {\n      Alarm alarm=(Alarm)o;\n      StringBuffer str=new StringBuffer();\n      str.append(alarm.getId());\n      str.append('\\t');\n      str.append(alarm.getTagId());\n      str.append('\\t');\n      str.append(alarm.getTimestamp());\n      str.append('\\t');\n      str.append(alarm.getFaultFamily());\n      str.append('\\t');\n      str.append(alarm.getFaultMember());\n      str.append('\\t');\n      str.append(alarm.getFaultCode());\n      str.append('\\t');\n      str.append(alarm.getState());\n      if (alarm.getInfo() != null) {\n        str.append('\\t');\n        str.append(alarm.getInfo());\n      }\n      return str.toString();\n    }\n else {\n      return o.toString();\n    }\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Determines the height of this view", "code": "private int measureHeight(int measureSpec){\n  return MeasureSpec.getSize(measureSpec);\n}\n"}
{"nl": "Transformation function for avoidance of truncated results by filter", "code": "private Map<String,List<ChartObject>> mapRevert(Map<String,List<ChartObject>> input){\n  Map<String,List<ChartObject>> result=new LinkedHashMap<>();\n  for (  Map.Entry<String,List<ChartObject>> entry : input.entrySet()) {\n    List<ChartObject> newOrder=Lists.newArrayList();\n    List<ChartObject> data=entry.getValue();\n    for (int i=(data.size() - 1); i >= 0; i--)     newOrder.add(data.get(i));\n    result.put(entry.getKey(),newOrder);\n  }\n  return result;\n}\n"}
{"nl": "Convert a matrix in to a buffereed image", "code": "public static BufferedImage toImage(INDArray matrix){\n  BufferedImage img=new BufferedImage(matrix.rows(),matrix.columns(),BufferedImage.TYPE_INT_ARGB);\n  WritableRaster r=img.getRaster();\n  int[] equiv=new int[matrix.length()];\n  for (int i=0; i < equiv.length; i++) {\n    equiv[i]=(int)matrix.getDouble(i);\n  }\n  r.setDataElements(0,0,matrix.rows(),matrix.columns(),equiv);\n  return img;\n}\n"}
{"nl": "Method used to configure component with specified config in parameter", "code": "public void configureWith(ComponentConfiguration config){\n  verifyIsDisplayed();\n  configure(config);\n  confirm();\n}\n"}
{"nl": "SM_SERVER_LIST call", "code": "public static void sendServerListFor(int accountId){\n  if (accountsOnLS.containsKey(accountId)) {\n    accountsOnLS.get(accountId).sendPacket(new SM_SERVER_LIST());\n  }\n}\n"}
{"nl": "Convert an input stream to an bgr spectrum image", "code": "public INDArray toBgr(File file){\n  try {\n    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));\n    INDArray ret=toBgr(bis);\n    bis.close();\n    return ret;\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "only main process can handle patch version change or incomplete", "code": "@Override public Intent tryLoad(TinkerApplication app,int tinkerFlag,boolean tinkerLoadVerifyFlag){\n  Intent resultIntent=new Intent();\n  long begin=SystemClock.elapsedRealtime();\n  tryLoadPatchFilesInternal(app,tinkerFlag,tinkerLoadVerifyFlag,resultIntent);\n  long cost=SystemClock.elapsedRealtime() - begin;\n  ShareIntentUtil.setIntentPatchCostTime(resultIntent,cost);\n  return resultIntent;\n}\n"}
{"nl": "Create an <code>unsigned byte</code>", "code": "private UByte(int value) throws NumberFormatException {\n  this.value=rangeCheck(value);\n}\n"}
{"nl": "This method will remove an item from the list", "code": "public void removeItem(int itemObjId){\n  if (items.containsKey(itemObjId)) {\n    LinkedHashMap<Integer,TradePSItem> newItems=new LinkedHashMap<Integer,TradePSItem>();\n    for (    int itemObjIds : items.keySet()) {\n      if (itemObjId != itemObjIds) {\n        newItems.put(itemObjIds,items.get(itemObjIds));\n      }\n    }\n    this.items=newItems;\n  }\n}\n"}
{"nl": "remove a collection of attributes", "code": "public void removeAttributes(Collection<String> attributes){\n  attributeOrder.removeAll(attributes);\n  attribute2type.keySet().removeAll(attributes);\n  for (  String attribute : attributes) {\n    table.removeColumn(attribute);\n  }\n}\n"}
{"nl": "Return only the current user's friends", "code": "public LikesGetListQueryWithExtended friendsOnly(Boolean value){\n  return unsafeParam(\"friends_only\",value);\n}\n"}
{"nl": "This method will handle the leveling up of a legion", "code": "private void requestChangeLevel(Player activePlayer){\n  if (legionRestrictions.canChangeLevel(activePlayer)) {\n    Legion legion=activePlayer.getLegion();\n    activePlayer.getInventory().decreaseKinah(legion.getKinahPrice());\n    changeLevel(legion,legion.getLegionLevel() + 1,false);\n    addHistory(legion,legion.getLegionLevel() + \"\",LegionHistoryType.LEVEL_UP);\n  }\n}\n"}
{"nl": "Private class Method", "code": "private void initNavHelper(Context context){\n  this.mContext=context;\n  this.mNavBean=new NavigatorBean();\n}\n"}
{"nl": "Return the \"likes\" field", "code": "public WallGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "helper method that returns current state of data structure used to track acks for batch messages", "code": "public boolean isBatchingAckTrackerEmpty(){\n  boolean state=true;\n  for (  Consumer consumer : consumers) {\n    state&=((ConsumerImpl)consumer).isBatchingAckTrackerEmpty();\n  }\n  return state;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public boolean hasDateAndTimeFields(){\n  int foundMask=0;\n  for (  Object item : this.items) {\n    if ((item instanceof DateTimePatternGenerator.VariableField)) {\n      int type=((DateTimePatternGenerator.VariableField)item).getType();\n      foundMask|=1 << type;\n    }\n  }\n  boolean isDate=(foundMask & 0x3FF) != 0;\n  boolean isTime=(foundMask & 0xFC00) != 0;\n  return (isDate) && (isTime);\n}\n"}
{"nl": "Returns true if field averageLoad is set (has been assigned a value) and false otherwise", "code": "public boolean isSetAverageLoad(){\n  return __isset_bit_vector.get(__AVERAGELOAD_ISSET_ID);\n}\n"}
{"nl": "merge RMA files", "code": "public static void main(String[] args){\n  try {\n    ProgramProperties.setProgramName(\"SAM2RMA6\");\n    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);\n    PeakMemoryUsageMonitor.start();\n    (new SAM2RMA6()).run(args);\n    System.err.println(\"Total time:  \" + PeakMemoryUsageMonitor.getSecondsSinceStartString());\n    System.err.println(\"Peak memory: \" + PeakMemoryUsageMonitor.getPeakUsageString());\n    System.exit(0);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n    System.exit(1);\n  }\n}\n"}
{"nl": "Method to convert pojo (Model obect) into json string", "code": "public static <T>String createJSONStringFromPojo(Context context,T data){\n  Gson gson=new Gson();\n  return gson.toJson(data);\n}\n"}
{"nl": "Creates a new scanner", "code": "public _DbLexer(java.io.Reader in){\n  this.zzReader=in;\n}\n"}
{"nl": "Paints a rendered device image into the given graphics context ", "code": "public static void paintClipped(@NotNull Graphics2D g,@NotNull BufferedImage image,@Nullable Device device,int x,int y,boolean withRetina){\n  Shape prevClip=null;\n  Shape clip=getClip(device,x,y,image.getWidth(),image.getHeight());\n  if (clip != null) {\n    prevClip=g.getClip();\n    g.setClip(clip);\n  }\n  if (withRetina) {\n    UIUtil.drawImage(g,image,x,y,null);\n  }\n else {\n    g.drawImage(image,x,y,null);\n  }\n  if (clip != null) {\n    g.setClip(prevClip);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesDeleteQuery(VkApiClient client,UserActor actor,int noteId){\n  super(client,\"notes.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n}\n"}
{"nl": "Apply some predicate on all group member's objects<br> Should be used only to change state of the group or its members", "code": "public void applyOnMembers(Predicate<M> predicate){\n  lock();\n  try {\n    for (    TM member : members.values()) {\n      if (!predicate.apply(member.getObject())) {\n        return;\n      }\n    }\n  }\n  finally {\n    unlock();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LeadsCompleteQuery(VkApiClient client,UserActor actor,String vkSid,String secret){\n  super(client,\"leads.complete\",Complete.class);\n  accessToken(actor.getAccessToken());\n  vkSid(vkSid);\n  secret(secret);\n}\n"}
{"nl": "multiplication operator", "code": "public Vector multiply(double factor){\n  return new Vector(x * factor,y * factor);\n}\n"}
{"nl": "Reason for the complaint", "code": "public WallReportCommentQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n"}
{"nl": "Required for Externalizable", "code": "public SpaceClusterInfo(){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedGetMentionsQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getMentions\",GetMentionsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Below method will be used to add the statistics", "code": "public synchronized void recordStatisticsForDriver(QueryStatistic statistic,String queryId){\n  if (queryStatisticsMap.get(queryId) != null) {\n    queryStatisticsMap.get(queryId).add(statistic);\n  }\n else {\n    List<QueryStatistic> newQueryStatistics=new ArrayList<QueryStatistic>();\n    newQueryStatistics.add(statistic);\n    queryStatisticsMap.put(queryId,newQueryStatistics);\n  }\n}\n"}
{"nl": "SCIPIO: Type conversion of Strings that resemble \"Y\" or \"N\" values to Boolean", "code": "public static boolean toBoolean(String indicator,boolean defaultVal){\n  Boolean result=toBoolean(indicator);\n  return result != null ? result : defaultVal;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsEditQuery(VkApiClient client,UserActor actor,int ownerId,int docId){\n  super(client,\"docs.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  docId(docId);\n}\n"}
{"nl": "notify that creature attacking", "code": "public void notifyAttackObservers(Creature creature){\n  notifyObservers(ObserverType.ATTACK,creature);\n}\n"}
{"nl": "Create a new node that is equivalent to that node", "code": "ParticipantHandle(TransactionParticipant preparedPart,long crashcount,StubId stubId,boolean persistent) throws RemoteException {\n  this(preparedPart,crashcount,stubId,persistent,-1,null,null);\n}\n"}
{"nl": "Check if element located by specified By locator exists in DOM", "code": "public static ExpectedCondition<Boolean> elementNotPresent(final By bySelector){\n  return null;\n}\n"}
{"nl": "Set device id", "code": "protected AccountSetPushSettingsQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n"}
{"nl": "function for reading the gallery files and folders and setting custom adapter for gallery grid view", "code": "private void populateChildGallery(){\n  ArrayList<DataHolder> files=readGallery((GalleryActivity)getActivity());\n  System.gc();\n  mGalleryAdapter=new GalleryAdapter(getActivity(),R.layout.gridview_child_gallery_item,mGalleryType,files,mCacheManager,myContext.getFilePathsList(),myContext.getMaxPhoto());\n  mGalleryAdapter.setPhotoClickListener((GalleryActivity)getActivity());\n  mGalleryView.setAdapter(mGalleryAdapter);\n}\n"}
{"nl": "delete task", "code": "@Override public boolean onOptionsItemSelected(MenuItem item){\nswitch (item.getItemId()) {\ncase R.id.task_delete_multi:\n    ArrayList<Selectable> list=new ArrayList<>(mTaskAdapter.getItemCount());\n  for (  Task task : mTaskAdapter.getDateSet()) {\n    list.add(new Selectable(false,false,task.getTitle()));\n  }\nSelectDialogFragment fragment=SelectDialogFragment.newInstance(list,R.string.task_delete_multi);\nfragment.show(getFragmentManager(),null);\nbreak;\n}\nreturn super.onOptionsItemSelected(item);\n}\n"}
{"nl": "Save fingerprint to a file", "code": "public void saveFingerprintAsFile(byte[] fingerprint,String filename){\n  FileOutputStream fileOutputStream;\n  try {\n    fileOutputStream=new FileOutputStream(filename);\n    fileOutputStream.write(fingerprint);\n    fileOutputStream.close();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Register all the bootstrap name spaces including the heartbeat namespace", "code": "public void registerBootstrapNamespaces() throws PulsarServerException {\n  if (registerNamespace(getHeartbeatNamespace(host,config),true)) {\n    this.uncountedNamespaces++;\n    LOG.info(\"added heartbeat namespace name in local cache: ns={}\",getHeartbeatNamespace(host,config));\n  }\n  for (  String namespace : config.getBootstrapNamespaces()) {\n    if (registerNamespace(namespace,false)) {\n      LOG.info(\"added bootstrap namespace name in local cache: ns={}\",namespace);\n    }\n  }\n}\n"}
{"nl": "create reflexive rule R(from: X, to: X) :- R(from: X,to: Y)", "code": "public static Rule createReflexiveRule(String ruleId,RelationType relType,MindmapsGraph graph){\n  final int arity=relType.hasRoles().size();\n  if (arity != 2)   throw new IllegalArgumentException(ErrorMessage.RULE_CREATION_ARITY_ERROR.getMessage());\n  String body=Graql.var().isa(relType.getId()).rel(\"x\").rel(\"y\").toString() + \";\";\n  String head=Graql.var().isa(relType.getId()).rel(\"x\").rel(\"x\").toString() + \";\";\n  return graph.putRule(ruleId,body,head,graph.getMetaRuleInference());\n}\n"}
{"nl": "Helper method, used to kick account from any gameServer if it's logged in", "code": "public static void kickAccountFromGameServer(Account account){\n  for (  GameServerInfo gsi : getGameServers()) {\n    if (gsi.isAccountOnGameServer(account.getId())) {\n      gsi.getConnection().sendPacket(new SM_REQUEST_KICK_ACCOUNT(account.getId()));\n      break;\n    }\n  }\n}\n"}
{"nl": "stop indicate", "code": "public boolean disableCharacteristicIndicate(){\n  return disableCharacteristicIndicate(getCharacteristic());\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final Object choice=JOptionPane.showInputDialog(getViewer().getFrame(),\"Choose node shape\",\"MEGAN - Choose\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),SHAPES,SHAPES[0]);\n  if (choice != null)   execute(\"set nodeShape=\" + choice.toString() + \";\");\n}\n"}
{"nl": "Register the DataVec writable classes for Kryo", "code": "public static void registerKryoClasses(SparkConf conf){\n  List<Class<?>> classes=Arrays.asList((Class<?>)BooleanWritable.class,ByteWritable.class,DoubleWritable.class,FloatWritable.class,IntWritable.class,LongWritable.class,NullWritable.class,Text.class);\n  conf.registerKryoClasses((Class<?>[])classes.toArray());\n}\n"}
{"nl": "change each variable occurrence in the query (apply unifier [from/to])", "code": "public void unify(String from,String to){\n  Set<Atomic> toRemove=new HashSet<>();\n  Set<Atomic> toAdd=new HashSet<>();\n  atomSet.stream().filter(null).forEach(null);\n  toRemove.forEach(null);\n  toRemove.forEach(null);\n  toAdd.forEach(null);\n  toAdd.forEach(null);\n  Map<String,String> mapping=new HashMap<>();\n  mapping.put(from,to);\n  updateSelectedVars(mapping);\n}\n"}
{"nl": "QR scan result", "code": "public void handleDecode(String result){\n  playBeepSoundAndVibrate();\n  Toast.makeText(MyApplication.getContext(),result,Toast.LENGTH_SHORT).show();\n  restartQr();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  final RemoteServiceBrowser remoteServiceBrowser=(RemoteServiceBrowser)getViewer();\n  final ServicePanel servicePanel=remoteServiceBrowser.getServicePanel();\n  if (servicePanel != null) {\n    final Collection<String> selectedFiles=remoteServiceBrowser.getServicePanel().getSelectedFiles();\n    final StringBuilder buf=new StringBuilder();\n    int count=0;\n    Set<String> openFiles=servicePanel.getCurrentlyOpenRemoteFiles();\n    for (    String fileName : selectedFiles) {\n      if (openFiles.contains(fileName)) {\n        buf.append(\"toFront file='\").append(fileName).append(\"';\");\n      }\n else {\n        buf.append(\"open file='\").append(fileName).append(\"' readOnly=true;\");\n        count++;\n      }\n    }\n    if (count > 10) {\n      if (JOptionPane.showConfirmDialog(remoteServiceBrowser.getFrame(),\"Do you really want to open \" + count + \" new files?\",\"Confirm\",JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)       return;\n    }\n    execute(buf.toString());\n  }\n}\n"}
{"nl": "Create an AggregateConfig", "code": "public AggregateConfig(Configuration config,String[] configArgs) throws ConfigurationException {\n  specific=ConfigurationProvider.getInstance(configArgs);\n  common=config;\n}\n"}
{"nl": "all the library files in meta file exist? fast check, only check whether exist", "code": "public static boolean checkComplete(String directory,ShareSecurityCheck securityCheck,Intent intentResult){\n  String meta=securityCheck.getMetaContentMap().get(SO_MEAT_FILE);\n  if (meta == null) {\n    return true;\n  }\n  ArrayList<ShareBsDiffPatchInfo> libraryList=new ArrayList<>();\n  ShareBsDiffPatchInfo.parseDiffPatchInfo(meta,libraryList);\n  if (libraryList.isEmpty()) {\n    return true;\n  }\n  String libraryPath=directory + \"/\" + SO_PATH+ \"/\";\n  HashMap<String,String> libs=new HashMap<>();\n  for (  ShareBsDiffPatchInfo info : libraryList) {\n    if (!ShareBsDiffPatchInfo.checkDiffPatchInfo(info)) {\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_PACKAGE_PATCH_CHECK,ShareConstants.ERROR_PACKAGE_CHECK_LIB_META_CORRUPTED);\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_PACKAGE_CHECK_FAIL);\n      return false;\n    }\n    String middle=info.path + \"/\" + info.name;\n    libs.put(middle,info.md5);\n  }\n  File libraryDir=new File(libraryPath);\n  if (!libraryDir.exists() || !libraryDir.isDirectory()) {\n    ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_LIB_DIRECTORY_NOT_EXIST);\n    return false;\n  }\n  for (  String relative : libs.keySet()) {\n    File libFile=new File(libraryPath + relative);\n    if (!libFile.exists()) {\n      ShareIntentUtil.setIntentReturnCode(intentResult,ShareConstants.ERROR_LOAD_PATCH_VERSION_LIB_FILE_NOT_EXIST);\n      intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISSING_LIB_PATH,libFile.getAbsolutePath());\n      return false;\n    }\n  }\n  intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_LIBS_PATH,libs);\n  return true;\n}\n"}
{"nl": "Dump the CARTs in MaryCART format", "code": "public void dumpMaryCART(CART cart,String destFile) throws IOException {\n  if (cart == null)   throw new NullPointerException(\"Cannot dump null CART\");\n  if (destFile == null)   throw new NullPointerException(\"No destination file\");\n  Log.d(Mary.LOG,\"Dumping CART in MaryCART format to \" + destFile + \" ...\");\n  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destFile)));\n  MaryHeader hdr=new MaryHeader(MaryHeader.CARTS);\n  hdr.writeTo(out);\n  Properties props=cart.getProperties();\n  if (props == null) {\n    out.writeShort(0);\n  }\n else {\n    ByteArrayOutputStream baos=new ByteArrayOutputStream();\n    props.store(baos,null);\n    byte[] propData=baos.toByteArray();\n    out.writeShort(propData.length);\n    out.write(propData);\n  }\n  cart.getFeatureDefinition().writeBinaryTo(out);\n  dumpBinary(cart.getRootNode(),out);\n  out.close();\n  Log.d(Mary.LOG,\" ... done\\n\");\n}\n"}
{"nl": "Decodes image file into Bitmap, resize it and save it back", "code": "private boolean resizeAndSaveImage(File targetFile,int maxWidth,int maxHeight) throws IOException {\n  boolean saved=false;\n  ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);\n  DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();\n  ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,ImageDownloader.Scheme.FILE.wrap(targetFile.getAbsolutePath()),targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);\n  Bitmap bmp=decoder.decode(decodingInfo);\n  if (bmp != null && configuration.processorForDiscCache != null) {\n    log(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISC);\n    bmp=configuration.processorForDiscCache.process(bmp);\n    if (bmp == null) {\n      L.e(ERROR_PROCESSOR_FOR_DISC_CACHE_NULL,memoryCacheKey);\n    }\n  }\n  if (bmp != null) {\n    OutputStream os=new BufferedOutputStream(new FileOutputStream(targetFile),BUFFER_SIZE);\n    try {\n      bmp.compress(configuration.imageCompressFormatForDiscCache,configuration.imageQualityForDiscCache,os);\n    }\n  finally {\n      IoUtils.closeSilently(os);\n    }\n    bmp.recycle();\n  }\n  return true;\n}\n"}
{"nl": "goto the first object", "code": "public boolean gotoFirst(){\n  countCurrent=0;\n  if (!searchInCollapsed) {\n    final List<Integer> list=classificationViewer.computeDisplayedIdsInSearchOrder();\n    currentIterator=list.iterator();\n    numberOfObjects=list.size();\n  }\n else {\n    final List<Integer> list=classificationViewer.computeAllIdsInSearchOrder();\n    currentIterator=list.iterator();\n    numberOfObjects=list.size();\n  }\n  currentId=(currentIterator.hasNext() ? currentIterator.next() : null);\n  return isCurrentSet();\n}\n"}
{"nl": "modify appender file to storage server (by file buff)", "code": "public int modify_file1(String appender_file_id,long file_offset,byte[] file_buff) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.modify_file(parts[0],parts[1],file_offset,file_buff);\n}\n"}
{"nl": "Test that we don't download on every request", "code": "public void testCache() throws Exception {\n  FileDownloader downloader=Mockito.mock(FileDownloader.class);\n  Mockito.when(downloader.download(Matchers.any(File.class))).thenReturn(ImmutableList.of(Pair.create(myDistributionFile,myDescription)));\n  DistributionService service=new DistributionService(downloader,CACHE_PATH,myDistributionFileUrl);\n  service.getSupportedDistributionForApiLevel(19);\n  service.getDistributionForApiLevel(21);\n  Mockito.verify(downloader).download(Matchers.any(File.class));\n}\n"}
{"nl": "Set comments disabled", "code": "public PhotosCreateAlbumQuery commentsDisabled(Boolean value){\n  return unsafeParam(\"comments_disabled\",value);\n}\n"}
{"nl": "Creates the default cumulative probability density test input values", "code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n"}
{"nl": "Updates the view associated to the activity after the finish of an operation trying create a new folder", "code": "private void onCreateFolderOperationFinish(CreateFolderOperation operation,RemoteOperationResult result){\n  if (result.isSuccess()) {\n    String remotePath=operation.getRemotePath().substring(0,operation.getRemotePath().length() - 1);\n    String newFolder=remotePath.substring(remotePath.lastIndexOf(\"/\") + 1);\n    mParents.push(newFolder);\n    populateDirectoryList();\n  }\n else {\n    try {\n      Toast msg=Toast.makeText(this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);\n      msg.show();\n    }\n catch (    NotFoundException e) {\n      Log_OC.e(TAG,\"Error while trying to show fail message \",e);\n    }\n  }\n}\n"}
{"nl": "Save version value in local cache", "code": "private void putLocalVersioned(SpaceMapEntry newEnvelope,Object key,Object value,CacheEntry cacheEntry){\n  VersionCacheEntry versionEntry=new VersionCacheEntry(newEnvelope.getVersion());\n  boolean replaced=_cache.replace(key,versionEntry,cacheEntry);\n  if (!versionEntry.isChecked() && _putFirst) {\n    if (_cache.size() >= _sizeLimit)     _evictionStrategy.evict(this);\n    Object old=_cache.putIfAbsent(key,cacheEntry);\n    if (old != null) {\n      replaced=_cache.replace(key,versionEntry,cacheEntry);\n    }\n  }\n  if (replaced) {\n    Object entry=versionEntry.getOldEntry();\n    if (!(entry instanceof DummyCacheEntry))     _evictionStrategy.discardEntry((CacheEntry)entry);\n  }\n}\n"}
{"nl": "Push a mode onto the stack", "code": "private boolean push(byte mode){\n  ++top;\n  if (top >= stack.length) {\n    if (top >= depth) {\n      return false;\n    }\n    stack=Arrays.copyOf(stack,Math.min(stack.length * 2,depth));\n  }\n  stack[top]=mode;\n  return true;\n}\n"}
{"nl": "closes the accessor", "code": "public void close(){\n  if (textStorageReader != null)   textStorageReader.closeAllFiles();\n  if (dataIndexReader != null)   try {\n    dataIndexReader.close();\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "add all given splits that are not already present (as splits, ignoring weights etc)", "code": "public int addAll(SplitSystem splits){\n  int count=0;\n  for (Iterator it=splits.iterator(); it.hasNext(); ) {\n    Split split=(Split)it.next();\n    if (!split2index.keySet().contains(split)) {\n      addSplit(split);\n      count++;\n    }\n  }\n  return count;\n}\n"}
{"nl": "construct a parser and load all commands found for the given path", "code": "public CommandManagerFX(IDirector dir,IDirectableViewer viewer,String commandsPath){\n  this(dir,viewer,new String[]{commandsPath},false);\n}\n"}
{"nl": "Will be called by ZoneManager when creature enters specific zone", "code": "public void onEnterZone(ZoneInstance zoneInstance){\n}\n"}
{"nl": "length of array (file length/4)", "code": "@Override public long limit(){\n  return fileLength >>> 2;\n}\n"}
{"nl": "Create an <code>unsigned byte</code>", "code": "private UByte(long value) throws NumberFormatException {\n  this.value=rangeCheck(value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetAllQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAll\",GetAllResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Search in the game tree the best move using minimax with alpha beta pruning", "code": "public M best(final G game,final IMoveGenerator<M,G> generator,int depthmax) throws TimeoutException {\n  try {\n    this.depthmax=depthmax;\n    final MinMaxEvaluatedMove best=minimax(game,generator,depthmax,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,game.currentPlayer() == 0,killer);\n    killer=best;\n    return best.getMove();\n  }\n catch (  final AlphaBetaPrunningException e) {\n    throw new RuntimeException(\"evaluated move found with value not between + infinity and - infinity...\");\n  }\n}\n"}
{"nl": "adds any needed field inits", "code": "private void handleFieldInits(soot.SootMethod sootMethod){\n  ArrayList<FieldDecl> fieldInits=((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).getFieldInits();\n  if (fieldInits != null) {\n    handleFieldInits(fieldInits);\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=previous;\");\n}\n"}
{"nl": "Called after target member is removed", "code": "public void afterMemberRemoved(MemberRemovedEvent memberRemovedEvent){\n}\n"}
{"nl": "IO combining two paths", "code": "private static String joinPath(String path1,String path2){\n  File file1=new File(path1);\n  File file2=new File(file1,path2);\n  return file2.getPath();\n}\n"}
{"nl": "If the Android version is higher than KitKat(API>=19) <br> use this call to show & hide", "code": "@SuppressLint(\"NewApi\") public final void makeFullScreenAfterKitKat(boolean enable){\n  try {\n    View decorView=getWindow().getDecorView();\n    if (enable) {\n      int uiOptionsEnable=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n      decorView.setSystemUiVisibility(uiOptionsEnable);\n    }\n else {\n      int uiOptionsDisable=View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n      decorView.setSystemUiVisibility(uiOptionsDisable);\n    }\n  }\n catch (  Exception e) {\n    WindowManager.LayoutParams lp=getWindow().getAttributes();\n    if (enable) {\n      lp.flags|=WindowManager.LayoutParams.FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;\n    }\n else {\n      lp.flags&=(~WindowManager.LayoutParams.FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n    }\n    getWindow().setAttributes(lp);\n  }\n}\n"}
{"nl": "Fetch some configs", "code": "@RequestMapping(value=ClientUris.CONFIG_FETCHES,method=RequestMethod.GET) public List<ConfigItem> fetches(@RequestParam(\"names\") String names){\n  ClientSession client=ClientContext.get();\n  assert client != null;\n  List<String> nameList=Splitters.COMMA.splitToList(names);\n  Response<List<Config>> configsResp=configService.findByNames(client.getAppId(),nameList);\n  if (!configsResp.isSuccess()) {\n    Logs.error(\"failed to fetch configs(names={}), cause: {}\",names,configsResp.getErr());\n    return Collections.emptyList();\n  }\n  return ConfigItemFactory.creates(configsResp.getData());\n}\n"}
{"nl": "Returns a copy of this object", "code": "public SaveHeaderGroup copy(){\n  SaveHeaderGroup clone=new SaveHeaderGroup();\n  clone.headers.addAll(this.headers);\n  return clone;\n}\n"}
{"nl": "Writes elements of the resultMap to output file, one line for each element, where each line is a string representation of the corresponding QueryResponseJSON object", "code": "public static void writeResultFile(File file,Map<String,List<QueryResponseJSON>> resultMap) throws IOException {\n  try (BufferedWriter bw=new BufferedWriter(new FileWriter(file))){\n    for (    Entry<String,List<QueryResponseJSON>> entry : resultMap.entrySet()) {\n      for (      QueryResponseJSON hitJSON : entry.getValue()) {\n        bw.write(hitJSON.getJSONString());\n        bw.newLine();\n      }\n    }\n  }\n }\n"}
{"nl": "Dumps out the component tree, recursively", "code": "public static String toTree(@NotNull List<NlComponent> roots){\n  return toTree(roots,false);\n}\n"}
{"nl": "Informs the scheduler, that next time it wakes up, it should send the value of the source data tag", "code": "public void scheduleValueForSending(){\n  this.sendValue=true;\n}\n"}
{"nl": "Call to upload a new single file", "code": "public void uploadNewFile(Context context,Account account,String localPath,String remotePath,int behaviour,String mimeType,boolean createRemoteFile,int createdBy){\n  uploadNewFile(context,account,new String[]{localPath},new String[]{remotePath},new String[]{mimeType},behaviour,createRemoteFile,createdBy);\n}\n"}
{"nl": "Is VanillaDB initialized ?", "code": "public static boolean isInited(){\n  return inited;\n}\n"}
{"nl": "Transforms array of String objects to Set", "code": "public static Set<String> convertArrayToSet(String[] array){\n  Set<String> resultSet=new HashSet<String>(array.length);\n  Collections.addAll(resultSet,array);\n  return resultSet;\n}\n"}
{"nl": "load a file of synonyms", "code": "public void loadFile(IName2IdMap label2id,String fileName,ProgressListener progressListener) throws IOException, CanceledException {\n  System.err.println(\"Loading map from file: \" + fileName);\n  FileInputIterator it=new FileInputIterator(new InputStreamReader(ResourceManager.getFileAsStream(fileName)),fileName);\n  it.setSkipCommentLines(true);\n  it.setSkipEmptyLines(true);\n  progressListener.setProgress(0);\n  progressListener.setMaximum(it.getMaximumProgress());\n  try {\n    while (it.hasNext()) {\n      String aLine=it.next();\n      String[] tokens=aLine.split(\"\\t\");\n      if (tokens.length >= 2) {\n        final Integer id;\n        if (Basic.isInteger(tokens[1])) {\n          id=Basic.parseInt(tokens[1]);\n        }\n else {\n          id=label2id.get(tokens[1]);\n        }\n        if (id != 0)         put(tokens[0],id);\n else         System.err.println(\"Line \" + it.getLineNumber() + \": invalid id: \"+ tokens[1]);\n      }\n else {\n        throw new IOException(\"Loading synonyms-to-id file, line: \" + it.getLineNumber() + \": expected two entries separated by a tab,  got: <\"+ aLine+ \">\");\n      }\n      progressListener.setProgress(it.getProgress());\n    }\n  }\n  finally {\n    it.close();\n    System.err.println(\"Lines loaded: \" + size());\n  }\n}\n"}
{"nl": "does file have  a data connector associated with it", "code": "public boolean hasDataConnector(){\n  return fileName != null && fileName.length() > 0 && (fileType.toString().startsWith(\"RMA\") || fileType.toString().startsWith(\"DAA\") || fileType == Type.MEGAN_SERVER_FILE);\n}\n"}
{"nl": "Pre-allocate a ServiceUnit to this ResourceUnit", "code": "public void addPreAllocatedServiceUnit(String suName,ResourceQuota quota){\n  this.preAllocatedBundles.add(suName);\n  this.preAllocatedQuota.add(quota);\n  estimateLoadPercentage();\n}\n"}
{"nl": "Clear failReference collections by specified launch id", "code": "private void clearIssueReferences(String launchId){\n  List<FailReferenceResource> issues=issuesRepository.findAllLaunchIssues(launchId);\n  issuesRepository.delete(issues);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public ComposedCharIter(boolean compat,int options){\n  if (compat) {\n    this.n2impl=Norm2AllModes.getNFKCInstance().impl;\n  }\n else {\n    this.n2impl=Norm2AllModes.getNFCInstance().impl;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetLastActivityQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"messages.getLastActivity\",LastActivity.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "Show a list of fields and values of them for user to confirm", "code": "public static int confirmValues(String confirmTitle,String[] titles,String[] values){\n  if (titles.length == 0 || (titles.length != values.length)) {\n    return -1;\n  }\n  JTable table=new JTable();\n  table.setModel(new DefaultTableModel(new Object[][]{},new String[]{\" \",\" \"}));\n  SwingUtil.TableUtil.ensureRowNumber(table,titles.length);\n  for (int i=0; i < titles.length; i++) {\n    table.setValueAt(titles[i],i,0);\n    table.setValueAt(values[i],i,1);\n  }\n  JScrollPane mainPanel=new JScrollPane(table);\n  return JOptionPane.showConfirmDialog(null,mainPanel,confirmTitle,JOptionPane.YES_NO_OPTION);\n}\n"}
{"nl": "Create and load the data and query schema files used for testing", "code": "public static void createSchemaFiles(String filter) throws Exception {\n  createSchemaFiles(null,false,filter);\n}\n"}
{"nl": "add shadow view on the left of content view", "code": "private void addShadowView(){\n  if (mShadowView == null) {\n    mShadowView=new ShadowView(getContext());\n    mShadowView.setX(-SHADOW_WIDTH);\n  }\n  final FrameLayout.LayoutParams layoutParams=new FrameLayout.LayoutParams(SHADOW_WIDTH,FrameLayout.LayoutParams.MATCH_PARENT);\n  final FrameLayout contentView=mCurrentContentView;\n  contentView.addView(mShadowView,1,layoutParams);\n}\n"}
{"nl": "Test +-->Task1 Start-<> +-->Task1 process on PROCESS_COMPLETED event", "code": "@Deployment(resources={\"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.parallelGatewayNoEndProcess.bpmn20.xml\"}) public void testProcessCompleted_ParallelGatewayNoEnd() throws Exception {\n  this.runtimeService.startProcessInstanceByKey(\"noEndProcess\");\n  assertEquals(\"ActivitiEventType.PROCESS_COMPLETED was expected 1 time.\",1,listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());\n}\n"}
{"nl": "Exercises the xxxFileContents hack, for a char filter", "code": "public void testMappingCharFilter() throws Exception {\n  send(\"analyze\",\"{text: foo bar, analyzer: {charFilters: [{class: Mapping, mappingFileContents: '\\\"bar\\\" => \\\"foo\\\"'}], tokenizer: Whitespace}}\");\n  assertEquals(\"foo foo\",justTokens());\n}\n"}
{"nl": "Clear only items (exclude all insertions)", "code": "public void clearOnlyItems(){\n  List<Insertion> insertions=new ArrayList<>();\n  insertions.addAll(getHeaders());\n  insertions.addAll(getOnlyInsertions());\n  insertions.addAll(getFooters());\n  mInserts.clear();\n  getItems().clear();\n  mOnlyItemsCount=0;\n  reAddAllInserts(insertions);\n  notifyIfNeed();\n}\n"}
{"nl": "process the utterance", "code": "@Override public void processUtterance(Utterance utterance) throws ProcessException {\n  Relation tokenRelation;\n  if ((tokenRelation=utterance.getRelation(Relation.TOKEN)) == null) {\n    throw new IllegalStateException(\"TokenToWords: Token relation does not exist\");\n  }\n  WordRelation wordRelation=WordRelation.createWordRelation(utterance,this);\n  for (Item tokenItem=tokenRelation.getHead(); tokenItem != null; tokenItem=tokenItem.getNext()) {\n    FeatureSet featureSet=tokenItem.getFeatures();\n    String tokenVal=featureSet.getString(\"name\");\n    tokenToWords(wordRelation,tokenItem,tokenVal);\n  }\n}\n"}
{"nl": "Get all wishlist components using a specific db instance", "code": "public WishlistComponentCursor queryWishlistsComponent(SQLiteDatabase db){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=false;\n  qh.Table=S.TABLE_WISHLIST_COMPONENT;\n  qh.Columns=null;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  SQLiteQueryBuilder qb=builderWishlistComponent();\n  Cursor cursor=qb.query(db,qh.Columns,qh.Selection,qh.SelectionArgs,qh.GroupBy,qh.Having,qh.OrderBy,qh.Limit);\n  return new WishlistComponentCursor(cursor);\n}\n"}
{"nl": "Just for backwards compatibility with workspaces stored with previous version", "code": "private void readFromVersion2Stream(StatusFromBytesStream dis) throws IOException {\n  readFromVersion1Stream(dis);\n  lockOwner=dis.readUTF();\n  if (lockOwner.equals(\"\"))   lockOwner=null;\n  lockCreationDate=dis.readLong();\n  lockComment=dis.readUTF();\n  if (lockComment.equals(\"\"))   lockComment=null;\n  readOnly=dis.readBoolean();\n}\n"}
{"nl": "Checks that the eigen decomposition of a general (unsymmetric) matrix is valid by checking: A*V = V*D", "code": "private void checkUnsymmetricMatrix(final RealMatrix m){\n  try {\n    EigenDecomposition ed=new EigenDecomposition(m);\n    RealMatrix d=ed.getD();\n    RealMatrix v=ed.getV();\n    RealMatrix x=m.multiply(v);\n    RealMatrix y=v.multiply(d);\n    double diffNorm=x.subtract(y).getNorm();\n    Assert.assertTrue(\"The norm of (X-Y) is too large: \" + diffNorm + \", matrix=\"+ m.toString(),x.subtract(y).getNorm() < 1000 * Precision.EPSILON * FastMath.max(x.getNorm(),y.getNorm()));\n    RealMatrix invV=new LUDecomposition(v).getSolver().getInverse();\n    double norm=v.multiply(d).multiply(invV).subtract(m).getNorm();\n    Assert.assertEquals(0.0,norm,1.0e-10);\n  }\n catch (  Exception e) {\n    Assert.fail(\"Failed to create EigenDecomposition for matrix \" + m.toString() + \", ex=\"+ e.toString());\n  }\n}\n"}
{"nl": "Invoked after bulk execution in EDS to update mirror statistics", "code": "private void afterSuccessfulBulkExecution(IReplicationInBatchContext context){\n  if (_operationStatisticsHandler != null) {\n    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());\n    List<BulkItem> bulk=context.getPendingContext();\n    sourceChannelStatistics.addSuccessfulOperationCount(bulk);\n  }\n}\n"}
{"nl": "Sticker id", "code": "public MarketCreateCommentQuery stickerId(Integer value){\n  return unsafeParam(\"sticker_id\",value);\n}\n"}
{"nl": "Outputs a debug message if debugging is turned on", "code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n"}
{"nl": "Returns if the resource has a remote counter-part", "code": "public boolean hasRemote(){\n  return org.tigris.subversion.svnclientadapter.utils.SVNStatusUtils.hasRemote(this);\n}\n"}
{"nl": "Helper method to create a <code>TransferTagImpl</code> test object", "code": "private static TransferTagImpl createTagForValue(final Object tagValue){\n  DataTagQualityImpl tagQuality=new DataTagQualityImpl(TagQualityStatus.PROCESS_DOWN,\"Process Down\");\n  Timestamp sourceTimestamp=new Timestamp(System.currentTimeMillis());\n  Timestamp daqTimestamp=new Timestamp(System.currentTimeMillis());\n  Timestamp serverTimestamp=new Timestamp(System.currentTimeMillis());\n  String descr=\"Test transfer tag\";\n  String valDesc=\"Test val desc \\n \\t { \\\"test\\\" : \\\"1212\\\"}\\n}\";\n  String tagName=\"tag:name\";\n  String topicName=\"topic:name\";\n  TransferTagImpl transferTag=new TransferTagImpl(1234L,tagValue,valDesc,tagQuality,TagMode.TEST,sourceTimestamp,daqTimestamp,serverTimestamp,descr,tagName,topicName);\n  transferTag.addEquipmentIds(Arrays.asList(234L,4234L,234L));\n  transferTag.addSubEquipmentIds(Arrays.asList(1234L,14234L,1234L));\n  transferTag.addProcessIds(Arrays.asList(123L,3214L,123L));\n  transferTag.setValueClassName(tagValue.getClass().getName());\n  return transferTag;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveRemoveGroupQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"fave.removeGroup\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  super.destroyView();\n}\n"}
{"nl": "Enable logs on development", "code": "public static void enableLogs(){\n  verbose=true;\n}\n"}
{"nl": "Allows to load an image with Glide", "code": "public static void loadImage(final Context _context,final ImageView _imageView,final String _imageUrl,final int _placeHolderResource){\n  getBitmapLoader(_context,_imageUrl,_placeHolderResource).centerCrop().into(_imageView);\n}\n"}
{"nl": "Connect to the peer with the same token, in order to start the warm up process", "code": "private void startPeerSync(String peer,int port){\n  boolean isDone=false;\n  localRedisConnect();\n  while (!isDone) {\n    try {\n      isDone=(this.localJedis.slaveof(peer,port) != null);\n      sleeper.sleepQuietly(1000);\n    }\n catch (    Exception e) {\n      localRedisConnect();\n    }\n  }\n}\n"}
{"nl": "Hashcode method - keep consistent with equals()!", "code": "@Override public int hashCode(){\n  return this.id.hashCode();\n}\n"}
{"nl": "Creates a new instance of the MethodSourceSinkDefinition class", "code": "public SourceSinkDefinition(SootMethodAndClass am){\n  this(am,null,null,null);\n}\n"}
{"nl": "Creates an observable only for the child removed method", "code": "public Observable<FirebaseChildEvent> observeChildRemoved(final Query firebaseRef){\n  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.REMOVED));\n}\n"}
{"nl": "Remove an unused transaction from handled transactions", "code": "public void removeUnusedTransaction(XtnEntry xtnEntry,boolean needLock){\n  try {\n    if (needLock)     xtnEntry.lock();\n    if (((ConcurrentHashMap<ServerTransaction,XtnEntry>)getXtnTable()).remove(xtnEntry.m_Transaction,xtnEntry))     m_TimedXtns.remove(xtnEntry.m_Transaction);\n  }\n  finally {\n    if (needLock)     xtnEntry.unlock();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetQuery(VkApiClient client){\n  super(client,\"users.get\",Utils.buildParametrizedType(List.class,UserXtrCounters.class));\n}\n"}
{"nl": "create a sam line", "code": "public static void createSAM(DAAParser daaParser,DAAMatchRecord matchRecord,ByteOutputBuffer buffer,byte[] queryAlphabet){\n  buffer.write(matchRecord.getQueryRecord().getQueryName());\n  buffer.writeString(\"\\t0\\t\");\n  buffer.write(matchRecord.getSubjectName());\n  buffer.writeString(String.format(\"\\t%d\\t255\\t\",matchRecord.getSubjectBegin() + 1));\n  writeCigar(matchRecord,buffer);\n  buffer.writeString(\"\\t*\\t0\\t0\\t\");\n  buffer.write(Translator.translate(matchRecord.getQuery(),queryAlphabet,matchRecord.getTranslatedQueryBegin(),matchRecord.getTranslatedQueryLen()));\n  buffer.writeString(\"\\t*\\t\");\n  float bitScore=daaParser.getHeader().computeAlignmentBitScore(matchRecord.getScore());\n  float evalue=daaParser.getHeader().computeAlignmentExpected(matchRecord.getQuery().length,matchRecord.getScore());\n  int percentIdentity=Utilities.computePercentIdentity(matchRecord);\n  int blastFrame=computeBlastFrame(matchRecord.getFrame());\n  buffer.writeString(String.format(\"AS:i:%d\\tNM:i:%d\\tZL:i:%d\\tZR:i:%d\\tZE:f:%.1e\\tZI:i:%d\\tZF:i:%d\\tZS:i:%d\\tMD:Z:\",(int)bitScore,matchRecord.getLen() - matchRecord.getIdentities(),matchRecord.getTotalSubjectLen(),matchRecord.getScore(),evalue,percentIdentity,blastFrame,matchRecord.getQueryBegin() + 1));\n  writeMD(matchRecord,buffer,queryAlphabet);\n  buffer.write((byte)'\\n');\n}\n"}
{"nl": "creates soot params from polyglot formals", "code": "private ArrayList createParameters(polyglot.ast.ProcedureDecl procedure){\n  ArrayList parameters=new ArrayList();\n  Iterator formalsIt=procedure.formals().iterator();\n  while (formalsIt.hasNext()) {\n    polyglot.ast.Formal next=(polyglot.ast.Formal)formalsIt.next();\n    parameters.add(Util.getSootType(next.type().type()));\n  }\n  return parameters;\n}\n"}
{"nl": "ths method should be called in Application onCreate method", "code": "public void init(Context context){\n  boolean isNightModel=PersistenceUtils.isNightModel(context);\n  AppCompatDelegate.setDefaultNightMode(isNightModel ? AppCompatDelegate.MODE_NIGHT_YES : AppCompatDelegate.MODE_NIGHT_NO);\n}\n"}
{"nl": "Start cluster", "code": "protected void startBookKeeper() throws Exception {\n  zkc=MockZooKeeper.newInstance();\n  for (int i=0; i < numBookies; i++) {\n    ZkUtils.createFullPathOptimistic(zkc,\"/ledgers/available/192.168.1.1:\" + (5000 + i),\"\".getBytes(),null,null);\n  }\n  zkc.create(\"/ledgers/LAYOUT\",\"1\\nflat:1\".getBytes(),null,null);\n  bkc=new MockBookKeeper(baseClientConf,zkc);\n}\n"}
{"nl": "/*     ", "code": "@deprecated public String toString(){\n  return this.string;\n}\n"}
{"nl": "Compare two arrays of values - only the group by columns are compared", "code": "public int compare(IEntryPacket e1,IEntryPacket e2){\n  if (e1 == null) {\n    if (e2 == null)     return 0;\n    return -1;\n  }\n  if (e2 == null)   return 1;\n  int rc=0;\n  JoinedEntry j1=(JoinedEntry)e1;\n  JoinedEntry j2=(JoinedEntry)e2;\n  for (int i=0; i < groupColumns.size(); i++) {\n    SelectColumn groupCol=groupColumns.get(i);\n    e1=j1.getEntry(groupCol.getColumnTableData().getTableIndex());\n    e2=j2.getEntry(groupCol.getColumnTableData().getTableIndex());\n    Object obj1=(Comparable)groupCol.getFieldValue(e1);\n    Object obj2=(Comparable)groupCol.getFieldValue(e2);\n    if (obj1 == null && obj2 == null)     rc=0;\n else     if (obj1 == null && obj2 != null)     rc=-1;\n else     if (obj1 != null && obj2 == null)     rc=1;\n else     rc=((Comparable)obj1).compareTo(obj2);\n    if (rc != 0)     return rc;\n  }\n  return rc;\n}\n"}
{"nl": "Format ms interval to min/sec/ms", "code": "static public String formatMillis(long millis){\n  boolean isMinutes=false;\n  double instTime=millis;\n  String suffix=\"milliseconds\";\n  if (instTime > (60 * 1000)) {\n    suffix=\"minutes\";\n    instTime=instTime / (60 * 1000);\n    isMinutes=true;\n  }\n else   if (instTime > 1000) {\n    suffix=\"seconds\";\n    instTime=instTime / 1000;\n  }\n  if (!isMinutes) {\n    NumberFormat nf=NumberFormat.getInstance();\n    nf.setMaximumFractionDigits(2);\n    return nf.format(instTime) + \" \" + suffix;\n  }\n  int minutes=(int)instTime;\n  double seconds=(instTime - minutes) * 60;\n  NumberFormat nf=NumberFormat.getInstance();\n  nf.setMaximumFractionDigits(2);\n  nf.setMinimumIntegerDigits(2);\n  return minutes + \":\" + nf.format(seconds)+ \" \"+ suffix;\n}\n"}
{"nl": "Create a new Calculable", "code": "public Calculable(){\n}\n"}
{"nl": "Creates a vertical LinearLayoutManager", "code": "public LinearLayoutManager(Context context){\n  this(context,VERTICAL,false);\n}\n"}
{"nl": "does B part containt taxon?", "code": "public boolean isBcontains(int taxon){\n  return B.get(taxon);\n}\n"}
{"nl": "parses a Accession id", "code": "private static String parseRefSeqId(String aLine){\n  int pos=aLine.indexOf(IdParser.REFSEQ_TAG);\n  if (pos != -1) {\n    int start=pos + IdParser.REFSEQ_TAG.length();\n    int end=start;\n    while (end < aLine.length() && (Character.isLetterOrDigit(aLine.charAt(end)) || aLine.charAt(end) == '_'))     end++;\n    if (end > start)     return aLine.substring(start,end);\n  }\n  return null;\n}\n"}
{"nl": "Validation rules exclusive to role types", "code": "private void validateRoleType(RoleTypeImpl roleType){\n  if (!ValidateGlobalRules.validateHasSingleIncomingHasRoleEdge(roleType))   errorsFound.add(ErrorMessage.VALIDATION_ROLE_TYPE.getMessage(roleType.getId()));\n}\n"}
{"nl": "GATHERING QUERIES", "code": "public GatheringCursor queryGatheringItem(long id){\n  return mHelper.queryGatheringItem(id);\n}\n"}
{"nl": "Campaign quest acquired: %0", "code": "public static SM_SYSTEM_MESSAGE STR_MISSION_SYSTEMMSG_ACQUIRE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300930,value0);\n}\n"}
{"nl": "Creates an application at top level", "code": "@Override public void createApplication(Application.Name applicationName){\n}\n"}
{"nl": "Change view visibility", "code": "static void changeViewVisibilityVisible(View view){\n  if (view != null && view.getVisibility() == View.GONE)   view.setVisibility(View.VISIBLE);\n}\n"}
{"nl": "Perform tasks on Creature move in progress", "code": "public void onMove(){\n  notifyAIOnMove();\n  updateZone();\n}\n"}
{"nl": "unit dip to px", "code": "private int dip2px(float dip){\n  float v=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dip,getResources().getDisplayMetrics());\n  return (int)(v + 0.5f);\n}\n"}
{"nl": "Create user with the username", "code": "protected UserDetails createBasicUser(String username,String givenName,String surname,String commonName){\n  logger.info(\"Creating user: {}\",username);\n  String randomPassword=RandomStringUtils.randomAlphanumeric(15);\n  User userWithRole=userService.createUserWithRole(username,randomPassword,Role.USER,givenName,surname,commonName);\n  logger.debug(\"Manually setting created by user to system user because at this point, there isn't an authenticated user context\");\n  userService.updateCreatedByUserToSystemUser(userWithRole);\n  return new UserDetailsImpl(userWithRole);\n}\n"}
{"nl": "Is annotated with fixture", "code": "private boolean isTestAnnotated(SpringFixture fixture){\n  return fixture != null;\n}\n"}
{"nl": "does this searcher support find all?", "code": "public boolean canFindAll(){\n  return true;\n}\n"}
{"nl": "Create an aircraft for the authenticated user", "code": "public static void createAircraft(AirMapAircraft aircraft,AirMapCallback<AirMapAircraft> listener){\n  String url=String.format(pilotAircraftUrl,AirMap.getUserId());\n  AirMap.getClient().post(url,aircraft.getAsParamsPost(),new GenericOkHttpCallback(listener,AirMapAircraft.class));\n}\n"}
{"nl": "Generic method to remove a permission from a holder", "code": "private void remove(String world,PermissionHolder holder,String permission){\n  try {\n    if (world != null && !world.equals(\"\")) {\n      holder.unsetPermission(permission,server,world);\n    }\n else {\n      holder.unsetPermission(permission,server);\n    }\n  }\n catch (  ObjectLacksException ignored) {\n  }\n  save(holder);\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapTraffic && ((AirMapTraffic)o).getId().equals(getId());\n}\n"}
{"nl": "A Named Binary Tag library for Nukkit Project", "code": "public static CompoundTag read(File file) throws IOException {\n  return read(file,ByteOrder.BIG_ENDIAN);\n}\n"}
{"nl": "duplicate an existing sample", "code": "public boolean duplicateSample(String sample,String newName,boolean allowReplaceSample){\n  if (allowReplaceSample || !table.rowKeySet().contains(newName)) {\n    Map<String,Object> row=table.row(sample);\n    return addSample(newName,row,true,false);\n  }\n  return false;\n}\n"}
{"nl": "Adds any gradle library projects to the dependency list", "code": "private static void addGradleLibraryProjects(@NonNull LintClient client,@Nullable List<VirtualFile> files,@NonNull Map<AndroidLibrary,Project> libraryMap,@NonNull List<Project> projects,@NonNull AndroidFacet facet,@NonNull AndroidGradleModel androidGradleModel,@NonNull LintModuleProject project,@NonNull Map<Project,Module> projectMap,@NonNull List<Project> dependencies){\n  Collection<AndroidLibrary> libraries=androidGradleModel.getSelectedMainCompileDependencies().getLibraries();\n  for (  AndroidLibrary library : libraries) {\n    Project p=libraryMap.get(library);\n    if (p == null) {\n      File dir=library.getFolder();\n      p=new LintGradleLibraryProject(client,dir,dir,library);\n      libraryMap.put(library,p);\n      projectMap.put(p,facet.getModule());\n      projects.add(p);\n      if (files != null) {\n        VirtualFile libraryDir=LocalFileSystem.getInstance().findFileByIoFile(dir);\n        if (libraryDir != null) {\n          ListIterator<VirtualFile> iterator=files.listIterator();\n          while (iterator.hasNext()) {\n            VirtualFile file=iterator.next();\n            if (VfsUtilCore.isAncestor(libraryDir,file,false)) {\n              project.addFile(VfsUtilCore.virtualToIoFile(file));\n              iterator.remove();\n            }\n          }\n        }\n        if (files.isEmpty()) {\n          files=null;\n        }\n      }\n    }\n    dependencies.add(p);\n  }\n}\n"}
{"nl": "what is the index of the child in the parent", "code": "int indexOf(Node child,Node parent){\n  if (child.getParentNode() != parent)   return -1;\n  int i=0;\n  for (Node node=parent.getFirstChild(); node != child; node=node.getNextSibling()) {\n    i++;\n  }\n  return i;\n}\n"}
{"nl": "Creates the default inverse cumulative probability test input values", "code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0,0.001d,0.01d,0.025d,0.05d,0.1d,0.999d,0.990d,0.975d,0.950d,0.900d,1};\n}\n"}
{"nl": "converts the named dmp file to a bin file", "code": "public static void writeToBinFile(File dmpFile,File binFile) throws IOException {\n  System.err.println(\"Converting \" + dmpFile.getName() + \" to \"+ binFile.getName()+ \"...\");\n  long totalOut=0;\n  try (final FileInputIterator it=new FileInputIterator(dmpFile,true);OutputWriter outs=new OutputWriter(binFile)){\n    System.err.println(\"Writing file: \" + binFile);\n    outs.writeInt(MAGIC_NUMBER);\n    long lastGi=0;\n    int lineNo=0;\n    while (it.hasNext()) {\n      String aLine=it.next();\n      lineNo++;\n      final int pos=aLine.indexOf('\\t');\n      final String giString=aLine.substring(0,pos);\n      final int dotPos=giString.indexOf('.');\n      final long gi=Long.parseLong(dotPos > 0 ? giString.substring(0,dotPos) : giString);\n      if (gi >= 0) {\n        final int taxId=Integer.parseInt(aLine.substring(pos + 1));\n        if (gi >= 0 && gi <= lastGi)         throw new IOException(\"Error, line: \" + lineNo + \": GIs out of order: \"+ gi+ \" after \"+ lastGi);\n        final int missing=(int)(gi - 1 - lastGi);\n        for (int i=0; i < missing; i++)         outs.writeInt(0);\n        outs.writeInt(taxId);\n        totalOut++;\n        lastGi=gi;\n      }\n    }\n  }\n   System.err.println(\"done (\" + totalOut + \" entries)\");\n}\n"}
{"nl": "register one global attribute", "code": "public void addGlobalAttributeDecl(XSAttributeDecl decl){\n  fGlobalAttrDecls.put(decl.fName,decl);\n  decl.setNamespaceItem(this);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.getComments\",GetCommentsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  extended(true);\n}\n"}
{"nl": "A block is one of: - scalar section - list section", "code": "private void parseSection(){\n  PsiBuilder.Marker marker=builder.mark();\n  if (matches(ProjectViewTokenType.LIST_KEYWORD)) {\n    expect(ProjectViewTokenType.COLON);\n    skipPastNewline();\n    parseListItems();\n    marker.done(ProjectViewElementTypes.LIST_SECTION);\n    return;\n  }\n  if (currentToken() == ProjectViewTokenType.SCALAR_KEYWORD) {\n    ScalarSectionParser parser=ProjectViewKeywords.SCALAR_KEYWORD_MAP.get(builder.getTokenText());\n    if (parser != null) {\n      parseScalarSection(parser);\n      marker.done(ProjectViewElementTypes.SCALAR_SECTION);\n      return;\n    }\n  }\n  if (matches(ProjectViewTokenType.INDENT)) {\n    skipBlockAndError(marker,\"Invalid indentation. Indented lines must be preceded by a list keyword\");\n    return;\n  }\n  if (matches(ProjectViewTokenType.COLON)) {\n    skipBlockAndError(marker,\"Invalid section: lines cannot begin with a colon.\");\n    return;\n  }\n  skipBlockAndError(marker,\"Unrecognized keyword: \" + builder.getTokenText());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){\n  super(client,\"friends.get\",GetFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetMessagesUploadServerQuery(VkApiClient client,Actor actor){\n  super(client,\"photos.getMessagesUploadServer\",PhotoUpload.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetByPhonesQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getByPhones\",Utils.buildParametrizedType(List.class,UserXtrPhone.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "truncate appender file to size 0 from storage server", "code": "public int truncate_file(String group_name,String appender_filename) throws IOException, MyException {\n  final long truncated_file_size=0;\n  return this.truncate_file(group_name,appender_filename,truncated_file_size);\n}\n"}
{"nl": "draws the y-axis labels to the screen", "code": "@Override public void renderAxisLabels(Canvas c){\n  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;\n  float[] positions=new float[mYAxis.mEntryCount * 2];\n  for (int i=0; i < positions.length; i+=2) {\n    positions[i + 1]=mYAxis.mEntries[i / 2];\n  }\n  mTrans.pointValuesToPixel(positions);\n  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());\n  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());\n  mAxisLabelPaint.setColor(mYAxis.getTextColor());\n  float xoffset=mYAxis.getXOffset();\n  float yoffset=Utils.calcTextHeight(mAxisLabelPaint,\"A\") / 2.5f + mYAxis.getYOffset();\n  AxisDependency dependency=mYAxis.getAxisDependency();\n  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();\n  float xPos;\n  if (dependency == AxisDependency.LEFT) {\n    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {\n      mAxisLabelPaint.setTextAlign(Align.RIGHT);\n      xPos=mViewPortHandler.offsetLeft() - xoffset;\n    }\n else {\n      mAxisLabelPaint.setTextAlign(Align.LEFT);\n      xPos=mViewPortHandler.offsetLeft() + xoffset;\n    }\n  }\n else {\n    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {\n      mAxisLabelPaint.setTextAlign(Align.LEFT);\n      xPos=mViewPortHandler.contentRight() + xoffset;\n    }\n else {\n      mAxisLabelPaint.setTextAlign(Align.RIGHT);\n      xPos=mViewPortHandler.contentRight() - xoffset;\n    }\n  }\n  drawYLabels(c,xPos,positions,yoffset);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetMembersQueryWithFields(VkApiClient client,UserField... fields){\n  super(client,\"groups.getMembers\",GetMembersFieldsResponse.class);\n  fields(fields);\n}\n"}
{"nl": "get position in current array", "code": "private int dataPos(long index){\n  return (int)(index & BIT_MASK);\n}\n"}
{"nl": "draw the legend", "code": "public void paint(Graphics graphics){\n  super.paint(graphics);\n  Graphics2D gc=(Graphics2D)graphics;\n  gc.setColor(Color.WHITE);\n  gc.fill(getVisibleRect());\n  draw(gc,null);\n}\n"}
{"nl": "Sort order", "code": "public GroupsSearchQuery sort(GroupsSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "expand an array of paths", "code": "public void expand(TreePath[] paths){\n  for (  TreePath path : paths) {\n    this.expand((DefaultMutableTreeNode)path.getLastPathComponent());\n  }\n}\n"}
{"nl": "Check if the item it's a revive", "code": "public boolean isRevive(){\n  return getItemId() == ItemId.ITEM_REVIVE || getItemId() == ItemId.ITEM_MAX_REVIVE;\n}\n"}
{"nl": "Mehtod to cheeck valid email", "code": "public static boolean isValidEmail(@NonNull String email){\n  return !TextUtils.isEmpty(email) && android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches();\n}\n"}
{"nl": "Removed cached image file from disc cache (if image was cached in disc cache before)", "code": "public static boolean removeFromCache(String imageUri,DiscCacheAware discCache){\n  File image=discCache.get(imageUri);\n  return image.delete();\n}\n"}
{"nl": "assignments expressions inspection", "code": "public void visitPhpAssignmentExpression(AssignmentExpression assignmentExpression){\n  PhpPsiElement variable=assignmentExpression.getVariable();\n  if (null != variable && assignmentExpression.getValue() instanceof BinaryExpression) {\n    BinaryExpression value=(BinaryExpression)assignmentExpression.getValue();\n    PsiElement leftOperand=value.getLeftOperand();\n    PsiElement rightOperand=value.getRightOperand();\n    if (null == leftOperand || null == rightOperand) {\n      return;\n    }\n    IElementType operation=value.getOperationType();\n    if (operation == PhpTokenTypes.opPLUS) {\n      if ((leftOperand.getText().equals(\"1\") && PsiEquivalenceUtil.areElementsEquivalent(rightOperand,variable)) || (rightOperand.getText().equals(\"1\") && PsiEquivalenceUtil.areElementsEquivalent(leftOperand,variable))) {\n        if (!isArrayAccessOrString(assignmentExpression.getVariable())) {\n          String strMessage=strProblemDescriptionIncrement.replace(\"%s%\",variable.getText());\n          holder.registerProblem(assignmentExpression,strMessage,ProblemHighlightType.WEAK_WARNING);\n        }\n      }\n      return;\n    }\n    if (operation == PhpTokenTypes.opMINUS) {\n      if (rightOperand.getText().equals(\"1\") && PsiEquivalenceUtil.areElementsEquivalent(leftOperand,variable) && !isArrayAccessOrString(assignmentExpression.getVariable())) {\n        String strMessage=strProblemDescriptionDecrement.replace(\"%s%\",variable.getText());\n        holder.registerProblem(assignmentExpression,strMessage,ProblemHighlightType.WEAK_WARNING);\n      }\n    }\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  Document doc=getDoc();\n  if ((doc.getMeganFile().isRMA2File() || doc.getMeganFile().isRMA3File()) && !doc.getMeganFile().isReadOnly()) {\n    Object object=doc.getSampleAttributeTable().get(doc.getSampleNames().get(0),SampleAttributeTable.DescriptionAttribute);\n    if (object == null)     object=\"\";\n    String description=JOptionPane.showInputDialog(getViewer().getFrame(),\"A short description:\",object);\n    if (description != null) {\n      description=description.replaceAll(\"^ +| +$|( )+\",\"$1\");\n      execute(\"set description='\" + description + \"';\");\n    }\n  }\n else {\n    StringBuilder buf=new StringBuilder();\n    for (    String name : doc.getSampleNames()) {\n      Object object=doc.getSampleAttributeTable().get(name,SampleAttributeTable.DescriptionAttribute);\n      if (object != null) {\n        buf.append(name).append(\": \").append(object).append(\"\\n\");\n      }\n    }\n    if (buf.length() > 0) {\n      NotificationsInSwing.showInformation(getViewer().getFrame(),\"Description:\\n\" + buf.toString());\n    }\n  }\n}\n"}
{"nl": "Synthesize a selected vocalization", "code": "private AudioInputStream synthesizeSelectedVocalization(int backchannelNumber,AudioFileFormat aft,Element domElement) throws SynthesisException {\n  int numberOfBackChannels=unitFileReader.getNumberOfUnits();\n  if (backchannelNumber >= numberOfBackChannels) {\n    throw new IllegalArgumentException(\"This voice has \" + numberOfBackChannels + \" backchannels only. so it doesn't support unit number \"+ backchannelNumber);\n  }\n  VocalizationUnit bUnit=unitFileReader.getUnit(backchannelNumber);\n  Unit[] units=bUnit.getUnits();\n  String[] unitNames=bUnit.getUnitNames();\n  long endTime=0l;\n  for (int i=0; i < units.length; i++) {\n    int unitDuration=units[i].duration * 1000 / unitFileReader.getSampleRate();\n    endTime+=unitDuration;\n    Element element=MaryXML.createElement(domElement.getOwnerDocument(),MaryXML.PHONE);\n    element.setAttribute(\"d\",Integer.toString(unitDuration));\n    element.setAttribute(\"end\",Long.toString(endTime));\n    element.setAttribute(\"p\",unitNames[i]);\n    domElement.appendChild(element);\n  }\n  return this.vSynthesizer.synthesize(backchannelNumber,aft);\n}\n"}
{"nl": "Compare two arrays of values - only the group by columns are compared", "code": "public int compare(IEntryPacket e1,IEntryPacket e2){\n  if (e1 == null) {\n    if (e2 == null)     return 0;\n    return -1;\n  }\n  if (e2 == null)   return 1;\n  int rc=0;\n  for (int i=0; i < groupColumns.size(); i++) {\n    SelectColumn groupCol=groupColumns.get(i);\n    Object obj1=_queryResult.getFieldValue(groupCol,e1);\n    Object obj2=_queryResult.getFieldValue(groupCol,e2);\n    if (obj1 == null && obj2 == null)     rc=0;\n else     if (obj1 == null && obj2 != null)     rc=-1;\n else     if (obj1 != null && obj2 == null)     rc=1;\n else     rc=((Comparable)obj1).compareTo(obj2);\n    if (rc != 0)     return rc;\n  }\n  return rc;\n}\n"}
{"nl": "Finds a match of the given string in the given array, and returns the element at the same index in the returnInArray", "code": "private static String findMatchInArray(String strToMatch,String[] matchInArray,String[] returnInArray){\n  for (int i=0; i < matchInArray.length; i++) {\n    if (strToMatch.equals(matchInArray[i])) {\n      if (i < returnInArray.length) {\n        return returnInArray[i];\n      }\n else {\n        return null;\n      }\n    }\n  }\n  return null;\n}\n"}
{"nl": "Set group id", "code": "public StatusGetQuery groupId(Integer value){\n  return unsafeParam(\"group_id\",value);\n}\n"}
{"nl": "Creates the next entry that will be copied to the source space", "code": "public synchronized AbstractEntryReplicaData produceNextData(ISynchronizationCallback syncCallback){\n  if (isForcedClose()) {\n    throw new RuntimeException(\"space=\" + _engine.getFullSpaceName() + \" replica forced closing\");\n  }\n  if (_isClosed)   return null;\n  try {\n    while (true) {\n      if (isForcedClose()) {\n        this.notifyAll();\n        throw new RuntimeException(\"space=\" + _engine.getFullSpaceName() + \" replica forced closing\");\n      }\n      IEntryHolder entry=_entriesIterSA.next();\n      AbstractEntryReplicaData replicaData=produceDataFromEntry(syncCallback,entry);\n      if (replicaData == null && !_isClosed) {\n        continue;\n      }\n      if (replicaData == null && _isClosed) {\n        return null;\n      }\n      return replicaData;\n    }\n  }\n catch (  Exception ex) {\n    throw new ReplicationInternalSpaceException(\"Failure in .\",ex);\n  }\n}\n"}
{"nl": "WEAPON QUERIES", "code": "public WeaponCursor queryWeapon(){\n  return mHelper.queryWeapon();\n}\n"}
{"nl": "Initialize an AirMapStatus from JSON", "code": "public AirMapStatus(JSONObject statusJson){\n  constructFromJson(statusJson);\n}\n"}
{"nl": "After each tests", "code": "@After public final void afterTest(){\n  this.testMessageListenerContainer.stop();\n}\n"}
{"nl": "Decrypt given data", "code": "public boolean decrypt(byte[] data,int offset,int length){\n  cipher.decipher(data,offset,length);\n  return verifyChecksum(data,offset,length);\n}\n"}
{"nl": "Fetch the entries from space that match this table condition", "code": "public void init(ISpaceProxy space,Transaction txn,AbstractDMLQuery query) throws Exception {\n  IQueryResultSet<IEntryPacket> tableEntries=getTemplate(query.getQueryResultType()).readMultiple(space,txn,Integer.MAX_VALUE,query.getReadModifier());\n  if (_joinCondition != null)   setEntriesCursor(_joinCondition.createIndex(this,tableEntries));\n else   setEntriesCursor(new ScanCursor(tableEntries));\n}\n"}
{"nl": "Returns true if the chart is not yet fully zoomed in on the y-axis", "code": "public boolean canZoomInMoreY(){\n  return (mScaleY < mMaxScaleY);\n}\n"}
{"nl": "A general process launcher for the various tasks", "code": "public static void launchProc(String cmdLine,String task,String baseName){\n  Process proc=null;\n  String line=null;\n  try {\n    proc=Runtime.getRuntime().exec(cmdLine);\n    InputStream procStdOut=proc.getInputStream();\n    InputStream procStdErr=proc.getErrorStream();\n    StreamLogger stdOutLogger=new StreamLogger(procStdOut,System.out);\n    StreamLogger stdErrLogger=new StreamLogger(procStdErr,System.err);\n    stdOutLogger.start();\n    stdErrLogger.start();\n    try {\n      stdOutLogger.join();\n      stdErrLogger.join();\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n    proc.waitFor();\n    if (proc.exitValue() != 0) {\n      throw new RuntimeException(task + \" computation failed on file [\" + baseName+ \"]!\\n\"+ \"Command line was: [\"+ cmdLine+ \"].\");\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(task + \" computation provoked an IOException on file [\" + baseName+ \"].\",e);\n  }\ncatch (  InterruptedException e) {\n    throw new RuntimeException(task + \" computation interrupted on file [\" + baseName+ \"].\",e);\n  }\n}\n"}
{"nl": "Useful entry point for diffing previous list and new one to get entries added, removed and moved", "code": "@ObjectiveCName(\"updateList:\") private void updateList(Collection entries){\n  Map<String,ArrayList<Integer>> oldStructure=this.beforeChange();\n  this.record.set(entries);\n  this.afterChange(oldStructure);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"select=all;\");\n}\n"}
{"nl": "regulate averageAngleRadians if endAngleDegree - startAngleDegree = 360 to avoid the first button covers the last button", "code": "private void regulateAverageAngle(double endAngleRadians,int expandButtonCount){\n  if (!angleStartEqualsEnd && startAngleRadians == endAngleRadians) {\n    double tmp=2 * Math.PI / expandButtonCount;\n    if (averageAngleRadians < 0) {\n      averageAngleRadians=-tmp;\n    }\n else {\n      averageAngleRadians=tmp;\n    }\n  }\n}\n"}
{"nl": "returns true, if all splits contain all taxa", "code": "public boolean isFullSplitSystem(Taxa taxa){\n  BitSet bits=taxa.getBits();\n  for (Iterator it=iterator(); it.hasNext(); ) {\n    Split split=(Split)it.next();\n    if (!split.getTaxa().equals(bits))     return false;\n  }\n  return true;\n}\n"}
{"nl": "Returns whether the given attribute is of type CDATA or not", "code": "public boolean isCDATAAttribute(QName elName,QName atName){\n  int elDeclIdx=getElementDeclIndex(elName);\n  return !(getAttributeDecl(elDeclIdx,fAttributeDecl) && fAttributeDecl.simpleType.type != XMLSimpleType.TYPE_CDATA);\n}\n"}
{"nl": "Parse the EST header and load the track data", "code": "private void loadHeaderAndData(DataInputStream dis){\n  try {\n    if (!General.readWord(dis).equals(\"EST_File\") || !General.readWord(dis).equals(\"Track\")) {\n      throw new Error(\"The given data input stream is not an EST Track file.\");\n    }\n    String token=General.readWord(dis);\n    while (!token.equals(\"EST_Header_End\")) {\n      if (token.equals(\"DataType\")) {\n        isBinary=General.readWord(dis).equals(\"binary\");\n      }\n else       if (token.equals(\"ByteOrder\")) {\n        isBigEndian=General.readWord(dis).equals(\"10\");\n      }\n else       if (token.equals(\"NumFrames\")) {\n        numFrames=Integer.parseInt(General.readWord(dis));\n      }\n else       if (token.equals(\"NumChannels\")) {\n        numChannels=Integer.parseInt(General.readWord(dis));\n      }\n      token=General.readWord(dis);\n    }\n    times=new float[numFrames];\n    frames=new float[numFrames][numChannels];\n    if (isBinary) {\n      loadBinaryData(dis);\n    }\n else {\n      loadTextData(dis);\n    }\n  }\n catch (  IOException ioe) {\n    throw new Error(\"IO Exception while parsing EST Track file: \" + ioe.getMessage());\n  }\n}\n"}
{"nl": "call this when starting to write formatted output", "code": "public void startWrite(){\n  writerIterator=null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LikesDeleteQuery(VkApiClient client,UserActor actor,LikesType type,int itemId){\n  super(client,\"likes.delete\",DeleteResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  itemId(itemId);\n}\n"}
{"nl": "Creates an iterator over the specified map", "code": "public TIntObjectIterator(TIntObjectHashMap<V> map){\n  super(map);\n  this._map=map;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null;\n}\n"}
{"nl": "Function Import implementation for confirming a sales order", "code": "@SuppressWarnings(\"unchecked\") @EdmFunctionImport(name=\"ConfirmSalesOrder\",entitySet=\"SalesOrderHeaders\",returnType=@ReturnType(type=Type.ENTITY,isCollection=true)) public List<SalesOrderHeader> confirmSalesOrder(@EdmFunctionImportParameter(name=\"SalesOrderId\") String salesOrderId) throws ODataException {\n  EntityManagerFactory emf=Utility.getEntityManagerFactory();\n  EntityManager em=emf.createEntityManager();\n  try {\n    Query query=em.createQuery(\"SELECT s FROM SalesOrderHeader s WHERE s.salesOrderId =\" + salesOrderId);\n    try {\n      SalesOrderHeader so=(SalesOrderHeader)query.getSingleResult();\n      em.getTransaction().begin();\n      so.setLifeCycleStatus(\"P\");\n      so.setLifeCycleStatusName(\"In Process\");\n      em.persist(so);\n      em.getTransaction().commit();\n      List<SalesOrderHeader> salesorderlist=null;\n      query=em.createQuery(\"SELECT s FROM SalesOrderHeader s WHERE s.salesOrderId ='\" + salesOrderId + \"'\");\n      salesorderlist=query.getResultList();\n      return salesorderlist;\n    }\n catch (    NoResultException e) {\n      throw new ODataApplicationException(\"No Sales Order with Sales Order Id:\" + salesOrderId,Locale.ENGLISH,HttpStatusCodes.BAD_REQUEST);\n    }\n  }\n  finally {\n    em.close();\n  }\n}\n"}
{"nl": "Check if we have a WiFi connection", "code": "public static boolean isWifiConnected(Context context){\n  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  return cm != null && cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;\n}\n"}
{"nl": "Invoke when scroll percent over the threshold for the first time", "code": "public void onScrollToClose(){\n}\n"}
{"nl": "reset unit information", "code": "public void reset(){\n  is_Dead=false;\n  Un_Dead_Cult=500;\n  is_Un_Dead=true;\n}\n"}
{"nl": "put a value", "code": "public void put(long index,int value){\n  final int segment=(int)(index >>> SEGMENT_BITS);\n  final int position=(int)(index & SEGMENT_MASK);\n  final int old=segments[segment][position];\n  if (old == 0) {\n    if (value != 0) {\n      segments[segment][position]=value;\n      numberOfNonZeroEntries++;\n    }\n  }\n else {\n    segments[segment][position]=value;\n    if (value == 0)     numberOfNonZeroEntries--;\n  }\n  maxIndex=Math.max(maxIndex,index);\n}\n"}
{"nl": "Clear the list of interval counters", "code": "public void clear(){\n  maxValue=0L;\n  minValue=Long.MAX_VALUE;\n  for (int i=0, size=counts.length; i < size; i++) {\n    counts[i]=0L;\n  }\n}\n"}
{"nl": "Removes (synchronized) a previously registered <code>DataTagUpdateListener</code>", "code": "public void removeUpdateListener(final BaseListener<? extends Tag> pListener){\n  listeners.remove(pListener);\n}\n"}
{"nl": "the mean of the values in the double array", "code": "private double mean(double[] vec){\n  double result=0;\n  for (int i=0; i < vec.length; i++)   result+=vec[i];\n  return result / vec.length;\n}\n"}
{"nl": "Unsubscribe all callbacks from current record", "code": "private void unsubscribeRecord(){\n  if (this.record == null || this.record.isDestroyed()) {\n    return;\n  }\n  for (  Subscription subscription : this.subscriptions) {\n    if (subscription.recordPathChangedCallback != null) {\n      this.record.unsubscribe(subscription.path,subscription.recordPathChangedCallback);\n    }\n else     if (subscription.recordChangedCallback != null) {\n      this.record.unsubscribe(subscription.recordChangedCallback);\n    }\n  }\n  this.record.discard();\n}\n"}
{"nl": "Process sendTimeout events", "code": "@Override public void run(Timeout timeout) throws Exception {\n  if (timeout.isCancelled()) {\n    return;\n  }\n  long timeToWaitMs;\nsynchronized (this) {\n    OpSendMsg firstMsg=pendingMessages.peek();\n    if (firstMsg == null) {\n      timeToWaitMs=conf.getSendTimeoutMs();\n    }\n else {\n      long diff=(firstMsg.createdAt + conf.getSendTimeoutMs()) - System.currentTimeMillis();\n      if (diff <= 0) {\n        log.info(\"[{}] [{}] Message send timed out. Failing {} messages\",topic,producerName,pendingMessages.size());\n        PulsarClientException te=new PulsarClientException.TimeoutException(\"Could not send message to broker within given timeout\");\n        failPendingMessages(cnx(),te);\n        stats.incrementSendFailed(pendingMessages.size());\n        timeToWaitMs=conf.getSendTimeoutMs();\n      }\n else {\n        timeToWaitMs=diff;\n      }\n    }\n  }\n  sendTimeout=client.timer().newTimeout(this,timeToWaitMs,TimeUnit.MILLISECONDS);\n}\n"}
{"nl": "string representation, used for TextGrid output", "code": "@Override public String toString(){\n  StringBuilder str=new StringBuilder();\n  str.append(\"class = \\\"\" + getTierClass() + \"\\\" \\n\");\n  str.append(\"name = \\\"\" + getName() + \"\\\" \\n\");\n  str.append(\"xmin = \" + getXmin() + \" \\n\");\n  str.append(\"xmax = \" + getXmax() + \" \\n\");\n  str.append(\"intervals: size = \" + getNumberOfIntervals() + \" \\n\");\n  for (int i=0; i < getNumberOfIntervals(); i++) {\n    str.append(\"intervals [\" + (i + 1) + \"]:\\n\");\n    str.append(getInterval(i).toString());\n  }\n  return str.toString();\n}\n"}
{"nl": "Set peer id", "code": "public MessagesSetActivityQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set show-insertions=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.setShowInsertions(show);\n}\n"}
{"nl": "permissive mode is enabled by default", "code": "@Deprecated public Builder enablePermissive(){\n  return this;\n}\n"}
{"nl": "Route a server to client", "code": "@RequestMapping(value=ClientUris.SERVER_ROUTE,method=RequestMethod.GET) public ServerRouteResp route(@RequestParam(\"appName\") String appName,@RequestParam(\"clientPid\") Integer clientPid,HttpServletRequest req){\n  Response<ServerRouteResp> routeResp=clusterService.routeServer(appName,req.getRemoteAddr(),clientPid);\n  if (!routeResp.isSuccess()) {\n    return null;\n  }\n  return routeResp.getData();\n}\n"}
{"nl": "create the Label Decoration/general page", "code": "private Control createGeneralDecoratorPage(Composite parent){\n  Composite composite=new Composite(parent,SWT.NULL);\n  GridLayout layout=new GridLayout();\n  composite.setLayout(layout);\n  GridData data=new GridData();\n  data.horizontalAlignment=GridData.FILL;\n  composite.setLayoutData(data);\n  SWTUtils.createPreferenceLink((IWorkbenchPreferenceContainer)getContainer(),composite,\"org.eclipse.ui.preferencePages.Decorators\",Policy.bind(\"SVNDecoratorPreferencesPage.labelDecorationsLink\"));\n  showDirty=createCheckBox(composite,Policy.bind(\"SVNDecoratorPreferencesPage.computeDeep\"));\n  enableFontDecorators=createCheckBox(composite,Policy.bind(\"SVNDecoratorPreferencesPage.useFontDecorators\"));\n  SWTUtils.createPreferenceLink((IWorkbenchPreferenceContainer)getContainer(),composite,\"org.eclipse.ui.preferencePages.ColorsAndFonts\",Policy.bind(\"SVNDecoratorPreferencesPage.colorsAndFontsLink\"));\n  return composite;\n}\n"}
{"nl": "Should be called before starting tests, to save original rotation values", "code": "void saveRotationState(@NonNull ContentResolver contentResolver){\n  try {\n    originalAccelerometer=Settings.System.getInt(contentResolver,Settings.System.ACCELEROMETER_ROTATION);\n  }\n catch (  Settings.SettingNotFoundException e) {\n    Log.d(TAG,\"Could not read accelerometer rotation setting: \" + e.getMessage());\n  }\n  try {\n    originalUserRotation=Settings.System.getInt(contentResolver,Settings.System.USER_ROTATION);\n  }\n catch (  Settings.SettingNotFoundException e) {\n    Log.d(TAG,\"Could not read user rotation setting: \" + e.getMessage());\n  }\n  Settings.System.putInt(contentResolver,Settings.System.USER_ROTATION,Surface.ROTATION_0);\n  Settings.System.putInt(contentResolver,Settings.System.ACCELEROMETER_ROTATION,0);\n}\n"}
{"nl": "Constructs new <tt>SM_MACRO_LIST </tt> packet", "code": "public SM_MACRO_LIST(Player player){\n  this.player=player;\n}\n"}
{"nl": "write the overlap graph", "code": "public Pair<Integer,Integer> writeOverlapGraph(Writer w) throws IOException, CanceledException {\n  final NodeArray<String> names=new NodeArray<>(overlapGraph);\n  final NodeArray<String> sequences=new NodeArray<>(overlapGraph);\n  for (Node v=overlapGraph.getFirstNode(); v != null; v=v.getNext()) {\n    ReadData readData=readId2ReadData[(Integer)v.getInfo()];\n    sequences.set(v,readData.getSegment());\n    names.set(v,readData.getName());\n  }\n  final Map<String,NodeArray<?>> label2nodes=new TreeMap<>();\n  label2nodes.put(\"label\",names);\n  label2nodes.put(\"sequence\",sequences);\n  final EdgeArray<Integer> overlap=new EdgeArray<>(overlapGraph);\n  for (Edge e=overlapGraph.getFirstEdge(); e != null; e=e.getNext()) {\n    overlap.set(e,(Integer)e.getInfo());\n  }\n  final Map<String,EdgeArray<?>> label2edges=new TreeMap<>();\n  label2edges.put(\"label\",null);\n  label2edges.put(\"overlap\",overlap);\n  overlapGraph.writeGML(w,\"Overlap graph generated by MEGAN6\",true,label,1,label2nodes,label2edges);\n  return new Pair<>(this.overlapGraph.getNumberOfNodes(),this.overlapGraph.getNumberOfEdges());\n}\n"}
{"nl": "Following methods remove the last node from the end of the nodeStack arrayList Since the previous node now becomes the closest target to an implicit break or continue", "code": "public void outASTWhileNode(ASTWhileNode node){\n  if (nodeStack.isEmpty())   throw new RuntimeException(\"trying to remove node from empty stack: ClosestBreakTargetFinder\");\n  nodeStack.remove(nodeStack.size() - 1);\n}\n"}
{"nl": "Replaces instances of Emoji unicode characters with their Emoji-Cheat sheet key", "code": "public static String replaceUnicodeEmojis(String s){\n  if (TextUtils.isEmpty(s)) {\n    return \"\";\n  }\n  for (int i=0; i < s.length(); i++) {\n    String key=s.substring(i,i + 1);\n    if ((Character.isLowSurrogate(key.charAt(0)) || Character.isHighSurrogate(key.charAt(0))) && s.length() > i + 1) {\n      key=s.substring(i,i + 2);\n    }\n    String emoji=UNICODE_TO_CHEAT_SHEET.get(key);\n    if (null != emoji) {\n      s=s.replace(key,emoji);\n    }\n  }\n  return s;\n}\n"}
{"nl": "Set a custom package to use in the new project", "code": "NewProjectDescriptor withPackageName(@NotNull String pkg){\n  myPkg=pkg;\n  return this;\n}\n"}
{"nl": "Converts given object to IGSEntry", "code": "public IEntryPacket toEntry(Object object) throws RemoteException, UnusableEntryException, UnknownTypeException {\n  if (object == null)   return null;\n  if (object instanceof SpaceMapEntry)   return _converter.toInternal(object);\n  if (object instanceof Map.Entry) {\n    Map.Entry entry=(Map.Entry)object;\n    SpaceMapEntry envelope=MapEntryFactory.create(entry.getKey(),entry.getValue());\n    return _converter.toInternal(envelope);\n  }\n  if (_converter != null)   return _converter.toInternal(object);\n  return null;\n}\n"}
{"nl": "Converts Headers array to Map", "code": "protected static Map<String,String> convertHeaders(Header[] headers){\n  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);\n  for (int i=0; i < headers.length; i++) {\n    result.put(headers[i].getName(),headers[i].getValue());\n  }\n  return result;\n}\n"}
{"nl": "Method is called when ever we modify the widget", "code": "private void widgetModified(){\n  if (mWidget == null) {\n    return;\n  }\n  if (!mWidgetModified) {\n    mConstraintModel.getSelection().addModifiedWidget(mWidget);\n  }\n  mWidgetModified=true;\n  mConstraintModel.getDrawConstraintModels().forEach(null);\n  saveWidget();\n}\n"}
{"nl": "Remove a ViewModel from the specified key", "code": "void remove(int key){\n  if (cache != null) {\n    cache.remove(key);\n  }\n}\n"}
{"nl": "make a SAM line", "code": "private String makeSAM(String queryName,String refName,int referenceLength,float bitScore,float expect,int rawScore,float percentIdentity,int frame,int queryStart,int queryEnd,int referenceStart,int referenceEnd,String alignedQuery,String alignedReference){\n  final StringBuilder buffer=new StringBuilder();\n  buffer.append(queryName).append(\"\\t\");\n  buffer.append(0);\n  buffer.append(\"\\t\");\n  buffer.append(refName).append(\"\\t\");\n  buffer.append(referenceStart).append(\"\\t\");\n  buffer.append(\"255\\t\");\n  Utilities.appendCigar(alignedQuery,alignedReference,buffer);\n  buffer.append(\"\\t\");\n  buffer.append(\"*\\t\");\n  buffer.append(\"0\\t\");\n  buffer.append(\"0\\t\");\n  buffer.append(alignedQuery.replaceAll(\"-\",\"\")).append(\"\\t\");\n  buffer.append(\"*\\t\");\n  buffer.append(String.format(\"AS:i:%d\\t\",(int)Math.round(bitScore)));\n  buffer.append(String.format(\"NM:i:%d\\t\",Utilities.computeEditDistance(alignedQuery,alignedReference)));\n  buffer.append(String.format(\"ZL:i:%d\\t\",referenceLength));\n  buffer.append(String.format(\"ZR:i:%d\\t\",rawScore));\n  buffer.append(String.format(\"ZE:f:%g\\t\",expect));\n  buffer.append(String.format(\"ZI:i:%d\\t\",(int)Math.round(percentIdentity)));\n  if (frame != 0)   buffer.append(String.format(\"ZF:i:%d\\t\",frame));\n  buffer.append(String.format(\"ZS:i:%s\\t\",queryStart));\n  Utilities.appendMDString(alignedQuery,alignedReference,buffer);\n  return buffer.toString();\n}\n"}
{"nl": "Build an immutable App Info object", "code": "public App(final CharSequence caller,final Boolean debug,final CharSequence applicationId,final Integer versionCode,final CharSequence flavor,final CharSequence buildType,final CharSequence versionName){\n  this.caller=caller;\n  this.debug=debug;\n  this.applicationId=applicationId;\n  this.versionCode=versionCode;\n  this.flavor=flavor;\n  this.buildType=buildType;\n  this.versionName=versionName;\n}\n"}
{"nl": "Returns true if the given token matches part of a phone number", "code": "private boolean matchesPartPhoneNumber(Item tokenItem,String tokenVal){\n  String n_name=(String)tokenItem.findFeature(\"n.name\");\n  String n_n_name=(String)tokenItem.findFeature(\"n.n.name\");\n  String p_name=(String)tokenItem.findFeature(\"p.name\");\n  String p_p_name=(String)tokenItem.findFeature(\"p.p.name\");\n  boolean matches3DigitsP_name=matches(threeDigitsPattern,p_name);\n  return ((matches(threeDigitsPattern,tokenVal) && ((!matches(digitsPattern,p_name) && matches(threeDigitsPattern,n_name) && matches(fourDigitsPattern,n_n_name)) || (matches(sevenPhoneNumberPattern,n_name)) || (!matches(digitsPattern,p_p_name) && matches3DigitsP_name && matches(fourDigitsPattern,n_name)))) || (matches(fourDigitsPattern,tokenVal) && (!matches(digitsPattern,n_name) && matches3DigitsP_name && matches(threeDigitsPattern,p_p_name))));\n}\n"}
{"nl": "load all references from file (if not already loaded)", "code": "public void loadReferences(boolean loadOnDemand) throws IOException {\n  if (references == null) {\n    try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){\n      ins.skip(getLocationOfBlockInFile(getRefNamesBlockIndex()));\n      initializeReferences((int)getDbSeqsUsed(),loadOnDemand);\n      if (loadOnDemand) {\n        for (int r=0; r < getDbSeqsUsed(); r++) {\n          if ((r & (referenceLocationChunkSize - 1)) == 0) {\n            referenceLocations[r >>> referenceLocationChunkBits]=ins.getPosition();\n          }\n          ins.skipNullTerminatedBytes();\n        }\n      }\n else {\n        for (int r=0; r < getDbSeqsUsed(); r++) {\n          setReference(r,ins.readNullTerminatedBytes().getBytes());\n        }\n      }\n      initializeRefLengths((int)getDbSeqsUsed());\n      for (int i=0; i < getDbSeqsUsed(); i++) {\n        setRefLength(i,ins.readInt());\n      }\n    }\n   }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  final AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  final Alignment alignment=viewer.getAlignment();\n  final SelectedBlock block=viewer.getSelectedBlock();\n  StringBuilder buf=new StringBuilder();\n  int count=0;\n  for (int row=0; row < alignment.getRowCompressor().getNumberRows(); row++) {\n    if (block.isSelectedRow(row)) {\n      for (      Integer read : alignment.getRowCompressor().getCompressedRow2Reads(row)) {\n        Lane lane=alignment.getLane(read);\n        int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(block.getFirstCol());\n        if ((block.isSelectedCol(lane.getFirstNonGapPosition() - firstJump + 1))) {\n          if (count++ > 0)           buf.append(\"\\n\");\n          buf.append(Basic.getFirstWord(lane.getName()));\n        }\n      }\n    }\n  }\n  if (count > 1)   buf.append(\"\\n\");\n  if (count > 0) {\n    StringSelection selection=new StringSelection(buf.toString());\n    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection,null);\n  }\n}\n"}
{"nl": "Created on main thread!", "code": "public RoomController(final GameServicesMultiplayer multiplayer,final Future<Void> future){\n  this.multiplayer=multiplayer;\n  this.future=future;\n  session=new AndroidGameSession(multiplayer,future);\n}\n"}
{"nl": "Reads a certain amount of lines deep into a file to save on memory", "code": "public static List<String> readFileLines(String filePath,int maxFileLineDepth) throws FileNotFoundException {\n  List<String> lines=new ArrayList<>();\n  Scanner input=new Scanner(new File(filePath));\n  int counter=0;\n  while (input.hasNextLine() && counter < maxFileLineDepth) {\n    lines.add(input.nextLine());\n    counter++;\n  }\n  return lines;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioRestoreQuery(VkApiClient client,UserActor actor,int audioId){\n  super(client,\"audio.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioId(audioId);\n}\n"}
{"nl": "The last step, mark the last tutorial state as completed", "code": "public void firstTimeExperienceComplete() throws LoginFailedException, RemoteServerException {\n  markTutorial(TutorialStateOuterClass.TutorialState.FIRST_TIME_EXPERIENCE_COMPLETE);\n}\n"}
{"nl": "used when getting attached items", "code": "public SM_MAIL_SERVICE(int letterId,int attachmentType){\n  super(null);\n  this.serviceId=5;\n  this.letterId=letterId;\n  this.attachmentType=attachmentType;\n}\n"}
{"nl": "Returns true if the device state is alternated", "code": "public final boolean isAlternatingDeviceState(){\n  return (myAlternate & CFG_DEVICE_STATE) != 0;\n}\n"}
{"nl": "Init view", "code": "private void init(AttributeSet attrs,int defStyle){\n  TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.FlowLayout);\n  try {\n    mConnectivityAware=a.getBoolean(R.styleable.FlowLayout_isConnectivityAware,mConnectivityAware);\n    mConnectedText=a.getResourceId(R.styleable.FlowLayout_connectedText,mConnectedText);\n    mConnectedTextColor=a.getResourceId(R.styleable.FlowLayout_connectedTextColor,mConnectedTextColor);\n    mConnectedBackground=a.getResourceId(R.styleable.FlowLayout_connectedBackground,mConnectedBackground);\n    mConnectedLayout=a.getResourceId(R.styleable.FlowLayout_connectedlayout,mConnectedLayout);\n    mDisconnectedText=a.getResourceId(R.styleable.FlowLayout_disconnectedText,mDisconnectedText);\n    mDisconnectedTextColor=a.getResourceId(R.styleable.FlowLayout_disconnectedTextColor,mDisconnectedTextColor);\n    mDisconnectedBackground=a.getResourceId(R.styleable.FlowLayout_disconnectedBackground,mDisconnectedBackground);\n    mDisconnectedLayout=a.getResourceId(R.styleable.FlowLayout_disconnectedlayout,mDisconnectedLayout);\n    mErrorText=a.getResourceId(R.styleable.FlowLayout_errorText,mErrorText);\n    mEmptyLayout=a.getResourceId(R.styleable.FlowLayout_emptyLayout,mEmptyLayout);\n    mEmptyText=a.getResourceId(R.styleable.FlowLayout_emptyText,mEmptyText);\n    mEmptyTextColor=a.getResourceId(R.styleable.FlowLayout_emptyTextColor,mEmptyTextColor);\n    mProgressLayout=a.getResourceId(R.styleable.FlowLayout_progressLayout,mProgressLayout);\n  }\n  finally {\n    a.recycle();\n  }\n  postInit();\n}\n"}
{"nl": "<p>Method:only for regex,parse regex group when regex include group</p>", "code": "public static List<String> parseRegexGroup(final String string,final String regex){\n  List<String> groupList=null;\n  if (string != null && regex != null) {\n    Pattern pattern=Pattern.compile(regex);\n    Matcher matcher=pattern.matcher(string);\n    int groupCount=matcher.groupCount();\n    int count=1;\n    groupList=new ArrayList<String>();\n    if (matcher.find()) {\n      while (count <= groupCount) {\n        groupList.add(matcher.group(count));\n        count++;\n      }\n    }\n  }\n  return groupList;\n}\n"}
{"nl": "Figure out what ratio we can load our image into memory at while still being bigger than our desired width and height", "code": "public static int calculateSampleSize(int srcWidth,int srcHeight,int dstWidth,int dstHeight){\n  final float srcAspect=(float)srcWidth / (float)srcHeight;\n  final float dstAspect=(float)dstWidth / (float)dstHeight;\n  if (srcAspect > dstAspect) {\n    return srcWidth / dstWidth;\n  }\n else {\n    return srcHeight / dstHeight;\n  }\n}\n"}
{"nl": "Parses, validates and computes normalized version of dateTime object", "code": "@Override protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  int end=getDate(str,0,len,date);\n  parseTimeZone(str,end,len,date);\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  return date;\n}\n"}
{"nl": "load feature file reader and  feature definition for a cost function", "code": "private void load(VocalizationFeatureFileReader ffr,FeatureDefinition fDef){\n  this.featureVectors=ffr.featureVectorMapping(fDef);\n  this.featureDefinition=fDef;\n  weightFunction=new WeightFunc[featureDefinition.getNumberOfContinuousFeatures()];\n  WeightFunctionManager wfm=new WeightFunctionManager();\n  int nDiscreteFeatures=featureDefinition.getNumberOfByteFeatures() + featureDefinition.getNumberOfShortFeatures();\n  for (int i=0; i < weightFunction.length; i++) {\n    String weightFunctionName=featureDefinition.getWeightFunctionName(nDiscreteFeatures + i);\n    if (\"\".equals(weightFunctionName))     weightFunction[i]=wfm.getWeightFunction(\"linear\");\n else     weightFunction[i]=wfm.getWeightFunction(weightFunctionName);\n  }\n  rememberWhichWeightsAreNonZero();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"copyImage;\");\n}\n"}
{"nl": "ask view to allow user input", "code": "public void unlockUserInput(){\n  isLocked=false;\n  if (commandManager != null)   commandManager.setEnableCritical(true);\n  getTabbedPane().setEnabled(true);\n  setCursor(Cursor.getDefaultCursor());\n}\n"}
{"nl": "Creates a new node", "code": "FloatList(){\n  value=0.0F;\n  next=null;\n  prev=null;\n}\n"}
{"nl": "write contents to file", "code": "private void fileSetBuildingTime(String contents,String fileName){\n  try {\n    File file=new File(fileName + \".log\");\n    FileWriter fw=new FileWriter(file,false);\n    fw.write(contents);\n    fw.flush();\n    fw.close();\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n    System.out.println(fileName + \".log file do not exist\");\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "call this when tab containing list is activated", "code": "public void activate(){\n  getViewer().getSearchManager().setSearcher(getSearcher());\n  getViewer().getSearchManager().getFindDialogAsToolBar().clearMessage();\n  if (!inSelection) {\n    inSelection=true;\n    try {\n      chartSelection.clearSelectionClasses();\n      chartSelection.setSelectedClass(getSelectedLabels(),true);\n      this.repaint();\n    }\n  finally {\n      inSelection=false;\n    }\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  if (isSelected())   execute(\"set idParsing=false cName=\" + cName + \";\");\n else {\n    String idTags=Basic.toString(ProgramProperties.get(cName + \"Tags\",IdMapper.createTags(cName)),\" \");\n    final JFrame frame=((getParent() instanceof IDirectableViewer) ? ((IDirectableViewer)getParent()).getFrame() : null);\n    idTags=JOptionPane.showInputDialog(frame,\"Enter tag(s) used to identify ids (separated by spaces):\",idTags);\n    if (idTags != null)     execute(\"set idParsing=true cName=\" + cName + \" prefix='\"+ idTags+ \"';\");\n else     execute(\"set idParsing=false cName=\" + cName + \";\");\n  }\n}\n"}
{"nl": "This method does all the RipeMD 160 hashing function, and after that hash has taken place, it prepends the version  byte to the beginning of the Byte array", "code": "private byte[] RIPEMD160(byte[] tobeHashed){\n  RIPEMD160Digest digester=new RIPEMD160Digest();\n  byte[] retValue=new byte[digester.getDigestSize()];\n  digester.update(tobeHashed,0,tobeHashed.length);\n  digester.doFinal(retValue,0);\n  byte[] version=new byte[]{0x00};\n  return concateByteArray(version,retValue);\n}\n"}
{"nl": "Add all the unstagged files to the index", "code": "@CheckReturnValue public AddCmd all(){\n  Preconditions.checkState(Iterables.isEmpty(files),\"'all' and passing files is incompatible\");\n  return new AddCmd(force,true,files);\n}\n"}
{"nl": "A notation declaration", "code": "@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {\n}\n"}
{"nl": "Validation rules exclusive to castings", "code": "private void validateCasting(CastingImpl casting){\n  if (!ValidateGlobalRules.validatePlaysRoleStructure(casting)) {\n    Instance rolePlayer=casting.getRolePlayer();\n    errorsFound.add(ErrorMessage.VALIDATION_CASTING.getMessage(rolePlayer.type().getId(),rolePlayer.getId(),casting.getRole().getId()));\n  }\n}\n"}
{"nl": "save the comments history", "code": "public void saveCommentHistory() throws TeamException {\n  IPath pluginStateLocation=SVNUIPlugin.getPlugin().getStateLocation();\n  File tempFile=pluginStateLocation.append(COMMENT_HIST_FILE + \".tmp\").toFile();\n  File histFile=pluginStateLocation.append(COMMENT_HIST_FILE).toFile();\n  try {\n    XMLWriter writer=new XMLWriter(new BufferedOutputStream(new FileOutputStream(tempFile)));\n    try {\n      writer.startTag(ELEMENT_COMMIT_HISTORY,null,false);\n      for (int i=0; i < previousComments.length && i < maxComments; i++)       writer.printSimpleTag(ELEMENT_COMMIT_COMMENT,previousComments[i]);\n      writer.endTag(ELEMENT_COMMIT_HISTORY);\n    }\n  finally {\n      writer.close();\n    }\n    if (histFile.exists()) {\n      histFile.delete();\n    }\n    boolean renamed=tempFile.renameTo(histFile);\n    if (!renamed) {\n      throw new TeamException(new Status(IStatus.ERROR,SVNUIPlugin.ID,TeamException.UNABLE,Policy.bind(\"RepositoryManager.rename\",tempFile.getAbsolutePath()),null));\n    }\n  }\n catch (  IOException e) {\n    throw new TeamException(new Status(IStatus.ERROR,SVNUIPlugin.ID,TeamException.UNABLE,Policy.bind(\"RepositoryManager.save\",histFile.getAbsolutePath()),e));\n  }\n}\n"}
{"nl": "download file from storage server", "code": "public int download_file1(String file_id,DownloadCallback callback) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file1(file_id,file_offset,download_bytes,callback);\n}\n"}
{"nl": "Unit Test", "code": "public static void main(String[] args){\n  try {\n    ThreadPool tp=new ThreadPool(\"Unit Test Thread Pool\",5,10);\n    ThreadGroup group=tp.getThreadGroup();\n    group.list();\n    tp.destroy();\n    group.list();\n    tp.get();\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n  System.exit(0);\n}\n"}
{"nl": "Call requires API level 7", "code": "public boolean isScreenOn(){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ECLAIR_MR1) {\n    LogUtils.e(\"can not call isScreenOn if SDK_INT < 7 \");\n    return false;\n  }\n else {\n    return powerManager.isScreenOn();\n  }\n}\n"}
{"nl": "If you want to show full badge text or show 9+", "code": "public void shouldShowFullBadgeText(boolean shouldShowBadgeWithNinePlus){\n  this.shouldShowBadgeWithNinePlus=shouldShowBadgeWithNinePlus;\n}\n"}
{"nl": "Creates a new object whose type is set up based in the parameters", "code": "private static Object toTagValue(final TagShortTermLog dtShortTerm){\n  Object tagValue=null;\n  if (dtShortTerm.getTagValue() != null) {\n    tagValue=TypeConverter.cast(dtShortTerm.getTagValue(),dtShortTerm.getTagDataType());\n  }\n  return tagValue;\n}\n"}
{"nl": "execute a command within the swing thread", "code": "public boolean executeImmediately(final String command){\n  throw new RuntimeException(\"Internal error: OLD executeImmediately()\");\n}\n"}
{"nl": "get file info from storage server", "code": "public FileInfo query_file_info1(String file_id) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return null;\n  }\n  return this.query_file_info(parts[0],parts[1]);\n}\n"}
{"nl": "Set extended", "code": "protected VideoSearchQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "check meteor game finish condithion", "code": "private void checkTheMeteorGameFinishCondition(String[] packet){\n  increaseReceiveFinishEventCount();\n  if (getnReceiveFinishEventCount() >= getnMaxmumClients() && isCheckMeteorGameCheckFinishOneTime) {\n    sendMessageInTheRoomPeople(Settings._ANSWER_METEORGAME_METEOR_GAME_FINISH + \"\");\n    isCheckMeteorGameCheckFinishOneTime=false;\n    setTheClientScoreAboutMeteorGame(packet[2]);\n  }\n}\n"}
{"nl": "Determines if current L&F is Windows Classic LookAndFeel", "code": "public static boolean isWindowsClassicLookAndFeel(){\n  return UIUtils.isWindowsClassicLookAndFeel();\n}\n"}
{"nl": "Query if this pointer and qv could point to the same object under any contexts", "code": "@Override public boolean heap_sensitive_intersection(IVarAbstraction qv){\n  int i, j;\n  PtInsNode qn;\n  SegmentNode p, q, pt[], qt[];\n  qn=(PtInsNode)qv;\n  for (Iterator<AllocNode> it=pt_objs.keySet().iterator(); it.hasNext(); ) {\n    AllocNode an=it.next();\n    if (an instanceof StringConstantNode)     continue;\n    qt=qn.find_points_to(an);\n    if (qt == null)     continue;\n    pt=find_points_to(an);\n    for (i=0; i < PtInsIntervalManager.Divisions; ++i) {\n      p=pt[i];\n      while (p != null) {\n        for (j=0; j < PtInsIntervalManager.Divisions; ++j) {\n          q=qt[j];\n          while (q != null) {\n            if (quick_intersecting_test(p,q))             return true;\n            q=q.next;\n          }\n        }\n        p=p.next;\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  final MeganizeDAADialog dialog=new MeganizeDAADialog(getViewer().getFrame(),(Director)getDir());\n  final String command=dialog.showAndGetCommand();\n  if (command != null)   execute(command);\n}\n"}
{"nl": "****************************** MONSTER STATUS QUERIES", "code": "public MonsterStatusCursor queryMonsterStatus(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=false;\n  qh.Table=S.TABLE_MONSTER_STATUS;\n  qh.Columns=null;\n  qh.Selection=S.COLUMN_MONSTER_STATUS_MONSTER_ID + \" = ?\";\n  qh.SelectionArgs=new String[]{String.valueOf(id)};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new MonsterStatusCursor(wrapHelper(qh));\n}\n"}
{"nl": "Determine if the string is a valid json String", "code": "private static boolean isJsonString(final Object json){\n  boolean valid=false;\n  try {\n    if (json instanceof String) {\n      final JsonParser parser=mapper.getFactory().createParser((String)json);\n      while (parser.nextToken() != null) {\n      }\n      valid=true;\n    }\n  }\n catch (  IOException ignored) {\n  }\n  return valid;\n}\n"}
{"nl": "removes all attributes for which no sample has a defined value", "code": "public boolean removeUndefinedAttributes(){\n  LinkedList<String> undefined=new LinkedList<>();\n  for (  String attribute : getAttributeSet()) {\n    Map<String,Object> sample2values=getSamples2Values(attribute);\n    boolean ok=false;\n    for (    String sample : sample2values.keySet()) {\n      if (sample2values.get(sample) != null) {\n        ok=true;\n        break;\n      }\n    }\n    if (!ok)     undefined.add(attribute);\n  }\n  if (undefined.size() > 0)   removeAttributes(undefined);\n  return undefined.size() > 0;\n}\n"}
{"nl": "return true if this template should perform in non-blocking read", "code": "public boolean isNonBlockingRead(){\n  return _nonBlockingRead;\n}\n"}
{"nl": "Create a SSLContext for a given trusted certificate and client key and certificate", "code": "public static SSLContext createSSLContext(String trustedCert,String clientKey,String clientCert){\n  try {\n    SSLContext ctx=SSLContext.getInstance(\"TLS\");\n    ctx.init(CertificateUtil.getKeyManagers(\"client\",clientKey,clientCert),CertificateUtil.getTrustManagers(\"server\",trustedCert),null);\n    return ctx;\n  }\n catch (  NoSuchAlgorithmException|KeyManagementException e) {\n    throw new RuntimeException(\"Failed to create SSLContext\",e);\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  if (viewer != null) {\n    viewer.doSortByAlpha=true;\n    viewer.doSortByNrOfReads=false;\n    int div=viewer.getSplitPane().getDividerLocation();\n    viewer.getSplitPane().remove(viewer.getSplitPane().getTopComponent());\n    viewer.getSplitPane().setTopComponent(viewer.getTreePanel());\n    viewer.getSplitPane().setDividerLocation(div);\n  }\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getProperPairFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getProperPairFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "adds an email from address", "code": "public EmailBuilder from(String fromAddress){\n  this.from.add(fromAddress);\n  return this;\n}\n"}
{"nl": "Call to upload several new files", "code": "public void uploadNewFile(Context context,Account account,String[] localPaths,String[] remotePaths,String[] mimeTypes,Integer behaviour,Boolean createRemoteFolder,int createdBy){\n  Intent intent=new Intent(context,FileUploader.class);\n  intent.putExtra(FileUploader.KEY_ACCOUNT,account);\n  intent.putExtra(FileUploader.KEY_LOCAL_FILE,localPaths);\n  intent.putExtra(FileUploader.KEY_REMOTE_FILE,remotePaths);\n  intent.putExtra(FileUploader.KEY_MIME_TYPE,mimeTypes);\n  intent.putExtra(FileUploader.KEY_LOCAL_BEHAVIOUR,behaviour);\n  intent.putExtra(FileUploader.KEY_CREATE_REMOTE_FOLDER,createRemoteFolder);\n  intent.putExtra(FileUploader.KEY_CREATED_BY,createdBy);\n  context.startService(intent);\n}\n"}
{"nl": "field name to method name", "code": "public static String fieldNameToMethodName(String methodPrefix,String fieldName,boolean ignoreFirstLetterCase){\n  String methodName=null;\n  if (fieldName != null && fieldName.length() > 0) {\n    if (ignoreFirstLetterCase) {\n      methodName=methodPrefix + fieldName;\n    }\n else {\n      methodName=methodPrefix + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);\n    }\n  }\n else {\n    methodName=methodPrefix;\n  }\n  return methodName;\n}\n"}
{"nl": "****************************** ITEM TO MATERIAL QUERIES", "code": "public ItemToMaterialCursor queryItemsForMaterial(long material_item_id){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Selection=\"itm.\" + S.COLUMN_ITEM_TO_MATERIAL_MATERIAL_ID + \" = ? \";\n  qh.SelectionArgs=new String[]{\"\" + material_item_id};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=\"itm.amount DESC\";\n  qh.Limit=null;\n  return new ItemToMaterialCursor(wrapJoinHelper(builderItemToMaterial(),qh));\n}\n"}
{"nl": "Note: A signature attr is associated with a <em>class</em>, method or field so you need to create a new SignatureAttr for", "code": "public SignatureAttr(String s){\n  sig=new AsciiCP(s);\n}\n"}
{"nl": "Change the index sign", "code": "private static int changeIndexSign(final int index){\n  return -index - 1;\n}\n"}
{"nl": "Checks if two video format match", "code": "private boolean videoMatch(VideoFormat vf1,VideoFormat vf2){\n  if (vf1 instanceof RGBFormat && vf2 instanceof RGBFormat) {\n    RGBFormat rgbf1=(RGBFormat)vf1;\n    RGBFormat rgbf2=(RGBFormat)vf2;\n    return rgbf1.getBitsPerPixel() == rgbf2.getBitsPerPixel();\n  }\n  return vf1.getEncoding().equals(vf2.getEncoding());\n}\n"}
{"nl": "add item click listener to this view", "code": "public boolean addOnItemClickListener(OnItemClickListener itemClickListener){\n  return clickListeners.add(itemClickListener);\n}\n"}
{"nl": "Required for Externalizable", "code": "public AbortPreparedTransactionSpaceOperationRequest(){\n}\n"}
{"nl": "Apply the size behaviour", "code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsSetCallbackSettingsQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.setCallbackSettings\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "Serve a GoogleApiClient with callback actions", "code": "public static void actions(Context context,Api api,Action1<GoogleApiClient> onClientConnected,Action1<Throwable> onError){\n  GoogleApiClientActions.create(context.getApplicationContext(),new ApiDefinition(api),onClientConnected,onError);\n}\n"}
{"nl": "Delete a permit from the pilot's profile", "code": "public static void deletePermit(String permitId,@Nullable AirMapCallback<Void> callback){\n  PilotService.deletePermit(permitId,callback);\n}\n"}
{"nl": "Request the operation for moving the file/folder from one path to another", "code": "private void requestMoveOperation(Intent data){\n  OCFile folderToMoveAt=data.getParcelableExtra(FolderPickerActivity.EXTRA_FOLDER);\n  ArrayList<OCFile> files=data.getParcelableArrayListExtra(FolderPickerActivity.EXTRA_FILES);\n  getFileOperationsHelper().moveFiles(files,folderToMoveAt);\n}\n"}
{"nl": "Sends this packet from the client to the server", "code": "public void toServer(){\n  OpenModLoader.getSidedHandler().getClientPlayer().connection.sendPacket(new PacketWrapper(channel,new Packet(this)));\n}\n"}
{"nl": "Saves settings and terminates the application", "code": "private void formWindowClosed(java.awt.event.WindowEvent evt){\n  saveSettings();\n  System.exit(0);\n}\n"}
{"nl": "Initialize the SlickSignForm with the 3 default steps which are: Username, Email, and Password", "code": "public SlickForm withDefaultFields(){\n  FormField userField=new FormField(mContext).withType(TEXT).withIcon(R.drawable.ic_slick_user).withHint(mContext.getString(R.string.form_field_username));\n  FormField emailField=new FormField(mContext).withType(TEXT).withIcon(R.drawable.ic_slick_email).withHint(mContext.getString(R.string.form_field_email));\n  FormField passField=new FormField(mContext).withType(PASSWORD).withIcon(R.drawable.ic_slick_lock).withHint(mContext.getString(R.string.form_field_password));\n  this.formFields.add(userField);\n  this.formFields.add(emailField);\n  this.formFields.add(passField);\n  return this;\n}\n"}
{"nl": "Reads the number that is stored in the counter file and which represents the already committed data", "code": "private int readCounter() throws DataFallbackException {\n  final int counter;\n  openCounterDataInputStream();\n  try {\n    String line;\n    line=dInput.readLine();\n    if (line != null) {\n      counter=new Integer(line).intValue();\n      goToLine(counter);\n      if (LOG.isDebugEnabled())       LOG.debug(\"The counter file \" + counterFile.getName() + \" has been read\");\n    }\n else {\n      throw new DataFallbackException(\"readCounter() - The counter could not be read, the counter file is empty\");\n    }\n  }\n catch (  IOException e) {\n    LOG.error(\"Exception is: \" + e.getMessage());\n    throw new DataFallbackException(\"readCounter() - The counter could not be read \" + e.getMessage());\n  }\n finally {\n    closeCounterDataInputStream();\n  }\n  return counter;\n}\n"}
{"nl": "Set count", "code": "public MarketGetCategoriesQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "load all reference annotations from file", "code": "public void loadRefAnnotations() throws IOException {\n  numberOfRefAnnotations=0;\n  refAnnotationIndexForTaxonomy=-1;\n  try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){\n    for (int b=0; b < blockTypeRank.length; b++) {\n      if (getBlockType(b) == BlockType.megan_ref_annotations) {\n        ins.seek(getLocationOfBlockInFile(b));\n        refAnnotationNames[numberOfRefAnnotations]=ins.readNullTerminatedBytes();\n        if (refAnnotationNames[numberOfRefAnnotations].equals(Classification.Taxonomy))         refAnnotationIndexForTaxonomy=numberOfRefAnnotations;\n        int[] annotations=refAnnotations[numberOfRefAnnotations]=new int[getNumberOfReferences()];\n        for (int i=0; i < getNumberOfReferences(); i++) {\n          annotations[i]=ins.readInt();\n        }\n        numberOfRefAnnotations++;\n      }\n    }\n  }\n }\n"}
{"nl": "Create/Retrieve assignments for a single user for experiments associated to a single page", "code": "@POST @Path(\"applications/{applicationName}/pages/{pageName}/users/{userID}\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Return bucket assignments for a user for all the experiments associated with a page\",notes=\"The mutual exclusion and segmentation rules apply\") @Timed public Response postBatchAssignmentForPage(@PathParam(\"applicationName\") @ApiParam(value=\"Application Name\") final Application.Name applicationName,@PathParam(\"pageName\") @ApiParam(\"Page Name\") Page.Name pageName,@PathParam(\"userID\") @ApiParam(value=\"User(customer) ID\") final User.ID userID,@QueryParam(\"createAssignment\") @DefaultValue(\"true\") @ApiParam(value=\"conditional to generate an assignment if one doesn't exist\",defaultValue=\"true\") final boolean createAssignment,@QueryParam(\"ignoreSamplingPercent\") @DefaultValue(\"false\") @ApiParam(value=\"whether the sampling percent for the experiment should be ignored, \" + \"forcing the user into the experiment (if eligible)\",defaultValue=\"false\") final boolean ignoreSamplingPercent,@QueryParam(\"context\") @DefaultValue(\"PROD\") @ApiParam(value=\"context for the experiment, eg QA, PROD\") final Context context,@ApiParam(value=\"Segmentation Profile\") final SegmentationProfile segmentationProfile,@javax.ws.rs.core.Context final HttpHeaders headers){\n  List<Map> assignmentsFromPage=assignments.doPageAssignments(applicationName,pageName,userID,context,createAssignment,ignoreSamplingPercent,headers,segmentationProfile);\n  return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put(\"assignments\",assignmentsFromPage).build()).build();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();\n}\n"}
{"nl": "Checks if the ItemTemplate belongs to an item set", "code": "public boolean isItemSet(){\n  return getItemSet() != null;\n}\n"}
{"nl": "Filters to apply", "code": "public NewsfeedGetQuery filters(NewsfeedGetFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "Do long pulling", "code": "private void longPulling(ClientSession client,Map<String,String> pullingConfigs,HttpServletRequest req){\n  final AsyncContext asyncContext=req.startAsync();\n  asyncContext.setTimeout(0L);\n  longPullingScheduler.submit(new LongPullingTask(client,pullingConfigs,asyncContext));\n}\n"}
{"nl": "Set preview", "code": "public BoardGetTopicsQueryWithExtended preview(BoardGetTopicsPreview value){\n  return unsafeParam(\"preview\",value);\n}\n"}
{"nl": "REST DELETE by query request handler", "code": "@ApiMethod(path=\"{type}/\",verb=ApiVerb.DELETE,description=\"Gets and deletes entries from space that matches the query.\",produces={MediaType.APPLICATION_JSON_VALUE}) @RequestMapping(value=\"/{type}\",method=RequestMethod.DELETE,produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> deleteByQuery(@ApiPathParam(name=\"type\",description=TYPE_DESCRIPTION) @PathVariable String type,@ApiQueryParam(name=\"query\") @RequestParam(value=QUERY_PARAM) String query,@ApiQueryParam(name=\"max\",description=\"The maximum number of entries to return. Default is Integer.MAX_VALUE\") @RequestParam(value=MAX_PARAM,required=false) Integer max){\n  if (logger.isLoggable(Level.FINE))   logger.fine(\"creating take query with type: \" + type + \" and query: \"+ query);\n  GigaSpace gigaSpace=ControllerUtils.xapCache.get();\n  SQLQuery<Object> sqlQuery=new SQLQuery<Object>(type,query);\n  int maxSize=(max == null ? maxReturnValues : max.intValue());\n  Object[] docs;\n  try {\n    docs=gigaSpace.takeMultiple(sqlQuery,maxSize);\n  }\n catch (  DataAccessException e) {\n    throw translateDataAccessException(gigaSpace,e,type);\n  }\n  if (docs == null) {\n    docs=new Object[]{};\n  }\n  try {\n    Map<String,Object> result=new HashMap<String,Object>();\n    result.put(\"status\",\"success\");\n    result.put(\"data\",ControllerUtils.mapper.readValue(ControllerUtils.mapper.writeValueAsString(docs),ArrayList.class));\n    return result;\n  }\n catch (  IOException e) {\n    throw new RestException(e.getMessage());\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final ClusterViewer viewer=getViewer();\n  int max=viewer.getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(null).size();\n  int number=Math.min(max,viewer.getPcoaTab().getTriplotSize());\n  String result=JOptionPane.showInputDialog(viewer.getFrame(),\"Number of tri-plot vectors (0-\" + max + \"): \",number);\n  if (result != null && Basic.isInteger(result))   executeImmediately(\"set triplotSize=\" + Basic.parseInt(result) + \";\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketAddAlbumQuery(VkApiClient client,UserActor actor,int ownerId,String title){\n  super(client,\"market.addAlbum\",AddAlbumResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  title(title);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n}\n"}
{"nl": "Add a Double column with the specified restrictions (and no NaN/Infinite values allowed)", "code": "public Builder addColumnDouble(String name,Double minAllowedValue,Double maxAllowedValue){\n  return addColumnDouble(name,minAllowedValue,maxAllowedValue,false,false);\n}\n"}
{"nl": "Create a ServiceClient instance using the given SSLContext and requestPayloadSizeLimit", "code": "public static ServiceClient createServiceClient(SSLContext sslContext,int requestPayloadSizeLimit){\n  ServiceClient serviceClient;\n  try {\n    serviceClient=NettyHttpServiceClient.create(ServiceClientFactory.class.getCanonicalName(),Executors.newFixedThreadPool(4),Executors.newScheduledThreadPool(1));\n    if (requestPayloadSizeLimit > 0) {\n      serviceClient.setRequestPayloadSizeLimit(requestPayloadSizeLimit);\n    }\n    serviceClient.setSSLContext(sslContext);\n    serviceClient.start();\n    return serviceClient;\n  }\n catch (  URISyntaxException e) {\n    throw new RuntimeException(\"Failed to create ServiceClient\",e);\n  }\n}\n"}
{"nl": "A text block that is a single newline", "code": "public static TextBlock newLine(){\n  return new TextBlock(ImmutableList.of(\"\"));\n}\n"}
{"nl": "Scroll views left or right so nearest view will be in the middle of screen", "code": "private void scrollToCenter(){\n  View nearestToCenterView=findCurrentCenterView();\n  if (nearestToCenterView != null) {\n    shiftToCenterCardScroller.setTargetPosition(getPosition(nearestToCenterView));\n    startSmoothScroll(shiftToCenterCardScroller);\n  }\n}\n"}
{"nl": "Find first instance", "code": "public boolean findFirst(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,false) > 0;\n}\n"}
{"nl": "Checks if specified option is disabled", "code": "private boolean isOptionDisabled(UrlFilterRuleOption option){\n  loadRuleProperties();\n  return disabledOptions != null && disabledOptions.contains(option);\n}\n"}
{"nl": "Test case for deleting a sub process", "code": "@Deployment(resources={\"org/activiti/engine/test/bpmn/callactivity/CallActivity.testTwoSubProcesses.bpmn20.xml\",\"org/activiti/engine/test/bpmn/callactivity/simpleSubProcess.bpmn20.xml\"}) public void testTwoSubProcesses(){\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"callTwoSubProcesses\");\n  List<ProcessInstance> instanceList=runtimeService.createProcessInstanceQuery().list();\n  assertNotNull(instanceList);\n  assertEquals(3,instanceList.size());\n  List<Task> taskList=taskService.createTaskQuery().list();\n  assertNotNull(taskList);\n  assertEquals(2,taskList.size());\n  runtimeService.deleteProcessInstance(processInstance.getId(),\"Test cascading\");\n  instanceList=runtimeService.createProcessInstanceQuery().list();\n  assertNotNull(instanceList);\n  assertEquals(0,instanceList.size());\n  taskList=taskService.createTaskQuery().list();\n  assertNotNull(taskList);\n  assertEquals(0,taskList.size());\n}\n"}
{"nl": "test if propel defined in project", "code": "private boolean isPropelDefined(){\n  if (!this.hasPropelChecked) {\n    this.hasPropel=(PhpIndex.getInstance(holder.getProject()).getClassesByName(\"Propel\").size() > 0);\n    this.hasPropelChecked=true;\n  }\n  return this.hasPropel;\n}\n"}
{"nl": "Initialize an AirMapAirportProperties from JSON", "code": "public AirMapAirportProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n"}
{"nl": "****************************** ARENA QUEST QUERIES", "code": "public ArenaQuestCursor queryArenaQuests(){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_ARENA_QUESTS;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new ArenaQuestCursor(wrapJoinHelper(builderArenaQuest(),qh));\n}\n"}
{"nl": "Set device id", "code": "protected AccountRegisterDeviceQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n"}
{"nl": "Shows metrics for this audio player", "code": "public void showMetrics(){\n  timer.show(\"JavaStreamingAudioPlayer\");\n}\n"}
{"nl": "has next? Prefetches the next item", "code": "public boolean hasNext(){\n  if (enable) {\n    if (done)     return false;\n    if (next != null)     return true;\n    try {\n      next=queue.take();\n    }\n catch (    InterruptedException e) {\n      done=true;\n      next=null;\n      return false;\n    }\n    if (next == sentinel) {\n      done=true;\n      next=null;\n      return false;\n    }\n else     return true;\n  }\n else   return iterator.hasNext();\n}\n"}
{"nl": "author  hhj TODO", "code": "public static void debugInfo(String msg){\n  debugInfo(DEFAULT_TAG,msg);\n}\n"}
{"nl": "Decodes image file into Bitmap, resize it and save it back", "code": "private boolean resizeAndSaveImage(File targetFile,int maxWidth,int maxHeight) throws IOException {\n  boolean saved=false;\n  ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);\n  DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();\n  ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,ImageDownloader.Scheme.FILE.wrap(targetFile.getAbsolutePath()),targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);\n  Bitmap bmp=decoder.decode(decodingInfo);\n  if (bmp != null && configuration.processorForDiscCache != null) {\n    log(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISC);\n    bmp=configuration.processorForDiscCache.process(bmp);\n    if (bmp == null) {\n      L.e(ERROR_PROCESSOR_FOR_DISC_CACHE_NULL,memoryCacheKey);\n    }\n  }\n  if (bmp != null) {\n    OutputStream os=new BufferedOutputStream(new FileOutputStream(targetFile),BUFFER_SIZE);\n    try {\n      bmp.compress(configuration.imageCompressFormatForDiscCache,configuration.imageQualityForDiscCache,os);\n    }\n  finally {\n      IoUtils.closeSilently(os);\n    }\n    bmp.recycle();\n  }\n  return true;\n}\n"}
{"nl": "Hiding all available badges", "code": "public void hideAllBudges(){\n  for (  RelativeLayout badge : badgeList) {\n    if (badge.getVisibility() == VISIBLE)     BadgeHelper.hideBadge(badge);\n  }\n  badgeSaveInstanceHashMap.clear();\n}\n"}
{"nl": "Mark all text in the document that matches the given pattern", "code": "public static void markAll(JTextComponent pane,Pattern pattern,SimpleMarker marker){\n  SyntaxDocument sDoc=ActionUtils.getSyntaxDocument(pane);\n  if (sDoc == null || pattern == null) {\n    return;\n  }\n  Matcher matcher=sDoc.getMatcher(pattern);\n  while (matcher.find()) {\n    markText(pane,matcher.start(),matcher.end(),marker);\n  }\n}\n"}
{"nl": "Create a new Calculable that records the time", "code": "public Calculable(String id,double value){\n  setId(id);\n  setValue(value);\n  setWhen(System.currentTimeMillis());\n}\n"}
{"nl": "Gets whether the result is a single value result", "code": "public boolean isSingleResult(){\n  return _results.getFieldNames().length == 1 && _results.getFieldValues().length == 1;\n}\n"}
{"nl": "Returns true if the UI mode is alternated", "code": "public final boolean isAlternatingUiMode(){\n  return (myAlternate & CFG_UI_MODE) != 0;\n}\n"}
{"nl": "Requires the device id to be the given id", "code": "@NotNull public NlConfigurationToolbarFixture requireDevice(@NotNull String id){\n  Wait.seconds(30).expecting(\"configuration to be updated\").until(null);\n  return this;\n}\n"}
{"nl": "remove an element described by ObjectInfo, while the SL is unlocked", "code": "public void removeUnlocked(IObjectInfo<T> oi){\n  remove_impl((ObjectInfo<T>)oi);\n}\n"}
{"nl": "mc2b: transform mel-cepstrum to MLSA digital filter coefficients", "code": "public static void mc2b(double mc[],double b[],int m,double a){\n  b[m]=mc[m];\n  for (m--; m >= 0; m--) {\n    b[m]=mc[m] - a * b[m + 1];\n  }\n}\n"}
{"nl": "This method takes in the response object and sends in to the cloudant logging class", "code": "private void logResponse(MessageResponse response) throws Exception {\n  Logging cloudantLogging=new Logging();\n  String intent=\"<no intent>\";\n  String confidence=\"<no confidence>\";\n  if (!response.getIntents().isEmpty() && response.getIntents().get(0) != null) {\n    intent=response.getIntents().get(0).getIntent();\n    confidence=response.getIntents().get(0).getConfidence().toString();\n  }\n  String entity=response.getEntities().size() > 0 ? \"Entity: \" + response.getEntities().get(0).getEntity() + \" Value:\"+ response.getEntities().get(0).getValue() : \"<no entity>\";\n  String convoOutput=(String)(response.getOutput().get(\"text\") != null ? response.getOutput().get(\"text\").toString() : \"<no response>\");\n  String convoId=(String)(response.getContext().get(\"conversation_id\") != null ? (response.getContext().get(\"conversation_id\")).toString() : \"<no conversation id>\");\n  String retrieveAndRankOutput=(String)(response.getOutput().get(\"CEPayload\") != null ? response.getOutput().get(\"CEPayload\").toString() : \"<no payload>\");\n  cloudantLogging.log(response.getInputText(),intent,confidence,entity,convoOutput,convoId,retrieveAndRankOutput);\n}\n"}
{"nl": "unlock odex file", "code": "public void unLock(File targetFile){\n  File lockFile=new File(targetFile.getParentFile().getAbsolutePath().concat(\"/lock\"));\n  if (!lockFile.exists()) {\n    return;\n  }\n  if (this.mRefCountMap.containsKey(lockFile.getAbsolutePath())) {\n    FileLockCount fileLockCount=this.mRefCountMap.get(lockFile.getAbsolutePath());\n    if (fileLockCount != null) {\n      java.nio.channels.FileLock fileLock=fileLockCount.mFileLock;\n      RandomAccessFile randomAccessFile=fileLockCount.fOs;\n      FileChannel fileChannel=fileLockCount.fChannel;\n      try {\n        if (RefCntDec(lockFile.getAbsolutePath()) <= 0) {\n          if (fileLock != null && fileLock.isValid()) {\n            fileLock.release();\n          }\n          if (randomAccessFile != null) {\n            randomAccessFile.close();\n          }\n          if (fileChannel != null) {\n            fileChannel.close();\n          }\n        }\n      }\n catch (      IOException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n"}
{"nl": "Show the login screen", "code": "public static void showLogin(Activity activity,int requestCode){\n  Intent intent=new Intent(activity,LoginActivity.class);\n  activity.startActivityForResult(intent,requestCode);\n}\n"}
{"nl": "Returns true if given value is determined to be constant valued, false otherwise", "code": "public static boolean isValueConstantValued(Value op){\n  if (op instanceof PhiExpr) {\n    Iterator<Value> argsIt=((PhiExpr)op).getValues().iterator();\n    Constant firstConstant=null;\n    while (argsIt.hasNext()) {\n      Value arg=argsIt.next();\n      if (!(arg instanceof Constant))       return false;\n      if (firstConstant == null)       firstConstant=(Constant)arg;\n else       if (!firstConstant.equals(arg))       return false;\n    }\n    return true;\n  }\n  return Evaluator.isValueConstantValued(op);\n}\n"}
{"nl": "register one global attribute group", "code": "public void addGlobalAttributeGroupDecl(XSAttributeGroupDecl decl){\n  fGlobalAttrGrpDecls.put(decl.fName,decl);\n  decl.setNamespaceItem(this);\n}\n"}
{"nl": "close the readerWriter/writer, if it is open", "code": "public void close() throws IOException {\n  if (io != null) {\n    try {\n      io.close();\n    }\n  finally {\n      io=null;\n    }\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public DictionaryBasedBreakIterator(InputStream compiledRules,InputStream dictionaryStream) throws IOException {\n  this.fRData=RBBIDataWrapper.get(compiledRules);\n  this.dictionary=new BreakDictionary(dictionaryStream);\n}\n"}
{"nl": "Connect to the server to receive updates", "code": "public void connect(){\n  if (listeners.isEmpty()) {\n    AirMapLog.i(\"TrafficService\",\"No listeners, not connecting\");\n    return;\n  }\n  AirMapLog.i(\"TrafficService\",\"Connecting to Traffic Service\");\n  if (connectionState == ConnectionState.Connecting) {\n    return;\n  }\n  connectionState=ConnectionState.Connecting;\n  allTraffic.clear();\n  AirMap.getCurrentFlight(currentFlightCallback);\n}\n"}
{"nl": "Google Play Services Lifecycle methods", "code": "@Override public void onConnected(Bundle connectionHint){\n  initializeUI();\n  startLocationUpdates();\n}\n"}
{"nl": "Return an extended response with additional fields", "code": "protected GroupsIsMemberQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "gets factor used to compute percentage for a series in a transposed chart", "code": "public double[] computePercentFactorPerSampleForTransposedChart(DefaultChartData chartData,String[] series){\n  final double[] percentFactorPerSample=new double[series.length];\n  for (int i=0; i < series.length; i++) {\n    double value=chartData.getTotalForSeriesIncludingDisabledAttributes(series[i]);\n    percentFactorPerSample[i]=(value == 0 ? 0 : 100 / value);\n  }\n  return percentFactorPerSample;\n}\n"}
{"nl": "%1[complete]%2 %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_COMPLETE(){\n  return new SM_SYSTEM_MESSAGE(1300612);\n}\n"}
{"nl": "Notify the listeners about the event", "code": "protected synchronized void beforeSpaceModeChange(SpaceMode newMode){\n  if (_logger.isLoggable(Level.FINER))   _logger.finer(\"Invoking beforeSpaceModeChange event, new mode \" + newMode);\n  Queue<ISpaceModeListener> remoteListeners=new LinkedList<ISpaceModeListener>();\n  for (Iterator<ISpaceModeListener> iter=_primarySpaceModeListeners.iterator(); iter.hasNext(); ) {\n    ISpaceModeListener listener=iter.next();\n    try {\n      SpaceInitializationIndicator.setInitializer();\n      if (LRMIUtilities.isRemoteProxy(listener)) {\n        if (_logger.isLoggable(Level.FINEST))         _logger.finest(\"located remote listener for beforeSpaceModeChange, adding to asynchronous dispatch queue [\" + listener.toString() + \"]\");\n        remoteListeners.add(listener);\n        continue;\n      }\n      listener.beforeSpaceModeChange(newMode);\n    }\n catch (    DirectPersistencyRecoveryException dpe) {\n      if (_logger.isLoggable(Level.SEVERE)) {\n        _logger.log(Level.SEVERE,dpe.getMessage());\n      }\n      throw dpe;\n    }\ncatch (    Exception rex) {\n      if (_logger.isLoggable(Level.FINE)) {\n        _logger.log(Level.FINE,\"Failed to invoke method ISpaceModeListener.beforeSpaceModeChange(...) implemented by listener [\" + listener + \"]. Action Taken: Unregistered listener\",rex);\n      }\n      _primarySpaceModeListeners.removeListener(listener);\n    }\n finally {\n      SpaceInitializationIndicator.unsetInitializer();\n    }\n  }\n  if (remoteListeners.size() > 0)   dispatchBeforeEventToRemoteListeners(remoteListeners,newMode);\n  if (_logger.isLoggable(Level.FINEST))   _logger.finest(\"completed invoking synchronous beforeSpaceModeChange event with mode \" + newMode);\n}\n"}
{"nl": "Fling the scroll view", "code": "public void fling(int velocityX){\n  if (getChildCount() > 0) {\n    int width=getWidth() - getPaddingRight() - getPaddingLeft();\n    int right=getChildAt(0).getWidth();\n    mScroller.fling(getScrollX(),getScrollY(),velocityX,0,0,Math.max(0,right - width),0,0,width / 2,0);\n    ViewCompat.postInvalidateOnAnimation(this);\n  }\n}\n"}
{"nl": "Builds a path to test page based on given type package name", "code": "public static String buildTestPageUrl(final Class<?> type){\n  return FILE_PROTOCOL + findResourcePath(type);\n}\n"}
{"nl": "Allows to trigger any Wcm action using provided Map as POST properties", "code": "public void triggerAction(Map<String,String> postProperties,String commandUrl,String successMessage) throws IOException {\n  HttpPost request=new HttpPost(String.format(commandUrl,authorIp));\n  List<BasicNameValuePair> params=new ArrayList<>();\n  postProperties.entrySet().stream().forEach(null);\n  request.setEntity(new UrlEncodedFormEntity(params,Consts.UTF_8));\n  sender.sendCrxRequest(request,successMessage);\n}\n"}
{"nl": "Checks that the exporter has been initialized", "code": "private void checkIsInitialized(){\n  Preconditions.checkNotNull(boxDropExporterConfig,getClass().getSimpleName() + \" must be initialized first\");\n}\n"}
{"nl": "Launch take picture from camera pick flow", "code": "@PickTriggerResult public int fromCamera(){\n  final File outputFile=this.createCameraImageFile();\n  if (outputFile == null) {\n    return PickTriggerResult.TRIGGER_PICK_ERR_CAM_FILE;\n  }\n  return this.triggerPick(this.prepareCameraIntent(this.createCameraImageUri(outputFile)),QiPick.REQ_CAMERA);\n}\n"}
{"nl": "entry point", "code": "@SuppressWarnings(\"rawtypes\") public static void main(String args[]){\n  if (args.length < 1) {\n    System.out.println(\"Error: Must have 1 parameter: config filename\");\n    return;\n  }\n  System.out.println(\"java.version=\" + System.getProperty(\"java.version\"));\n  try {\n    ClientGlobal.init(args[0]);\n    System.out.println(\"network_timeout=\" + ClientGlobal.g_network_timeout + \"ms\");\n    System.out.println(\"charset=\" + ClientGlobal.g_charset);\n    file_ids=new java.util.concurrent.ConcurrentLinkedQueue();\n    for (int i=0; i < 10; i++) {\n      (new UploadThread(i)).start();\n    }\n    for (int i=0; i < 20; i++) {\n      (new DownloadThread(i)).start();\n    }\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n}\n"}
{"nl": "Required for Externalizable", "code": "public SpaceTypeDescriptorContainer(){\n}\n"}
{"nl": "Set start comment id", "code": "public VideoGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n"}
{"nl": "Items ID", "code": "protected MarketGetByIdQueryWithExtended itemIds(List<String> value){\n  return unsafeParam(\"item_ids\",value);\n}\n"}
{"nl": "is guideline vertical", "code": "public boolean isVerticalGuideline(){\n  if (mConstraintWidget instanceof Guideline) {\n    Guideline g=(Guideline)mConstraintWidget;\n    return g.getOrientation() == Guideline.VERTICAL;\n  }\n  return false;\n}\n"}
{"nl": "Create the All Off message", "code": "public SerialMessage allOffMessage(){\n  logger.debug(\"NODE {}: Switch All - Creating All Off message.\",getNode().getNodeId());\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessageType.Request,SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessagePriority.Set);\n  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_ALL_OFF};\n  result.setMessagePayload(newPayload);\n  return result;\n}\n"}
{"nl": "resets all the fields", "code": "public void reset(){\n  super.clear();\n  fContextType=CONTEXT_INITIALIZE;\n  fLocationHints=null;\n  fTriggeringComponent=null;\n  fEnclosedElementName=null;\n  fAttributes=null;\n}\n"}
{"nl": "Delete the config", "code": "public void delete(Config config){\n  configDao.unBindApp(config);\n  configDao.unIndex(config);\n  configDao.delete(config.getId());\n}\n"}
{"nl": "write all matches associated with the given read", "code": "private static int writeMatches(IReadBlock readBlock,Writer w) throws IOException {\n  int countMatches=0;\n  String readHeader=readBlock.getReadHeader();\n  if (readHeader.startsWith(\">\"))   readHeader=readHeader.substring(1);\n  w.write(\"\\nQuery=\" + readHeader + \"\\n\");\n  final String readSequence=readBlock.getReadSequence();\n  if (readSequence != null)   w.write(\"\\t(\" + readSequence.length() + \" letters)\\n\");\n  w.write(\"\\n\");\n  if (readBlock.getNumberOfAvailableMatchBlocks() == 0)   w.write(\" ***** No hits found ******\\n\");\n else {\n    for (    IMatchBlock matchBlock : readBlock.getMatchBlocks()) {\n      w.write(matchBlock.getText() + \"\\n\");\n      countMatches++;\n    }\n  }\n  return countMatches;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  PrinterJob job=PrinterJob.getPrinterJob();\n  PageFormat pageFormat=job.pageDialog(new PageFormat());\n  ProgramProperties.setPageFormat(pageFormat);\n}\n"}
{"nl": "Stop loading data task", "code": "private void abortLoading(){\n  if (thread == null)   return;\n  if (thread.isAlive()) {\n    thread.interrupt();\n    try {\n      thread.join();\n    }\n catch (    InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"}
{"nl": "elapsedTimeDisplay Get the elapsed time between two dates in readable format", "code": "public static String elapsedTimeDisplay(Date dateStart,Date dateEnd){\n  long diff=dateEnd.getTime() - dateStart.getTime();\n  long diffMinutes=diff / (60 * 1000) % 60;\n  long diffHours=diff / (60 * 60 * 1000);\n  String mins=Long.toString(diffMinutes);\n  if (mins.length() == 1) {\n    mins=\"0\" + mins;\n  }\n  return Long.toString(diffHours) + \":\" + mins;\n}\n"}
{"nl": "adjusts the scroll bars to recenter on world coordinates that were previously in center of window", "code": "public void adjust(boolean horizontal,boolean vertical){\n  if (horizontal) {\n    int newXValue=(int)Math.round(xFactor * (scrollBarX.getMaximum() - scrollBarX.getMinimum()) - xPortionOfVisible * scrollBarX.getVisibleAmount());\n    scrollBarX.setValue(newXValue);\n  }\n  if (vertical) {\n    int newYValue=(int)Math.round(yFactor * (scrollBarY.getMaximum() - scrollBarY.getMinimum()) - yPortionOfVisible * scrollBarY.getVisibleAmount());\n    scrollBarY.setValue(newYValue);\n  }\n}\n"}
{"nl": "This method checks all restrictions for recreate legion", "code": "private boolean canRecreateLegion(Player activePlayer,Legion legion){\n  if (!isBrigadeGeneral(activePlayer)) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_DISPERSE_ONLY_MASTER_CAN_DISPERSE);\n    return false;\n  }\n else   if (!legion.isDisbanding()) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Add a dimension to the config", "code": "public ResourcesPoet addDimension(String name,String value){\n  Element bool=document.createElement(\"dimen\");\n  bool.setAttribute(\"name\",name);\n  bool.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(bool);\n  return this;\n}\n"}
{"nl": "Return true if the widget has vertical constraints", "code": "private static boolean hasVerticalConstraints(@NotNull ConstraintWidget widget){\n  ConstraintAnchor top=widget.getAnchor(ConstraintAnchor.Type.TOP);\n  ConstraintAnchor bottom=widget.getAnchor(ConstraintAnchor.Type.BOTTOM);\n  ConstraintAnchor baseline=widget.getAnchor(ConstraintAnchor.Type.BASELINE);\n  return (top != null && top.isConnected()) || (bottom != null && bottom.isConnected()) || (baseline != null && baseline.isConnected());\n}\n"}
{"nl": "Returns the concrete <code>MapEntry&lt;K,V&gt;</code> type that represents the entries of the given map", "code": "public static <K,V>Type<MapEntry<K,V>> concreteEntryType(Type<? extends Map<K,V>> mapType){\n  Type<?> type=TypeFactory.valueOf(MapEntry.class,mapType.getActualTypeArguments());\n  return (Type<MapEntry<K,V>>)type;\n}\n"}
{"nl": "show an error notation", "code": "public static void showInternalError(Object parentIgnored,String message){\n  showNotification(title,\"Internal error: \" + message,Mode.error,Pos.BOTTOM_LEFT,60000);\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ReplicationPolicy copy=(ReplicationPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(empty,copy));\n}\n"}
{"nl": "Initialize the Repo, this will be invoke when giiwa startup", "code": "public static void init(Configuration conf){\n  ROOT=conf.getString(\"repo.path\",\"/opt/repo\");\n}\n"}
{"nl": "Returns an absolute URL to an image representing the chart input", "code": "private String generateChartHtml(Chart chart,User user) throws IOException {\n  JFreeChart jFreechart=chartService.getJFreeChart(chart,new Date(),null,i18nManager.getI18nFormat(),user);\n  return uploadImage(chart.getUid(),ChartUtils.getChartAsPngByteArray(jFreechart,578,440));\n}\n"}
{"nl": "Clears backlog for all cursors in the topic", "code": "public CompletableFuture<Void> clearBacklog(){\n  log.info(\"[{}] Clearing backlog on all cursors in the topic.\",topic);\n  List<CompletableFuture<Void>> futures=Lists.newArrayList();\n  List<String> cursors=getSubscriptions().keys();\n  cursors.addAll(getReplicators().keys());\n  for (  String cursor : cursors) {\n    futures.add(clearBacklog(cursor));\n  }\n  return FutureUtil.waitForAll(futures);\n}\n"}
{"nl": "Deletes the concept as a type", "code": "@Override public void innerDelete(){\n  Collection<? extends Concept> subSet=subTypes();\n  Collection<? extends Concept> instanceSet=instances();\n  subSet.remove(this);\n  if (subSet.isEmpty() && instanceSet.isEmpty()) {\n    deleteNode();\n  }\n else {\n    throw new ConceptException(ErrorMessage.CANNOT_DELETE.getMessage(toString()));\n  }\n}\n"}
{"nl": "Toggle the selection status of the item at a given position", "code": "@Override public void toggleSelection(T photo){\n  if (selectedPhotos.contains(photo)) {\n    selectedPhotos.remove(photo);\n  }\n else {\n    selectedPhotos.add(photo);\n  }\n}\n"}
{"nl": "draw text, around the middle of the cell decided by the index", "code": "private void drawText(Canvas canvas,int index,Paint paint,String text){\n  if (isIllegalIndex(index)) {\n    return;\n  }\n  int x=getXByIndex(index);\n  int y=getYByIndex(index);\n  float top=cellHeight + (y - 1) * cellHeight;\n  float bottom=top + cellHeight;\n  float baseline=RenderUtil.getBaseline(top,bottom,paint);\n  float startX=RenderUtil.getStartX(cellWidth * (x - 1) + cellWidth * 0.5f,paint,text);\n  canvas.drawText(text,startX,baseline,paint);\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void e(String msg){\n  if (isDebug) {\n    Log.e(TAG,msg);\n  }\n}\n"}
{"nl": "calc minimum and maximum values (both x and y) over all DataSets", "code": "public void calcMinMax(){\n  if (mDataSets == null)   return;\n  mYMax=-Float.MAX_VALUE;\n  mYMin=Float.MAX_VALUE;\n  mXMax=-Float.MAX_VALUE;\n  mXMin=Float.MAX_VALUE;\n  for (int i=0, size=mDataSets.size(); i < size; i++) {\n    T set=mDataSets.get(i);\n    calcMinMax(set);\n  }\n  mLeftAxisMax=-Float.MAX_VALUE;\n  mLeftAxisMin=Float.MAX_VALUE;\n  mRightAxisMax=-Float.MAX_VALUE;\n  mRightAxisMin=Float.MAX_VALUE;\n  T firstLeft=getFirstLeft(mDataSets);\n  if (firstLeft != null) {\n    mLeftAxisMax=firstLeft.getYMax();\n    mLeftAxisMin=firstLeft.getYMin();\n    for (int i=0; i < mDataSets.size(); i++) {\n      T dataSet=mDataSets.get(i);\n      if (dataSet.getAxisDependency() == AxisDependency.LEFT) {\n        if (dataSet.getYMin() < mLeftAxisMin)         mLeftAxisMin=dataSet.getYMin();\n        if (dataSet.getYMax() > mLeftAxisMax)         mLeftAxisMax=dataSet.getYMax();\n      }\n    }\n  }\n  T firstRight=getFirstRight(mDataSets);\n  if (firstRight != null) {\n    mRightAxisMax=firstRight.getYMax();\n    mRightAxisMin=firstRight.getYMin();\n    for (int i=0; i < mDataSets.size(); i++) {\n      T dataSet=mDataSets.get(i);\n      if (dataSet.getAxisDependency() == AxisDependency.RIGHT) {\n        if (dataSet.getYMin() < mRightAxisMin)         mRightAxisMin=dataSet.getYMin();\n        if (dataSet.getYMax() > mRightAxisMax)         mRightAxisMax=dataSet.getYMax();\n      }\n    }\n  }\n}\n"}
{"nl": "rename a sample", "code": "public boolean renameSample(String sample,String newName,boolean allowReplaceSample){\n  if (allowReplaceSample || !table.rowKeySet().contains(newName)) {\n    Map<String,Object> row=table.row(sample);\n    if (row != null) {\n      table.rowKeySet().remove(sample);\n      for (      String key : row.keySet()) {\n        table.put(newName,key,row.get(key));\n      }\n    }\n    int pos=Math.max(0,sampleOrder.indexOf(sample));\n    sampleOrder.remove(sample);\n    sampleOrder.add(pos,newName);\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Set client id", "code": "protected AuthConfirmQuery clientId(int value){\n  return unsafeParam(\"client_id\",value);\n}\n"}
{"nl": "Sort a result on the field with the given key", "code": "public void sort(List<Map<String,Object>> sheet,String key){\n  Collections.sort(sheet,new FieldComparator(key));\n}\n"}
{"nl": "Constructs a Sample from its component parts", "code": "public Sample(short[] frameData,byte[] residualData,int residualSize){\n  this.frameData=frameData;\n  this.residualData=residualData;\n  this.residualSize=residualSize;\n}\n"}
{"nl": "reads a null-terminated string", "code": "public int readNullTerminatedBytes(byte[] bytes) throws IOException {\n  int i=0;\n  while (true) {\n    byte letter=(byte)ins.read();\n    if (letter == 0)     return i;\n else     bytes[i++]=letter;\n  }\n}\n"}
{"nl": "This method encodes the equipment configuration object into XML", "code": "public String encode2XML(){\n  return null;\n}\n"}
{"nl": "Method to execute process", "code": "public static void executeCommand(ProcessBuilder p) throws IOException {\n  Process proc=p.start();\n  try (BufferedReader stdInput=new BufferedReader(new InputStreamReader(proc.getInputStream()));BufferedReader stdError=new BufferedReader(new InputStreamReader(proc.getErrorStream()))){\n    logger.info(\"Standard output of the command:\\n\");\n    String s;\n    while ((s=stdInput.readLine()) != null) {\n      logger.info(s);\n    }\n    logger.info(\"Standard error of the command (if any):\\n\");\n    while ((s=stdError.readLine()) != null) {\n      logger.info(s);\n    }\n  }\n }\n"}
{"nl": "DONT REMOVE!!!! Called by the ObjectInputStream on deserialization", "code": "public Object readResolve() throws ObjectStreamException {\n  Object stub=LRMIRuntime.getRuntime().getStubCache().getStub(_stubId);\n  if (stub == null) {\n    if (_stubCacheLogger.isLoggable(Level.FINEST))     _stubCacheLogger.finest(\"attempt to get stub from cache by id \" + _stubId + \" no cached stub exist under that id\");\n    throw new MissingCachedStubException(_stubId);\n  }\n  if (_stubCacheLogger.isLoggable(Level.FINEST))   _stubCacheLogger.finest(\"got stub from cache by id \" + _stubId + \" result stub toString() = \"+ stub);\n  return stub;\n}\n"}
{"nl": "Creates a new Instance of the TimePreferenceDialogFragment and stores the key of the related Preference", "code": "public static TimePreferenceDialogFragmentCompat newInstance(String key){\n  final TimePreferenceDialogFragmentCompat fragment=new TimePreferenceDialogFragmentCompat();\n  final Bundle b=new Bundle(1);\n  b.putString(ARG_KEY,key);\n  fragment.setArguments(b);\n  return fragment;\n}\n"}
{"nl": "Check if item can be moved from storage by player", "code": "public static boolean isItemRestrictedFrom(Player player,Item item,byte storage){\n  StorageType type=StorageType.getStorageTypeById(storage);\nswitch (type) {\ncase LEGION_WAREHOUSE:\n    if (!LegionService.getInstance().getLegionMember(player.getObjectId()).hasRights(LegionPermissionsMask.WH_WITHDRAWAL) || !LegionConfig.LEGION_WAREHOUSE || !player.isLegionMember()) {\n      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300322));\n      return true;\n    }\n  break;\ndefault :\nbreak;\n}\nreturn false;\n}\n"}
{"nl": "Transition to \"+\" over the given animation duration", "code": "public void plus(long animationDurationMS){\n  if (state == FLAG_STATE_PLUS) {\n    return;\n  }\n  toggle(animationDurationMS);\n}\n"}
{"nl": "messages/removes and shares kinah when item gained via BID", "code": "private void winningBidActions(Player player,int npcId,long highestValue){\n  DropNpc dropNpc=DropRegistrationService.getInstance().getDropRegistrationMap().get(npcId);\n  if (highestValue > 0) {\n    if (!player.getInventory().tryDecreaseKinah(highestValue)) {\n      return;\n    }\n    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_PAY_ACCOUNT_ME(highestValue));\n  }\n  if (player.isInGroup2() || player.isInAlliance2()) {\n    for (    Player member : dropNpc.getInRangePlayers()) {\n      if (member != null && !player.equals(member) && member.isOnline()) {\n        PacketSendUtility.sendPacket(member,SM_SYSTEM_MESSAGE.STR_MSG_PAY_ACCOUNT_OTHER(player.getName(),highestValue));\n        long distributeKinah=highestValue / (dropNpc.getGroupSize() - 1);\n        member.getInventory().increaseKinah(distributeKinah);\n        PacketSendUtility.sendPacket(member,SM_SYSTEM_MESSAGE.STR_MSG_PAY_DISTRIBUTE(highestValue,dropNpc.getGroupSize() - 1,distributeKinah));\n      }\n    }\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"delete attribute=\");\n  Set<String> attributes=new HashSet<>();\n  while (!np.peekMatchIgnoreCase(\";\")) {\n    String attribute=np.getWordRespectCase();\n    attributes.add(attribute);\n  }\n  np.matchIgnoreCase(\";\");\n  if (attributes.size() > 0) {\n    final SamplesViewer viewer=((SamplesViewer)getViewer());\n    viewer.getSamplesTable().deleteColumns(attributes.toArray(new String[attributes.size()]));\n  }\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String[] firstLines=Basic.getFirstLinesFromFile(new File(fileName),2);\n  return firstLines != null && firstLines.length == 2 && firstLines[0].startsWith(\">\") && Basic.contains(firstLines[1],';',2) && firstLines[1].toLowerCase().contains(\"root\");\n}\n"}
{"nl": "Updates the dataItemids that matches the id passed and as well as all the parent references", "code": "private void updateTreeDataItemsIdAndParentReference(String id){\n  int idCount=sameIdDataItemsMap.get(id);\n  for (  JsTreeDataItem item : this) {\n    if (item.getOriginalId().equals(id) && idCount >= 0) {\n      item.setId(item.getOriginalId() + JSTREE_FIELD_ID_SEPARATOR + idCount);\n      idCount--;\n    }\n    if (item.getParent().equals(id)) {\n      item.setParent(item.getParent() + JSTREE_FIELD_ID_SEPARATOR + idCount);\n    }\n  }\n}\n"}
{"nl": "Reset statement state", "code": "private void init(){\n  updateCount=-1;\n  resultSet=null;\n}\n"}
{"nl": "Set whether or not Master balls can be used", "code": "public CatchOptions noMasterBall(boolean skipMasterBall){\n  this.skipMasterBall=skipMasterBall;\n  return this;\n}\n"}
{"nl": "Print cluster information", "code": "private void printClusterData(){\n  assert clusterList != null;\n  System.out.println(\"Total No of Clusters: \" + clusterList.size());\n  Iterator<Cluster> it=clusterList.iterator();\n  for (int noCluster=1; it.hasNext(); noCluster++) {\n    Cluster aCluster=it.next();\n    ArrayList<String> listPoints=aCluster.getAllDataPoints();\n    System.out.println(\"Cluster Number : \" + noCluster);\n    for (int i=0; i < listPoints.size(); i++) {\n      System.out.print(listPoints.get(i) + \" \");\n    }\n    System.out.println();\n  }\n}\n"}
{"nl": "Changes alpha value by that number", "code": "public void changeAlpha(int value){\n  this.alpha+=value;\n  if (alpha > 255) {\n    alpha=255;\n  }\n else   if (alpha < 0) {\n    alpha=0;\n  }\n}\n"}
{"nl": "Starts the acquisition thread", "code": "protected void startJobAcquisitionThread(){\n  if (asyncJobAcquisitionThread == null) {\n    asyncJobAcquisitionThread=new Thread(asyncJobsDueRunnable);\n  }\n  asyncJobAcquisitionThread.start();\n}\n"}
{"nl": "Return response messages from users who have sent a friend request or, if \"suggested\" is set to true, to return a list of suggested friends", "code": "public FriendsGetRequestsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Returns true is there is an ack pending from the controller", "code": "public boolean isAckPending(){\n  return this.ackPending;\n}\n"}
{"nl": "A resource has been moved", "code": "public void resourceMoved(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String destinationResourceName){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceMoved(resource,destinationFolder,destinationResourceName);\n  }\n}\n"}
{"nl": "Remove all whitespace characters from the values in the specified String column", "code": "public Builder stringRemoveWhitespaceTransform(String columnName){\n  return transform(new RemoveWhiteSpaceTransform(columnName));\n}\n"}
{"nl": "A node has joined the cluster", "code": "@Override public void nodeJoined(final ClusterNode clusterNode){\n  LOGGER.info(\"Detected Terracotta node joined cluster: \" + clusterNode.getId());\n}\n"}
{"nl": "override fillInStackTrace() and do nothing", "code": "@Override public Throwable fillInStackTrace(){\n  return null;\n}\n"}
{"nl": "Prompts user to overwrite resources that are in the <code>resources<code> list and are modified", "code": "protected IResource[] checkOverwriteOfDirtyResources(IResource[] resources) throws SVNException, InterruptedException {\n  IResource[] dirtyResources=getModifiedResources(resources,null);\n  if (dirtyResources == null || dirtyResources.length == 0) {\n    return resources;\n  }\n  PromptingDialog dialog=new PromptingDialog(getShell(),dirtyResources,getPromptCondition(dirtyResources),Policy.bind(\"ReplaceWithAction.confirmOverwrite\"));\n  return dialog.promptForMultiple();\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getSelectedReference() != null;\n}\n"}
{"nl": "Adjust values in x so that all values smaller than minVal are set to minVal, and all values greater than maxVal are set to maxVal", "code": "public static boolean clipRange(double[] x,double minVal,double maxVal){\n  boolean modified=false;\n  if (x == null) {\n    return modified;\n  }\n  for (int i=0; i < x.length; i++) {\n    if (x[i] < minVal) {\n      x[i]=minVal;\n      modified=true;\n    }\n else     if (x[i] > maxVal) {\n      x[i]=maxVal;\n      modified=true;\n    }\n  }\n  return modified;\n}\n"}
{"nl": "Initialize the data of this checked in change set", "code": "private void initData(){\n  revision=SVNRevision.SVN_INVALID_REVNUM;\n  SyncInfoTree syncInfoTree=getSyncInfoSet();\n  SyncInfo[] syncInfos=syncInfoTree.getSyncInfos();\n  if (syncInfos.length > 0) {\n    SyncInfo syncInfo=syncInfos[0];\n    if (syncInfo instanceof SVNStatusSyncInfo) {\n      SVNStatusSyncInfo svnSyncInfo=(SVNStatusSyncInfo)syncInfo;\n      RemoteResourceStatus remoteResourceStatus=svnSyncInfo.getRemoteResourceStatus();\n      if (remoteResourceStatus != null) {\n        SVNRevision.Number revnum=remoteResourceStatus.getLastChangedRevision();\n        if (revnum != null)         revision=revnum.getNumber();\n else         revision=SVNRevision.INVALID_REVISION.getNumber();\n        author=remoteResourceStatus.getLastCommitAuthor();\n        if ((author == null) || (author.length() == 0)) {\n          author=Policy.bind(\"SynchronizeView.noAuthor\");\n        }\n        date=remoteResourceStatus.getLastChangedDate();\n        comment=fetchComment(svnSyncInfo);\n      }\n else {\n        revision=SVNRevision.INVALID_REVISION.getNumber();\n        author=Policy.bind(\"SynchronizeView.noAuthor\");\n        comment=\"\";\n        date=null;\n      }\n    }\n  }\n}\n"}
{"nl": "Restarts the activity associated with the given module", "code": "public static void restartActivity(@NotNull Project project,@NotNull InstantRunContext instantRunContext){\n  for (  IDevice device : findDevices(project)) {\n    InstantRunClient instantRunClient=InstantRunManager.getInstantRunClient(instantRunContext);\n    if (instantRunClient == null) {\n      Logger.getInstance(RestartActivityAction.class).warn(\"Unable to connect to to app running on device, not restarting.\");\n      return;\n    }\n    try {\n      if (instantRunClient.getAppState(device) == AppState.FOREGROUND) {\n        instantRunClient.restartActivity(device);\n        if (InstantRunSettings.isShowToastEnabled()) {\n          showToast(device,instantRunContext,\"Activity Restarted\");\n        }\n      }\n    }\n catch (    IOException e) {\n      Messages.showErrorDialog(project,\"Unable to restart activity: \" + e,\"Instant Run\");\n      InstantRunManager.LOG.warn(\"Unable to restart activity\",e);\n    }\n  }\n}\n"}
{"nl": "get the distance to widget's parent in Y", "code": "static int rootDistanceY(ConstraintWidget widget){\n  int rootHeight=widget.getParent().getHeight();\n  int aY=widget.getY();\n  int aHeight=widget.getHeight();\n  return Math.min(aY,rootHeight - (aY + aHeight));\n}\n"}
{"nl": "collect all non dictionary columns and compose it to single byte array and store it in 1 index of out put array", "code": "private void fillNonDictionaryArrayFromRow(CarbonRow row,Object[] outputArray){\n  if (nonDictionaryFieldIndexes.length > 0) {\n    byte[][] nonDictByteArray=new byte[nonDictionaryFieldIndexes.length][];\n    for (int i=0; i < nonDictByteArray.length; i++) {\n      nonDictByteArray[i]=row.getBinary(nonDictionaryFieldIndexes[i]);\n    }\n    byte[] nonDictionaryCols=RemoveDictionaryUtil.packByteBufferIntoSingleByteArray(nonDictByteArray);\n    outputArray[byteArrayIndexInRow]=nonDictionaryCols;\n  }\n}\n"}
{"nl": "Generate a uniform random number from the given rng", "code": "public static double uniform(Random rng,double min,double max){\n  return rng.nextDouble() * (max - min) + min;\n}\n"}
{"nl": "lists the current cluster membership", "code": "@Override public ListenableFuture<MemberListResponse> listMember(){\n  return clusterStub.memberList(MemberListRequest.getDefaultInstance());\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] bytes,int offset,int size){\n  if (firstSample) {\n    firstSample=false;\n    timer.stop(\"firstAudio\");\n    if (audioMetrics) {\n      timer.getTimer(\"firstAudio\").showTimesShortTitle(\"\");\n      timer.getTimer(\"firstAudio\").showTimesShort(0);\n    }\n  }\n  System.arraycopy(bytes,offset,outputData,curIndex,size);\n  curIndex+=size;\n  return true;\n}\n"}
{"nl": "Convert an input stream to a matrix", "code": "public INDArray asMatrix(InputStream inputStream) throws IOException {\n  if (channels == 3)   return toBgr(inputStream);\n  try {\n    BufferedImage image=ImageIO.read(inputStream);\n    return asMatrix(image);\n  }\n catch (  IOException e) {\n    throw new IOException(\"Unable to load image\",e);\n  }\n}\n"}
{"nl": "javaNew returns a new instance of a given clazz", "code": "public static int javaNew(int luaState,Class clazz) throws LuaException {\n  LuaState L=LuaStateFactory.getExistingState(luaState);\nsynchronized (L) {\n    Object ret=getObjInstance(L,clazz);\n    L.pushJavaObject(ret);\n    return 1;\n  }\n}\n"}
{"nl": "Check if element located by specified By locator exists in DOM in an element's context", "code": "public static ExpectedCondition<Boolean> scopedElementLocatedByNotPresent(final WebElement scope,final By locator){\n  return null;\n}\n"}
{"nl": "synchronize chart to reflect latest user selection in taxon chart", "code": "public void sync() throws CanceledException {\n  if (!inSync) {\n    inSync=true;\n    IChartData chartData=(IChartData)getChartData();\n    chartData.clear();\n    Document doc=((Director)dir).getDocument();\n    setChartTitle(cName + \" profile for \" + doc.getTitle());\n    int numberOfDatasets=doc.getNumberOfSamples();\n    if (numberOfDatasets > 0) {\n      chartData.setAllSeries(doc.getSampleNames());\n      String[] sampleNames=doc.getSampleNames().toArray(new String[doc.getSampleNames().size()]);\n      java.util.Collection<Integer> ids=parentViewer.getSelectedIds();\n      LinkedList<String> classNames=new LinkedList<>();\n      for (      Integer id : ids) {\n        String className=parentViewer.getClassification().getName2IdMap().get(id);\n        classNames.add(className);\n        int[] summarized=parentViewer.getSummarized(id);\n        for (int i=0; i < sampleNames.length; i++) {\n          chartData.putValue(sampleNames[i],className,summarized[i]);\n        }\n      }\n      chartData.setClassNames(classNames);\n    }\n    chartData.setTree(parentViewer.getInducedTree(((Name2IdMap)parentViewer.getClassification().getName2IdMap()).getId2Name(),parentViewer.getSelectedNodes()));\n    super.sync();\n    inSync=false;\n  }\n}\n"}
{"nl": "Load data from any table", "code": "public static Beans<Data> load(String table,W q,int s,int n){\n  return Helper.load(table,q,s,n,Data.class);\n}\n"}
{"nl": "Run standalone QP", "code": "public static void main(String[] args) throws Throwable {\n  if (args.length != 1) {\n    if (_logger.isLoggable(Level.INFO)) {\n      _logger.info(\"Usage: QueryProcessor <property file>\");\n    }\n    System.exit(-1);\n  }\n  Properties config=new Properties();\n  FileInputStream fileIn=new FileInputStream(args[0]);\n  config.load(fileIn);\n  fileIn.close();\n  QueryProcessorConfiguration qpConfig=new QueryProcessorConfiguration(null,config);\n  IJSpace space=(IJSpace)SpaceFinder.find(qpConfig.getSpaceURL());\n  IRemoteSpace remoteSpace=((IDirectSpaceProxy)space).getRemoteJSpace();\n  QueryProcessor qp=(QueryProcessor)QueryProcessorFactory.newInstance(space,remoteSpace,config);\n  try {\n    int listenPort=qpConfig.getListenPort();\n    Registry registry=LocateRegistry.createRegistry(listenPort);\n    qp.initStub();\n    registry.bind(IQueryProcessor.QP_LOOKUP_NAME,qp._stub);\n    _logger.info(\"QueryProcessor started on port:\" + listenPort);\n  }\n catch (  Throwable e) {\n    qp.close();\n    throw e;\n  }\n  Object keepAlive=new Object();\nsynchronized (keepAlive) {\n    try {\n      keepAlive.wait();\n    }\n catch (    InterruptedException e) {\n    }\n  }\n}\n"}
{"nl": "Method to display Snacbar with short duration", "code": "public static void showSnackShort(View view,String text){\n  Snackbar.make(view,text,Snackbar.LENGTH_SHORT).show();\n}\n"}
{"nl": "Rotates photo", "code": "private void rotate(){\n  final int fullCircle=360;\n  mAngle+=ROTATION_DEGREES;\n  mAngle%=fullCircle;\n  mCropView.rotateImage(ROTATION_DEGREES);\n}\n"}
{"nl": "Execute a command asynchronously, no transformation of the output string", "code": "protected void execWithInput(CommandInput commandInput,String command,CompletionHandler completionHandler){\n  execWithInput(commandInput,command,completionHandler,null,SSH_OPERATION_TIMEOUT_SHORT,TimeUnit.SECONDS);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"groups.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Disband league after minimum of members has been reached", "code": "public static void disband(League league){\n  Preconditions.checkState(league.onlineMembers() <= 1,\"Can't disband league with more than one online member\");\n  leagues.remove(league.getTeamId());\n  league.onEvent(new LeagueDisbandEvent(league));\n}\n"}
{"nl": "Create a CommonClassLoader", "code": "private CommonClassLoader(ClassLoader parent){\n  super(\"CommonClassLoader\",new URL[0],parent);\n}\n"}
{"nl": "Creates a new CompareWithRemoteAction for the specified revision", "code": "public CompareWithRemoteAction(SVNRevision revision){\n  this.revision=revision;\n}\n"}
{"nl": "Calculates the timestamp when a given number of days is over", "code": "public static long calculateDuration(int dayCount){\n  if (dayCount == 0) {\n    return Integer.MAX_VALUE;\n  }\n  Calendar cal=Calendar.getInstance();\n  cal.add(Calendar.DATE,+dayCount);\n  return ((cal.getTimeInMillis() - System.currentTimeMillis()) / 1000);\n}\n"}
{"nl": "does window currently have a selected match node?", "code": "public boolean hasSelectedMatchLevelNode(){\n  TreePath[] paths=dataTree.getSelectionPaths();\n  if (paths != null) {\n    for (    TreePath path : paths) {\n      if (getMatchLevelNodeFromPath(path) != null)       return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Checks if name is already taken or not", "code": "private boolean isFreeName(String name){\n  return !DAOManager.getDAO(LegionDAO.class).isNameUsed(name);\n}\n"}
{"nl": "Returns true if this policy allows resizing the bottom edge", "code": "public boolean bottomAllowed(){\n  return (myFlags & BOTTOM_EDGE) != 0;\n}\n"}
{"nl": "Set filters", "code": "public VideoSearchQueryWithExtended filters(List<VideoSearchFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "Add a drawable to the config", "code": "public ResourcesPoet addDrawable(String name,String value){\n  Element bool=document.createElement(\"drawable\");\n  bool.setAttribute(\"name\",name);\n  bool.appendChild(document.createTextNode(value));\n  resourceElement.appendChild(bool);\n  return this;\n}\n"}
{"nl": "if rectangle does not overlap any rectangle already contained, then add it", "code": "public boolean addIfDoesNotOverlap(Pair<Rectangle2D,T> pair){\n  if (previousHit != null && pair.get1().intersects(previousHit))   return false;\n  if (data.size() == data.capacity())   data.ensureCapacity(data.size() + 1);\n  int which=data.size();\n  data.add(pair);\n  currentComparison=which;\n  BitSet startingX=getAll(sortedByMinX.headSet(which));\n  andAll(sortedByMaxX.tailSet(which),startingX);\n  boolean ok=(startingX.cardinality() == 0);\n  if (!ok) {\n    andAll(sortedByMinY.headSet(which),startingX);\n    ok=(startingX.cardinality() == 0);\n    if (!ok) {\n      andAll(sortedByMaxY.tailSet(which),startingX);\n      ok=(startingX.cardinality() == 0);\n    }\n  }\n  currentComparison=-1;\n  if (!ok) {\n    int id=startingX.nextSetBit(0);\n    previousHit=data.get(id).get1();\n    data.remove(which);\n    return false;\n  }\n else {\n    sortedByMaxX.add(which);\n    sortedByMinX.add(which);\n    sortedByMaxY.add(which);\n    sortedByMinY.add(which);\n    if (data.size() == 0)     bbox.setRect(pair.get1());\n else     bbox.add(pair.get1());\n    return true;\n  }\n}\n"}
{"nl": "Start intent", "code": "public void startIntent(String title,String... filters){\n  if (filters == null || filters.length == 0) {\n    startIntent(title);\n    return;\n  }\n  List<Intent> filteredIntents=getFilteredIntents(filters);\n  if (filteredIntents.size() == 0) {\n    startIntent(title);\n    return;\n  }\n  Intent tIntent=filteredIntents.remove(0);\n  Intent chooser=Intent.createChooser(tIntent,title);\n  chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,filteredIntents.toArray(new Parcelable[filteredIntents.size()]));\n  mContext.startActivity(chooser);\n}\n"}
{"nl": "Max for a column", "code": "public static Column max(DataFrame dataFrame,String columnName){\n  return dataFrame.groupBy(columnName).agg(functions.max(columnName)).col(columnName);\n}\n"}
{"nl": "Thread safe hash map implementation", "code": "public static <K,T,V>MultiDimensionalMap<K,T,V> newThreadSafeHashBackedMap(){\n  return new MultiDimensionalMap<>(new ConcurrentHashMap<Pair<K,T>,V>());\n}\n"}
{"nl": "Enables or disables load footer", "code": "public ElasticListView enableLoadFooter(boolean enable){\n  if (enable) {\n    if (!mEnableLoader) {\n      super.addFooterView(mLoadFooter,null,true);\n    }\n  }\n else {\n    if (mEnableLoader) {\n      removeFooterView(mLoadFooter);\n    }\n  }\n  mEnableLoader=enable;\n  return this;\n}\n"}
{"nl": "stop notify", "code": "private boolean stopNotify1(){\n  return bleManager.stopNotify(UUID_SERVICE,UUID_NOTIFY_1);\n}\n"}
{"nl": "is this service available?", "code": "@Override public boolean isAvailable(){\n  return files.size() > 0;\n}\n"}
{"nl": "TODO: Document", "code": "public void mergeWith(DistributionDocument tpData,double fLearningRate){\n}\n"}
{"nl": "Converts a byte array to a hexadecimal string representation", "code": "static public String bb2hex(byte[] bb){\n  StringBuilder result=new StringBuilder();\n  for (int i=0; i < bb.length; i++) {\n    result.append(String.format(\"%02X \",bb[i]));\n  }\n  return result.toString();\n}\n"}
{"nl": "Generate identity matrix", "code": "public static Matrix identity(int m,int n,double value){\n  Matrix A=new Matrix(m,n);\n  double[][] X=A.getArray();\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      X[i][j]=(i == j ? value : 0.0);\n    }\n  }\n  return A;\n}\n"}
{"nl": "Every second, the scheduler looks into", "code": "@Scheduled(fixedDelay=1000) public void updateStatisticsForAllReposiotries(){\n  for (  Long repositoryId : statisticsScheduleRepository.findRepositoryIds()) {\n    updateRepositoryStatistics(repositoryId);\n  }\n}\n"}
{"nl": "error log", "code": "public static void e(String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.e(TAG,buildMsg(msg),e);\n  }\n}\n"}
{"nl": "Extracts the colorAccent color attribute of the passing Context's theme", "code": "@ColorInt public int extractAccentColorFrom(Context context){\n  return extractIntAttribute(context,ACCENT);\n}\n"}
{"nl": "You have passed Stage %0!", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_COMPLETE_STAGE_IDARENA(String value0){\n  return new SM_SYSTEM_MESSAGE(1400930,value0);\n}\n"}
{"nl": "Writes NTP version as defined in RFC-1305", "code": "private void _writeVersion(byte[] buffer){\n  buffer[INDEX_VERSION]=NTP_MODE | (NTP_VERSION << 3);\n}\n"}
{"nl": "paint the selection rectangle", "code": "public void paintSelection(Graphics g0){\n  Graphics2D g=(Graphics2D)g0;\n  SelectedBlock selectedBlock=getSelectedBlock();\n  if (selectedBlock.isSelected()) {\n    Rectangle2D rect=new Rectangle2D.Double(0,getY(selectedBlock.getFirstRow() - 1),0,0);\n    rect.add(getSize().getWidth(),Math.min(getSize().height,getY(selectedBlock.getLastRow())));\n    g.setColor(highlightColorSemiTransparent);\n    g.fill(rect);\n  }\n}\n"}
{"nl": "Set the empty view text message", "code": "private void inflateEmptyText(){\n  if (mEmptyText != R.string.text_empty) {\n    if (mEmptyLayout != R.layout.layout_empty) {\n      throw new RuntimeException(\"Cannot assign the EmptyText attribute. \" + \"You already overridden the entire emptyLayout, no need to specify \" + \"custom color or custom text message\");\n    }\n else {\n      textEmpty.setText(getResources().getString(R.string.text_empty));\n    }\n  }\n}\n"}
{"nl": "Loads rule properties lazily", "code": "private synchronized void loadRuleProperties(){\n  try {\n    if (regex != null || urlRegexp != null || invalidRule) {\n      return;\n    }\n    String urlRuleText=getRuleText();\n    if (StringUtils.startsWith(urlRuleText,MASK_WHITE_LIST)) {\n      urlRuleText=urlRuleText.substring(MASK_WHITE_LIST.length());\n    }\n    int optionsIndex=StringUtils.lastIndexOf(urlRuleText,OPTIONS_DELIMITER);\n    if (optionsIndex > -1) {\n      String optionsBase=urlRuleText;\n      urlRuleText=urlRuleText.substring(0,optionsIndex);\n      String options=optionsBase.substring(optionsIndex + 1);\n      loadOptions(options);\n    }\n    urlRuleText=toPunycode(urlRuleText);\n    boolean regexRule=urlRuleText.startsWith(MASK_REGEX_RULE) && urlRuleText.endsWith(MASK_REGEX_RULE);\n    if (regexRule) {\n      regex=urlRuleText.substring(MASK_REGEX_RULE.length(),urlRuleText.length() - MASK_REGEX_RULE.length());\n      Pattern pattern=getUrlRegexp();\n      if (pattern == null) {\n        throw new IllegalArgumentException(\"ruleText\");\n      }\n    }\n else {\n      regex=createRegexFromRule(urlRuleText);\n    }\n  }\n catch (  Exception ex) {\n    LoggerFactory.getLogger(this.getClass()).warn(\"Invalid filter rule: {}\\r\\n\",getRuleText(),ex);\n    invalidRule=true;\n  }\n}\n"}
{"nl": "Crappy implementation of the C# is nullEmptyOrWhitespace which is occasionally useful", "code": "public static boolean isNullEmptyOrWhitespace(String test){\n  if (test == null) {\n    return true;\n  }\n  if (test.trim().length() == 0) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Event start date in Unixtime format", "code": "public GroupsEditQuery eventStartDate(Integer value){\n  return unsafeParam(\"event_start_date\",value);\n}\n"}
{"nl": "This method will clear the dictionary access count after its usage is complete so that column can be deleted form LRU cache whenever memory reaches threshold", "code": "private void clearDictionaryFromQueryModel(){\n  if (null != queryModel) {\n    Map<String,Dictionary> columnToDictionaryMapping=queryModel.getColumnToDictionaryMapping();\n    if (null != columnToDictionaryMapping) {\n      for (      Map.Entry<String,Dictionary> entry : columnToDictionaryMapping.entrySet()) {\n        CarbonUtil.clearDictionaryCache(entry.getValue());\n      }\n    }\n  }\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.1998,0.198,0.195,0.19,0.18,0.000200000000000,0.00200000000002,0.00499999999997,0.00999999999994,0.0199999999999};\n}\n"}
{"nl": "Event finish date in Unixtime format", "code": "public GroupsEditQuery eventFinishDate(Integer value){\n  return unsafeParam(\"event_finish_date\",value);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select series=all;\");\n}\n"}
{"nl": "Factory method - creates a new quantum given the number of seconds", "code": "public static Quantum seconds(int interval){\n  return new Quantum(TimeUnit.SECONDS,interval);\n}\n"}
{"nl": "Constructs a FileAudioPlayer", "code": "public SingleFileAudioPlayer(String baseName,AudioFileFormat.Type type){\n  this.baseName=baseName + \".\" + type.getExtension();\n  this.outputType=type;\n  debug=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.debug\");\n  outputList=new Vector();\n}\n"}
{"nl": "skip some bytes", "code": "public int skipBytes(int bytes) throws IOException {\n  return in.skipBytes(bytes);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioSetBroadcastQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.setBroadcast\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "generate graph", "code": "private static void generateGraph(IDataProcessStatus dataProcessTaskStatus,SchemaInfo info,String tableName,String partitionID,CarbonDataLoadSchema schema,String factStoreLocation,List<LoadMetadataDetails> loadMetadataDetails) throws GraphGeneratorException {\n  DataLoadModel model=new DataLoadModel();\n  model.setCsvLoad(null != dataProcessTaskStatus.getCsvFilePath() || null != dataProcessTaskStatus.getFilesToProcess());\n  model.setSchemaInfo(info);\n  model.setTableName(dataProcessTaskStatus.getTableName());\n  model.setTaskNo(\"1\");\n  model.setBlocksID(dataProcessTaskStatus.getBlocksID());\n  model.setFactTimeStamp(readCurrentTime());\n  model.setEscapeCharacter(dataProcessTaskStatus.getEscapeCharacter());\n  model.setQuoteCharacter(dataProcessTaskStatus.getQuoteCharacter());\n  model.setCommentCharacter(dataProcessTaskStatus.getCommentCharacter());\n  if (null != loadMetadataDetails && !loadMetadataDetails.isEmpty()) {\n    model.setLoadNames(CarbonDataProcessorUtil.getLoadNameFromLoadMetaDataDetails(loadMetadataDetails));\n    model.setModificationOrDeletionTime(CarbonDataProcessorUtil.getModificationOrDeletionTimesFromLoadMetadataDetails(loadMetadataDetails));\n  }\n  boolean hdfsReadMode=dataProcessTaskStatus.getCsvFilePath() != null && dataProcessTaskStatus.getCsvFilePath().startsWith(\"hdfs:\");\n  int allocate=null != dataProcessTaskStatus.getCsvFilePath() ? 1 : dataProcessTaskStatus.getFilesToProcess().size();\n  String outputLocation=CarbonProperties.getInstance().getProperty(\"store_output_location\",\"../carbon-store/system/carbon/etl\");\n  GraphGenerator generator=new GraphGenerator(model,hdfsReadMode,partitionID,factStoreLocation,allocate,schema,\"0\",outputLocation);\n  generator.generateGraph();\n}\n"}
{"nl": "Resolve a given query using the rule base", "code": "public MatchQuery resolveToQuery(MatchQuery inputQuery,boolean materialise){\n  Query query=new Query(inputQuery,graph);\n  if (!query.isRuleResolvable())   return inputQuery;\n  QueryAnswers answers=resolveQuery(query,materialise);\n  return new ReasonerMatchQuery(inputQuery,graph,answers);\n}\n"}
{"nl": "do we use subject for locking itself ?", "code": "public boolean isPerLogicalSubjectLockObject(boolean isEvictable){\n  if (isEvictable)   throw new RuntimeException(\"AllInCacheLockManager::no evictable object\");\n  return true;\n}\n"}
{"nl": "Return a new iterable over a single item", "code": "public static <T>Iterable<T> Iterable(T object){\n  return null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosSaveMessagesPhotoQuery(VkApiClient client,Actor actor,String photo){\n  super(client,\"photos.saveMessagesPhoto\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photo(photo);\n}\n"}
{"nl": "Set sex", "code": "public AuthSignupQuery sex(AppsSignupSex value){\n  return unsafeParam(\"sex\",value);\n}\n"}
{"nl": "Reset SchemaParsingConfig", "code": "public void reset(){\n  ((SchemaParsingConfig)config).reset();\n}\n"}
{"nl": "is the current object selected?", "code": "public boolean isCurrentSelected(){\n  return isCurrentSet() && toSelectIds.contains(currentId);\n}\n"}
{"nl": "***************************** HORN MELODIES QUERIES", "code": "public HornMelodiesCursor queryMelodiesFromNotes(String notes){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=false;\n  qh.Table=S.TABLE_HORN_MELODIES;\n  qh.Columns=null;\n  qh.Selection=S.COLUMN_HORN_MELODIES_NOTES + \" = ?\";\n  qh.SelectionArgs=new String[]{notes};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new HornMelodiesCursor(wrapHelper(qh));\n}\n"}
{"nl": "Register new filter", "code": "public void add(RequestFilter filter){\n  filters.add(filter);\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.00664355180993,0.0454328283309,0.0981162737374,0.176713524579,0.321946865392,10.5115496887,7.4976304671,6.23205600701,5.23968436955,4.2079028257};\n}\n"}
{"nl": "Add a new condition in the query", "code": "public DocumentQuery addCondition(DocumentCondition condition){\n  this.conditions.add(Objects.requireNonNull(condition,\"condition is required\"));\n  return this;\n}\n"}
{"nl": "load the info section", "code": "public InfoSection loadInfoSection() throws IOException {\n  try (InputReader reader=new InputReader(getFile(),null,null,true)){\n    readHeader(reader);\n    infoSection.read(reader);\n  }\n   return infoSection;\n}\n"}
{"nl": "Creates new form MailPreviewForm", "code": "public MailPreviewForm(){\n  initComponents();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set showAminoAcids=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.setShowAminoAcids(value);\n}\n"}
{"nl": "Checks if account is restricted by penalty or not", "code": "public static boolean isAccountPenaltyActive(Account account){\n  AccountTime accountTime=account.getAccountTime();\n  return accountTime != null && accountTime.getPenaltyEnd() != null && (accountTime.getPenaltyEnd().getTime() == 1000 || accountTime.getPenaltyEnd().getTime() >= System.currentTimeMillis());\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set summarized=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Unbind all bindings on a certain class", "code": "public void unbind(Object obj){\n  Set<IBinding> bindings=getBindings(obj.getClass());\n  for (  IBinding binding : bindings) {\n    binding.unbind();\n  }\n  mBindings.remove(obj.getClass());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosReorderPhotosQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.reorderPhotos\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n"}
{"nl": "To bind different types of holder and solve different the bind events", "code": "@Override public void onBindViewHolder(final RecyclerView.ViewHolder holder,int positions){\n  super.onBindViewHolder(holder,positions);\n  int viewType=holder.getItemViewType();\n  if (mItemTouchHelper != null && itemDragEnabled && viewType != LOADING_VIEW && viewType != HEADER_VIEW && viewType != EMPTY_VIEW && viewType != FOOTER_VIEW) {\n    if (mToggleViewId != NO_TOGGLE_VIEW) {\n      View toggleView=((BaseViewHolder)holder).getView(mToggleViewId);\n      if (toggleView != null) {\n        toggleView.setTag(R.id.BaseQuickAdapter_viewholder_support,holder);\n        if (mDragOnLongPress) {\n          toggleView.setOnLongClickListener(mOnToggleViewLongClickListener);\n        }\n else {\n          toggleView.setOnTouchListener(mOnToggleViewTouchListener);\n        }\n      }\n    }\n else {\n      holder.itemView.setTag(R.id.BaseQuickAdapter_viewholder_support,holder);\n      holder.itemView.setOnLongClickListener(mOnToggleViewLongClickListener);\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,PhotoFull.class));\n  accessToken(actor.getAccessToken());\n  photos(photos);\n  extended(true);\n}\n"}
{"nl": "Handler scan result", "code": "public void handleDecode(Result result,Bitmap barcode){\n  inactivityTimer.onActivity();\n  playBeepSoundAndVibrate();\n  if (result == null || TextUtils.isEmpty(result.getText())) {\n    if (analyzeCallback != null) {\n      analyzeCallback.onAnalyzeFailed();\n    }\n  }\n else {\n    if (analyzeCallback != null) {\n      analyzeCallback.onAnalyzeSuccess(barcode,result.getText());\n    }\n  }\n}\n"}
{"nl": "Shows default progress dialog without any message", "code": "public static void showProgressDialog(final Context context){\n  showProgressDialog(context,DEFAULT_TAG,null);\n}\n"}
{"nl": "are any labels defined?", "code": "public boolean hasLabels(){\n  return sample2label.size() > 0;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public StatsGetPostReachQuery(VkApiClient client,UserActor actor,int ownerId,int postId){\n  super(client,\"stats.getPostReach\",Utils.buildParametrizedType(List.class,WallpostStat.class));\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  postId(postId);\n}\n"}
{"nl": "Calculate current animation time", "code": "private void updateAnimationTime(){\n  long now=android.os.SystemClock.uptimeMillis();\n  if (mMovieStart == 0) {\n    mMovieStart=now;\n  }\n  int dur=mMovie.duration();\n  if (dur == 0) {\n    dur=DEFAULT_MOVIEW_DURATION;\n  }\n  mCurrentAnimationTime=(int)((now - mMovieStart) % dur);\n}\n"}
{"nl": "hide the headerview use the animator", "code": "private void hideView(String type){\nswitch (type) {\ncase HEADERVIEW:\n    if (mHeaderView.getLayoutParams().height < mHeaderViewHeight) {\n      startAnimator(mHeaderView,mHeaderView.getLayoutParams().height,0);\n    }\n else {\n      startAnimator(mHeaderView,mHeaderView.getLayoutParams().height,mHeaderViewHeight);\n    }\n  isLoadingMoreData=false;\nbreak;\ncase FOOTERVIEW:\nif (mFooterView.getLayoutParams().height < mFooterViewHeight) {\nstartAnimator(mFooterView,mFooterView.getLayoutParams().height,0);\n}\n else {\nstartAnimator(mFooterView,mFooterView.getLayoutParams().height,mFooterViewHeight);\n}\nisLoadingData=false;\nbreak;\n}\n}\n"}
{"nl": "Log print", "code": "private static void log(String log,Object... args){\n  if (verbose)   if (args.length > 0)   Log.d(TAG,log + \" \" + Arrays.asList(args));\n else   Log.d(TAG,log);\n}\n"}
{"nl": "Creates a new instance of DefaultMovieInfoProvider", "code": "public DefaultMovieInfoProvider(MediaLocator mediaLocator){\n  this.mediaLocator=mediaLocator;\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAircraftModel && ((AirMapAircraftModel)o).getModelId().equals(getModelId());\n}\n"}
{"nl": "Removes the first occurrence of an entry from the list", "code": "@ObjectiveCName(\"removeEntry:\") public List removeEntry(String entry){\n  Collection entries=this.getEntries();\n  while (entries.contains(entry))   entries.remove(entry);\n  this.updateList(entries);\n  return this;\n}\n"}
{"nl": "Return the exception message", "code": "@Override public String toString(){\n  return getMessage();\n}\n"}
{"nl": "Get a comm key for a given flight to enable traffic alerts", "code": "public static void startComm(AirMapFlight flight,@Nullable AirMapCallback<AirMapComm> callback){\n  FlightService.getCommKey(flight,callback);\n}\n"}
{"nl": "Create an iterator", "code": "Iterator(){\n  counter[last]=-1;\n}\n"}
{"nl": "Items sort", "code": "public MarketSearchQuery sort(MarketSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "v1 -> has start message event v2 -> has no start message event v3 -> has start message event", "code": "public void testDeployIntermediateVersionWithoutMessageStartEvent(){\n  String deploymentId1=deployStartMessageTestProcess();\n  assertEquals(1,getAllEventSubscriptions().size());\n  assertEquals(0,runtimeService.createProcessInstanceQuery().count());\n  runtimeService.startProcessInstanceByMessage(\"myStartMessage\");\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  assertEventSubscriptionsCount(1);\n  String deploymentId2=deployProcessWithoutEvents();\n  assertEquals(0,getAllEventSubscriptions().size());\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  try {\n    runtimeService.startProcessInstanceByMessage(\"myStartMessage\");\n    fail();\n  }\n catch (  Exception e) {\n  }\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  assertEventSubscriptionsCount(0);\n  String deploymentId3=deployStartMessageTestProcess();\n  assertEquals(1,getAllEventSubscriptions().size());\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  runtimeService.startProcessInstanceByMessage(\"myStartMessage\");\n  assertEquals(2,runtimeService.createProcessInstanceQuery().count());\n  assertEventSubscriptionsCount(1);\n  List<EventSubscriptionEntity> eventSubscriptions=getAllEventSubscriptions();\n  assertEquals(repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId3).singleResult().getId(),eventSubscriptions.get(0).getProcessDefinitionId());\n  cleanup(deploymentId1,deploymentId2,deploymentId3);\n}\n"}
{"nl": "Creates a MonitoringEquipment object containing the provided information", "code": "public AbstractEquipmentCacheObject(final Long pId,final String pName,final String pDescription,final String pHandlerClassName,final Long pStateTagId,final Long pAliveTagId,final int pAliveInterval,final Long pCommfaultTagId){\n  super(pId,pName,pStateTagId,pAliveTagId,pAliveInterval);\n  this.description=pDescription;\n  this.handlerClassName=pHandlerClassName;\n  this.commFaultTagId=pCommfaultTagId;\n}\n"}
{"nl": "Set fields", "code": "public WallGetQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Computes the sum of squared deviations of <values> from <target>", "code": "public static double sumSquareDev(double[] values,double target){\n  double sumsq=0d;\n  for (int i=0; i < values.length; i++) {\n    final double dev=values[i] - target;\n    sumsq+=(dev * dev);\n  }\n  return sumsq;\n}\n"}
{"nl": "Utility method computing the size of the widget if dimensions are set to wrap_content, using the default font", "code": "protected void wrapContent(){\n  mWidget.setMinWidth(100);\n  mWidget.setMinHeight(30);\n  int tw=mWidget.getMinWidth();\n  int th=mWidget.getMinHeight();\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setWidth(tw);\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setHeight(th);\n  }\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getWidth() <= mWidget.getMinWidth()) {\n      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getHeight() <= mWidget.getMinHeight()) {\n      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  mWidget.setBaselineDistance(0);\n}\n"}
{"nl": "loadmore not allow refresh and loadmore together", "code": "private void loadMore(){\n  isLoadingData=true;\n  isLoadingMoreData=true;\n  mOnLoadMoreListener.onLoadMore();\n}\n"}
{"nl": "Adds a method to the set of callback method", "code": "private void addCallbackMethod(String layoutClass,AndroidMethod callbackMethod){\n  Set<SootMethodAndClass> methods=this.callbackMethods.get(layoutClass);\n  if (methods == null) {\n    methods=new HashSet<SootMethodAndClass>();\n    this.callbackMethods.put(layoutClass,methods);\n  }\n  methods.add(new AndroidMethod(callbackMethod));\n}\n"}
{"nl": "Creates a SVN handle to the provided resource", "code": "protected LocalResource(IResource resource){\n  Assert.isNotNull(resource);\n  this.resource=resource;\n}\n"}
{"nl": "row contained?", "code": "public boolean containsRow(R rowKey){\n  return dataMap.containsKey(rowKey);\n}\n"}
{"nl": "Closes this apk file", "code": "public void close(){\n  if (this.zip != null) {\n    try {\n      this.zip.close();\n    }\n catch (    IOException e) {\n      System.err.println(\"Could not close apk file: \" + e.getMessage());\n      e.printStackTrace();\n    }\n    this.zip=null;\n  }\n}\n"}
{"nl": "Stop mentoring in group", "code": "public static void stopMentoring(Player player){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new PlayerGroupStopMentoringEvent(group,player));\n  }\n}\n"}
{"nl": "call write for each EP in value, update value with the result", "code": "private WriteEntriesResult writeEntryPackets(IEntryPacket[] entryPackets,WriteEntriesResult values,Context context,ServerTransaction transaction,long lease,long[] leases,int modifiers,SpaceContext sc,boolean reInsertedEntry,boolean fromWriteMultiple) throws RemoteException, TransactionException {\n  for (int i=0; i < entryPackets.length; ++i) {\n    if (values.isError(i))     continue;\n    try {\n      final long entryLease=leases != null ? leases[i] : lease;\n      WriteEntryResult writeResult=write(context,entryPackets[i],transaction,entryLease,modifiers,false,true,sc,false,true);\n      values.setResult(i,writeResult);\n    }\n catch (    UnusableEntryException e) {\n      values.setError(i,e);\n    }\ncatch (    UnknownTypeException e) {\n      values.setError(i,e);\n    }\ncatch (    EntryAlreadyInSpaceException e) {\n      values.setError(i,e);\n    }\ncatch (    ProtectiveModeException e) {\n      values.setError(i,e);\n    }\ncatch (    DuplicateIndexValueException e) {\n      values.setError(i,e);\n    }\n  }\n  return values;\n}\n"}
{"nl": "is this getLetterCodeIterator closable?", "code": "public boolean isClosable(){\n  return isClosable;\n}\n"}
{"nl": "compute edit distance from alignment", "code": "public static int computeEditDistance(String alignedQuery,String alignedReference){\n  int distance=0;\n  for (int i=0; i < alignedQuery.length(); i++) {\n    if (alignedQuery.charAt(i) == '-' || alignedReference.charAt(i) == '-' || alignedQuery.charAt(i) != alignedReference.charAt(i))     distance++;\n  }\n  return distance;\n}\n"}
{"nl": "Set request name", "code": "public AppsSendRequestQuery requestName(String value){\n  return unsafeParam(\"request_name\",value);\n}\n"}
{"nl": "Receive an event", "code": "protected Object receiveEvent(Object template) throws DataAccessException {\n  try {\n    return receiveOperationHandler.receive(template,getGigaSpace(),getReceiveTimeout());\n  }\n catch (  SpaceInterruptedException e) {\n    return null;\n  }\n}\n"}
{"nl": "Merges the source and sink definitions of the given definition object into this definition object", "code": "@SuppressWarnings(\"unchecked\") public void merge(SourceSinkDefinition other){\n  if (other.baseObjects != null && !other.baseObjects.isEmpty()) {\n    if (this.baseObjects == null)     this.baseObjects=new HashSet<>();\n    for (    AccessPathTuple apt : other.baseObjects)     this.baseObjects.add(apt);\n  }\n  if (other.parameters != null && other.parameters.length > 0) {\n    if (this.parameters == null)     this.parameters=new Set[this.method.getParameters().size()];\n    for (int i=0; i < other.parameters.length; i++) {\n      this.parameters[i].addAll(other.parameters[i]);\n    }\n  }\n  if (other.returnValues != null && !other.returnValues.isEmpty()) {\n    if (this.returnValues == null)     this.returnValues=new HashSet<>();\n    for (    AccessPathTuple apt : other.returnValues)     this.returnValues.add(apt);\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.Mapping.toString() + \";zoom axis=both what=fit;\");\n}\n"}
{"nl": "Convert date from given Strings to Date format", "code": "public static Date stringToDate(String date,String... datePatterns){\n  for (  String datePattern : datePatterns) {\n    DateFormat format=new SimpleDateFormat(datePattern,Locale.ENGLISH);\n    try {\n      return format.parse(date);\n    }\n catch (    ParseException e) {\n      if (datePatterns.length > 1)       Log.e(\"Trying to parse \",\"Failed, trying next pattern\");\n else       Log.e(\"Trying to parse \",\"Failed to parse\");\n    }\n  }\n  return null;\n}\n"}
{"nl": "Format alternative allele for text printing", "code": "public static String format(String refAllele,String altAllele,boolean noFormat){\n  String text=\"\";\n  if (refAllele.length() == 1 && altAllele.length() == 1) {\n    text=altAllele;\n  }\n else   if (refAllele.length() == 1 && altAllele.length() > 1) {\n    text=\"I\";\n  }\n else   if (refAllele.length() > 1 && altAllele.length() == 1) {\n    text=\"D\";\n  }\n  if (noFormat) {\n    return text;\n  }\n  String formattedText=\"\";\n  for (int i=0; i < text.length(); i++) {\n    char base=text.charAt(i);\n    if (base == 'A' || base == 'a') {\n      formattedText+=\"\\033[107;34m\" + base + \"\\033[0m\";\n    }\n else     if (base == 'C' || base == 'c') {\n      formattedText+=\"\\033[107;31m\" + base + \"\\033[0m\";\n    }\n else     if (base == 'G' || base == 'g') {\n      formattedText+=\"\\033[107;32m\" + base + \"\\033[0m\";\n    }\n else     if (base == 'T' || base == 't') {\n      formattedText+=\"\\033[107;33m\" + base + \"\\033[0m\";\n    }\n else {\n      formattedText+=base;\n    }\n  }\n  return formattedText;\n}\n"}
{"nl": "Returns true if Instant Run is supported for this gradle model (whether or not it's enabled)", "code": "public static boolean modelSupportsInstantRun(@NotNull AndroidGradleModel model){\n  GradleVersion modelVersion=model.getModelVersion();\n  return modelVersion == null || modelVersion.compareTo(InstantRunManager.MINIMUM_GRADLE_PLUGIN_VERSION) >= 0;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsInviteQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.invite\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n"}
{"nl": "Get an instance of an <code>unsigned byte</code>", "code": "public static UByte valueOf(short value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(value));\n}\n"}
{"nl": "Creates a field name mapper by reading config from the argument conf stream", "code": "public FieldMapper(InputStream jConfStream) throws IOException, ParseException {\n  try (InputStreamReader reader=new InputStreamReader(jConfStream)){\n    Yaml yaml=new Yaml();\n    Map jConf=(Map)yaml.load(reader);\n    if (jConf.containsKey(KEY_OVERRIDES)) {\n      ((Map)jConf.get(KEY_OVERRIDES)).forEach(null);\n    }\n    if (jConf.containsKey(KEY_MULTI_VAL_SUFFIX)) {\n      this.multiValSuffix=jConf.getOrDefault(KEY_MULTI_VAL_SUFFIX,DEFAULT_MULTI_VAL_SUFFIX).toString();\n    }\n    if (jConf.containsKey(KEY_TYPE_SUFFIX)) {\n      ((Map)jConf.get(KEY_TYPE_SUFFIX)).forEach(null);\n    }\n  }\n }\n"}
{"nl": "Converts this object to a string", "code": "public String toString(){\n  return \"CMUDiphoneVoice\";\n}\n"}
{"nl": "Create an <code>unsigned long</code>", "code": "private ULong(BigInteger value) throws NumberFormatException {\n  if (value.compareTo(MIN_VALUE) < 0 || value.compareTo(MAX_VALUE) > 0) {\n    throw new NumberFormatException();\n  }\n else {\n    this.value=value.longValue();\n  }\n}\n"}
{"nl": "Check if given account is already on This GameServer", "code": "public final boolean isAccountOnGameServer(int accountId){\n  return accountsOnGameServer.containsKey(accountId);\n}\n"}
{"nl": "Funcoes do Mapa Map Functions", "code": "@Override public void onPause(){\n  super.onPause();\n  mapView.onPause();\n  stopLocationUpdates();\n}\n"}
{"nl": "output the \"code image\" to the file", "code": "public static boolean create(String sid,long expired,int w,int h,File outputFile,int len) throws IOException {\n  if (outputFile == null) {\n    return false;\n  }\n  File dir=outputFile.getParentFile();\n  if (!dir.exists()) {\n    dir.mkdirs();\n  }\n  try {\n    String code=UID.random(len,VERIFY_CODES).toLowerCase();\n    outputFile.createNewFile();\n    FileOutputStream fos=new FileOutputStream(outputFile);\n    outputImage(w,h,fos,code.toUpperCase());\n    fos.close();\n    Cache.set(\"//captcha/\" + sid,Code.create(code,expired));\n    return true;\n  }\n catch (  IOException e) {\n    throw e;\n  }\n}\n"}
{"nl": "check the game win detection or defeat check", "code": "private void checkTheTicTacTocGameWin(int x,int y,int tag){\n  int _x=0;\n  int _y=0;\n  for (int i=x, j=y; ; i--, j--) {\n    _x=i;\n    _y=j;\n    if (i <= 0)     break;\n    if (j <= 0)     break;\n  }\n  for (int i=_y, j=_x; ; i++, j++) {\n    subCheckTheTicTacTocWin(tag,i,j);\n    if (i >= 8)     break;\n    if (j >= 11)     break;\n  }\n  _counter=0;\n  _x=x;\n  _y=0;\n  for (int i=_y, j=_x; i < 9; i++)   subCheckTheTicTacTocWin(tag,i,j);\n  _counter=0;\n  _x=0;\n  _y=y;\n  for (int i=_y, j=_x; j < 12; j++)   subCheckTheTicTacTocWin(tag,i,j);\n  _counter=0;\n  for (int i=x, j=y; ; i--, j++) {\n    _x=i;\n    _y=j;\n    if (i <= 0)     break;\n    if (j >= 8)     break;\n  }\n  for (int i=_y, j=_x; ; i--, j++) {\n    subCheckTheTicTacTocWin(tag,i,j);\n    if (i <= 0)     break;\n    if (j >= 11)     break;\n  }\n}\n"}
{"nl": "author  hhj TODO", "code": "public static void debugLongInfo(String str){\n  debugLongInfo(DEFAULT_TAG,str);\n}\n"}
{"nl": "Quest failed: %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_GIVEUP_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300614,value0);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketAddQuery(VkApiClient client,UserActor actor,int ownerId,String name,String description,int categoryId,float price,int mainPhotoId){\n  super(client,\"market.add\",AddResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  name(name);\n  description(description);\n  categoryId(categoryId);\n  price(price);\n  mainPhotoId(mainPhotoId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetCommentsQuery(VkApiClient client,int postId){\n  super(client,\"wall.getComments\",GetCommentsResponse.class);\n  postId(postId);\n}\n"}
{"nl": "Move reference of the current table up by one", "code": "public void nextTable() throws SQLException {\n  if (tables.hasNext()) {\n    currentTable=tables.next();\n    openRows();\n  }\n}\n"}
{"nl": "collect all read data associated with the given iterator", "code": "public static List<ReadData> apply(final IReadBlockIterator iterator,final ProgressListener progress) throws IOException, CanceledException {\n  progress.setSubtask(\"Collecting reads:\");\n  final List<ReadData> list=new LinkedList<>();\n  int countReads=0;\n{\n    progress.setMaximum(iterator.getMaximumProgress());\n    progress.setProgress(0);\n    while (iterator.hasNext()) {\n      final IReadBlock readBlock=iterator.next();\n      list.add(createReadData(countReads++,readBlock));\n      progress.setProgress(iterator.getProgress());\n    }\n  }\n  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();\n  return list;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.EUCLIDEAN_NORMALIZED + \";\");\n}\n"}
{"nl": "Throw Stmt Creation", "code": "private void createThrow(polyglot.ast.Throw throwStmt){\n  soot.Value toThrow=base().createAggressiveExpr(throwStmt.expr(),false,false);\n  soot.jimple.ThrowStmt throwSt=soot.jimple.Jimple.v().newThrowStmt(toThrow);\n  body.getUnits().add(throwSt);\n  Util.addLnPosTags(throwSt,throwStmt.position());\n  Util.addLnPosTags(throwSt.getOpBox(),throwStmt.expr().position());\n}\n"}
{"nl": "Checks whether the given local is guaranteed to be always null at the given statement", "code": "private boolean isAlwaysNullBefore(Stmt s,Local base,LocalDefs defs){\n  List<Unit> baseDefs=defs.getDefsOfAt(base,s);\n  if (baseDefs.isEmpty())   return true;\n  for (  Unit u : baseDefs) {\n    if (!(u instanceof DefinitionStmt))     return false;\n    DefinitionStmt defStmt=(DefinitionStmt)u;\n    if (defStmt.getRightOp() != NullConstant.v())     return false;\n  }\n  return true;\n}\n"}
{"nl": "This method is called in case of cache-miss It can return NULL if it's not possible to resolve the missing instance", "code": "private Entry<V> cacheMiss(K key){\n  return resolver.createEntry(key);\n}\n"}
{"nl": "Edits a community", "code": "public GroupsEditQuery edit(UserActor actor,int groupId){\n  return new GroupsEditQuery(getClient(),actor,groupId);\n}\n"}
{"nl": "mark the footer height", "code": "public void markFooterViewHeight(View view){\n  this.mFooterView=view;\n  mFooterViewHeight=mFooterView.getHeight();\n  if (mFooterViewHeight <= 0) {\n    mFooterViewHeight=mFooterView.getLayoutParams().height;\n  }\n else {\n    this.mFooterView.getLayoutParams().height=mFooterViewHeight;\n  }\n}\n"}
{"nl": "Helper method to delete Business Partner", "code": "public Boolean deleteCustomer(EntityManager em,String id){\n  Boolean status=true;\n  Customer bupa=null;\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    bupa=em.find(Customer.class,id);\n    em.remove(bupa);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during delete of Business Partner. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "Set hash", "code": "public PhotosSaveWallPhotoQuery hash(String value){\n  return unsafeParam(\"hash\",value);\n}\n"}
{"nl": "Transforms (0,1,2,2,3) to (0,1,2,3)", "code": "public static int[] deleteDuplicatedPages(int[] pages){\n  List<Integer> result=new ArrayList<>();\n  int lastInt=-1;\n  for (  Integer currentInt : pages) {\n    if (lastInt != currentInt) {\n      result.add(currentInt);\n    }\n    lastInt=currentInt;\n  }\n  int[] arrayResult=new int[result.size()];\n  for (int i=0; i < result.size(); i++) {\n    arrayResult[i]=result.get(i);\n  }\n  return arrayResult;\n}\n"}
{"nl": "method for calculating bite point for random & one direction options", "code": "private void calcBitePoint(int centerX,int centerY,float circleEdgeX,float circleEdgeY,double biteLine,boolean isFirstBite,boolean isRandomBite){\n  double bitePercent;\n  if (isFirstBite) {\n    biteX=(int)circleEdgeX;\n    biteY=(int)circleEdgeY;\n  }\n else {\n    bitePercent=biteRadius / biteLine;\n    if (isRandomBite) {\n      bitePercent*=bitesTakenMap.get(biteDirection);\n    }\n else {\n      bitePercent*=(numBitesForOneDirection - numBitesForOneDirectionLeft);\n    }\n    biteX=DrawUtils.getPointBetweenTwoPoints(circleEdgeX,centerX,bitePercent);\n    biteY=DrawUtils.getPointBetweenTwoPoints(circleEdgeY,centerY,bitePercent);\n  }\n}\n"}
{"nl": "Specify the color resource for the target circle", "code": "public TapTarget targetCircleColor(@ColorRes int color){\n  this.targetCircleColor=color;\n  return this;\n}\n"}
{"nl": "Closes the channel", "code": "public void close(){\n  channel.close();\n}\n"}
{"nl": "parse the transcript", "code": "private void parseTranscript(PackedTranscript transcript){\n  translatedQueryLen=0;\n  subjectLen=0;\n  len=0;\n  identities=0;\n  mismatches=0;\n  gapOpenings=0;\n  int d=0;\n  for (  CombinedOperation op : transcript.gather()) {\n    int count=op.getCount();\n    len+=count;\nswitch (op.getEditOperation()) {\ncase op_match:\n      identities+=count;\n    translatedQueryLen+=count;\n  subjectLen+=count;\nd=0;\nbreak;\ncase op_substitution:\nmismatches+=count;\ntranslatedQueryLen+=count;\nsubjectLen+=count;\nd=0;\nbreak;\ncase op_insertion:\ntranslatedQueryLen+=count;\n++gapOpenings;\nd=0;\nbreak;\ncase op_deletion:\nsubjectLen+=count;\nif (d == 0) ++gapOpenings;\nd+=count;\n}\n}\n}\n"}
{"nl": "Creates the default inverse cumulative probability test input values", "code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0,0.001,0.010,0.025,0.050,0.100,0.200,0.5,0.999,0.990,0.975,0.950,0.900,1};\n}\n"}
{"nl": "Removes all traffic from the list and notifies the listener", "code": "private void removeAllTraffic(){\n  List<AirMapTraffic> removed=new ArrayList<>(allTraffic);\n  allTraffic.clear();\n  notifyRemoved(removed);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetByIdQuery(VkApiClient client,UserActor actor,String... photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photos(photos);\n}\n"}
{"nl": "On back key pressed, should be call in its parent Activity's onBackPressed", "code": "public boolean onBackPressed(){\n  if (drawer.isDrawerOpen(GravityCompat.START)) {\n    drawer.closeDrawer(GravityCompat.START);\n    return true;\n  }\n else {\n    drawer.removeDrawerListener(toggle);\n    return false;\n  }\n}\n"}
{"nl": "Adds a Listener that will notify you if a Discard, Delete or Error event occurs", "code": "@ObjectiveCName(\"addRecordEventsListener:\") public List addRecordEventsListener(RecordEventsListener recordEventsListener){\n  this.record.addRecordEventsListener(recordEventsListener);\n  return this;\n}\n"}
{"nl": "Test importing a project has source dependency but when that dependency directory is missing", "code": "public void testMissingRequiredProjects() throws IOException {\n  VirtualFile project2=createGradleProjectToImport(dir,module(2),module(1));\n  assert project2 != null : \"Something wrong with the setup\";\n  configureTopLevelProject(dir,Arrays.asList(module(1),module(2)),Collections.<String>emptySet());\n  Map<String,VirtualFile> projects=moduleListToMap(GradleModuleImporter.getRelatedProjects(project2,getProject()));\n  assertEquals(2,projects.size());\n  assertModuleRequiredButNotFound(module(1),projects);\n  assertEquals(project2,projects.get(pathToGradleName(module(2))));\n}\n"}
{"nl": "goto the next object", "code": "public boolean gotoNext(){\n  if (isCurrentSet()) {\n    current.set1(current.get1() + 1);\n    if (current.get1() >= table.getGrid().getRowCount()) {\n      current.set1(0);\n      current.set2(current.get2() + 1);\n    }\n  }\n else   gotoFirst();\n  return isCurrentSet();\n}\n"}
{"nl": "Return false if doc-block is not defined", "code": "static public ResolveType resolveThrownExceptions(@NotNull final Method method,@NotNull HashSet<PhpClass> declaredExceptions){\n  PhpPsiElement previous=method.getPrevPsiSibling();\n  if (!(previous instanceof PhpDocCommentImpl)) {\n    return ResolveType.NOT_RESOLVED;\n  }\n  Collection<PhpDocReturnTag> returns=PsiTreeUtil.findChildrenOfType(previous,PhpDocReturnTag.class);\n  if (returns.size() > 0) {\n    for (    PhpDocReturnTag returnOrThrow : returns) {\n      if (returnOrThrow.getName().equals(\"@throws\")) {\n        Collection<PhpDocTypeImpl> exceptions=PsiTreeUtil.findChildrenOfType(returnOrThrow,PhpDocTypeImpl.class);\n        if (exceptions.size() > 0) {\n          for (          PhpDocTypeImpl type : exceptions) {\n            PsiElement typeResolved=type.resolve();\n            if (typeResolved instanceof PhpClass) {\n              declaredExceptions.add((PhpClass)typeResolved);\n            }\n          }\n          exceptions.clear();\n        }\n      }\n    }\n    returns.clear();\n  }\n  Collection<PhpDocTagImpl> tags=PsiTreeUtil.findChildrenOfType(previous,PhpDocTagImpl.class);\n  if (tags.size() > 0) {\n    for (    PhpDocTagImpl tag : tags) {\n      if (tag.getName().toLowerCase().equals(\"@inheritdoc\")) {\n        resolveInheritDoc(method,declaredExceptions);\n        return ResolveType.RESOLVED_INHERIT_DOC;\n      }\n    }\n    tags.clear();\n  }\n  return ResolveType.RESOLVED;\n}\n"}
{"nl": "Creates an observable only for the child changed method", "code": "public Observable<FirebaseChildEvent> observeChildAdded(final Query firebaseRef){\n  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.ADDED));\n}\n"}
{"nl": "Enviar foto pela galeria", "code": "private void photoGalleryIntent(){\n  Intent intent=new Intent();\n  intent.setType(\"image/*\");\n  intent.setAction(Intent.ACTION_GET_CONTENT);\n  startActivityForResult(Intent.createChooser(intent,getString(R.string.select_picture_title)),IMAGE_GALLERY_REQUEST);\n}\n"}
{"nl": "DeepstreamFactory is a map of all url connections created", "code": "private DeepstreamFactory(){\n  this.clients=new HashMap();\n}\n"}
{"nl": "Tell whether the passed role is set?", "code": "public static boolean hasRole(String roleName){\n  for (  String role : getRoles()) {\n    if (role.equalsIgnoreCase(roleName)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Starts a local Zk instance with a generated empty data directory", "code": "public static void startLocalZkServer(final int port){\n  startLocalZkServer(port,org.apache.commons.io.FileUtils.getTempDirectoryPath() + File.separator + \"test-\"+ System.currentTimeMillis());\n}\n"}
{"nl": "A change occurred inside the model object", "code": "@Override public void modelChanged(@NotNull NlModel model){\n  if (myDesignSurface != null) {\n    updateDeviceConfiguration(myDesignSurface.getConfiguration());\n    updateComponents(model.getComponents());\n    updateScreenNumber(myDesignSurface);\n    myMiniMap.repaint();\n  }\n}\n"}
{"nl": "Fires up an intent with the request to send an sms to the msisdn that of this Phone", "code": "@SuppressLint(\"NewApi\") public void sendText(Context context) throws ActivityNotFoundException {\n  if (Utils.hasKitKat()) {\n    String defaultSmsPackageName=Telephony.Sms.getDefaultSmsPackage(context);\n    Intent sendIntent=new Intent(Intent.ACTION_SENDTO,Uri.parse(\"smsto:\" + Uri.encode(getNumber())));\n    if (defaultSmsPackageName != null) {\n      sendIntent.setPackage(defaultSmsPackageName);\n    }\n    context.startActivity(sendIntent);\n  }\n else {\n    Intent textIntent=new Intent();\n    textIntent.setAction(Intent.ACTION_VIEW);\n    textIntent.setData(Uri.fromParts(\"sms\",getNumber(),null));\n    context.startActivity(textIntent);\n  }\n}\n"}
{"nl": "Persists the passing theme and restarts the activity transitioning to the new theme", "code": "protected final void applyTheme(AppTheme theme){\n  preferences.persistSelectedTheme(theme);\n  restartActivity();\n  int enterAnimation=android.R.anim.fade_in;\n  int exitAnimation=android.R.anim.fade_out;\n  overridePendingTransition(enterAnimation,exitAnimation);\n}\n"}
{"nl": "Adds a Job, and starts a Scheduler when none was yet started", "code": "protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){\n  String jobName=clazz.getName();\n  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();\n  JobDetail job=new JobDetail(jobName,jobGroup,clazz);\n  job.setDurability(false);\n  job.setVolatility(true);\n  job.setDescription(jobName);\n  try {\n    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);\n    if (scheduler == null) {\n      if (schedulerProperties == null) {\n        schedulerProperties=getDefaultSchedulerProperties();\n      }\n      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();\n      scheduler.start();\n    }\n    Date date=scheduler.scheduleJob(job,trigger);\n    Logger.info(this,\"Scheduled job \" + jobName + \", next trigger is on \"+ date);\n  }\n catch (  ParseException e) {\n    Logger.error(this,\"Cron expression '\" + cronExpression + \"' has an exception. Throwing IllegalArgumentException\",e);\n    throw new IllegalArgumentException(e);\n  }\ncatch (  SchedulerException e) {\n    Logger.error(this,\"Unable to schedule job \" + jobName,e);\n  }\n}\n"}
{"nl": "refresh not allow refresh and loadmore together", "code": "private void refresh(){\n  isLoadingData=true;\n  isLoadingMoreData=true;\n  mOnRefreshListener.onRefresh();\n}\n"}
{"nl": "Check if a string is empty", "code": "public static boolean isEmpty(CharSequence str){\n  return TextUtils.isEmpty(str);\n}\n"}
{"nl": "Instantiate the list of abstract annotation managers", "code": "private void instantiate(){\n  managers=new AbstractAnnotationManager[]{new AnnotationContextManager(androidUnitTest),new AnnotationActivityManager(androidUnitTest),new AnnotationFragmentManager(androidUnitTest),new AnnotationViewManager(androidUnitTest)};\n  activityManager=(AnnotationActivityManager)managers[1];\n  fragmentManager=(AnnotationFragmentManager)managers[2];\n}\n"}
{"nl": "Places the file descriptor in the line indicated as parameter", "code": "public final void goToLastProcessedLine(final int lastCommited) throws DataFallbackException {\n  fFileController.closeFallbackInputStream();\n  int readLines=fFileController.getReadBackLines();\n  fFileController.goToLine(readLines + lastCommited);\n}\n"}
{"nl": "Resets the audio clock", "code": "public void resetTime(){\n}\n"}
{"nl": "Use Animator to do a \"setTimeout\"", "code": "public static ValueAnimator animateDummy(int duration){\n  ValueAnimator a=ValueAnimator.ofFloat(0,1);\n  a.setDuration(duration);\n  a.start();\n  return a;\n}\n"}
{"nl": "recreate a byte array from hexadecimal", "code": "public static byte[] fromHex(String hex){\n  try {\n    return Hex.decodeHex(hex.toCharArray());\n  }\n catch (  DecoderException e) {\n    return null;\n  }\n}\n"}
{"nl": "clustering with default linkage type It uses 'Average' linkage clustering approach as default", "code": "private void clustering(int tagetClusterSize){\n  clustering(tagetClusterSize,\"Average\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WidgetsGetCommentsQuery(VkApiClient client){\n  super(client,\"widgets.getComments\",GetCommentsResponse.class);\n}\n"}
{"nl": "This will convert the given binary string to a decimal based integer", "code": "public static int toDecimal(String binary){\n  long num=Long.parseLong(binary);\n  long rem;\n  while (num > 0) {\n    rem=num % 10;\n    num=num / 10;\n    if (rem != 0 && rem != 1) {\n      System.out.println(\"This is not a binary number.\");\n      System.out.println(\"Please try once again.\");\n      return -1;\n    }\n  }\n  return Integer.parseInt(binary,2);\n}\n"}
{"nl": "How much of the variance is explained by the regression", "code": "public static double ssReg(double[] residuals,double[] targetAttribute){\n  double mean=sum(targetAttribute) / targetAttribute.length;\n  double ret=0;\n  for (int i=0; i < residuals.length; i++) {\n    ret+=Math.pow(residuals[i] - mean,2);\n  }\n  return ret;\n}\n"}
{"nl": "Check to see whether a broker is in the shared broker pool or not", "code": "public boolean isSharedBroker(String host){\n  for (  NamespaceIsolationData policyData : this.policies.values()) {\n    NamespaceIsolationPolicyImpl policy=new NamespaceIsolationPolicyImpl(policyData);\n    if (policy.isPrimaryBroker(host)) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatUsersQueryWithChatIdsFields(VkApiClient client,UserActor actor,List<Integer> chatIds,List<UserField> fields){\n  super(client,\"messages.getChatUsers\",GetChatUsersChatIdsFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n  fields(fields);\n}\n"}
{"nl": "Required for Externalizable", "code": "public CountClearEntriesSpaceOperationRequest(){\n}\n"}
{"nl": "Constructs a new block request response packet", "code": "public SM_BLOCK_RESPONSE(int code,String playerName){\n  this.code=code;\n  this.playerName=playerName;\n}\n"}
{"nl": "ITEM QUERIES", "code": "public ItemCursor queryItems(){\n  return mHelper.queryItems();\n}\n"}
{"nl": "Removes all the concepts from the transaction tracker", "code": "public void clearTransaction(){\n  modifiedConcepts.clear();\n  modifiedCastings.clear();\n  modifiedResources.clear();\n}\n"}
{"nl": "removes a iplist from the SG", "code": "public void removeACL(Collection<String> listIPs,int from,int to){\n  AmazonEC2 client=null;\n  try {\n    client=getEc2Client();\n    List<IpPermission> ipPermissions=new ArrayList<IpPermission>();\n    ipPermissions.add(new IpPermission().withFromPort(from).withIpProtocol(\"tcp\").withIpRanges(listIPs).withToPort(to));\n    if (this.insEnvIdentity.isClassic()) {\n      client.revokeSecurityGroupIngress(new RevokeSecurityGroupIngressRequest(config.getACLGroupName(),ipPermissions));\n      logger.info(\"Done removing from ACL within classic env for running instance: \" + StringUtils.join(listIPs,\",\"));\n    }\n else {\n      RevokeSecurityGroupIngressRequest req=new RevokeSecurityGroupIngressRequest();\n      req.withGroupId(getVpcGroupId());\n      client.revokeSecurityGroupIngress(req.withIpPermissions(ipPermissions));\n      logger.info(\"Done removing from ACL within vpc env for running instance: \" + StringUtils.join(listIPs,\",\"));\n    }\n  }\n  finally {\n    if (client != null)     client.shutdown();\n  }\n}\n"}
{"nl": "Schedule new following checker task", "code": "public static final Future<?> newFollowingToTargetCheckTask(final QuestEnv env,Npc npc,Npc target){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowingNpcCheckTask(env,new TargetDestinationChecker(npc,target)),1000,1000);\n}\n"}
{"nl": "Sort items map by distance", "code": "public Map<Double,K> sortItems(List<K> items,PokemonGo api){\n  Map<Double,K> result=new TreeMap<>();\n  for (  K point : items) {\n    result.put(distFrom(api.getLatitude(),api.getLongitude(),point.getLatitude(),point.getLongitude()),point);\n  }\n  return result;\n}\n"}
{"nl": "Set fields", "code": "public MessagesGetLongPollHistoryQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set colorTable=\");\n  String name=np.getWordMatchesRespectingCase(ColorTableManager.getNames());\n  boolean isHeatMap;\n  if (np.peekMatchIgnoreCase(\"heatMap\")) {\n    np.matchIgnoreCase(\"heatMap=\");\n    isHeatMap=np.getBoolean();\n  }\n else   isHeatMap=false;\n  np.matchIgnoreCase(\";\");\n  if (isHeatMap) {\n    getDir().getDocument().getChartColorManager().setHeatMapTable(name);\n    ColorTableManager.setDefaultColorTableHeatMap(name);\n  }\n else {\n    getDir().getDocument().getChartColorManager().setColorTable(name);\n    ColorTableManager.setDefaultColorTable(name);\n  }\n  getDir().getDocument().setDirty(true);\n}\n"}
{"nl": "\"true\" - to return outgoing messages \"false\" - to return incoming messages (default)", "code": "public MessagesGetQuery out(Boolean value){\n  return unsafeParam(\"out\",value);\n}\n"}
{"nl": "Run a demonstration of the FisheyeMenu", "code": "public static final void main(String[] argv){\n  Logger.getLogger(\"prefuse\").setLevel(Level.WARNING);\n  FisheyeMenu fm=demo();\n  JFrame f=new JFrame(\"p r e f u s e  |  f i s h e y e\");\n  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  f.getContentPane().add(fm);\n  f.pack();\n  f.setVisible(true);\n}\n"}
{"nl": "Finds the last assignment to the given String local by searching upwards from the given statement", "code": "private String findLastStringAssignment(Stmt stmt,Local local,BiDiInterproceduralCFG<Unit,SootMethod> cfg){\n  if (stmt instanceof AssignStmt) {\n    AssignStmt assign=(AssignStmt)stmt;\n    if (assign.getLeftOp() == local) {\n      if (assign.getRightOp() instanceof StringConstant)       return ((StringConstant)assign.getRightOp()).value;\n    }\n  }\n  for (  Unit pred : cfg.getPredsOf(stmt)) {\n    if (!(pred instanceof Stmt))     continue;\n    String lastAssignment=findLastStringAssignment((Stmt)pred,local,cfg);\n    if (lastAssignment != null)     return lastAssignment;\n  }\n  return null;\n}\n"}
{"nl": "Packs a bit array into bytes, most significant bit first", "code": "static byte[] convertBoolArrayToByteArray(boolean[] boolArr){\n  byte[] byteArr=new byte[(boolArr.length + 7) / 8];\n  for (int i=0; i < byteArr.length; i++) {\n    byteArr[i]=readByte(boolArr,8 * i);\n  }\n  return byteArr;\n}\n"}
{"nl": "Cover photo id", "code": "protected MarketEditQuery mainPhotoId(int value){\n  return unsafeParam(\"main_photo_id\",value);\n}\n"}
{"nl": "Opens the given apk file and provides the given handler with a stream for accessing the contained resource manifest files", "code": "protected void handleAndroidResourceFiles(String apk,Set<String> fileNameFilter,IResourceHandler handler){\n  File apkF=new File(apk);\n  if (!apkF.exists())   throw new RuntimeException(\"file '\" + apk + \"' does not exist!\");\n  try {\n    ZipFile archive=null;\n    try {\n      archive=new ZipFile(apkF);\n      Enumeration<?> entries=archive.entries();\n      while (entries.hasMoreElements()) {\n        ZipEntry entry=(ZipEntry)entries.nextElement();\n        String entryName=entry.getName();\n        handler.handleResourceFile(entryName,fileNameFilter,archive.getInputStream(entry));\n      }\n    }\n  finally {\n      if (archive != null)       archive.close();\n    }\n  }\n catch (  Exception e) {\n    System.err.println(\"Error when looking for XML resource files in apk \" + apk + \": \"+ e);\n    e.printStackTrace();\n    if (e instanceof RuntimeException)     throw (RuntimeException)e;\n else     throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "Compares this time and the time given", "code": "public boolean isLessThan(GameTime gt){\n  return this.getTime() < gt.getTime();\n}\n"}
{"nl": "Sequential Floating Forward Search(SFFS) for selection of features", "code": "public SFFS(int solSize,boolean b0,boolean logSol){\n  interceptTerm=b0;\n  logSolution=logSol;\n  solutionSize=solSize;\n}\n"}
{"nl": "Allows to activate the fetched values", "code": "public void activateFetched(){\n  this.firebaseRemoteConfig.activateFetched();\n}\n"}
{"nl": "pojo -> xml", "code": "public static <T>String toXml(Class<T> clazz,T object){\n  return CLASS_2_XSTREAM_INSTANCE.get(clazz).toXML(object);\n}\n"}
{"nl": "select the given service tab, if present", "code": "public boolean selectServiceTab(String url){\n  url=url.replaceAll(\".*://\",\"\");\n  for (int i=0; i < tabbedPane.getTabCount(); i++) {\n    if (tabbedPane.getTitleAt(i).equalsIgnoreCase(url)) {\n      tabbedPane.setSelectedIndex(i);\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Required for Externalizable", "code": "public RegisterEntryTypeDescriptorSpaceOperationRequest(){\n}\n"}
{"nl": "Creates a new instance of DocumentWordDistroGraph", "code": "public DocumentWordDistroGraph(){\n  MinSize=1;\n  MaxSize=2;\n  CorrelationWindow=3;\n}\n"}
{"nl": "Returns the preferred theme", "code": "@NotNull public String computePreferredTheme(@NotNull Configuration configuration){\n  MergedManifest manifest=MergedManifest.get(myModule);\n  String activity=configuration.getActivity();\n  if (activity != null) {\n    String activityFqcn=activity;\n    if (activity.startsWith(\".\")) {\n      String pkg=StringUtil.notNullize(manifest.getPackage());\n      activityFqcn=pkg + activity;\n    }\n    ActivityAttributes attributes=manifest.getActivityAttributes(activityFqcn);\n    if (attributes != null) {\n      String theme=attributes.getTheme();\n      if (theme != null && theme.startsWith(SdkConstants.PREFIX_RESOURCE_REF)) {\n        return theme;\n      }\n    }\n    attributes=manifest.getActivityAttributes(activity);\n    if (attributes != null) {\n      String theme=attributes.getTheme();\n      if (theme != null && theme.startsWith(SdkConstants.PREFIX_RESOURCE_REF)) {\n        return theme;\n      }\n    }\n  }\n  return manifest.getDefaultTheme(configuration.getTarget(),configuration.getScreenSize(),configuration.getDevice());\n}\n"}
{"nl": "This node has lost contact (possibly temporarily) with the cluster and cannot execute clustered operations", "code": "@Override public void clusterOffline(ClusterNode clusterNode){\n  LOGGER.warn(\"Detected Terracotta cluster offline event for node: \" + clusterNode.getId());\n  String hostname;\n  try {\n    hostname=InetAddress.getLocalHost().getHostName();\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Unable to get local hostname\",e);\n    hostname=\"#unknown host#\";\n  }\n  SMS_LOGGER.warn(\"Initiating C2MON server shutdown of \" + System.getProperty(\"c2mon.server.name\") + \" on \"+ hostname);\n}\n"}
{"nl": "signals all listener that a remote resource has been moved", "code": "public void remoteResourceMoved(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String destinationResourceName){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.remoteResourceMoved(resource,destinationFolder,destinationResourceName);\n  }\n}\n"}
{"nl": "computes the similarity of two sequences", "code": "private static float computeSimilarity(Lane a,Lane b){\n  int same=0;\n  int diff=0;\n  int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition());\n  int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition());\n  for (int i=firstCoordinate; i <= lastCoordinate; i++) {\n    char cha=a.charAt(i);\n    char chb=b.charAt(i);\n    if (Character.isLetter(cha) && Character.isLetter(chb)) {\n      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++;\n else       diff++;\n    }\n  }\n  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);\n}\n"}
{"nl": "Create the streaming result", "code": "@Override public JavaDStream<DataSet> createStream(){\n  JavaPairInputDStream<String,String> messages=KafkaUtils.createStream(jssc,zkHost,\"canova\",Collections.singletonMap(kafkaTopic,kafkaPartitions));\n  JavaDStream<DataSet> dataset=messages.flatMap(new DataSetFlatmap(numLabels,recordToDataSetFunction)).cache();\n  return dataset;\n}\n"}
{"nl": "Resets the callback state for another render", "code": "void reset(){\n  myParserCount=0;\n  myParserFiles=null;\n  myLayoutName=null;\n  myLayoutEmbeddedParser=null;\n}\n"}
{"nl": "Utility to draw a shadowed arrow", "code": "private static void drawShadowedArrow(Graphics2D g,ColorSet colorSet,Polygon arrow,int x,int y){\n  Color pre=g.getColor();\n  Stroke s=g.getStroke();\n  if (colorSet.getStyle() == WidgetDecorator.BLUEPRINT_STYLE) {\n    g.setPaint(colorSet.getBackgroundPaint());\n    g.setStroke(sLineShadowStroke);\n  }\n else {\n    g.setColor(sShadowColor);\n    g.setStroke(sShadowStroke);\n  }\n  ConnectionDraw.drawArrow(g,arrow,x,y);\n  g.setColor(pre);\n  g.setStroke(s);\n  ConnectionDraw.drawArrow(g,arrow,x,y);\n}\n"}
{"nl": "Determine if the argument was provided for the selected option, which determines if a test should or should not be run", "code": "public boolean run(String allowed,String option){\n  if (!hasOption(option)) {\n    return true;\n  }\n  String selection=getOptionValue(option);\n  String[] selectionList=selection.split(\",\");\n  for (  String selectionItem : selectionList) {\n    if (selectionItem.equals(allowed)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Writes amplification data", "code": "private void writeAmplification(ByteBuffer buf){\n  Item item=ownerItem;\n  writeC(buf,item.isAmplified() ? 1 : 0);\n  writeH(buf,item.getBuffSkill());\n  writeC(buf,0);\n}\n"}
{"nl": "initialize given replication filter", "code": "private void initFilter(ReplicationFilterWrapper filterHolder,String url) throws SpaceComponentsInitializeException {\n  try {\n    filterHolder.init(_space,url,_replicationPolicy);\n  }\n catch (  RuntimeException re) {\n    if (_shutdownSpaceOnInitFailure) {\n      throw new SpaceComponentsInitializeException(\"Failed to initialize replication filter - \" + filterHolder.getClassName(),re);\n    }\n  }\n}\n"}
{"nl": "verify a signature created with the private counterpart of this key", "code": "public boolean verify(byte[] hash,byte[] signature){\n  return crypto.verify(hash,signature,pub);\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getDataType().equalsIgnoreCase(\"SEED\");\n}\n"}
{"nl": "Creates a scalar predicate using the specified expected value", "code": "public EqualsSpacePredicate(Object expectedValue,FunctionCallDescription functionCallDescription){\n  super(expectedValue,functionCallDescription);\n}\n"}
{"nl": "append file to storage server (by file buff)", "code": "public int append_file(String group_name,String appender_filename,byte[] file_buff) throws IOException, MyException {\n  return this.do_append_file(group_name,appender_filename,file_buff.length,new UploadBuff(file_buff,0,file_buff.length));\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void i(String msg){\n  if (isDebug) {\n    Log.i(TAG,msg);\n  }\n}\n"}
{"nl": "Create a query parser with the specified graph", "code": "private QueryParser(QueryBuilder queryBuilder){\n  this.queryBuilder=queryBuilder;\n  registerDefaultAggregates();\n}\n"}
{"nl": "Sort order", "code": "public AudioSearchQuery sort(AudioSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "serialize data selection", "code": "public static List<String> serializeDataSelection(boolean wantReadText,boolean wantMatches){\n  DataSelection dataSelection=new DataSelection();\n  dataSelection.setWantReadText(wantReadText);\n  dataSelection.setWantMatches(wantMatches);\n  return serializeDataSelection(dataSelection);\n}\n"}
{"nl": "Receive and remember part of a query", "code": "void receiveQuery(Json json){\n  queryExecutor.submit(null);\n}\n"}
{"nl": "begin back position", "code": "private void begin_Back_Pos(){\n  position.y=Settings.nGameAsteroidSceneHeight;\n  position.x=posX + this.map_controler.syncCnt;\n  velocity.set(new Math_Vector(0,0));\n  status=BACKPOS;\n}\n"}
{"nl": "Check if the specific date is today", "code": "public static boolean isToday(Date date){\n  return android.text.format.DateUtils.isToday(date.getTime());\n}\n"}
{"nl": "Cipher the given byte-array with Blowfish cipher", "code": "public void cipher(byte[] data,int offset,int length){\n  int blockNumber=length >> 3;\n  int p;\n  for (int k=0; k < blockNumber; k++) {\n    p=offset + (k << 3);\n    int xl=byteArrayToInteger(data,p);\n    int xr=byteArrayToInteger(data,p + 4);\n    int tmp;\n    for (int i=0; i < 16; i++) {\n      xl=xl ^ pArray[i];\n      xr=F(xl) ^ xr;\n      tmp=xl;\n      xl=xr;\n      xr=tmp;\n    }\n    tmp=xl;\n    xl=xr;\n    xr=tmp;\n    xr^=pArray[16];\n    xl^=pArray[17];\n    integerToByteArray(xl,data,p);\n    integerToByteArray(xr,data,p + 4);\n  }\n}\n"}
{"nl": "Returns the multiplicative inverse (element-wise 1/x) of an array", "code": "public static double[] invert(double[] a) throws IllegalArgumentException {\n  if (a == null) {\n    throw new IllegalArgumentException(\"Argument cannot be null\");\n  }\n  double[] c=new double[a.length];\n  for (int i=0; i < a.length; i++) {\n    c[i]=1.0 / a[i];\n  }\n  return c;\n}\n"}
{"nl": "Constructs an <code>PrepareJob</code>", "code": "public PrepareJob(Transaction tr,TaskManager pool,WakeupManager wm,ClientLog log,ParticipantHandle[] handles,Object xid,ConcurrentMap<String,IDirectSpaceProxy> proxiesMap){\n  super(pool,wm,false);\n  if (log == null)   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"log is null\");\n  this.log=log;\n  if (!(tr instanceof ServerTransaction))   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"must be a ServerTransaction\");\n  this.tr=(ServerTransaction)tr;\n  if (handles == null)   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"must have participants\");\n  if (handles.length == 0)   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"must have participants\");\n  this.handles=handles;\n  _xid=xid;\n  _proxiesMap=proxiesMap;\n}\n"}
{"nl": "Returns true if the given attribute is an RTL-affected one", "code": "static boolean isRtlMargin(String attribute){\n  if (SdkConstants.ATTR_LAYOUT_MARGIN_LEFT.equals(attribute) || SdkConstants.ATTR_LAYOUT_MARGIN_RIGHT.equals(attribute)) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Check if running on main thread", "code": "public static void checkUiThread(){\n  if (Looper.getMainLooper() != Looper.myLooper()) {\n    throw new IllegalStateException(\"Must be called from the main thread. Was: \" + Thread.currentThread());\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set colorMatchesVsReference=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().getAlignmentPanel().setColorMatchesVsReference(value);\n  ProgramProperties.put(\"ColorMatchesVsReference\",value);\n  viewer.repaint();\n}\n"}
{"nl": "Create an <code>unsigned short</code>", "code": "public static UShort valueOf(int value) throws NumberFormatException {\n  return new UShort(value);\n}\n"}
{"nl": "Required for Externalizable", "code": "public UnregisterReplicationLocalViewRequestInfo(){\n}\n"}
{"nl": "List of contacts separated with commas", "code": "public AccountLookupContactsQuery contacts(List<String> value){\n  return unsafeParam(\"contacts\",value);\n}\n"}
{"nl": "delete file from storage server", "code": "public int delete_file1(String file_id) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.delete_file(parts[0],parts[1]);\n}\n"}
{"nl": "Return additional \"likes\", \"comments\", and \"tags\" fields", "code": "public PhotosGetQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Get order count", "code": "@Override public int searchOrderCount(OrderReqDto reqDto){\n  return sessionTemplate.selectOne(NAMESPACE + \".searchOrderCount\",reqDto);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetMembersQueryWithFields(VkApiClient client,Actor actor,UserField... fields){\n  super(client,\"groups.getMembers\",GetMembersFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LeadsCompleteQuery(VkApiClient client,String vkSid,String secret){\n  super(client,\"leads.complete\",Complete.class);\n  vkSid(vkSid);\n  secret(secret);\n}\n"}
{"nl": "Updates the values of this <code>BufferObject</code> instance (all invalid status' are removed)", "code": "private boolean update(final Object pValue,final String pValueDesc,final Timestamp pTimestamp){\n  boolean retval=false;\nsynchronized (BUFFER_LOCK) {\n    if (this.timestamp.before(pTimestamp) || this.timestamp.equals(pTimestamp)) {\n      this.value=pValue;\n      this.qualityCollection.clear();\n      this.qualityDescriptions.clear();\n      this.valueDesc=pValueDesc;\n      this.timestamp=pTimestamp;\n      retval=true;\n    }\n  }\n  return retval;\n}\n"}
{"nl": "%1[acquire]%2 %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_ACQUIRE(){\n  return new SM_SYSTEM_MESSAGE(1300609);\n}\n"}
{"nl": "process main logic for create file", "code": "public static void process(List<Packages> pkgList) throws Exception {\n  init();\n  String[] temps=templates.split(\",\");\n  String[] vmFiles=new String[temps.length];\n  for (int i=0; i < temps.length; i++) {\n    vmFiles[i]=temps[i] + \".vm\";\n  }\n  for (  Packages pkg : pkgList) {\n    for (    String vmFile : vmFiles) {\n      generator(vmFile,pkg);\n    }\n  }\n}\n"}
{"nl": "put a value in the table", "code": "public void put(String sample,HiddenAttribute attribute,Object value){\n  put(sample,attribute.toString(),value);\n}\n"}
{"nl": "read the aux blocks from a file", "code": "public void readAuxBlocks(FileFooterRMA3 fileFooter,IInputReader reader,Map<String,byte[]> name2AuxBlock) throws IOException {\n  reader.seek(fileFooter.getAuxStart());\n  for (int i=0; i < count && reader.getPosition() < fileFooter.getAuxFooter(); i++) {\n    String name=reader.readString();\n    int length=reader.readInt();\n    byte[] bytes=new byte[length];\n    reader.read(bytes,0,length);\n    name2AuxBlock.put(name,bytes);\n  }\n}\n"}
{"nl": "computes the pearson distances", "code": "private static void computeCorrelationMatrix(int rank,double[][] vectors,Distances distances){\n  double[] mean=new double[rank];\n  for (  double[] row : vectors) {\n    for (int col=0; col < rank; col++) {\n      mean[col]+=row[col];\n    }\n  }\n  for (int col=0; col < rank; col++) {\n    mean[col]/=vectors.length;\n  }\n  double[] stddev=new double[rank];\n  for (  double[] row : vectors) {\n    for (int col=0; col < rank; col++) {\n      stddev[col]+=(row[col] - mean[col]) * (row[col] - mean[col]);\n    }\n  }\n  for (int col=0; col < rank; col++) {\n    stddev[col]=Math.sqrt(stddev[col] / vectors.length);\n  }\n  for (int di=0; di < rank; di++) {\n    distances.set(di + 1,di + 1,0);\n    for (int dj=di + 1; dj < rank; dj++) {\n      double cor=0;\n      for (      double[] row : vectors) {\n        cor+=(row[di] - mean[di]) * (row[dj] - mean[dj]) / (stddev[di] * stddev[dj]);\n      }\n      cor/=vectors.length;\n      distances.set(di + 1,dj + 1,cor);\n    }\n  }\n}\n"}
{"nl": "Sends an email warning about the DB problems", "code": "public final void dbUnavailable(final boolean alarmUp,final String exceptionMsg,final String dbInfo){\n  if (alarmUp == FallbackAlarmsInterface.ACTIVATED) {\n    ArrayList recipients=new ArrayList();\n    MailDetailsBean mailDetails=new MailDetailsBean();\n    mailDetails.setSender(\"mruizgar@cern.ch\");\n    recipients.add(\"mruizgar@cern.ch\");\n    mailDetails.setToRecipients(recipients);\n    mailDetails.setSubject(\"DB Unavailable\");\n    mailDetails.setMessage(\"The DB connection to \" + dbInfo + \"could not be established due to: \"+ exceptionMsg);\n    mailDetails.setServer(\"cernmx.cern.ch\");\n    SMTPMailSender mailSender=new SMTPMailSender();\n    try {\n      mailSender.sendMail(mailDetails);\n    }\n catch (    MailSenderException e) {\n      LOG.debug(e.getMessage());\n    }\n  }\n}\n"}
{"nl": "Creates a simple voice", "code": "public CMUDiphoneVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){\n  super(name,gender,age,description,locale,domain,organization,lexicon);\n  setRate(150f);\n  setPitch(100F);\n  setPitchRange(11F);\n  this.database=database;\n}\n"}
{"nl": "Call to update multiple files already uploaded", "code": "public void uploadUpdate(Context context,Account account,OCFile[] existingFiles,Integer behaviour,Boolean forceOverwrite){\n  Intent intent=new Intent(context,FileUploader.class);\n  intent.putExtra(FileUploader.KEY_ACCOUNT,account);\n  intent.putExtra(FileUploader.KEY_FILE,existingFiles);\n  intent.putExtra(FileUploader.KEY_LOCAL_BEHAVIOUR,behaviour);\n  intent.putExtra(FileUploader.KEY_FORCE_OVERWRITE,forceOverwrite);\n  context.startService(intent);\n}\n"}
{"nl": "Remove alliance from league (expel)", "code": "public static final void expelAlliance(Player expelledPlayer,Player expelGiver){\n  Preconditions.checkNotNull(expelledPlayer,\"Expelled player should not be null\");\n  Preconditions.checkNotNull(expelGiver,\"ExpelGiver player should not be null\");\n  Preconditions.checkArgument(expelGiver.isInLeague(),\"Expelled player should be in league\");\n  Preconditions.checkArgument(expelledPlayer.isInLeague(),\"ExpelGiver should be in league\");\n  Preconditions.checkArgument(expelGiver.getPlayerAlliance2().getLeague().isLeader(expelGiver.getPlayerAlliance2()),\"ExpelGiver alliance should be the leader of league\");\n  Preconditions.checkArgument(expelGiver.getPlayerAlliance2().isLeader(expelGiver),\"ExpelGiver should be the leader of alliance\");\n  PlayerAlliance alliance=expelGiver.getPlayerAlliance2();\n  League league=alliance.getLeague();\n  league.onEvent(new LeagueLeftEvent(league,expelledPlayer.getPlayerAlliance2(),LeaveReson.EXPEL));\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);\n}\n"}
{"nl": "draw the x axis", "code": "protected void drawXAxis(Graphics2D gc){\n}\n"}
{"nl": "Returns  true if given exception class is a direct cause of this exception", "code": "public boolean containsCause(Class<? extends Throwable> exceptionClass){\n  return containsCause(exceptionClass,getCauses());\n}\n"}
{"nl": "Turn off all console logging You MUST re-enable logging when you are done", "code": "public static void disableConsoleLogging(){\n  consoleLoggingEnabled=false;\n}\n"}
{"nl": "Create a new event driven <code>ScriptingExecutor</code> proxy", "code": "public ScriptingExecutor<T> scriptingExecutor(){\n  return remotingConfigurer.proxy();\n}\n"}
{"nl": "Given a hexstring this will return the byte array corresponding to the string", "code": "public static byte[] hexStringToByte(String hex){\n  byte[] bts=new byte[hex.length() / 2];\n  for (int i=0; i < bts.length; i++) {\n    bts[i]=(byte)Integer.parseInt(hex.substring(2 * i,2 * i + 2),16);\n  }\n  return bts;\n}\n"}
{"nl": "Removes if statements that jump to the fall-through successor", "code": "private void eliminateFallthroughIfs(Body body){\n  boolean changed=false;\n  do {\n    changed=false;\n    IfStmt ifs=null;\n    Iterator<Unit> unitIt=body.getUnits().snapshotIterator();\n    while (unitIt.hasNext()) {\n      Unit u=unitIt.next();\n      if (ifs != null && ifs.getTarget() == u) {\n        body.getUnits().remove(ifs);\n        changed=true;\n      }\n      ifs=null;\n      if (u instanceof IfStmt)       ifs=(IfStmt)u;\n    }\n  }\n while (changed);\n}\n"}
{"nl": "It sets the file counter to zero", "code": "private void initializeCounterFile(){\n  try {\n    openCounterDataOutputStream();\n    dOutput.write(\"0\");\n    dOutput.newLine();\n    dOutput.flush();\n    if (LOG.isDebugEnabled())     LOG.debug(\"initializeCounterFile() - The counter file has been updated with zero\");\n  }\n catch (  IOException e) {\n    LOG.error(\"initializeCounterFile() - Error while trying to write in the counter file\");\n  }\ncatch (  DataFallbackException e) {\n    LOG.error(\"initializeCounterFile() - The counter file could not be opened\");\n  }\n finally {\n    try {\n      closeCounterDataOutputStream();\n    }\n catch (    DataFallbackException ex) {\n      LOG.error(\"initializeCounterFile() - The counter file could not be closed\");\n    }\n  }\n}\n"}
{"nl": "rescan classifications after running the data processor", "code": "@Override public void updateClassifications(String[] names,List<UpdateItem> updateItemList,ProgressListener progressListener) throws IOException, CanceledException {\n  final UpdateItemList updateItems=(UpdateItemList)updateItemList;\n  final int numClassifications=names.length;\n  long maxProgress=0;\n  for (int i=0; i < numClassifications; i++) {\n    maxProgress+=updateItems.getClassIds(i).size();\n  }\n  progressListener.setMaximum(maxProgress);\n  RMA3FileModifier rma3FileModifier=new RMA3FileModifier(fileName);\n  rma3FileModifier.startModification();\n  for (int i=0; i < numClassifications; i++) {\n    if (Basic.toString(ClassificationType.values(),\" \").contains(names[i])) {\n      ClassificationType classificationType=ClassificationType.valueOf(names[i]);\n      final Map<Integer,ListOfLongs> classId2Locations=new HashMap<>();\n      for (      Integer classId : updateItems.getClassIds(i)) {\n        int weightedSize=updateItems.getSize(i,classId);\n        final ListOfLongs positions=new ListOfLongs();\n        classId2Locations.put(classId,positions);\n        if (weightedSize > 0) {\n          for (UpdateItem item=updateItems.getFirst(i,classId); item != null; item=updateItems.getUpdateItem(item.getNextInClassification(i))) {\n            positions.add(item.getReadUId());\n          }\n        }\n        progressListener.incrementProgress();\n      }\n      rma3FileModifier.updateClassification(classificationType,classId2Locations);\n    }\n else     System.err.println(\"Unsupported classification type: \" + names[i]);\n  }\n  rma3FileModifier.finishModification();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoDeleteAlbumQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"video.deleteAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n"}
{"nl": "used for dialog/fragment/popWindow/dialog", "code": "public BlurDrawable(Activity activity){\n  this(activity.getWindow().getDecorView());\n}\n"}
{"nl": "Creates a new instance of Jim2Mov", "code": "public Jim2Mov(ImageProvider ip,MovieInfoProvider mip){\n  this.ip=ip;\n  this.mip=mip;\n  itm=new ImagesToMovie(this);\n}\n"}
{"nl": "Add an vertical spring between (x0, y1) and (x0, y1) to the given path object", "code": "private static void addVerticalSmallSpring(Path2D.Float path,int x0,int y1,int y2){\n  int springHeight=2;\n  int springWidth=2;\n  int distance=Math.abs(y2 - y1);\n  int numSprings=(distance / (springHeight));\n  int leftOver=(distance - (numSprings * springHeight)) / 2;\n  path.lineTo(x0,y1);\n  path.lineTo(x0,y1 - leftOver);\n  int count=0;\n  if (y1 > y2) {\n    for (int y=y1 - leftOver; y > y2 + leftOver; y-=springHeight) {\n      int x=(count % 2 == 0) ? x0 - springWidth : x0 + springWidth;\n      path.lineTo(x,y);\n      count++;\n    }\n  }\n else {\n    for (int y=y1 + leftOver; y < y2 - leftOver; y+=springHeight) {\n      int x=(count % 2 == 0) ? x0 - springWidth : x0 + springWidth;\n      path.lineTo(x,y);\n      count++;\n    }\n  }\n  path.lineTo(x0,y2 + leftOver);\n  path.lineTo(x0,y2);\n}\n"}
{"nl": "Tests that a new ShortTermLog object is correctly logged in the fallback log file", "code": "public final void testWriteLine(){\n  FallbackFileController fFileController=new FallbackFileController(PATH);\n  FallbackImpl fallbackImpl=new FallbackImpl();\n  try {\n    fFileController.openFallbackOutputStream();\n    fFileController.writeLine(fallbackImpl);\n    fFileController.closeFallbackOutputStream();\n  }\n catch (  DataFallbackException e) {\n    fail(\"An error has ocurred while trying to write in the fallback log file\");\n  }\n  assertFalse(fFileController.isFallBackFileEmpty());\n}\n"}
{"nl": "Convert the specified column from an integer representation (assume values 0 to numCategories-1) to a categorical representation, given the specified state names", "code": "public Builder integerToCategorical(String columnName,List<String> categoryStateNames){\n  return transform(new IntegerToCategoricalTransform(columnName,categoryStateNames));\n}\n"}
{"nl": "Initialize directly from map of IntervalFeatures", "code": "public IntervalFeatureSet(Map<String,List<IntervalFeature>> intervalMap,TrackFormat type){\n  this.intervalMap=intervalMap;\n  this.sortIntervalsWithinChroms();\n  this.type=type;\n}\n"}
{"nl": "Extracts the drawable of the passing Context's theme", "code": "@ColorInt private int extractIntAttribute(Context context,int[] attribute){\n  TypedValue typedValue=new TypedValue();\n  TypedArray a=context.obtainStyledAttributes(typedValue.data,attribute);\n  int color=a.getColor(0,0);\n  a.recycle();\n  return color;\n}\n"}
{"nl": "Calculate angle to north depending on SensorEvent data", "code": "private static double calculateAngle(SensorEvent event,GeomagneticField magneticField){\n  float azimuth=getAzimuth(event);\n  double angle;\n  if (magneticField != null) {\n    angle=Math.toDegrees(azimuth) + magneticField.getDeclination();\n  }\n else {\n    angle=Math.toDegrees(azimuth);\n  }\n  angle=(angle + 360) % 360;\n  return angle;\n}\n"}
{"nl": "creates a sash form - one side for a selection tree  and the other for the options", "code": "protected Control createDialogArea(Composite parent){\n  GridData gd;\n  Composite dialogComp=(Composite)super.createDialogArea(parent);\n  Composite topComp=new Composite(dialogComp,SWT.NONE);\n  gd=new GridData(GridData.FILL_BOTH);\n  topComp.setLayoutData(gd);\n  GridLayout topLayout=new GridLayout();\n  topLayout.numColumns=2;\n  topComp.setLayout(topLayout);\n  setTitle(Messages.getString(\"SootConfigManagerDialog.Soot_Configurations_Manager\"));\n  setMessage(\"\");\n  Composite selection=createSelectionArea(topComp);\n  gd=new GridData(GridData.FILL_BOTH);\n  gd.horizontalSpan=1;\n  selection.setLayoutData(gd);\n  Control specialButtons=createSpecialButtonBar(topComp);\n  gd=new GridData(GridData.FILL_BOTH);\n  specialButtons.setLayoutData(gd);\n  Label separator=new Label(topComp,SWT.HORIZONTAL | SWT.SEPARATOR);\n  gd=new GridData(GridData.FILL_HORIZONTAL);\n  gd.horizontalSpan=2;\n  separator.setLayoutData(gd);\n  dialogComp.layout(true);\n  return dialogComp;\n}\n"}
{"nl": "is viewer uptodate?", "code": "public boolean isUptoDate(){\n  return uptodate;\n}\n"}
{"nl": "extract all reads belonging to a given set of taxon ids", "code": "public static int extractReadsByTaxonomy(final ProgressListener progressListener,final Set<Integer> taxIds,final String outDirectory,final String outFileName,final Document doc,final boolean summarized) throws IOException, CanceledException {\n  Map<Integer,String> classId2Name=new HashMap<>();\n  Map<Integer,Collection<Integer>> classId2Descendants=new HashMap<>();\n  for (  Integer id : taxIds) {\n    classId2Name.put(id,TaxonomyData.getName2IdMap().get(id));\n    if (summarized)     classId2Descendants.put(id,TaxonomyData.getTree().getAllDescendants(id));\n  }\n  return extractReads(progressListener,ClassificationType.Taxonomy.toString(),taxIds,classId2Name,classId2Descendants,outDirectory,outFileName,doc,summarized);\n}\n"}
{"nl": "Calculate point values for each item levels and each max feed count", "code": "static void calculate(){\n  for (  byte levelByte : itemLevels) {\n    short level=(short)(levelByte & 0xFF);\n    if (level < 10) {\n      continue;\n    }\n    int countIndex=0;\n    for (    short countByte : fullCounts) {\n      short count=(short)(countByte & 0xFF);\n      int finalLevel=level;\n      if (finalLevel % 5 == 0) {\n        finalLevel--;\n      }\n      int pointLevel=(int)itemLevels[(finalLevel / 5)];\n      int feedPoints=Math.max(0,pointLevel - 5) / 5 * 8;\n      pointValues[finalLevel / 5][countIndex++]=getPoints(feedPoints,count);\n    }\n  }\n}\n"}
{"nl": "int convert to buff (big-endian)", "code": "public static void int2buff(int n,byte[] bs,int offset){\n  bs[offset]=(byte)((n >> 24) & 0xFF);\n  bs[offset + 1]=(byte)((n >> 16) & 0xFF);\n  bs[offset + 2]=(byte)((n >> 8) & 0xFF);\n  bs[offset + 3]=(byte)(n & 0xFF);\n  return;\n}\n"}
{"nl": "Creates a new include reference", "code": "public static IncludeReference create(@NonNull Module module,@NonNull VirtualFile fromFile,@Nullable VirtualFile toFile){\n  return new IncludeReference(module,fromFile,toFile);\n}\n"}
{"nl": "Is the bundled (incomplete) SDK install adequate or do we need to find a valid install?", "code": "@Override protected boolean requireRecentSdk(){\n  return true;\n}\n"}
{"nl": "Disables touch", "code": "@Override public boolean dispatchTouchEvent(MotionEvent ev){\n  return true;\n}\n"}
{"nl": "Merge an int value into byte array, starting at the specified starting index (occupies the next 4 bytes);", "code": "static final void intToByteArray(int value,byte[] bytes,int startIndex){\n  int i=startIndex * 4;\n  bytes[i]=(byte)(value >>> 24);\n  bytes[i + 1]=(byte)(value >>> 16);\n  bytes[i + 2]=(byte)(value >>> 8);\n  bytes[i + 3]=(byte)(value);\n}\n"}
{"nl": "Sort order:", "code": "public PhotosSearchQuery sort(Integer value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Check whether player can use an item", "code": "public static boolean canUseItem(Player player,Item item){\n  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canUseItem.ordinal()]) {\n    if (!restrictions.canUseItem(player,item)) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Finds the Type value of the given wildcard type", "code": "public static <T>Type<T> valueOf(final WildcardType var){\n  Set<Type<?>> bounds=new HashSet<Type<?>>(var.getUpperBounds().length + var.getLowerBounds().length);\n  for (int i=0, len=var.getUpperBounds().length; i < len; ++i) {\n    bounds.add(valueOf(var.getUpperBounds()[i]));\n  }\n  for (int i=0, len=var.getLowerBounds().length; i < len; ++i) {\n    bounds.add(valueOf(var.getLowerBounds()[i]));\n  }\n  return (Type<T>)refineBounds(bounds);\n}\n"}
{"nl": "Select Random Skills for: Sheban Intelligent Unit Hunter Sheban Elite Sniper", "code": "private void Hunter_SniperSkills(){\n  if (getOwner().isCasting() || isAlreadyDead()) {\n    return;\n  }\n  int rand=Rnd.get(1,2);\nswitch (rand) {\ncase 1:\n    useSkill(21292);\n  break;\ncase 2:\nuseSkill(21293);\nbreak;\n}\n}\n"}
{"nl": "Scale all data  0 to 1", "code": "public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data,List<String> skipColumns){\n  return normalize(schema,data,0,1,skipColumns);\n}\n"}
{"nl": "Check for the \"environment\" key in the pluginAPI", "code": "private boolean isConfigurationPluginAvailable(){\n  if (configurationPluginAvailable == null) {\n    try {\n      String value=APILocator.getPluginAPI().loadProperty(pluginName,\"environment\");\n      configurationPluginAvailable=(value != null);\n    }\n catch (    Exception e) {\n      Logger.warn(this,\"Exception while trying to get property 'environment' \",e);\n      configurationPluginAvailable=false;\n    }\n    Logger.info(this,\"Configuration plugin available: \" + configurationPluginAvailable);\n  }\n  return configurationPluginAvailable;\n}\n"}
{"nl": "Shows the properties for the given resource", "code": "public void showSvnProperties(ISVNLocalResource resource) throws SVNException {\n  this.resource=resource;\n  if (resource != null) {\n    setContentDescription(Policy.bind(\"SvnPropertiesView.titleWithArgument\",resource.getName()));\n  }\n else {\n    setContentDescription(\"\");\n  }\n  refresh();\n}\n"}
{"nl": "Constructs new <tt>SM_UI</tt> packet", "code": "public SM_STATS_INFO(Player player){\n  this.player=player;\n  this.pcd=player.getCommonData();\n  this.pgs=player.getGameStats();\n  this.pls=player.getLifeStats();\n}\n"}
{"nl": "example of request, which load main data for screen", "code": "private void tryLoadData(){\n  if (books.size() != 0) {\n    onLoadBooksSuccess(books);\n  }\n else   if (isSubscriptionInactive(loadBookSubscription)) {\n    getView().showLoading();\n    loadData();\n  }\n else {\n    getView().showLoading();\n  }\n}\n"}
{"nl": "Do interpolation on the samples according to the original and destinated sample rates", "code": "public short[] interpolate(int oldSampleRate,int newSampleRate,short[] samples){\n  if (oldSampleRate == newSampleRate) {\n    return samples;\n  }\n  int newLength=Math.round(((float)samples.length / oldSampleRate * newSampleRate));\n  float lengthMultiplier=(float)newLength / samples.length;\n  short[] interpolatedSamples=new short[newLength];\n  for (int i=0; i < newLength; i++) {\n    float currentPosition=i / lengthMultiplier;\n    int nearestLeftPosition=(int)currentPosition;\n    int nearestRightPosition=nearestLeftPosition + 1;\n    if (nearestRightPosition >= samples.length) {\n      nearestRightPosition=samples.length - 1;\n    }\n    float slope=samples[nearestRightPosition] - samples[nearestLeftPosition];\n    float positionFromLeft=currentPosition - nearestLeftPosition;\n    interpolatedSamples[i]=(short)(slope * positionFromLeft + samples[nearestLeftPosition]);\n  }\n  return interpolatedSamples;\n}\n"}
{"nl": "When player clicks on dead NPC to request drop list", "code": "public void requestDropList(Player player,int npcId){\n  DropNpc dropNpc=DropRegistrationService.getInstance().getDropRegistrationMap().get(npcId);\n  if (player == null || dropNpc == null) {\n    return;\n  }\n  if (!dropNpc.containsKey(player.getObjectId()) && !dropNpc.isFreeForAll()) {\n    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_LOOT_NO_RIGHT);\n    return;\n  }\n  if (dropNpc.isBeingLooted()) {\n    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_LOOT_FAIL_ONLOOTING);\n    return;\n  }\n  dropNpc.setBeingLooted(player);\n  VisibleObject visObj=World.getInstance().findVisibleObject(npcId);\n  if (visObj instanceof Npc) {\n    Npc npc=((Npc)visObj);\n    ScheduledFuture<?> decayTask=(ScheduledFuture<?>)npc.getController().cancelTask(TaskId.DECAY);\n    if (decayTask != null) {\n      long reamingDecayTime=decayTask.getDelay(TimeUnit.MILLISECONDS);\n      dropNpc.setReamingDecayTime(reamingDecayTime);\n    }\n  }\n  Set<DropItem> dropItems=DropRegistrationService.getInstance().getCurrentDropMap().get(npcId);\n  if (dropItems == null) {\n    dropItems=Collections.emptySet();\n  }\n  PacketSendUtility.sendPacket(player,new SM_LOOT_ITEMLIST(npcId,dropItems,player));\n  PacketSendUtility.sendPacket(player,new SM_LOOT_STATUS(npcId,2));\n  player.unsetState(CreatureState.ACTIVE);\n  player.setState(CreatureState.LOOTING);\n  player.setLootingNpcOid(npcId);\n  PacketSendUtility.broadcastPacket(player,new SM_EMOTION(player,EmotionType.START_LOOT,0,npcId),true);\n}\n"}
{"nl": "Constructs new <tt>SM_CREATE_CHARACTER </tt> packet", "code": "public SM_CREATE_CHARACTER(PlayerAccountData accPlData,int responseCode){\n  this.player=accPlData;\n  this.responseCode=responseCode;\n}\n"}
{"nl": "Creates a StyledLayerDescriptor object containing a SLD by  reading the contents of a file", "code": "public static StyledLayerDescriptor readSLDFile(File file){\n  StyledLayerDescriptor sld=null;\n  if (file != null) {\n    StyleFactory styleFactory=CommonFactoryFinder.getStyleFactory();\n    try {\n      URL url=file.toURI().toURL();\n      SLDParser styleReader=new SLDParser(styleFactory,url);\n      setResourcelocator(styleReader,file.toURI().toURL());\n      sld=styleReader.parseSLD();\n    }\n catch (    MalformedURLException e) {\n      ConsoleManager.getInstance().exception(SLDUtils.class,e);\n    }\ncatch (    IOException e) {\n      ConsoleManager.getInstance().exception(SLDUtils.class,e);\n    }\n  }\n  return sld;\n}\n"}
{"nl": "Check if success rate is enough for notification", "code": "static boolean isSuccessRateEnough(Launch launch,SendCase option){\nswitch (option) {\ncase ALWAYS:\n    return true;\ncase FAILED:\n  return launch.getStatus().equals(Status.FAILED);\ncase TO_INVESTIGATE:\nreturn launch.getStatistics().getIssueCounter().getToInvestigateTotal() > 0;\ncase MORE_10:\nreturn getSuccessRate(launch) > 0.1;\ncase MORE_20:\nreturn getSuccessRate(launch) > 0.2;\ncase MORE_50:\nreturn getSuccessRate(launch) > 0.5;\ndefault :\nreturn false;\n}\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureGetAppBalanceQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.getAppBalance\",Integer.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n"}
{"nl": "Run a fixed in the time (HH:MM:SS) task", "code": "@Override public void initTrigger(){\n  Calendar calendar=Calendar.getInstance();\n  calendar.set(Calendar.HOUR_OF_DAY,hour);\n  calendar.set(Calendar.MINUTE,minute);\n  calendar.set(Calendar.SECOND,second);\n  long delay=calendar.getTimeInMillis() - System.currentTimeMillis();\n  if (delay < 0) {\n    delay+=DAY_IN_MSEC;\n  }\n  ThreadPoolManager.getInstance().scheduleAtFixedRate(this,delay,DAY_IN_MSEC);\n}\n"}
{"nl": "from login server to source, after response from target server", "code": "public void onOk(int taskId){\n  TransferablePlayer tplayer=this.transfers.remove(taskId);\n  textLog.info(\"taskId:\" + taskId + \"; [TransferComplete]\");\n  PlayerService.deletePlayerFromDB(tplayer.playerId);\n}\n"}
{"nl": "creates a new network viewer", "code": "public TaxonomyClusterViewer(final MainViewer viewer){\n  super(viewer.getDir(),viewer,ClassificationType.Taxonomy.toString());\n}\n"}
{"nl": "Save a recording", "code": "@Override public void saveGenericEntity(Object entity){\n  final Session session=this.sessionFactory.openSession();\n  final Transaction transaction=session.beginTransaction();\n  session.saveOrUpdate(entity);\n  transaction.commit();\n  session.close();\n}\n"}
{"nl": "Returns true if legion is in cached by id", "code": "public boolean containsEx(String memberName){\n  return legionMemberExByName.containsKey(memberName);\n}\n"}
{"nl": "true - shuffle on", "code": "public AudioGetRecommendationsQuery shuffle(Boolean value){\n  return unsafeParam(\"shuffle\",value);\n}\n"}
{"nl": "Remove a drop widget", "code": "public void removeDragComponent(){\n  if (myDragDropWidget != null) {\n    myWidgetsScene.removeWidget(myDragDropWidget);\n    myDragDropWidget=null;\n  }\n}\n"}
{"nl": "Create configuration instance for Sparkler", "code": "public static SparklerConfiguration newDefaultConfig(){\n  Yaml yaml=new Yaml();\n  InputStream input=null;\n  SparklerConfiguration sparklerConf=null;\n  try {\n    input=Constants.class.getClassLoader().getResourceAsStream(file.SPARKLER_DEFAULT);\n    Map<String,Object> yamlMap=(Map<String,Object>)yaml.load(input);\n    sparklerConf=new SparklerConfiguration(yamlMap);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    IOUtils.closeQuietly(input);\n  }\n  if (sparklerConf != null) {\n    sparklerConf.put(key.UUID_KEY,UUID.randomUUID().toString());\n  }\n  return sparklerConf;\n}\n"}
{"nl": "query storage server stat info of the group", "code": "public StructStorageStat[] listStorages(TrackerServer trackerServer,String groupName) throws IOException {\n  final String storageIpAddr=null;\n  return this.listStorages(trackerServer,groupName,storageIpAddr);\n}\n"}
{"nl": "Call user data handlers when a node is deleted (finalized)", "code": "protected void callUserDataHandlers(Node n,Node c,short operation){\n  if (userData == null) {\n    return;\n  }\n  if (n instanceof NodeImpl) {\n    Hashtable t=((NodeImpl)n).getUserDataRecord();\n    if (t == null || t.isEmpty()) {\n      return;\n    }\n    callUserDataHandlers(n,c,operation,t);\n  }\n}\n"}
{"nl": "TODO make this not language specific", "code": "public static final Optional<ArrayList<SteamVRApp>> parseManifest(final File manifest){\n  try (Scanner scanner=new Scanner(manifest)){\n    final JSONParser parser=new JSONParser();\n    final ArrayList<SteamVRApp> toReturn=new ArrayList<>();\n    final StringBuilder builder=new StringBuilder();\n    while (scanner.hasNextLine())     builder.append(scanner.nextLine() + \"\\n\");\n    scanner.close();\n    final JSONObject object=(JSONObject)parser.parse(builder.toString());\n    final JSONArray applications=(JSONArray)object.get(\"applications\");\n    final Iterator<?> iterator=applications.iterator();\n    while (iterator.hasNext()) {\n      final JSONObject currentApplication=(JSONObject)iterator.next();\n      final String appKey=(String)currentApplication.get(\"app_key\");\n      final String launchType=(String)currentApplication.get(\"launch_type\");\n      final JSONObject strings=(JSONObject)currentApplication.get(\"strings\");\n      JSONObject english=(JSONObject)strings.get(\"en_us\");\n      final String name=(String)english.get(\"name\");\n      final String imagePath=(String)currentApplication.get(\"image_path\");\n      final String launchURL=(String)currentApplication.get(\"url\");\n      toReturn.add(new SteamVRApp(-1,appKey,launchType,name,imagePath,launchURL));\n    }\n    if (toReturn.size() > 0)     return Optional.of(toReturn);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  return Optional.empty();\n}\n"}
{"nl": "This method resize the photo", "code": "private static Bitmap resizePhoto(Bitmap realImage,float maxImageSize,boolean filter){\n  float ratio=Math.min((float)maxImageSize / realImage.getWidth(),(float)maxImageSize / realImage.getHeight());\n  int width=Math.round((float)ratio * realImage.getWidth());\n  int height=Math.round((float)ratio * realImage.getHeight());\n  Bitmap newBitmap=Bitmap.createScaledBitmap(realImage,width,height,filter);\n  return newBitmap;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public char next(){\n  if (this.pos < this.end - 1) {\n    this.pos+=1;\n    return this.text.charAt(this.pos);\n  }\n  this.pos=this.end;\n  return 65535;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + PearsonDistance.PEARSON_DISTANCE + \";\");\n}\n"}
{"nl": "adds this field for the outer class", "code": "private void handleOuterClassThisInit(soot.SootMethod sootMethod){\n  SootField this0Field=body.getMethod().getDeclaringClass().getFieldByNameUnsafe(\"this$0\");\n  if (this0Field != null) {\n    soot.jimple.FieldRef fieldRef=soot.jimple.Jimple.v().newInstanceFieldRef(specialThisLocal,this0Field.makeRef());\n    soot.jimple.AssignStmt stmt=soot.jimple.Jimple.v().newAssignStmt(fieldRef,outerClassParamLocal);\n    body.getUnits().add(stmt);\n  }\n}\n"}
{"nl": "Initialise sink task", "code": "@Override public void initialize(SinkTaskContext context){\n  iTaskContext=context;\n}\n"}
{"nl": "Duplicate a set of columns", "code": "public Builder duplicateColumns(List<String> columnNames,List<String> newNames){\n  return transform(new DuplicateColumnsTransform(columnNames,newNames));\n}\n"}
{"nl": "Synthesize a vocalization which fits better for given target", "code": "private AudioInputStream synthesizeVocalization(AudioFileFormat aft,Element domElement) throws SynthesisException {\n  int numberOfBackChannels=unitFileReader.getNumberOfUnits();\n  int backchannelNumber=vSelector.getBestMatchingCandidate(domElement);\n  assert backchannelNumber < numberOfBackChannels : \"This voice has \" + numberOfBackChannels + \" backchannels only. so it doesn't support unit number \"+ backchannelNumber;\n  return synthesizeSelectedVocalization(backchannelNumber,aft,domElement);\n}\n"}
{"nl": "Add a Double column with no restrictions on the allowable values, except for no NaN/infinite values allowed", "code": "public Builder addColumnFloat(String name){\n  return addColumn(new FloatMetaData(name));\n}\n"}
{"nl": "Creates a meta storable fence which is a logical 'and' of all the given fences", "code": "@NonNull public static StorableFence and(@NonNull Collection<StorableFence> fences){\n  StorableFence metaFence=new StorableFence(Type.META);\n  metaFence.mAndFences.addAll(fences);\n  return metaFence;\n}\n"}
{"nl": "Returns true if GAPIS is considered stable (non-experimental):", "code": "public boolean isStable(){\n  return myFeatures.contains(FEATURE_STABLE);\n}\n"}
{"nl": "Set sticker id", "code": "public VideoCreateCommentQuery stickerId(Integer value){\n  return unsafeParam(\"sticker_id\",value);\n}\n"}
{"nl": "returns true if there is an AST avail for given soot class", "code": "public boolean hasASTForSootName(String name){\n  if (sootNameToAST == null)   return false;\n  if (sootNameToAST.containsKey(name))   return true;\n  return false;\n}\n"}
{"nl": "Load a rastered image from file", "code": "public int[][] fromFile(File file) throws IOException {\n  BufferedImage image=ImageIO.read(file);\n  image=scalingIfNeed(image,true);\n  return toIntArrayArray(image);\n}\n"}
{"nl": "initialize the labels : the title, the lft label and the right one", "code": "private void initLabels(){\n  CompareConfiguration cc=getCompareConfiguration();\n  cc.setLeftEditable(!readOnly);\n  cc.setRightEditable(false);\n  String title;\n  String leftLabel;\n  String rightLabel;\n  if (resources.length > 1) {\n    title=Policy.bind(\"SVNLocalBaseCompareInput.0\") + remoteRevision;\n    leftLabel=Policy.bind(\"SVNLocalBaseCompareInput.1\");\n    rightLabel=remoteRevision.toString();\n  }\n else {\n    title=Policy.bind(\"SVNCompareRevisionsInput.compareResourceAndVersions\",new Object[]{resources[0].getName()});\n    leftLabel=Policy.bind(\"SVNCompareRevisionsInput.workspace\",new Object[]{resources[0].getName()});\n    rightLabel=Policy.bind(\"SVNCompareRevisionsInput.repository\",new Object[]{resources[0].getName()});\n  }\n  setTitle(title);\n  cc.setLeftLabel(leftLabel);\n  cc.setRightLabel(rightLabel);\n}\n"}
{"nl": "Get a List of users", "code": "public String[] listUsers(){\n  ResponseEntity<String[]> response=restTemplate.exchange(url + RMAControllerMappings.LIST_USERS_MAPPING,HttpMethod.GET,request,String[].class);\n  return response.getBody();\n}\n"}
{"nl": "Escape <code>charToEscape</code> in the string with the escape char <code>escapeChar</code>", "code": "public static String escapeString(String str,char escapeChar,char charToEscape){\n  return escapeString(str,escapeChar,new char[]{charToEscape});\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 2 && !viewer.getPcoaTab().isIs3dMode();\n}\n"}
{"nl": "Get the name of a relation between an object and a resource", "code": "default String resourceName(String tableName,String type){\n  return String.format(RESOURCE_NAME,tableName,type);\n}\n"}
{"nl": "append file to storage server (by file buff)", "code": "public int append_file1(String appender_file_id,byte[] file_buff) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.append_file(parts[0],parts[1],file_buff);\n}\n"}
{"nl": "TestCase to reproduce Issue ACT-1344", "code": "@Deployment public void testNonInterruptingSignal(){\n  ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"nonInterruptingSignalEvent\");\n  List<Task> tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();\n  assertEquals(1,tasks.size());\n  Task currentTask=tasks.get(0);\n  assertEquals(\"My User Task\",currentTask.getName());\n  runtimeService.signalEventReceived(\"alert\");\n  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();\n  assertEquals(2,tasks.size());\n  for (  Task task : tasks) {\n    if (!task.getName().equals(\"My User Task\") && !task.getName().equals(\"My Second User Task\")) {\n      fail(\"Expected: <My User Task> or <My Second User Task> but was <\" + task.getName() + \">.\");\n    }\n  }\n  taskService.complete(taskService.createTaskQuery().taskName(\"My User Task\").singleResult().getId());\n  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();\n  assertEquals(1,tasks.size());\n  currentTask=tasks.get(0);\n  assertEquals(\"My Second User Task\",currentTask.getName());\n}\n"}
{"nl": "Validation rules exclusive to types", "code": "private void validateType(TypeImpl conceptType){\n  if (conceptType.isAbstract() && !ValidateGlobalRules.validateIsAbstractHasNoIncomingIsaEdges(conceptType))   errorsFound.add(ErrorMessage.VALIDATION_IS_ABSTRACT.getMessage(conceptType.getId()));\n}\n"}
{"nl": "HP restoring task", "code": "public Future<?> scheduleHpRestoreTask(CreatureLifeStats<? extends Creature> lifeStats){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new HpRestoreTask(lifeStats),1700,DEFAULT_DELAY);\n}\n"}
{"nl": "is this split compatible with the given one?", "code": "public boolean isCompatible(Split split){\n  return !(getA().intersects(split.getA()) && getA().intersects(split.getB()) && getB().intersects(split.getA())&& getB().intersects(split.getB()));\n}\n"}
{"nl": "Required for Externalizable", "code": "public WriteEntriesSpaceOperationRequest(){\n}\n"}
{"nl": "Does a HTTP PATCH with an empty body", "code": "public Response doPatch(String url){\n  return doPatch(url,null);\n}\n"}
{"nl": "Check if map is instance", "code": "public boolean isInInstance(){\n  return getPosition().isInstanceMap();\n}\n"}
{"nl": "Calculate amount of storage capacity to be used by replicas", "code": "public double calculateReplicaUsableCapacity(int vmthinsizeparentvm,int poolsnapshotcount,int desktoppoolcount,int datastorecount,int storageoverhead,String storagetiering){\n  boolean b=false;\n  if (storagetiering.equalsIgnoreCase(\"On\")) {\n    b=true;\n  }\n else {\n    b=false;\n  }\n  double d=0;\n  if (b) {\n    d=(vmthinsizeparentvm * desktoppoolcount * poolsnapshotcount) / 1048576.0;\n  }\n else {\n    d=(vmthinsizeparentvm * poolsnapshotcount * desktoppoolcount* datastorecount) / 1048576.0;\n  }\n  d*=(1.0 + (storageoverhead / 100.0));\n  d=(double)Math.round(d * 100) / 100;\n  return d;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsDeleteLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){\n  super(client,\"groups.deleteLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  linkId(linkId);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"hide attribute=\");\n  Set<String> attributes=new HashSet<>();\n  while (!np.peekMatchIgnoreCase(\";\")) {\n    String attribute=np.getWordRespectCase();\n    attributes.add(attribute);\n  }\n  np.matchIgnoreCase(\";\");\n  if (attributes.size() > 0) {\n    final SamplesViewer viewer=((SamplesViewer)getViewer());\n    viewer.getSamplesTable().hideColumns(attributes.toArray(new String[attributes.size()]));\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  String input=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter label of node to scroll to\",\"None\");\n  if (input != null) {\n    input=input.trim();\n    if (input.length() > 0)     execute(\"scrollTo node='\" + input + \"';\");\n  }\n}\n"}
{"nl": "Create the test case", "code": "public MainTest(String testName){\n  super(testName);\n}\n"}
{"nl": "Launches a new run review activity", "code": "public static void launch(Context context,String startLabelId,int activeSensorIndex,boolean fromRecord,boolean createTask,Bundle options){\n  final Intent intent=new Intent(context,RunReviewActivity.class);\n  intent.putExtra(RunReviewFragment.ARG_START_LABEL_ID,startLabelId);\n  intent.putExtra(RunReviewFragment.ARG_SENSOR_INDEX,activeSensorIndex);\n  intent.putExtra(EXTRA_FROM_RECORD,fromRecord);\n  intent.putExtra(EXTRA_CREATE_TASK,createTask);\n  context.startActivity(intent,options);\n}\n"}
{"nl": "Calculates DODGE chance", "code": "public static boolean calculatePhysicalDodgeRate(Creature attacker,Creature attacked,int accMod){\n  if (attacker.getObserveController().checkAttackerStatus(AttackStatus.DODGE)) {\n    return true;\n  }\n  if (attacked.getObserveController().checkAttackStatus(AttackStatus.DODGE)) {\n    return true;\n  }\n  float accuracy=attacker.getGameStats().getMainHandPAccuracy().getCurrent() + accMod;\n  float dodge=0;\n  if (attacked instanceof Player) {\n    dodge=attacked.getGameStats().getEvasion().getBonus() + getMovementModifier(attacked,StatEnum.EVASION,attacked.getGameStats().getEvasion().getBase()) + attacked.getGameStats().getStat(StatEnum.PVP_DODGE,0).getCurrent();\n  }\n else {\n    dodge=attacked.getGameStats().getEvasion().getBonus() + getMovementModifier(attacked,StatEnum.EVASION,attacked.getGameStats().getEvasion().getBase());\n  }\n  float dodgeRate=dodge - accuracy;\n  if (attacked instanceof Npc) {\n    int levelDiff=attacked.getLevel() - attacker.getLevel();\n    dodgeRate*=1 + getNpcLevelDiffMod(levelDiff,0);\n    if (((Npc)attacked).hasStatic()) {\n      return false;\n    }\n  }\n  return calculatePhysicalEvasion(dodgeRate,300);\n}\n"}
{"nl": "This method will convert a given timestamp to long value and then to string back", "code": "private String convertTimeStampToString(String factTimeStamp){\n  SimpleDateFormat parser=new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP);\n  Date dateToStr=null;\n  try {\n    dateToStr=parser.parse(factTimeStamp);\n    return Long.toString(dateToStr.getTime());\n  }\n catch (  ParseException e) {\n    LOGGER.error(\"Cannot convert\" + factTimeStamp + \" to Time/Long type value\"+ e.getMessage());\n    return null;\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public char current(){\n  if ((this.pos >= this.begin) && (this.pos < this.end)) {\n    return this.text.charAt(this.pos);\n  }\n  return 65535;\n}\n"}
{"nl": "Create an iterator which starts directly iterating over the storage, thus skipping the memory redo log file", "code": "public SwapReadOnlyIterator(long inSwapStartIndex){\n  _memoryIteratorExhausted=true;\n  _memoryIterator=null;\n  try {\n    _externalIterator=_externalStorage.readOnlyIterator(inSwapStartIndex);\n  }\n catch (  StorageException e) {\n    throw new SwapStorageException(e);\n  }\n}\n"}
{"nl": "Factoring Virtual Display creation", "code": "private void createVirtualDisplay(){\n  Point size=new Point();\n  display.getSize(size);\n  width=size.x;\n  height=size.y;\n  imageReader=ImageReader.newInstance(width,height,PixelFormat.RGBA_8888,2);\n  virtualDisplay=mediaProjection.createVirtualDisplay(SCREENCAP_NAME,width,height,density,VIRTUAL_DISPLAY_FLAGS,imageReader.getSurface(),null,handler);\n  handler.postDelayed(getRunnableThatTakesScreenshot(),2);\n}\n"}
{"nl": "Creates a window with a context of size 3", "code": "public Window(Collection<String> words,int begin,int end){\n  this(words,5,begin,end);\n}\n"}
{"nl": "Warning: all priorities are the negative of their counts in the counter here", "code": "public org.datavec.api.berkeley.PriorityQueue<E> asMinPriorityQueue(){\n  org.datavec.api.berkeley.PriorityQueue<E> pq=new org.datavec.api.berkeley.PriorityQueue<E>(entries.size());\n  for (  Entry<E,Double> entry : entries.entrySet()) {\n    pq.add(entry.getKey(),-entry.getValue());\n  }\n  return pq;\n}\n"}
{"nl": "Remove val x from list of int X", "code": "static public int[] removeIndex(int[] X,int x){\n  int newX[]=new int[X.length - 1];\n  int j=0;\n  for (int i=0; i < X.length; i++)   if (X[i] != x)   newX[j++]=X[i];\n  return newX;\n}\n"}
{"nl": "Shows list of warnings/errors", "code": "@Override public void actionPerformed(AnActionEvent e){\n  ScreenView screenView=mySurface.getCurrentScreenView();\n  if (screenView != null) {\n    LintAnnotationsModel lintModel=screenView.getModel().getLintAnnotationsModel();\n    if (lintModel != null && lintModel.getIssueCount() > 0) {\n      new LintNotificationPanel(screenView,lintModel).show(e);\n    }\n  }\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"Reading from fasta file\");\n}\n"}
{"nl": "test sequence of events for process definition with timer start event", "code": "@Deployment(resources={\"org/activiti/engine/test/bpmn/event/timer/StartTimerEventTest.testDurationStartTimerEvent.bpmn20.xml\"}) public void testTimerStartEventDeployment(){\n  ProcessDefinitionEntity processDefinition=(ProcessDefinitionEntity)repositoryService.createProcessDefinitionQuery().processDefinitionKey(\"startTimerEventExample\").singleResult();\n  ActivitiEntityEvent processDefinitionCreated=ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED,processDefinition);\n  TimerJobEntity timer=(TimerJobEntity)managementService.createTimerJobQuery().singleResult();\n  ActivitiEntityEvent timerCreated=ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED,timer);\n  assertSequence(processDefinitionCreated,timerCreated);\n  listener.clearEventsReceived();\n}\n"}
{"nl": "Creates a new instance of ConceptualGraph", "code": "public ConceptualGraph(){\n}\n"}
{"nl": "Creates new error", "code": "public DuplicateAionObjectException(Throwable cause){\n  super(cause);\n}\n"}
{"nl": "Formats the json content and print it", "code": "@Override public void json(String json){\n  if (TextUtils.isEmpty(json)) {\n    d(\"Empty/Null json content\");\n    return;\n  }\n  try {\n    json=json.trim();\n    if (json.startsWith(\"{\")) {\n      JSONObject jsonObject=new JSONObject(json);\n      String message=jsonObject.toString(JSON_INDENT);\n      d(message);\n      return;\n    }\n    if (json.startsWith(\"[\")) {\n      JSONArray jsonArray=new JSONArray(json);\n      String message=jsonArray.toString(JSON_INDENT);\n      d(message);\n    }\n  }\n catch (  JSONException e) {\n    e(e.getCause().getMessage() + \"\\n\" + json);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetSuggestionsQuery(VkApiClient client,UserActor actor,AdsGetSuggestionsSection section){\n  super(client,\"ads.getSuggestions\",Utils.buildParametrizedType(List.class,TargSuggestions.class));\n  accessToken(actor.getAccessToken());\n  section(section);\n}\n"}
{"nl": "Gets a SerialMessage with the ASSOCIATIONCMD_REMOVE command", "code": "public SerialMessage removeAssociationMessage(int group,int node){\n  logger.debug(\"NODE {}: Creating new message for application command ASSOCIATIONCMD_REMOVE group={}, node={}\",getNode().getNodeId(),group,node);\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Config);\n  ByteArrayOutputStream outputData=new ByteArrayOutputStream();\n  outputData.write(this.getNode().getNodeId());\n  outputData.write(4);\n  outputData.write(getCommandClass().getKey());\n  outputData.write(ASSOCIATIONCMD_REMOVE);\n  outputData.write(group);\n  outputData.write(node);\n  result.setMessagePayload(outputData.toByteArray());\n  return result;\n}\n"}
{"nl": "Checks the given template in the given category", "code": "private void checkCreateTemplate(String category,String name,boolean createWithProject) throws Exception {\n  if (DISABLED) {\n    return;\n  }\n  File templateFile=findTemplate(category,name);\n  assertNotNull(templateFile);\n  if (haveChecked(templateFile,createWithProject)) {\n    return;\n  }\n  if (KNOWN_BROKEN.contains(templateFile.getName())) {\n    return;\n  }\n  markChecked(templateFile,createWithProject);\n  Stopwatch stopwatch=Stopwatch.createStarted();\n  checkTemplate(templateFile,createWithProject);\n  stopwatch.stop();\n  System.out.println(\"Checked \" + templateFile.getName() + \" successfully in \"+ stopwatch.toString());\n}\n"}
{"nl": "Converts to column dictionary integer value", "code": "@Override public int fillConvertedChunkData(int rowId,int columnIndex,int[] row,KeyStructureInfo info){\n  int start=rowId * chunkAttributes.getColumnValueSize();\n  long[] keyArray=info.getKeyGenerator().getKeyArray(dataChunk,start);\n  int[] ordinal=info.getMdkeyQueryDimensionOrdinal();\n  for (int i=0; i < ordinal.length; i++) {\n    row[columnIndex++]=(int)keyArray[ordinal[i]];\n  }\n  return columnIndex;\n}\n"}
{"nl": "Set skip own", "code": "public LikesGetListQuery skipOwn(Boolean value){\n  return unsafeParam(\"skip_own\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetUploadURLQuery(VkApiClient client,UserActor actor,AdsGetUploadURLAdFormat adFormat){\n  super(client,\"ads.getUploadURL\",String.class);\n  accessToken(actor.getAccessToken());\n  adFormat(adFormat);\n}\n"}
{"nl": "/*     ", "code": "@deprecated public AttributedCharacterIterator formatToCharacterIterator(Object obj){\n  StringBuffer toAppendTo=new StringBuffer();\n  FieldPosition pos=new FieldPosition(0);\n  toAppendTo=format(obj,toAppendTo,pos);\n  AttributedString as=new AttributedString(toAppendTo.toString());\n  as.addAttribute(DateFormat.Field.TIME_ZONE,DateFormat.Field.TIME_ZONE);\n  return as.getIterator();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UtilsCheckLinkQuery(VkApiClient client,UserActor actor,String url){\n  super(client,\"utils.checkLink\",LinkChecked.class);\n  accessToken(actor.getAccessToken());\n  url(url);\n}\n"}
{"nl": "Returns true if the list is empty", "code": "public boolean isEmpty(){\n  return this.getEntries().size() == 0;\n}\n"}
{"nl": "Set the value for the supplied key", "code": "public void put(String key,T value){\n  internalMap.put(key,value);\n}\n"}
{"nl": "show an error notation", "code": "public static void showError(Object parentIgnored,String message,long milliseconds){\n  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,milliseconds);\n}\n"}
{"nl": "Inner method to inform all subscribed listeners of the process supervision event", "code": "private void fireProcessSupervisionUpdate(final SupervisionEvent supervisionEvent){\n  Set<SupervisionListener> listeners=processSupervisionListeners.get(supervisionEvent.getEntityId());\n  if (listeners != null) {\n    for (    SupervisionListener listener : listeners) {\n      listener.onSupervisionUpdate(supervisionEvent);\n    }\n  }\n}\n"}
{"nl": "Gets content from metatag", "code": "private String separeMetaTagsContent(String content){\n  String result=Regex.pregMatch(content,Regex.METATAG_CONTENT_PATTERN,1);\n  return htmlDecode(result);\n}\n"}
{"nl": "Determines whether the active step is completed or not", "code": "public boolean isActiveStepCompleted(){\n  return isStepCompleted(activeStep);\n}\n"}
{"nl": "Create the transform instance", "code": "public DeriveColumnsFromTimeTransform build(){\n  return new DeriveColumnsFromTimeTransform(this);\n}\n"}
{"nl": "create output files with data in reverse order", "code": "static public void createOutputFilesReverse(Result[] result,String fileDst,boolean bAppend) throws IOException {\n  BufferedWriter output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileDst,bAppend)));\n  for (int i=(result.length - 1); i >= 0; i--) {\n    output.write(\"Gen\" + result[i].getGenNum() + \":  scale of \"+ result[i].getScale()+ \"  \"+ result[i].getRemark()+ \"\\n\");\n  }\n  output.close();\n  System.err.println();\n  System.err.println(fileDst + \" is generated!\");\n}\n"}
{"nl": "Prepends a schwa to the given item", "code": "private static void prependSchwa(Item item){\n  Item schwa=item.prependItem(null);\n  schwa.getFeatures().setString(\"name\",\"ax\");\n  item.getItemAs(Relation.SYLLABLE_STRUCTURE).prependItem(schwa);\n}\n"}
{"nl": "Utility function to gather snap candidates on the vertical axis", "code": "private static int snapVertical(Collection<ConstraintWidget> widgets,ConstraintWidget widget,ConstraintAnchor anchor,int position,ArrayList<SnapCandidate> snapCandidates){\n  SnapCandidate candidate=new SnapCandidate();\n  ConstraintHandle handle=WidgetInteractionTargets.constraintHandle(anchor);\n  if (handle == null) {\n    return position;\n  }\n  handle.setDrawY(position);\n  SnapPlacement.snapAnchor(widgets,widget,anchor,candidate);\n  if (candidate.target != null) {\n    ConstraintHandle targetHandle=WidgetInteractionTargets.constraintHandle(candidate.target);\n    int ty=candidate.y;\n    if (targetHandle != null) {\n      ty=targetHandle.getDrawY();\n    }\n    position=ty + candidate.margin;\n    snapCandidates.add(candidate);\n  }\n  return position;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsUnbanUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.unbanUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n"}
{"nl": "Writes out a domain specification object", "code": "private void writeDomainSpec(DomainSpec spec,Document document,Element parentElement){\n  if (spec instanceof TopDomain) {\n    Element topDomain=document.createElement(\"top\");\n    parentElement.appendChild(topDomain);\n  }\n else   if (spec instanceof BottomDomain) {\n    Element bottomDomain=document.createElement(\"bottom\");\n    parentElement.appendChild(bottomDomain);\n  }\n else   if (spec instanceof Category) {\n    Element categoryDomain=document.createElement(\"category\");\n    parentElement.appendChild(categoryDomain);\n    Category cat=(Category)spec;\n    categoryDomain.setAttribute(\"value\",cat.getValue());\n  }\n else   throw new RuntimeException(\"Unsupported source or sink specification type\");\n}\n"}
{"nl": "Is showing toasts enabled in the given project", "code": "public static boolean isShowToastEnabled(){\n  InstantRunConfiguration configuration=InstantRunConfiguration.getInstance();\n  return configuration.SHOW_TOAST;\n}\n"}
{"nl": "Release a key", "code": "public void release(int key){\n  controller.keyRelease(key);\n}\n"}
{"nl": "Verify if the item is enchantble and/or socketble", "code": "public static boolean isUpgradeble(Item item){\n  if (item.getItemTemplate().isNoEnchant()) {\n    return false;\n  }\n  if (item.getItemTemplate().isWeapon()) {\n    return true;\n  }\n  if (item.getItemTemplate().getCategory() == ItemCategory.STIGMA) {\n    return false;\n  }\n  if (item.getItemTemplate().isArmor()) {\n    int at=item.getItemTemplate().getItemSlot();\n    if (at == 1 || at == 2 || at == 8 || at == 16 || at == 32 || at == 2048 || at == 4096 || at == 131072 || at == 262144) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "store an element", "code": "public IObjectInfo<T> add(T subject){\n  lock.lock();\n  try {\n    return store_impl(subject);\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "resets the circle-colors array and creates a new one", "code": "public void resetCircleColors(){\n  mCircleColors=new ArrayList<>();\n}\n"}
{"nl": "Unlocks the given lock on the key", "code": "public void unlock(Object key){\n  String uid=String.valueOf(key);\n  Transaction tr=lockedUIDHashMap.get(uid);\n  if (tr == null) {\n    return;\n  }\n  try {\n    tr.commit();\n  }\n catch (  Exception e) {\n    logger.warn(\"Failed to commit transaction and unlocking the object, ignoring\",e);\n  }\n finally {\n    lockedUIDHashMap.remove(uid);\n  }\n}\n"}
{"nl": "Returns a string representation of number rounded to given number of significant figures", "code": "public static String roundToString(double value,int significantFigures){\n  MathContext mc=new MathContext(significantFigures);\n  BigDecimal num=new BigDecimal(value);\n  return num.round(mc).toPlainString();\n}\n"}
{"nl": "write attributes to xtw (except blacklisted)", "code": "public static void writeCustomAttributes(Collection<List<ExtensionAttribute>> attributes,XMLStreamWriter xtw,Map<String,String> namespaceMap,List<ExtensionAttribute>... blackLists) throws XMLStreamException {\n  for (  List<ExtensionAttribute> attributeList : attributes) {\n    if (attributeList != null && !attributeList.isEmpty()) {\n      for (      ExtensionAttribute attribute : attributeList) {\n        if (!isBlacklisted(attribute,blackLists)) {\n          if (attribute.getNamespacePrefix() == null) {\n            if (attribute.getNamespace() == null)             xtw.writeAttribute(attribute.getName(),attribute.getValue());\n else {\n              xtw.writeAttribute(attribute.getNamespace(),attribute.getName(),attribute.getValue());\n            }\n          }\n else {\n            if (!namespaceMap.containsKey(attribute.getNamespacePrefix())) {\n              namespaceMap.put(attribute.getNamespacePrefix(),attribute.getNamespace());\n              xtw.writeNamespace(attribute.getNamespacePrefix(),attribute.getNamespace());\n            }\n            xtw.writeAttribute(attribute.getNamespacePrefix(),attribute.getNamespace(),attribute.getName(),attribute.getValue());\n          }\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsApproveRequestQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.approveRequest\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n"}
{"nl": "Returns true if the device state is overridden", "code": "public final boolean isOverridingDeviceState(){\n  return (myOverride & CFG_DEVICE_STATE) != 0;\n}\n"}
{"nl": "md5 function", "code": "public static String md5(byte[] source) throws NoSuchAlgorithmException {\n  char hexDigits[]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};\n  java.security.MessageDigest md=java.security.MessageDigest.getInstance(\"MD5\");\n  md.update(source);\n  byte tmp[]=md.digest();\n  char str[]=new char[32];\n  int k=0;\n  for (int i=0; i < 16; i++) {\n    str[k++]=hexDigits[tmp[i] >>> 4 & 0xf];\n    str[k++]=hexDigits[tmp[i] & 0xf];\n  }\n  return new String(str);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioEditAlbumQuery(VkApiClient client,UserActor actor,int albumId,String title){\n  super(client,\"audio.editAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n  title(title);\n}\n"}
{"nl": "used for update press effect when finger move", "code": "private void updatePressPosition(int buttonIndex,RectF rectF){\n  if (buttonIndex < 0) {\n    return;\n  }\n  if (isPointInRectF(pressPointF,rectF)) {\n    if (!pressInButton) {\n      updatePressState(buttonIndex,true);\n      pressInButton=true;\n    }\n  }\n else {\n    if (pressInButton) {\n      updatePressState(buttonIndex,false);\n      pressInButton=false;\n    }\n  }\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAvailablePermitQuestion && ((AirMapAvailablePermitQuestion)o).getId().equals(getId());\n}\n"}
{"nl": "can't load or receive any patch!", "code": "public static boolean isTinkerEnableWithSharedPreferences(Context context){\n  SharedPreferences sp=context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG,Context.MODE_MULTI_PROCESS);\n  return sp.getBoolean(ShareConstants.TINKER_ENABLE_CONFIG,true);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected boolean matchNodesCanHaveValues(){\n  return false;\n}\n"}
{"nl": "Creates the channel selection object", "code": "private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){\n  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());\n  FilterFactory ff=CommonFactoryFinder.getFilterFactory();\n  Map<String,Expression> options=contrastEnhancement.getOptions();\n  options.put(\"algorithm\",ff.literal(\"StretchToMinimumMaximum\"));\n  options.put(\"minValue\",ff.literal(\"1\"));\n  options.put(\"maxValue\",ff.literal(\"5\"));\n  SelectedChannelType channelType=styleFactory.createSelectedChannelType(\"channel name\",contrastEnhancement);\n  SelectedChannelType[] channels=new SelectedChannelType[3];\n  channels[0]=channelType;\n  channels[1]=channelType;\n  channels[2]=channelType;\n  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);\n  return channelSelection;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetAlbumsQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAlbums\",GetAlbumsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "convert a string to a constant schema", "code": "public String stringToConstant(String string){\n  int length=string.length();\n  for (int i=0; i < length; i++) {\n    char character=string.charAt(i);\n    if (character != \"_\".charAt(0) && Character.isUpperCase(character) && i != 0) {\n      String firstPart=string.substring(0,i);\n      String secondPart=string.substring(i,length);\n      String newFirstPart=firstPart + \"_\";\n      string=newFirstPart + secondPart;\n      i=newFirstPart.length();\n      length++;\n    }\n  }\n  return string;\n}\n"}
{"nl": "Returns true if the bytecode is a local store", "code": "public static boolean isLocalStore(int bc){\nswitch (bc) {\ncase ByteCode.ISTORE:\ncase ByteCode.FSTORE:\ncase ByteCode.ASTORE:\ncase ByteCode.LSTORE:\ncase ByteCode.DSTORE:\ncase ByteCode.ISTORE_0:\ncase ByteCode.ISTORE_1:\ncase ByteCode.ISTORE_2:\ncase ByteCode.ISTORE_3:\ncase ByteCode.FSTORE_0:\ncase ByteCode.FSTORE_1:\ncase ByteCode.FSTORE_2:\ncase ByteCode.FSTORE_3:\ncase ByteCode.ASTORE_0:\ncase ByteCode.ASTORE_1:\ncase ByteCode.ASTORE_2:\ncase ByteCode.ASTORE_3:\ncase ByteCode.LSTORE_0:\ncase ByteCode.LSTORE_1:\ncase ByteCode.LSTORE_2:\ncase ByteCode.LSTORE_3:\ncase ByteCode.DSTORE_0:\ncase ByteCode.DSTORE_1:\ncase ByteCode.DSTORE_2:\ncase ByteCode.DSTORE_3:\n    return true;\ndefault :\n  return false;\n}\n}\n"}
{"nl": "Track minimum and maximum observations", "code": "private void trackRange(final long value){\n  if (value < minValue) {\n    minValue=value;\n  }\n  if (value > maxValue) {\n    maxValue=value;\n  }\n}\n"}
{"nl": "signals all listener that we have removed a repository", "code": "public void repositoryModified(ISVNRepositoryLocation repository){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.repositoryModified(repository);\n  }\n}\n"}
{"nl": "Load the directed graph from the given file", "code": "public DirectedGraph load(String fileName) throws IOException, MaryConfigurationException {\n  InputStream is=new FileInputStream(fileName);\n  try {\n    return load(is);\n  }\n  finally {\n    is.close();\n  }\n}\n"}
{"nl": "get the algined sequence in the line Possible formats: XXXXX 5 XXXX  (5 leading gaps) 5 XXXX 3 (3 trailing gaps)", "code": "private String parseAlignedSequence(String aLine){\n  String[] tokens=aLine.split(\"\\\\s+\");\nswitch (tokens.length) {\ncase 3:\n{\n      final StringBuilder buf=new StringBuilder();\n      int gaps=Integer.parseInt(tokens[0]);\n      while (--gaps >= 0)       buf.append(\"-\");\n      buf.append(tokens[1]);\n      gaps=Integer.parseInt(tokens[2]);\n      while (--gaps >= 0)       buf.append(\"-\");\n      return buf.toString();\n    }\ncase 2:\n{\n    final StringBuilder buf=new StringBuilder();\n    int gaps=Integer.parseInt(tokens[0]);\n    while (--gaps >= 0)     buf.append(\"-\");\n    buf.append(tokens[1]);\n    return buf.toString();\n  }\ncase 1:\nreturn tokens[0];\ndefault :\nreturn aLine.replaceAll(\"\\\\s+\",\"\");\n}\n}\n"}
{"nl": "Called whenever it's time to stop monitoring changes on the loaders data source", "code": "protected void onUnregisterObserver(){\n}\n"}
{"nl": "Set guid", "code": "public PhotosCreateCommentQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n"}
{"nl": "Not constructable", "code": "private USEnglish(){\n}\n"}
{"nl": "Below method will be used to show statistic log as table", "code": "public void logStatisticsAsTableDriver(){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedAddBanQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.addBan\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "this method turn off animation and reset animation duration to 0", "code": "public StyleImageView disableAnimation(){\n  styler.disableAnimation();\n  return this;\n}\n"}
{"nl": "Logs a message to the console or logcat", "code": "public static void log(Object message,Exception exception){\n  Gdx.app.log(TAG,String.valueOf(message),exception);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsRemoveUserQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.removeUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n"}
{"nl": "This method will stop the gathering task", "code": "public static void stopGatherableTask(Player player,boolean save){\n  Future<?> gatherableTask=player.getController().getTask(TaskId.GATHERABLE);\n  if (gatherableTask != null) {\n    if (save) {\n      long delay=player.getGatherableTimer();\n      if (delay < 0) {\n        delay=0;\n      }\n      player.setGatherableTimer(delay);\n    }\n    player.getController().cancelTask(TaskId.GATHERABLE);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetRegionsQuery(VkApiClient client,UserActor actor,int countryId){\n  super(client,\"database.getRegions\",GetRegionsResponse.class);\n  accessToken(actor.getAccessToken());\n  countryId(countryId);\n}\n"}
{"nl": "Execute storage function", "code": "public ExecuteStorageFunctionQuery storageFunction(Actor actor,String storageFunctionName){\n  return new ExecuteStorageFunctionQuery(getClient(),actor,storageFunctionName);\n}\n"}
{"nl": "Load all the destination contained in a namespace", "code": "public void loadNamespaceDestinations(ServiceUnitId suName) throws Exception {\n  LOG.info(\"Loading all topics on service unit: {}\",suName);\n  NamespaceName nsName=suName.getNamespaceObject();\n  List<CompletableFuture<Topic>> persistentTopics=Lists.newArrayList();\n  long topicLoadStart=System.nanoTime();\n  for (  String topic : getNamespaceService().getListOfDestinations(nsName.getProperty(),nsName.getCluster(),nsName.getLocalName())) {\n    try {\n      DestinationName dn=DestinationName.get(topic);\n      if (suName.includes(dn)) {\n        CompletableFuture<Topic> future=brokerService.getTopic(topic);\n        if (future != null) {\n          persistentTopics.add(future);\n        }\n      }\n    }\n catch (    Throwable t) {\n      LOG.warn(\"Failed to preload topic {}\",topic,t);\n    }\n  }\n  if (!persistentTopics.isEmpty()) {\n    FutureUtil.waitForAll(persistentTopics).thenRun(null);\n  }\n}\n"}
{"nl": "Stop watch and reset retries count", "code": "@Override public void stopWatch(){\n  super.stopWatch();\n  _retries=0;\n}\n"}
{"nl": "Returns true to handles painting the component", "code": "public boolean handlesPainting(){\n  return false;\n}\n"}
{"nl": "split the packet base on the programmer's rule", "code": "public static String[] splitProtocol(String packet){\n  String _partitioningPacket[]=packet.split(Settings.sReceiverSplitProtocolToken);\n  for (int i=0; i < _partitioningPacket.length - 1; i++) {\n    _partitioningPacket[i]=_partitioningPacket[i + 1];\n  }\n  _partitioningPacket[_partitioningPacket.length - 1]=null;\n  return _partitioningPacket;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  final ChartColorManager chartColorManager=((Director)getDir()).getDocument().getChartColorManager();\n  np.matchIgnoreCase(\"set color=\");\n  Color color=np.getColor();\n  np.matchIgnoreCase(\"attribute=\");\n  String attribute=np.getLabelRespectCase();\n  np.matchIgnoreCase(\";\");\n  np.matchIgnoreCase(\"state=\");\n  String state=np.getLabelRespectCase();\n  if (attribute != null && state != null) {\n    chartColorManager.setAttributeStateColor(attribute,state,color);\n    ((Director)getDir()).getDocument().setDirty(true);\n  }\n}\n"}
{"nl": "Utility function to draw in (x, y) one of the Polygon used for the arrows", "code": "public static void drawArrow(Graphics2D g,Polygon arrow,int x,int y){\n  arrow.translate(x,y);\n  g.draw(arrow);\n  g.fill(arrow);\n  arrow.translate(-x,-y);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static void permute(String source,boolean skipZeros,Set<String> output){\n  if ((source.length() <= 2) && (UTF16.countCodePoint(source) <= 1)) {\n    output.add(source);\n    return;\n  }\n  Set<String> subpermute=new HashSet();\n  int cp;\n  String chStr;\n  for (int i=0; i < source.length(); i+=UTF16.getCharCount(cp)) {\n    cp=UTF16.charAt(source,i);\n    if ((!skipZeros) || (i == 0) || (UCharacter.getCombiningClass(cp) != 0)) {\n      subpermute.clear();\n      permute(source.substring(0,i) + source.substring(i + UTF16.getCharCount(cp)),skipZeros,subpermute);\n      chStr=UTF16.valueOf(source,i);\n      for (      String s : subpermute) {\n        String piece=chStr + s;\n        output.add(piece);\n      }\n    }\n  }\n}\n"}
{"nl": "Builds new ClassPathResource object", "code": "public ClassPathResource(String resourceName){\n  if (resourceName == null)   throw new IllegalStateException(\"Resource name can't be null\");\n  this.resourceName=resourceName;\n}\n"}
{"nl": "Set the empty view text color", "code": "private void inflateEmptyTextColor(){\n  if (mEmptyTextColor != R.color.text_empty_color) {\n    if (mEmptyLayout != R.layout.layout_empty) {\n      throw new RuntimeException(\"Cannot assign the emptyTextColor attribute. \" + \"You already overridden the entire empty view, no need to specify \" + \"custom color or custom text message\");\n    }\n else {\n      textEmpty.setTextColor(ColorUtil.getColorWrapper(mContext,mEmptyTextColor));\n    }\n  }\n}\n"}
{"nl": "puts value for given index", "code": "@Override public ILongPutter put(long index,long value){\n  if (index < limit()) {\n    index<<=3;\n    final ByteBuffer buf=buffers[getWhichBuffer(index)];\n    int indexBuffer=getIndexInBuffer(index);\n    buf.put(indexBuffer++,(byte)(value >> 56));\n    buf.put(indexBuffer++,(byte)(value >> 48));\n    buf.put(indexBuffer++,(byte)(value >> 40));\n    buf.put(indexBuffer++,(byte)(value >> 32));\n    buf.put(indexBuffer++,(byte)(value >> 24));\n    buf.put(indexBuffer++,(byte)(value >> 16));\n    buf.put(indexBuffer++,(byte)(value >> 8));\n    buf.put(indexBuffer,(byte)(value));\n  }\n else   throw new ArrayIndexOutOfBoundsException(\"\" + index);\n  return this;\n}\n"}
{"nl": "used for MODE_CALENDAR legal values of month: 1-12", "code": "@Override public void refresh0(int year,int month){\n  if (mode == Constant.MODE_CALENDAR) {\n    selectedYear=year;\n    selectedMonth=month;\n    selectedIndex=-1;\n    calendar.set(Calendar.YEAR,selectedYear);\n    calendar.set(Calendar.MONTH,selectedMonth - 1);\n    calendar.set(Calendar.DAY_OF_MONTH,1);\n    initial();\n    invalidate();\n    if (onRefreshListener != null) {\n      onRefreshListener.onRefresh();\n    }\n  }\n}\n"}
{"nl": "set the value type if needed, returns true if the type is finally set", "code": "boolean updateValueType(Object value){\n  if (_valueTypeFinallySet || value == null)   return _valueTypeFinallySet;\n  Class<?> type=value.getClass();\n  if (_valueType == null) {\nsynchronized (this) {\n      if (_valueType == null)       _valueType=type;\n    }\n  }\n else   if (_valueType != type && !_valueType.isAssignableFrom(type)) {\nsynchronized (this) {\n      _valueType=TypeDataIndex.getCommonSuperType(type,_valueType);\n    }\n  }\n  if (_valueType == Object.class)   _valueTypeFinallySet=true;\n  return _valueTypeFinallySet;\n}\n"}
{"nl": "Fuzzy testing of the generate alt queries where we try random things to see if we can introduce an eception", "code": "public void testGenerateAltQueriesFuzz(){\n  Random rand=new Random();\n  SearchcodeLib scl=new SearchcodeLib();\n  for (int i=0; i < 10; i++) {\n    StringBuilder bf=new StringBuilder();\n    for (int j=0; j < 5; j++) {\n      if (j % 2 == 0) {\n        bf.append(RandomStringUtils.randomAscii(rand.nextInt(10) + 1) + \" \");\n      }\n else {\n        bf.append(RandomStringUtils.randomAlphabetic(rand.nextInt(10) + 1) + \" \");\n      }\n      Singleton.getSpellingCorrector().putWord(RandomStringUtils.randomAlphabetic(rand.nextInt(10) + 1));\nswitch (rand.nextInt(5)) {\ncase 1:\n        bf.append(\" AND \");\n      break;\ncase 2:\n    bf.append(\" OR \");\n  break;\ncase 3:\nbf.append(\" NOT \");\nbreak;\ncase 4:\nbf.append(RandomStringUtils.randomAlphabetic(rand.nextInt(10) + 1));\nbreak;\ndefault :\nbreak;\n}\n}\nscl.generateAltQueries(bf.toString());\n}\n}\n"}
{"nl": "field name to method name", "code": "public static String fieldNameToMethodName(String methodPrefix,String fieldName){\n  return fieldNameToMethodName(methodPrefix,fieldName,false);\n}\n"}
{"nl": "Recursively draw all components  by finding the root of component then find all its children and grandchildren (BFS)", "code": "private void drawAllComponents(Graphics2D gc,NlComponent component,@Nullable ScreenView blueprintView){\n  Color color=gc.getColor();\n  if (myComponent != null && component.getId() != null && component.getId().equals(myComponent.getId())) {\n    gc.setColor(myColorSet.getSelectedFrames());\n  }\n  drawComponent(gc,component,blueprintView);\n  gc.setColor(color);\n  int childCount=component.getChildCount();\n  for (int i=0; i < childCount; i++) {\n    drawAllComponents(gc,component.getChild(i),blueprintView);\n  }\n}\n"}
{"nl": "Initialize data structures containing SQL data", "code": "public SQLModel(Connection connection){\n  this.connection=connection;\n  this.tables=new ArrayList<>();\n  ResultSet results=null;\n  try {\n    results=connection.getMetaData().getTables(null,null,null,new String[]{\"TABLE\"});\n    while (results.next()) {\n      String tableName=results.getString(\"TABLE_NAME\");\n      tables.add(new SQLTable(tableName,connection));\n    }\n  }\n catch (  SQLException e) {\n    throw new RuntimeException(e);\n  }\n finally {\n    closeQuietly(results);\n  }\n}\n"}
{"nl": "This method will move a player to their bind location", "code": "public static void moveToBindLocation(Player player,boolean useTeleport){\n  float x, y, z;\n  int worldId;\n  byte h=0;\n  if (player.getBindPoint() != null) {\n    BindPointPosition bplist=player.getBindPoint();\n    worldId=bplist.getMapId();\n    x=bplist.getX();\n    y=bplist.getY();\n    z=bplist.getZ();\n    h=bplist.getHeading();\n  }\n else {\n    PlayerInitialData.LocationData locationData=DataManager.PLAYER_INITIAL_DATA.getSpawnLocation(player.getRace());\n    worldId=locationData.getMapId();\n    x=locationData.getX();\n    y=locationData.getY();\n    z=locationData.getZ();\n  }\n  InstanceService.onLeaveInstance(player);\n  if (useTeleport) {\n    teleportTo(player,worldId,x,y,z,h);\n  }\n else {\n    World.getInstance().setPosition(player,worldId,1,x,y,z,h);\n  }\n}\n"}
{"nl": "Construct a State with null attributes", "code": "public State(){\n}\n"}
{"nl": "Try to find snapping candidates for the given anchor", "code": "public static void snapAnchor(Collection<ConstraintWidget> widgets,ConstraintWidget widget,ConstraintAnchor anchor,SnapCandidate candidate){\n  if (widget.getParent() != null) {\n    if (!anchor.isVerticalAnchor()) {\n      checkHorizontalParentMarginSnap(anchor,ConstraintAnchor.Type.RIGHT,-DEFAULT_MARGIN,candidate);\n      checkHorizontalParentMarginSnap(anchor,ConstraintAnchor.Type.LEFT,DEFAULT_MARGIN,candidate);\n    }\n else {\n      checkVerticalParentMarginSnap(anchor,ConstraintAnchor.Type.BOTTOM,-DEFAULT_MARGIN,candidate);\n      checkVerticalParentMarginSnap(anchor,ConstraintAnchor.Type.TOP,DEFAULT_MARGIN,candidate);\n    }\n  }\n  for (  ConstraintWidget w : widgets) {\n    if (w == widget) {\n      continue;\n    }\n    ArrayList<ConstraintAnchor> anchorsTarget=w.getAnchors();\n    for (    ConstraintAnchor at : anchorsTarget) {\n      snapCheck(anchor,at,candidate,CONNECTION_SLOPE);\n    }\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set drawer=\");\n  String drawerName=np.getWordMatchesIgnoringCase(Basic.toString(ViewerBase.DiagramType.values(),\" \"));\n  np.matchIgnoreCase(\";\");\n  ViewerBase viewer=(ViewerBase)getViewer();\n  viewer.setDrawerType(drawerName);\n  viewer.updateTree();\n}\n"}
{"nl": "reads an archived string", "code": "public String readString() throws IOException {\n  int size=readInt();\n  if (Math.abs(size) > 100000000)   throw new IOException(\"Unreasonable string length: \" + Math.abs(size));\n  byte[] bytes=new byte[Math.abs(size)];\n  int got=in.read(bytes,0,Math.abs(size));\n  if (got != Math.abs(size))   throw new IOException(\"Bytes read: \" + got + \", expected: \"+ Math.abs(size));\n  if (size < 0) {\n    try {\n      return compressor.inflateByteArray2String(-size,bytes);\n    }\n catch (    DataFormatException e) {\n      throw new IOException(e.getMessage());\n    }\n  }\n else {\n    return Compressor.convertUncompressedByteArray2String(size,bytes);\n  }\n}\n"}
{"nl": "Check if can evolve this pokemon", "code": "public boolean canEvolve(){\n  return !EvolutionInfo.isFullyEvolved(getPokemonId()) && (getCandy() >= getCandiesToEvolve());\n}\n"}
{"nl": "Called after object was placed into world", "code": "public void onAfterSpawn(){\n}\n"}
{"nl": "Tests setting a parent with api = projectMinApi", "code": "public void testMinApiParent(){\n  doTestForParentApi(\"android:Theme.Holo\",\"apiParentTestAfter3\");\n}\n"}
{"nl": "Check if GameServer is Online", "code": "public final boolean isOnline(){\n  return gscHandler != null && gscHandler.getState() == State.AUTHED;\n}\n"}
{"nl": "Remove a fence from the store based on its id", "code": "public void removeFence(@NonNull String id){\n  Set<String> fenceIdSet=mPrefs.getStringSet(mPrefix + FENCE_ID_SET_KEY,null);\n  if ((fenceIdSet != null) && fenceIdSet.contains(id)) {\n    SharedPreferences.Editor editor=mPrefs.edit();\n    editor.remove(mPrefix + id);\n    fenceIdSet.remove(id);\n    editor.putStringSet(FENCE_ID_SET_KEY,fenceIdSet);\n    editor.apply();\n  }\n}\n"}
{"nl": "Below method will be used to set the segments details if segments are not added in the configuration", "code": "private void addSegmentsIfEmpty(JobContext job,AbsoluteTableIdentifier absoluteTableIdentifier) throws IOException {\n  if (getSegmentsFromConfiguration(job).length == 0) {\n    SegmentStatusManager.ValidAndInvalidSegmentsInfo validAndInvalidSegments=new SegmentStatusManager(absoluteTableIdentifier).getValidAndInvalidSegments();\n    setSegmentsToAccess(job.getConfiguration(),validAndInvalidSegments.getValidSegments());\n  }\n}\n"}
{"nl": "Creates a new instance of MapleQuestStatus", "code": "public MapleQuestStatus(final MapleQuest quest,final int status){\n  this.quest=quest;\n  this.setStatus((byte)status);\n  this.completionTime=System.currentTimeMillis();\n  if (status == 1) {\n    if (!quest.getRelevantMobs().isEmpty()) {\n      registerMobs();\n    }\n  }\n}\n"}
{"nl": "Mouse press handling", "code": "public void mousePressed(MouseEvent e){\n  mIsControlDown=e.isControlDown();\n  mIsShiftDown=e.isShiftDown();\n  mIsAltDown=e.isAltDown();\n  float x=mViewTransform.getAndroidFX(e.getX());\n  float y=mViewTransform.getAndroidFY(e.getY());\n  mousePressed(x,y,SwingUtilities.isRightMouseButton(e));\n}\n"}
{"nl": "Returns true if this highlight object is equal to the other (compares xIndex and dataSetIndex)", "code": "public boolean equalTo(Highlight h){\n  if (h == null)   return false;\n else {\n    if (this.mDataSetIndex == h.mDataSetIndex && this.mX == h.mX && this.mStackIndex == h.mStackIndex && this.mDataIndex == h.mDataIndex)     return true;\n else     return false;\n  }\n}\n"}
{"nl": "Is load footer visible?", "code": "protected final boolean isLoadFooterVisible(){\n  return mLoadFooter == getChildAt(getChildCount() - 1);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetAlbumsQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.getAlbums\",GetAlbumsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Determines if the given phone is a vowel", "code": "static protected boolean isVowel(String phone){\n  return VOWELS.indexOf(phone.substring(0,1)) != -1;\n}\n"}
{"nl": "Does not inject adguard javascript to page", "code": "public boolean isJsInject(){\n  return isOptionEnabled(UrlFilterRuleOption.JS_INJECT);\n}\n"}
{"nl": "This method allows to remove cached authentication cookie for a given URL", "code": "public void removeCookie(String url){\n  cookieJar.remove(url);\n}\n"}
{"nl": "Creates new form NGramCorrelationForm", "code": "public NGramCorrelationForm(){\n  initComponents();\n}\n"}
{"nl": "put the value for a cell", "code": "public V put(R rowKey,C columnKey,V value){\n  if (rowKey != null && columnKey != null) {\n    Map<C,V> row=row(rowKey);\n    if (row == null) {\n      row=new HashMap<>();\n      dataMap.put(rowKey,row);\n    }\n    V oldValue=row.get(columnKey);\n    row.put(columnKey,value);\n    if (oldValue != null)     return oldValue;\n else     return value;\n  }\n  return null;\n}\n"}
{"nl": "Change space mode to backup", "code": "protected void moveToBackup(){\n  beforeSpaceModeChange(SpaceMode.BACKUP);\n  setSpaceMode(SpaceMode.BACKUP);\n  afterSpaceModeChange(SpaceMode.BACKUP);\n}\n"}
{"nl": "This method will remove legion from all legion members online after a legion has been disbanded", "code": "private void updateAfterDisbandLegion(Legion legion){\n  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {\n    PacketSendUtility.broadcastPacket(onlineLegionMember,new SM_LEGION_UPDATE_TITLE(onlineLegionMember.getObjectId(),0,\"\",0),true);\n    PacketSendUtility.sendPacket(onlineLegionMember,new SM_LEGION_LEAVE_MEMBER(1300302,0,legion.getLegionName()));\n    onlineLegionMember.resetLegionMember();\n  }\n}\n"}
{"nl": "return true if we can save iterator creation and get a single entry", "code": "public boolean optimizeScanForSingleObject(){\n  return true;\n}\n"}
{"nl": "Instantiate with the given file as a uri", "code": "public InputStreamInputSplit(InputStream is,File path){\n  this.is=is;\n  this.location=new URI[]{path.toURI()};\n}\n"}
{"nl": "coverts int to string with precision to two places", "code": "@SuppressLint(\"DefaultLocale\") public static String doublePrecision(int time){\n  return String.format(\"%02d\",time);\n}\n"}
{"nl": "Is the input line covered by any rectangle?", "code": "private boolean isContainedInRectangles(SegmentNode pnew){\n  SegmentNode p=header[GeometricManager.MANY_TO_MANY];\n  while (p != null) {\n    if (pnew.I1 >= p.I1 && pnew.I2 >= p.I2) {\n      if ((pnew.I1 + pnew.L) <= (p.I1 + p.L) && (pnew.I2 + pnew.L) <= (p.I2 + ((RectangleNode)p).L_prime))       return true;\n    }\n    p=p.next;\n  }\n  return false;\n}\n"}
{"nl": "reads the named classification block", "code": "public int read(long position,InputReader reader,int classId) throws IOException {\n  reader.seek(position);\n  map2Weight.clear();\n  final int numberOfClasses=reader.readInt();\n  for (int i=0; i < numberOfClasses; i++) {\n    final int currentId=reader.readInt();\n    final int weight=reader.readInt();\n    final int count=reader.readInt();\n    reader.skipBytes(count * 8);\n    if (currentId == classId) {\n      map2Weight.put(currentId,weight);\n      break;\n    }\n  }\n  return map2Weight.size();\n}\n"}
{"nl": "A resource has been copied", "code": "public void resourceCopied(ISVNRemoteResource source,ISVNRemoteFolder destination){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceCopied(source,destination);\n  }\n}\n"}
{"nl": "Item name", "code": "protected MarketAddQuery name(String value){\n  return unsafeParam(\"name\",value);\n}\n"}
{"nl": "Post a comment from the community", "code": "public PhotosCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n"}
{"nl": "Identifier of an items owner community", "code": "protected MarketSearchQueryWithExtended ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "Constructs new instance of <tt>SM_AUTH_GG</tt> packet", "code": "public SM_AUTH_GG(int sessionId){\n  super(0x0b);\n  this.sessionId=sessionId;\n}\n"}
{"nl": "write int, little endian", "code": "public void writeInt(int a) throws IOException {\n  outs.write((byte)(a));\n  outs.write((byte)(a >> 8));\n  outs.write((byte)(a >> 16));\n  outs.write((byte)(a >> 24));\n}\n"}
{"nl": "Requires the API level to be the given API level", "code": "@NotNull public NlConfigurationToolbarFixture requireApi(int apiLevel){\n  Wait.seconds(30).expecting(\"configuration to be updated\").until(null);\n  return this;\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getDataType().equalsIgnoreCase(\"KEGG\");\n}\n"}
{"nl": "Send the source asset to the server and start the extraction process", "code": "public SourceAsset sendSourceAsset(SourceAsset sourceAsset){\n  return authenticatedRestTemplate.postForObject(getBasePathForEntity(),sourceAsset,SourceAsset.class);\n}\n"}
{"nl": "Press mouse mask", "code": "public void press(int mask){\n  controller.mousePress(mask);\n}\n"}
{"nl": "Creates a sliding window from text", "code": "public static Window windowForWordInPosition(int windowSize,int wordPos,List<String> sentence){\n  List<String> window=new ArrayList<>();\n  List<String> onlyTokens=new ArrayList<>();\n  int contextSize=(int)Math.floor((windowSize - 1) / 2);\n  for (int i=wordPos - contextSize; i <= wordPos + contextSize; i++) {\n    if (i < 0)     window.add(\"<s>\");\n else     if (i >= sentence.size())     window.add(\"</s>\");\n else {\n      onlyTokens.add(sentence.get(i));\n      window.add(sentence.get(i));\n    }\n  }\n  String wholeSentence=StringUtils.join(sentence);\n  String window2=StringUtils.join(onlyTokens);\n  int begin=wholeSentence.indexOf(window2);\n  int end=begin + window2.length();\n  return new Window(window,begin,end);\n}\n"}
{"nl": "Returns true iff both arguments are NaN or neither is NaN and they are equal", "code": "public static boolean equals(double x,double y){\n  return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n}\n"}
{"nl": "Used to open the menu drawer", "code": "private void openMenuDrawer(){\n  if (mDrawerLayout != null) {\n    mDrawerLayout.openDrawer(MENU_DRAWER_GRAVITY);\n  }\n}\n"}
{"nl": "List SG ACL's", "code": "public List<String> listACL(int from,int to){\n  AmazonEC2 client=null;\n  try {\n    client=getEc2Client();\n    List<String> ipPermissions=new ArrayList<String>();\n    if (this.insEnvIdentity.isClassic()) {\n      DescribeSecurityGroupsRequest req=new DescribeSecurityGroupsRequest().withGroupNames(Arrays.asList(config.getACLGroupName()));\n      DescribeSecurityGroupsResult result=client.describeSecurityGroups(req);\n      for (      SecurityGroup group : result.getSecurityGroups())       for (      IpPermission perm : group.getIpPermissions())       if (perm.getFromPort() == from && perm.getToPort() == to)       ipPermissions.addAll(perm.getIpRanges());\n      logger.info(\"Fetch current permissions for classic env of running instance\");\n    }\n else {\n      Filter nameFilter=new Filter().withName(\"group-name\").withValues(config.getACLGroupName());\n      String vpcid=config.getVpcId();\n      if (vpcid == null || vpcid.isEmpty()) {\n        throw new IllegalStateException(\"vpcid is null even though instance is running in vpc.\");\n      }\n      Filter vpcFilter=new Filter().withName(\"vpc-id\").withValues(vpcid);\n      DescribeSecurityGroupsRequest req=new DescribeSecurityGroupsRequest().withFilters(nameFilter,vpcFilter);\n      DescribeSecurityGroupsResult result=client.describeSecurityGroups(req);\n      for (      SecurityGroup group : result.getSecurityGroups())       for (      IpPermission perm : group.getIpPermissions())       if (perm.getFromPort() == from && perm.getToPort() == to)       ipPermissions.addAll(perm.getIpRanges());\n      logger.info(\"Fetch current permissions for vpc env of running instance\");\n    }\n    return ipPermissions;\n  }\n  finally {\n    if (client != null)     client.shutdown();\n  }\n}\n"}
{"nl": "Check if the bit is set to '1'", "code": "public static boolean isBitOn(int value,int bitNumber){\n  if (bitNumber <= 0 || bitNumber > 8) {\n    throw new IllegalArgumentException(\"Only bits 1 through 8 are supported\");\n  }\n  return ((value & MASKS[bitNumber - 1]) == MASKS[bitNumber - 1]);\n}\n"}
{"nl": "Create a precompiled join cost file reader from the given file", "code": "public PrecompiledJoinCostReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName,null,null,0);\n}\n"}
{"nl": "validate an actual value against this DV", "code": "@Override public void validate(ValidationContext context,ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {\n  if (context == null)   context=fEmptyContext;\n  if (context.needFacetChecking() && (fFacetsDefined != 0 && fFacetsDefined != FACET_WHITESPACE)) {\n    checkFacets(validatedInfo);\n  }\n  if (context.needExtraChecking()) {\n    checkExtraRules(context,validatedInfo);\n  }\n}\n"}
{"nl": "in place Reverses the order of the widgets", "code": "private static void reverse(ConstraintWidget[] widgets){\n  for (int i=0; i < widgets.length / 2; i++) {\n    ConstraintWidget widget=widgets[i];\n    widgets[i]=widgets[widgets.length - 1 - i];\n    widgets[widgets.length - 1 - i]=widget;\n  }\n}\n"}
{"nl": "Show an Alert Dialog with two buttons", "code": "public static AlertDialog showTwoButtonsDialog(final Activity activity,final String title,final String text,final String negativeButtonText,final DialogInterface.OnClickListener leftButtonListener,final String positiveButtonText,final DialogInterface.OnClickListener positiveButtonListener){\n  if (activity == null || activity.isFinishing()) {\n    return null;\n  }\n  return new AlertDialog.Builder(activity).setTitle(title).setMessage(text).setPositiveButton(negativeButtonText,leftButtonListener).setNegativeButton(positiveButtonText,positiveButtonListener).show();\n}\n"}
{"nl": "Collections ids to add  item to", "code": "protected MarketAddToAlbumQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "this function increase the number about defeat; (+1)", "code": "public void increaseDefeat(){\n  defeat++;\n}\n"}
{"nl": "Compute the standard deviation of the given data, this function can deal with NaNs", "code": "public static double standardDeviation(double[] data,int opt){\n  if (opt == 0)   return Math.sqrt(variance(data,opt));\n else   return Math.sqrt(variance(data,opt));\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  return isApplicable() && getViewer().getPcoaTab() != null && getViewer().getPcoaTab().isFlipH();\n}\n"}
{"nl": "close the array", "code": "@Override public void close(){\n  if (mustWriteOnClose) {\n    System.err.println(\"Writing file: \" + file);\n    try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){\n      for (      Long key : map.keySet()) {\n        w.write(key + \"\\t\" + map.get(key)+ \"\\n\");\n      }\n    }\n catch (    IOException ex) {\n      Basic.caught(ex);\n    }\n  }\n}\n"}
{"nl": "Inner method to inform all subscribed listeners of the equipment supervision event", "code": "private void fireEquipmentSupervisionUpdate(final SupervisionEvent supervisionEvent){\n  Set<SupervisionListener> listeners=equipmentSupervisionListeners.get(supervisionEvent.getEntityId());\n  if (listeners != null) {\n    for (    SupervisionListener listener : listeners) {\n      listener.onSupervisionUpdate(supervisionEvent);\n    }\n  }\n}\n"}
{"nl": "Formatted string representation of this point", "code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"Point3D\");\n  sb.append(\"{x=\").append(x);\n  sb.append(\", y=\").append(y);\n  sb.append(\", z=\").append(z);\n  sb.append('}');\n  return sb.toString();\n}\n"}
{"nl": "Compute next probe for collision resolution", "code": "private static int probe(final int perturb,final int j){\n  return (j << 2) + j + perturb+ 1;\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n"}
{"nl": "Method to convert a MapWritable into a JSON string", "code": "@SuppressWarnings(\"unchecked\") public static String mapWritableToString(MapWritable map){\n  JSONObject jsonObj=new JSONObject();\n  for (  Writable key : map.keySet()) {\n    jsonObj.put(key.toString(),map.get(key).toString());\n  }\n  return jsonObj.toJSONString();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AuthCheckPhoneQuery(VkApiClient client,UserActor actor,String phone,String clientSecret){\n  super(client,\"auth.checkPhone\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  phone(phone);\n  clientSecret(clientSecret);\n}\n"}
{"nl": "Clears the frequency table", "code": "public void clear(){\n  freqTable.clear();\n}\n"}
{"nl": "remove fifo xtn info for entry MUST be called  when entry is locked", "code": "public void removeFifoXtnInfoForEntry(IEntryHolder eh){\n  _terminatingXtnsInfo.removeFifoXtnInfoForEntry(eh);\n}\n"}
{"nl": "this method is called  by outside scan that want to quit the scan and return the slholder to the factory", "code": "public void freeSLHolder(IStoredListIterator<T> slh){\n  if (slh != null)   slh.release();\n}\n"}
{"nl": "show the dialog", "code": "public boolean showDialog(){\n  dialog.setVisible(true);\n  return !canceled;\n}\n"}
{"nl": "read the state of the plugin, ie the repositories locations", "code": "private void readState(DataInputStream dis) throws IOException, SVNException {\n  int version=dis.readInt();\n  if ((version < REPOSITORIES_STATE_FILE_VERSION_1) || (version > REPOSITORIES_STATE_FILE_VERSION_3)) {\n    Util.logError(Policy.bind(\"SVNProviderPlugin.unknownStateFileVersion\",new Integer(version).toString()),null);\n    return;\n  }\n  int count=dis.readInt();\n  for (int i=0; i < count; i++) {\n    ISVNRepositoryLocation root=SVNRepositoryLocation.fromString(dis.readUTF());\n    addToRepositoriesCache(root);\n    if (version >= REPOSITORIES_STATE_FILE_VERSION_2) {\n      String label=dis.readUTF();\n      if (!label.equals(\"\")) {\n        root.setLabel(label);\n      }\n    }\n    if (version >= REPOSITORIES_STATE_FILE_VERSION_3) {\n      String repositoryRoot=dis.readUTF();\n      if (!repositoryRoot.equals(\"\")) {\n        root.setRepositoryRoot(new SVNUrl(repositoryRoot));\n      }\n    }\n  }\n}\n"}
{"nl": "Fill an array with the values of a Gaussian window function", "code": "private void gauss(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double delta=5.0 / size;\n  double x=(1 - size) / 2.0 * delta;\n  double c=-Math.PI * Math.exp(1.0) / 10.0;\n  double sum=0;\n  for (int i=start; i < stop; i++) {\n    windowFunction[i]=Math.exp(c * x * x);\n    x+=delta;\n    sum+=windowFunction[i];\n  }\n  for (int i=start; i < stop; i++)   windowFunction[i]/=sum;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetRecentQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getRecent\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "close the file", "code": "public void close() throws IOException {\n  if (readerWriter != null) {\n    readerWriter.close();\n    readerWriter=null;\n  }\n}\n"}
{"nl": "net is3G", "code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "update the graph", "code": "public void updateGraph() throws Exception {\n  if (tabbedPane.getSelectedComponent() instanceof ITab) {\n    final ITab iTab=(ITab)tabbedPane.getSelectedComponent();\n    iTab.compute(taxa,distances);\n    clusterAnalysisSearcher.updateMatrixSearcher();\n  }\n}\n"}
{"nl": "Fill up fields cntM, cntU etc", "code": "private void populateMethylLocus(){\n  if (this.refBase != 'C' && this.refBase != 'G') {\n    cntM=null;\n    cntU=null;\n    return;\n  }\n  for (  RecordAndOffset recOff : this.locus.getRecordAndPositions()) {\n    boolean readIsTopStrand=!(new ReadFromTopStrandFilter(true)).filterOut(recOff.getRecord());\n    char readBase=Character.toUpperCase((char)recOff.getReadBase());\n    if (this.refBase == 'C') {\n      if (readIsTopStrand) {\n        if (readBase == 'C') {\n          cntM++;\n        }\n else         if (readBase == 'T') {\n          cntU++;\n        }\n      }\n    }\n else     if (this.refBase == 'G') {\n      if (!readIsTopStrand) {\n        if (readBase == 'G') {\n          cntM++;\n        }\n else         if (readBase == 'A') {\n          cntU++;\n        }\n      }\n    }\n else {\n      System.err.println(\"Unexpected strand or base!\");\n      System.exit(1);\n    }\n  }\n}\n"}
{"nl": "If there is a performance issue this takes forever to run", "code": "public void testLongStringPerformance(){\n  ISpellingCorrector sc=getSpellingCorrector();\n  sc.correct(\"thisisareallylongstringthatshouldcalusethingstorunreallyslow\");\n}\n"}
{"nl": "It reads a list of objects from a fallback file", "code": "public final List readLines(final int numOfLines,final IFallback fallbackObj) throws DataFallbackException {\n  int readlines=0;\n  List objects=new ArrayList();\n  String line=null;\n  IFallback obj;\n  boolean moreLines=true;\n  try {\n    while (moreLines && readlines < numOfLines) {\n      line=getInput().readLine();\n      if (line == null) {\n        moreLines=false;\n      }\n else {\n        try {\n          obj=fallbackObj.getObject(line);\n          objects.add(obj);\n        }\n catch (        DataFallbackException e) {\n          LOG.error(\"readLines() - \" + e.getMessage() + \"\"+ line);\n          objects.add(null);\n        }\n        readlines++;\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new DataFallbackException(e.getMessage());\n  }\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"readLines() - \" + objects.size() + \" lines has been read from the log file\");\n  }\n  return objects;\n}\n"}
{"nl": "This is to handle casting longs and doubles when the type allows for the data type to be a number", "code": "private Object castValue(Object value){\n  ResourceType.DataType<D> parentDataType=dataType();\n  if (parentDataType.equals(ResourceType.DataType.DOUBLE)) {\n    return ((Number)value).doubleValue();\n  }\n else   if (parentDataType.equals(ResourceType.DataType.LONG)) {\n    if (value instanceof Double) {\n      throw new ClassCastException();\n    }\n    return ((Number)value).longValue();\n  }\n else {\n    try {\n      return Class.forName(parentDataType.getName()).cast(value);\n    }\n catch (    ClassNotFoundException e) {\n      throw new RuntimeException(ErrorMessage.INVALID_RESOURCE_CAST.getMessage(value,parentDataType.getName()));\n    }\n  }\n}\n"}
{"nl": "Constructs an empty change set", "code": "public ChangeSet(){\n  _mutators=new LinkedList<SpaceEntryMutator>();\n  _lease=0;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountRegisterDeviceQuery(VkApiClient client,UserActor actor,String token,String deviceId){\n  super(client,\"account.registerDevice\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  token(token);\n  deviceId(deviceId);\n}\n"}
{"nl": "Restore to the default configuration settings", "code": "public void resetConfiguration(){\n  setRainTime(-1);\n  setFadeOutTime(-1);\n  setSnowTime(-1);\n  setRainParticles(-1);\n  setSnowParticles(-1);\n}\n"}
{"nl": "Convert 4 bytes to Integer", "code": "private int byteArrayToInteger(byte[] b,int offset){\n  return (b[offset + 3] & 0xFF) << 24 | (b[offset + 2] & 0xFF) << 16 | (b[offset + 1] & 0xFF) << 8 | (b[offset] & 0xFF);\n}\n"}
{"nl": "share sms", "code": "protected void shareBySms(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SMS,getShareData(ShareConstant.SHARE_CHANNEL_SMS),ShareConstant.REQUEST_CODE);\n}\n"}
{"nl": "Convert bundle to readable string", "code": "public static String toString(Bundle bundle){\n  if (bundle == null) {\n    return null;\n  }\n  StringBuilder stringBuilder=new StringBuilder();\n  for (  String key : bundle.keySet()) {\n    Object value=bundle.get(key);\n    stringBuilder.append(String.format(\"%s %s (%s)\\n\",key,value,value == null ? \"null\" : value.getClass().getName()));\n  }\n  return stringBuilder.substring(0,stringBuilder.length() - 1);\n}\n"}
{"nl": "Initialize listening on login port", "code": "public void initialize(){\n  loginToClientChannelFactory=initChannelFactory();\n  Channel loginToClientChannel=initChannel(loginToClientChannelFactory,Config.CHAT_ADDRESS,loginToClientPipeLineFactory);\n  channelGroup.add(loginToClientChannel);\n  ServerCfg gs=new ServerCfg(Config.GAME_ADDRESS.getAddress().getHostAddress(),Config.GAME_ADDRESS.getPort(),\"Gs Connections\",new GsConnectionFactoryImpl());\n  nioServer=new NioServer(5,gs);\n  nioServer.connect();\n}\n"}
{"nl": "Completely removes legion from database and cache", "code": "private void deleteLegionFromDB(Legion legion){\n  this.allCachedLegions.remove(legion);\n  DAOManager.getDAO(LegionDAO.class).deleteLegion(legion.getLegionId());\n}\n"}
{"nl": "Is this an edge vector?", "code": "public boolean isEdgeVector(int edgeIndex){\n  String edgeValue=getFeature(edgeIndex).toString();\n  return (!edgeValue.equals(FeatureDefinition.NULLVALUE));\n}\n"}
{"nl": "force close server", "code": "public void forceClose(ServerInfo server){\n  if (server == null || server.sock == null) {\n    return;\n  }\n  try {\n    if (this.keep_alive) {\n      try {\n        ProtoCommon.quit(server.sock);\n      }\n catch (      IOException ex) {\n        System.err.println(\"quit error: \" + ex.getMessage());\n      }\n    }\n    server.sock.close();\n    server.sock=null;\n  }\n catch (  IOException ex) {\n    System.err.println(\"close socket error: \" + ex.getMessage());\n  }\n}\n"}
{"nl": "Get an angle between the line defined by two points and the horizontal axis", "code": "public final static float calculateAngleFrom(float obj1X,float obj1Y,float obj2X,float obj2Y){\n  float angleTarget=(float)Math.toDegrees(Math.atan2(obj2Y - obj1Y,obj2X - obj1X));\n  if (angleTarget < 0) {\n    angleTarget=360 + angleTarget;\n  }\n  return angleTarget;\n}\n"}
{"nl": "Utility function to extract the id", "code": "@Nullable public static String extractId(@Nullable String str){\n  if (str == null) {\n    return null;\n  }\n  int index=str.lastIndexOf(\"@id/\");\n  if (index != -1) {\n    return str.substring(index + 4);\n  }\n  index=str.lastIndexOf(\"@+id/\");\n  if (index != -1) {\n    return str.substring(index + 5);\n  }\n  return null;\n}\n"}
{"nl": "Required becuse we use this in the UniqueRepoQueue and in a few other places to ensure we don't add multiples of the same repo", "code": "@Override public boolean equals(Object o){\n  if (o instanceof RepoResult == false) {\n    return false;\n  }\n  RepoResult rr=(RepoResult)o;\n  if (this.getName().equals(rr.getName())) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "erase the match", "code": "@Override public void clear(){\n  queryName=null;\n  flag=0;\n  refName=null;\n  pos=0;\n  mapQuality=0;\n  cigarString=null;\n  RNext=null;\n  PNext=0;\n  TLength=0;\n  sequence=null;\n  quality=null;\n  optionalFields.clear();\n  cigar=null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsAddQuery(VkApiClient client,UserActor actor,int ownerId,int docId){\n  super(client,\"docs.add\",AddResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  docId(docId);\n}\n"}
{"nl": "Method to add a listener", "code": "public void addChangeListener(PropertyChangeListener newListener){\n  listener.add(newListener);\n}\n"}
{"nl": "Invoke when scroll percent over the threshold for the first time", "code": "public void onScrollToClose(){\n}\n"}
{"nl": "Adds another meta argument to the script", "code": "public ResourceLazyLoadingScript metaArguments(Object... metaArguments){\n  this.metaArguments=metaArguments;\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQueryWithExtended(VkApiClient client,String groupId){\n  super(client,\"groups.isMember\",IsMemberExtendedResponse.class);\n  groupId(groupId);\n  extended(true);\n}\n"}
{"nl": "Pop the stack, assuring that the current mode matches the expectation", "code": "private boolean pop(byte mode){\n  if (top < 0 || stack[top] != mode) {\n    return false;\n  }\n  --top;\n  return true;\n}\n"}
{"nl": "Builds the ImageOverlayOptions instance", "code": "public ImageOverlayOptions build(){\n  ImageOverlayOptions options=new ImageOverlayOptions();\n  options.opacity=this.opacity;\n  options.attribution=this.attribution;\n  return options;\n}\n"}
{"nl": "true, if given feature index contains similarity matrix", "code": "public boolean hasSimilarityMatrix(int featureIndex){\n  if (featureIndex >= this.getNumberOfByteFeatures()) {\n    return false;\n  }\n  return this.similarityMatrices != null && this.similarityMatrices[featureIndex] != null;\n}\n"}
{"nl": "Constructs new instance of <tt>CM_PING </tt> packet", "code": "public CM_PING(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Creates the default CMU Lexicon which is a binary lexicon", "code": "public GermanLexicon(){\n  this(\"germanlex\");\n}\n"}
{"nl": "Split a path into a list of directories ending with the file name", "code": "public static List<String> splitPath(String path){\n  return splitPath(new File(path));\n}\n"}
{"nl": "Always save the model to xml", "code": "public void saveToXML(boolean forceSave){\n  Selection selection=getSelection();\n  if (forceSave || !selection.getModifiedWidgets().isEmpty()) {\n    ourLock.lock();\n    myModificationCount++;\n    ourLock.unlock();\n    if (DEBUG) {\n      System.out.println(\"Model Saved to XML -> \" + myModificationCount + \"(\"+ selection.getModifiedWidgets().size()+ \" elements modified)\");\n    }\n    ConstraintUtilities.saveModelToXML(myNlModel,true);\n    selection.clearModifiedWidgets();\n    requestRender();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetDialogsQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.getDialogs\",GetDialogsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Initialize the helper object", "code": "private MonsterHunterDatabaseHelper(Context context){\n  super(context,DATABASE_NAME,null,DATABASE_VERSION);\n  myContext=context;\n  setForcedUpgrade();\n}\n"}
{"nl": "Creates a builder on top of the current resources XML file", "code": "public static ResourcesPoet create(File file){\n  init();\n  try {\n    Document document=sDocumentBuilder.parse(file);\n    Element resources;\n    NodeList list=document.getElementsByTagName(ELEMENT_RESOURCES);\n    if (list == null || list.getLength() == 0) {\n      resources=document.createElement(ELEMENT_RESOURCES);\n      document.appendChild(resources);\n    }\n else {\n      resources=(Element)list.item(0);\n    }\n    return create(document,resources);\n  }\n catch (  IOException|SAXException e) {\n    throw new IllegalStateException(\"Unable to parse the resource file you passed. Make sure it is properly formatted\",e);\n  }\n}\n"}
{"nl": "Update the component with the values from a Guideline widget", "code": "static void commitGuideline(NlModel model,@NotNull AttributesTransaction component,@NotNull Guideline guideline){\n  int behaviour=guideline.getRelativeBehaviour();\n  WidgetCompanion companion=(WidgetCompanion)guideline.getCompanionWidget();\n  component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_BEGIN,null);\n  component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_END,null);\n  component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_PERCENT,null);\n  component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_DEPRECATED_GUIDE_PERCENT,null);\n  String previousValue=companion.getWidgetProperties().getGuidelineAttribute();\n  if (previousValue != null && !previousValue.startsWith(\"@\")) {\n    previousValue=null;\n  }\n  String value=previousValue;\n  if (behaviour == Guideline.RELATIVE_PERCENT) {\n    boolean useFloat=useGuidelineFloat(model);\n    if (value == null) {\n      float percent=guideline.getRelativePercent();\n      if (useFloat) {\n        value=String.valueOf(percent);\n      }\n else {\n        value=String.valueOf((int)(percent * 100));\n      }\n    }\n    String percentAttribute=useFloat ? SdkConstants.LAYOUT_CONSTRAINT_GUIDE_PERCENT : SdkConstants.LAYOUT_CONSTRAINT_DEPRECATED_GUIDE_PERCENT;\n    component.setAttribute(SdkConstants.SHERPA_URI,percentAttribute,value);\n  }\n else   if (behaviour == Guideline.RELATIVE_BEGIN) {\n    if (value == null) {\n      value=String.format(SdkConstants.VALUE_N_DP,guideline.getRelativeBegin());\n    }\n    component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_BEGIN,value);\n  }\n else   if (behaviour == Guideline.RELATIVE_END) {\n    if (value == null) {\n      value=String.format(SdkConstants.VALUE_N_DP,guideline.getRelativeEnd());\n    }\n    component.setAttribute(SdkConstants.SHERPA_URI,SdkConstants.LAYOUT_CONSTRAINT_GUIDE_END,value);\n  }\n}\n"}
{"nl": "remove credentials for given URL", "code": "public static void removeCredentials(String url){\n  server2Credentials.remove(url);\n}\n"}
{"nl": "Enviar foto tirada pela camera", "code": "private void photoCameraIntent(){\n  String nomeFoto=DateFormat.format(\"yyyy-MM-dd_hhmmss\",new Date()).toString();\n  filePathImageCamera=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),nomeFoto + \"camera.jpg\");\n  Intent it=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  it.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(filePathImageCamera));\n  startActivityForResult(it,IMAGE_CAMERA_REQUEST);\n}\n"}
{"nl": "Returns a test rule tag object", "code": "public static RuleTagCacheObject createTestRuleTag(){\n  RuleTagCacheObject cacheObject=new RuleTagCacheObject(new Long(130),\"Junit_test_tag\",\"Integer\",DataTagConstants.MODE_TEST,\"(#100000 = true)&(#100001 = true)[2],true[3]\");\n  cacheObject.setId(new Long(130));\n  cacheObject.setName(\"Junit_test_rule_tag\");\n  cacheObject.setDescription(\"test rule description\");\n  cacheObject.setMode(DataTagConstants.MODE_TEST);\n  cacheObject.setDataType(\"Integer\");\n  cacheObject.setLogged(false);\n  cacheObject.setUnit(\"test unit m/sec\");\n  cacheObject.setDipAddress(\"testDIPaddress\");\n  cacheObject.setJapcAddress(\"testJAPCaddress\");\n  cacheObject.setValue(new Integer(1000));\n  cacheObject.setValueDescription(\"test value description\");\n  cacheObject.setSimulated(false);\n  cacheObject.setValueDictionary(new DataTagValueDictionary());\n  cacheObject.setDataTagQuality(createValidQuality());\n  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));\n  cacheObject.setRuleIdsString(\"\");\n  return cacheObject;\n}\n"}
{"nl": "is some sample colored", "code": "public boolean isSomeSampleColored(){\n  for (  String sample : getSampleOrder()) {\n    if (get(sample,HiddenAttribute.Color) != null)     return true;\n  }\n  return false;\n}\n"}
{"nl": "Create an iterator which stars iterating over the packets which reside in the memory redo log file", "code": "public SwapReadOnlyIterator(ReadOnlyIterator<T> memoryIterator){\n  this._memoryIterator=memoryIterator;\n}\n"}
{"nl": "Delete Quest(3)", "code": "public SM_QUEST_ACTION(int questId){\n  this.action=3;\n  this.questId=questId;\n}\n"}
{"nl": "Read a short from the input stream, byte-swapping as necessary", "code": "public static short readShort(DataInputStream dis,boolean isBigEndian) throws IOException {\n  if (!isBigEndian) {\n    return readLittleEndianShort(dis);\n  }\n else {\n    return dis.readShort();\n  }\n}\n"}
{"nl": "Return true if the point (x, y) intersects with the ResizeHandle", "code": "public boolean hit(float x,float y){\n  return mBounds.contains(x,y);\n}\n"}
{"nl": "Launch documents pick flow", "code": "@PickTriggerResult public int fromDocuments(){\n  return this.fromDocuments(false);\n}\n"}
{"nl": "Check out if it is a empty data", "code": "public static boolean isEmpty(CharSequence data){\n  return data == null || data.length() == 0;\n}\n"}
{"nl": "Creates a new instance of Dictionary", "code": "public Dictionary(String sName,int iMaxWordSize){\n  WordDefs=new HashSet();\n  Name=sName;\n  MaxWordSize=iMaxWordSize;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQueryWithUserIds(VkApiClient client,String groupId,Integer... userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatus.class));\n  groupId(groupId);\n  userIds(userIds);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketRemoveFromAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,List<Integer> albumIds){\n  super(client,\"market.removeFromAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  albumIds(albumIds);\n}\n"}
{"nl": "This method will move the item to the new player and move kinah to item owner", "code": "public static void sellStoreItem(Player seller,Player buyer,TradeList tradeList){\n  if (!validateParticipants(seller,buyer))   return;\n  PrivateStore store=seller.getStore();\n  tradeList=loadObjIds(seller,tradeList);\n  if (tradeList == null)   return;\n  Storage inventory=buyer.getInventory();\n  int freeSlots=inventory.getLimit() - inventory.getItemsWithKinah().size() + 1;\n  if (freeSlots < tradeList.size()) {\n    return;\n  }\n  long price=getTotalPrice(store,tradeList);\n  if (price < 0)   return;\n  if (buyer.getInventory().getKinah() >= price) {\n    for (    TradeItem tradeItem : tradeList.getTradeItems()) {\n      Item item=getItemByObjId(seller,tradeItem.getItemId());\n      if (item != null) {\n        TradePSItem storeItem=store.getTradeItemByObjId(tradeItem.getItemId());\n        if (item.getItemCount() < tradeItem.getCount()) {\n          PacketSendUtility.sendMessage(buyer,\"You cannot buy more than player can sell.\");\n          return;\n        }\n        decreaseItemFromPlayer(seller,item,tradeItem);\n        ItemService.addItem(buyer,item.getItemId(),tradeItem.getCount(),item);\n        if (storeItem.getCount() == tradeItem.getCount()) {\n          store.removeItem(storeItem.getItemObjId());\n        }\n        log.info(\"[PRIVATE STORE] > [Seller: \" + seller.getName() + \"] sold [Item: \"+ item.getItemId()+ \"][Amount: \"+ item.getItemCount()+ \"] to [Buyer: \"+ buyer.getName()+ \"] for [Price: \"+ price+ \"]\");\n      }\n    }\n    decreaseKinahAmount(buyer,price);\n    increaseKinahAmount(seller,price);\n    if (store.getSoldItems().size() == 0) {\n      closePrivateStore(seller);\n    }\n  }\n}\n"}
{"nl": "This returns the odd indexed values for the given vector", "code": "public static double[] yVals(double[] vector){\n  double[] y=new double[vector.length / 2];\n  int count=0;\n  for (int i=0; i < vector.length; i++) {\n    if (i % 2 == 0)     y[count++]=vector[i];\n  }\n  return y;\n}\n"}
{"nl": "Creates a separator", "code": "public ViewActionSeparator(int rank){\n  super(rank,null,\"\");\n}\n"}
{"nl": "Convert a map generated by the toMap() method back to a DockerPortMapping", "code": "public static DockerPortMapping fromMap(Map.Entry<String,List<Map<String,String>>> entry){\n  DockerPortMapping portMapping=new DockerPortMapping();\n  if (entry.getValue() == null) {\n    return null;\n  }\n  portMapping.containerPort=entry.getKey();\n  int protocolSeparatorIndex=portMapping.containerPort.indexOf(\"/\");\n  if (protocolSeparatorIndex != -1) {\n    portMapping.protocol=Protocol.fromString(portMapping.containerPort.substring(protocolSeparatorIndex + 1));\n    portMapping.containerPort=portMapping.containerPort.substring(0,protocolSeparatorIndex);\n  }\n  Map<String,String> hostMap=entry.getValue().get(0);\n  portMapping.hostIp=hostMap.get(HOST_IP);\n  portMapping.hostPort=hostMap.get(HOST_PORT);\n  return portMapping;\n}\n"}
{"nl": "is viewer uptodate?", "code": "public boolean isUptoDate(){\n  return this.uptodate;\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  frame.setVisible(false);\n  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());\n  dir.removeViewer(this);\n  searchManager.getFindDialogAsToolBar().close();\n  frame.dispose();\n}\n"}
{"nl": "Reads a tablesaw table into memory", "code": "public static Table readTable(String path) throws IOException {\n  ExecutorService executorService=Executors.newFixedThreadPool(READER_POOL_SIZE);\n  CompletionService readerCompletionService=new ExecutorCompletionService<>(executorService);\n  TableMetadata tableMetadata=readTableMetadata(path + separator() + \"Metadata.json\");\n  List<ColumnMetadata> columnMetadata=tableMetadata.getColumnMetadataList();\n  Table table=Table.create(tableMetadata);\n  ConcurrentLinkedQueue<Column> columnList=new ConcurrentLinkedQueue<>();\n  Map<String,Column> columns=new HashMap<>();\n  try {\n    for (    ColumnMetadata column : columnMetadata) {\n      readerCompletionService.submit(null);\n    }\n    for (int i=0; i < columnMetadata.size(); i++) {\n      Future future=readerCompletionService.take();\n      future.get();\n    }\n    for (    Column c : columnList) {\n      columns.put(c.id(),c);\n    }\n    for (    ColumnMetadata metadata : columnMetadata) {\n      String id=metadata.getId();\n      table.addColumn(columns.get(id));\n    }\n  }\n catch (  InterruptedException|ExecutionException e) {\n    throw new RuntimeException(e);\n  }\n  executorService.shutdown();\n  return table;\n}\n"}
{"nl": "Add a delegate identified by the given unique key (can be used to remove it later)", "code": "public void putDelegate(String alias,X509ExtendedKeyManager newDelegate){\n  if (!alias.equals(alias.toLowerCase())) {\n    throw new IllegalArgumentException(\"Aliases must be all lowercase\");\n  }\n  delegates.put(alias,newDelegate);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetOnlineQueryWithMobile(VkApiClient client,UserActor actor){\n  super(client,\"friends.getOnline\",GetOnlineMobileResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Making notification bar transparent", "code": "private void changeStatusBarColor(){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    Window window=getWindow();\n    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n    window.setStatusBarColor(Color.TRANSPARENT);\n  }\n}\n"}
{"nl": "Create new transaction using the local transaction manager", "code": "private Transaction createTransaction() throws LeaseDeniedException, RemoteException, TransactionException {\n  ITransactionManagerProvider transactionManagerProvider=getTransactionManagerProvider();\n  return (TransactionFactory.create(transactionManagerProvider.getTransactionManager(),_config.getTransactionTimeout())).transaction;\n}\n"}
{"nl": "Method that initializes this custom view's default values and sets listeners", "code": "private void initAttrs(Context context,FieldsType type,int resId,String hint){\n  try {\n    this.mRootView=(RelativeLayout)inflate(context,R.layout.library_form_field_layout,this);\n    this.mIconView=(ImageView)mRootView.findViewById(R.id.slick_form_text_icon);\n    this.mFieldInput=(EditText)mRootView.findViewById(R.id.slick_form_text_input);\n    LayoutParams params=new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);\n    params.addRule(RelativeLayout.RIGHT_OF,mIconView.getId());\n    this.mIconView.setImageResource(resId);\n    this.mFieldInput.setLayoutParams(params);\n    this.mFieldInput.setHint(hint);\n    this.formFieldType=type;\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "split metadata to name value pair array", "code": "public static NameValuePair[] split_metadata(String meta_buff){\n  return split_metadata(meta_buff,FDFS_RECORD_SEPERATOR,FDFS_FIELD_SEPERATOR);\n}\n"}
{"nl": "erase selection", "code": "public void clearSelection(){\n  selection.clear();\n  previouslySelectedItem=null;\n  shiftDown=false;\n  mouseClicks=0;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountGetPushSettingsQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getPushSettings\",PushSettings.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "is the current object set?", "code": "public boolean isCurrentSet(){\n  return currentIterator != null && currentId != null;\n}\n"}
{"nl": "Block creation", "code": "private void createBlock(polyglot.ast.Block block){\n  if (block == null)   return;\n  Iterator it=block.statements().iterator();\n  while (it.hasNext()) {\n    Object next=it.next();\n    if (next instanceof polyglot.ast.Stmt) {\n      createStmt((polyglot.ast.Stmt)next);\n    }\n else {\n      throw new RuntimeException(\"Unexpected - Unhandled Node\");\n    }\n  }\n}\n"}
{"nl": "Return all cities in the country", "code": "public DatabaseGetCitiesQuery needAll(Boolean value){\n  return unsafeParam(\"need_all\",value);\n}\n"}
{"nl": "Updates this thread lrmi invocation context", "code": "public static void updateContext(LRMIInvocationTrace invocationTrace,ProxyWriteType proxyWriteType,InvocationStage stage,PlatformLogicalVersion sourceLogicalVersion,PlatformLogicalVersion targetLogicalVersion,boolean createSnapshot,Boolean useStubCache,InetSocketAddress clientEndPointAddress){\n  LRMIInvocationContextHolder holder=invocationContexts.get();\n  LRMIInvocationContext invocationContext=holder.getContext();\n  LRMIInvocationContext actualContext=createSnapshot ? invocationContext.snapshot() : invocationContext;\n  if (invocationTrace != null || createSnapshot)   actualContext.setTrace(invocationTrace);\n  if (proxyWriteType != null || createSnapshot)   actualContext.setProxyWriteType(proxyWriteType);\n  if (stage != null || createSnapshot)   actualContext.setInvocationStage(stage);\n  if (sourceLogicalVersion != null || createSnapshot)   actualContext.setSourceLogicalVersion(sourceLogicalVersion);\n  if (targetLogicalVersion != null || createSnapshot)   actualContext.setTargetLogicalVersion(targetLogicalVersion);\n  if (useStubCache != null)   actualContext.setUseStubCache(useStubCache.booleanValue());\n  if (clientEndPointAddress != null || createSnapshot) {\n    actualContext.setClientEndPointAddress(clientEndPointAddress);\n  }\n  if (createSnapshot) {\n    if (invocationContext._livenessPriorityEnabledInNextInvocation)     actualContext.setLivenessPriorityEnabled(true);\n    if (invocationContext._customPriorityEnabledInNextInvocation)     actualContext.setCustomPriorityEnabled(true);\n    if (invocationContext._callbackMethodInNextInvocation)     actualContext.setCallbackMethod(true);\n  }\n  holder.setContext(actualContext);\n}\n"}
{"nl": "Change badge text at index", "code": "public void changeBadgeTextAtIndex(int badgeIndex,int badgeText){\n  if (badgeSaveInstanceHashMap.get(badgeIndex) != null && (((BadgeItem)badgeSaveInstanceHashMap.get(badgeIndex)).getIntBadgeText() != badgeText)) {\n    BadgeItem currentBadgeItem=(BadgeItem)badgeSaveInstanceHashMap.get(badgeIndex);\n    BadgeItem badgeItemForSave=new BadgeItem(badgeIndex,badgeText,currentBadgeItem.getBadgeColor());\n    BadgeHelper.forceShowBadge(badgeList.get(badgeIndex),badgeItemForSave,shouldShowBadgeWithNinePlus);\n    badgeSaveInstanceHashMap.put(badgeIndex,badgeItemForSave);\n  }\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String[] lines=Basic.getFirstLinesFromFile(new File(fileName),2);\n  return lines != null && lines[0] != null && lines[1] != null && lines[0].startsWith(\"<?xml\") && (lines[1].startsWith(\"<!DOCTYPE BlastOutput\") || lines[1].startsWith(\"<BlastOutput>\"));\n}\n"}
{"nl": "Paint ourselves and our children", "code": "public boolean paint(@NotNull Graphics2D gc,ConstraintWidget component,int width,int height,boolean showAllConstraints){\n  Graphics2D g=(Graphics2D)gc.create();\n  WidgetDecorator.setShowFakeUI(mShowFakeUI);\n  if (mySceneDraw.getCurrentStyle() == WidgetDecorator.BLUEPRINT_STYLE) {\n    mySceneDraw.drawBackground(myConstraintModel.getScene().getWidget(component),myViewTransform,g,width,height);\n  }\n  if (myConstraintModel.getNeedsAnimateConstraints() != -1) {\n    mySceneDraw.animateConstraints(myConstraintModel.getNeedsAnimateConstraints());\n    myConstraintModel.setNeedsAnimateConstraints(-1);\n  }\n  boolean ret=mySceneDraw.paintWidgets(component,width,height,myViewTransform,g,showAllConstraints,myMouseInteraction);\n  g.dispose();\n  return ret;\n}\n"}
{"nl": "Check if we have status bar", "code": "public static boolean hasStatusBar(Activity activity){\n  LayoutParams params=activity.getWindow().getAttributes();\n  return (params.flags & LayoutParams.FLAG_FULLSCREEN) != LayoutParams.FLAG_FULLSCREEN;\n}\n"}
{"nl": "draws the y-axis labels to the screen", "code": "@Override public void renderAxisLabels(Canvas c){\n  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;\n  float[] positions=getTransformedPositions();\n  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());\n  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());\n  mAxisLabelPaint.setColor(mYAxis.getTextColor());\n  mAxisLabelPaint.setTextAlign(Align.CENTER);\n  float baseYOffset=Utils.dp2px(2.5f);\n  float textHeight=Utils.calcTextHeight(mAxisLabelPaint,\"Q\");\n  AxisDependency dependency=mYAxis.getAxisDependency();\n  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();\n  float yPos=0f;\n  if (dependency == AxisDependency.LEFT) {\n    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {\n      yPos=mViewPortHandler.contentTop() - baseYOffset;\n    }\n else {\n      yPos=mViewPortHandler.contentTop() - baseYOffset;\n    }\n  }\n else {\n    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {\n      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;\n    }\n else {\n      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;\n    }\n  }\n  drawYLabels(c,yPos,positions,mYAxis.getYOffset());\n}\n"}
{"nl": "Removes the subfilter containing Tag from the Parent Filter", "code": "public void removeSubFilterWithTag(String tag){\n  Iterator<SubFilter> iterator=subFilters.iterator();\n  while (iterator.hasNext()) {\n    SubFilter subFilter=iterator.next();\n    if (subFilter.getTag().equals(tag)) {\n      iterator.remove();\n    }\n  }\n}\n"}
{"nl": "Repeat the playback of the video", "code": "public VideoEditQuery repeat(Boolean value){\n  return unsafeParam(\"repeat\",value);\n}\n"}
{"nl": "Increase the underlying buffer array in size, so that the new size is at least minSize", "code": "protected void increaseBufferSize(int minSize){\n  int newLength=buf.length;\n  while (newLength < minSize)   newLength*=2;\n  double[] newBuf=new double[newLength];\n  int avail=currentlyInBuffer();\n  System.arraycopy(buf,readPos,newBuf,0,avail);\n  buf=newBuf;\n  readPos=0;\n  writePos=avail;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetAllCommentsQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAllComments\",GetAllCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Return the \"likes\" field", "code": "public BoardGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "Create all inputs", "code": "public static List<JSONObject> initialize(FileSystem fs) throws Exception {\n  List<JSONObject> dataElements=Inputs.createJSONInput(fs);\n  String localStopListFile=Inputs.createStopList(fs,true);\n  SystemConfiguration.setProperty(\"pir.stopListFile\",localStopListFile);\n  Inputs.createSchemaFiles(fs,true,StopListFilter.class.getName());\n  return dataElements;\n}\n"}
{"nl": "swap order of bytes", "code": "private void swap(byte[] bytes,int len){\n  int top=len / 2;\n  int j=len - 1;\n  for (int i=0; i < top; i++, j--) {\n    byte b=bytes[i];\n    bytes[i]=bytes[j];\n    bytes[j]=b;\n  }\n}\n"}
{"nl": "Display the authenticated pilot's profile", "code": "public static void showProfile(Activity activity,@Nullable HashMap<String,String> extras){\n  showProfile(activity,AirMap.getUserId(),extras);\n}\n"}
{"nl": "Delete all files in a folder under the folder and files", "code": "public static boolean deletefile(String delpath){\n  File file=new File(delpath);\n  if (!file.isDirectory()) {\n    file.delete();\n  }\n else   if (file.isDirectory()) {\n    String[] filelist=file.list();\n    for (int i=0; i < filelist.length; i++) {\n      File delfile=new File(delpath + filelist[i]);\n      if (!delfile.isDirectory()) {\n        delfile.delete();\n      }\n else       if (delfile.isDirectory()) {\n        deletefile(delpath + filelist[i]);\n      }\n    }\n    file.delete();\n  }\n  return true;\n}\n"}
{"nl": "Serve a Completable GoogleApiClient", "code": "public static Completable completable(GoogleApiClientCompletable completable){\n  return Completable.create(completable);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> itemIds){\n  super(client,\"market.getById\",GetByIdExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  itemIds(itemIds);\n  extended(true);\n}\n"}
{"nl": "Replace the token with the replacement string", "code": "public void replaceToken(Token token,String replacement){\n  try {\n    replace(token.start,token.length,replacement,null);\n  }\n catch (  BadLocationException ex) {\n    log.log(Level.WARNING,\"unable to replace token: \" + token,ex);\n  }\n}\n"}
{"nl": "Set the type by name", "code": "public Builder type(final String typeName){\n  this.propertyTypeName=typeName;\n  return this;\n}\n"}
{"nl": "To get the type of measure used for cluster data", "code": "private boolean hasSimilarityMeasure(){\n  return this.isSimilarityMeasure;\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-2.226325228634938d,-1.156887023657177d,-0.643949578356075d,-0.2027950777320613d,0.305827808237559d,6.42632522863494d,5.35688702365718d,4.843949578356074d,4.40279507773206d,3.89417219176244d};\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n"}
{"nl": "Only urls that start with jdbc:gigaspaces: are compliant", "code": "public boolean acceptsURL(String url) throws SQLException {\n  return (url.startsWith(GConnection.JDBC_GIGASPACES));\n}\n"}
{"nl": "update the finder object with data from our UI", "code": "private void updateFinder(){\n  int flag=0;\n  if (!jChkRegex.isSelected()) {\n    flag|=Pattern.LITERAL;\n  }\n  flag|=(jChkIgnoreCase.isSelected()) ? Pattern.CASE_INSENSITIVE : 0;\n  if (jChkIgnoreCase.isSelected()) {\n    flag|=Pattern.CASE_INSENSITIVE;\n  }\n  String regex=(String)jCmbFind.getSelectedItem();\n  if (regex != null && regex.length() > 0) {\n    Pattern pattern=Pattern.compile(regex,flag);\n    finder.setWrap(jChkWrap.isSelected());\n    finder.setPattern(pattern);\n    ActionUtils.insertIntoCombo(jCmbFind,regex);\n  }\n else {\n    finder.setPattern(null);\n  }\n}\n"}
{"nl": "Create a soft double reference to the object", "code": "private SoftReference<DoubleRef<Key,Value>> reference(Key key,Value value){\n  return new SoftReference<DoubleRef<Key,Value>>(new DoubleRef<Key,Value>(key,value));\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  String choices[]=new String[]{\"angular\",\"straight\",\"curved\",\"none\"};\n  String result=(String)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set edge shape\",\"Set edge shape\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),choices,choices[0]);\n  if (result != null)   execute(\"set edgeShape=\" + result + \";\");\n}\n"}
{"nl": "ask view to allow user input", "code": "public void unlockUserInput(){\n  commandManager.setEnableCritical(true);\n  locked=false;\n}\n"}
{"nl": "Allows to create the Adapter", "code": "public BucketAdapter(Context _context,List<Task> _model){\n  this.context=_context;\n  this.model=_model;\n}\n"}
{"nl": "User sex", "code": "public AccountSaveProfileInfoQuery sex(AccountSaveProfileInfoSex value){\n  return unsafeParam(\"sex\",value);\n}\n"}
{"nl": "convert AWT imageIcon to JavaFX image", "code": "public static ImageView asImageViewFX(ImageIcon imageIcon){\n  java.awt.Image awtImage=imageIcon.getImage();\n  if (awtImage != null) {\n    final BufferedImage bImg;\n    if (awtImage instanceof BufferedImage) {\n      bImg=(BufferedImage)awtImage;\n    }\n else {\n      bImg=new BufferedImage(awtImage.getWidth(null),awtImage.getHeight(null),BufferedImage.TYPE_INT_ARGB);\n      Graphics2D graphics=bImg.createGraphics();\n      graphics.drawImage(awtImage,0,0,null);\n      graphics.dispose();\n    }\n    return new ImageView(SwingFXUtils.toFXImage(bImg,null));\n  }\n else   return null;\n}\n"}
{"nl": "Validate is specified acl owned by specified user or is shared to specified project but don't rise exception", "code": "public static boolean isPossibleToReadResource(Acl acl,String userModifier,String projectName){\n  if (!acl.getOwnerUserId().equalsIgnoreCase(userModifier))   if (!acl.getEntries().stream().filter(Preconditions.hasACLPermission(projectName,AclPermissions.READ)).findFirst().isPresent())   return false;\n  return true;\n}\n"}
{"nl": "Add AP to a player (current player AP + added AP)", "code": "public void addAp(int additionalAp){\n  dailyAP+=additionalAp;\n  if (dailyAP < 0) {\n    dailyAP=0;\n  }\n  weeklyAP+=additionalAp;\n  if (weeklyAP < 0) {\n    weeklyAP=0;\n  }\n  int cappedCount=0;\n  if (CustomConfig.ENABLE_AP_CAP) {\n    cappedCount=(long)(currentAp + additionalAp) > CustomConfig.AP_CAP_VALUE ? (int)(CustomConfig.AP_CAP_VALUE - currentAp) : additionalAp;\n  }\n else {\n    cappedCount=additionalAp;\n  }\n  currentAp+=cappedCount;\n  if (currentAp < 0) {\n    currentAp=0;\n  }\n  AbyssRankEnum newRank=AbyssRankEnum.getRankForAp(currentAp);\n  if (newRank.getId() <= 9) {\n    setRank(newRank);\n  }\n  setPersistentState(PersistentState.UPDATE_REQUIRED);\n}\n"}
{"nl": "If the quality has changed it means the data tag is swapping from valid to invalid or the other way round", "code": "public boolean isNewQualityStatus(final SourceDataTagQuality newSDQuality){\n  if (this.lastSourceDataTag != null) {\n    SourceDataTagValue lastSentSDTagValue=this.lastSourceDataTag.getCurrentValue();\n    if ((lastSentSDTagValue.getValue() != null) && (lastSentSDTagValue.getQuality().getQualityCode() != newSDQuality.getQualityCode())) {\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"\\tscheduler[\" + this.sourceDataTag.getId() + \"] : New Quality status. Last Sent Quality [ \"+ lastSentSDTagValue.getQuality()+ \"] vs New Quality [\"+ newSDQuality+ \"]\");\n      }\n      return true;\n    }\n  }\n else   if (isScheduledForSending()) {\n    SourceDataTagValue scheduledValue=sourceDataTag.getCurrentValue();\n    if ((scheduledValue != null) && (scheduledValue.getQuality().getQualityCode() != newSDQuality.getQualityCode())) {\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"\\tscheduler[\" + this.sourceDataTag.getId() + \"] : New Quality status. Scheduled Quality [\"+ scheduledValue.getQuality()+ \"] vs New Quality [\"+ newSDQuality+ \"]\");\n      }\n      return true;\n    }\n  }\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(\"\\tscheduler[\" + this.sourceDataTag.getId() + \"] : No new Quality status \");\n  }\n  return false;\n}\n"}
{"nl": "To interpolate Zero values with respect to NonZero values", "code": "private double[] interpolateNonZeroValues(double[] contour){\n  for (int i=0; i < contour.length; i++) {\n    if (contour[i] == 0) {\n      int index=findNextIndexNonZero(contour,i);\n      if (index == -1) {\n        for (int j=i; j < contour.length; j++) {\n          contour[j]=contour[j - 1];\n        }\n        break;\n      }\n else {\n        for (int j=i; j < index; j++) {\n          if (i == 0) {\n            contour[j]=contour[index];\n          }\n else {\n            contour[j]=contour[j - 1] + ((contour[index] - contour[i - 1]) / (index - i));\n          }\n        }\n        i=index - 1;\n      }\n    }\n  }\n  return contour;\n}\n"}
{"nl": "Gets whether this Android application is enabled", "code": "public boolean isApplicationEnabled(){\n  AXmlAttribute<?> attr=this.application.getAttribute(\"enabled\");\n  return attr == null || !attr.getValue().equals(Boolean.FALSE);\n}\n"}
{"nl": "Creates a Rectangle instance", "code": "public static Rectangle rectangle(double minX,double maxX,double minY,double maxY){\n  return new RectangleImpl(minX,maxX,minY,maxY);\n}\n"}
{"nl": "notify that abnormalstate is setted in effectcontroller", "code": "public void notifyAbnormalSettedObservers(AbnormalState state){\n  notifyObservers(ObserverType.ABNORMALSETTED,state);\n}\n"}
{"nl": "Read a double number from the expressionIterator position in expression", "code": "private Double readDoubleNumberFromExpression(String expression) throws ParsingException {\n  Character c=expression.charAt(expressionIterator);\n  Double number=getDoubleDigit(c);\n  while (++expressionIterator < expression.length()) {\n    c=expression.charAt(expressionIterator);\n    if (!Character.isDigit(c)) {\n      break;\n    }\n    number*=10;\n    number+=getDoubleDigit(c);\n  }\n  if (c == '.') {\n    if (++expressionIterator == expression.length()) {\n      throw new ParsingException(ILLEGAL_POSITION_IN_EXPRESSION + c);\n    }\n    c=expression.charAt(expressionIterator);\n    double placeFactor=10;\n    number+=getDoubleDigit(c) / placeFactor;\n    if (!Character.isDigit(c)) {\n      throw new ParsingException(ILLEGAL_POSITION_IN_EXPRESSION + c);\n    }\n    while (++expressionIterator < expression.length()) {\n      c=expression.charAt(expressionIterator);\n      if (!Character.isDigit(c)) {\n        break;\n      }\n      placeFactor*=10;\n      number+=getDoubleDigit(c) / placeFactor;\n    }\n  }\n  --expressionIterator;\n  return number;\n}\n"}
{"nl": "move the selected interval of sequences up one", "code": "public static boolean moveUp(Alignment alignment,int firstRow,int lastRow){\n  lastRow=Math.min(lastRow,alignment.getNumberOfSequences());\n  if (firstRow <= 0 || firstRow > lastRow)   return false;\n else {\n    Integer[] array=new Integer[alignment.getNumberOfSequences()];\n    for (int i=0; i < alignment.getNumberOfSequences(); i++)     array[i]=alignment.getOrder(i);\n    int replaced=array[firstRow - 1];\n    System.arraycopy(array,firstRow,array,firstRow - 1,lastRow + 1 - firstRow);\n    array[lastRow]=replaced;\n    alignment.setOrder(Arrays.asList(array));\n    return true;\n  }\n}\n"}
{"nl": "More formal name for product-of-sums", "code": "public static <K>Expression<K> toCNF(Expression<K> root){\n  return toPos(root);\n}\n"}
{"nl": "Reading macro id", "code": "@Override protected void readImpl(){\n  macroPosition=readC();\n}\n"}
{"nl": "Return a list of mutual friends (up to 20), if any", "code": "public FriendsGetRequestsQuery needMutual(Boolean value){\n  return unsafeParam(\"need_mutual\",value);\n}\n"}
{"nl": "Opens the browser to the Official RewiMod twitter timeline", "code": "public static void clickButtonTwitter(){\n  RewiMod.getInstance().openUrl(\"https://twitter.com/RewiMod\");\n}\n"}
{"nl": "Handles receiving this packet", "code": "@Override public void processPacket(INetHandler netHandler){\n  channel.handle(packet);\n}\n"}
{"nl": "register one global notation", "code": "public void addGlobalNotationDecl(XSNotationDecl decl){\n  fGlobalNotationDecls.put(decl.fName,decl);\n  decl.setNamespaceItem(this);\n}\n"}
{"nl": "Is the bundled (incomplete) SDK install adequate or do we need to find a valid install?", "code": "protected boolean requireRecentSdk(){\n  return false;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set nodeSize=\");\n  int width=np.getInt(0,1000);\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof GraphView) {\n    boolean changed=false;\n    GraphView viewer=(GraphView)getViewer();\n    for (    Node v : viewer.getSelectedNodes()) {\n      viewer.setHeight(v,width);\n      viewer.setWidth(v,width);\n      changed=true;\n    }\n    if (changed) {\n      viewer.repaint();\n    }\n  }\n}\n"}
{"nl": "Initialize an AirMapTfrProperties from JSON", "code": "public AirMapTfrProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n"}
{"nl": "write the current header data", "code": "public void write(IOutputWriter writer) throws IOException {\n  writer.writeInt(RMA2File.MAGIC_NUMBER);\n  writer.writeInt(3);\n  writer.writeString(getFormatDef());\n  FormatDefinition formatDefinition=FormatDefinition.fromString(getFormatDef());\n  formatDefinition.startWrite();\n  for (  Pair<String,FormatDefinition.Type> pair : formatDefinition.getList()) {\n    if (pair.getFirst().equals(\"Creator\"))     formatDefinition.write(writer,\"Creator\",getCreator());\n else     if (pair.getFirst().equals(\"CreationDate\"))     formatDefinition.write(writer,\"CreationDate\",getCreationDate());\n  }\n  formatDefinition.finishWrite();\n}\n"}
{"nl": "NON-DOM method for debugging convenience", "code": "@Override public String toString(){\n  return getName() + \"=\" + \"\\\"\"+ getValue()+ \"\\\"\";\n}\n"}
{"nl": "Perform an inspect command to check the container's run status", "code": "protected void verifyContainerIsRunning(final boolean expectedState) throws Throwable {\n  verifyContainerProperty(\"State.Running\",expectedState);\n}\n"}
{"nl": "Creates new error", "code": "public DuplicateAionObjectException(String message,Throwable cause){\n  super(message,cause);\n}\n"}
{"nl": "Set need source", "code": "public PagesGetQuery needSource(Boolean value){\n  return unsafeParam(\"need_source\",value);\n}\n"}
{"nl": "A MaybeConsumer that does nothing, with a particular generic type", "code": "public static <T>MaybeConsumer<T> noop(){\n  return (MaybeConsumer<T>)NOOP;\n}\n"}
{"nl": "Checks if the TEST mode is on", "code": "private boolean isTestMode(){\n  return ((System.getProperty(\"c2mon.server.testMode\")) != null && (System.getProperty(\"c2mon.server.testMode\").equals(\"true\")));\n}\n"}
{"nl": "print in reverse order", "code": "static public void reversePrint(Result[] result){\n  for (int i=(result.length - 1); i >= 0; i--) {\n    System.err.println(\"Gen\" + result[i].getGenNum() + \":   scale of \"+ result[i].getScale()+ \"  \"+ result[i].getRemark());\n  }\n}\n"}
{"nl": "Cache TrueTime initialization information in SharedPreferences This can help avoid additional TrueTime initialization on app kills", "code": "public synchronized TrueTime withSharedPreferences(Context context){\n  DISK_CACHE_CLIENT.enableDiskCaching(context);\n  return INSTANCE;\n}\n"}
{"nl": "draw the legend", "code": "public void paint(Graphics graphics){\n  super.paint(graphics);\n  Graphics2D gc=(Graphics2D)graphics;\n  gc.setColor(Color.WHITE);\n  gc.fill(getVisibleRect());\n  draw(gc,null);\n}\n"}
{"nl": "title list", "code": "public SM_TITLE_INFO(Player player){\n  this.action=0;\n  this.titleList=player.getTitleList();\n}\n"}
{"nl": "recursively visit all nodes and set edge weights", "code": "private int visitNodesRec(Node v,EdgeMap<Integer> edgeWeight){\n  int maxValue=0;\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    if (edgeWeight.get(e) == null) {\n      edgeWeight.set(e,visitNodesRec(e.getTarget(),edgeWeight) + 1);\n    }\n    maxValue=Math.max(maxValue,edgeWeight.get(e));\n  }\n  return maxValue;\n}\n"}
{"nl": "Returns true if the modelImpl is a wrapper of primitive type like string, Float etc; false otherwise", "code": "private boolean isPrimitiveTypeWrapper(ModelImpl modelImpl){\n  return (modelImpl.getProperties() == null && modelImpl.getAdditionalProperties() == null) && !Strings.isNullOrEmpty(modelImpl.getType()) && !\"object\".equalsIgnoreCase(modelImpl.getType())&& WellKnownTypeUtils.isPrimitiveType(modelImpl.getType());\n}\n"}
{"nl": "normalization the vector", "code": "public Math_Vector nor(){\n  double len=len();\n  if (len != 0) {\n    this.x/=len;\n    this.y/=len;\n  }\n  return this;\n}\n"}
{"nl": "add all jars under lib/optional/spring", "code": "private void addOptionalSpringLibs(StringBuilder classpath){\n  addLibs(classpath,gsLibOptional + \"spring\");\n}\n"}
{"nl": "Start the connector", "code": "@Override public void start(Map<String,String> props){\n  fProperties=props;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public UScriptRun(String text){\n  reset(text);\n}\n"}
{"nl": "This will return the squared loss of the given points", "code": "public static double squaredLoss(double[] x,double[] y,double w_0,double w_1){\n  double sum=0;\n  for (int j=0; j < x.length; j++) {\n    sum+=Math.pow((y[j] - (w_1 * x[j] + w_0)),2);\n  }\n  return sum;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getNumberOfSequences() > 0 && viewer.getSelectedBlock().isSelected() && viewer.getSelectedBlock().getLastRow() < viewer.getAlignment().getNumberOfSequences() - 1;\n}\n"}
{"nl": "Add an Android library, along with any recursive library dependencies", "code": "private static void addAndroidLibrary(@NotNull AndroidLibrary library,@NotNull DependencySet dependencies,@NotNull DependencyScope scope,@NotNull Set<File> unique,boolean supportsDependencyGraph){\n  File folder=library.getFolder();\n  if (unique.contains(folder)) {\n    return;\n  }\n  unique.add(folder);\n  ModuleDependency mainDependency=null;\n  String gradleProjectPath=library.getProject();\n  if (isNotEmpty(gradleProjectPath)) {\n    mainDependency=addAndroidModule(library,gradleProjectPath,dependencies,scope,unique,supportsDependencyGraph);\n  }\n  if (mainDependency == null) {\n    dependencies.add(createLibraryDependency(library,scope));\n    addTransitiveDependencies(library,dependencies,scope,unique,supportsDependencyGraph);\n  }\n else {\n    LibraryDependency backup=createLibraryDependency(library,scope);\n    mainDependency.setBackupDependency(backup);\n  }\n}\n"}
{"nl": "Set access key", "code": "public PhotosCreateCommentQuery accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n"}
{"nl": "Unregister filter (it won't get anymore events)", "code": "public void remove(RequestFilter filter){\n  filters.remove(filter);\n}\n"}
{"nl": "parse a line of SAM format", "code": "public void parse(byte[] aLine,int length) throws IOException {\n  int numberOfTokens=0;\n  int start=0;\n  while (start < length) {\n    int end=start;\n    while (aLine[end] != '\\t' && end < length)     end++;\n    if (numberOfTokens == tokens.length) {\n      String[] tmp=new String[2 * tokens.length];\n      System.arraycopy(tokens,0,tmp,0,tokens.length);\n      tokens=tmp;\n    }\n    tokens[numberOfTokens++]=Basic.toString(aLine,start,end - start);\n    start=end + 1;\n  }\n  parse(tokens,numberOfTokens);\n}\n"}
{"nl": "Method to read in data from an allowed input source/format and perform the query", "code": "public void performQuery() throws IOException, PIRException {\n  logger.info(\"Performing query: \");\n  JavaRDD<MapWritable> inputRDD;\nswitch (dataInputFormat) {\ncase InputFormatConst.BASE_FORMAT:\n    inputRDD=readData();\n  break;\ncase InputFormatConst.ES:\ninputRDD=readDataES();\nbreak;\ndefault :\nthrow new PIRException(\"Unknown data input format \" + dataInputFormat);\n}\nperformQuery(inputRDD);\n}\n"}
{"nl": "Set a set of String values in the preferences editor, to be written", "code": "public static void putStringSet(String key,Set<String> values){\n  prefs.edit().putStringSet(key,values).commit();\n}\n"}
{"nl": "Loads the set of interfaces that are used to implement Android callback handlers from a file on disk", "code": "private Set<String> loadAndroidCallbacks() throws IOException {\n  Set<String> androidCallbacks=new HashSet<String>();\n  BufferedReader rdr=null;\n  try {\n    String fileName=JadeCfg.getCallback_file();\n    if (!new File(fileName).exists()) {\n      fileName=\"../soot-infoflow-android/AndroidCallbacks.txt\";\n      if (!new File(fileName).exists())       throw new RuntimeException(\"Callback definition file not found\");\n    }\n    rdr=new BufferedReader(new FileReader(fileName));\n    String line;\n    while ((line=rdr.readLine()) != null)     if (!line.isEmpty())     androidCallbacks.add(line);\n  }\n  finally {\n    if (rdr != null)     rdr.close();\n  }\n  return androidCallbacks;\n}\n"}
{"nl": "Issue type recognition for specified test item from", "code": "TestItem awareTestItemIssueTypeFromStatus(final TestItem testItem,final Issue providedIssue,final Project project){\n  if (FAILED.equals(testItem.getStatus()) || SKIPPED.equals(testItem.getStatus())) {\n    if (null != providedIssue) {\n      verifyIssue(testItem.getId(),providedIssue,project.getConfiguration());\n      String issueType=providedIssue.getIssueType();\n      if (!issueType.equalsIgnoreCase(NOT_ISSUE_FLAG.getValue())) {\n        testItem.setIssue(new TestItemIssue(project.getConfiguration().getByLocator(issueType).getLocator(),providedIssue.getComment()));\n      }\n    }\n else {\n      testItem.setIssue(new TestItemIssue());\n      Launch launch=launchRepository.findOne(testItem.getLaunchRef());\n      expect(launch,notNull()).verify(LAUNCH_NOT_FOUND,testItem.getLaunchRef());\n      if (Mode.DEFAULT.equals(launch.getMode()) && project.getConfiguration().getIsAutoAnalyzerEnabled())       finalizeFailed(testItem);\n    }\n  }\n  return testItem;\n}\n"}
{"nl": "Mouse moved handling", "code": "public void mouseMoved(MouseEvent e){\n  mIsControlDown=e.isControlDown();\n  mIsShiftDown=e.isShiftDown();\n  mIsAltDown=e.isAltDown();\n  float x=mViewTransform.getAndroidFX(e.getX());\n  float y=mViewTransform.getAndroidFY(e.getY());\n  mouseMoved(x,y);\n}\n"}
{"nl": "Finds all repeated elements, or basically the ones with the same id so they can be treated later on", "code": "private void findRepeatedDataItems(){\n  for (  JsTreeDataItem dataItem : this) {\n    Integer timesRepeated=0;\n    if (hasTreeDataItem(dataItem)) {\n      if (sameIdDataItemsMap.containsKey(dataItem.getOriginalId()))       timesRepeated=sameIdDataItemsMap.get(dataItem.getOriginalId());\n      timesRepeated++;\n      sameIdDataItemsMap.put(dataItem.getOriginalId(),timesRepeated);\n    }\n  }\n}\n"}
{"nl": "Selects languages on Languages view", "code": "public CreateSiteWindow selectLanguages(List<String> languages){\n  clickLanguageCheckBox(\"English (United Kingdom)\");\n  languages.forEach(null);\n  return this;\n}\n"}
{"nl": "Build the RecyclerView", "code": "public RecyclerView build(){\n  return mRecyclerView;\n}\n"}
{"nl": "Check if user folder is present", "code": "public String checkIfUserPresent(String userName) throws UnsupportedEncodingException, ParserConfigurationException, IOException, SAXException, DASTProxyException, XPathExpressionException {\n  LOGGER.debug(\"Inside checkIfUserPresent....1\");\n  final XPathFactory factory=XPathFactory.newInstance();\n  final XPath xpath=factory.newXPath();\n  xpath.setNamespaceContext(_nsContext);\n  Document response=null;\n  try {\n    response=sendRESTRequestToASE(AppScanConstants.APPSCAN_USERS_FOLDER_LIST_RELATIVE_URL,\"\");\n    LOGGER.debug(\"Inside checkIfUserPresent....2...response=\" + response);\n  }\n catch (  ConnectException ce) {\n    LOGGER.error(\"Could not find the user with userId=\" + userName + \" in the Backend.\");\n    LOGGER.error(ce);\n    return null;\n  }\n  LOGGER.debug(\"Check if user exists in the system. \");\n  checkForError(response,null);\n  LOGGER.debug(\"Inside checkIfUserPresent....2.1\");\n  if (userName.contains(\"CORP\\\\\")) {\n    userName=userName.substring(userName.indexOf(\"\\\\\") + 1);\n  }\n  LOGGER.debug(\"Inside checkIfUserPresent....3\");\n  String userId=(String)xpath.evaluate(\"//ase:folder[ase:contact='\" + userName + \"']/ase:id/text()\",response,XPathConstants.STRING);\n  LOGGER.debug(\"Inside checkIfUserPresent....4...userId=\" + userId);\n  if (AppScanUtils.isNotNull(userId)) {\n    return userId;\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getLength() > 0;\n}\n"}
{"nl": "md5 file", "code": "public static String md5File(String fullFilename){\n  String result=null;\n  if (fullFilename != null) {\n    try {\n      result=md5File(new FileInputStream(fullFilename));\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n  return result;\n}\n"}
{"nl": "Return only current user's friends", "code": "public PollsGetVotersQuery friendsOnly(Boolean value){\n  return unsafeParam(\"friends_only\",value);\n}\n"}
{"nl": "run the program", "code": "static public void main(String args[]) throws Exception {\n  ResamplingMethod compare=new ResamplingMethod();\n  if (args.length > 0)   compare.setParametersFromCommandLine(args);\n else   compare.setParametersFromConsole();\n  compare.run();\n}\n"}
{"nl": "Set up the sync adapter", "code": "public SyncAdapter(Context context,boolean autoInitialize){\n  super(context,autoInitialize);\n  mContentResolver=context.getContentResolver();\n  mBroadcastManager=LocalBroadcastManager.getInstance(context);\n  mPrefs=PreferenceManager.getDefaultSharedPreferences(context);\n  mMarvelApi=MarvelApi.getInstance();\n}\n"}
{"nl": "Load the specified value from the shared preferences", "code": "public String loadString(String key,String defValue){\n  return prefs.getString(key,defValue);\n}\n"}
{"nl": "example for subscribing to observable, which emits many events", "code": "private void observeChangingBooks(){\n  Observable<Book> observable=bookRepository.observeChangingBooks().observeOn(AndroidSchedulers.mainThread());\n  subscribe(observable,null,null,null);\n}\n"}
{"nl": "Create a ServiceClient instance using the given SSLContext", "code": "public static ServiceClient createServiceClient(SSLContext sslContext){\n  return createServiceClient(sslContext,0);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetLyricsQuery(VkApiClient client,UserActor actor,int lyricsId){\n  super(client,\"audio.getLyrics\",Lyrics.class);\n  accessToken(actor.getAccessToken());\n  lyricsId(lyricsId);\n}\n"}
{"nl": "Return a list of mutual friends (up to 20)", "code": "public FriendsGetRequestsQueryWithExtended needMutual(Boolean value){\n  return unsafeParam(\"need_mutual\",value);\n}\n"}
{"nl": "Set privacy view", "code": "public PhotosEditAlbumQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "Maps fields to dynamic schema", "code": "public Map<String,Object> mapFields(Map<String,Object> fields,boolean eval){\n  Map<String,Object> result=new HashMap<>();\n  fields.forEach(null);\n  return result;\n}\n"}
{"nl": "Creates a new ClassPath instance that can load classes from the given dex files", "code": "public ClassPath(@Nonnull Iterable<DexFile> classPath,boolean checkPackagePrivateAccess){\n  Iterable<DexFile> dexFiles=Iterables.concat(classPath,Lists.newArrayList(getBasicClasses()));\n  unknownClass=new UnknownClassProto(this);\n  loadedClasses.put(unknownClass.getType(),unknownClass);\n  this.checkPackagePrivateAccess=checkPackagePrivateAccess;\n  loadPrimitiveType(\"Z\");\n  loadPrimitiveType(\"B\");\n  loadPrimitiveType(\"S\");\n  loadPrimitiveType(\"C\");\n  loadPrimitiveType(\"I\");\n  loadPrimitiveType(\"J\");\n  loadPrimitiveType(\"F\");\n  loadPrimitiveType(\"D\");\n  loadPrimitiveType(\"L\");\n  for (  DexFile dexFile : dexFiles) {\n    for (    ClassDef classDef : dexFile.getClasses()) {\n      ClassDef prev=availableClasses.get(classDef.getType());\n      if (prev == null) {\n        availableClasses.put(classDef.getType(),classDef);\n      }\n    }\n  }\n}\n"}
{"nl": "Validate provided issue sub-type from RQ and update project settings object if validations are OK", "code": "private void validateAndUpdate(UpdateOneIssueSubTypeRQ one,Project.Configuration settings){\n  TestItemIssueType expectedType=fromValue(one.getTypeRef());\n  expect(expectedType,notNull()).verify(ISSUE_TYPE_NOT_FOUND,one.getTypeRef());\n  StatisticSubType exist=settings.getByLocator(one.getId());\n  expect(exist,notNull()).verify(ISSUE_TYPE_NOT_FOUND,one.getId());\n  expect(exist.getTypeRef().equals(expectedType.getValue()) || exist.getTypeRef().equals(IssueCounter.GROUP_TOTAL),equalTo(true)).verify(FORBIDDEN_OPERATION,\"You cannot change sub-type references to global type.\");\n  if (Sets.newHashSet(AUTOMATION_BUG.getLocator(),PRODUCT_BUG.getLocator(),SYSTEM_ISSUE.getLocator(),NO_DEFECT.getLocator(),TO_INVESTIGATE.getLocator(),IssueCounter.GROUP_TOTAL).contains(exist.getLocator())) {\n    fail().withError(FORBIDDEN_OPERATION,\"You cannot edit predefined global issue types.\");\n  }\n  StatisticSubType type=new StatisticSubType(one.getId(),one.getTypeRef(),one.getLongName(),one.getShortName(),one.getColor());\n  settings.setByLocator(type);\n}\n"}
{"nl": "Process the result of CopyAndUploadContentUrisTask", "code": "@Override public void onTmpFilesCopied(ResultCode result){\n  dismissLoadingDialog();\n  finish();\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext() throws IOException {\n  return daa2QuerySAMIterator.hasNext();\n}\n"}
{"nl": "Intersects 2 sets and returns the result as a list", "code": "private static <T>List<T> asList(Set<T> a,Set<T> b){\n  if (a == null || b == null || a.isEmpty() || b.isEmpty()) {\n    return Collections.<T>emptyList();\n  }\n  if (a.size() < b.size()) {\n    List<T> c=new ArrayList<T>(a);\n    c.retainAll(b);\n    return c;\n  }\n else {\n    List<T> c=new ArrayList<T>(b);\n    c.retainAll(a);\n    return c;\n  }\n}\n"}
{"nl": "Sets the visiblity of the view", "code": "public static void toggleViewVisibility(View view,boolean setVisible){\n  if (view == null) {\n    return;\n  }\n  int visibility=View.GONE;\n  if (setVisible) {\n    visibility=View.VISIBLE;\n  }\n  view.setVisibility(visibility);\n}\n"}
{"nl": "Determines if any step has been completed", "code": "public boolean isAnyStepCompleted(){\n  for (  boolean completedStep : completedSteps) {\n    if (completedStep) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Creates a new instance of INSECTWordDocument", "code": "public SimpleTextDocument(){\n  Graph=new DocumentWordGraph();\n  Histogram=new DocumentWordHistogram();\n}\n"}
{"nl": "download the file in the url to f", "code": "public static int download(String url,File f){\n  log.debug(\"url=\\\"\" + url + \"\\\"\");\n  String[] ss=url.split(\" \");\n  url=ss[ss.length - 1];\n  DefaultHttpClient client=getClient(url);\n  if (client != null) {\n    HttpGet get=null;\n    try {\n      get=new HttpGet(url);\n      if (!get.containsHeader(\"User-Agent\")) {\n        get.addHeader(\"User-Agent\",UA);\n      }\n      log.debug(\"get url=\" + url);\n      HttpResponse resp=client.execute(get);\n      if (resp.getStatusLine().getStatusCode() == 200) {\n        HttpEntity e=resp.getEntity();\n        InputStream in=e.getContent();\n        f.getParentFile().mkdirs();\n        FileOutputStream out=new FileOutputStream(f);\n        return IOUtil.copy(in,out);\n      }\n      return 0;\n    }\n catch (    Exception e) {\n      log.error(\"\\\"\" + url + \"\\\"\",e);\n    }\n finally {\n      if (get != null)       get.abort();\n    }\n  }\n  return 0;\n}\n"}
{"nl": "verifies that two matrices are close (1-norm)", "code": "protected void assertClose(String msg,RealMatrix m,RealMatrix n,double tolerance){\n  Assert.assertTrue(msg,m.subtract(n).getNorm() < tolerance);\n}\n"}
{"nl": "Calculate XenDesktop memory requirements for deployment", "code": "public static int calculateXenMemory(int deliveryControllerCount,int vCenterServerCount){\n  final int dc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.controller.memory.default\")) * deliveryControllerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.vcenter.memory.default\")) * vCenterServerCount;\n  return dc + vc;\n}\n"}
{"nl": "Update test-items of specified launches with new LaunchID", "code": "private List<TestItem> updateChildrenOfLaunch(String launchId,Set<String> launches,boolean extendDescription){\n  List<TestItem> testItems=launches.stream().map(null).flatMap(null).collect(toList());\n  testItemRepository.save(testItems);\n  return testItems.stream().filter(null).collect(toList());\n}\n"}
{"nl": "Create ranged empty timeline billet", "code": "private Map<String,ChartObject> buildRange(List<ChartObject> base,Period period){\n  final LongSummaryStatistics statistics=base.stream().mapToLong(null).summaryStatistics();\n  final DateTime start=new DateTime(statistics.getMin());\n  final DateTime end=new DateTime(statistics.getMax());\n  DateTime intermediate=start;\n  final LinkedHashMap<String,ChartObject> map=new LinkedHashMap<>();\n  if (base.isEmpty())   return map;\n  while (intermediate.isBefore(end)) {\n    map.put(intermediate.toString(DATE_PATTERN),createChartObject(base.get(0)));\nswitch (period) {\ncase DAY:\n      intermediate=intermediate.plusDays(1);\n    break;\ncase WEEK:\n  intermediate=intermediate.plusDays(1);\nbreak;\ncase MONTH:\nintermediate=intermediate.plusMonths(1);\nbreak;\n}\n}\nmap.put(end.toString(DATE_PATTERN),createChartObject(base.get(0)));\nreturn map;\n}\n"}
{"nl": "Required for Externalizable", "code": "public MirrorOperationStatisticsImpl(){\n}\n"}
{"nl": "Parses a type descriptor to produce the Type instance with a matching representation", "code": "static Type<?> parseTypeDescriptor(final String typeDescriptor) throws InvalidTypeDescriptorException {\n  final ClassLoader cl=Thread.currentThread().getContextClassLoader();\n  StringBuilder descriptor=new StringBuilder(typeDescriptor);\n  int split=descriptor.indexOf(\"<\");\n  if (split >= 0) {\n    String className=descriptor.substring(0,split);\n    if (!descriptor.subSequence(descriptor.length() - 1,descriptor.length()).equals(\">\")) {\n      throw new InvalidTypeDescriptorException();\n    }\n else {\n      descriptor.setLength(descriptor.length() - 1);\n      descriptor.replace(0,split + 1,\"\");\n    }\n    String[] subDescriptors=splitTypeArguments(descriptor.toString());\n    Type<?>[] typeArguments=new Type<?>[subDescriptors.length];\n    int index=-1;\n    for (    String subDescriptor : subDescriptors) {\n      typeArguments[++index]=parseTypeDescriptor(subDescriptor);\n    }\n    return TypeFactory.valueOf(loadClass(className,cl),typeArguments);\n  }\n else {\n    return TypeFactory.valueOf(loadClass(typeDescriptor,cl));\n  }\n}\n"}
{"nl": "Sets an event listener that uses annotations", "code": "public SimpleAsyncPollingContainerConfigurer eventListenerAnnotation(Object eventListener){\n  AnnotationEventListenerAdapter annotationEventListenerAdapter=new AnnotationEventListenerAdapter();\n  annotationEventListenerAdapter.setDelegate(eventListener);\n  annotationEventListenerAdapter.afterPropertiesSet();\n  pollingEventListenerContainer.setEventListener(annotationEventListenerAdapter);\n  return this;\n}\n"}
{"nl": "head view to back", "code": "@Override protected void onScrollChanged(int l,int t,int oldl,int oldt){\n  super.onScrollChanged(l,t,oldl,oldt);\n  if (mHeaderView == null)   return;\n  if (mHeaderView.getTop() < 0 && mHeaderView.getLayoutParams().height > mHeaderViewHeight) {\n    mHeaderView.getLayoutParams().height+=mHeaderView.getTop();\n    mOnRefreshDistanceListener.refreshDistance(mHeaderView.getTop());\n    mHandler.obtainMessage(1,mHeaderView.getTop(),0,mHeaderView).sendToTarget();\n  }\n}\n"}
{"nl": "Now we know the dimensions of the view, setup the bounds and paints", "code": "@Override public void onAttachedToWindow(){\n  super.onAttachedToWindow();\n  setupBounds();\n  setupPaints();\n  invalidate();\n}\n"}
{"nl": "Show error view with a button when something goes wrong and prompting the user to try again", "code": "public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener){\n  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());\n}\n"}
{"nl": "Called by the system when the user grants permissions", "code": "public void onRequestPermissionResult(int requestCode,String[] permissions,int[] grantResults) throws JSONException {\n}\n"}
{"nl": "send quit command to server and close socket", "code": "public static void closeSocket(Socket sock) throws IOException {\n  byte[] header;\n  header=packHeader(FDFS_PROTO_CMD_QUIT,0,(byte)0);\n  sock.getOutputStream().write(header);\n  sock.close();\n}\n"}
{"nl": "The default quality is OK", "code": "public SourceDataTagQuality(){\n  this.qualityCode=SourceDataTagQualityCode.OK;\n}\n"}
{"nl": "Delete the data in mongo by the query", "code": "public static long delete(String collection,Bson query){\n  try {\n    MongoCollection<Document> db=MongoHelper.getCollection(collection);\n    if (db != null) {\n      DeleteResult r=db.deleteMany(query);\n      return r.getDeletedCount();\n    }\n    return -1;\n  }\n catch (  Exception e) {\n    if (log.isErrorEnabled())     log.error(e.getMessage(),e);\n  }\n  return -1;\n}\n"}
{"nl": "Alarm id: 2000 datTagId: 1000", "code": "public static Configuration createAlarm(){\n  Configuration configuration=new Configuration();\n  Alarm alarm=Alarm.create(\"faultFamily\",\"faultMember\",1337,new ValueCondition(Integer.class,1)).id(2000L).dataTagId(1000L).build();\n  configuration.addEntity(alarm);\n  return configuration;\n}\n"}
{"nl": "Asserts that there is a current variant associated to the given tmTextUnit and locales", "code": "protected void assertCurrentVariantWasSet(String errorMessage,List<Long> localeIds,Long tmTextUnitId){\n  for (  Long localeId : localeIds) {\n    TMTextUnitCurrentVariant currentVariant=tmTextUnitCurrentVariantRepository.findByLocale_IdAndTmTextUnit_Id(localeId,tmTextUnitId);\n    assertNotNull(errorMessage,currentVariant);\n  }\n}\n"}
{"nl": "Write a string without compression", "code": "public void writeStringNoCompression(String str) throws IOException {\n  if (str == null) {\n    writeInt(0);\n  }\n else {\n    writeInt(str.length());\n    for (int i=0; i < str.length(); i++)     io.write((byte)str.charAt(i));\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveRemoveLinkQuery(VkApiClient client,UserActor actor,String linkId){\n  super(client,\"fave.removeLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  linkId(linkId);\n}\n"}
{"nl": "read packed sequence from buffer", "code": "public static byte[] readPackedSequence(ByteInputBuffer buffer,int query_len,int bits){\n  int size=(query_len * bits + 7) / 8;\n  return buffer.readBytes(size);\n}\n"}
{"nl": "Return a new AnyVal that matches the given head of a list and the given tail of a list", "code": "static <T>AnyVal<Object> headTail(T head,ConsList<T> tail){\n  return new AnyConsImpl(head,null,tail,null);\n}\n"}
{"nl": "dispatch job canceled event for job associated with given execution entity", "code": "protected void dispatchJobCanceledEvents(ExecutionEntity activityExecution){\n  if (activityExecution != null) {\n    List<JobEntity> jobs=activityExecution.getJobs();\n    for (    JobEntity job : jobs) {\n      if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n        Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_CANCELED,job));\n      }\n    }\n    List<TimerJobEntity> timerJobs=activityExecution.getTimerJobs();\n    for (    TimerJobEntity job : timerJobs) {\n      if (Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n        Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.JOB_CANCELED,job));\n      }\n    }\n  }\n}\n"}
{"nl": "Constructs new server packet", "code": "protected AionServerPacket(){\n  super();\n  setOpcode(ServerPacketsOpcodes.getOpcode(getClass()));\n}\n"}
{"nl": "Attempt to construct an absolute URI", "code": "private String makeAbsolute(String uri){\n  if (uri == null) {\n    uri=\"\";\n  }\n  try {\n    URL url=new URL(uri);\n    return url.toString();\n  }\n catch (  MalformedURLException mue) {\n    try {\n      URL fileURL=FileURL.makeURL(uri);\n      return fileURL.toString();\n    }\n catch (    MalformedURLException mue2) {\n      return uri;\n    }\n  }\n}\n"}
{"nl": "Prepare to iterate through the given SAM records, skipping non-primary alignments", "code": "public SamLocusIterator(final SamReader samReader,final IntervalList intervalList,final boolean useIndex){\n  this.samReader=samReader;\n  this.useIndex=useIndex;\n  if (intervalList != null) {\n    intervals=intervalList.uniqued().getIntervals();\n    this.referenceSequenceMask=new IntervalListReferenceSequenceMask(intervalList);\n  }\n else {\n    intervals=null;\n    this.referenceSequenceMask=new WholeGenomeReferenceSequenceMask(samReader.getFileHeader());\n  }\n}\n"}
{"nl": "Sort order", "code": "public WallGetCommentsQuery sort(WallGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Method to check valid malaysia mobile number", "code": "public static boolean isValidMobile(@NonNull String mobile){\n  if (!TextUtils.isEmpty(mobile) && mobile.length() == 10) {\n    if (mobile.startsWith(\"9\") || mobile.startsWith(\"8\") || mobile.startsWith(\"7\")) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Saves an Array of Entries to the specified location on the sdcard", "code": "public static void saveToSdCard(List<Entry> entries,String path){\n  File sdcard=Environment.getExternalStorageDirectory();\n  File saved=new File(sdcard,path);\n  if (!saved.exists()) {\n    try {\n      saved.createNewFile();\n    }\n catch (    IOException e) {\n      Log.e(LOG,e.toString());\n    }\n  }\n  try {\n    BufferedWriter buf=new BufferedWriter(new FileWriter(saved,true));\n    for (    Entry e : entries) {\n      buf.append(e.getY() + \"#\" + e.getX());\n      buf.newLine();\n    }\n    buf.close();\n  }\n catch (  IOException e) {\n    Log.e(LOG,e.toString());\n  }\n}\n"}
{"nl": "Hide default dialog", "code": "public static void hideProgressDialog(){\n  hideProgressDialog(DEFAULT_TAG);\n}\n"}
{"nl": "TaskManager schedulers", "code": "public ScheduledFuture<?> scheduleTaskManager(Runnable r,long delay){\n  return schedule(r,delay);\n}\n"}
{"nl": "Should be called before starting tests, to save original location services values", "code": "@SuppressWarnings(\"deprecation\") void saveLocationServicesState(@NonNull ContentResolver contentResolver){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n    originalLocationProviders=Settings.Secure.getString(contentResolver,Settings.Secure.LOCATION_PROVIDERS_ALLOWED);\n  }\n else {\n    try {\n      originalLocationMode=Settings.Secure.getInt(contentResolver,Settings.Secure.LOCATION_MODE);\n    }\n catch (    Settings.SettingNotFoundException e) {\n      Log.e(TAG,\"Error reading location mode settings!\",e);\n    }\n  }\n}\n"}
{"nl": "List field should always assigned new list with one elment 1L", "code": "public void testListOfStringsField() throws Exception {\n  AnObject empty=new AnObject();\n  AnObject full=helper.fill(new AnObject());\n  Object value=getPropertyValue(full,\"listOfStringsField\");\n  assertTrue(value instanceof List);\n  assertFalse(((List)value).isEmpty());\n  assertTrue(helper.areEquals(full,full));\n  assertFalse(helper.areEquals(empty,full));\n}\n"}
{"nl": "connect or disconnect scrollbar of name panel with that of alignment panel", "code": "public void connectNamePanel2AlignmentPane(boolean connect){\n  if (connect)   namesScrollPane.getVerticalScrollBar().setModel(alignmentScrollPane.getVerticalScrollBar().getModel());\n else   namesScrollPane.getVerticalScrollBar().setModel(new DefaultBoundedRangeModel());\n}\n"}
{"nl": "read the fixed part of the reads block", "code": "public void read(IInputReader dataIndexReader) throws IOException {\n  for (  Object[] dataRecord : data) {\nswitch ((Character)dataRecord[1]) {\ncase 'i':\n      dataRecord[2]=dataIndexReader.readInt();\n    break;\ncase 'f':\n  dataRecord[2]=dataIndexReader.readFloat();\nbreak;\ncase 'l':\ndataRecord[2]=dataIndexReader.readLong();\nbreak;\ncase 'b':\ndataRecord[2]=(byte)dataIndexReader.read();\nbreak;\ncase 'B':\ndataRecord[2]=dataIndexReader.readByteByteInt();\nbreak;\ncase 'c':\ndataRecord[2]=dataIndexReader.readChar();\nbreak;\n}\n}\n}\n"}
{"nl": "length of array (file length / 8)", "code": "@Override public long limit(){\n  return fileLength >>> 3;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set colorMismatchesVsReference=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().getAlignmentPanel().setColorMismatchesVsReference(value);\n  ProgramProperties.put(\"ColorMismatches\",value);\n  viewer.repaint();\n}\n"}
{"nl": "Simply return the same measure as height for width", "code": "@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){\n  super.onMeasure(heightMeasureSpec,heightMeasureSpec);\n}\n"}
{"nl": "Rift despawn", "code": "public SM_RIFT_ANNOUNCE(int objectId){\n  this.objectId=objectId;\n  this.actionId=5;\n}\n"}
{"nl": "Checks that the two directories have the same structure and that their files content are the same", "code": "protected void checkDirectoriesContainSameContent(File dir1,File dir2) throws DifferentDirectoryContentException {\n  try {\n    Collection<File> listFiles1=FileUtils.listFiles(dir1,null,true);\n    Collection<File> listFiles2=FileUtils.listFiles(dir2,null,true);\n    if (listFiles1.size() != listFiles2.size()) {\n      throw new DifferentDirectoryContentException(\"Different file list size\");\n    }\n else {\n      logger.debug(\"Same file list size\");\n    }\n    for (    File file1 : listFiles1) {\n      Path relativePath1=dir1.toPath().relativize(file1.toPath());\n      logger.debug(\"Test file: {}\",relativePath1);\n      File file2=new File(dir2,relativePath1.toString());\n      if (!file2.exists()) {\n        throw new DifferentDirectoryContentException(\"File: \" + file2.toString() + \" doesn't exist\");\n      }\n      if (file2.isFile() && !Files.equal(file1,file2)) {\n        throw new DifferentDirectoryContentException(\"File: \" + file2.toString() + \" has different content\");\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new DifferentDirectoryContentException(\"Failed to compare \",e);\n  }\n}\n"}
{"nl": "get as string", "code": "public String toString(){\n  StringWriter w=new StringWriter();\n  w.write(\"Storage: \" + TextStoragePolicy.getDescription(textStoragePolicy) + \"\\n\");\n  for (int i=0; i < files.size(); i++) {\n    w.write(\" \" + i + \" -> \"+ files.get(i).getPath()+ \"\\n\");\n  }\n  return w.toString();\n}\n"}
{"nl": "WISHLIST DATA QUERIES", "code": "public WishlistDataCursor queryWishlistData(long id){\n  return mHelper.queryWishlistData(id);\n}\n"}
{"nl": "Adding current time zone offset", "code": "private Date addTimezoneOffsetToDate(Date date){\n  DatePair hourAndMinuteOffset=DateConverter.getCurrentTimeZoneOffset();\n  Calendar calendar=Calendar.getInstance();\n  calendar.setTime(date);\n  calendar.add(Calendar.HOUR,hourAndMinuteOffset.getHour());\n  calendar.add(Calendar.MINUTE,hourAndMinuteOffset.getMinute());\n  return calendar.getTime();\n}\n"}
{"nl": "Restore Recycler View Instance When Recreate or Configuration Changed", "code": "@Override protected void onRestoreInstanceState(Bundle savedInstanceState){\n  super.onRestoreInstanceState(savedInstanceState);\n  ArrayList<DataInfo> MeizhiData=savedInstanceState.getParcelableArrayList(SAVED_INSTANCE_MEIZHI);\n  mainPresenter.getData().addAll(MeizhiData);\n  meizhiRvAdapter.setMeizhiList(mainPresenter.getData());\n  if (mainPresenter.getData().size() == 0)   mainPresenter.loadMeizhi(true);\n}\n"}
{"nl": "The editor has been activated", "code": "public void activate(){\n  if (myScreenView != null) {\n    myScreenView.getModel().activate();\n  }\n}\n"}
{"nl": "Only for test purposes DON'T USE IT!", "code": "@VisibleForTesting void subscribeForTesting(){\n  mObservable.subscribe(mObserver);\n}\n"}
{"nl": "Stores legion data into db", "code": "private void storeLegion(Legion legion,boolean newLegion){\n  if (newLegion) {\n    addCachedLegion(legion);\n    DAOManager.getDAO(LegionDAO.class).saveNewLegion(legion);\n  }\n else {\n    DAOManager.getDAO(LegionDAO.class).storeLegion(legion);\n    DAOManager.getDAO(LegionDAO.class).storeLegionEmblem(legion.getLegionId(),legion.getLegionEmblem());\n  }\n}\n"}
{"nl": "List of requested catalog sections", "code": "public VideoGetCatalogQuery filters(List<VideoGetCatalogFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "Closes this audio player", "code": "public synchronized void close(){\n  try {\n    File file=new File(baseName);\n    InputStream is=new SequenceInputStream(outputList.elements());\n    AudioInputStream ais=new AudioInputStream(is,currentFormat,totBytes / currentFormat.getFrameSize());\n    if (false) {\n      System.out.println(\"Avail \" + ais.available());\n      System.out.println(\"totBytes \" + totBytes);\n      System.out.println(\"FS \" + currentFormat.getFrameSize());\n    }\n    System.out.println(\"Wrote synthesized speech to \" + baseName);\n    AudioSystem.write(ais,outputType,file);\n  }\n catch (  IOException ioe) {\n    System.err.println(\"Can't write audio to \" + baseName);\n  }\ncatch (  IllegalArgumentException iae) {\n    System.err.println(\"Can't write audio type \" + outputType);\n  }\n}\n"}
{"nl": "service helper methods", "code": "private void pauseServiceIntent(){\n  Intent intent=new Intent(getApplicationContext(),ScreenDimmer.class);\n  intent.setAction(TAG_PAUSE);\n  startService(intent);\n}\n"}
{"nl": "play arrow animation", "code": "private void rotationArrow(ItemCompanyBinding binding,boolean expanded){\n  float start, target;\n  if (expanded) {\n    start=0f;\n    target=90f;\n  }\n else {\n    start=90f;\n    target=0f;\n  }\n  ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(binding.arrow,View.ROTATION,start,target);\n  objectAnimator.setDuration(300);\n  objectAnimator.start();\n}\n"}
{"nl": "Read the basenameList from a file", "code": "public void load(String fileName) throws IOException {\n  BufferedReader bfr=new BufferedReader(new InputStreamReader(new FileInputStream(fileName),\"UTF-8\"));\n  if (bList == null)   bList=new Vector(DEFAULT_INCREMENT,DEFAULT_INCREMENT);\n  String line=bfr.readLine();\n  if (line.indexOf(\"FROM: \") != -1) {\n    line=line.substring(6);\n    String[] parts=new String[2];\n    parts=line.split(\"\\\\*\",2);\n    fromDir=parts[0];\n    fromExt=parts[1];\n  }\n else   if (!(line.matches(\"^\\\\s*$\")))   add(line);\n  while ((line=bfr.readLine()) != null) {\n    if (!(line.matches(\"^\\\\s*$\")))     add(line);\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"new attribute=\");\n  String attribute=np.getWordRespectCase();\n  np.matchIgnoreCase(\"position=\");\n  int position=np.getInt();\n  np.matchIgnoreCase(\";\");\n  final SamplesViewer viewer=((SamplesViewer)getViewer());\n  viewer.getSamplesTable().addNewColumn(position,attribute);\n}\n"}
{"nl": "Public page category", "code": "public GroupsEditQuery publicCategory(Integer value){\n  return unsafeParam(\"public_category\",value);\n}\n"}
{"nl": "Skip the default matching actions if any", "code": "public ErrorHandler skipDefaults(){\n  if (localContext != null) {\n    localContext.get().skipDefaults=true;\n  }\n  return this;\n}\n"}
{"nl": "Used when player see new player", "code": "public void sendEffectIconsTo(Player player){\n  List<Effect> effects=getAbnormalEffects();\n  PacketSendUtility.sendPacket(player,new SM_ABNORMAL_EFFECT(getOwner(),abnormals,effects));\n}\n"}
{"nl": "Field Declaration Creation", "code": "private void createFieldDecl(polyglot.ast.FieldDecl field){\n  int modifiers=Util.getModifier(field.fieldInstance().flags());\n  String name=field.fieldInstance().name();\n  soot.Type sootType=Util.getSootType(field.fieldInstance().type());\n  soot.SootField sootField=new soot.SootField(name,sootType,modifiers);\n  sootClass.addField(sootField);\n  if (field.fieldInstance().flags().isStatic()) {\n    if (field.init() != null) {\n      if (field.flags().isFinal() && (field.type().type().isPrimitive() || (field.type().type().toString().equals(\"java.lang.String\"))) && field.fieldInstance().isConstant()) {\n        addConstValTag(field,sootField);\n      }\n else {\n        if (staticFieldInits == null) {\n          staticFieldInits=new ArrayList<FieldDecl>();\n        }\n        staticFieldInits.add(field);\n      }\n    }\n  }\n else {\n    if (field.init() != null) {\n      if (fieldInits == null) {\n        fieldInits=new ArrayList<FieldDecl>();\n      }\n      fieldInits.add(field);\n    }\n  }\n  Util.addLnPosTags(sootField,field.position());\n}\n"}
{"nl": "new patch file to install, try install them with :patch process", "code": "public static void onReceiveUpgradePatch(Context context,String patchLocation){\n  Tinker.with(context).getPatchListener().onPatchReceived(patchLocation,true);\n}\n"}
{"nl": "Method to take an input json array format string and output an ArrayList", "code": "public static ArrayList<String> jsonArrayStringToArrayList(String jsonString){\n  String modString=jsonString.replaceFirst(\"\\\\[\",\"\");\n  modString=modString.replaceFirst(\"\\\\]\",\"\");\n  modString=modString.replaceAll(\"\\\"\",\"\");\n  String[] elements=modString.split(\"\\\\s*,\\\\s*\");\n  return new ArrayList<>(Arrays.asList(elements));\n}\n"}
{"nl": "apply the named computation to the taxonomy", "code": "public static int apply(Document doc,final ViewerBase viewer,String method,final Distances distances) throws IOException {\n  System.err.println(\"Computing \" + method + \" distances\");\n  double[][] vectors=computeVectors(doc,viewer);\n  int rank=distances.getNtax();\n  computeCorrelationMatrix(rank,vectors,distances);\n  convertCorrelationsToDistances(distances);\n  return vectors.length;\n}\n"}
{"nl": "Clear items and inserts between headers and footers", "code": "public void clearAllBetweenHeadersAndFooters(){\n  List<Insertion> headersAndFooters=new ArrayList<>();\n  headersAndFooters.addAll(getHeaders());\n  headersAndFooters.addAll(getFooters());\n  mInserts.clear();\n  getItems().clear();\n  mOnlyInsertsCount=0;\n  mOnlyItemsCount=0;\n  reAddAllInserts(headersAndFooters);\n  notifyIfNeed();\n}\n"}
{"nl": "init header", "code": "private boolean initHeader(int appId,String channel){\n  if (!TcHeadrHandle.isInit()) {\n    return TcHeadrHandle.initHeader(mContext,appId,channel);\n  }\n  return false;\n}\n"}
{"nl": "Increments the count of breached thresholds", "code": "public void incThresholdBreachedCount(){\n  breachedCount++;\n}\n"}
{"nl": "Changes the input stream in to an bgr based raveled(flattened) vector", "code": "public INDArray toRaveledTensor(InputStream is){\n  return toBgr(is).ravel();\n}\n"}
{"nl": "Register a new event", "code": "void register(Event event){\n  instance.events.put(event.getEvent(),event);\n  log(event.getEvent() + \" registered\");\n}\n"}
{"nl": "/*    ", "code": "@deprecated public int hashCode(){\n  int result=0;\n  int increment=Math.min(3,this.values.length / 16);\n  for (int i=0; i < this.values.length; i+=increment) {\n    result=result * 37 + this.values[i];\n  }\n  return result;\n}\n"}
{"nl": "create api instance", "code": "public <T>T create(Class<T> service){\n  return retrofit.create(service);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AuthSignupQuery(VkApiClient client,String firstName,String lastName,int clientId,String clientSecret,String phone){\n  super(client,\"auth.signup\",SignupResponse.class);\n  firstName(firstName);\n  lastName(lastName);\n  clientId(clientId);\n  clientSecret(clientSecret);\n  phone(phone);\n}\n"}
{"nl": "Callback for OnPreferenceClickListener", "code": "@Override public boolean onPreferenceClick(Preference preference){\n  if (!isResumed()) {\n    return false;\n  }\n  if (preference == mSyncEncryption && mProfileSyncService.isBackendInitialized()) {\n    if (mProfileSyncService.isPassphraseRequiredForDecryption()) {\n      displayPassphraseDialog();\n    }\n else {\n      displayPassphraseTypeDialog();\n      return true;\n    }\n  }\n else   if (preference == mManageSyncData) {\n    openDashboardTabInNewActivityStack();\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardUnfixTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.unfixTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n"}
{"nl": "create a long to integer map from the named file", "code": "@Override public ILong2IntegerMap create(IName2IdMap label2id,String fileName,ProgressListener progress) throws IOException, CanceledException {\n  final String name=(new File(fileName)).getName();\n  if (name.equals(\"gi_taxid-March2015X.bin\") || name.equals(\"gi2kegg-Nov2015X.bin\") || name.equals(\"gi2tax-Feb2016.bin\")|| name.equals(\"gi2tax-Feb2016X.bin\"))   NotificationsInSwing.showWarning(\"The mapping file '\" + name + \"' is known to contain errors, please use latest file from the MEGAN6 download page\");\n  if (Long2IntegerBinMap.isBinFile(fileName))   return new Long2IntegerBinMap(fileName);\n else   return new Long2IntegerFileBasedMap(label2id,fileName,progress != null ? progress : new ProgressPercentage());\n}\n"}
{"nl": "Return system albums with negative IDs", "code": "public PhotosGetAlbumsQuery needSystem(Boolean value){\n  return unsafeParam(\"need_system\",value);\n}\n"}
{"nl": "Limit the results of the query to certain categories", "code": "public void addCategoryLimitations(boolean include,Category... categories){\n  String[] categoryVelocityVarNames=new String[categories.length];\n  for (int i=0; i < categories.length; i++) {\n    categoryVelocityVarNames[i]=categories[i].getCategoryVelocityVarName();\n  }\n  addCategoryLimitations(include,categoryVelocityVarNames);\n}\n"}
{"nl": "Lifecycle Methods", "code": "@Override protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  Scoop.getInstance().apply(this);\n  setContentView(R.layout.activity_scoop_settings);\n  parseExtras(savedInstanceState);\n  setupActionBar();\n  setupRecyclerView();\n}\n"}
{"nl": "Set public category", "code": "public GroupsCreateQuery publicCategory(Integer value){\n  return unsafeParam(\"public_category\",value);\n}\n"}
{"nl": "package content layout", "code": "private void handleDefaultTopBar(){\n  ViewGroup.LayoutParams params=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);\n  setLayoutParams(params);\n  topBarView=iTopBarInterface.getDefaultTopBarView();\n  topBarView.setBackgroundColor(getColor(XUIConfig.getTopBarBgColor()));\n  topBarView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,(int)getDefaultTopBarHeight()));\n  addView(topBarView);\n  FrameLayout.LayoutParams userViewParams=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);\n  userViewParams.topMargin=(int)getContentTopMargin();\n  addView(mContentView,userViewParams);\n  initLoadContainer((int)getContentTopMargin());\n  addView(loadContainer);\n  handleTopBarShadow();\n}\n"}
{"nl": "gets a string representation", "code": "public String toString(){\n  StringBuilder buf=new StringBuilder();\n  buf.append(\" taxa=\").append(A.cardinality() + B.cardinality());\n  buf.append(\" weight=\").append((float)weight);\n  buf.append(\" confidence=\").append((float)confidence);\n  buf.append(\":\");\n  for (int a=A.nextSetBit(0); a != -1; a=A.nextSetBit(a + 1))   buf.append(\" \").append(a);\n  buf.append(\" |\");\n  for (int b=B.nextSetBit(0); b != -1; b=B.nextSetBit(b + 1))   buf.append(\" \").append(b);\n  return buf.toString();\n}\n"}
{"nl": "create a shadow entry from a master entry before its update", "code": "private ShadowEntryHolder createShadowEntry(IEntryCacheInfo pmaster,TypeData pType){\n  IEntryHolder master=pmaster.getEntryHolder(this);\n  int[] backrefIndexPos=pType.createIndexBackreferenceArray(pmaster,master.getEntryData());\n  return !master.isOffHeapEntry() ? EntryHolderFactory.createShadowEntryHolder(master,pmaster.getBackRefs(),backrefIndexPos,pmaster.getLeaseManagerListRef(),pmaster.getLeaseManagerPosition()) : EntryHolderFactory.createShadowEntryHolder(master,pmaster.getBackRefs(),backrefIndexPos,null,pmaster.getLeaseManagerPosition());\n}\n"}
{"nl": "update peer addresses of the member", "code": "@Override public ListenableFuture<MemberUpdateResponse> updateMember(long memberID,List<String> endpoints){\n  MemberUpdateRequest memberUpdateRequest=MemberUpdateRequest.newBuilder().addAllPeerURLs(endpoints).setID(memberID).build();\n  return clusterStub.memberUpdate(memberUpdateRequest);\n}\n"}
{"nl": "Constructs a new blocked list with the given initial items", "code": "public BlockList(Map<Integer,BlockedPlayer> initialList){\n  this.blockedList=new ConcurrentHashMap<Integer,BlockedPlayer>(initialList);\n}\n"}
{"nl": "Start watching", "code": "public void startWatch(){\n  _time=_watchdogGroup._timerLogical;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),\"Choose color\",null);\n  if (color != null)   execute(\"set color=\" + color.getRed() + \" \"+ color.getGreen()+ \" \"+ color.getBlue()+ \";\");\n}\n"}
{"nl": "Verifies if the url is an image", "code": "private boolean isImage(String url){\n  return url.matches(Regex.IMAGE_PATTERN);\n}\n"}
{"nl": "Return online only", "code": "public UsersSearchQuery online(Boolean value){\n  return unsafeParam(\"online\",value);\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public AnnotationAttr(String type,ArrayList elems){\n  this.type=new AsciiCP(type);\n  this.list=elems;\n}\n"}
{"nl": "Create authority name to be used for authority", "code": "public String createAuthorityName(Role role){\n  String roleName=role.getRoleName().toUpperCase();\n  return rolePrefix + roleName;\n}\n"}
{"nl": "Creates a particle system with the given parameters", "code": "public ParticleSystem(Activity a,int maxParticles,int drawableResId,long timeToLive){\n  this(a,maxParticles,ContextCompat.getDrawable(a,drawableResId),timeToLive,android.R.id.content);\n}\n"}
{"nl": "database creating process", "code": "public void createDatabase() throws Exception {\n  boolean dbExists=checkDatabase();\n  if (!dbExists) {\n    this.getReadableDatabase();\n    try {\n      copyDatabase();\n    }\n catch (    Exception e) {\n      Log.e(\"DB_ERROR\",\"createDatabase(): Could not copy DB\");\n      throw new Error(\"Could not copy DB'\");\n    }\n  }\n}\n"}
{"nl": "if have default value function", "code": "public boolean isInitValues(){\n  return isInitValue;\n}\n"}
{"nl": "int file getter in memory", "code": "public IntFileGetterInMemory(File file) throws IOException {\n  limit=file.length() / 4;\n  data=new int[(int)((limit >>> BITS)) + 1][];\n  final int length0=1 << BITS;\n  for (int i=0; i < data.length; i++) {\n    int length=(i < data.length - 1 ? length0 : (int)(limit & BIT_MASK) + 1);\n    data[i]=new int[length];\n  }\n  try (InputStream ins=new BufferedInputStream(new FileInputStream(file));ProgressPercentage progress=new ProgressPercentage(\"Reading file: \" + file,limit)){\n    int whichArray=0;\n    int indexInArray=0;\n    int[] row=data[0];\n    for (long index=0; index < limit; index++) {\n      row[indexInArray]=((ins.read() & 0xFF) << 24) + (((ins.read()) & 0xFF) << 16) + (((ins.read()) & 0xFF) << 8)+ (ins.read() & 0xFF);\n      if (++indexInArray == length0) {\n        row=data[++whichArray];\n        indexInArray=0;\n      }\n      progress.setProgress(index);\n    }\n  }\n }\n"}
{"nl": "Constructs new instance of <tt>CM_CHECK_NICKNAME </tt> packet", "code": "public CM_CHECK_NICKNAME(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Test that \"add activity\" doesn't show up when activity is already registered", "code": "public void testAddActivityNoShow() throws Exception {\n  deleteManifest();\n  myFixture.copyFileToProject(\"intentions/DummyActivity_manifest_after.xml\",\"AndroidManifest.xml\");\n  final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyActivity.java\",\"src/com/example/DummyActivity.java\");\n  myFixture.configureFromExistingVirtualFile(file);\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,ADD_ACTIVITY_TO_MANIFEST);\n  assertNull(action);\n}\n"}
{"nl": "Load all the parts around the center of the screen, taking into account X and Y offsets, zoom level, and the current page displayed", "code": "public void loadPages(){\n  if (optimalPageWidth == 0 || optimalPageHeight == 0) {\n    return;\n  }\n  renderingAsyncTask.removeAllTasks();\n  cacheManager.makeANewSet();\n  pagesLoader.loadPages();\n  redraw();\n}\n"}
{"nl": "List all servers of the cluster", "code": "@RequestMapping(value=\"/servers\",method=RequestMethod.GET) public JsonResponse listServers(){\n  Response<List<ServerInfo>> listResp=clusterService.listServers();\n  if (!listResp.isSuccess()) {\n    Logs.error(\"failed to list all servers, cause: {}\",listResp.getErr());\n    return JsonResponse.notOk(listResp.getErr());\n  }\n  return JsonResponse.ok(listResp.getData());\n}\n"}
{"nl": "draw the y-axis", "code": "protected void drawYAxis(Graphics2D gc,Dimension size){\n}\n"}
{"nl": "compares two splits", "code": "public int compare(Object o1,Object o2){\n  Split split1=(Split)o1;\n  return split1.compareTo(o2);\n}\n"}
{"nl": "creates a new id parser for this mapper", "code": "public IdParser createIdParser(){\n  final IdParser idParser=new IdParser(this);\n  idParser.setAlgorithm(algorithm);\n  return idParser;\n}\n"}
{"nl": "performs selection in legend panel", "code": "private boolean selectByMouseInLegendPanel(LegendPanel legendPanel,Point point,ChartSelection chartSelection){\n  SelectionGraphics<String[]> selectionGraphics=new SelectionGraphics<>(getGraphics());\n  selectionGraphics.setMouseLocation(point);\n  legendPanel.paint(selectionGraphics);\n  Set<String> seriesToSelect=new HashSet<>();\n  Set<String> classesToSelect=new HashSet<>();\n  for (  String[] pair : selectionGraphics.getSelectedItems()) {\n    if (pair[0] != null) {\n      seriesToSelect.add(pair[0]);\n    }\n    if (pair[1] != null) {\n      classesToSelect.add(pair[1]);\n    }\n  }\n  if (seriesToSelect.size() > 0)   chartSelection.setSelectedSeries(seriesToSelect,true);\n  if (classesToSelect.size() > 0)   chartSelection.setSelectedClass(classesToSelect,true);\n  return seriesToSelect.size() > 0 || classesToSelect.size() > 0;\n}\n"}
{"nl": "Create an element with PSVI information", "code": "@Override public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {\n  return new PSVIElementNSImpl(this,namespaceURI,qualifiedName);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveGetMarketItemsQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getMarketItems\",GetMarketItemsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Called by the system when the user grants permissions", "code": "@Override public void onRequestPermissionsResult(int requestCode,String permissions[],int[] grantResults){\n  try {\n    cordovaInterface.onRequestPermissionResult(requestCode,permissions,grantResults);\n  }\n catch (  JSONException e) {\n    LOG.d(TAG,\"JSONException: Parameters fed into the method are not valid\");\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "open all currently selected files", "code": "public void openSelectedFiles(){\n  StringBuilder buf=new StringBuilder();\n  int count=0;\n  Set<String> openFiles=getCurrentlyOpenRemoteFiles();\n  for (  String fileName : getSelectedFiles()) {\n    if (openFiles.contains(fileName)) {\n      buf.append(\"toFront file='\").append(fileName).append(\"';\");\n    }\n else {\n      buf.append(\"open file='\").append(fileName).append(\"' readOnly=true;\");\n      count++;\n    }\n  }\n  if (count > 10) {\n    if (JOptionPane.showConfirmDialog(remoteServiceBrowser.getFrame(),\"Do you really want to open \" + count + \" new files?\",\"Confirm\",JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)     return;\n  }\n  Director dir=remoteServiceBrowser.getDir();\n  dir.execute(buf.toString(),remoteServiceBrowser.getCommandManager());\n}\n"}
{"nl": "needs accessors: when field or meth is private and in some other class when field or meth is protected and in", "code": "protected boolean needsAccessor(polyglot.types.MemberInstance inst){\n  if (inst.flags().isPrivate()) {\n    if (!Util.getSootType(inst.container()).equals(body.getMethod().getDeclaringClass().getType())) {\n      return true;\n    }\n  }\n else   if (inst.flags().isProtected()) {\n    if (Util.getSootType(inst.container()).equals(body.getMethod().getDeclaringClass().getType())) {\n      return false;\n    }\n    soot.SootClass currentClass=body.getMethod().getDeclaringClass();\n    if (currentClass.getSuperclass().getType().equals(Util.getSootType(inst.container()))) {\n      return false;\n    }\n    while (currentClass.hasOuterClass()) {\n      currentClass=currentClass.getOuterClass();\n      if (Util.getSootType(inst.container()).equals(currentClass.getType())) {\n        return false;\n      }\n else       if (Util.getSootType(inst.container()).equals(currentClass.getSuperclass().getType())) {\n        return true;\n      }\n    }\n    return false;\n  }\n  return false;\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && (firstLine.startsWith(\"# FORMAT.Blast\") || firstLine.startsWith(\"# BLAST\") || firstLine.split(\"\\t\").length == 12);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatUsersQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){\n  super(client,\"messages.getChatUsers\",Utils.buildParametrizedType(List.class,UserXtrInvitedBy.class));\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "Note: A signature attr is associated with a <em>class</em>, method or field so you need to create a new SignatureAttr for", "code": "public AnnotationDefaultAttr(ElemValPair s){\n  elem=s;\n}\n"}
{"nl": "Opens a web browser to rewinside's youtube channel", "code": "public static void clickButtonYoutube(){\n  RewiMod.getInstance().openUrl(\"https://www.youtube.com/user/rewinside/\");\n}\n"}
{"nl": "Load the data from the RDBMS table, by the where and", "code": "public final static <T extends Bean>List<T> load(String table,String[] cols,String where,Object[] args,Class<T> clazz){\n  return load(table,cols,where,args,null,-1,-1,clazz);\n}\n"}
{"nl": "Creates the format with MJPEG compression", "code": "private void createMJPEGFormat(){\n  videoFormat=new VideoFormat(VideoFormat.MJPG,new Dimension(mip.getMWidth(),mip.getMHeight()),Format.NOT_SPECIFIED,Format.byteArray,mip.getFPS());\n}\n"}
{"nl": "Call back after ICEREST start", "code": "public void afterStart(){\n}\n"}
{"nl": "Return response messages from users who have sent a friend request or, if \"suggested\" is set to true, to return a list of suggested friends", "code": "protected FriendsGetRequestsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "ask view to prevent user input", "code": "public void lockUserInput(){\n  locked=true;\n  commandManager.setEnableCritical(false);\n}\n"}
{"nl": "Scroll back to to if is not under touch", "code": "private void tryScrollBackToTop(){\n  if (!mPtrIndicator.isUnderTouch() && mPtrIndicator.hasLeftStartPosition()) {\n    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);\n  }\n}\n"}
{"nl": "Add multiple columns with no restrictions on the allowable values of the columns (other than no NaN/Infinite)", "code": "public Builder addColumnsDouble(String... columnNames){\n  for (  String s : columnNames)   addColumnDouble(s);\n  return this;\n}\n"}
{"nl": "Returns true if field serverMessageId is set (has been assigned a value) and false otherwise", "code": "public boolean isSetServerMessageId(){\n  return this.serverMessageId != null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetMembersQueryWithFields(VkApiClient client,Actor actor,List<UserField> fields){\n  super(client,\"groups.getMembers\",GetMembersFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "Use an asset file as the pdf source", "code": "public Configurator fromAsset(String assetName){\n  InputStream stream=null;\n  try {\n    stream=getContext().getAssets().open(assetName);\n    return new Configurator(assetName,true);\n  }\n catch (  IOException e) {\n    throw new FileNotFoundException(assetName + \" does not exist.\",e);\n  }\n finally {\n    try {\n      if (stream != null) {\n        stream.close();\n      }\n    }\n catch (    IOException e) {\n    }\n  }\n}\n"}
{"nl": "Returns true if field requestInfo is set (has been assigned a value) and false otherwise", "code": "public boolean isSetRequestInfo(){\n  return this.requestInfo != null;\n}\n"}
{"nl": "This attempts to retrieve a specific host configuration, if an exception occurs then null is returned", "code": "public CustomConfiguration tryGetHostConfiguration(String hostName,HttpServletRequest request){\n  try {\n    return ConfigurationService.getHostConfiguration(hostName,request.getRemoteAddr(),request.getSession().getId());\n  }\n catch (  ConfigurationException e) {\n    Logger.debug(getClass(),\"Failed to retrieve host configuration: \" + hostName);\n    return null;\n  }\n}\n"}
{"nl": "dip to pixel", "code": "public static int dip2px(Context context,float dipValue){\n  if (context == null) {\n    return 0;\n  }\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(dipValue * scale + 0.5f);\n}\n"}
{"nl": "Convert a ulaw format to short", "code": "public static short ulawToShort(byte ulaw){\n  short ulawbyte=(short)(ulaw + 128);\n  final int[] exp_lut={0,132,396,924,1980,4092,8316,16764};\n  int sign, exponent, mantissa;\n  short sample;\n  ulawbyte=(short)(ulawbyte & 0x00FF);\n  ulawbyte=(short)(~ulawbyte);\n  sign=(ulawbyte & ((short)0x80));\n  exponent=(ulawbyte & (short)0x00FF) >> 4 & 0x07;\n  mantissa=ulawbyte & (short)0x0F;\n  sample=(short)(exp_lut[exponent] + (mantissa << (exponent + 3)));\n  if (sign != 0)   sample=(short)(-sample);\n  return sample;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();\n  final megan.remote.ServicePanel servicePanel=remoteServiceBrowser.getServicePanel();\n  if (servicePanel != null) {\n    final Collection<String> selectedFiles=remoteServiceBrowser.getServicePanel().getSelectedFiles();\n    if (selectedFiles.size() > 1) {\n      CompareWindow compareWindow=new CompareWindow(getViewer().getFrame(),remoteServiceBrowser.getDir(),selectedFiles);\n      if (!compareWindow.isCanceled()) {\n        final Director newDir=Director.newProject();\n        newDir.getMainViewer().getFrame().setVisible(true);\n        newDir.getMainViewer().setDoReInduce(true);\n        newDir.getMainViewer().setDoReset(true);\n        final String command=compareWindow.getCommand();\n        if (command != null)         newDir.execute(command,newDir.getCommandManager());\n      }\n    }\n  }\n}\n"}
{"nl": "[%SkillTarget] is no longer bound", "code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_A_TO_SELF(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200775,skilltarget);\n}\n"}
{"nl": "Schedule an XML save", "code": "public void requestSaveToXML(){\n  updateXml();\n  mySaveXmlTimer.reset();\n}\n"}
{"nl": "Set password", "code": "public AuthConfirmQuery password(String value){\n  return unsafeParam(\"password\",value);\n}\n"}
{"nl": "REST DELETE by id request handler", "code": "@ApiMethod(path=\"{type}/{id}\",verb=ApiVerb.DELETE,description=\"Gets and deletes the entry from space with the provided id.\",produces={MediaType.APPLICATION_JSON_VALUE}) @RequestMapping(value=\"/{type}/{id}\",method=RequestMethod.DELETE,produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> deleteById(@ApiPathParam(name=\"type\",description=TYPE_DESCRIPTION) @PathVariable String type,@ApiPathParam(name=\"id\") @PathVariable String id) throws ObjectNotFoundException {\n  GigaSpace gigaSpace=ControllerUtils.xapCache.get();\n  Object typedBasedId=getTypeBasedIdObject(gigaSpace,type,id);\n  if (logger.isLoggable(Level.FINE))   logger.fine(\"creating takebyid query with type: \" + type + \" and id: \"+ id);\n  Object doc;\n  try {\n    doc=gigaSpace.takeById(new IdQuery<Object>(type,typedBasedId));\n  }\n catch (  DataAccessException e) {\n    throw translateDataAccessException(gigaSpace,e,type);\n  }\n  if (doc == null) {\n    doc=emptyObject;\n  }\n  try {\n    Map<String,Object> result=new HashMap<String,Object>();\n    result.put(\"status\",\"success\");\n    result.put(\"data\",ControllerUtils.mapper.readValue(ControllerUtils.mapper.writeValueAsString(doc),Map.class));\n    return result;\n  }\n catch (  IOException e) {\n    throw new RestException(e.getMessage());\n  }\n}\n"}
{"nl": "Part of the Chinese mobile phone does not support mono", "code": "private byte[] MonoToStereo(byte[] input){\n  byte[] output=new byte[input.length * 2];\n  int outputIndex=0;\n  for (int n=0; n < input.length; n+=2) {\n    output[outputIndex++]=input[n];\n    output[outputIndex++]=input[n + 1];\n    output[outputIndex++]=input[n];\n    output[outputIndex++]=input[n + 1];\n  }\n  return output;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetCatalogQuery(VkApiClient client){\n  super(client,\"video.getCatalog\",GetCatalogResponse.class);\n}\n"}
{"nl": "compresses a string to an array of bytes", "code": "public int deflateString2ByteArray(byte[] input,int inputOffset,int inputLength,byte[] bytes){\n  if (inputLength >= MIN_SIZE_FOR_DEFLATION) {\n    deflater.setInput(input,inputOffset,inputLength);\n    deflater.finish();\n    int compressedDataLength=deflater.deflate(bytes);\n    deflater.reset();\n    return -compressedDataLength;\n  }\n else {\n    System.arraycopy(input,inputOffset,bytes,0,inputLength);\n    return inputLength;\n  }\n}\n"}
{"nl": "Convert the loader code to shellcode embedded in js", "code": "private String preprocessToJs(byte[] loader) throws Exception {\n  Pair<ArrayList<Integer>,List<Byte>> data=preprocessRop(loader);\n  List<Long> longList=new ArrayList<>();\n  for (  Integer i : data.first) {\n    longList.add(i & 0xFFFFFFFFL);\n  }\n  String payload=TextUtils.join(\",\",longList);\n  String relocations=TextUtils.join(\",\",data.second);\n  return String.format(\"\\npayload = [%1$s];\\nrelocs = [%2$s];\\n\",payload,relocations);\n}\n"}
{"nl": "Add temporary skill which will not be saved in db", "code": "public boolean addAbyssSkill(Player player,int skillId,int skillLevel){\n  return addSkill(player,skillId,skillLevel,false,false,PersistentState.NOACTION);\n}\n"}
{"nl": "Removes a handler that is called when information flow results are available", "code": "public void removeResultsAvailableHandler(ResultsAvailableHandler handler){\n  onResultsAvailable.remove(handler);\n}\n"}
{"nl": "Check if the item it's a potion", "code": "public boolean isPotion(){\n  return getItemId() == ItemId.ITEM_POTION || getItemId() == ItemId.ITEM_SUPER_POTION || getItemId() == ItemId.ITEM_HYPER_POTION || getItemId() == ItemId.ITEM_MAX_POTION;\n}\n"}
{"nl": "rescan classifications after running the data processor", "code": "@Override public void updateClassifications(String[] cNames,List<UpdateItem> updateItemList,ProgressListener progressListener) throws IOException, CanceledException {\n  final UpdateItemList updateItems=(UpdateItemList)updateItemList;\n  long maxProgress=0;\n  for (int i=0; i < cNames.length; i++) {\n    maxProgress+=updateItems.getClassIds(i).size();\n  }\n  progressListener.setMaximum(maxProgress);\n  final Map<Integer,ListOfLongs>[] fName2ClassId2Location=new HashMap[cNames.length];\n  final Map<Integer,Integer>[] fName2ClassId2Weight=new HashMap[cNames.length];\n  for (int i=0; i < cNames.length; i++) {\n    fName2ClassId2Location[i]=new HashMap<>(10000);\n    fName2ClassId2Weight[i]=new HashMap<>(10000);\n  }\n  for (int i=0; i < cNames.length; i++) {\n    final Map<Integer,ListOfLongs> classId2Location=fName2ClassId2Location[i];\n    final Map<Integer,Integer> classId2weight=fName2ClassId2Weight[i];\n    for (    Integer classId : updateItems.getClassIds(i)) {\n      int weightedSize=updateItems.getSize(i,classId);\n      final ListOfLongs positions=new ListOfLongs();\n      classId2Location.put(classId,positions);\n      classId2weight.put(classId,weightedSize);\n      if (weightedSize > 0) {\n        for (UpdateItem item=updateItems.getFirst(i,classId); item != null; item=updateItems.getUpdateItem(item.getNextInClassification(i))) {\n          positions.add(item.getReadUId());\n        }\n      }\n      progressListener.incrementProgress();\n    }\n  }\n  try (RMA6FileModifier rma6Modifier=new RMA6FileModifier(fileName)){\n    rma6Modifier.updateClassifications(cNames,fName2ClassId2Location,fName2ClassId2Weight);\n  }\n }\n"}
{"nl": "Constructs new instance of <tt>CM_PING_REQUEST </tt> packet", "code": "public CM_PING_REQUEST(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "given an object scan the list, find it and remove it, returns true if found", "code": "public boolean removeByObject(T obj){\n  if (getNumSegments() > 1)   throw new RuntimeException(\"ConcurrentSegmentedStoredList::removeByObject not supported for multi segments list\");\n  if (_segments[0].removeByObject(obj)) {\n    sizeUpdater.decrementAndGet(this);\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallSearchQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"wall.search\",SearchExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "create a broker", "code": "public Broker(String host,int port){\n  this.host=host;\n  this.port=port;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsAddListQuery(VkApiClient client,UserActor actor,String name){\n  super(client,\"friends.addList\",AddListResponse.class);\n  accessToken(actor.getAccessToken());\n  name(name);\n}\n"}
{"nl": "Create columns projection from the joined entries", "code": "public void createProjection(List<SelectColumn> columns){\n  ArrayList<Object> fieldValues=new ArrayList<Object>();\n  for (int i=0; i < columns.size(); i++) {\n    SelectColumn column=columns.get(i);\n    if (!column.isVisible())     continue;\n    QueryTableData columnTableData=column.getColumnTableData();\n    if (columnTableData == null) {\n      fieldValues.add(null);\n      continue;\n    }\n    IEntryPacket entry=getEntry(columnTableData.getTableIndex());\n    if (entry == null) {\n      fieldValues.add(null);\n    }\n else     if (column.isUid()) {\n      fieldValues.add(entry.getUID());\n    }\n else {\n      fieldValues.add(column.getFieldValue(entry));\n    }\n  }\n  setFieldsValues(fieldValues.toArray());\n}\n"}
{"nl": "write file", "code": "public static boolean writeFile(File file,InputStream stream,boolean append){\n  OutputStream o=null;\n  try {\n    makeDirs(file.getAbsolutePath());\n    o=new FileOutputStream(file,append);\n    byte data[]=new byte[1024];\n    int length=-1;\n    while ((length=stream.read(data)) != -1) {\n      o.write(data,0,length);\n    }\n    o.flush();\n    return true;\n  }\n catch (  FileNotFoundException e) {\n    throw new RuntimeException(\"FileNotFoundException occurred. \",e);\n  }\ncatch (  IOException e) {\n    throw new RuntimeException(\"IOException occurred. \",e);\n  }\n finally {\n    IOUtil.close(o);\n    IOUtil.close(stream);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQueryWithUserIds(VkApiClient client,UserActor actor,String groupId,Integer... userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatus.class));\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userIds(userIds);\n}\n"}
{"nl": "Called when a traffic alert is received", "code": "private void receivedTraffic(String json,AirMapTraffic.TrafficType trafficType){\n  List<AirMapTraffic> updated=new ArrayList<>();\n  List<AirMapTraffic> added=new ArrayList<>();\n  JSONArray trafficJsonArray;\n  try {\n    trafficJsonArray=new JSONObject(json).getJSONArray(\"traffic\");\n  }\n catch (  JSONException e) {\n    e.printStackTrace();\n    AirMapLog.e(\"TrafficService\",e.getMessage());\n    return;\n  }\n  for (int i=0; i < trafficJsonArray.length(); i++) {\n    AirMapTraffic temp=new AirMapTraffic(trafficJsonArray.optJSONObject(i));\n    temp.setTrafficType(trafficType);\n    Coordinate projected=projectedCoordinate(temp);\n    temp.setCoordinate(projected);\n    int index=allTraffic.indexOf(temp);\n    if (index != -1) {\n      allTraffic.set(index,temp);\n      updated.add(temp);\n    }\n else {\n      allTraffic.add(temp);\n      added.add(temp);\n    }\n  }\n  notifyUpdated(updated);\n  notifyAdded(added);\n}\n"}
{"nl": "This method will return true if a legion is able to add a member", "code": "private boolean canAddMember(){\n  int memberSize=getLegionMembers().size();\nswitch (getLegionLevel()) {\ncase 1:\n    return memberSize < LegionConfig.LEGION_LEVEL1_MAX_MEMBERS;\ncase 2:\n  return memberSize < LegionConfig.LEGION_LEVEL2_MAX_MEMBERS;\ncase 3:\nreturn memberSize < LegionConfig.LEGION_LEVEL3_MAX_MEMBERS;\ncase 4:\nreturn memberSize < LegionConfig.LEGION_LEVEL4_MAX_MEMBERS;\ncase 5:\nreturn memberSize < LegionConfig.LEGION_LEVEL5_MAX_MEMBERS;\ncase 6:\nreturn memberSize < LegionConfig.LEGION_LEVEL6_MAX_MEMBERS;\ncase 7:\nreturn memberSize < LegionConfig.LEGION_LEVEL7_MAX_MEMBERS;\ncase 8:\nreturn memberSize < LegionConfig.LEGION_LEVEL8_MAX_MEMBERS;\n}\nreturn false;\n}\n"}
{"nl": "Removes absolute x/y/width/height conversion attributes", "code": "private static void removeAbsolutePositionAndSizes(NlComponent component){\n  for (  NlComponent child : component.getChildren()) {\n    child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_X,null);\n    child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_Y,null);\n    child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_WIDTH,null);\n    child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_HEIGHT,null);\n    removeAbsolutePositionAndSizes(child);\n  }\n}\n"}
{"nl": "Called when we've noticed an edit outside of an app module, or in something other than a resource file or a Java file", "code": "private void recordNonLocalChange(){\nsynchronized (myLock) {\n    mySeenNonSourceChanges=true;\n    stopFileListener();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetCitiesQuery(VkApiClient client,UserActor actor,int countryId){\n  super(client,\"database.getCities\",GetCitiesResponse.class);\n  accessToken(actor.getAccessToken());\n  countryId(countryId);\n}\n"}
{"nl": "Is anonymous poll, participants list is hidden;", "code": "public PollsCreateQuery isAnonymous(Boolean value){\n  return unsafeParam(\"is_anonymous\",value);\n}\n"}
{"nl": "Uploads the build to test flight, it updates also the UI", "code": "public void uploadBuild(){\n  binary.initPath(apkAbsolutePath);\n  uploadService.sendBuild(null,apkAbsolutePath,apiToken,binary,changeLogTa);\n}\n"}
{"nl": "Is this player looking for an event", "code": "public boolean isLookingForEvent(){\n  return lookingForEvent;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsSearchQuery(VkApiClient client,UserActor actor,String q){\n  super(client,\"groups.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  q(q);\n}\n"}
{"nl": "Determines if current L&F is Nimbus or GTK with Nimbus theme", "code": "public static boolean isNimbus(){\n  return UIUtils.isNimbus();\n}\n"}
{"nl": "Select orders by search criteria", "code": "@RequestMapping(value=\"/order/list\",method=RequestMethod.GET) public PageRespJson selectOrderList(@RequestParam(value=\"reqId\",required=false,defaultValue=StringConstant.ZERO) Integer reqId,@RequestParam(value=\"start\",required=false) Integer start,@RequestParam(value=\"rows\",required=false) Integer rows,@RequestParam(value=\"orderNo\",required=false) String orderNo,@RequestParam(value=\"orderType\",required=false) Integer orderType,@RequestParam(value=\"customerName\",required=false) String customerName,@RequestParam(value=\"customerMobile\",required=false) String customerMobile,@RequestParam(value=\"customerIdNumber\",required=false) String customerIdNumber,@RequestParam(value=\"skuCode\",required=false) String skuCode,@RequestParam(value=\"startDate\",required=false) String startDate,@RequestParam(value=\"endDate\",required=false) String endDate){\n  OrderReqDto reqDto=new OrderReqDto(reqId,start,rows);\n  reqDto.setOrderNo(orderNo);\n  reqDto.setOrderType(orderType);\n  reqDto.setCustomerName(customerName);\n  reqDto.setCustomerMobile(customerMobile);\n  reqDto.setCustomerIdNumber(customerIdNumber);\n  reqDto.setSkuCode(skuCode);\n  reqDto.setStartDate(startDate);\n  reqDto.setEndDate(endDate);\n  try {\n    List<Order> orderList=orderDao.searchOrder(reqDto);\n    int count=orderDao.searchOrderCount(reqDto);\n    return PageRespJson.buildSuccessResponse(orderList,reqId,count);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return PageRespJson.buildFailureResponse(StringUtils.getValidString(e.getMessage()),reqId);\n  }\n}\n"}
{"nl": "Find a single face with emotion within a given url", "code": "@NotNull public Emotion findEmotionFromSingleFace(@NotNull InputStream image){\n  List<Emotion> emotions=emotionBuilder.emotionRecognition(image).withResult();\n  if (Utils.isEmpty(emotions) || emotions.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(emotions) ? 0 : emotions.size(),\"a single face was not present\");\n  return emotions.get(0);\n}\n"}
{"nl": "Keywords for stopwords filter", "code": "public GroupsEditQuery obsceneWords(String... value){\n  return unsafeParam(\"obscene_words\",value);\n}\n"}
{"nl": "Convert generic properties from the given map to modeled properties in the given ContainerState", "code": "public void propertiesToContainerState(ContainerState containerState,Map<String,Object> properties){\n  AssertUtil.assertNotNull(containerState,\"containerState\");\n  AssertUtil.assertNotNull(properties,\"properties\");\n  containerState.id=(String)properties.get(DOCKER_CONTAINER_ID_PROP_NAME);\n  String name=(String)properties.get(DOCKER_CONTAINER_NAME_PROP_NAME);\n  if (name != null && name.startsWith(\"/\")) {\n    name=name.substring(1);\n  }\n  containerState.names=Collections.singletonList(name);\n  containerState.created=parseDate(properties.get(DOCKER_CONTAINER_CREATED_PROP_NAME));\n  mapStateProperties(containerState,getMap(properties,DOCKER_CONTAINER_STATE_PROP_NAME));\n  mapConfigProperties(containerState,getMap(properties,DOCKER_CONTAINER_CONFIG_PROP_NAME));\n  mapPortBindingProperties(containerState,getMap(properties,DOCKER_CONTAINER_NETWORK_SETTINGS_PROP_NAME));\n  mapContainerIPAddress(containerState,getMap(properties,DOCKER_CONTAINER_NETWORK_SETTINGS_PROP_NAME));\n}\n"}
{"nl": "add an item", "code": "public UpdateItem addItem(final long readUid,int readWeight,final Integer[] classIds) throws IOException {\n  if (classIds.length != numberOfClassifications)   throw new IOException(\"classIds has wrong length: \" + classIds.length + \", should be: \"+ numberOfClassifications);\n  UpdateItem item=new UpdateItem(numberOfClassifications);\n  item.setReadUId(readUid);\n  add(item);\n  readUid2UpdateItem.put(readUid,item);\n  if (readWeight == 0) {\n    readWeight=1;\n  }\n  for (int i=0; i < numberOfClassifications; i++) {\n    final int id=classIds[i];\n    if (id != 0) {\n      item.setClassId(i,id);\n      UpdateItem lastInClass=last[i].get(id);\n      if (lastInClass == null) {\n        first[i].put(id,item);\n        last[i].put(id,item);\n        size[i].put(id,readWeight);\n      }\n else {\n        lastInClass.setNextInClassifaction(i,readUid);\n        last[i].put(id,item);\n        size[i].put(id,size[i].get(id) + readWeight);\n      }\n    }\n  }\n  return item;\n}\n"}
{"nl": "Elemental Iron Prison Ai", "code": "@Override public void handleUseItemFinish(Player player,Npc npc){\nswitch (npc.getNpcId()) {\ncase 701001:\n    SkillEngine.getInstance().getSkill(npc,19316,60,player).useNoAnimationSkill();\n  break;\ncase 701002:\nSkillEngine.getInstance().getSkill(npc,19317,60,player).useNoAnimationSkill();\nbreak;\ncase 701003:\nSkillEngine.getInstance().getSkill(npc,19318,60,player).useNoAnimationSkill();\nbreak;\ncase 701004:\nSkillEngine.getInstance().getSkill(npc,19319,60,player).useNoAnimationSkill();\nbreak;\n}\n}\n"}
{"nl": "Edited poll's id", "code": "protected PollsEditQuery pollId(int value){\n  return unsafeParam(\"poll_id\",value);\n}\n"}
{"nl": "check whether has root permission", "code": "public static boolean checkRootPermission(){\n  return execCommand(\"echo root\",true,false,null).result == 0;\n}\n"}
{"nl": "Logs with error level and logs stack trace for the throwable", "code": "public static void error(@NonNull String tag,Throwable throwable,String message,Object... args){\n  android.util.Log.e(tag,String.format(Locale.ENGLISH,message,args),throwable);\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getNotPrimaryAlignmentFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getNotPrimaryAlignmentFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Exists just to make happy some json providers", "code": "public OAuth1AccessToken(){\n  super(\"stub\",\"stub\",\"stub\");\n}\n"}
{"nl": "same as putIfAbsent, but key is unstable in the hosting object, so create an pinnedhashentry", "code": "public V putIfAbsent(K key,V value,boolean unstableKey){\n  if (value == null)   throw new NullPointerException();\n  int hash=hash(key.hashCode());\n  return segmentFor(hash).put(key,hash,value,true,unstableKey);\n}\n"}
{"nl": "Use the current distribution but scale the samples close to the user specified one ", "code": "public void scaleToSamples(int usrSamples){\n  double ratio;\n  ratio=(double)usrSamples / count;\n  count=0;\n  for (int i=0; i <= limits.length; ++i) {\n    results[i]=(int)Math.round(results[i] * ratio);\n    count+=results[i];\n  }\n}\n"}
{"nl": "Return the \"likes\" field", "code": "public BoardGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "update clustering", "code": "public void updateClustering(String[] labels,Table<String,String,Float> matrix){\n  if (!inUpdate) {\n    try {\n      inUpdate=true;\n      labelOrder.clear();\n      treeView.getGraph().clear();\n      previousRectangle=null;\n      if (labels.length > 0) {\n        final Taxa taxa=new Taxa();\n        for (        String label : labels)         taxa.add(label);\n        if (labels.length == 1) {\n          final Node root=treeView.getPhyloTree().newNode();\n          treeView.getPhyloTree().setRoot(root);\n          treeView.setLabel(root,labels[0]);\n          labelOrder.addAll(getLabelOrder(treeView));\n        }\n else {\n          final Distances distances=new Distances(taxa.size());\n          for (int i=0; i < labels.length; i++) {\n            final float[] iValues=getValuesRow(labels[i],matrix);\n            for (int j=i + 1; j < labels.length; j++) {\n              final float[] jValues=getValuesRow(labels[j],matrix);\n              distances.set(i + 1,j + 1,computeCorrelationDistances(iValues.length,iValues,jValues));\n            }\n          }\n          UPGMA.apply(taxa,distances,treeView);\n          flipCoordinates(treeView,rootSide);\n          labelOrder.addAll(getLabelOrder(treeView));\n        }\n      }\n    }\n  finally {\n      inUpdate=false;\n    }\n  }\n}\n"}
{"nl": "Given a collection of widgets evaluates probability of a connection and makes connections", "code": "public static void inferConstraints(WidgetsScene list){\n  inferConstraints(list.getRoot());\n}\n"}
{"nl": "Move mouse to a position on screen", "code": "public void move(int newX,int newY){\n  controller.mouseMove(newX,newY);\n}\n"}
{"nl": "write a byte", "code": "public void write(int a) throws IOException {\n  outs.write(a);\n  position++;\n}\n"}
{"nl": "Set fields", "code": "public AccountLookupContactsQuery fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Return the \"likes\" field", "code": "public WallGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "show an information notation", "code": "public static void showInformation(String message){\n  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,10000);\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(replicationTransmissionPolicy);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ReplicationTransmissionPolicy copy=(ReplicationTransmissionPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(replicationTransmissionPolicy,copy));\n}\n"}
{"nl": "Compare includes NBT and damage value; ignores stack size; nulls can be stacked together", "code": "public static boolean couldMerge(ItemStack a,ItemStack b){\n  if (a == null || b == null) {\n    return true;\n  }\n  return a.getItem() == b.getItem() && a.getItemDamage() == b.getItemDamage() && sameItemTags(a,b);\n}\n"}
{"nl": "add a long switch (--switch=value) with the given name and value", "code": "public CommandBuilder withLongSwitch(String switchName,Object value){\n  withLongSwitch(switchName,value,UnaryOperator.identity());\n  return this;\n}\n"}
{"nl": "Photo ID", "code": "protected PhotosCopyQuery photoId(int value){\n  return unsafeParam(\"photo_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsDeleteQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"friends.delete\",DeleteResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "Registers a BroadcastReceiver that filters intents by the actions specified", "code": "public static void registerReceiver(Context context,BroadcastReceiver receiver,String... actions){\n  IntentFilter filter=new IntentFilter();\n  for (  String action : actions)   filter.addAction(action);\n  LocalBroadcastManager.getInstance(context).registerReceiver(receiver,filter);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null && viewer.getJList().getSelectedValuesList().size() >= 1;\n}\n"}
{"nl": "Called when SLD loaded", "code": "public void SLDLoaded(LegendOptionData data){\n  if (data != null) {\n    updateLegendOptionData(data);\n    if (legendOptionPanel != null) {\n      legendOptionPanel.updateData(data);\n    }\n  }\n}\n"}
{"nl": "DOM L3-EXPERIMENTAL: Check if parameter can be set", "code": "@Override public boolean canSetParameter(String name,Object state){\n  if (state == null) {\n    return true;\n  }\n  if (state instanceof Boolean) {\n    boolean value=((Boolean)state).booleanValue();\n    if (name.equalsIgnoreCase(Constants.DOM_NAMESPACES) || name.equalsIgnoreCase(Constants.DOM_SPLIT_CDATA) || name.equalsIgnoreCase(Constants.DOM_DISCARD_DEFAULT_CONTENT)|| name.equalsIgnoreCase(Constants.DOM_XMLDECL)|| name.equalsIgnoreCase(Constants.DOM_WELLFORMED)|| name.equalsIgnoreCase(Constants.DOM_INFOSET)|| name.equalsIgnoreCase(Constants.DOM_ENTITIES)|| name.equalsIgnoreCase(Constants.DOM_CDATA_SECTIONS)|| name.equalsIgnoreCase(Constants.DOM_COMMENTS)|| name.equalsIgnoreCase(Constants.DOM_FORMAT_PRETTY_PRINT)|| name.equalsIgnoreCase(Constants.DOM_NAMESPACE_DECLARATIONS)) {\n      return true;\n    }\n else     if (name.equalsIgnoreCase(Constants.DOM_CANONICAL_FORM) || name.equalsIgnoreCase(Constants.DOM_VALIDATE_IF_SCHEMA) || name.equalsIgnoreCase(Constants.DOM_VALIDATE)|| name.equalsIgnoreCase(Constants.DOM_CHECK_CHAR_NORMALIZATION)|| name.equalsIgnoreCase(Constants.DOM_DATATYPE_NORMALIZATION)|| name.equalsIgnoreCase(Constants.DOM_NORMALIZE_CHARACTERS)) {\n      return !value;\n    }\n else     if (name.equalsIgnoreCase(Constants.DOM_ELEMENT_CONTENT_WHITESPACE) || name.equalsIgnoreCase(Constants.DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS)) {\n      return value;\n    }\n  }\n else   if (name.equalsIgnoreCase(Constants.DOM_ERROR_HANDLER) && state == null || state instanceof DOMErrorHandler) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Fill an array with the values of a 61-dB 3-sample Blackman-Harris window function", "code": "private void blackmanHarris3s(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.45;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.44959 - 0.49364 * Math.cos(twoPI * i / size) + 0.05677 * Math.cos(2 * twoPI * i / size));\n}\n"}
{"nl": "Return information about users who posted comments", "code": "protected BoardGetCommentsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Given a 16 bit value (represented as an int), extract the low eight bits and return them", "code": "private final static byte lobyte(int val){\n  return (byte)(val & 0x000000FF);\n}\n"}
{"nl": "Load the given feature file", "code": "private void load(String fileName) throws IOException, MaryConfigurationException {\n  DataInputStream dis=null;\n  try {\n    dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));\n  }\n catch (  FileNotFoundException e) {\n    Log.d(Mary.LOG,\"File [\" + fileName + \"] was not found.\");\n    throw new MaryConfigurationException(\"File [\" + fileName + \"] was not found.\");\n  }\n  hdr=new MaryHeader(dis);\n  if (hdr.getType() != MaryHeader.LISTENERFEATS) {\n    Log.d(Mary.LOG,\"File [\" + fileName + \"] is not a valid Mary Units file.\");\n    throw new MaryConfigurationException(\"File [\" + fileName + \"] is not a valid Mary Units file.\");\n  }\n  numberOfUnits=dis.readInt();\n  if (numberOfUnits < 0) {\n    Log.d(Mary.LOG,\"File [\" + fileName + \"] has a negative number of units. Aborting.\");\n    throw new MaryConfigurationException(\"File [\" + fileName + \"] has a negative number of units. Aborting.\");\n  }\n  hnmSignals=new HntmSpeechSignal[numberOfUnits];\n  for (int i=0; i < numberOfUnits; i++) {\n    hnmSignals[i]=new HntmSpeechSignal(0,0,0);\n    hnmSignals[i].read(dis,HntmAnalyzerParams.WAVEFORM);\n  }\n  System.out.println();\n}\n"}
{"nl": "Required for Externalizable", "code": "public OrderByScanResult(){\n}\n"}
{"nl": "Automatically responds 0 to all requests, passing the given player as the responder", "code": "public synchronized void denyAll(){\n  for (  RequestResponseHandler handler : map.values()) {\n    handler.handle(player,0);\n  }\n  map.clear();\n}\n"}
{"nl": "The main program", "code": "public static void main(String[] args){\n  byte[] json=\"{\\\"name\\\":\\\"Elvis\\\"}\".getBytes(StandardCharsets.UTF_8);\n  JsonParser parser=new JsonParser(StandardCharsets.UTF_8);\n  int pos=0;\n  int event;\n  do {\n    while ((event=parser.nextEvent()) == JsonEvent.NEED_MORE_INPUT) {\n      pos+=parser.getFeeder().feed(json,pos,json.length - pos);\n      if (pos == json.length) {\n        parser.getFeeder().done();\n      }\n    }\n    System.out.println(\"JSON event: \" + event);\n    if (event == JsonEvent.ERROR) {\n      throw new IllegalStateException(\"Syntax error in JSON text\");\n    }\n    if (event == JsonEvent.VALUE_STRING) {\n      System.out.println(\"VALUE: \" + parser.getCurrentString());\n    }\n  }\n while (event != JsonEvent.EOF);\n}\n"}
{"nl": "carry out the main sequence - 'public static void main(String[] args)'", "code": "private void callMain() throws ForkProcessException {\n  try {\n    Object objectParameters[]={getProcessArgs().getMainArgs()};\n    Class<?> classParameters[]={objectParameters[0].getClass()};\n    Class<?> c=Class.forName(_procArg.getMainClass());\n    Method m=c.getDeclaredMethod(\"main\",classParameters);\n    m.invoke(null,objectParameters);\n  }\n catch (  InvocationTargetException invte) {\n    throw newForkProcessException(invte.getTargetException());\n  }\ncatch (  Throwable t) {\n    throw newForkProcessException(t);\n  }\n}\n"}
{"nl": "propagate variables to child via a relation atom (atom variables are bound)", "code": "private void unifyViaAtom(Atomic parentAtom){\n  Atomic childAtom=getRuleConclusionAtom();\n  Query parent=parentAtom.getParentQuery();\n  Map<String,String> unifiers=childAtom.getUnifiers(parentAtom);\n  head.unify(unifiers);\n  body.unify(unifiers);\n  Set<String> childFVs=body.getVarSet();\n  Set<String> parentBVs=parentAtom.getVarNames();\n  Set<String> parentVars=parent.getVarSet();\n  parentBVs.forEach(null);\n  childFVs.forEach(null);\n}\n"}
{"nl": "Remove SharedPreferences item with 'key'", "code": "public boolean contains(String key){\n  return preferences.contains(key);\n}\n"}
{"nl": "Check if the Object is pojo", "code": "public static boolean isPojo(Object object){\n  if (object == null)   return false;\n  if (object instanceof Object[]) {\n    if (object instanceof Entry[])     return false;\n    if (Array.getLength(object) == 0)     return false;\n    Object value=Array.get(object,0);\n    if (value == null || value instanceof Entry)     return false;\n  }\n else   if (object instanceof Entry)   return false;\n  return true;\n}\n"}
{"nl": "Add alliance to league", "code": "public static final void addAlliance(League league,PlayerAlliance alliance){\n  Preconditions.checkNotNull(league,\"League should not be null\");\n  league.onEvent(new LeagueEnteredEvent(league,alliance));\n}\n"}
{"nl": "This attempts to retrieve a specific plugin configuration, if an exception occurs then null is returned", "code": "public CustomConfiguration tryGetPluginConfiguration(String hostName,String pluginName,HttpServletRequest request){\n  try {\n    return ConfigurationService.getPluginConfiguration(pluginName,hostName,request.getRemoteAddr(),request.getSession().getId());\n  }\n catch (  ConfigurationException e) {\n    Logger.debug(getClass(),\"Failed to retrieve plugin configuration: \" + hostName + \":\"+ pluginName);\n    return null;\n  }\n}\n"}
{"nl": "Verify checksum in a packet", "code": "private boolean verifyChecksum(byte[] data,int offset,int length){\n  if ((length & 3) != 0 || (length <= 4)) {\n    return false;\n  }\n  long chksum=0;\n  int count=length - 4;\n  long check;\n  int i;\n  for (i=offset; i < count; i+=4) {\n    check=data[i] & 0xff;\n    check|=data[i + 1] << 8 & 0xff00;\n    check|=data[i + 2] << 0x10 & 0xff0000;\n    check|=data[i + 3] << 0x18 & 0xff000000;\n    chksum^=check;\n  }\n  check=data[i] & 0xff;\n  check|=data[i + 1] << 8 & 0xff00;\n  check|=data[i + 2] << 0x10 & 0xff0000;\n  check|=data[i + 3] << 0x18 & 0xff000000;\n  check=data[i] & 0xff;\n  check|=data[i + 1] << 8 & 0xff00;\n  check|=data[i + 2] << 0x10 & 0xff0000;\n  check|=data[i + 3] << 0x18 & 0xff000000;\n  return 0 == chksum;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set ignoreUnassigned=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Set for window", "code": "public BlurDrawable(Window blurredWindow){\n  this(blurredWindow.getDecorView());\n}\n"}
{"nl": "Factory method to create new ConfiguredElement instances", "code": "public static <T>ConfiguredElement<T> create(@NotNull FolderConfiguration folderConfiguration,@NotNull T value){\n  return new ConfiguredElement<T>(folderConfiguration,value);\n}\n"}
{"nl": "Required for Externalizable", "code": "public SpaceIteratorAggregatorPartitionResult(){\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int handleGetExtendedYear(){\n  int eyear;\n  int eyear;\n  if (newerField(19,1) == 19) {\n    eyear=internalGet(19,1);\n  }\n else {\n    int era=internalGet(0,1);\n    int eyear;\n    if (era == 0) {\n      eyear=1 - internalGet(1,1);\n    }\n else {\n      eyear=internalGet(1,1);\n    }\n  }\n  return eyear;\n}\n"}
{"nl": "Construct a new attribute", "code": "public Attr(String name,@Nullable List<Format> formats){\n  this.name=name;\n  this.formats=formats;\n}\n"}
{"nl": "Returns Java code which provides a cast of the specified value to the type of this property ref", "code": "public String cast(String value){\n  return cast(value,type());\n}\n"}
{"nl": "Expected value for the testArray defined in UnivariateStatisticAbstractTest", "code": "public double expectedWeightedValue(){\n  return this.weightedProduct;\n}\n"}
{"nl": "fix the offset rotate angle in case item out of boundary", "code": "private void fixRotateOffset(){\n  if (offsetRotate < 0) {\n    offsetRotate=0;\n  }\n  if (offsetRotate > getMaxOffsetDegree()) {\n    offsetRotate=getMaxOffsetDegree();\n  }\n}\n"}
{"nl": "Organizer phone number (for events)", "code": "public GroupsEditQuery phone(String value){\n  return unsafeParam(\"phone\",value);\n}\n"}
{"nl": "compute centered inner product matrix", "code": "public static Matrix computeDoubleCenteringOfSquaredMatrix(Matrix matrix){\n  int size=matrix.getColumnDimension();\n  Matrix result=new Matrix(matrix.getColumnDimension(),matrix.getRowDimension());\n  for (int i=0; i < size; i++) {\n    for (int j=0; j < size; j++) {\n      double v1=0;\n      for (int k=0; k < size; k++) {\n        v1+=matrix.get(k,j) * matrix.get(k,j) / size;\n      }\n      double v2=0;\n      for (int k=0; k < size; k++) {\n        v2+=matrix.get(i,k) * matrix.get(i,k) / size;\n      }\n      double v3=0;\n      for (int k=0; k < size; k++) {\n        for (int l=0; l < size; l++) {\n          v3+=matrix.get(k,l) * matrix.get(k,l) / (size * size);\n        }\n      }\n      double v4=matrix.get(i,j);\n      result.set(i,j,0.5 * (v1 + v2 - v3 - (v4 * v4)));\n    }\n  }\n  return result;\n}\n"}
{"nl": "Reduce the specified columns by counting the number of unique values", "code": "public Builder countUniqueColumns(String... columns){\n  return add(ReduceOp.CountUnique,columns);\n}\n"}
{"nl": "Whether this world map is instance type", "code": "public boolean isInstanceType(){\n  return worldMapTemplate.isInstance();\n}\n"}
{"nl": "compare two ResourceEditionNode", "code": "public RevisionAwareDifferencer(){\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void d(Class<?> clazz,String msg){\n  if (isDebug) {\n    Log.d(clazz.getSimpleName(),msg);\n  }\n}\n"}
{"nl": "init enemy attack", "code": "public void ResetAttack(){\n  loop=0;\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0,0,0,0,0,0.0455118580441,0.070444173646,0.0896924681582,0.112794186114,0.151439332084};\n}\n"}
{"nl": "return Pearson's correlation coefficient", "code": "private float computeCorrelationCoefficentTransposed(String seriesNameX,String seriesNameY){\n  final ArrayList<Double> xValues=new ArrayList<>(getChartData().getClassNames().size());\n  final ArrayList<Double> yValues=new ArrayList<>(getChartData().getClassNames().size());\n  for (  String className : getChartData().getClassNames()) {\n    xValues.add(getChartData().getValueAsDouble(seriesNameX,className));\n    yValues.add(getChartData().getValueAsDouble(seriesNameY,className));\n  }\n  return (float)Correlation.computePersonsCorrelationCoefficent(xValues.size(),xValues,yValues);\n}\n"}
{"nl": "Update the key modifiers mask", "code": "public void updateModifiers(int modifiers){\n  myMouseInteraction.setIsControlDown(((modifiers & InputEvent.CTRL_DOWN_MASK) != 0) || ((modifiers & InputEvent.CTRL_MASK) != 0));\n  myMouseInteraction.setIsShiftDown(((modifiers & InputEvent.SHIFT_DOWN_MASK) != 0) || ((modifiers & InputEvent.SHIFT_MASK) != 0));\n  myMouseInteraction.setIsAltDown(((modifiers & InputEvent.ALT_DOWN_MASK) != 0) || ((modifiers & InputEvent.ALT_MASK) != 0));\n}\n"}
{"nl": "Do interpolation on the samples according to the original and destinated sample rates", "code": "public short[] interpolate(int oldSampleRate,int newSampleRate,short[] samples){\n  if (oldSampleRate == newSampleRate) {\n    return samples;\n  }\n  int newLength=Math.round(((float)samples.length / oldSampleRate * newSampleRate));\n  float lengthMultiplier=(float)newLength / samples.length;\n  short[] interpolatedSamples=new short[newLength];\n  for (int i=0; i < newLength; i++) {\n    float currentPosition=i / lengthMultiplier;\n    int nearestLeftPosition=(int)currentPosition;\n    int nearestRightPosition=nearestLeftPosition + 1;\n    if (nearestRightPosition >= samples.length) {\n      nearestRightPosition=samples.length - 1;\n    }\n    float slope=samples[nearestRightPosition] - samples[nearestLeftPosition];\n    float positionFromLeft=currentPosition - nearestLeftPosition;\n    interpolatedSamples[i]=(short)(slope * positionFromLeft + samples[nearestLeftPosition]);\n  }\n  return interpolatedSamples;\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  boolean isTopStrand=((!record.getReadNegativeStrandFlag() && !record.getReadPairedFlag()) || (!record.getReadNegativeStrandFlag() && record.getReadPairedFlag() && record.getFirstOfPairFlag()) || (record.getReadNegativeStrandFlag() && record.getReadPairedFlag() && record.getSecondOfPairFlag()));\n  if (include) {\n    if (isTopStrand) {\n      return false;\n    }\n  }\n else {\n    if (!isTopStrand) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "does B part contain set H?", "code": "public boolean isBcontains(BitSet H){\n  BitSet M=((BitSet)B.clone());\n  M.and(H);\n  return M.cardinality() == H.cardinality();\n}\n"}
{"nl": "Method to delete an ES index", "code": "public static void deleteESTestIndex(String index){\n  logger.info(\"Deleting index:\");\n  ProcessBuilder pDelete=new ProcessBuilder(\"curl\",\"-XDELETE\",index);\n  try {\n    executeCommand(pDelete);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public StringCharacterIterator(String text){\n  this(text,0);\n}\n"}
{"nl": "read double, little endian", "code": "public double readDouble() throws IOException {\n  read(bytes,0,8);\n  for (int i=0; i < 8; i++)   byteBuffer.put(i,bytes[8 - i - 1]);\n  return byteBuffer.getDouble(0);\n}\n"}
{"nl": "Create a TimeMetaData column with no restriction on the allowable times", "code": "public TimeMetaData(String name,TimeZone timeZone){\n  this(name,timeZone,null,null);\n}\n"}
{"nl": "Check if object is known", "code": "public boolean knowns(AionObject object){\n  return knownObjects.containsKey(object.getObjectId());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public OrdersChangeStateQuery(VkApiClient client,UserActor actor,int orderId,OrdersChangeStateAction action){\n  super(client,\"orders.changeState\",String.class);\n  accessToken(actor.getAccessToken());\n  orderId(orderId);\n  action(action);\n}\n"}
{"nl": "Utility method to create an editable combo box", "code": "protected Combo createEditableCombo(Composite parent){\n  Combo combo=new Combo(parent,SWT.NULL);\n  GridData data=new GridData(GridData.FILL_HORIZONTAL);\n  data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;\n  combo.setLayoutData(data);\n  return combo;\n}\n"}
{"nl": "Determine the validity of the current weather", "code": "public boolean isValid(){\n  return wind != null && condition != null && !condition.isEmpty();\n}\n"}
{"nl": "To apply 'rate' specifications to NodeList (with only 'ph' elements)", "code": "private void applySpeechRateSpecifications(NodeList nl,String rateAttribute){\n  if (\"\".equals(rateAttribute)) {\n    return;\n  }\n  boolean hasLabel=rateAttribute.equals(\"x-slow\") || rateAttribute.equals(\"slow\") || rateAttribute.equals(\"medium\")|| rateAttribute.equals(\"fast\")|| rateAttribute.equals(\"x-fast\")|| rateAttribute.equals(\"default\");\n  if (hasLabel) {\n    rateAttribute=rateLabels2RelativeValues(rateAttribute);\n  }\n  if (!(rateAttribute.startsWith(\"+\") || rateAttribute.startsWith(\"-\")) && rateAttribute.endsWith(\"%\")) {\n    double absolutePercentage=new Double(rateAttribute.substring(0,rateAttribute.length() - 1)).doubleValue();\n    if (absolutePercentage == 100) {\n      return;\n    }\n else {\n      rateAttribute=df.format(absolutePercentage / 100);\n    }\n  }\n  boolean hasPositiveInteger=!rateAttribute.endsWith(\"%\") && (!rateAttribute.startsWith(\"+\") || !rateAttribute.startsWith(\"-\"));\n  if (hasPositiveInteger) {\n    rateAttribute=positiveInteger2RelativeValues(rateAttribute);\n  }\n  Pattern p=Pattern.compile(\"[+|-][0-9]+(.[0-9]+)?[%]?\");\n  Matcher m=p.matcher(rateAttribute);\n  if (m.find()) {\n    double percentage=new Double(rateAttribute.substring(1,rateAttribute.length() - 1)).doubleValue();\n    if (rateAttribute.startsWith(\"+\")) {\n      modifySpeechRate(nl,percentage,true);\n    }\n else {\n      modifySpeechRate(nl,percentage,false);\n    }\n  }\n}\n"}
{"nl": "Run a fixed in the time (HH:MM:SS) task", "code": "@Override public void initTrigger(){\n  Calendar calendar=Calendar.getInstance();\n  calendar.set(Calendar.HOUR_OF_DAY,hour);\n  calendar.set(Calendar.MINUTE,minute);\n  calendar.set(Calendar.SECOND,second);\n  long delay=calendar.getTimeInMillis() - System.currentTimeMillis();\n  if (delay < 0) {\n    delay+=DAY_IN_MSEC;\n  }\n  ThreadPoolManager.getInstance().scheduleAtFixedRate(this,delay,DAY_IN_MSEC);\n}\n"}
{"nl": "Set place str", "code": "public PhotosEditQuery placeStr(String value){\n  return unsafeParam(\"place_str\",value);\n}\n"}
{"nl": "Checks whether at least one method in the given class is registered in the taint wrapper", "code": "private boolean hasWrappedMethodsForClass(SootClass parentClass,boolean newTaints,boolean killTaints,boolean excludeTaints){\n  if (newTaints && classList.containsKey(parentClass.getName()))   return true;\n  if (excludeTaints && excludeList.containsKey(parentClass.getName()))   return true;\n  if (killTaints && killList.containsKey(parentClass.getName()))   return true;\n  return false;\n}\n"}
{"nl": "Decrypt a string", "code": "@SuppressWarnings(\"restriction\") public synchronized String decrypt(String str){\n  byte[] dec;\n  try {\n    dec=decoder.decodeBuffer(str);\n    byte[] utf8=decrypter.doFinal(dec);\n    return new String(utf8,\"UTF-8\");\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  IllegalBlockSizeException e) {\n    e.printStackTrace();\n  }\ncatch (  BadPaddingException e) {\n    e.printStackTrace();\n  }\n  return str;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AppsGetScoreQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"apps.getScore\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "Update the positions of the resize handles", "code": "private void updateResizeHandlesPositions(ViewTransform viewTransform){\n  for (  ResizeHandle mResizeHandle : mResizeHandles) {\n    mResizeHandle.updatePosition(viewTransform);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... itemIds){\n  super(client,\"market.getById\",GetByIdExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  itemIds(itemIds);\n  extended(true);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQuery(VkApiClient client,String groupId){\n  super(client,\"groups.isMember\",BoolInt.class);\n  groupId(groupId);\n}\n"}
{"nl": "Create a OPCHardwareAddress object", "code": "public OPCHardwareAddressImpl(final String pItemName) throws ConfigurationException {\n  this(pItemName,0);\n}\n"}
{"nl": "Remove all of the specified columns, by name", "code": "public Builder removeColumns(Collection<String> columnNames){\n  return transform(new RemoveColumnsTransform(columnNames.toArray(new String[columnNames.size()])));\n}\n"}
{"nl": "Return the vector resulting in this vector minus the values of the other vector", "code": "public Vector minus(Vector other){\n  return new Vector(x - other.x,y - other.y);\n}\n"}
{"nl": "Item description", "code": "protected MarketAddQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n"}
{"nl": "does table contain cell", "code": "public boolean contains(R rowKey,C columnKey){\n  if (rowKey == null || columnKey == null)   return false;\n  Map<C,V> row=dataMap.get(rowKey);\n  return row != null && row.containsKey(columnKey);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AuthCheckPhoneQuery(VkApiClient client,String phone,String clientSecret){\n  super(client,\"auth.checkPhone\",OkResponse.class);\n  phone(phone);\n  clientSecret(clientSecret);\n}\n"}
{"nl": "DataStorage instantiation of cache and space data interfaces implementation,", "code": "public DataStorage(Object store){\n  if (store instanceof DataProvider)   _saDataProvider=(DataProvider<T>)store;\n else   _saDataProvider=null;\n  if (store instanceof DataPersister)   _saDataPersister=(DataPersister<T>)store;\n else   _saDataPersister=null;\n  if (store instanceof SQLDataProvider)   _saSQLDataProvider=(SQLDataProvider<T>)store;\n else   _saSQLDataProvider=null;\n  if (store instanceof BulkDataPersister)   _saBulkDataPersister=(BulkDataPersister)store;\n else   _saBulkDataPersister=null;\n  if (store instanceof ManagedDataSource)   _saManagedDataSource=(ManagedDataSource)store;\n else   _saManagedDataSource=null;\n  if (_logger.isLoggable(Level.CONFIG)) {\n    _logger.config(\"\\n\\t Space Data Storage <\" + store + \"> Loaded\"+ \"\\n\\t\\t \"+ DataProvider.class.getSimpleName()+ \"              : \"+ (isDataProvider() ? \"Implemented\" : \"-\")+ \"\\n\\t\\t \"+ DataPersister.class.getSimpleName()+ \"             : \"+ (isDataPersister() ? \"Implemented\" : \"-\")+ \"\\n\\t\\t \"+ BulkDataPersister.class.getSimpleName()+ \"         : \"+ (isBulkDataPersister() ? \"Implemented\" : \"-\")+ \"\\n\\t\\t \"+ SQLDataProvider.class.getSimpleName()+ \"           : \"+ (isSQLDataProvider() ? \"Implemented\" : \"-\")+ \"\\n\\t\\t \"+ ManagedDataSource.class.getSimpleName()+ \"         : \"+ (isManagedDataSource() ? \"Implemented\" : \"-\")+ \"\\n\");\n  }\n}\n"}
{"nl": "need for real time permissions", "code": "@Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){\n  super.onRequestPermissionsResult(requestCode,permissions,grantResults);\n  contentManager.onRequestPermissionsResult(requestCode,permissions,grantResults);\n}\n"}
{"nl": "Test case where the simple sub process of previous test cases is nested within two other sub processes", "code": "@Deployment public void testDoubleNestedSimpleSubProcess(){\n  ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"nestedSimpleSubProcess\");\n  Task subProcessTask=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();\n  assertEquals(\"Task in subprocess\",subProcessTask.getName());\n  taskService.complete(subProcessTask.getId());\n  Task taskAfterSubProcesses=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();\n  assertEquals(\"Task after subprocesses\",taskAfterSubProcesses.getName());\n}\n"}
{"nl": "Dumps the wave data associated with this result", "code": "public void dumpASCII(String path) throws IOException {\n  Writer writer=new FileWriter(path,true);\n  getWave().dump(writer);\n}\n"}
{"nl": "send to recipient directly with has not any message", "code": "public void sendNoMsgToTarget(Object target){\n  sendToTargetOrType(target.getClass(),null);\n}\n"}
{"nl": "Construct a list of DOMImplementations from an ArrayList", "code": "public DOMImplementationListImpl(ArrayList params){\n  fImplementations=params;\n}\n"}
{"nl": "true - audio file will not be available for search false - audio file will be available for search (default)", "code": "public AudioEditQuery noSearch(Boolean value){\n  return unsafeParam(\"no_search\",value);\n}\n"}
{"nl": "Complaint reason", "code": "protected MarketReportCommentQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n"}
{"nl": "Looks up a class definition for the given name, if possible", "code": "@Nullable public byte[] findClassDefinition(@NotNull String name,@NotNull AppResourceRepository appRepo){\n  int index=name.lastIndexOf('.');\n  if (index != -1 && name.charAt(index + 1) == 'R' && (index == name.length() - 2 || name.charAt(index + 2) == '$') && index > 1) {\n    String pkg=name.substring(0,index);\n    if (myPackages != null && myPackages.contains(pkg)) {\n      AarResourceClassGenerator generator=myGeneratorMap.get(appRepo);\n      if (generator != null) {\n        return generator.generate(name);\n      }\n    }\n  }\n  return null;\n}\n"}
{"nl": "Increase receive finish count using for meteor game", "code": "public void increaseReceiveFinishEventCount(){\n  this.nReceiveFinishEventCount++;\n}\n"}
{"nl": "recursively visit all nodes and set edge weights The weight of an edge e is the maximum sum of overlaps on any outgoing path from e", "code": "private int visitNodesRec(Node v,EdgeMap<Integer> edgeWeights){\n  int maxValue=0;\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    if (edgeWeights.get(e) == null) {\n      edgeWeights.set(e,visitNodesRec(e.getTarget(),edgeWeights) + (Integer)e.getInfo());\n    }\n    maxValue=Math.max(maxValue,edgeWeights.get(e));\n  }\n  return maxValue;\n}\n"}
{"nl": "Close current activity correctly", "code": "private void close(){\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   this.supportFinishAfterTransition();\n else   finish();\n}\n"}
{"nl": "Inflate the custom view default layout", "code": "private void postInit(){\n  isConnected=NetworkUtil.getConnectivityStatus(mContext);\n  LayoutInflater.from(mContext).inflate(R.layout.layout_flow,this);\n  contentView=(FrameLayout)findViewById(R.id.content_view);\n  emptyView=(FrameLayout)findViewById(R.id.empty_view);\n  progressView=(FrameLayout)findViewById(R.id.progress_view);\n  connectivityView=(FrameLayout)findViewById(R.id.connectivity_view);\n  inflateLayouts();\n}\n"}
{"nl": "* Northern Shield Generator Periodic Spawn  *", "code": "private void startWaveNorthernShieldGenerator1(){\n  sp(233726,174.50981f,251.38982f,292.43088f,(byte)0,1000,\"NorthernShieldGenerator1\");\n  sp(233727,174.9973f,254.4739f,292.3325f,(byte)0,1000,\"NorthernShieldGenerator2\");\n  sp(233857,174.84029f,257.80832f,292.4389f,(byte)0,1000,\"NorthernShieldGenerator3\");\n}\n"}
{"nl": "Generates out of this class instance a JSON message", "code": "public final String toJson(){\n  return getGson().toJson(this);\n}\n"}
{"nl": "This method is called, when view is ready", "code": "@Override public void onLoad(boolean viewRecreated){\n  super.onLoad(viewRecreated);\n}\n"}
{"nl": "creates a label", "code": "private Label createLabel(Composite parent,String text,int span){\n  Label label=new Label(parent,SWT.LEFT);\n  label.setText(text);\n  GridData data=new GridData();\n  data.horizontalSpan=span;\n  data.horizontalAlignment=GridData.FILL;\n  label.setLayoutData(data);\n  return label;\n}\n"}
{"nl": "Change item icon if space navigation already set up", "code": "public void changeItemIconAtPosition(int itemIndex,int newIcon){\n  if (itemIndex < 0 || itemIndex > spaceItems.size()) {\n    throwArrayIndexOutOfBoundsException(itemIndex);\n  }\n else {\n    SpaceItem spaceItem=spaceItems.get(itemIndex);\n    RelativeLayout textAndIconContainer=(RelativeLayout)spaceItemList.get(itemIndex);\n    ImageView spaceItemIcon=(ImageView)textAndIconContainer.findViewById(R.id.space_icon);\n    spaceItemIcon.setImageResource(newIcon);\n    spaceItem.setItemIcon(newIcon);\n    changedItemAndIconHashMap.put(itemIndex,spaceItem);\n  }\n}\n"}
{"nl": "Adds a new fields to the SlickForm's fields collection", "code": "public SlickForm withFields(FormField[] fields){\n  Collections.addAll(this.formFields,fields);\n  return this;\n}\n"}
{"nl": "rescan the heatmap", "code": "public void update(){\n  clear();\n  final String[] columnNames=new String[classificationViewer.getNumberOfDatasets() + 1];\n  columnNames[0]=classificationViewer.getClassName();\n  for (int i=1; i <= classificationViewer.getNumberOfDatasets(); i++) {\n    columnNames[i]=\"Reads [\" + i + \"]\";\n  }\n  model.setColumnIdentifiers(columnNames);\n  for (int i=0; i < getColumnCount(); i++) {\n    TableColumn col=getColumnModel().getColumn(i);\n    col.setCellRenderer(cellRenderer);\n  }\n  if (classificationViewer.getTree().getRoot() != null) {\n    buildHeatMapRec(classificationViewer.getTree().getRoot(),new HashSet<Integer>());\n  }\n  int[] maxCounts=new int[classificationViewer.getNumberOfDatasets()];\n  for (Node v=classificationViewer.getTree().getFirstNode(); v != null; v=v.getNext()) {\n    if (v.getOutDegree() == 0) {\n      NodeData data=classificationViewer.getNodeData(v);\n      if (data != null) {\n        int[] summarized=data.getSummarized();\n        int top=Math.min(summarized.length,maxCounts.length);\n        for (int i=0; i < top; i++) {\n          maxCounts[i]=Math.max(maxCounts[i],summarized[i]);\n        }\n      }\n    }\n  }\n  cellRenderer.setMaxCounts(maxCounts);\n}\n"}
{"nl": "Constructs new instance of <tt>CM_CM_REQUEST_DIALOG </tt> packet", "code": "public CM_CLOSE_DIALOG(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Parses the given date using the default date formats", "code": "public Date parse(String rawDate) throws DateParseException {\n  for (  Locale locale : LOCALES) {\n    for (    String format : DATE_FORMATS) {\n      DateTimeFormatter formatter=DateTimeFormat.forPattern(format).withLocale(locale).withDefaultYear(DateConstants.NO_YEAR);\n      try {\n        LocalDate parsedDate=formatter.parseLocalDate(rawDate);\n        int dayOfMonth=parsedDate.getDayOfMonth();\n        @MonthInt int month=parsedDate.getMonthOfYear();\n        int year=parsedDate.getYear();\n        if (year == DateConstants.NO_YEAR) {\n          return Date.on(dayOfMonth,month);\n        }\n else {\n          return Date.on(dayOfMonth,month,year);\n        }\n      }\n catch (      IllegalArgumentException e) {\n        if (BuildConfig.DEBUG && isNotAboutInvalidFormat(e)) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n  throw new DateParseException(\"Unable to parse \" + rawDate);\n}\n"}
{"nl": "Show empty view when there are not data to show", "code": "public void showEmpty(Drawable emptyImageDrawable,String emptyTextContent,List<Integer> skipIds){\n  switchState(EMPTY,emptyImageDrawable,emptyTextContent,null,null,skipIds);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"users.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Find a view closest to center, return its index (relative the children views)", "code": "int findCenterViewIndex(){\n  int count=getChildCount();\n  int index=RecyclerView.NO_POSITION;\n  int closest=Integer.MAX_VALUE;\n  int centerY=getCenterYPos();\n  for (int i=0; i < count; ++i) {\n    View child=getChildAt(i);\n    int childCenterY=mTicklableRecyclerView.getTop() + ViewPropertiesHelper.getCenterYPos(child);\n    int distance=Math.abs(centerY - childCenterY);\n    if (distance < closest) {\n      closest=distance;\n      index=i;\n    }\n  }\n  if (index == RecyclerView.NO_POSITION) {\n    throw new IllegalStateException(\"Can\\'t find central view.\");\n  }\n else {\n    return index;\n  }\n}\n"}
{"nl": "send file content callback function, be called only once when the file uploaded", "code": "public int send(OutputStream out) throws IOException {\n  FileInputStream fis;\n  int readBytes;\n  byte[] buff=new byte[256 * 1024];\n  fis=new FileInputStream(this.local_filename);\n  try {\n    while ((readBytes=fis.read(buff)) >= 0) {\n      if (readBytes == 0) {\n        continue;\n      }\n      out.write(buff,0,readBytes);\n    }\n  }\n  finally {\n    fis.close();\n  }\n  return 0;\n}\n"}
{"nl": "Compress the desired object using GigaSpaces compression facility", "code": "private MarshObject compressObject(Object objToCompress) throws IOException {\n  CompressedMarshObjectConvertor cv=null;\n  try {\n    cv=_compressedConvertorPool.getResource();\n    MarshObject cmo=cv.getMarshObject(objToCompress);\n    return cmo;\n  }\n  finally {\n    if (cv != null) {\n      _compressedConvertorPool.freeResource(cv);\n    }\n  }\n}\n"}
{"nl": "Method to check valid password", "code": "public static boolean isValidPassword(@NonNull String password){\n  return !TextUtils.isEmpty(password) && password.length() >= 8 && !(Pattern.compile(PASSWORD_REGEX).matcher(password).matches());\n}\n"}
{"nl": "Quantize a float variable over the 16bits signed short range", "code": "public static short quantize(float f,float fMin,float fRange){\n  return ((short)(((double)f - (double)fMin) * 65535.0 / (fRange) - 32768.0));\n}\n"}
{"nl": "extract all reads belonging to a given set of  ids", "code": "public static int extractReadsByFViewer(final String cName,final ProgressListener progressListener,final Collection<Integer> classIds,final String outDirectory,final String outFileName,final Document doc) throws IOException, CanceledException {\n  final Classification classification=ClassificationManager.get(cName,true);\n  Map<Integer,String> classId2Name=new HashMap<>();\n  Map<Integer,Collection<Integer>> classId2Descendants=new HashMap<>();\n  for (  Integer id : classIds) {\n    classId2Name.put(id,classification.getName2IdMap().get(id));\n    classId2Descendants.put(id,classification.getFullTree().getAllDescendants(id));\n  }\n  return extractReads(progressListener,cName,classIds,classId2Name,classId2Descendants,outDirectory,outFileName,doc,true);\n}\n"}
{"nl": "Close the writer", "code": "public static void closeWriter(){\n  try {\n    if (writer != null) {\n      writer.flush();\n      writer.close();\n      writer=null;\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return locked;\n}\n"}
{"nl": "determines whether these splits contains a pair with all four intersections", "code": "public boolean containsPairWithAllFourIntersections(){\n  for (int s=1; s <= size(); s++) {\n    Split S=getSplit(s);\n    for (int t=s + 1; t <= size(); t++) {\n      Split T=getSplit(t);\n      if (S.getA().intersects(T.getA()) && S.getA().intersects(T.getB()) && S.getB().intersects(T.getA())&& S.getB().intersects(T.getB()))       return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "compute the BLAST frame", "code": "private static int computeBlastFrame(int frame){\n  return frame <= 2 ? frame + 1 : 2 - frame;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public final void reset(char[] chars,int start,int count){\n  if (chars == null) {\n    chars=this.emptyCharArray;\n  }\n  this.text=chars;\n  reset(start,count);\n}\n"}
{"nl": "Runs a number of batches of callbacks until the invocation queue is depleted", "code": "public void updateAllSteps(){\n  Runnable batch=myBatchQueue.poll();\n  while (batch != null) {\n    batch.run();\n    batch=myBatchQueue.poll();\n  }\n}\n"}
{"nl": "Create an <code>unsigned long</code>", "code": "public static ULong ulong(BigInteger value) throws NumberFormatException {\n  return ULong.valueOf(value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardOpenTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.openTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"move dir=down;\");\n}\n"}
{"nl": "Accessor for shift down check", "code": "public boolean isShiftDown(){\n  return mIsShiftDown;\n}\n"}
{"nl": "Draw a snap indicator for the snap candidate", "code": "public static void drawSnapIndicator(ViewTransform transform,Graphics2D g,SnapCandidate candidate){\n  if (candidate.source == null || candidate.target == null) {\n    return;\n  }\n  if (candidate.source.isVerticalAnchor()) {\n    drawSnapVerticalIndicator(transform,g,candidate);\n  }\n else {\n    drawSnapHorizontalIndicator(transform,g,candidate);\n  }\n}\n"}
{"nl": "Registers the given channel for the given name", "code": "public static void register(String name,AbstractChannel<?> channel){\n  channels.put(name,channel);\n}\n"}
{"nl": "Adds calls to the callback methods defined in the application class", "code": "private void addApplicationCallbackMethods(){\n  if (!this.callbackFunctions.containsKey(applicationClass.getName()))   return;\n  if (applicationClass.isAbstract())   return;\n  if (applicationClass.isPhantom()) {\n    System.err.println(\"Skipping possible application callbacks in \" + \"phantom class \" + applicationClass);\n    return;\n  }\n  for (  String methodSig : this.callbackFunctions.get(applicationClass.getName())) {\n    SootMethodAndClass methodAndClass=SootMethodRepresentationParser.v().parseSootMethodString(methodSig);\n    if (AndroidEntryPointConstants.getApplicationLifecycleMethods().contains(methodAndClass.getSubSignature()))     continue;\n    SootMethod method=findMethod(Scene.v().getSootClass(methodAndClass.getClassName()),methodAndClass.getSubSignature());\n    if (method == null)     continue;\n    if (method.getDeclaringClass().getName().startsWith(\"android.\") || method.getDeclaringClass().getName().startsWith(\"java.\"))     continue;\n    Local local=this.localVarsForClasses.get(methodAndClass.getClassName());\n    if (local == null) {\n      System.err.println(\"Could not create call to application callback \" + method.getSignature() + \". Local was null.\");\n      continue;\n    }\n    JNopStmt thenStmt=new JNopStmt();\n    createIfStmt(thenStmt);\n    buildMethodCall(method,body,local,generator);\n    body.getUnits().add(thenStmt);\n  }\n}\n"}
{"nl": "Deletes the concept as an Instance", "code": "@Override public void innerDelete(){\n  InstanceImpl<?,?> parent=this;\n  Set<CastingImpl> castings=parent.castings();\n  deleteNode();\n  for (  CastingImpl casting : castings) {\n    Set<RelationImpl> relations=casting.getRelations();\n    getMindmapsGraph().getConceptLog().putConcept(casting);\n    for (    RelationImpl relation : relations) {\n      getMindmapsGraph().getConceptLog().putConcept(relation);\n      relation.cleanUp();\n    }\n    casting.deleteNode();\n  }\n}\n"}
{"nl": "decrease item count and return left count", "code": "long decreaseItemCount(Item item,long count,ItemUpdateType updateType,Player actor){\n  return decreaseItemCount(item,count,updateType,QuestStatus.NONE,actor);\n}\n"}
{"nl": "Required for Externalizable", "code": "public WriteEntriesSpaceOperationResult(){\n}\n"}
{"nl": "No ordering", "code": "public boolean runAfter(List tasks,int size){\n  return false;\n}\n"}
{"nl": "Set up the form and initialize it", "code": "public void init(){\n  verticalStepperFormLayout.initialiseVerticalStepperForm(this);\n}\n"}
{"nl": "receive whole pack", "code": "public static PkgInfo recvPackage(InputStream in,byte expect_cmd,long expect_body_len) throws IOException {\n  PkgHeader header=recvHeader(in,expect_cmd,expect_body_len);\n  if (header.status != 0) {\n    return new PkgInfo(header,null);\n  }\n  byte[] body=new byte[header.body_len];\n  int totalBytes=0;\n  int remainBytes=header.body_len;\n  int bytes;\n  while (totalBytes < header.body_len) {\n    if ((bytes=in.read(body,totalBytes,remainBytes)) < 0) {\n      break;\n    }\n    totalBytes+=bytes;\n    remainBytes-=bytes;\n  }\n  if (totalBytes != header.body_len) {\n    throw new IOException(\"recv package size \" + totalBytes + \" != \"+ header.body_len);\n  }\n  return new PkgInfo(header,body);\n}\n"}
{"nl": "Set start message id", "code": "public MessagesMarkAsReadQuery startMessageId(Integer value){\n  return unsafeParam(\"start_message_id\",value);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  String name=ProgramProperties.get(MeganProperties.FINDTAXON,\"\");\n  name=JOptionPane.showInputDialog(inspectorWindow.getFrame(),\"Enter taxon name or Id\",name);\n  if (name != null && name.trim().length() > 0) {\n    name=name.trim();\n    ProgramProperties.put(MeganProperties.FINDTAXON,name);\n    executeImmediately(\"show taxon='\" + name + \"';\");\n  }\n}\n"}
{"nl": "Convert bytes to hased pair", "code": "public static int pairBytesToHashcode(byte[] pairBytes){\n  return (pairBytes[0] & 0xFF) << 8 | (pairBytes[1] & 0xFF);\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.00240506434076,0.0190372444310,0.0417464784322,0.0736683145538,0.125355951380,0.00240506434076,0.0190372444310,0.0417464784322,0.0736683145538,0.125355951380};\n}\n"}
{"nl": "Populate member data", "code": "private static void populate(){\n  geometryMap.put(Point.class,GeometryTypeEnum.POINT);\n  geometryMap.put(MultiPoint.class,GeometryTypeEnum.POINT);\n  geometryMap.put(LineString.class,GeometryTypeEnum.LINE);\n  geometryMap.put(MultiLineString.class,GeometryTypeEnum.LINE);\n  geometryMap.put(Polygon.class,GeometryTypeEnum.POLYGON);\n  geometryMap.put(MultiPolygon.class,GeometryTypeEnum.POLYGON);\n}\n"}
{"nl": "Set fields", "code": "public MessagesGetHistoryAttachmentsQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int writeValueAndType(boolean hasValue,int value,int node){\n}\n"}
{"nl": "Returns a key identifying a plain target", "code": "public static RuleKey forPlainTarget(Label label){\n  return new RuleKey(label);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesSetChatPhotoQuery(VkApiClient client,UserActor actor,String file){\n  super(client,\"messages.setChatPhoto\",SetChatPhotoResponse.class);\n  accessToken(actor.getAccessToken());\n  file(file);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UtilsResolveScreenNameQuery(VkApiClient client,String screenName){\n  super(client,\"utils.resolveScreenName\",DomainResolved.class);\n  screenName(screenName);\n}\n"}
{"nl": "A folder is considered dirty if its status is dirty or if one of its children is dirty", "code": "public boolean isDirty() throws SVNException {\n  if (getStatusFromCache().isDirty()) {\n    return true;\n  }\n  ISVNLocalResource[] children=(ISVNLocalResource[])members(new NullProgressMonitor(),ALL_UNIGNORED_MEMBERS);\n  for (int i=0; i < children.length; i++) {\n    if (children[i].isDirty() || children[i].getStatusFromCache().isMissing() || (children[i].exists() && !children[i].isManaged())) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Create a text field specific for this application", "code": "static public Text createTextField(Composite parent){\n  Text text=new Text(parent,SWT.SINGLE | SWT.BORDER);\n  GridData data=new GridData(GridData.FILL_HORIZONTAL);\n  data.verticalAlignment=GridData.CENTER;\n  data.grabExcessVerticalSpace=false;\n  data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;\n  text.setLayoutData(data);\n  return text;\n}\n"}
{"nl": "Set database instance", "code": "public void openDatabase() throws SQLException {\n  myDataBase=getWritableDatabase();\n}\n"}
{"nl": "Post will be signed with the name of the posting user Only for posts in communities with \"from_group\"", "code": "public WallPostQuery signed(Boolean value){\n  return unsafeParam(\"signed\",value);\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  super.destroyView();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveAddLinkQuery(VkApiClient client,UserActor actor,String link){\n  super(client,\"fave.addLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  link(link);\n}\n"}
{"nl": "Check if provided string matches regex", "code": "public void assertMatches(String errorMessage,String stringToMatch,String regex){\n  assertTrue(errorMessage,stringToMatch.matches(regex));\n}\n"}
{"nl": "Add key without value to a cache list per language, so it can be displayed on the portlet", "code": "@SuppressWarnings(\"unchecked\") private String addKeyToCacheAndReturnKey(String key,String languageId){\n  List<String> keyList=(List<String>)LanguageListCacheGroupHandler.getInstance().get(Configuration.CacheListKeysWithoutValue + languageId);\n  if (!keyList.contains(key)) {\n    keyList.add(key);\n  }\n  if (!Configuration.isValueOfKeyEmptyShowKey()) {\n    if (Configuration.isReplacementValueAnEmptyString()) {\n      key=\"\";\n    }\n else {\n      key=Configuration.getReplacementValueIfValueIsEmpty();\n    }\n  }\n  return key;\n}\n"}
{"nl": "Removes all visualizations from the card list adapter that are currently not requested", "code": "private void removeUnneededVisualizationCards(){\n  Map<String,VisualizationCardData> removableVisualizationCards=new HashMap<>();\n  Map<String,VisualizationCardData> visualizationCards=cardListAdapter.getVisualizationCards();\n  for (  Map.Entry<String,VisualizationCardData> visualizationCardDataEntry : visualizationCards.entrySet()) {\n    String nodeId=visualizationCardDataEntry.getKey();\n    VisualizationCardData visualizationCard=visualizationCardDataEntry.getValue();\n    if (!isRequestingSensorEventData(nodeId,visualizationCard.getDataBatch().getSource())) {\n      removableVisualizationCards.put(nodeId,visualizationCard);\n      continue;\n    }\n  }\n  for (  Map.Entry<String,VisualizationCardData> visualizationCardDataEntry : removableVisualizationCards.entrySet()) {\n    Log.d(TAG,\"Removing unneeded visualization card: \" + visualizationCardDataEntry.getValue().getHeading());\n    cardListAdapter.remove(visualizationCardDataEntry.getValue());\n  }\n}\n"}
{"nl": "returns true, if all viewers are uptodate", "code": "public boolean isAllViewersUptodate(){\n  for (  IDirectableViewer viewer : viewers) {\n    if (!viewer.isUptoDate()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Sets rationale dialog message", "code": "public Builder withRationaleDialogMsg(@StringRes int rationaleMsgRes){\n  buildObj.rationaleDialogMsgRes=rationaleMsgRes;\n  buildObj.showRationaleDialog=true;\n  return this;\n}\n"}
{"nl": "Required for Externalizable", "code": "public CommitPreparedTransactionSpaceOperationRequest(){\n}\n"}
{"nl": "Collection id", "code": "protected MarketEditAlbumQuery albumId(int value){\n  return unsafeParam(\"album_id\",value);\n}\n"}
{"nl": "start daemon", "code": "private static void start(Context context,Class<?> daemonClazzName,int interval){\n  String cmd=context.getDir(BIN_DIR_NAME,Context.MODE_PRIVATE).getAbsolutePath() + File.separator + DAEMON_BIN_NAME;\n  StringBuilder cmdBuilder=new StringBuilder();\n  cmdBuilder.append(cmd);\n  cmdBuilder.append(\" -p \");\n  cmdBuilder.append(context.getPackageName());\n  cmdBuilder.append(\" -s \");\n  cmdBuilder.append(daemonClazzName.getName());\n  cmdBuilder.append(\" -t \");\n  cmdBuilder.append(interval);\n  try {\n    Runtime.getRuntime().exec(cmdBuilder.toString()).waitFor();\n  }\n catch (  IOException|InterruptedException e) {\n    Log.e(TAG,\"start daemon error: \" + e.getMessage());\n  }\n}\n"}
{"nl": "Converts an options byte array to a linked list", "code": "public void internalize(byte[] optionsArray){\n  int pos=4;\n  byte code, length;\n  byte value[];\n  while (optionsArray[pos] != (byte)255) {\n    code=optionsArray[pos++];\n    length=optionsArray[pos++];\n    value=getArrayOption(length,pos,optionsArray);\n    setOption(code,value);\n    pos+=length;\n  }\n}\n"}
{"nl": "Constructs new instance of <tt>CM_MAC_ADDRESS </tt> packet", "code": "public CM_MAC_ADDRESS(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public StringTokenizer(String str,UnicodeSet delim,boolean returndelims,boolean coalescedelims){\n  this.m_source_=str;\n  this.m_length_=str.length();\n  if (delim == null) {\n    this.m_delimiters_=EMPTY_DELIMITER_;\n  }\n else {\n    this.m_delimiters_=delim;\n  }\n  this.m_returnDelimiters_=returndelims;\n  this.m_coalesceDelimiters_=coalescedelims;\n  this.m_tokenOffset_=-1;\n  this.m_tokenSize_=-1;\n  if (this.m_length_ == 0) {\n    this.m_nextOffset_=-1;\n  }\n else {\n    this.m_nextOffset_=0;\n    if (!returndelims) {\n      this.m_nextOffset_=getNextNonDelimiter(0);\n    }\n  }\n}\n"}
{"nl": "true if the entry packet has an array of fixed properties", "code": "@Override public boolean hasFixedPropertiesArray(){\n  return false;\n}\n"}
{"nl": "collapse the given node   or root", "code": "public void collapse(DefaultMutableTreeNode v){\n  if (v == null)   v=(DefaultMutableTreeNode)fileTree.getModel().getRoot();\n  for (Enumeration descendants=v.depthFirstEnumeration(); descendants.hasMoreElements(); ) {\n    v=(DefaultMutableTreeNode)descendants.nextElement();\n    fileTree.collapsePath(new TreePath(v.getPath()));\n  }\n}\n"}
{"nl": "Verifies that traffic log contains at least one entry matching the Predicate", "code": "public void assertContains(Predicate<HarEntry> predicate){\n  assertThat(trafficLogProvider.get(),new TrafficLogContains(Collections.singletonList(predicate)));\n}\n"}
{"nl": "Applies the state to the nodes", "code": "public void apply(){\n  assert useWeight;\n  String value=mWeight > 0 ? formatFloatAttribute(mWeight) : null;\n  component.setAttribute(ANDROID_URI,ATTR_LAYOUT_WEIGHT,value);\n  if (mClearWeights != null) {\n    for (    NlComponent n : mClearWeights) {\n      if (getWeight(n) > 0.0f) {\n        n.setAttribute(ANDROID_URI,ATTR_LAYOUT_WEIGHT,null);\n      }\n    }\n  }\n  if (mNewWeightSum > 0.0) {\n    layout.setAttribute(ANDROID_URI,ATTR_WEIGHT_SUM,formatFloatAttribute(mNewWeightSum));\n  }\n}\n"}
{"nl": "Should only be called by ClassMapper", "code": "public EntryClass(Class clazz,EntryClass superclass) throws MarshalException {\n  name=clazz.getName();\n  this.superclass=superclass;\n  ClassMapper.EntryField[] fields=ClassMapper.getFields(clazz);\n  numFields=fields.length;\n  computeHash(fields);\n}\n"}
{"nl": "Encounter pokemon", "code": "public EncounterResult encounterPokemon() throws LoginFailedException, RemoteServerException {\n  return AsyncHelper.toBlocking(encounterPokemonAsync());\n}\n"}
{"nl": "Set album ids", "code": "public VideoAddToAlbumQuery albumIds(Integer... value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "If there is an error, can it cause a project that is partially rendered?", "code": "public boolean canCausePartialRendering(){\n  return !myDryRun;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallPinQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.pin\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n"}
{"nl": "Dismiss and clear progress dialog field", "code": "protected void dismissProgress(){\n  if (progress != null) {\n    progress.dismiss();\n    progress=null;\n  }\n}\n"}
{"nl": "Method to read in the data from an allowed input format, filter, and return a RDD of MapWritable data elements", "code": "@SuppressWarnings(\"unchecked\") public JavaRDD<MapWritable> readData() throws IOException, PIRException {\n  logger.info(\"Reading data \");\n  JavaRDD<MapWritable> jsonRDD;\n  Job job=Job.getInstance();\n  String baseQuery=SystemConfiguration.getProperty(\"pir.baseQuery\");\n  String jobName=\"pirSpark_base_\" + baseQuery + \"_\"+ System.currentTimeMillis();\n  job.setJobName(jobName);\n  job.getConfiguration().setBoolean(\"mapreduce.input.fileinputformat.input.dir.recursive\",true);\n  job.getConfiguration().set(\"query\",baseQuery);\n  logger.debug(\"queryType = \" + bVars.getQueryInfo().getQueryType());\n  logger.debug(\"QuerySchemaLoader.getSchemaNames().size() = \" + QuerySchemaRegistry.getNames().size());\n  for (  String name : QuerySchemaRegistry.getNames()) {\n    logger.debug(\"schemaName = \" + name);\n  }\n  job.getConfiguration().set(\"dataSchemaName\",qSchema.getDataSchemaName());\n  job.getConfiguration().set(\"data.schemas\",SystemConfiguration.getProperty(\"data.schemas\"));\n  String classString=SystemConfiguration.getProperty(\"pir.baseInputFormat\");\n  Class<? extends BaseInputFormat<Text,MapWritable>> inputClass;\n  try {\n    inputClass=(Class<? extends BaseInputFormat<Text,MapWritable>>)Class.forName(classString);\n  }\n catch (  ClassNotFoundException|ClassCastException e) {\n    throw new PIRException(classString + \" cannot be instantiated or does not extend BaseInputFormat\",e);\n  }\n  job.setInputFormatClass(inputClass);\n  FileInputFormat.setInputPaths(job,inputData);\n  jsonRDD=sc.newAPIHadoopRDD(job.getConfiguration(),inputClass,Text.class,MapWritable.class).values().coalesce(numDataPartitions);\n  if (qSchema.getFilter() != null) {\n    return jsonRDD.filter(new FilterData(accum,bVars));\n  }\n else {\n    logger.info(\"qSchema.getFilter() is null\");\n    return jsonRDD;\n  }\n}\n"}
{"nl": "Marks that the given node should be cleared when applying the new size", "code": "void clearWeight(NlComponent n){\n  if (mClearWeights == null) {\n    mClearWeights=new ArrayList<NlComponent>();\n  }\n  mClearWeights.add(n);\n}\n"}
{"nl": "calculates the needed angles for the chart slices", "code": "private void calcAngles(){\n  mDrawAngles=new float[mData.getYValCount()];\n  mAbsoluteAngles=new float[mData.getYValCount()];\n  float yValueSum=mData.getYValueSum();\n  List<IPieDataSet> dataSets=mData.getDataSets();\n  int cnt=0;\n  for (int i=0; i < mData.getDataSetCount(); i++) {\n    IPieDataSet set=dataSets.get(i);\n    for (int j=0; j < set.getEntryCount(); j++) {\n      mDrawAngles[cnt]=calcAngle(Math.abs(set.getEntryForIndex(j).getVal()),yValueSum);\n      if (cnt == 0) {\n        mAbsoluteAngles[cnt]=mDrawAngles[cnt];\n      }\n else {\n        mAbsoluteAngles[cnt]=mAbsoluteAngles[cnt - 1] + mDrawAngles[cnt];\n      }\n      cnt++;\n    }\n  }\n}\n"}
{"nl": "Remove the container previously created using createContainer()", "code": "protected void removeContainer() throws Throwable {\n  if (containerId == null) {\n    return;\n  }\n  sendDeleteContainerRequest();\n  waitForPropertyValue(provisioningTaskLink,MockTaskState.class,\"taskInfo.stage\",TaskState.TaskStage.FINISHED);\n  if (!isMockTarget()) {\n    Thread.sleep(2000L);\n  }\n  verifyContainerDoesNotExist(containerId);\n}\n"}
{"nl": "Creates an storable activity fence which will be valid when the user is doing one of the given activity", "code": "public static StorableActivityFence during(@ActivityType int... activityTypes){\n  return new StorableActivityFence(activityTypes,DURING_TYPE);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... posts){\n  super(client,\"wall.getById\",GetByIdExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  posts(posts);\n  extended(true);\n}\n"}
{"nl": "It writes an object into one of the fallback files", "code": "public final void writeLine(final IFallback object) throws DataFallbackException {\n  String str=object.toString();\n  try {\n    output.write(str);\n    output.newLine();\n    output.flush();\n  }\n catch (  IOException e) {\n    throw new DataFallbackException(\"writeLine() : An error has ocurred while trying to write in the \" + getDataFile().getName() + \" file \"+ e.getMessage());\n  }\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"writeLine() - The object with id \" + object.getId() + \" has been logged to the \"+ dataFile.getPath()+ \" file\");\n  }\n}\n"}
{"nl": "get scope global rather than selected", "code": "public boolean isGlobalScope(){\n  return true;\n}\n"}
{"nl": "Converts a standard 32 bit/pixel RGB image into a byte array", "code": "public static byte[] int32RGBBufferedImageToByteArray(BufferedImage img){\n  int[] pixels=null;\n  DataBuffer db=img.getRaster().getDataBuffer();\n  if (db instanceof DataBufferInt)   pixels=((DataBufferInt)db).getData();\n else   throw new RuntimeException(\"Format not supported...\");\n  byte[] ret=new byte[pixels.length * 4];\n  for (int i=0; i < pixels.length; i++) {\n    ret[4 * i]=(byte)(pixels[i] & 0xff000000);\n    ret[4 * i + 1]=(byte)(pixels[i] & 0x00ff0000);\n    ret[4 * i + 2]=(byte)(pixels[i] & 0x0000ff00);\n    ret[4 * i + 3]=(byte)(pixels[i] & 0x000000ff);\n  }\n  return ret;\n}\n"}
{"nl": "Sort order", "code": "public VideoSearchQueryWithExtended sort(VideoSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Applies a slide down animation relative to itself to the view supplied", "code": "private Animation applySlideDownAnimationTo(View view){\n  Animation animation=new TranslateAnimation(Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,0.0f,Animation.RELATIVE_TO_SELF,-1.0f,Animation.RELATIVE_TO_SELF,0.0f);\n  animation.setDuration(100);\n  animation.setInterpolator(new AccelerateInterpolator());\n  view.startAnimation(animation);\n  return animation;\n}\n"}
{"nl": "Start all space components", "code": "public void startComponents(){\n  startComponents(true);\n  startComponents(false);\n  _spaceMode=SpaceMode.PRIMARY;\n}\n"}
{"nl": "A node has left the cluster", "code": "@Override public void nodeLeft(final ClusterNode clusterNode){\n  LOGGER.info(\"Detected Terracotta node left cluster: \" + clusterNode.getId());\n}\n"}
{"nl": "Deletes a faceList", "code": "public void deleteFaceList(@NotNull String faceListId){\n  faceListBuilder.deleteFaceList(faceListId).withNoResult();\n}\n"}
{"nl": "show an error notation", "code": "public static void showError(String message){\n  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,60000);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketEditCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"market.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n"}
{"nl": "do we need to recompute coordinates?", "code": "private boolean mustUpdateCoordinates(){\n  boolean mustUpdate=(dataMatrix.size() == 0);\n  if (previousTranspose != isTranspose()) {\n    mustUpdate=true;\n  }\n  if (scalingType != ChartViewer.ScalingType.LINEAR)   return mustUpdate;\n  if (previousTranspose != isTranspose()) {\n    previousTranspose=isTranspose();\n    previousClusterSeries=false;\n    previousClusterClasses=false;\n  }\n{\n    final ArrayList<String> currentClasses=new ArrayList<>();\n    currentClasses.addAll(getChartData().getClassNames());\n    if (!previousClasses.equals(currentClasses)) {\n      mustUpdate=true;\n      previousClasses.clear();\n      previousClasses.addAll(currentClasses);\n    }\n  }\n{\n    final ArrayList<String> currentSamples=new ArrayList<>();\n    currentSamples.addAll(getChartData().getSeriesNames());\n    if (!previousSamples.equals(currentSamples)) {\n      mustUpdate=true;\n      previousSamples.clear();\n      previousSamples.addAll(currentSamples);\n    }\n  }\n{\n    if (!previousClusterClasses && viewer.getClassesList().isDoClustering() && !isTranspose())     mustUpdate=true;\n  }\n{\n    if (!previousClusterSeries && viewer.getSeriesList().isDoClustering() && isTranspose())     mustUpdate=true;\n  }\n  return mustUpdate;\n}\n"}
{"nl": "This method will check whether a legion has enough members to level up", "code": "public boolean hasRequiredMembers(){\n  int memberSize=getLegionMembers().size();\nswitch (getLegionLevel()) {\ncase 1:\n    return memberSize >= LegionConfig.LEGION_LEVEL2_REQUIRED_MEMBERS;\ncase 2:\n  return memberSize >= LegionConfig.LEGION_LEVEL3_REQUIRED_MEMBERS;\ncase 3:\nreturn memberSize >= LegionConfig.LEGION_LEVEL4_REQUIRED_MEMBERS;\ncase 4:\nreturn memberSize >= LegionConfig.LEGION_LEVEL5_REQUIRED_MEMBERS;\ncase 5:\nreturn memberSize >= LegionConfig.LEGION_LEVEL6_REQUIRED_MEMBERS;\ncase 6:\nreturn memberSize >= LegionConfig.LEGION_LEVEL7_REQUIRED_MEMBERS;\ncase 7:\nreturn memberSize >= LegionConfig.LEGION_LEVEL8_REQUIRED_MEMBERS;\n}\nreturn false;\n}\n"}
{"nl": "Remember to clean the is_new flag", "code": "@Override public void do_after_propagation(){\n  for (  HeapInsIntervalManager im : new_pts.values()) {\n    im.flush();\n  }\n  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();\n}\n"}
{"nl": "Skill entry point", "code": "public boolean useSkill(){\n  return useSkill(true,true);\n}\n"}
{"nl": "Set auth by phone", "code": "public AuthCheckPhoneQuery authByPhone(Boolean value){\n  return unsafeParam(\"auth_by_phone\",value);\n}\n"}
{"nl": "Validate matching of finished launch name and project settings for emailing", "code": "static boolean isLaunchNameMatched(Launch launch,EmailSenderCase oneCase){\n  List<String> configuredNames=oneCase.getLaunchNames();\n  return (null == configuredNames) || (configuredNames.isEmpty()) || configuredNames.contains(launch.getName());\n}\n"}
{"nl": "Adds a new trap to the given body only if the given trap is not empty", "code": "private void safeAddTrap(Body b,Trap newTrap){\n  if (newTrap.getBeginUnit() != newTrap.getEndUnit())   b.getTraps().add(newTrap);\n}\n"}
{"nl": "Attach a new metadata to the feedback", "code": "public void put(final CharSequence key,final Object value){\n  this.additionalData.put(key,value);\n}\n"}
{"nl": "add a metadata table", "code": "public boolean addTable(SampleAttributeTable sampleAttributeTable,boolean allowReplaceSample,boolean allowAddAttribute){\n  boolean changed=false;\n  for (  String sample : sampleAttributeTable.getSampleSet()) {\n    if (allowReplaceSample || !table.rowKeySet().contains(sample)) {\n      if (addSample(sample,sampleAttributeTable.getAttributesToValues(sample),true,allowAddAttribute))       changed=true;\n    }\n  }\n  return changed;\n}\n"}
{"nl": "Check that alliance is ready", "code": "public static void checkReady(Player player,TeamCommand eventCode){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new CheckAllianceReadyEvent(alliance,player,eventCode));\n  }\n}\n"}
{"nl": "append file to storage server (by file buff)", "code": "public int append_file1(String appender_file_id,byte[] file_buff,int offset,int length) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.append_file(parts[0],parts[1],file_buff,offset,length);\n}\n"}
{"nl": "Utility method computing the size of the widget if dimensions are set to wrap_content, using the default font", "code": "protected void wrapContent(){\n  mWidget.setMinWidth(100);\n  mWidget.setMinHeight(100);\n  int tw=mWidget.getMinWidth();\n  int th=mWidget.getMinHeight();\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setWidth(tw);\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setHeight(th);\n  }\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getWidth() <= mWidget.getMinWidth()) {\n      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getHeight() <= mWidget.getMinHeight()) {\n      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  mWidget.setBaselineDistance(0);\n}\n"}
{"nl": "updates the row to compress row mapping", "code": "public void update(){\n  enabled=true;\n  compressedRow2Reads.clear();\n  SortedSet<Pair<Integer,Integer>> sortedReads=new TreeSet<>();\n  int numberOfCompressedRows=0;\n  int[] ends=new int[alignment.getNumberOfSequences()];\n  for (int read=0; read < alignment.getNumberOfSequences(); read++) {\n    int start=alignment.getLane(read).getFirstNonGapPosition();\n    sortedReads.add(new Pair<>(start,read));\n  }\n  for (  Pair<Integer,Integer> pair : sortedReads) {\n    int read=pair.get2();\n    int start=alignment.getLane(read).getFirstNonGapPosition();\n    boolean done=false;\n    for (int row=0; !done && row < numberOfCompressedRows; row++) {\n      if (start > ends[row] + 10) {\n        compressedRow2Reads.get(row).add(read);\n        ends[row]=alignment.getLane(read).getLastNonGapPosition();\n        done=true;\n      }\n    }\n    if (!done) {\n      ends[numberOfCompressedRows]=alignment.getLane(read).getLastNonGapPosition();\n      List<Integer> reads=new LinkedList<>();\n      reads.add(read);\n      compressedRow2Reads.add(numberOfCompressedRows,reads);\n      numberOfCompressedRows++;\n    }\n  }\n}\n"}
{"nl": "Adjust if the scheme is http or https", "code": "public static boolean isHttp(String scheme){\n  return scheme.equalsIgnoreCase(\"http\") || scheme.equalsIgnoreCase(\"https\");\n}\n"}
{"nl": "Convert a task detail to a sync result (only call this when the sync is complete without errors)", "code": "private SyncResult taskDetailsToSyncResult(JSONObject taskDetails){\n  try {\n    JSONObject results=taskDetails.getJSONObject(\"result\");\n    JSONArray changesJSON=results.getJSONArray(\"changes\");\n    JSONArray conflictsJSON=results.getJSONArray(\"conflicts\");\n    String serializedLibrary=results.getString(\"library\");\n    SyncResult result=new SyncResult();\n    for (int i=0; i < changesJSON.length(); i++) {\n      result.getChanges().add(changesJSON.getString(i));\n    }\n    for (int i=0; i < conflictsJSON.length(); i++) {\n      result.getConflicts().add(conflictsJSON.getString(i));\n    }\n    result.setSerializedLibrary(serializedLibrary);\n    result.setSuccessful(true);\n    return result;\n  }\n catch (  JSONException e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  locked=true;\n  ProgramProperties.put(\"SampleViewerGeometry\",new int[]{frame.getLocation().x,frame.getLocation().y,frame.getSize().width,frame.getSize().height});\n  searchManager.getFindDialogAsToolBar().close();\n  doc.getSampleSelection().removeSampleSelectionListener(selectionListener);\n  frame.setVisible(false);\n  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());\n  dir.removeViewer(this);\n  frame.dispose();\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void e(Class<?> clazz,String msg){\n  if (isDebug) {\n    Log.e(clazz.getSimpleName(),msg);\n  }\n}\n"}
{"nl": "Creates a new instance of Decision concerning a single document", "code": "public Decision(Object dDocument,Object oFinalDecision,double dDecisionBelief,Map mDecisionEvidence){\n  Document=dDocument;\n  FinalDecision=oFinalDecision;\n  DecisionBelief=dDecisionBelief;\n  DecisionEvidence=mDecisionEvidence;\n}\n"}
{"nl": "Starts a background job which pulls all repositories from the database and adds them to the queue to be indexed", "code": "public void startEnqueueJob(){\n  try {\n    Scheduler scheduler=Singleton.getScheduler();\n    JobDetail job=newJob(EnqueueRepositoryJob.class).withIdentity(\"enqueuejob\").build();\n    SimpleTrigger trigger=newTrigger().withIdentity(\"enqueuejob\").withSchedule(simpleSchedule().withIntervalInSeconds(this.UPDATETIME).repeatForever()).build();\n    scheduler.scheduleJob(job,trigger);\n    scheduler.start();\n    Scheduler scheduler2=Singleton.getScheduler();\n    JobDetail job2=newJob(EnqueueFileRepositoryJob.class).withIdentity(\"enqueuefilejob\").build();\n    SimpleTrigger trigger2=newTrigger().withIdentity(\"enqueuefilejob\").withSchedule(simpleSchedule().withIntervalInSeconds(this.FILEINDEXUPDATETIME).repeatForever()).build();\n    scheduler2.scheduleJob(job2,trigger2);\n    scheduler2.start();\n  }\n catch (  SchedulerException ex) {\n    LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \"+ ex.getMessage());\n  }\n}\n"}
{"nl": "Converts this object to a string", "code": "@Override public String toString(){\n  return \"DummyFreeTTSVoice US-English\";\n}\n"}
{"nl": "invoke the life listener of the module", "code": "private void _init(Configuration conf){\n  try {\n    if (this.id > 0) {\n      DefaultListener d=new DefaultListener();\n      d.upgrade(conf,this);\n    }\n    if (!X.isEmpty(listener)) {\n      String name=listener;\n      if (name != null) {\n        try {\n          Class<?> c=Class.forName(name,true,classLoader);\n          Object o=c.newInstance();\n          if (o instanceof IListener) {\n            log.info(\"initializing: \" + name);\n            IListener l=(IListener)o;\n            l.upgrade(conf,this);\n            l.onStart(conf,this);\n          }\n        }\n catch (        Throwable e) {\n          log.error(this.name + \", listener=\" + name,e);\n        }\n      }\n    }\n  }\n catch (  Throwable e) {\n    log.error(e.getMessage(),e);\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"compute wordCount kmer=\");\n  int kmer=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\"step=\");\n  int step=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\"mindepth=\");\n  int mindepth=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  LinkedList<Pair<Number,Number>> depthVsDifferences=new LinkedList<>();\n  SortedMap<Number,Number> rank2percentage=new TreeMap<>();\n  WordCountAnalysis.apply(viewer.getAlignment(),kmer,step,mindepth,((Director)getDir()).getDocument().getProgressListener(),depthVsDifferences,rank2percentage);\n  System.out.println(\"Depth vs Differences (\" + depthVsDifferences.size() + \"):\");\n  for (  Pair<Number,Number> pair : depthVsDifferences) {\n    System.out.println(pair.get1() + \" \" + pair.get2());\n  }\n  System.out.println(\"done\");\n}\n"}
{"nl": "* Western Shield Generator Periodic Spawn  *", "code": "private void startWaveWesternShieldGenerator1(){\n  sp(233722,258.37912f,176.03621f,325.59268f,(byte)30,1000,\"WesternShieldGenerator1\");\n  sp(233723,255.55922f,176.17963f,325.49332f,(byte)29,1000,\"WesternShieldGenerator2\");\n  sp(233882,252.49738f,176.27466f,325.52942f,(byte)29,1000,\"WesternShieldGenerator3\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketDeleteCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"market.deleteComment\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n"}
{"nl": "Order the results according to the order by clause", "code": "public void orderBy(IQueryResultSet<IEntryPacket> entries,List<OrderColumn> orderColumns) throws SQLException {\n  Collections.sort((List<IEntryPacket>)entries,getOrderByComparator(entries,orderColumns));\n}\n"}
{"nl": "Configuration Jackson ObjectMapper", "code": "@Bean public MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter(){\n  MappingJackson2HttpMessageConverter mjhmc=new MappingJackson2HttpMessageConverter();\n  Jackson2ObjectMapperFactoryBean jomfb=new Jackson2ObjectMapperFactoryBean();\n  jomfb.setAutoDetectFields(false);\n  jomfb.setIndentOutput(shouldIndentJacksonOutput);\n  jomfb.afterPropertiesSet();\n  mjhmc.setObjectMapper(jomfb.getObject());\n  return mjhmc;\n}\n"}
{"nl": "write an int", "code": "public void writeInt(int a) throws IOException {\n  outs.write((byte)(a >> 24));\n  outs.write((byte)(a >> 16));\n  outs.write((byte)(a >> 8));\n  outs.write((byte)(a));\n  position+=4;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  final LabelsJList list=((ChartViewer)getViewer()).getActiveLabelsJList();\n  return list != null && list.getSelectedIndex() != -1;\n}\n"}
{"nl": "Add new item based on all sourceItem values", "code": "public static long addItem(Player player,Item sourceItem){\n  return addItem(player,sourceItem.getItemId(),sourceItem.getItemCount(),sourceItem,DEFAULT_UPDATE_PREDICATE);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  JFrame frame=null;\n  if (getViewer() != null)   frame=getViewer().getFrame();\n  String result=JOptionPane.showInputDialog(frame,\"Set directory:\",System.getProperty(\"user.dir\"));\n  if (result != null && result.trim().length() > 0) {\n    execute(\"set dir='\" + result.trim() + \"';\");\n  }\n}\n"}
{"nl": "setup the list", "code": "private void loadListFromOpenDocuments(){\n  java.util.List<IDirector> projects=ProjectManager.getProjects();\n  for (  IDirector project : projects) {\n    if (project instanceof Director) {\n      Director dir=(Director)project;\n      if (!dir.getMainViewer().isLocked() && dir.getDocument().getNumberOfReads() > 0) {\n        listModel.addElement(new MyListItem(dir));\n      }\n    }\n  }\n}\n"}
{"nl": "is canvas large enough to draw chart?", "code": "private boolean isLargeEnough(){\n  int x0=leftMargin;\n  int x1=getWidth() - rightMargin;\n  int y0=getHeight() - bottomMargin;\n  int y1=topMargin;\n  return x0 < x1 && y0 > y1;\n}\n"}
{"nl": "Reads one packet from ChannelBuffer", "code": "public AbstractClientPacket handle(ChannelBuffer buf,ClientChannelHandler channelHandler){\n  byte opCode=buf.readByte();\n  State state=channelHandler.getState();\n  AbstractClientPacket clientPacket=null;\nswitch (state) {\ncase CONNECTED:\nswitch (opCode) {\ncase 0x30:\n      clientPacket=new CM_CHAT_INI(buf,channelHandler,chatService);\n    break;\ncase 0x05:\n  clientPacket=new CM_PLAYER_AUTH(buf,channelHandler,chatService);\nbreak;\ndefault :\n}\nbreak;\ncase AUTHED:\nswitch (opCode) {\ncase 0x10:\nclientPacket=new CM_CHANNEL_REQUEST(buf,channelHandler,chatService);\nbreak;\ncase 0x18:\nclientPacket=new CM_CHANNEL_MESSAGE(buf,channelHandler,broadcastService);\ndefault :\n}\nbreak;\n}\nreturn clientPacket;\n}\n"}
{"nl": "Taken from FastUtil implementation", "code": "private void rehash(final int newCapacity){\n  m_threshold=(int)(newCapacity / 2 * m_fillFactor);\n  m_mask=newCapacity / 2 - 1;\n  m_mask2=newCapacity - 1;\n  final int oldCapacity=m_data.length;\n  final int[] oldData=m_data;\n  m_data=new int[newCapacity];\n  m_size=m_hasFreeKey ? 1 : 0;\n  for (int i=0; i < oldCapacity; i+=2) {\n    final int oldKey=oldData[i];\n    if (oldKey != FREE_KEY)     put(oldKey,oldData[i + 1]);\n  }\n}\n"}
{"nl": "grab the next three tokens after the one in key", "code": "public static String[] grabNext3(String text,String key,String key2){\n  int pos=text.indexOf(key);\n  int length=key.length();\n  if (pos == -1 && key2 != null) {\n    pos=text.indexOf(key2);\n    length=key2.length();\n  }\n  if (pos == -1)   return null;\n else {\n    String[] result=new String[3];\n    StringTokenizer st=new StringTokenizer(text.substring(pos + length).trim());\n    for (int i=0; i < 3; i++) {\n      if (st.hasMoreTokens())       result[i]=st.nextToken();\n else       return null;\n    }\n    return result;\n  }\n}\n"}
{"nl": "Creates a new entry to put in the queue", "code": "public OpenSpacesQueueObject newQueueEntry(String queueName){\n  OpenSpacesQueueObject queueObject=isFifo() ? new OpenSpacesFifoQueueObject() : new OpenSpacesQueueObject();\n  queueObject.setPersistent(isPersistent());\n  queueObject.setEndpointURI(queueName);\n  return queueObject;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetQueryWithFields(VkApiClient client,UserField... fields){\n  super(client,\"friends.get\",GetFieldsResponse.class);\n  fields(fields);\n}\n"}
{"nl": "Tell the client that there are no more query results", "code": "private void sendQueryEnd(){\n  sendJson(Json.object(ACTION,ACTION_QUERY_END));\n}\n"}
{"nl": "Adds two players to each others friend lists, and updates the database<br />", "code": "public static void makeFriends(Player friend1,Player friend2){\n  DAOManager.getDAO(FriendListDAO.class).addFriends(friend1,friend2);\n  friend1.getFriendList().addFriend(new Friend(friend2.getCommonData()));\n  friend2.getFriendList().addFriend(new Friend(friend1.getCommonData()));\n  friend1.getClientConnection().sendPacket(new SM_FRIEND_LIST());\n  friend2.getClientConnection().sendPacket(new SM_FRIEND_LIST());\n  friend1.getClientConnection().sendPacket(new SM_FRIEND_RESPONSE(friend2.getName(),SM_FRIEND_RESPONSE.TARGET_ADDED));\n  friend2.getClientConnection().sendPacket(new SM_FRIEND_RESPONSE(friend1.getName(),SM_FRIEND_RESPONSE.TARGET_ADDED));\n}\n"}
{"nl": "Calculate vCPU requirements for deployment", "code": "public static int calculateViewvCPU(int connectionServerCount,int securityServerCount,int vCenterServerCount){\n  final int cs=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.connectionserver.vcpu.default\")) * connectionServerCount;\n  final int ss=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.securityserver.vcpu.default\")) * securityServerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.vcenter.vcpu.default\")) * securityServerCount;\n  final int co=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"view.composer.vcpu.default\"));\n  return cs + ss + vc+ co;\n}\n"}
{"nl": "List of languages to ignore displaying the cost for", "code": "public boolean languageCostIgnore(String languagename){\n  boolean ignore;\nswitch (languagename) {\ncase \"Unknown\":\ncase \"Text\":\ncase \"JSON\":\ncase \"Markdown\":\ncase \"INI File\":\ncase \"ReStructuredText\":\ncase \"Configuration\":\n    ignore=true;\n  break;\ndefault :\nignore=false;\nbreak;\n}\nreturn ignore;\n}\n"}
{"nl": "Transition to check status over the given animation duration", "code": "public void check(long animationDurationMS){\n  if (state == FLAG_STATE_CHECK) {\n    return;\n  }\n  toggle(animationDurationMS);\n}\n"}
{"nl": "returns a new Matrix object, where each value is set to the absolute value", "code": "public Matrix abs(){\n  Matrix result=new Matrix(m,n);\n  for (int i=0; i < result.A.length; i++) {\n    for (int j=0; j < result.A[i].length; j++)     result.A[i][j]=Math.abs(A[i][j]);\n  }\n  return result;\n}\n"}
{"nl": "read a single byte", "code": "public int read(){\n  return bytes[pos++] & 0xFF;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  getViewer().selectComponent(getViewer().getMatrixTab());\n}\n"}
{"nl": "Generate the name of a MM entity type from the IRI of an OWL class", "code": "default String classEntityTypeName(IRI classIri){\n  return \"t\" + fromIri(classIri);\n}\n"}
{"nl": "Convenient method to post an event to the bus", "code": "public InternalEventTracker postEvent(Event event){\n  return eventBus.postEvent(event);\n}\n"}
{"nl": "Set video id", "code": "protected VideoGetAlbumsByVideoQuery videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n"}
{"nl": "gets the maximal defined taxon id", "code": "public int maxId(){\n  int t=-1;\n  while (true) {\n    int s=bits.nextSetBit(t + 1);\n    if (s == -1)     return t;\n else     t=s;\n  }\n}\n"}
{"nl": "Draw the Arrow", "code": "private void drawPrepare(Canvas canvas){\n  publicPaint.setColor(getProgressColor());\n  if (mArrow_center_effect != null) {\n    publicPaint.setPathEffect(mArrow_center_effect);\n  }\n  canvas.drawPath(path1,publicPaint);\n  if (mArrow_left_effect != null) {\n    publicPaint.setPathEffect(mArrow_left_effect);\n  }\n  canvas.drawPath(path2,publicPaint);\n  if (mArrow_right_effect != null) {\n    publicPaint.setPathEffect(mArrow_right_effect);\n  }\n  canvas.drawPath(path3,publicPaint);\n}\n"}
{"nl": "Creates a particle system with the given parameters", "code": "public ParticleSystem(Activity a,int maxParticles,int drawableResId,long timeToLive,int parentViewId){\n  this(a,maxParticles,ContextCompat.getDrawable(a,drawableResId),timeToLive,parentViewId);\n}\n"}
{"nl": "Client \"access_token\"", "code": "public SecureCheckTokenQuery token(String value){\n  return unsafeParam(\"token\",value);\n}\n"}
{"nl": "Paints the names of the alignment", "code": "public void paintNames(Graphics g0){\n  final Graphics2D g=(Graphics2D)g0;\n  final Rectangle visibleRect=getVisibleRect();\n  final Rectangle2D drawRect=new Rectangle2D.Double();\n  g.setColor(Color.WHITE);\n  g.fillRect(0,0,getWidth(),getHeight());\n  g.setBackground(Color.WHITE);\n  if (sequenceFont.getSize() > 14)   sequenceFont=sequenceFont.deriveFont(14.0f);\n  g.setFont(sequenceFont);\n  boolean showText=(sequenceFont.getSize() > 6);\n  if (showText)   g.setColor(Color.BLACK);\n else   g.setColor(Color.GRAY);\n  if (alignment != null && !alignment.getRowCompressor().isEnabled()) {\n    int minVisibleRow=(int)Math.max(0,(visibleRect.getY() / cellHeight));\n    int maxVisibleRow=(int)Math.min(alignment.getNumberOfSequences() - 1,(visibleRect.getY() + visibleRect.getHeight()) / cellHeight);\n    for (int row=minVisibleRow; row <= maxVisibleRow; row++) {\n      String name=alignment.getName(row);\n      int y=(int)Math.round(getY(row)) - 2;\n      if (showText)       g.drawString(name,Math.round(getX(0)),y - (int)(cellHeight - sequenceFont.getSize()) / 2);\n else {\n        drawRect.setRect(0,getY(row) - cellHeight + 2,getX(name.length()),Math.max(1,cellHeight - 1));\n        g.fill(drawRect);\n      }\n    }\n  }\n}\n"}
{"nl": "Converts the current parser state to a JSON event", "code": "private int stateToEvent(){\n  if (state == IN || state == ZE) {\n    return JsonEvent.VALUE_INT;\n  }\n else   if (state >= FR && state <= E3) {\n    return JsonEvent.VALUE_DOUBLE;\n  }\n else   if (state == T3) {\n    return JsonEvent.VALUE_TRUE;\n  }\n else   if (state == F4) {\n    return JsonEvent.VALUE_FALSE;\n  }\n else   if (state == N3) {\n    return JsonEvent.VALUE_NULL;\n  }\n  return JsonEvent.NEED_MORE_INPUT;\n}\n"}
{"nl": "Return the exception message", "code": "@Override public String toString(){\n  return getMessage();\n}\n"}
{"nl": "Returns true if value-based deadband filtering is enabled for the process", "code": "@JsonIgnore public boolean isProcessValueDeadbandEnabled(){\n  if (valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE || valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_RELATIVE || valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE_VALUE_DESCR_CHANGE || valueDeadbandType == DataTagDeadband.DEADBAND_PROCESS_RELATIVE_VALUE_DESCR_CHANGE) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Set phone", "code": "protected AuthConfirmQuery phone(String value){\n  return unsafeParam(\"phone\",value);\n}\n"}
{"nl": "Import starter data into the database", "code": "private void importInitialData(SQLiteDatabase db){\n  final int length=5;\n  final String[] starterTaskTitles=mContext.getResources().getStringArray(R.array.starter_tasks);\n  final int[] starterTaskIntervals={2,5,5,5,3};\n  NagboxDbOps.Transaction transaction=NagboxDbOps.startTransaction(db);\n  Task reusableTask=new Task();\n  for (int i=0; i < length; i++) {\n    reusableTask.title=starterTaskTitles[i];\n    reusableTask.interval=starterTaskIntervals[i];\n    reusableTask.displayOrder=i + 1;\n    transaction.createTask(reusableTask);\n  }\n  transaction.commit();\n}\n"}
{"nl": "Parse a JSON data structure from content from a reader", "code": "@SuppressWarnings({\"checkstyle:javadocmethod\",\"checkstyle:javadocstyle\"}) public Object parse(Reader reader){\n  Object content;\n  JsonLexer lexer=new JsonLexer(reader);\n  JsonToken token=lexer.nextToken();\n  if (token.getType() == OPEN_CURLY) {\n    content=parseObject(lexer);\n  }\n else   if (token.getType() == OPEN_BRACKET) {\n    content=parseArray(lexer);\n  }\n else {\n    throw new JsonException(\"A JSON payload should start with \" + OPEN_CURLY.getLabel() + \" or \"+ OPEN_BRACKET.getLabel()+ \".\\n\"+ \"Instead, '\"+ token.getText()+ \"' was found \"+ \"on line: \"+ token.getStartLine()+ \", \"+ \"column: \"+ token.getStartColumn());\n  }\n  return content;\n}\n"}
{"nl": "Rotate the image if the device camera is land scape", "code": "private static boolean rotateIfLandScapeCamera(){\n  if (Build.BRAND.toLowerCase().equals(\"samsung\")) {\n    return true;\n  }\n else   if (Build.BRAND.toLowerCase().equals(\"sony\")) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetAvailableForCallQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"friends.getAvailableForCall\",GetAvailableForCallFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "Returns true if has valid LegionMember", "code": "public boolean isLegionMember(){\n  return legionMember != null;\n}\n"}
{"nl": "The output stream for the counter file is closed", "code": "private void closeCounterDataOutputStream() throws DataFallbackException {\n  if (LOG.isDebugEnabled())   LOG.debug(\"Closing the counter file writer for the file \" + counterFile.getName());\n  if (dOutput != null) {\n    try {\n      dOutput.close();\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n finally {\n      dOutput=null;\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetRepostsQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.getReposts\",GetRepostsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesEditCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"notes.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "Find the string response message which is equivalent to a response to a set/add/replace message in the cache", "code": "private ChannelBuffer storeResponse(SpaceCache.StoreResponse storeResponse){\nswitch (storeResponse) {\ncase EXISTS:\n    return EXISTS.duplicate();\ncase NOT_FOUND:\n  return NOT_FOUND.duplicate();\ncase NOT_STORED:\nreturn NOT_STORED.duplicate();\ncase STORED:\nreturn STORED.duplicate();\n}\nthrow new RuntimeException(\"unknown store response from cache: \" + storeResponse);\n}\n"}
{"nl": "Deletes the saved camera image", "code": "public void deleteImage(){\n  if (cameraBitmapPath != null) {\n    File image=new File(cameraBitmapPath);\n    if (image.exists()) {\n      image.delete();\n    }\n  }\n}\n"}
{"nl": "Discard all the ONE_TO_ONE figures which are covered by the ALL_TO_MANY and MANY_TO_ALL figures", "code": "@Override public void drop_duplicates(){\n  for (  HeapInsIntervalManager im : pt_objs.values()) {\n    im.removeUselessSegments();\n  }\n}\n"}
{"nl": "Create a new Webster", "code": "public Webster(int port) throws BindException {\n  this.port=Integer.getInteger(WEBSTER_PORT,0);\n  initialize();\n}\n"}
{"nl": "Make sure source dependencies are picked recursively", "code": "public void testTransitiveDependencies() throws IOException {\n  VirtualFile project1=createGradleProjectToImport(dir,module(1));\n  VirtualFile project2=createGradleProjectToImport(dir,module(2),module(1));\n  VirtualFile project3=createGradleProjectToImport(dir,module(3),module(2));\n  configureTopLevelProject(dir,Arrays.asList(module(1),module(2),module(3)),Collections.<String>emptySet());\n  Map<String,VirtualFile> projects=moduleListToMap(GradleModuleImporter.getRelatedProjects(project3,getProject()));\n  assertEquals(3,projects.size());\n  assertEquals(project1,projects.get(pathToGradleName(module(1))));\n  assertEquals(project2,projects.get(pathToGradleName(module(2))));\n  assertEquals(project3,projects.get(pathToGradleName(module(3))));\n}\n"}
{"nl": "Create a non-daemon thread", "code": "public DestroyThread(){\n  super(\"DestroyThread\");\n  setDaemon(false);\n}\n"}
{"nl": "Hide all views", "code": "public void stopAndGone(){\n  mBasoStatus=BasoStatus.GONE;\n  toggleLayout();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"video.get\",GetExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "Determine if the argument was provided, which determines if a test should or should not be run", "code": "public boolean run(String allowed){\n  return run(allowed,\"t\");\n}\n"}
{"nl": "construct an RMA3 modifier and read in RMA3 data", "code": "public RMA3FileModifier(String fileName) throws IOException {\n  super(fileName,READ_WRITE);\n  close();\n}\n"}
{"nl": "Compares this transform with another one", "code": "public boolean equalsTransform(ViewTransform transform){\n  if (dx == transform.dx && dy == transform.dy && scale == transform.scale) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "warning log", "code": "public static void w(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.w(tag,buildMsg(msg));\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  viewer.setCanceled(false);\n  viewer.setVisible(false);\n}\n"}
{"nl": "mlsdaf1:  sub functions for MLSA filter", "code": "private static double mlsadf1(double x,double b[],int m,double a,double d[]){\n  double out=0.0;\n  for (int i=PADEORDER; i > 0; i--) {\n    d[i]=(1 - a * a) * d[PADEORDER + i] + a * d[i];\n    d[PADEORDER + 1 + i]=d[i] * b[1];\n    double v=d[PADEORDER + 1 + i] * pade[ppade + i];\n    x+=((1 & i) == 1) ? v : -v;\n    out+=v;\n  }\n  d[PADEORDER + 1]=x;\n  out+=x;\n  return out;\n}\n"}
{"nl": "write char, little endian", "code": "public void writeChar(char a) throws IOException {\n  outs.write((byte)(a));\n  outs.write((byte)(a >> 8));\n}\n"}
{"nl": "VoiceQuality object containing various vq mesures", "code": "public VoiceQuality(int numVqParams,int Fs,float skipSize,float winSize){\n  params=new VoiceQualityFileHeader();\n  params.dimension=numVqParams;\n  params.samplingRate=16000;\n  params.skipsize=skipSize;\n  params.winsize=winSize;\n}\n"}
{"nl": "For Externalizable purposes", "code": "public SpaceHealthStatus(){\n}\n"}
{"nl": "return true if we can save iterator creation and get a single entry", "code": "public boolean optimizeScanForSingleObject(){\n  return true;\n}\n"}
{"nl": "collapse an array of paths", "code": "public void collapse(TreePath[] paths){\n  for (  TreePath path : paths) {\n    collapse((NodeBase)path.getLastPathComponent());\n  }\n}\n"}
{"nl": "Time when a user disappears from location search results, in seconds", "code": "public UsersGetNearbyQuery timeout(Integer value){\n  return unsafeParam(\"timeout\",value);\n}\n"}
{"nl": "Remove all the references in the original class", "code": "protected void unbind(){\n  if (mResolver != null && isNullable) {\n    for (    final Field field : mResolver.getClass().getDeclaredFields()) {\n      try {\n        if (!field.getType().isPrimitive()) {\n          field.setAccessible(true);\n          field.set(mResolver,null);\n        }\n      }\n catch (      IllegalAccessException e) {\n        e.printStackTrace();\n      }\n    }\n    mResolver=null;\n    mAnimationResolver=null;\n  }\n}\n"}
{"nl": "Used internally only", "code": "public GSMessageImpl(){\n  super();\n  setFifo(true);\n  setNOWriteLeaseMode(true);\n  makeTransient();\n}\n"}
{"nl": "for governor: manual delete service", "code": "public void delServerService(String serviceName,String group) throws RegistryException {\n  if (registry != null) {\n    registry.delServerService(serviceName,group);\n  }\n  monitor.logEvent(\"PigeonGovernor.delService\",serviceName,\"swimlane=\" + group);\n}\n"}
{"nl": "Initialize catalog", "code": "private void initializeCatalogs(boolean privateCatalog){\n  catalog=catalogManager.getCatalog();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesRestoreQuery(VkApiClient client,Actor actor,int messageId){\n  super(client,\"messages.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  messageId(messageId);\n}\n"}
{"nl": "Cancels currently playing audio", "code": "public synchronized void cancel(){\n}\n"}
{"nl": "seek to the given position", "code": "public void seek(long pos) throws IOException {\n  throw new IOException(\"seek(\" + pos + \"): not supported\");\n}\n"}
{"nl": "Waits for presence of notification message in author mode", "code": "public AemBubbleMessage waitForAemBubbleMessage(){\n  bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.presenceOfElementLocated(BUBBLE_MSG_BY_SELECTOR));\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotificationsMarkAsViewedQuery(VkApiClient client,UserActor actor){\n  super(client,\"notifications.markAsViewed\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,PhotoFull.class));\n  accessToken(actor.getAccessToken());\n  photos(photos);\n  extended(true);\n}\n"}
{"nl": "write a byte", "code": "public void write(int b) throws IOException {\n  outs.write(b);\n}\n"}
{"nl": "Launches particles in one Shot using a special Interpolator", "code": "public void oneShot(View emiter,int numParticles,Interpolator interpolator){\n  configureEmiter(emiter,Gravity.CENTER);\n  mActivatedParticles=0;\n  mEmittingTime=mTimeToLive;\n  for (int i=0; i < numParticles && i < mMaxParticles; i++) {\n    activateParticle(0);\n  }\n  startAnimator(interpolator,mTimeToLive);\n}\n"}
{"nl": "Apply the SoP to a Target to get its predicted value", "code": "@Override protected float evaluate(Target target){\n  float result=0;\n  if (targetAttributeName.contentEquals(\"f0\")) {\n    result=(float)sopModels.get(\"f0\").interpret(target);\n  }\n else {\n    if (target.getAllophone().isVowel())     result=(float)sopModels.get(\"vowel\").interpret(target);\n else     if (target.getAllophone().isConsonant())     result=(float)sopModels.get(\"consonant\").interpret(target);\n else     if (target.getAllophone().isPause())     result=(float)sopModels.get(\"pause\").interpret(target);\n else {\n      Log.w(Mary.LOG,\"Warning: No SoP model for target \" + target.toString());\n    }\n  }\n  return result;\n}\n"}
{"nl": "Remove player from group (ban)", "code": "public static final void banPlayer(Player bannedPlayer,Player banGiver){\n  Preconditions.checkNotNull(bannedPlayer,\"Banned player should not be null\");\n  Preconditions.checkNotNull(banGiver,\"Bangiver player should not be null\");\n  PlayerGroup group=banGiver.getPlayerGroup2();\n  if (group != null) {\n    if (group.hasMember(bannedPlayer.getObjectId())) {\n      group.onEvent(new PlayerGroupLeavedEvent(group,bannedPlayer,LeaveReson.BAN,banGiver.getName()));\n    }\n else {\n      log.warn(\"TEAM2: banning player not in group {}\",group.onlineMembers());\n    }\n  }\n}\n"}
{"nl": "Apply the size behaviour", "code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n"}
{"nl": "notify that creature moved", "code": "public void notifyMoveObservers(){\n  notifyObservers(ObserverType.MOVE);\n}\n"}
{"nl": "Set upload by admins only", "code": "public PhotosCreateAlbumQuery uploadByAdminsOnly(Boolean value){\n  return unsafeParam(\"upload_by_admins_only\",value);\n}\n"}
{"nl": "Adds the given date for the given word", "code": "@Override public void addDate(String word,Date date){\n  addDateInternal(new Index(word.length()),word,date);\n}\n"}
{"nl": "Generates a Cypher MATCH pattern for the vertex, example: <p> (alias:Label1:Label2) </p>", "code": "public String matchPattern(String alias){\n  if (alias != null)   return \"(\" + alias + processLabels(matchLabels,false)+ \")\";\n  return \"(\" + processLabels(matchLabels,false) + \")\";\n}\n"}
{"nl": "Website that will be displayed in the community information field", "code": "public GroupsEditQuery website(String value){\n  return unsafeParam(\"website\",value);\n}\n"}
{"nl": "compute the maximum value on a log scale", "code": "protected double computeMaxYAxisValueLogScale(double maxValue){\n  double v=0;\n  int mantisse=0;\n  int exponent=0;\n  while (v < maxValue) {\n    if (mantisse < 9)     mantisse++;\n else {\n      mantisse=1;\n      exponent++;\n    }\n    v=mantisse * Math.pow(10,exponent);\n  }\n  return Math.log10(v);\n}\n"}
{"nl": "Stores a legion member", "code": "private void storeLegionMember(LegionMember legionMember){\n  storeLegionMember(legionMember,false);\n}\n"}
{"nl": "Calculate the effort applied using generic COCOMO2 weighted values", "code": "public double estimateEffort(double sloc){\n  double eaf=1;\n  double effortApplied=3.2 * Math.pow(sloc / 1000,1.05) * eaf;\n  return effortApplied;\n}\n"}
{"nl": "for debugging, provide the names of the left and right targets as the string representation of this class", "code": "@Override public String toString(){\n  String string=\"\";\n  if (leftTarget != null) {\n    string+=\" \" + leftTarget.getName();\n  }\n  if (rightTarget != null) {\n    string+=\" \" + rightTarget.getName();\n  }\n  return string;\n}\n"}
{"nl": "Clear the neighbor list", "code": "public void clearNeighbors(){\n  nodeNeighbors.clear();\n}\n"}
{"nl": "Player Turn - Human", "code": "static boolean turnHuman(){\n  int x, y;\n  do {\n    System.out.print(\"Your turn X Y (1..\" + field_size + \")\\n>\");\n    x=sc.nextInt();\n    y=sc.nextInt();\n    if (x < 0 || y < 0) {\n      return false;\n    }\n  }\n while (!isCellBusy(x - 1,y - 1,dotEmpty));\n  field[x - 1][y - 1]=dotHuman;\n  return true;\n}\n"}
{"nl": "Attach transaction to the session if needed", "code": "private void attachTransaction(QuerySession session,Query query) throws TransactionException, RemoteException, LeaseDeniedException {\n  if ((!session.isAutoCommit() && session.getTransaction() == null) || query.isForceUnderTransaction())   session.setTransaction(createTransaction());\n  session.setQueryHandler(this);\n}\n"}
{"nl": "Set the error message color", "code": "public Builder errorMessageTextColor(int errorMessageTextColor){\n  this.errorMessageTextColor=errorMessageTextColor;\n  return this;\n}\n"}
{"nl": "return string representation", "code": "public String toString(){\n  StringBuilder buffer=new StringBuilder();\n  buffer.append(getQueryName()).append(\"\\t\");\n  buffer.append(getFlag()).append(\"\\t\");\n  buffer.append(getRefName()).append(\"\\t\");\n  buffer.append(getPos()).append(\"\\t\");\n  buffer.append(getMapQuality()).append(\"\\t\");\n  buffer.append(getCigarString()).append(\"\\t\");\n  buffer.append(getRNext()).append(\"\\t\");\n  buffer.append(getPNext()).append(\"\\t\");\n  buffer.append(getTLength()).append(\"\\t\");\n  buffer.append(getSequence()).append(\"\\t\");\n  buffer.append(getQuality());\n  for (  String a : getOptionalFields().keySet()) {\n    Object value=getOptionalFields().get(a);\n    buffer.append(\"\\t\").append(a).append(\":\").append(getType(value)).append(\":\").append(value);\n  }\n  return buffer.toString();\n}\n"}
{"nl": "The round (Feistel) function of Blowfish cipher", "code": "private int F(int x){\n  int a, b, c, d;\n  d=x & 0xFF;\n  x>>=8;\n  c=x & 0xFF;\n  x>>=8;\n  b=x & 0xFF;\n  x>>=8;\n  a=x & 0xFF;\n  int y=sBoxes[0][a] + sBoxes[1][b];\n  y^=sBoxes[2][c];\n  y+=sBoxes[3][d];\n  return y;\n}\n"}
{"nl": "Hide overlapping view by ID", "code": "public void hideOverlappingView(int targetViewId){\n  View targetView=mOverlappingViewsMap.get(targetViewId);\n  if (targetView != null) {\n    targetView.clearAnimation();\n    targetView.setVisibility(GONE);\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int write(int b){\n  int newLength=this.bytesLength + 1;\n  ensureCapacity(newLength);\n  this.bytesLength=newLength;\n  this.bytes[(this.bytes.length - this.bytesLength)]=((byte)b);\n  return this.bytesLength;\n}\n"}
{"nl": "upload file to storage server (by file name)", "code": "public String upload_file1(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String parts[]=this.upload_file(group_name,local_filename,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Set offset", "code": "public PhotosGetQueryWithExtended offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n"}
{"nl": "creates rule parent :- child", "code": "public static Rule createSubPropertyRule(String ruleId,RelationType parent,RelationType child,Map<String,String> roleMappings,MindmapsGraph graph){\n  final int parentArity=parent.hasRoles().size();\n  final int childArity=child.hasRoles().size();\n  if (parentArity != childArity || parentArity != roleMappings.size())   throw new IllegalArgumentException(ErrorMessage.RULE_CREATION_ARITY_ERROR.getMessage());\n  Var parentVar=Graql.var().isa(parent.getId());\n  Var childVar=Graql.var().isa(child.getId());\n  Set<String> vars=new HashSet<>();\n  roleMappings.forEach(null);\n  String body=childVar.toString() + \";\";\n  String head=parentVar.toString() + \";\";\n  return graph.putRule(ruleId,body,head,graph.getMetaRuleInference());\n}\n"}
{"nl": "Gets if global or non world specific group memberships should be applied", "code": "public boolean isApplyGlobalWorldGroups(){\n  return this.applyGlobalWorldGroups;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountSetSilenceModeQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.setSilenceMode\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(UniFrac.TOPOLOGICAL_UNIFRAC);\n}\n"}
{"nl": "Checks if the \"share proxy settings\" option is set", "code": "private boolean isProxyShared(Properties settings){\n  return Boolean.TRUE.toString().equals(settings.getProperty(\"network.proxy.share_proxy_settings\",\"false\").toLowerCase());\n}\n"}
{"nl": "Create a new EventBuilder", "code": "public static EventBuilder on(String event){\n  return new EventBuilder(event,instance);\n}\n"}
{"nl": "Set to zero lines the next check of the disc free space", "code": "private void resetNextDiscSpaceCheck(){\n  nextCheckFallbackData=0;\n}\n"}
{"nl": "Set up the UI", "code": "public void configureUI(){\n  if (myDesignSurface == null) {\n    return;\n  }\n  computeScale(myDesignSurface.getCurrentScreenView(),myDesignSurface.getSize(),myDesignSurface.getContentSize(null));\n  computeOffsets(myDesignSurface.getCurrentScreenView());\n}\n"}
{"nl": "turn an array of resource-colors (contains resource-id integers) into an array list of actual color integers", "code": "public static List<Integer> createColors(Resources r,int[] colors){\n  List<Integer> result=new ArrayList<>();\n  for (  int i : colors) {\n    result.add(r.getColor(i));\n  }\n  return result;\n}\n"}
{"nl": "Adds a custom panel that spans the entire width, just set the preferred height on the panel", "code": "public void addPanel(@NotNull JComponent panel){\n  addLineComponent(panel,myRow++);\n}\n"}
{"nl": "Notifies the EventHandler when this processor is starting up", "code": "private void notifyStart(){\n  if (eventHandler instanceof LifecycleAware) {\n    try {\n      ((LifecycleAware)eventHandler).onStart();\n    }\n catch (    final Throwable ex) {\n      exceptionHandler.handleOnStartException(ex);\n    }\n  }\n}\n"}
{"nl": "Pretty-prints the given table fixture", "code": "@NotNull public static String tableToString(@NotNull JTableFixture table,int startRow,int endRow,int startColumn,int endColumn,int cellWidth){\n  String[][] contents=table.contents();\n  StringBuilder sb=new StringBuilder();\n  String formatString=\"%-\" + Integer.toString(cellWidth) + \"s\";\n  for (int row=Math.max(0,startRow); row < Math.min(endRow,contents.length); row++) {\n    for (int column=Math.max(0,startColumn); column < Math.min(contents[0].length,endColumn); column++) {\n      String cell=contents[row][column];\n      if (cell.length() > cellWidth) {\n        cell=cell.substring(0,cellWidth - 3) + \"...\";\n      }\n      sb.append(String.format(formatString,cell));\n    }\n    sb.append('\\n');\n  }\n  return sb.toString();\n}\n"}
{"nl": "Generate 256 results", "code": "private void isaac(){\n  isaacI=0;\n  isaacJ=H_SIZE;\n  isaacB+=++isaacC;\n  while (isaacI < H_SIZE) {\n    isaac2();\n  }\n  isaacJ=0;\n  while (isaacJ < H_SIZE) {\n    isaac2();\n  }\n}\n"}
{"nl": "Load the data, and return the DBObject", "code": "public static Document load(String collection,Bson query){\n  try {\n    MongoCollection<Document> c=MongoHelper.getCollection(collection);\n    if (c != null) {\n      return c.find(query).first();\n    }\n  }\n catch (  Exception e) {\n    if (log.isErrorEnabled())     log.error(query,e);\n  }\n  return null;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  PCoATab tab=getViewer().getPcoaTab();\n  PCoA PCoA=tab.getPCoA();\n  int numberOfPCs=PCoA.getNumberOfPositiveEigenValues();\n  String value=(tab.getFirstPC() + 1) + \" x \" + (tab.getSecondPC() + 1);\n  value=JOptionPane.showInputDialog(getViewer().getFrame(),\"Enter PCs (range 1-\" + numberOfPCs + \"):\",value);\n  if (value != null) {\n    try {\n      String[] tokens=value.split(\"x\");\n      int pc1=Integer.parseInt(tokens[0].trim());\n      int pc2=Integer.parseInt(tokens[1].trim());\n      execute(\"set pc1=\" + pc1 + \" pc2=\"+ pc2+ \";\");\n    }\n catch (    Exception ex) {\n      NotificationsInSwing.showError(getViewer().getFrame(),\"Expected 'pc1 x pc2', got: \" + value);\n    }\n  }\n}\n"}
{"nl": "Is this target the right half of a phone?", "code": "public boolean isRightHalf(){\n  return !isLeftHalf;\n}\n"}
{"nl": "cancel a singleAsyncTask", "code": "public boolean cancelTask(SingleAsyncTask singleAsyncTask,boolean mayInterruptIfRunning){\n  return singleAsyncTask.cancel(mayInterruptIfRunning);\n}\n"}
{"nl": "creates a label which the user can copy to clipboard (in fact it is a Text)", "code": "private Text createCopiableLabel(Composite parent,String text,int span,int horizontalIndent){\n  Text textControl=new Text(parent,SWT.READ_ONLY);\n  textControl.setText(text);\n  GridData data=new GridData();\n  data.horizontalAlignment=GridData.FILL;\n  data.horizontalSpan=span;\n  data.horizontalAlignment=GridData.FILL;\n  data.horizontalIndent=horizontalIndent;\n  textControl.setLayoutData(data);\n  return textControl;\n}\n"}
{"nl": "modify an array according to the given order", "code": "private static BlastMode[] modify(Integer[] order,BlastMode[] array){\n  BlastMode[] tmp=new BlastMode[order.length];\n  int pos=0;\n  for (  Integer id : order) {\n    if (id < array.length)     tmp[pos++]=array[id];\n  }\n  return tmp;\n}\n"}
{"nl": "Deserializes a QuerySchema JsonObject", "code": "private static QuerySchema deserializeSchema(JsonObject querySchemaJson) throws JsonParseException {\n  long schemaVersion=querySchemaJson.get(\"querySchemaVersion\").getAsLong();\n  if (schemaVersion != QuerySchema.querySchemaSerialVersionUID) {\n    throw new JsonParseException(\"Attempt to deserialize unsupported query info version. Supported: \" + QueryInfo.queryInfoSerialVersionUID + \"; Received: \"+ schemaVersion);\n  }\n  String dataFilterName=querySchemaJson.get(\"filterTypeName\").getAsString();\n  Set<String> filteredElementNames;\n  try {\n    filteredElementNames=gson.fromJson(querySchemaJson.get(\"filteredElementNames\"),new TypeToken<Set<String>>(){\n    }\n.getType());\n  }\n catch (  Exception e) {\n    logger.warn(\"No filtered element names for Query Schema deserialization.\");\n    filteredElementNames=null;\n  }\n  DataFilter dataFilter;\n  try {\n    dataFilter=FilterFactory.getFilter(dataFilterName,filteredElementNames);\n  }\n catch (  IOException|PIRException e) {\n    logger.error(\"Error trying to create data filter from JSON.\",e);\n    throw new JsonParseException(e);\n  }\n  QuerySchema querySchema=new QuerySchema(querySchemaJson.get(\"schemaName\").getAsString(),querySchemaJson.get(\"dataSchemaName\").getAsString(),querySchemaJson.get(\"selectorName\").getAsString(),dataFilterName,dataFilter,querySchemaJson.get(\"dataElementSize\").getAsInt());\n  List<String> elementNames=gson.fromJson(querySchemaJson.get(\"elementNames\"),new TypeToken<List<String>>(){\n  }\n.getType());\n  querySchema.getElementNames().addAll(elementNames);\n  HashMap<String,String> additionalFields=gson.fromJson(querySchemaJson.get(\"additionalFields\"),new TypeToken<HashMap<String,String>>(){\n  }\n.getType());\n  querySchema.getAdditionalFields().putAll(additionalFields);\n  return querySchema;\n}\n"}
{"nl": "Delete a concept by ID, rethrowing errors as RuntimeExceptions", "code": "private void deleteConcept(String id){\n  try {\n    getGraph().getConcept(id).delete();\n  }\n catch (  ConceptException e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "Show the login screen", "code": "public static void showLogin(android.support.v4.app.Fragment fragment,int requestCode){\n  Intent intent=new Intent(fragment.getContext(),LoginActivity.class);\n  fragment.startActivityForResult(intent,requestCode);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetPopularQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getPopular\",Utils.buildParametrizedType(List.class,AudioFull.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Remove the spotlight view", "code": "private void removeSpotlightView(){\n  if (listener != null)   listener.onUserClicked(usageId);\n  if (getParent() != null)   ((ViewGroup)getParent()).removeView(this);\n}\n"}
{"nl": "Parse the <Parameters> element", "code": "static Properties parseParameters(Element element){\n  Properties props=new Properties();\n  String name=null;\n  String value=null;\n  NodeList nList=element.getElementsByTagName(\"Parameter\");\n  if (nList.getLength() == 0)   nList=element.getElementsByTagName(\"parameter\");\n  for (int i=0; i < nList.getLength(); i++) {\n    Element parameterElement=(Element)nList.item(i);\n    NamedNodeMap nm=parameterElement.getAttributes();\n    Node node=nm.getNamedItem(\"Name\");\n    if (node == null)     node=nm.getNamedItem(\"name\");\n    name=node.getNodeValue();\n    String elementValue=getTextValue(parameterElement);\n    node=nm.getNamedItem(\"Value\");\n    if (node == null)     node=nm.getNamedItem(\"value\");\n    if (elementValue.length() > 0 && node != null)     throw new IllegalArgumentException(\"Declare either a Value \" + \"attribute or a <Parameter> \" + \"value, not both\");\n    if (node == null) {\n      if (elementValue.length() > 0) {\n        value=elementValue;\n      }\n else {\n        throw new IllegalArgumentException(\"You must declare a Value \" + \"attribute or a \" + \"<Parameter> value\");\n      }\n    }\n else {\n      value=node.getNodeValue();\n    }\n    props.put(name,value);\n  }\n  if (logger.isLoggable(Level.FINEST)) {\n    String tagName=element.getTagName();\n    if (element.getParentNode() != null && element.getParentNode() instanceof Element)     tagName=((Element)element.getParentNode()).getTagName() + \".\" + tagName;\n    logger.finest(\"Element [\" + tagName + \"], \"+ \"Parameters: \"+ props.toString());\n  }\n  return (props);\n}\n"}
{"nl": "/*     ", "code": "@deprecated public boolean isAlias(int index){\n  return ICUResourceBundleReader.RES_GET_TYPE(getTableResource(index)) == 3;\n}\n"}
{"nl": "internal method taking a StringBuffer in parameter and inserts the text content at the start of the buffer", "code": "protected void insertTextContent(StringBuffer buf) throws DOMException {\n  String content=getNodeValue();\n  if (content != null) {\n    buf.insert(0,content);\n  }\n}\n"}
{"nl": "Checks the completion of parent styles when the attribute is empty", "code": "public void testParentStylesEmptyCompletion() throws Throwable {\n  doTestCompletionVariants(\"styles_parent_empty.xml\",\"android:\",\"Parent\",\"AppTheme\",\"style1\");\n}\n"}
{"nl": "Constructs the exception to throw representing this failure", "code": "public RequestFailedException bad(String param,String reason,Throwable cause){\n  StringBuilder sb=new StringBuilder();\n  buildPath(sb);\n  if (param != null) {\n    Param p=type.params.get(param);\n    if (p == null && param.indexOf('[') == -1) {\n      assert false : \"name \\\"\" + param + \"\\\" is not a known parameter\";\n    }\n    if (sb.length() > 0) {\n      sb.append(\" > \");\n    }\n    sb.append(param);\n  }\n  RequestFailedException e=new RequestFailedException(this,param,sb.toString(),reason);\n  if (cause != null) {\n    e.initCause(cause);\n  }\n  return e;\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  dir.removeViewer(this);\n  setVisible(false);\n}\n"}
{"nl": "Get the position on line(x0,y0-x1,y1) based on ratio", "code": "public static float[] pointOnLine(float x0,float y0,float x1,float y1,float ratio){\n  float[] result=new float[2];\n  pointOnLine(x0,y0,x1,y1,ratio,result);\n  return result;\n}\n"}
{"nl": "Create a service state object", "code": "public JSpaceState(){\n  state=STOPPED;\n}\n"}
{"nl": "Move all the messages in a collection to the queue", "code": "private void addToQueue(Collection<SerialMessage> msgs){\n  if (msgs == null) {\n    return;\n  }\n  for (  SerialMessage serialMessage : msgs) {\n    addToQueue(serialMessage);\n  }\n}\n"}
{"nl": "Find a Class using the specified ClassLoader", "code": "static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    final int lastDot=className.lastIndexOf(\".\");\n    String packageName=className;\n    if (lastDot != -1)     packageName=className.substring(0,lastDot);\n    security.checkPackageAccess(packageName);\n  }\n  Class providerClass;\n  if (cl == null) {\n    providerClass=Class.forName(className);\n  }\n else {\n    try {\n      providerClass=cl.loadClass(className);\n    }\n catch (    ClassNotFoundException x) {\n      if (doFallback) {\n        ClassLoader current=ObjectFactory.class.getClassLoader();\n        if (current == null) {\n          providerClass=Class.forName(className);\n        }\n else         if (cl != current) {\n          cl=current;\n          providerClass=cl.loadClass(className);\n        }\n else {\n          throw x;\n        }\n      }\n else {\n        throw x;\n      }\n    }\n  }\n  return providerClass;\n}\n"}
{"nl": "Add instance to map", "code": "public void addInstance(int instanceId,WorldMapInstance instance){\n  if (instanceId == 0) {\n    instanceId=1;\n  }\n  instances.put(instanceId,instance);\n}\n"}
{"nl": "Creates url based on map of params", "code": "private HttpUrl urlBodyFromMap(String base,Map<String,String> map){\n  HttpUrl.Builder builder=HttpUrl.parse(base).newBuilder(base);\n  for (  Entry<String,String> entry : map.entrySet()) {\n    if (entry.getValue() != null) {\n      builder.addEncodedQueryParameter(entry.getKey(),entry.getValue());\n    }\n  }\n  return builder.build();\n}\n"}
{"nl": "Creates a new resize handler for the given resizable component child of the given layout", "code": "@Nullable public ResizeHandler createResizeHandler(@NotNull ViewEditor editor,@NotNull NlComponent component,@Nullable SegmentType horizontalEdgeType,@Nullable SegmentType verticalEdgeType){\n  return null;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();\n  return !importBlastDialog.getFormatCBox().getSelectedItem().toString().equalsIgnoreCase(\"daa\");\n}\n"}
{"nl": "read packed value", "code": "public int readPacked(int kind){\nswitch (kind) {\ncase 0:\n    return read();\ncase 1:\n  return readCharLittleEndian();\ncase 2:\nreturn readIntLittleEndian();\ndefault :\nthrow new RuntimeException(\"unknown kind\");\n}\n}\n"}
{"nl": "Start zookeeper cluster", "code": "protected void startZKCluster() throws Exception {\n  zkUtil.startServer();\n  zkc=zkUtil.getZooKeeperClient();\n}\n"}
{"nl": "Imports services and operations from the WSDL definition", "code": "protected void importServicesAndOperations(Definition definition){\n  for (  Object serviceObject : definition.getServices().values()) {\n    Service service=(Service)serviceObject;\n    WSService wsService=this.importService(service);\n    this.wsServices.put(this.namespace + wsService.getName(),wsService);\n    Port port=(Port)service.getPorts().values().iterator().next();\n    for (    Object bindOperationObject : port.getBinding().getBindingOperations()) {\n      BindingOperation bindOperation=(BindingOperation)bindOperationObject;\n      WSOperation operation=this.processOperation(bindOperation.getOperation(),wsService);\n      wsService.addOperation(operation);\n      this.wsOperations.put(this.namespace + operation.getName(),operation);\n    }\n  }\n}\n"}
{"nl": "This method update the deadline and NextKeepAlive time", "code": "public void processKeepAliveRespond(LeaseKeepAliveResponse leaseKeepAliveResponse){\n  long id=leaseKeepAliveResponse.getID();\n  Lease lease=this.keepAlives.get(id);\n  if (lease != null) {\nsynchronized (lease) {\n      if (leaseKeepAliveResponse.getTTL() <= 0) {\n        if (lease != null && lease.isContainHandler()) {\n          lease.getEtcdLeaseHandler().onLeaseExpired(id);\n        }\n        removeLease(id);\n      }\n else {\n        long nextKeepAlive=System.currentTimeMillis() + 1000 + leaseKeepAliveResponse.getTTL() * 1000 / 3;\n        lease.setNextKeepAlive(nextKeepAlive);\n        lease.setDeadLine(System.currentTimeMillis() + leaseKeepAliveResponse.getTTL() * 1000);\n      }\n    }\n  }\n}\n"}
{"nl": "Run the neighbor net algorithm", "code": "public void runNeighborNet(ProgressListener progressListener,int ntax,double[][] D,int ordering[]) throws CanceledException {\n  NetNode netNodes=new NetNode();\n  for (int i=ntax; i >= 1; i--) {\n    NetNode taxNode=new NetNode();\n    taxNode.id=i;\n    taxNode.next=netNodes.next;\n    netNodes.next=taxNode;\n  }\n  for (NetNode taxNode=netNodes; taxNode.next != null; taxNode=taxNode.next)   taxNode.next.prev=taxNode;\n  Stack amalgs=new Stack();\n  int num_nodes=ntax;\n  num_nodes=agglomNodes(progressListener,amalgs,D,netNodes,num_nodes);\n  expandNodes(progressListener,num_nodes,ntax,amalgs,netNodes,ordering);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesEditChatQuery(VkApiClient client,UserActor actor,int chatId,String title){\n  super(client,\"messages.editChat\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n  title(title);\n}\n"}
{"nl": "Handle NPC attacked event (when damage was received or not)", "code": "public static void onHelp(NpcAI2 npcAI,Creature creature){\n  Npc npc=npcAI.getOwner();\n  if (npc.getAttackedCount() == 0) {\n    if (DataManager.NPC_SHOUT_DATA.hasAnyShout(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.ATTACKED)) {\n      List<NpcShout> shouts=DataManager.NPC_SHOUT_DATA.getNpcShouts(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.ATTACKED,null,0);\n      NpcShoutsService.getInstance().shout(npc,creature,shouts,0,false);\n      shouts.clear();\n      return;\n    }\n    if (DataManager.NPC_SHOUT_DATA.hasAnyShout(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.HELPCALL)) {\n      List<NpcShout> shouts=DataManager.NPC_SHOUT_DATA.getNpcShouts(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.HELPCALL,null,0);\n      NpcShoutsService.getInstance().shout(npc,creature,shouts,0,false);\n      shouts.clear();\n    }\n  }\n}\n"}
{"nl": "Constructs a RELP Sample from its component parts", "code": "public Sample(short[] frameData,byte[] residualData){\n  this.frameData=frameData;\n  this.residualData=residualData;\n}\n"}
{"nl": "sends packed in the game room people", "code": "public void sendRoomListPacket(int protocol,List<GameRoom> gameRooms){\n  String packet=new String();\n  int partitionPacketNumber=0;\n  for (int i=0; i < gameRooms.size(); i++)   if (gameRooms.get(i).isGameRunning() == false)   partitionPacketNumber++;\n  packet=packet.concat(Settings.sSenderSplitProtocolToken);\n  packet=packet.concat(protocol + Settings.sSenderSplitProtocolToken);\n  packet=packet.concat(partitionPacketNumber + Settings.sSenderSplitProtocolToken);\n  for (int i=0; i < gameRooms.size(); i++) {\n    if (gameRooms.get(i).isGameRunning() == false)     packet=packet.concat(gameRooms.get(i).getsRoomName() + Settings.sSenderSplitProtocolToken);\n  }\n  packet=packet.concat(Settings.sSenderSplitMultipleToken);\n  send(packet);\n}\n"}
{"nl": "Whether or not the login occurred successfully", "code": "public boolean loggedIn(){\n  return this.loggedIn;\n}\n"}
{"nl": "Computes the call-to-return flow function for the given call-site abstraction", "code": "protected Set<D> computeCallToReturnFlowFunction(FlowFunction<D> callToReturnFlowFunction,D d1,D d2){\n  return callToReturnFlowFunction.computeTargets(d2);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set show-unaligned=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().getAlignmentPanel().setShowUnalignedChars(value);\n}\n"}
{"nl": "Write an object to HDFS (or local) using default Java object serialization", "code": "public static void writeObjectToFile(String path,Object toWrite,SparkContext sc) throws IOException {\n  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());\n  try (BufferedOutputStream bos=new BufferedOutputStream(fileSystem.create(new Path(path)))){\n    ObjectOutputStream oos=new ObjectOutputStream(bos);\n    oos.writeObject(toWrite);\n  }\n }\n"}
{"nl": "Remove view from previous Activity and add into current Activity", "code": "private boolean addViewFromPreviousActivity(){\n  if (mCurrentContentView.getChildCount() == 0) {\n    mPreviousActivity=null;\n    mPreviousContentView=null;\n    return false;\n  }\n  SwipeBackApplication application=(SwipeBackApplication)mCurrentWindow.getContext().getApplicationContext();\n  mPreviousActivity=application.getActivityLifecycleHelper().getPreActivity();\n  if (mPreviousActivity == null) {\n    mPreviousActivity=null;\n    mPreviousContentView=null;\n    return false;\n  }\n  ViewGroup previousActivityContainer=getContentView(mPreviousActivity.getWindow());\n  if (previousActivityContainer == null || previousActivityContainer.getChildCount() == 0) {\n    mPreviousActivity=null;\n    mPreviousContentView=null;\n    return false;\n  }\n  mPreviousContentView=(ViewGroup)previousActivityContainer.getChildAt(0);\n  previousActivityContainer.removeView(mPreviousContentView);\n  mCurrentContentView.addView(mPreviousContentView,0);\n  return true;\n}\n"}
{"nl": "Create a new Allophone object from the given XML Element", "code": "public Allophone(Element a,String[] featureNames){\n  name=a.getAttribute(\"ph\");\n  String vc;\n  String isTone;\n  if (name.equals(\"\"))   throw new IllegalArgumentException(\"Element must have a 'ph' attribute\");\n  if (a.getTagName().equals(\"consonant\")) {\n    vc=\"-\";\n    isTone=\"-\";\n  }\n else   if (a.getTagName().equals(\"vowel\")) {\n    vc=\"+\";\n    isTone=\"-\";\n  }\n else   if (a.getTagName().equals(\"silence\")) {\n    vc=\"0\";\n    isTone=\"-\";\n  }\n else   if (a.getTagName().equals(\"tone\")) {\n    vc=\"0\";\n    isTone=\"+\";\n  }\n else {\n    throw new IllegalArgumentException(\"Element must be one of <vowel>, <consonant> and <silence>, but is <\" + a.getTagName() + \">\");\n  }\n  Map<String,String> feats=new HashMap<String,String>();\n  feats.put(\"vc\",vc);\n  feats.put(\"isTone\",isTone);\n  for (  String f : featureNames) {\n    feats.put(f,getAttribute(a,f));\n  }\n  this.features=Collections.unmodifiableMap(feats);\n}\n"}
{"nl": "create a new node", "code": "public static IRemoteService createService(String remoteURL,String user,String password) throws IOException {\n  final IRemoteService clientNode;\n  if (remoteURL.startsWith(LOCAL)) {\n    clientNode=new LocalService(remoteURL.replaceAll(LOCAL,\"\"));\n  }\n else   clientNode=new RemoteService(remoteURL,user,password);\n  if (url2node.containsKey(clientNode.getShortName()))   System.err.println(\"Warning: node already exists: \" + clientNode.getShortName());\n  url2node.put(clientNode.getShortName(),clientNode);\n  if (ProgramProperties.get(\"SaveRemoteCrendentials\",true))   saveCredentials(clientNode.getShortName(),user,password);\n  return clientNode;\n}\n"}
{"nl": "Saves settings and terminates the application", "code": "private void formWindowClosed(java.awt.event.WindowEvent evt){\n  saveSettings();\n  System.exit(0);\n}\n"}
{"nl": "Set extended", "code": "protected GroupsGetInvitesQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "It stores the current file counter (indicating the number of lines already processed from the file), so they won't be treated next time", "code": "public final void updateNumberOfProcessedLines() throws DataFallbackException {\n  openCounterDataOutputStream();\n  try {\n    this.getDOutput().write(new Integer(getReadBackLines()).toString());\n    getDOutput().newLine();\n    if (LOG.isDebugEnabled())     LOG.debug(\"removeLines() - The counter file has been updated with the value \" + getReadBackLines());\n  }\n catch (  IOException e) {\n    throw new DataFallbackException(e.getMessage());\n  }\n  closeCounterDataOutputStream();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"select top=\");\n  int number=np.getInt(0,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\";\");\n  final ChartViewer viewer=(ChartViewer)getViewer();\n  final LabelsJList list=viewer.getActiveLabelsJList();\n  list.selectTop(number);\n  viewer.repaint();\n}\n"}
{"nl": "move file", "code": "public static void moveFile(String oldPath,String newPath){\n  File fileOld=new File(oldPath);\n  if (fileOld.exists()) {\n    File fileNew=new File(newPath);\n    fileOld.renameTo(fileNew);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetFollowersQuery(VkApiClient client){\n  super(client,\"users.getFollowers\",GetFollowersResponse.class);\n}\n"}
{"nl": "Delete the managed ledger associated with this topic", "code": "@Override public CompletableFuture<Void> delete(){\n  return delete(false);\n}\n"}
{"nl": "Required for Externalizable", "code": "@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n  PlatformLogicalVersion version=LRMIInvocationContext.getEndpointLogicalVersion();\n  readExternal(in,version);\n}\n"}
{"nl": "Create a new Graql shell", "code": "GraqlShell(String historyFilename,String namespace,GraqlClient client,URI uri,Optional<List<String>> queryStrings) throws Throwable {\n  this.historyFilename=historyFilename;\n  try {\n    console=new ConsoleReader(System.in,System.out);\n    Signal signal=new Signal(\"INT\");\n    GraqlSignalHandler signalHandler=new GraqlSignalHandler(this);\n    Signal.handle(signal,signalHandler);\n    try {\n      session=client.connect(this,uri).get();\n    }\n catch (    ExecutionException e) {\n      throw e.getCause();\n    }\n    sendJson(Json.object(ACTION,ACTION_NAMESPACE,NAMESPACE,namespace));\n    start(queryStrings);\n  }\n  finally {\n    client.close();\n    console.flush();\n  }\n}\n"}
{"nl": "RuleTag id: 1500 datTagId: 1000", "code": "public static Configuration createRuleTag(){\n  Configuration configuration=new Configuration();\n  RuleTag ruleTag=RuleTag.create(\"RuleTag\",Integer.class,\"(#1000 < 0)|(#1000 > 200)[1],true[0]\").id(1500L).build();\n  configuration.addEntity(ruleTag);\n  return configuration;\n}\n"}
{"nl": "DOM Level 3", "code": "@Override public void normalizeDocument(){\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n"}
{"nl": "Returns whether this view is visible or not", "code": "public boolean isVisible(){\n  return !isDismissed && visible;\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return isLocked;\n}\n"}
{"nl": "Edits an item", "code": "public MarketEditQuery edit(UserActor actor,int ownerId,int itemId,String name,String description,int categoryId,float price,int mainPhotoId){\n  return new MarketEditQuery(getClient(),actor,ownerId,itemId,name,description,categoryId,price,mainPhotoId);\n}\n"}
{"nl": "Below method will create string like \"***********\"", "code": "public static String printLine(String a,int num){\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < num; i++) {\n    builder.append(a);\n  }\n  return builder.toString();\n}\n"}
{"nl": "This method logs the ERROR message", "code": "public final void error(final Object o,final Throwable t){\n  log(Level.ERROR,o,t);\n}\n"}
{"nl": "MUST be called on non-Main Thread", "code": "public static void copyJarsFromAssets(final Context cxt,final String[] names){\n  if (debug) {\n    Log.d(TAG,\"copyJarsFromAssets(\" + Arrays.deepToString(names) + \")\");\n  }\n  final File dexDir=cxt.getDir(DIR_SUBDEX,Context.MODE_PRIVATE);\n  File apkFile=new File(cxt.getApplicationInfo().sourceDir);\n  final boolean shouldInit=shouldDexOpt(apkFile,dexDir,names);\n  if (shouldInit) {\n    try {\n      copyToInternal(cxt,dexDir,names);\n      appendOdexesToClassPath(cxt,dexDir,names);\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n  }\n else {\n    if (!inAppended(names)) {\n      appendOdexesToClassPath(cxt,dexDir,names);\n    }\n  }\n}\n"}
{"nl": "Attempt to parse string as a Colour", "code": "public static Colour attemptToGetAsColour(String part){\n  Colour col=null;\n  try {\n    col=Colour.valueOf(part.toUpperCase());\n  }\n catch (  Exception e) {\n  }\n  return col;\n}\n"}
{"nl": "Sets type's storage type", "code": "public SpaceTypeDescriptorBuilder storageType(StorageType storageType){\n  if (storageType == null)   throw new IllegalArgumentException(\"Argument cannot be null - 'storageType'.\");\n  if (this._storageType != null && this._storageType != StorageType.DEFAULT && this._storageType != storageType)   throw new IllegalStateException(\"Cannot set storage type to '\" + storageType + \"' - it was already set to '\"+ _storageType+ \"'.\");\n  this._storageType=storageType;\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsCreateAdsQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.createAds\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof ChartViewer && ((ChartViewer)getViewer()).getChartDrawer() instanceof BarChartDrawer && !(((ChartViewer)getViewer()).getChartDrawer() instanceof StackedLineChartDrawer);\n}\n"}
{"nl": "Parses a date in a string to a Date", "code": "private Date parseDate(String date){\n  try {\n    return DateFormat.getDateInstance(DateFormat.SHORT).parse(date);\n  }\n catch (  ParseException e) {\n    MessageDialog.openError(getShell(),Policy.bind(\"HistorySearchDialog.dateParseErrorTitle\"),Policy.bind(\"HistorySearchDialog.dateParseErrorMessage\"));\n    return null;\n  }\n}\n"}
{"nl": "Checks if specified node property has specified value", "code": "public static ExpectedCondition<Boolean> hasNodePropertyValue(final Session session,final String nodePath,final String propertyName,final String propertyValue){\n  LOG.debug(\"Checking if node '{}' has property '{}' with value '{}'\",nodePath,propertyName,propertyValue);\n  return null;\n}\n"}
{"nl": "Dump a binary form of the sample rate to the given output stream", "code": "public void dumpBinary(DataOutputStream os) throws IOException {\n  os.writeInt(numberOfChannels);\n  os.writeInt(sampleRate);\n  os.writeFloat(coeffMin);\n  os.writeFloat(coeffRange);\n  os.writeFloat(postEmphasis);\n  os.writeInt(residualFold);\n}\n"}
{"nl": "Creates a sample basic experiment", "code": "private Experiment createExperiment(){\n  return ExperimentFactory.createExperiment().setDescription(\"Sample Description.\").setStartTime(startTime).setEndTime(endTime).setLabel(PREFIX_EXPERIMENT + System.currentTimeMillis() + count++).setSamplingPercent(samplingPercent).setApplication(ApplicationFactory.defaultApplication());\n}\n"}
{"nl": "Encrypt a string", "code": "@SuppressWarnings(\"restriction\") public synchronized String encrypt(String str){\n  byte[] utf8;\n  try {\n    utf8=str.getBytes(\"UTF-8\");\n    byte[] enc=encrypter.doFinal(utf8);\n    return encoder.encode(enc);\n  }\n catch (  UnsupportedEncodingException e) {\n    e.printStackTrace();\n  }\ncatch (  IllegalBlockSizeException e) {\n    e.printStackTrace();\n  }\ncatch (  BadPaddingException e) {\n    e.printStackTrace();\n  }\n  return \"\";\n}\n"}
{"nl": "Create an <code>unsigned short</code>", "code": "public static UShort ushort(String value) throws NumberFormatException {\n  return value == null ? null : UShort.valueOf(value);\n}\n"}
{"nl": "not implemented", "code": "public void remove(){\n}\n"}
{"nl": "create itemView", "code": "public View createView(ViewGroup parent){\n  return LayoutInflater.from(parent.getContext()).inflate(R.layout.enls_item_default,parent,false);\n}\n"}
{"nl": "Determines whether the given step is completed or not", "code": "public boolean isStepCompleted(int stepNumber){\n  return completedSteps[stepNumber];\n}\n"}
{"nl": "load all saved credentials from properties", "code": "public static void ensureCredentialsHaveBeenLoadedFromProperties(){\n  if (!loaded) {\n    final String[] credentials=ProgramProperties.get(\"MeganServerCredentials\",new String[0]);\n    for (    String line : credentials) {\n      String[] tokens=line.split(\"::\");\n      if (tokens.length > 0) {\n        server2Credentials.put(tokens[0],new Pair<>(tokens.length > 1 ? tokens[1] : \"\",Basic.toString(Base64.decodeBase64((tokens.length > 2 ? tokens[2] : \"\")))));\n      }\n    }\n    loaded=true;\n  }\n}\n"}
{"nl": "update the Arrow's Status", "code": "private void updateArrow(){\n  path1.reset();\n  path2.reset();\n  path3.reset();\n  path1.moveTo(mRealLeft + radius,mArrowStart);\n  path1.lineTo(mRealLeft + radius,mArrowStart + radius);\n  path2.moveTo(mRealLeft + radius,mArrowStart + radius);\n  path2.lineTo((float)(mRealLeft + radius - Math.tan(Math.toRadians(40)) * radius * 0.46f),mArrowStart + radius - radius * .46f);\n  path3.moveTo(mRealLeft + radius,mArrowStart + radius);\n  path3.lineTo((float)(mRealLeft + radius + Math.tan(Math.toRadians(40)) * radius * 0.46f),mArrowStart + radius - radius * .46f);\n  pathMeasure1.setPath(path1,false);\n  pathMeasure2.setPath(path2,false);\n  pathMeasure3.setPath(path3,false);\n  mArrow_center_length=pathMeasure1.getLength();\n  mArrow_left_length=pathMeasure2.getLength();\n  mArrow_right_length=pathMeasure3.getLength();\n}\n"}
{"nl": "add the service to pigeon and publish the service to registry", "code": "public static <T>void addService(ProviderConfig<T> providerConfig) throws RpcException {\n  if (StringUtils.isBlank(providerConfig.getUrl())) {\n    providerConfig.setUrl(getServiceUrl(providerConfig));\n  }\n else   if (providerConfig.isSupported() && !getServiceUrl(providerConfig).equals(providerConfig.getUrl())) {\n    logger.warn(\"customized [serviceName] cannot provide service to OCTO invoker \" + \"unless set the [serviceName] to canonical name of the interface class \" + \"or just keep [serviceName] config to blank. more help refer to: \"+ ConfigManagerLoader.getConfigManager().getStringValue(\"pigeon.help.provider.octo.url\",\"http://wiki.sankuai.com/pages/viewpage.action?pageId=606809899\"));\n  }\n  try {\n    ServicePublisher.addService(providerConfig);\n    ServerConfig serverConfig=ProviderBootStrap.startup(providerConfig);\n    providerConfig.setServerConfig(serverConfig);\n    ServicePublisher.publishService(providerConfig,false);\n  }\n catch (  RegistryException t) {\n    throw new RpcException(\"error while adding service:\" + providerConfig,t);\n  }\ncatch (  Throwable t) {\n    throw new RpcException(\"error while adding service:\" + providerConfig,t);\n  }\n}\n"}
{"nl": "Organizer community id (for events only)", "code": "public GroupsEditQuery eventGroupId(Integer value){\n  return unsafeParam(\"event_group_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,String groupId,Integer... userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatusFull.class));\n  groupId(groupId);\n  extended(true);\n  userIds(userIds);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardGetCommentsQuery(VkApiClient client,int groupId,int topicId){\n  super(client,\"board.getComments\",GetCommentsResponse.class);\n  groupId(groupId);\n  topicId(topicId);\n}\n"}
{"nl": "convert a byte array to hexadecimal", "code": "public static String toHex(byte[] data){\n  return new String(Hex.encodeHex(data));\n}\n"}
{"nl": "Un register the client", "code": "@RequestMapping(value=ClientUris.UN_REGISTER,method=RequestMethod.GET) public void unRegister(){\n  ClientSession clientSession=ClientContext.get();\n  assert clientSession != null;\n  clientService.unRegisterClient(clientSession.getId());\n}\n"}
{"nl": "Release of this SLHolder resource", "code": "public void release(){\n  if (_entries != null)   _entries.freeSLHolder(_pos);\n  _pos=null;\n  _entries=null;\n}\n"}
{"nl": "Catch Formal creation - method parameters", "code": "private soot.Local createCatchFormal(polyglot.ast.Formal formal){\n  soot.Type sootType=Util.getSootType(formal.type().type());\n  soot.Local formalLocal=createLocal(formal.localInstance());\n  soot.jimple.CaughtExceptionRef exceptRef=soot.jimple.Jimple.v().newCaughtExceptionRef();\n  soot.jimple.Stmt stmt=soot.jimple.Jimple.v().newIdentityStmt(formalLocal,exceptRef);\n  body.getUnits().add(stmt);\n  Util.addLnPosTags(stmt,formal.position());\n  Util.addLnPosTags(((soot.jimple.IdentityStmt)stmt).getRightOpBox(),formal.position());\n  ArrayList<String> names=new ArrayList<String>();\n  names.add(formal.name());\n  stmt.addTag(new soot.tagkit.ParamNamesTag(names));\n  return formalLocal;\n}\n"}
{"nl": "Creating bezier view with params", "code": "private BezierView buildBezierView(){\n  BezierView bezierView=new BezierView(context,spaceBackgroundColor);\n  bezierView.build(centreContentWight,spaceNavigationHeight - mainContentHeight);\n  return bezierView;\n}\n"}
{"nl": "determines the number of counts necessary for a taxon to be considered detected, for each sample", "code": "private static int[] computeDetectionThreshold(int numberOfSamples,Map<Integer,Integer[]> srcClass2counts,float detectionThresholdPercent){\n  final int[] array=new int[numberOfSamples];\n  if (detectionThresholdPercent > 0) {\n    for (    Integer id : srcClass2counts.keySet()) {\n      if (id > 0) {\n        final Integer[] counts=srcClass2counts.get(id);\n        if (counts != null) {\n          for (int i=0; i < counts.length; i++) {\n            array[i]+=counts[i];\n          }\n        }\n      }\n    }\n    for (int i=0; i < array.length; i++) {\n      array[i]*=detectionThresholdPercent / 100.0;\n    }\n    System.err.println(\"Read detection thresholds: \" + Basic.toString(array,\", \"));\n  }\n  for (int i=0; i < array.length; i++) {\n    array[i]=Math.max(1,array[i]);\n  }\n  return array;\n}\n"}
{"nl": "Dumps the samples to the given stream", "code": "public void dumpBinary(DataOutputStream os) throws IOException {\n  os.writeInt(frameData.length);\n  for (int i=0; i < frameData.length; i++) {\n    os.writeShort(frameData[i]);\n  }\n  os.writeInt(residualData.length);\n  for (int i=0; i < residualData.length; i++) {\n    os.writeByte(residualData[i]);\n  }\n}\n"}
{"nl": "Increments the primitive value mapped to key by 1", "code": "public boolean increment(K key){\n  return adjustValue(key,(int)1);\n}\n"}
{"nl": "Creates a new lint quickfix which can replace string contents at the given PSI element", "code": "ReplaceStringQuickFix(@Nullable String name,@Nullable String regexp,@NotNull String newValue){\n  myName=name;\n  myNewValue=newValue;\n  if (regexp != null && regexp.indexOf('(') == -1) {\n    regexp=\"(\" + Pattern.quote(regexp) + \")\";\n  }\n  myRegexp=regexp;\n}\n"}
{"nl": "Inner method which handles the Daq Xml Requests", "code": "Collection<? extends ClientRequestResult> handleDaqXmlRequest(final ClientRequest daqXmlRequest){\n  Collection<ProcessXmlResponse> singleXML=new ArrayList<ProcessXmlResponse>(1);\n  ProcessXmlResponseImpl processXmlResponse;\n  try {\n    String xmlString=processXMLProvider.getProcessConfigXML(daqXmlRequest.getRequestParameter());\n    processXmlResponse=new ProcessXmlResponseImpl();\n    processXmlResponse.setProcessXML(xmlString);\n  }\n catch (  CacheElementNotFoundException cacheEx) {\n    String errorMessage=\"Error while getting Process configruation:\" + cacheEx.getMessage();\n    LOG.warn(errorMessage,cacheEx);\n    processXmlResponse=new ProcessXmlResponseImpl(false,errorMessage);\n  }\n  singleXML.add(processXmlResponse);\n  return singleXML;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  ServicePanel servicePanel=((RemoteServiceBrowser)getViewer()).getServicePanel();\n  if (servicePanel != null) {\n    TreePath[] paths=servicePanel.getFileTree().getSelectionPaths();\n    if (paths != null)     servicePanel.collapse(paths);\n else     servicePanel.collapse((DefaultMutableTreeNode)servicePanel.getFileTree().getModel().getRoot());\n  }\n}\n"}
{"nl": "Normalize a value (val - min) / (max - min)", "code": "public static double normalize(double val,double min,double max){\n  if (max < min)   throw new IllegalArgumentException(\"Max must be greather than min\");\n  return (val - min) / (max - min);\n}\n"}
{"nl": "Set notification", "code": "public MessagesSendQuery notification(Boolean value){\n  return unsafeParam(\"notification\",value);\n}\n"}
{"nl": "Convenience method which allows the caller to modify the prepState associated with a given <code>ParticipantHandle</code>", "code": "synchronized void modifyParticipant(ParticipantHandle handle,int state){\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.entering(TxnManagerTransaction.class.getName(),\"modifyParticipant\",new Object[]{handle,new Integer(state)});\n  }\n  ParticipantHandle ph=null;\n  if (handle == null)   throw new NullPointerException(\"ParticipantHolder: \" + \"modifyParticipant: cannot modify null handle\");\n  if (handle.equals(_singleHandle))   ph=_singleHandle;\n else   ph=_parts.get(_parts.get(handle));\n  if (ph == null) {\n    if (operationsLogger.isLoggable(Level.FINER)) {\n      operationsLogger.exiting(TxnManagerTransaction.class.getName(),\"modifyParticipant\");\n    }\n    return;\n  }\n  ph.setPrepState(state);\n  if (operationsLogger.isLoggable(Level.FINER)) {\n    operationsLogger.exiting(TxnManagerTransaction.class.getName(),\"modifyParticipant\");\n  }\n}\n"}
{"nl": "used when reading letter", "code": "public SM_MAIL_SERVICE(Player player,Letter letter,long time){\n  super(player);\n  this.serviceId=3;\n  this.letter=letter;\n  this.time=time;\n}\n"}
{"nl": "Overriding to use xml encoding from the input xml document", "code": "@Override protected void createStartDocumentSkeleton(StartDocument startDoc){\n  skel=new GenericSkeleton();\n  if (!params.omitXMLDeclaration) {\n    skel.add(\"<?xml version=\\\"\" + doc.getXmlVersion() + \"\\\"\");\n    skel.add(\" encoding=\\\"\" + doc.getXmlEncoding() + \"\\\"\");\n    if (doc.getXmlStandalone()) {\n      skel.add(\" standalone=\\\"yes\\\"\");\n    }\n    skel.add(\"?>\" + lineBreak);\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected void loadRange(int aRange){\n  this.nextElement=this.set.getRangeStart(aRange);\n  this.endElement=this.set.getRangeEnd(aRange);\n}\n"}
{"nl": "compute SAM representation", "code": "private static byte[] computeSAM(BlastMode blastMode,int maxNumberOfReads,String matchesText) throws IOException {\n  final ISAMIterator iterator;\nswitch (blastMode) {\ncase BlastN:\n    iterator=new BlastN2SAMIterator(matchesText,maxNumberOfReads);\n  break;\ncase BlastP:\niterator=new BlastP2SAMIterator(matchesText,maxNumberOfReads);\nbreak;\ncase BlastX:\niterator=new BlastX2SAMIterator(matchesText,maxNumberOfReads);\nbreak;\ndefault :\nthrow new IOException(\"Unknown BLAST mode: \" + blastMode.toString());\n}\ntry {\niterator.next();\nreturn iterator.getMatchesText();\n}\n  finally {\niterator.close();\n}\n}\n"}
{"nl": "Creates the default inverse cumulative probability density test expected values", "code": "@Override public int[] makeInverseCumulativeTestValues(){\n  return new int[]{0,2,3,4,5,5,10,10,10,9,9,10};\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardFixTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.fixTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n"}
{"nl": "create Router by uri", "code": "public static Router create(Uri uri){\n  return new Router(uri);\n}\n"}
{"nl": "check invalid shell commands", "code": "private void invalidShellCommand(){\n  Platform.runLater(null);\n}\n"}
{"nl": "Deploys a single process", "code": "public String deployProcess(String resourceName){\n  logger.debug(\"Start deploying single process.\");\n  DeploymentBuilder deploymentBuilder=processEngine.getRepositoryService().createDeployment();\n  deploymentBuilder.addClasspathResource(resourceName);\n  Deployment deployment=deploymentBuilder.deploy();\n  logger.debug(\"Process deployed\");\n  return processEngine.getRepositoryService().createProcessDefinitionQuery().deploymentId(deployment.getId()).singleResult().getId();\n}\n"}
{"nl": "adds register/unregister calls for the EventBus to the onStart/onStop methods", "code": "private void handleEventBusRegistration(IJAssignmentTarget fieldRef,HasLifecycleMethods holderWithLifecycleMethods){\n  JBlock onStartBlock;\n  JBlock onStopBlock;\n  if (holderWithLifecycleMethods instanceof EServiceHolder) {\n    onStartBlock=holderWithLifecycleMethods.getOnCreateAfterSuperBlock();\n    onStopBlock=holderWithLifecycleMethods.getOnDestroyBeforeSuperBlock();\n  }\n else {\n    onStartBlock=holderWithLifecycleMethods.getOnStartAfterSuperBlock();\n    onStopBlock=holderWithLifecycleMethods.getOnStopBeforeSuperBlock();\n  }\n  onStartBlock.invoke(fieldRef,\"register\").arg(JExpr._this());\n  onStopBlock.invoke(fieldRef,\"unregister\").arg(JExpr._this());\n}\n"}
{"nl": "true if the entry packet has an array of fixed properties", "code": "public boolean hasFixedPropertiesArray(){\n  return false;\n}\n"}
{"nl": "Save local history", "code": "public static void saveLocalHistory(IResource resource) throws CoreException {\n  if (resource instanceof IFile && resource.exists()) {\n    if (!resource.isSynchronized(IResource.DEPTH_ZERO))     resource.refreshLocal(IResource.DEPTH_ZERO,null);\n    ((IFile)resource).appendContents(new ByteArrayInputStream(new byte[0]),IResource.KEEP_HISTORY,null);\n  }\n}\n"}
{"nl": "Add a new config", "code": "@Pollable(async=true,message=\"Start Adding Box SDK Service Config\",expectedSubTaskNumber=1) public PollableFuture<BoxSDKServiceConfigEntity> addConfig(String clientId,String clientSecret,String publicKeyId,String privateKey,String privateKeyPassword,String enterpriseId,@InjectCurrentTask PollableTask currentTask) throws ExecutionException, InterruptedException, BoxSDKServiceException {\n  BoxSDKServiceConfigEntity boxSDKServiceConfig=boxSDKServiceConfigEntityRepository.findFirstByOrderByIdAsc();\n  if (boxSDKServiceConfig != null) {\n    throw new BoxSDKServiceException(\"Config must be deleted first before adding a new one\");\n  }\n  boxSDKServiceConfig=new BoxSDKServiceConfigEntity(clientId,clientSecret,publicKeyId,privateKey,privateKeyPassword,enterpriseId,null,null,null,false);\n  logger.debug(\"Initial saving of the config so that it can be used immediately\");\n  boxSDKServiceConfigEntityRepository.save(boxSDKServiceConfig);\n  BoxUser.Info appUser=boxSDKAppUserService.createAppUser(boxSDKServiceConfig.getClientId(),boxSDKServiceConfig.getClientSecret(),boxSDKServiceConfig.getPublicKeyId(),boxSDKServiceConfig.getPrivateKey(),boxSDKServiceConfig.getPrivateKeyPassword(),boxSDKServiceConfig.getEnterpriseId());\n  boxSDKServiceConfig.setAppUserId(appUser.getID());\n  logger.debug(\"Saving of the config with updated app user id: {}\",appUser.getID());\n  boxSDKServiceConfigEntityRepository.save(boxSDKServiceConfig);\n  MojitoAppUserInfo mojitoFolderStructure=createMojitoFolderStructure();\n  boxSDKServiceConfig.setRootFolderId(mojitoFolderStructure.getRootFolderId());\n  boxSDKServiceConfig.setDropsFolderId(mojitoFolderStructure.getDropsFolderId());\n  boxSDKServiceConfig.setBootstrap(true);\n  validateConfig(boxSDKServiceConfig,currentTask);\n  logger.debug(\"Saving of the config with updated IDs\");\n  boxSDKServiceConfigEntityRepository.save(boxSDKServiceConfig);\n  return new PollableFutureTaskResult<>(boxSDKServiceConfig);\n}\n"}
{"nl": "Quest updated: %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_UPDATE_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300615,value0);\n}\n"}
{"nl": "Redirect the call to the specified broker", "code": "protected void validateBrokerName(String broker) throws MalformedURLException {\n  String brokerUrl=String.format(\"http://%s\",broker);\n  if (!pulsar().getWebServiceAddress().equals(brokerUrl)) {\n    String[] parts=broker.split(\":\");\n    checkArgument(parts.length == 2);\n    String host=parts[0];\n    int port=Integer.parseInt(parts[1]);\n    URI redirect=UriBuilder.fromUri(uri.getRequestUri()).host(host).port(port).build();\n    log.debug(\"[{}] Redirecting the rest call to {}: broker={}\",clientAppId(),redirect,broker);\n    throw new WebApplicationException(Response.temporaryRedirect(redirect).build());\n  }\n}\n"}
{"nl": "Find which ResizeHandle is close to the (x, y) coordinates", "code": "private static ResizeHandle findResizeHandleInWidget(ConstraintWidget widget,float x,float y,ViewTransform transform){\n  WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();\n  WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);\n  if (!decorator.isVisible()) {\n    return null;\n  }\n  WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();\n  widgetInteraction.updatePosition(transform);\n  ResizeHandle handle=widgetInteraction.findResizeHandle(x,y);\n  if (handle != null) {\n    return handle;\n  }\n  return null;\n}\n"}
{"nl": "measure height", "code": "private int measureHeightSize(int measureSpec){\n  int defSize=dp2px(DEFAULT_HEIGHT);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int result=0;\nswitch (specMode) {\ncase MeasureSpec.UNSPECIFIED:\ncase MeasureSpec.AT_MOST:\n    result=Math.min(defSize,specSize);\n  break;\ncase MeasureSpec.EXACTLY:\nresult=specSize;\nbreak;\n}\nreturn result;\n}\n"}
{"nl": "Construct the server session handler", "code": "public MemcachedCommandHandler(SpaceCache cache,String memcachedVersion,boolean verbosity,int idle,DefaultChannelGroup channelGroup){\n  this.cache=cache;\n  version=memcachedVersion;\n  verbose=verbosity;\n  idle_limit=idle;\n  this.channelGroup=channelGroup;\n}\n"}
{"nl": "Finds the given resource in the given package", "code": "private AbstractResource findResource(String resName,String resID,String packageName){\n  for (  ARSCFileParser.ResPackage pkg : this.resourcePackages) {\n    boolean matches=(packageName == null || packageName.isEmpty()) && pkg.getPackageName().equals(this.appPackageName);\n    matches|=pkg.getPackageName().equals(packageName);\n    if (!matches)     continue;\n    for (    ARSCFileParser.ResType type : pkg.getDeclaredTypes())     if (type.getTypeName().equals(resID)) {\n      AbstractResource res=type.getFirstResource(resName);\n      return res;\n    }\n  }\n  return null;\n}\n"}
{"nl": "A function to read the next number on the stack (allows for reading even in cases of unary minuses)", "code": "private Double readNextNumber(Stack<CalculationToken> calculationStack){\n  CalculationToken calculationToken=calculationStack.pop();\n  DoubleToken doubleToken;\n  Double nextNumber;\n  if (calculationToken instanceof OperationToken) {\n    calculationToken=calculationStack.pop();\n    doubleToken=(DoubleToken)calculationToken;\n    nextNumber=-doubleToken.getNumber();\n  }\n else {\n    doubleToken=(DoubleToken)calculationToken;\n    nextNumber=doubleToken.getNumber();\n  }\n  return nextNumber;\n}\n"}
{"nl": "Called when screen is finally destroyed", "code": "public void onDestroy(){\n}\n"}
{"nl": "Gets if global or non server specific nodes should be applied", "code": "public boolean isIncludeGlobal(){\n  return this.includeGlobal;\n}\n"}
{"nl": "Construct a lexical analyzer to analysis a piece of code from a Reader", "code": "public Lex(Reader in){\n  this(new PushbackReader(in,2),false);\n}\n"}
{"nl": "Expire application", "code": "public boolean isApplicationExpired(){\n  final Calendar expireDate=Calendar.getInstance();\n  expireDate.set(Integer.valueOf(SETTINGS.getString(\"expirydateyy.setting\")),Integer.valueOf(SETTINGS.getString(\"expirydatemm.setting\")),Integer.valueOf(SETTINGS.getString(\"expirydatedd.setting\")));\n  if (Calendar.getInstance().after(expireDate)) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Initialize an AirMapStatusRequirementNotice from JSON", "code": "public AirMapStatusRequirementNotice(JSONObject noticeJson){\n  constructFromJson(noticeJson);\n}\n"}
{"nl": "when string is null return blank string", "code": "public static String nullToBlank(final String string){\n  return string == null ? BLANK : string;\n}\n"}
{"nl": "Add a list of pages to an experiment", "code": "@Override public void postPages(Application.Name applicationName,Experiment.ID experimentID,ExperimentPageList experimentPageList) throws RepositoryException {\n  ExperimentPageList oldPageList=getExperimentPages(experimentID);\n  StringBuilder cqlQuery=new StringBuilder(\"begin batch \");\n  MutationBatch m=driver.getKeyspace().prepareMutationBatch();\n  for (  ExperimentPage experimentPage : experimentPageList.getPages()) {\n    cqlQuery.append(\"insert into page_experiment_index(app_name, page, exp_id, assign) \" + \"values(?,?,?,?);\");\n    m.withRow(keyspace.experiment_page_CF(),experimentID).putColumn(experimentPage.getName(),experimentPage.getAllowNewAssignment());\n    m.withRow(keyspace.app_page_index_CF(),applicationName).putColumn(experimentPage.getName().toString(),experimentPage.getAllowNewAssignment());\n  }\n  cqlQuery.append(\"apply batch;\");\n  PreparedCqlQuery<ExperimentsKeyspace.AppNamePageComposite,String> preparedQuery=driver.getKeyspace().prepareQuery(keyspace.page_experiment_index_CF()).withCql(cqlQuery.toString()).asPreparedStatement();\n  for (  ExperimentPage experimentPage : experimentPageList.getPages()) {\n    preparedQuery.withByteBufferValue(applicationName,ApplicationNameSerializer.get());\n    preparedQuery.withByteBufferValue(experimentPage.getName(),PageNameSerializer.get());\n    preparedQuery.withByteBufferValue(experimentID,ExperimentIDSerializer.get());\n    preparedQuery.withBooleanValue(experimentPage.getAllowNewAssignment());\n  }\n  try {\n    preparedQuery.execute();\n    m.execute();\n  }\n catch (  ConnectionException e) {\n    throw new RepositoryException(\"Could not add the page(s) to the experiment:\\\"\" + experimentID + \"\\\"\",e);\n  }\n  ExperimentPageList newPageList=getExperimentPages(experimentID);\n  saveExperimentPageState(experimentID,oldPageList,newPageList);\n}\n"}
{"nl": "Required for Externalizable", "code": "public DirectSpaceProxyFactoryImpl(){\n}\n"}
{"nl": "Perform tasks on Creature return at home", "code": "public void onReturnHome(){\n}\n"}
{"nl": "Move mouse to a position on screen", "code": "public void move(Point p){\n  move(p.x,p.y);\n}\n"}
{"nl": "Configure the schema migrator with a JDBC connection", "code": "public SQLSchemaMigrator configure(Connection connection){\n  this.connection=connection;\n  this.metadata=new SQLModel(connection);\n  return this;\n}\n"}
{"nl": "Create store without any restructure", "code": "public static void createCarbonStore(){\n  try {\n    String factFilePath=new File(\"src/test/resources/data.csv\").getCanonicalPath();\n    File storeDir=new File(absoluteTableIdentifier.getStorePath());\n    CarbonUtil.deleteFoldersAndFiles(storeDir);\n    CarbonProperties.getInstance().addProperty(CarbonCommonConstants.STORE_LOCATION_HDFS,absoluteTableIdentifier.getStorePath());\n    String kettleHomePath=\"../processing/carbonplugins\";\n    CarbonTable table=createTable();\n    writeDictionary(factFilePath,table);\n    CarbonDataLoadSchema schema=new CarbonDataLoadSchema(table);\n    LoadModel loadModel=new LoadModel();\n    String partitionId=\"0\";\n    loadModel.setSchema(schema);\n    loadModel.setDatabaseName(absoluteTableIdentifier.getCarbonTableIdentifier().getDatabaseName());\n    loadModel.setTableName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());\n    loadModel.setTableName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());\n    loadModel.setFactFilePath(factFilePath);\n    loadModel.setLoadMetadataDetails(new ArrayList<LoadMetadataDetails>());\n    executeGraph(loadModel,absoluteTableIdentifier.getStorePath(),kettleHomePath);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "For mood only", "code": "public SM_PET(Pet pet,int subType,int shuggleEmotion){\n  this(0,PetAction.MOOD.getActionId(),0,0,pet);\n  this.shuggleEmotion=shuggleEmotion;\n  this.subType=subType;\n}\n"}
{"nl": "Format the download progress", "code": "public static final String formatSize(int size){\n  if (size < MB_CONSTANT) {\n    float kSize=(float)size / KB_CONSTANT;\n    kSize=((float)((int)(kSize * 10))) / 10;\n    return kSize + \"K\";\n  }\n else   if (size < GB_CONSTANT) {\n    float kSize=(float)size / MB_CONSTANT;\n    kSize=((float)((int)(kSize * 10))) / 10;\n    return kSize + \"M\";\n  }\n else {\n    float kSize=(float)size / GB_CONSTANT;\n    kSize=((float)((int)(kSize * 100))) / 100;\n    return kSize + \"G\";\n  }\n}\n"}
{"nl": "Writes a pbs entry packet to the stream", "code": "public static void writePbsEntryPacket(PbsOutputStream output,PbsEntryPacket pbsEntry){\n  byte[] array=pbsEntry.getStreamBytes();\n  output.write(array,0,array.length);\n  writeDynamicProperties(output,pbsEntry.getDynamicProperties());\n}\n"}
{"nl": "Enters a code region where the sandbox is not needed", "code": "public static boolean enterSafeRegion(@Nullable Object credential){\n  boolean token=sEnabled;\n  if (credential == sCredential) {\n    sEnabled=false;\n  }\n  return token;\n}\n"}
{"nl": "show the window and return true, if not canceled", "code": "public boolean apply(){\n  setup();\n  setVisible(true);\n  return ok;\n}\n"}
{"nl": "unlocks given file", "code": "public static void fileUnlock(ICarbonLock carbonLock,String locktype){\n  if (carbonLock.unlock()) {\n    if (locktype.equals(LockUsage.METADATA_LOCK)) {\n      LOGGER.info(\"Metadata lock has been successfully released\");\n    }\n else     if (locktype.equals(LockUsage.TABLE_STATUS_LOCK)) {\n      LOGGER.info(\"Table status lock has been successfully released\");\n    }\n else     if (locktype.equals(LockUsage.CLEAN_FILES_LOCK)) {\n      LOGGER.info(\"Clean files lock has been successfully released\");\n    }\n else     if (locktype.equals(LockUsage.DELETE_SEGMENT_LOCK)) {\n      LOGGER.info(\"Delete segments lock has been successfully released\");\n    }\n  }\n else {\n    if (locktype.equals(LockUsage.METADATA_LOCK)) {\n      LOGGER.error(\"Not able to release the metadata lock\");\n    }\n else     if (locktype.equals(LockUsage.TABLE_STATUS_LOCK)) {\n      LOGGER.error(\"Not able to release the table status lock\");\n    }\n else     if (locktype.equals(LockUsage.CLEAN_FILES_LOCK)) {\n      LOGGER.info(\"Not able to release the clean files lock\");\n    }\n else     if (locktype.equals(LockUsage.DELETE_SEGMENT_LOCK)) {\n      LOGGER.info(\"Not able to release the delete segments lock\");\n    }\n  }\n}\n"}
{"nl": "Constructs new instance of <tt>CM_DUEL_REQUEST</tt> packet", "code": "public CM_DUEL_REQUEST(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Use this method to login and get cookies", "code": "public List login() throws Exception {\n  Map<String,String> map=new HashMap<String,String>();\n  map.put(\"formhash\",\"1d41a5ce\");\n  map.put(\"referer\",\"http,//www.hi-pda.com/forum/index.php\");\n  map.put(\"loginfield\",\"username\");\n  map.put(\"username\",\"\");\n  map.put(\"password\",\"\");\n  map.put(\"questionid\",\"0\");\n  map.put(\"answer\",\"\");\n  map.put(\"loginsubmit\",\"true\");\n  map.put(\"cookietime\",\"2592000\");\n  StringBuffer params=new StringBuffer();\n  Iterator it=map.entrySet().iterator();\n  while (it.hasNext()) {\n    Map.Entry element=(Map.Entry)it.next();\n    params.append(element.getKey());\n    params.append(\"=\");\n    params.append(element.getValue());\n    params.append(\"&\");\n  }\n  if (params.length() > 0) {\n    params.deleteCharAt(params.length() - 1);\n  }\n  URL hipdaURL=new URL(\"http://www.hi-pda.com/forum/logging.php?action=login&loginsubmit=yes&inajax=1\");\n  HttpURLConnection hipdaURLConnection=(HttpURLConnection)hipdaURL.openConnection();\n  hipdaURLConnection.setDoOutput(true);\n  hipdaURLConnection.setDoInput(true);\n  PrintWriter printWriter=new PrintWriter(hipdaURLConnection.getOutputStream());\n  printWriter.write(params.toString());\n  printWriter.flush();\n  List<String> cookielist=hipdaURLConnection.getHeaderFields().get(\"Set-Cookie\");\n  return cookielist;\n}\n"}
{"nl": "Set is board", "code": "public PollsGetVotersQuery isBoard(Boolean value){\n  return unsafeParam(\"is_board\",value);\n}\n"}
{"nl": "strips suffix for indicating an array type", "code": "public static String baseTypeName(String s){\n  int index=s.indexOf(\"[\");\n  if (index < 0) {\n    return s;\n  }\n else {\n    return s.substring(0,index);\n  }\n}\n"}
{"nl": "Use reverse order", "code": "public MarketSearchQuery rev(Boolean value){\n  return unsafeParam(\"rev\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardDeleteTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.deleteTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n"}
{"nl": "Creates a Polygon instance from the specified points", "code": "public static Polygon polygon(Point first,Point second,Point third,Point... morePoints){\n  Point[] points=new Point[3 + morePoints.length];\n  points[0]=Assert.argumentNotNull(first,\"first\");\n  points[1]=Assert.argumentNotNull(second,\"second\");\n  points[2]=Assert.argumentNotNull(third,\"third\");\n  for (int i=0; i < morePoints.length; i++)   points[i + 3]=morePoints[i];\n  return polygon(points);\n}\n"}
{"nl": "Terminates the exclusion mode", "code": "private void requestRemoveNodesStop(){\n  enqueue(new RemoveNodeMessageClass().doRequestStop());\n  logger.debug(\"ZWave controller end exclusion\");\n}\n"}
{"nl": "This method should no be modified, hashcode in this class is used to ensure that each connection hash unique id", "code": "@Override public int hashCode(){\n  return super.hashCode();\n}\n"}
{"nl": "Cancels requests with the given tag", "code": "public void cancelCallWithTag(String tag){\n  for (  Call call : client.dispatcher().queuedCalls()) {\n    if (call.request().tag().equals(tag)) {\n      call.cancel();\n    }\n  }\n  for (  Call call : client.dispatcher().runningCalls()) {\n    if (call.request().tag().equals(tag)) {\n      call.cancel();\n    }\n  }\n}\n"}
{"nl": "Set as main", "code": "public MarketAddAlbumQuery mainAlbum(Boolean value){\n  return unsafeParam(\"main_album\",value);\n}\n"}
{"nl": "Check if the screen is locked", "code": "public static boolean isScreenLocked(Context context){\n  KeyguardManager km=(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE);\n  return km.inKeyguardRestrictedInputMode();\n}\n"}
{"nl": "Market delivery regions", "code": "public GroupsEditQuery marketCountry(Integer... value){\n  return unsafeParam(\"market_country\",value);\n}\n"}
{"nl": "Test Start->End process on PROCESS_COMPLETED event", "code": "@Deployment(resources={\"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.noneTaskProcess.bpmn20.xml\"}) public void testProcessCompleted_StartEnd() throws Exception {\n  this.runtimeService.startProcessInstanceByKey(\"noneTaskProcess\");\n  assertEquals(\"ActivitiEventType.PROCESS_COMPLETED was expected 1 time.\",1,listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());\n}\n"}
{"nl": "Show a list of values to user", "code": "public static void showValues(String[] titles,String[] values){\n  if (titles.length == 0 || (titles.length != values.length)) {\n    return;\n  }\n  JTable table=new JTable();\n  table.setModel(new DefaultTableModel(new Object[][]{},new String[]{\" \",\" \"}));\n  SwingUtil.TableUtil.ensureRowNumber(table,titles.length);\n  for (int i=0; i < titles.length; i++) {\n    table.setValueAt(titles[i],i,0);\n    table.setValueAt(values[i],i,1);\n  }\n  JScrollPane mainPanel=new JScrollPane(table);\n  JOptionPane.showMessageDialog(null,mainPanel,\"Enter values\",JOptionPane.OK_OPTION);\n}\n"}
{"nl": "upload appender file to storage server (by callback)", "code": "public String[] upload_appender_file(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String master_filename=null;\n  final String prefix_name=null;\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE,group_name,master_filename,prefix_name,file_ext_name,file_size,callback,meta_list);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  final AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  final Alignment alignment=viewer.getAlignment();\n  final SelectedBlock block=viewer.getSelectedBlock();\n  final ArrayList<String> names=new ArrayList<>();\n  for (int row=0; row < alignment.getRowCompressor().getNumberRows(); row++) {\n    if (block.isSelectedRow(row)) {\n      for (      Integer read : alignment.getRowCompressor().getCompressedRow2Reads(row)) {\n        Lane lane=alignment.getLane(read);\n        int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(block.getFirstCol());\n        if ((block.isSelectedCol(lane.getFirstNonGapPosition() - firstJump + 1))) {\n          names.add(Basic.getFirstWord(lane.getName()));\n        }\n      }\n    }\n  }\n  if (names.size() > 0) {\n    executeImmediately(\"show window=Inspector;\");\n    final InspectorWindow inspectorWindow=(InspectorWindow)getDir().getViewerByClass(InspectorWindow.class);\n    if (inspectorWindow != null) {\n      final String command=\"show read='\\\\Q\" + Basic.toString(names,\"\\\\E|\\\\Q\") + \"\\\\E';\";\n      System.err.println(command);\n      getDir().execute(command,inspectorWindow.getCommandManager());\n    }\n  }\n}\n"}
{"nl": "Check if question is accpeted by filter Note: Day filter is already done on api call", "code": "public boolean isAccepted(Question q){\n  if (excludeQuestions != null && excludeQuestions.contains(\";\" + q.getQuestionId() + \";\")) {\n    return false;\n  }\n  if (filterDupes) {\n    if (!q.isPossibleDuplicate()) {\n      return false;\n    }\n  }\n  if (closeVotes != null && closeVotes.isFilterActive()) {\n    if (!closeVotes.inRange(q.getCloseVoteCount())) {\n      return false;\n    }\n  }\n  if (scores != null && scores.isFilterActive()) {\n    if (!scores.inRange(q.getScore())) {\n      return false;\n    }\n  }\n  if (answerType != null) {\nswitch (answerType) {\ncase CLICK_FROM_ROOMBA:\n      return q.isAlmostRoomba();\ncase HAS_ANSWER:\n    return q.getAnswerCount() > 0;\ncase HAS_ACCEPTED_ANSWER:\n  return q.isAnswerAccepted();\ncase HAS_NO_ACCEPTED_ANSWER:\nreturn !q.isAnswerAccepted();\ncase HAS_NO_ANSWER:\nreturn q.getAnswerCount() <= 0;\ncase NO_ROOMBA:\nreturn !q.isRoomba();\ncase NO_FILTER:\nreturn true;\n}\n}\nreturn true;\n}\n"}
{"nl": "Write to a file stream", "code": "public void writeTo(OutputStream out) throws IOException {\n  buffer.writeTo(out);\n}\n"}
{"nl": "modify appender file to storage server (by file buff)", "code": "public int modify_file(String group_name,String appender_filename,long file_offset,byte[] file_buff) throws IOException, MyException {\n  return this.do_modify_file(group_name,appender_filename,file_offset,file_buff.length,new UploadBuff(file_buff,0,file_buff.length));\n}\n"}
{"nl": "Order Fragment by priority", "code": "@Override public int compareTo(@SuppressWarnings(\"NullableProblems\") Fragment other){\n  if (this == other)   return 0;\n  return priority.compareTo(other.getPriority());\n}\n"}
{"nl": "Returns current platform's UI name", "code": "public static String currentPlatformName(){\n  String os=System.getProperty(\"os.name\");\n  if (os.startsWith(\"Mac OS\")) {\n    return \"Mac OS X\";\n  }\n else   if (os.startsWith(\"Windows\")) {\n    return \"Windows\";\n  }\n else   if (os.startsWith(\"Linux\")) {\n    return \"Linux\";\n  }\n  return \"Other\";\n}\n"}
{"nl": "Add new item based on sourceItem values", "code": "public static long addItem(Player player,int itemId,long count,Item sourceItem,ItemUpdatePredicate predicate){\n  ItemTemplate itemTemplate=DataManager.ITEM_DATA.getItemTemplate(itemId);\n  if (count <= 0 || itemTemplate == null) {\n    return 0;\n  }\n  Preconditions.checkNotNull(itemTemplate,\"No item with id \" + itemId);\n  Preconditions.checkNotNull(predicate,\"Predicate is not supplied\");\n  if (LoggingConfig.LOG_ITEM) {\n    log.info(\"[ITEM] ID/Count\" + (LoggingConfig.ENABLE_ADVANCED_LOGGING ? \"/Item Name - \" + itemTemplate.getTemplateId() + \"/\"+ count+ \"/\"+ itemTemplate.getName() : \" - \" + itemTemplate.getTemplateId() + \"/\"+ count) + \" to player \"+ player.getName());\n  }\n  Storage inventory=player.getInventory();\n  if (itemTemplate.isKinah()) {\n    inventory.increaseKinah(count);\n    return 0;\n  }\n  if (itemTemplate.isStackable()) {\n    count=addStackableItem(player,itemTemplate,count,predicate);\n  }\n else {\n    count=addNonStackableItem(player,itemTemplate,count,sourceItem,predicate);\n  }\n  if (inventory.isFull(itemTemplate.getExtraInventoryId()) && count > 0) {\n    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_DICE_INVEN_ERROR);\n  }\n  return count;\n}\n"}
{"nl": "Adds a handler which is invoked whenever a taint is propagated", "code": "public void addTaintPropagationHandler(TaintPropagationHandler handler){\n  this.taintPropagationHandlers.add(handler);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set color=\");\n  Color color=null;\n  if (np.peekMatchIgnoreCase(\"null\"))   np.matchIgnoreCase(\"null\");\n else   color=np.getColor();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof GraphView) {\n    boolean changed=false;\n    GraphView viewer=(GraphView)getViewer();\n    for (    Node v : viewer.getSelectedNodes()) {\n      viewer.setColor(v,color);\n      changed=true;\n    }\n    for (    Edge edge : viewer.getSelectedEdges()) {\n      viewer.setColor(edge,color);\n      changed=true;\n    }\n    if (changed) {\n      viewer.repaint();\n    }\n  }\n}\n"}
{"nl": "Adds extra check to IIngredient matches() for Botania special flowers", "code": "public static boolean matches(IIngredient ingredient,IItemStack itemStack){\n  if (ingredient == null) {\n    return false;\n  }\n  if (!ingredient.matches(itemStack)) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Checks the free disc space every time a determined number of lines are written to the file", "code": "public final boolean isDiskSpaceCheckDone(final int minimumFreeSpace) throws SystemDiskSpaceException {\n  final FallbackProperties fProperties=FallbackProperties.getInstance();\n  boolean checkDone=false;\n  if (fFileController.getNumberOfLines() > nextCheckFallbackData) {\n    checkDone=true;\n    if (LOG.isDebugEnabled())     LOG.debug(\"isDiskSpaceCheckDone() : Doing the check since the number of lines are \" + fFileController.getNumberOfLines() + \" and the current value for nextcheck is \"+ nextCheckFallbackData);\n    long freeSpace=SystemResourcesParameters.getFreeSpace();\n    if (freeSpace < minimumFreeSpace && freeSpace != FallbackProperties.CMD_FREE_SPACE_ERROR) {\n      throw new SystemDiskSpaceException(\"Reached the limit of free space of \" + minimumFreeSpace + \", current free space is \"+ freeSpace);\n    }\n else {\n      nextCheckFallbackData=fFileController.getNumberOfLines() + fProperties.getFreeSpaceCheckFrequency();\n      if (LOG.isDebugEnabled())       LOG.debug(\"isDiskSpaceCheckDone() : New value of nextCheckDataTags is \" + nextCheckFallbackData);\n    }\n  }\n  return checkDone;\n}\n"}
{"nl": "Returns true if list contains level", "code": "public boolean contains(int level){\n  for (  Expand expand : warehouseExpands) {\n    if (expand.getLevel() == level) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "skip a given count of tabs", "code": "public static int skipTabs(byte[] text,int offset,int n){\n  while (n > 0) {\n    if (text[offset] == '\\t')     n--;\n    offset++;\n  }\n  return offset - 1;\n}\n"}
{"nl": "skips empty lines and returns the next non-empty one or null", "code": "protected String skipEmptyLines(){\n  while (true) {\n    if (hasNextLine()) {\n      String next=nextLine().trim();\n      if (next.length() > 0)       return next;\n    }\n else     return null;\n  }\n}\n"}
{"nl": "Checks if a LegionMemberEx is valid or not", "code": "public boolean isValidLegionMemberEx(){\n  if (getObjectId() < 1) {\n    log.error(\"[LegionMemberEx] Player Object ID is empty.\");\n  }\n else   if (getName() == null) {\n    log.error(\"[LegionMemberEx] Player Name is empty.\" + getObjectId());\n  }\n else   if (getPlayerClass() == null) {\n    log.error(\"[LegionMemberEx] Player Class is empty.\" + getObjectId());\n  }\n else   if (getLevel() < 1) {\n    log.error(\"[LegionMemberEx] Player Level is empty.\" + getObjectId());\n  }\n else   if (getLastOnline() == 0) {\n    log.error(\"[LegionMemberEx] Last Online is empty.\" + getObjectId());\n  }\n else   if (getWorldId() < 1) {\n    log.error(\"[LegionMemberEx] World Id is empty.\" + getObjectId());\n  }\n else   if (getLegion() == null) {\n    log.error(\"[LegionMemberEx] Legion is empty.\" + getObjectId());\n  }\n else   if (getRank() == null) {\n    log.error(\"[LegionMemberEx] Rank is empty.\" + getObjectId());\n  }\n else   if (getNickname() == null) {\n    log.error(\"[LegionMemberEx] Nickname is empty.\" + getObjectId());\n  }\n else   if (getSelfIntro() == null) {\n    log.error(\"[LegionMemberEx] Self Intro is empty.\" + getObjectId());\n  }\n else {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Convert an Object array to a String array by invoking toString on each element", "code": "public static String[] toStringArray(Object value){\n  if (value instanceof String[]) {\n    return (String[])value;\n  }\n else {\n    Object[] valueArray=(Object[])value;\n    return Arrays.stream(valueArray).map(null).toArray(null);\n  }\n}\n"}
{"nl": "Push the result to rest api remote url of result", "code": "public String pushToRestApi() throws IOException {\n  RESTApiHandler restApi=new RESTApiHandler();\n  this.batchUrl=restApi.getRemoteURL(this);\n  return this.batchUrl;\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ReplicationPolicyDescription copy=(ReplicationPolicyDescription)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(empty,copy));\n}\n"}
{"nl": "Determines the width of this view", "code": "private int measureWidth(int measureSpec){\n  int result=0;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if (specMode == MeasureSpec.EXACTLY) {\n    result=specSize;\n  }\n else {\n    int count=3;\n    if (viewFlow != null) {\n      count=viewFlow.getAdapter().getCount();\n    }\n    float temp=circleSeparation - 2 * radius;\n    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * radius)+ (count - 1) * temp + 1);\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return result;\n}\n"}
{"nl": "debug log", "code": "public static void d(String msg){\n  if (LOG_ENABLE) {\n    Log.d(TAG,buildMsg(msg));\n  }\n}\n"}
{"nl": "gets a deflated string", "code": "public byte[] deflateString2ByteArray(String inputString){\n  int length=deflateString2ByteArray(inputString,buffer);\n  byte[] result=new byte[Math.abs(length)];\n  System.arraycopy(buffer,0,result,0,Math.abs(length));\n  return result;\n}\n"}
{"nl": "Attempts to infer the implicit roleTypes and matching types based on contents of the parent query", "code": "private Map<RoleType,Pair<String,Type>> computeRoleVarTypeMap(){\n  Map<RoleType,Pair<String,Type>> roleVarTypeMap=new HashMap<>();\n  if (getParentQuery() == null)   return roleVarTypeMap;\n  MindmapsGraph graph=getParentQuery().getGraph().orElse(null);\n  Map<String,Type> varTypeMap=getParentQuery().getVarTypeMap();\n  Set<String> allocatedVars=new HashSet<>();\n  Set<RoleType> allocatedRoles=new HashSet<>();\n  castings.forEach(null);\n  RelationType relType=(RelationType)getType();\n  Set<String> varsToAllocate=getVarNames();\n  varsToAllocate.removeAll(allocatedVars);\n  for (  String var : varsToAllocate) {\n    Type type=varTypeMap.get(var);\n    if (type != null && relType != null) {\n      Set<RoleType> cRoles=getCompatibleRoleTypes(type,relType);\n      if (cRoles.size() == 1) {\n        RoleType role=cRoles.iterator().next();\n        roleVarTypeMap.put(role,new Pair<>(var,type));\n        allocatedVars.add(var);\n        allocatedRoles.add(role);\n      }\n    }\n  }\n  Collection<RoleType> rolesToAllocate=relType.hasRoles();\n  rolesToAllocate.removeAll(allocatedRoles);\n  varsToAllocate.removeAll(allocatedVars);\n  if (rolesToAllocate.size() == 1 && varsToAllocate.size() == 1) {\n    RoleType role=rolesToAllocate.iterator().next();\n    String var=varsToAllocate.iterator().next();\n    Type type=varTypeMap.get(var);\n    roleVarTypeMap.put(role,new Pair<>(var,type));\n  }\n  return roleVarTypeMap;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesCreateCommentQuery(VkApiClient client,UserActor actor,int noteId,String message){\n  super(client,\"notes.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n  message(message);\n}\n"}
{"nl": "Request text", "code": "public AppsSendRequestQuery text(String value){\n  return unsafeParam(\"text\",value);\n}\n"}
{"nl": "FireEvent back to JS", "code": "public void fireEvent(final String instanceId,String ref,String type,Map<String,Object> params){\n  fireEvent(instanceId,ref,type,params,null);\n}\n"}
{"nl": "convert string from slash style to camel style, such as a_b_c will convert to A_B_C", "code": "public static String dbStringToCamelStyle(String str){\n  if (str != null) {\n    StringBuilder sb=new StringBuilder();\n    sb.append(String.valueOf(str.charAt(0)).toUpperCase());\n    for (int i=1; i < str.length(); i++) {\n      char c=str.charAt(i);\n      if (c != '_') {\n        sb.append(c);\n      }\n else {\n        if (i + 1 < str.length()) {\n          sb.append(String.valueOf(str.charAt(i + 1)).toUpperCase());\n          i++;\n        }\n      }\n    }\n    return sb.toString();\n  }\n  return null;\n}\n"}
{"nl": "Start all core threads, causing them to idly wait for work", "code": "public void start(){\n  this.prestartAllCoreThreads();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getDoc().getNumberOfReads() > 0;\n}\n"}
{"nl": "Adds user activity information to an application", "code": "public SecureAddAppEventQuery addAppEvent(ServiceActor actor,int userId,int activityId){\n  return new SecureAddAppEventQuery(getClient(),actor,userId,activityId);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public Object clone(){\n  try {\n    CompactCharArray other=(CompactCharArray)super.clone();\n    other.values=((char[])this.values.clone());\n    other.indices=((char[])this.indices.clone());\n    if (this.hashes != null)     other.hashes=((int[])this.hashes.clone());\n    return other;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new IllegalStateException();\n  }\n}\n"}
{"nl": "Swap two items in the heap", "code": "private void swap(Item item1,Item item2){\n  int idx1=item1.idx;\n  int idx2=item2.idx;\n  heap.set(idx2,item1);\n  heap.set(idx1,item2);\n  item1.idx=idx2;\n  item2.idx=idx1;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetClientsQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getClients\",Utils.buildParametrizedType(List.class,Client.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n"}
{"nl": "Utility method computing the size of the widget if dimensions are set to wrap_content, using the default font", "code": "protected void wrapContent(){\n  mWidget.setMinWidth(100);\n  mWidget.setMinHeight(30);\n  int tw=mWidget.getMinWidth();\n  int th=mWidget.getMinHeight();\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setWidth(tw);\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setHeight(th);\n  }\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getWidth() <= mWidget.getMinWidth()) {\n      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getHeight() <= mWidget.getMinHeight()) {\n      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  mWidget.setBaselineDistance(0);\n}\n"}
{"nl": "returns the first n values", "code": "public String toString(long n){\n  StringBuilder buf=new StringBuilder();\n  for (long i=0; i < Math.min(n,length()); i++) {\n    buf.append(\" \").append(get(i));\n  }\n  return buf.toString();\n}\n"}
{"nl": "Constructs a new Token highlighter", "code": "public TokenMarker(){\n}\n"}
{"nl": "Removes the build file value identified by the given key", "code": "static void removeValueStatic(@NotNull GrStatementOwner root,@NotNull BuildFileKey key){\n  GrMethodCall method=getMethodCallByPath(root,key.getPath());\n  if (method != null) {\n    method.delete();\n  }\n}\n"}
{"nl": "Given a query and what page of results we are on return the matching results for that search", "code": "public SearchResult search(String queryString,int page){\n  SearchResult searchResult=new SearchResult();\n  statsService.incrementSearchCount();\n  try {\n    IndexReader reader=DirectoryReader.open(FSDirectory.open(Paths.get(this.INDEXPATH)));\n    IndexSearcher searcher=new IndexSearcher(reader);\n    Analyzer analyzer=new CodeAnalyzer();\n    QueryParser parser=new QueryParser(CODEFIELD,analyzer);\n    Query query=parser.parse(queryString);\n    LOGGER.info(\"Searching for: \" + query.toString(CODEFIELD));\n    LOGGER.searchLog(query.toString(CODEFIELD) + \" \" + page);\n    searchResult=this.doPagingSearch(reader,searcher,query,page);\n    reader.close();\n  }\n catch (  Exception ex) {\n    LOGGER.warning(\" caught a \" + ex.getClass() + \"\\n with message: \"+ ex.getMessage());\n  }\n  return searchResult;\n}\n"}
{"nl": "Remove the specified class loader", "code": "public void removeClassLoader(ClassLoader classLoader){\n  if (_logger.isLoggable(Level.FINE))   _logger.fine(\"removing class loader from cache [\" + ClassLoaderHelper.getClassLoaderLogName(classLoader) + \"]\");\n  Long removedClassLoadedId=_classLoaderToIdMap.remove(classLoader);\n  if (removedClassLoadedId != null) {\n    ClassLoaderContext removedContext=_classLoaders.put(removedClassLoadedId,new ClassLoaderContext(null,Represent.REMOVED_EXPLICIT));\n    if (removedContext.getRepresents() == Represent.REMOVED_EXPLICIT || removedContext.getRepresents() == Represent.REMOVED_IMPLICIT)     return;\n    dispatchClassLoaderRemovedEvent(removedClassLoadedId,removedContext,true);\n  }\n else {\n    _logger.fine(\"class loader [\" + ClassLoaderHelper.getClassLoaderLogName(classLoader) + \"] is not present in cache\");\n  }\n}\n"}
{"nl": "Constructs a new IntrospectorPropertyResolver which includes public fields as properties", "code": "public IntrospectorPropertyResolver(){\n  super(true);\n}\n"}
{"nl": "For checking the DeadEvent", "code": "@Override public boolean hasObservers(){\n  return hasObservers;\n}\n"}
{"nl": "Check if geometry field name is valid", "code": "private static boolean validGeometryFieldName(Expression geometryField){\n  return ((geometryField != null) && (geometryField.toString() != null) && !geometryField.toString().trim().isEmpty());\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof ChartViewer && ((ChartViewer)getViewer()).getChartDrawer() instanceof BarChartDrawer;\n}\n"}
{"nl": "Set user ids", "code": "protected SecureGetUserLevelQuery userIds(List<Integer> value){\n  return unsafeParam(\"user_ids\",value);\n}\n"}
{"nl": "read a query and its matches", "code": "public Pair<DAAQueryRecord,DAAMatchRecord[]> readQueryAndMatches(InputReaderLittleEndian ins,InputReaderLittleEndian refIns,int maxMatchesPerRead,ByteInputBuffer inputBuffer,DAAMatchRecord[] matchRecords) throws IOException {\n  final DAAQueryRecord queryRecord=new DAAQueryRecord(this);\n  if (inputBuffer == null)   inputBuffer=new ByteInputBuffer();\n else   inputBuffer.rewind();\n  if (matchRecords == null)   matchRecords=new DAAMatchRecord[maxMatchesPerRead];\n  queryRecord.setLocation(ins.getPosition());\n  ins.readSizePrefixedBytes(inputBuffer);\n  queryRecord.parseBuffer(inputBuffer);\n  int numberOfMatches=0;\n  while (inputBuffer.getPosition() < inputBuffer.size()) {\n    DAAMatchRecord matchRecord=new DAAMatchRecord(queryRecord);\n    matchRecord.parseBuffer(inputBuffer,refIns);\n    if (numberOfMatches < maxMatchesPerRead)     matchRecords[numberOfMatches++]=matchRecord;\n else     break;\n  }\n  if (numberOfMatches > 0) {\n    DAAMatchRecord[] usedMatchRecords=new DAAMatchRecord[numberOfMatches];\n    System.arraycopy(matchRecords,0,usedMatchRecords,0,numberOfMatches);\n    return new Pair<>(queryRecord,usedMatchRecords);\n  }\n else   return new Pair<>(queryRecord,new DAAMatchRecord[0]);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsDeleteTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,int targetGroupId){\n  super(client,\"ads.deleteTargetGroup\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  targetGroupId(targetGroupId);\n}\n"}
{"nl": "Verifies if the content could not be retrieved", "code": "public boolean isNull(){\n  return !sourceContent.isSuccess() && extendedTrim(sourceContent.getHtmlCode()).equals(\"\") && !isImage(sourceContent.getFinalUrl());\n}\n"}
{"nl": "Return additional fields", "code": "protected PhotosGetByIdQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Showing google speech input dialog", "code": "private void promptSpeechInput(){\n  Intent intent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);\n  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE,Locale.getDefault());\n  intent.putExtra(RecognizerIntent.EXTRA_PROMPT,getString(R.string.speech_prompt));\n  try {\n    startActivityForResult(intent,REQ_CODE_SPEECH_INPUT);\n  }\n catch (  ActivityNotFoundException a) {\n    Toast.makeText(getApplicationContext(),getString(R.string.speech_not_supported),Toast.LENGTH_SHORT).show();\n  }\n}\n"}
{"nl": "Constructs a UnitType from the given parameters", "code": "UnitType(String name,int start,int count){\n  this.name=name;\n  this.start=start;\n  this.count=count;\n}\n"}
{"nl": "Set the get request to only return keys", "code": "public Builder withKeysOnly(boolean keysOnly){\n  this.keysOnly=keysOnly;\n  return this;\n}\n"}
{"nl": "The key is the docID/line number and the value is the doc", "code": "@Override public void map(Text key,MapWritable value,Context ctx) throws IOException, InterruptedException {\n  logger.debug(\"key = \" + key.toString());\n  logger.debug(\"value: \" + StringUtils.mapWritableToString(value));\n  boolean passFilter=true;\n  if (filter != null) {\n    passFilter=((DataFilter)filter).filterDataElement(value,dSchema);\n  }\n  if (passFilter) {\n    Tuple2<Integer,BytesArrayWritable> returnTuple;\n    try {\n      returnTuple=HashSelectorAndPartitionData.hashSelectorAndFormPartitions(value,qSchema,dSchema,queryInfo);\n    }\n catch (    Exception e) {\n      logger.error(\"Error in partitioning data element value = \" + StringUtils.mapWritableToString(value));\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n    keyOut.set(returnTuple._1);\n    ctx.write(keyOut,returnTuple._2);\n  }\n}\n"}
{"nl": "Constructs an EntryArrivedPacket", "code": "public EntryUnmatchedPacket(OperationID operationID,IEntryHolder originalEntryHolder,IEntryHolder newEntryHolder,ServerTransaction xtn,boolean fromReplication){\n  super(operationID,originalEntryHolder,xtn,0);\n  _newEntryHolder=newEntryHolder;\n  _fromReplication=fromReplication;\n}\n"}
{"nl": "Returns true if legion is in cached by id", "code": "public boolean containsEx(int memberObjId){\n  return legionMemberExById.containsKey(memberObjId);\n}\n"}
{"nl": "is a selection find possible", "code": "public boolean isSelectionFindable(){\n  return classificationViewer.getSelectedNodes().size() > 0;\n}\n"}
{"nl": "Used where registering item", "code": "public BrokerItem(Item item,long price,String seller,int sellerId,BrokerRace itemBrokerRace,boolean partSale){\n  this.item=item;\n  this.itemId=item.getItemTemplate().getTemplateId();\n  this.itemUniqueId=item.getObjectId();\n  this.itemCount=item.getItemCount();\n  this.itemCreator=item.getItemCreator();\n  this.price=price;\n  this.seller=seller;\n  this.sellerId=sellerId;\n  this.itemBrokerRace=itemBrokerRace;\n  this.isSold=false;\n  this.isSettled=false;\n  this.expireTime=new Timestamp(Calendar.getInstance().getTimeInMillis() + 691200000);\n  this.settleTime=new Timestamp(Calendar.getInstance().getTimeInMillis());\n  this.partSale=partSale;\n  this.state=PersistentState.NEW;\n}\n"}
{"nl": "Checks whether the given base value matches the base of the given taint abstraction", "code": "protected boolean baseMatches(final Value baseValue,Abstraction source){\n  if (baseValue instanceof Local) {\n    if (baseValue.equals(source.getAccessPath().getPlainValue()))     return true;\n  }\n else   if (baseValue instanceof InstanceFieldRef) {\n    InstanceFieldRef ifr=(InstanceFieldRef)baseValue;\n    if (ifr.getBase().equals(source.getAccessPath().getPlainValue()) && source.getAccessPath().firstFieldMatches(ifr.getField()))     return true;\n  }\n else   if (baseValue instanceof StaticFieldRef) {\n    StaticFieldRef sfr=(StaticFieldRef)baseValue;\n    if (source.getAccessPath().firstFieldMatches(sfr.getField()))     return true;\n  }\n  return false;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoSearchQueryWithExtended(VkApiClient client,UserActor actor,String q){\n  super(client,\"video.search\",SearchExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  q(q);\n  extended(true);\n}\n"}
{"nl": "Change to guard mode", "code": "public void guardMode(){\n  SummonsService.guardMode(getOwner());\n}\n"}
{"nl": "Bans ip or mask for infinite period of time", "code": "public static boolean banIp(String ip){\n  return banIp(ip,null);\n}\n"}
{"nl": "Set the type", "code": "public Builder type(final java.lang.reflect.Type type){\n  this.propertyType=TypeFactory.valueOf(type);\n  return this;\n}\n"}
{"nl": "Make a POST call with a JSON body", "code": "public Call postWithJsonBody(String url,JSONObject params,Callback callback){\n  MediaType JSON=MediaType.parse(\"application/json; charset=utf-8\");\n  RequestBody body=RequestBody.create(JSON,params.toString());\n  Request request=new Builder().url(url).post(body).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n"}
{"nl": "is document dirty", "code": "public boolean isDirty(){\n  return dirty;\n}\n"}
{"nl": "Set search own", "code": "public AudioSearchQuery searchOwn(Boolean value){\n  return unsafeParam(\"search_own\",value);\n}\n"}
{"nl": "Set user id", "code": "public FriendsGetListsQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Removes the given entry from the pool", "code": "private Grammar removeEntry(Entry entry){\n  if (entry.prev != null) {\n    entry.prev.next=entry.next;\n  }\n else {\n    fGrammars[entry.bucket]=entry.next;\n  }\n  if (entry.next != null) {\n    entry.next.prev=entry.prev;\n  }\n  --fGrammarCount;\n  entry.grammar.entry=null;\n  return (Grammar)entry.grammar.get();\n}\n"}
{"nl": "Construct an instance of the JMXConnection, with all fields initialized", "code": "public JMXConnection(String jmxServiceURL,String name){\n  this.jmxServiceURL=jmxServiceURL;\n  this.name=name;\n}\n"}
{"nl": "Checks if the given method throws the given exception", "code": "private static boolean throwsException(IMethod method,Class<?> exceptionClass){\n  Class<?>[] exceptionClasses=method.getExceptionTypes();\n  for (  Class<?> c : exceptionClasses) {\n    if (exceptionClass.isAssignableFrom(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Connects to the teamspeak server", "code": "public static void clickButtonTeamspeakConnect(){\n  RewiMod.getInstance().openUrl(\"ts3server://rewinside.tv\");\n}\n"}
{"nl": "This returns the determination coefficient of two vectors given a length", "code": "public static double determinationCoefficient(double[] y1,double[] y2,int n){\n  return Math.pow(correlation(y1,y2),2);\n}\n"}
{"nl": "Creates and edits user newsfeed lists", "code": "public NewsfeedSaveListQuery saveList(UserActor actor,String title){\n  return new NewsfeedSaveListQuery(getClient(),actor,title);\n}\n"}
{"nl": "Set album ids", "code": "public VideoRemoveFromAlbumQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "Paints a constraint cycle", "code": "private static void paintCycle(GuidelineHandler myState,NlGraphics g,List<Constraint> cycle){\n  assert cycle.size() > 0;\n  NlComponent from=cycle.get(0).from.node;\n  assert from != null;\n  Rectangle fromBounds=new Rectangle(from.x,from.y,from.w,from.h);\n  if (myState.myDraggedNodes.contains(from)) {\n    fromBounds=myState.myBounds;\n  }\n  Point fromCenter=center(fromBounds);\n  List<Point> points=new ArrayList<Point>();\n  points.add(fromCenter);\n  for (  Constraint constraint : cycle) {\n    assert constraint.from.node == from;\n    NlComponent to=constraint.to.node;\n    assert to != null;\n    Point toCenter=new Point(to.x + to.w / 2,to.y + to.h / 2);\n    points.add(toCenter);\n    boolean isDragged=myState.myDraggedNodes.contains(to);\n    if (isDragged) {\n      toCenter=center(myState.myBounds);\n      points.add(toCenter);\n    }\n    from=to;\n    fromCenter=toCenter;\n  }\n  points.add(fromCenter);\n  points.add(points.get(0));\n  g.useStyle(CYCLE);\n  for (int i=1, n=points.size(); i < n; i++) {\n    Point a=points.get(i - 1);\n    Point b=points.get(i);\n    g.drawLine(a.x,a.y,b.x,b.y);\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  final Document doc=((MainViewer)getDir().getMainViewer()).getDocument();\n  return doc.getNumberOfReads() > 0;\n}\n"}
{"nl": "Collections ids to remove item from", "code": "protected MarketRemoveFromAlbumQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "rescan the matrix searcher", "code": "public void updateMatrixSearcher(){\n  updateCurrent();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof SamplesViewer;\n}\n"}
{"nl": "Convert a String column (containing a date/time String) to a time column (by parsing the date/time String)", "code": "public Builder stringToTimeTransform(String column,String format,DateTimeZone dateTimeZone){\n  return transform(new StringToTimeTransform(column,format,dateTimeZone));\n}\n"}
{"nl": "return Pearson's correlation coefficient", "code": "private float computeCorrelationCoefficent(String classNameX,String attributeNameY){\n  ArrayList<Double> xValues=new ArrayList<>(getChartData().getSeriesNames().size());\n  ArrayList<Double> yValues=new ArrayList<>(getChartData().getSeriesNames().size());\n  for (  String sample : getChartData().getSeriesNames()) {\n    final double x=getChartData().getValueAsDouble(sample,classNameX);\n    final double y;\n    Object obj=viewer.getDir().getDocument().getSampleAttributeTable().get(sample,attributeNameY);\n    if (obj instanceof Number)     y=((Number)obj).doubleValue();\n else     throw new IllegalArgumentException(\"Attribute '\" + attributeNameY + \"': has non-numerical value: \"+ obj);\n    xValues.add(x);\n    yValues.add(y);\n  }\n  return (float)Correlation.computePersonsCorrelationCoefficent(xValues.size(),xValues,yValues);\n}\n"}
{"nl": "load a matrix", "code": "public void load(Reader r0) throws IOException {\n  BufferedReader r=new BufferedReader(r0);\n  char[] mapPos2Char=null;\n  String aLine;\n  int cols=0;\n  while ((aLine=r.readLine()) != null) {\n    aLine=aLine.trim();\n    if (aLine.length() == 0 || aLine.startsWith(\"#\"))     continue;\n    if (mapPos2Char == null) {\n      String[] tokens=aLine.split(\" \");\n      cols=tokens.length;\n      if (tokens.length < 20)       throw new IOException(\"Expected >=20 tokens, got: \" + tokens.length + \" in line: \"+ aLine);\n      List<String> list=new LinkedList<>();\n      list.addAll(Arrays.asList(tokens));\n      int count=0;\n      mapPos2Char=new char[list.size()];\n      for (      String label : list) {\n        char c=Character.toUpperCase(label.charAt(0));\n        mapPos2Char[count++]=c;\n      }\n    }\n else {\n      String[] tokens=aLine.split(\" \");\n      if (tokens.length != cols + 1)       throw new IOException(\"Expected \" + (cols + 1) + \" tokens, got: \"+ tokens.length+ \" in line: \"+ aLine);\n      char c=Character.toUpperCase(tokens[0].charAt(0));\n      for (int i=1; i < tokens.length; i++) {\n        int value=Integer.parseInt(tokens[i]);\n        char d=mapPos2Char[i - 1];\n        matrix[c][d]=value;\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Writes a string to the buffer", "code": "public static void writeString(PacketBuffer buf,String value){\n  buf.writeInt(value.length());\n  buf.writeString(value);\n}\n"}
{"nl": "Cover photo id", "code": "public MarketEditAlbumQuery photoId(Integer value){\n  return unsafeParam(\"photo_id\",value);\n}\n"}
{"nl": "Verifies that traffic log contains at least one entry matching the TrafficLogPredicate", "code": "public void assertContains(TrafficLogPredicate query){\n  assertThat(trafficLogProvider.get(),new TrafficLogContains(query.getPredicates()));\n}\n"}
{"nl": "Reset the currentLowThreshold to tbe original lowThreshold value", "code": "public void resetLowThreshold(){\n  this.currentLowThreshold=lowThreshold;\n}\n"}
{"nl": "Create a new Webster", "code": "public Webster(String roots) throws BindException {\n  this.port=Integer.getInteger(WEBSTER_PORT,0);\n  initialize(roots);\n}\n"}
{"nl": "Session listener", "code": "@Override public void onConnected(Session session){\n  startPublishing();\n}\n"}
{"nl": "load the id 2 name mapping", "code": "public void loadAttributeData(String fileName) throws IOException {\n  InputStream ins=ResourceManager.getFileAsStream(fileName);\n  loadAttributeData(ins);\n  ins.close();\n}\n"}
{"nl": "decompresses an array of bytes to a string", "code": "public String inflateByteArray2String(int numberOfBytes,byte[] bytes) throws DataFormatException {\n  if (numberOfBytes == 0)   return \"\";\n  if (numberOfBytes < 0) {\n    try {\n      return new String(bytes,0,-numberOfBytes,\"UTF-8\");\n    }\n catch (    UnsupportedEncodingException e) {\n      StringBuilder buf=new StringBuilder();\n      for (int i=0; i < -numberOfBytes; i++)       buf.append((char)bytes[i]);\n      return buf.toString();\n    }\n  }\n  inflater.setInput(bytes,0,numberOfBytes);\n  if (buffer.length < 10 * bytes.length)   buffer=new byte[10 * bytes.length];\n  int resultLength=inflater.inflate(buffer);\n  String outputString;\n  try {\n    outputString=new String(buffer,0,resultLength,\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException e) {\n    StringBuilder buf=new StringBuilder();\n    for (int i=0; i < resultLength; i++)     buf.append((char)buffer[i]);\n    outputString=buf.toString();\n  }\n  inflater.reset();\n  return outputString;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesAddChatUserQuery(VkApiClient client,UserActor actor,int chatId,int userId){\n  super(client,\"messages.addChatUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  chatId(chatId);\n  userId(userId);\n}\n"}
{"nl": "Set no comments", "code": "public VideoSaveQuery noComments(Boolean value){\n  return unsafeParam(\"no_comments\",value);\n}\n"}
{"nl": "This method checks if specified component is present selected group in Sidekick", "code": "public boolean isComponentPresent(String componentName,String groupName){\n  if (isComponentGroupPresent(groupName)) {\n    if (!SidekickActions.isSectionExpanded(getSectionByName(groupName))) {\n      clickComponentGroupToggle(groupName);\n    }\n    return getComponentNames(groupName).contains(componentName);\n  }\n  throw new IllegalArgumentException(\"Group name \" + groupName + \" does not exist\");\n}\n"}
{"nl": "Migrate a column as a resource type", "code": "private Collection<Var> migrateAsResource(String ownerType,ResourceType.DataType columnType,String columnName){\n  String resourceName=namer.resourceName(ownerType,columnName);\n  Var resourceType=var().id(resourceName).datatype(columnType).isa(\"resource-type\");\n  Var hasResource=var().id(ownerType).hasResource(resourceName);\n  return Lists.newArrayList(resourceType,hasResource);\n}\n"}
{"nl": "Returns true if this margin is empty", "code": "public boolean isEmpty(){\n  return this == NONE || (left == 0 && top == 0 && right == 0 && bottom == 0);\n}\n"}
{"nl": "Checks if player is brigade general and returns message if not", "code": "private boolean isBrigadeGeneral(Player player){\n  return player.getLegionMember().isBrigadeGeneral();\n}\n"}
{"nl": "compute the Jensen-Shannon divergence", "code": "private static double computeJSD(double[] px,double[] py){\n  double[] m=computeMean(px,py);\n  return 0.5 * (computeKLD(px,m) + computeKLD(py,m));\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  final String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && (firstLine.contains(\" vs \") || firstLine.contains(\"NO HIT\"));\n}\n"}
{"nl": "set select state of all objects", "code": "public void selectAll(boolean select){\n  classificationViewer.selectAllNodes(select);\n  classificationViewer.repaint();\n}\n"}
{"nl": "Add new user", "code": "@Override public long addUser(User user){\n  return sessionTemplate.insert(NAMESPACE + \".addUser\",user);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountUnbanUserQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"account.unbanUser\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "Create the list of targets from the segments to be synthesized Prepend and append pauses if necessary", "code": "public static List<Target> createTargetsWithPauses(List<Element> segmentsAndBoundaries,String silenceSymbol){\n  List<Target> targets=new ArrayList<Target>();\n  if (segmentsAndBoundaries.size() == 0)   return targets;\n  Element last=segmentsAndBoundaries.get(segmentsAndBoundaries.size() - 1);\n  if (!last.getTagName().equals(MaryXML.BOUNDARY)) {\n    Element finalPause=MaryXML.createElement(last.getOwnerDocument(),MaryXML.BOUNDARY);\n    Element token=(Element)DomUtils.getAncestor(last,MaryXML.TOKEN);\n    Element parent=(Element)token.getParentNode();\n    parent.appendChild(finalPause);\n    segmentsAndBoundaries.add(finalPause);\n  }\n  for (  Element sOrB : segmentsAndBoundaries) {\n    String phone=UnitSelector.getPhoneSymbol(sOrB);\n    targets.add(new HalfPhoneTarget(phone + \"_L\",sOrB,true));\n    targets.add(new HalfPhoneTarget(phone + \"_R\",sOrB,false));\n  }\n  return targets;\n}\n"}
{"nl": "Creates a new instance of INSECTDocumentGraph", "code": "public DocumentNGramGaussNormSymWinGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){\n  MinSize=iMinSize;\n  MaxSize=iMaxSize;\n  CorrelationWindow=iCorrelationWindow;\n  InitGraphs();\n}\n"}
{"nl": "Returns the calculated hashCode", "code": "@Override public int hashCode(){\n  return _hashCode;\n}\n"}
{"nl": "Utility method that implements Data Binding's logic to convert a file name to a Java Class name", "code": "public static String convertToJavaClassName(String name){\n  int dotIndex=name.indexOf('.');\n  if (dotIndex >= 0) {\n    name=name.substring(0,dotIndex);\n  }\n  String[] split=name.split(\"[_-]\");\n  StringBuilder out=new StringBuilder();\n  for (  String section : split) {\n    out.append(StringUtil.capitalize(section));\n  }\n  return out.toString();\n}\n"}
{"nl": "Get a flight status based on a Point and Radius based flight", "code": "public static Call checkCoordinate(Coordinate coordinate,@Nullable Double buffer,@Nullable List<MappingService.AirMapAirspaceType> types,@Nullable List<MappingService.AirMapAirspaceType> ignoredTypes,boolean showWeather,@Nullable Date date,@Nullable AirMapCallback<AirMapStatus> callback){\n  return StatusService.checkCoordinate(coordinate,buffer,types,ignoredTypes,showWeather,date,callback);\n}\n"}
{"nl": "Creates a folder inside the drop folder", "code": "public BoxFolder createFolderUnderRoot(String folderName) throws BoxSDKServiceException {\n  return createFolder(folderName,getBoxSDKServiceConfig().getRootFolderId());\n}\n"}
{"nl": "create Router by url", "code": "public static Router create(String url){\n  return new Router(Uri.parse(url));\n}\n"}
{"nl": "Start the initialisation from a specific stage", "code": "public void startInitialisation(ZWaveNodeInitStage startStage){\n  logger.debug(\"NODE {}: Starting initialisation from {}\",node.getNodeId(),startStage);\n  currentStage=startStage;\n  queryStageTimeStamp=Calendar.getInstance().getTime();\n  retryTimer=BACKOFF_TIMER_START;\n  wakeupCount=0;\n  controller.addEventListener(this);\n  advanceNodeStage(null);\n}\n"}
{"nl": "Set the get request to only return count of the keys", "code": "public Builder withCountOnly(boolean countOnly){\n  this.countOnly=countOnly;\n  return this;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public String toString(){\n  return toString(0,this.items.size());\n}\n"}
{"nl": "Run event runnable inside a different thread", "code": "public EventBuilder async(){\n  this.event.setAsync(true);\n  return this;\n}\n"}
{"nl": "Clicks the specified button in current document at the current caret position", "code": "protected final void pressButton(final String action){\n  CommandProcessor.getInstance().executeCommand(getProject(),null,\"\",null);\n}\n"}
{"nl": "parse a full image name (myhost:300/namespace/repo:tag) into its components", "code": "public static DockerImage fromImageName(String imageName){\n  imageName=prepare(imageName);\n  String[] parts=imageName.split(SECTION_SEPARATOR);\nswitch (parts.length) {\ncase 1:\n    return fromParts(null,null,parts[0]);\ncase 2:\n  if (isValidNamespace(parts[0])) {\n    return fromParts(null,parts[0],parts[1]);\n  }\n else {\n    return fromParts(parts[0],null,parts[1]);\n  }\ncase 3:\nreturn fromParts(parts[0],parts[1],parts[2]);\ndefault :\nthrow new IllegalArgumentException(\"Invalid image format: \" + imageName);\n}\n}\n"}
{"nl": "Reset OAuth authentication fields of external system entity", "code": "private static ExternalSystem resetOAuthFields(ExternalSystem input){\n  input.setAccessKey(null);\n  return input;\n}\n"}
{"nl": "Adds a language limit to the query", "code": "public void addLanguage(Long languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n"}
{"nl": "Disable the Safe Search filter", "code": "public VideoSearchQuery adult(Boolean value){\n  return unsafeParam(\"adult\",value);\n}\n"}
{"nl": "select series or classes", "code": "private void select(Rectangle rect,Rectangle selectionRect,int mouseClicks){\n  if (selectionRect == null || chartSelection == null || mouseClicks != 1)   return;\n  selectionGraphics.setSelectionRectangle(selectionRect);\n  selectionGraphics.getSelectedItems().clear();\n  doPaint(selectionGraphics,rect);\n  final Collection<Edge> hitEdges=selectionGraphics.getSelectedItems();\n  if (hitEdges.size() > 0) {\n    final Set<Node> seen=new HashSet<>();\n    final Stack<Node> stack=new Stack<>();\n    for (    Edge e : hitEdges) {\n      stack.add(e.getTarget());\n    }\n    while (stack.size() > 0) {\n      final Node v=stack.pop();\n      if (v.getOutDegree() == 0) {\n        if (type == TYPE.SERIES)         chartSelection.setSelectedSeries(treeView.getLabel(v),true);\n else         if (type == TYPE.CLASSES)         chartSelection.setSelectedClass(treeView.getLabel(v),true);\n else         if (type == TYPE.ATTRIBUTES)         chartSelection.setSelectedAttribute(treeView.getLabel(v),true);\n      }\n else {\n        for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n          if (!seen.contains(e.getTarget())) {\n            stack.push(e.getTarget());\n            seen.add(e.getTarget());\n          }\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "share more", "code": "protected void shareBySystem(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SYSTEM,getShareData(ShareConstant.SHARE_CHANNEL_SYSTEM),ShareConstant.REQUEST_CODE);\n}\n"}
{"nl": "Called when the matching search is over", "code": "public void finishTemplatesSearch(NotifyContext notifyContext){\n  decreaseCounter(notifyContext);\n  _backupLog.clearTriggered(notifyContext.getOperationId());\n}\n"}
{"nl": "This method will handle the changement of a nickname", "code": "private void changeNickname(Player activePlayer,String charName,String newNickname){\n  Legion legion=activePlayer.getLegion();\n  LegionMember legionMember;\n  Player targetPlayer;\n  if ((targetPlayer=World.getInstance().findPlayer(charName)) != null) {\n    legionMember=targetPlayer.getLegionMember();\n    if (targetPlayer.getLegion() != legion) {\n      return;\n    }\n  }\n else {\n    LegionMemberEx LM=getLegionMemberEx(charName);\n    if (LM == null || LM.getLegion() != legion) {\n      return;\n    }\n    legionMember=getLegionMember(LM.getObjectId());\n  }\n  if (legionRestrictions.canChangeNickname(legion,legionMember.getObjectId(),newNickname)) {\n    legionMember.setNickname(newNickname);\n    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_UPDATE_NICKNAME(legionMember.getObjectId(),newNickname));\n    if (targetPlayer == null) {\n      DAOManager.getDAO(LegionMemberDAO.class).storeLegionMember(legionMember.getObjectId(),legionMember);\n    }\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  return viewer != null;\n}\n"}
{"nl": "Set votes", "code": "protected OrdersGetAmountQuery votes(List<String> value){\n  return unsafeParam(\"votes\",value);\n}\n"}
{"nl": "Creates a new instance of INSECTDocumentGraph", "code": "public DocumentNGramGraph(){\n  InitGraphs();\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"close what=others;\");\n}\n"}
{"nl": "Returns true if we want to arrange screens vertically instead of horizontally", "code": "private static boolean isVerticalScreenConfig(int availableWidth,int availableHeight,@NotNull Dimension preferredSize){\n  boolean stackVertically=preferredSize.width > preferredSize.height;\n  if (availableWidth > 10 && availableHeight > 3 * availableWidth / 2) {\n    stackVertically=true;\n  }\n  return stackVertically;\n}\n"}
{"nl": "Zip a file", "code": "public static void unZipFile(String zipFile,String outputFolder){\n  byte[] buffer=new byte[1024];\n  try {\n    File folder=new File(outputFolder);\n    if (!folder.exists()) {\n      folder.mkdir();\n    }\n    ZipInputStream zipInputStream=new ZipInputStream(new FileInputStream(zipFile));\n    ZipEntry zipEntry=zipInputStream.getNextEntry();\n    while (zipEntry != null) {\n      String fileName=zipEntry.getName();\n      File newFile=new File(FileUtility.joinPath(outputFolder,fileName));\n      System.out.println(\"file unzip : \" + newFile.getAbsoluteFile());\n      new File(newFile.getParent()).mkdirs();\n      FileOutputStream fileOutputStream=new FileOutputStream(newFile);\n      int length;\n      while ((length=zipInputStream.read(buffer)) > 0) {\n        fileOutputStream.write(buffer,0,length);\n      }\n      fileOutputStream.close();\n      zipEntry=zipInputStream.getNextEntry();\n    }\n    zipInputStream.closeEntry();\n    zipInputStream.close();\n  }\n catch (  IOException ex) {\n    LOGGER.log(Level.WARNING,\"Unable to unzip file\",ex);\n  }\n}\n"}
{"nl": "assigns angles to all edges in the graph", "code": "private void assignAnglesToEdges(SplitSystem splits,int[] cycle,PhyloGraph graph,Set forbiddenSplits) throws NotOwnerException {\n  double[] TaxaAngles=new double[ntax + 1];\n  for (int t=1; t < ntax + 1; t++) {\n    TaxaAngles[t]=(Math.PI * 2 * t / (double)ntax);\n  }\n  double[] split2angle=new double[splits.size() + 1];\n  assignAnglesToSplits(TaxaAngles,split2angle,splits,cycle);\n  Iterator it=graph.edgeIterator();\n  while (it.hasNext()) {\n    Edge e=(Edge)it.next();\n    if (!forbiddenSplits.contains(new Integer(graph.getSplit(e)))) {\n      try {\n        graph.setAngle(e,split2angle[graph.getSplit(e)]);\n      }\n catch (      Exception ex) {\n      }\n    }\n  }\n}\n"}
{"nl": "read and compare 0-terminated bytes,", "code": "private int readAndCompareBytes0Terminated(byte[] key,int keyLength,long pos,ByteFileGetterMappedMemory byteBuffer) throws IOException {\n  int i=0;\n  boolean equal=true;\n  while (true) {\n    final byte b=(byte)byteBuffer.get(pos++);\n    if (b == 0)     break;\n    if (i < keyLength) {\n      if (equal && b != key[i]) {\n        equal=false;\n      }\n    }\n    i++;\n  }\n  return (equal && i == keyLength) ? i : -i;\n}\n"}
{"nl": "Item status", "code": "public MarketAddQuery deleted(Boolean value){\n  return unsafeParam(\"deleted\",value);\n}\n"}
{"nl": "Check if all transactions are finished", "code": "private boolean transactionsIsEmpty(){\n  return loadingJobs.get() + enqueuedJobs.get() == 0;\n}\n"}
{"nl": "New item will be displayed in storage", "code": "public static final void sendStorageUpdatePacket(Player player,StorageType storageType,Item item,ItemAddType addType){\nswitch (storageType) {\ncase CUBE:\n    PacketSendUtility.sendPacket(player,new SM_INVENTORY_ADD_ITEM(Collections.singletonList(item),player,addType));\n  break;\ncase LEGION_WAREHOUSE:\nif (item.getItemTemplate().isKinah()) {\n  PacketSendUtility.sendPacket(player,new SM_LEGION_EDIT(0x04,player.getLegion()));\n  break;\n}\ndefault :\nPacketSendUtility.sendPacket(player,new SM_WAREHOUSE_ADD_ITEM(item,storageType.getId(),player,addType));\n}\nPacketSendUtility.sendPacket(player,SM_CUBE_UPDATE.cubeSize(storageType,player));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,UserActor actor,String groupId,List<Integer> userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatusFull.class));\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  extended(true);\n  userIds(userIds);\n}\n"}
{"nl": "Converts a bearing into a compass direction", "code": "public String directionFromBearing(double bearing){\n  int index=(int)((bearing / 22.5) + 0.5) % 16;\n  return compassDirections[index];\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=diamond;\");\n}\n"}
{"nl": "Transform android pixels into Dp", "code": "public int pxToDp(@AndroidCoordinate int px){\n  return (int)(0.5f + px / myDpiFactor);\n}\n"}
{"nl": "built-in derived types by restriction", "code": "void applyFacets1(XSFacets facets,short presentFacet,short fixedFacet,short patternType){\n  try {\n    applyFacets(facets,presentFacet,fixedFacet,patternType,fDummyContext);\n  }\n catch (  InvalidDatatypeFacetException e) {\n    throw new RuntimeException(\"internal error\");\n  }\n  fIsImmutable=true;\n}\n"}
{"nl": "Adds an issue annotation on the given text container", "code": "private void addAnnotation(TextContainer textContainer,Issue issue){\n  TMTextUnitVariantCommentAnnotation tmTextUnitVariantCommentAnnotation=new TMTextUnitVariantCommentAnnotation();\n  tmTextUnitVariantCommentAnnotation.setCommentType(TMTextUnitVariantComment.Type.QUALITY_CHECK);\n  tmTextUnitVariantCommentAnnotation.setMessage(issue.getMessage());\n  tmTextUnitVariantCommentAnnotation.setSeverity(TMTextUnitVariantComment.Severity.WARNING);\n  new TMTextUnitVariantCommentAnnotations(textContainer).addAnnotation(tmTextUnitVariantCommentAnnotation);\n}\n"}
{"nl": "Draw the progress spinner", "code": "public void draw(Canvas c,RectF bounds){\n  final RectF arcBounds=mTempBounds;\n  arcBounds.set(bounds);\n  final float startAngle=(mStartTrim + mRotation) * 360;\n  final float endAngle=(mEndTrim + mRotation) * 360;\n  float sweepAngle=endAngle - startAngle;\n  mPaint.setColor(mColor);\n  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);\n  drawTriangle(c,startAngle,sweepAngle,bounds);\n}\n"}
{"nl": "Only called once, since the instance is retained across configuration changes", "code": "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setRetainInstance(true);\n}\n"}
{"nl": "Handle the last accepted step", "code": "public void handleStep(final FieldODEStateInterpolator<T> interpolator,final boolean isLast) throws MathIllegalStateException {\n  if (last == null) {\n    first=interpolator.getPreviousState();\n    last=first;\n    forward=interpolator.isForward();\n    if (!forward) {\n      h=-h;\n    }\n  }\n  T nextTime=(mode == StepNormalizerMode.INCREMENT) ? last.getTime().add(h) : last.getTime().getField().getZero().add((FastMath.floor(last.getTime().getReal() / h) + 1) * h);\n  if (mode == StepNormalizerMode.MULTIPLES && Precision.equals(nextTime.getReal(),last.getTime().getReal(),1)) {\n    nextTime=nextTime.add(h);\n  }\n  boolean nextInStep=isNextInStep(nextTime,interpolator);\n  while (nextInStep) {\n    doNormalizedStep(false);\n    last=interpolator.getInterpolatedState(nextTime);\n    nextTime=nextTime.add(h);\n    nextInStep=isNextInStep(nextTime,interpolator);\n  }\n  if (isLast) {\n    final boolean addLast=bounds.lastIncluded() && last.getTime().getReal() != interpolator.getCurrentState().getTime().getReal();\n    doNormalizedStep(!addLast);\n    if (addLast) {\n      last=interpolator.getCurrentState();\n      doNormalizedStep(true);\n    }\n  }\n}\n"}
{"nl": "Deserializes a payload from the request, handles JSON/XML payloads", "code": "protected T deserialize(HttpServletRequest request) throws IOException {\n  String type=request.getContentType();\n  type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;\n  if (request.getPathInfo().endsWith(\".json\")) {\n    type=MediaType.APPLICATION_JSON_VALUE;\n  }\n else   if (request.getPathInfo().endsWith(\".xml\")) {\n    type=MediaType.APPLICATION_XML_VALUE;\n  }\n  if (isCompatibleWith(type,MediaType.APPLICATION_JSON)) {\n    return renderService.fromJson(request.getInputStream(),getEntityClass());\n  }\n else   if (isCompatibleWith(type,MediaType.APPLICATION_XML)) {\n    return renderService.fromXml(request.getInputStream(),getEntityClass());\n  }\n  return null;\n}\n"}
{"nl": "record Page Start", "code": "public static void recordPageStart(Context context){\n  TcStatSdk.getInstance(context).recordPageStart(context);\n}\n"}
{"nl": "embed the tree", "code": "public static void embedTree(PhyloTreeView treeView){\n  treeView.removeAllInternalPoints();\n  Node root=treeView.getPhyloTree().getRoot();\n  if (root != null)   computeEmbeddingRec(treeView,root,null,0,0,true);\n  treeView.resetViews();\n  for (Node v=treeView.getPhyloTree().getFirstNode(); v != null; v=v.getNext()) {\n    treeView.setLabel(v,treeView.getPhyloTree().getLabel(v));\n    treeView.setLabelLayout(v,NodeView.EAST);\n  }\n  treeView.trans.setCoordinateRect(treeView.getBBox());\n  treeView.fitGraphToWindow();\n}\n"}
{"nl": "parses the given command and executes it", "code": "public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set select=\");\n  TimeSeriesViewer viewer=(TimeSeriesViewer)getViewer();\n  DataJTable dataJTable=viewer.getDataJTable();\n  if (np.peekMatchIgnoreCase(\"all\")) {\n    np.matchIgnoreCase(\"all\");\n    dataJTable.selectAll();\n  }\n else   if (np.peekMatchIgnoreCase(\"none\")) {\n    np.matchIgnoreCase(\"none\");\n    dataJTable.clearSelection();\n  }\n else   if (np.peekMatchIgnoreCase(\"name\")) {\n    np.matchIgnoreCase(\"name=\");\n    String name=np.getWordRespectCase();\n    dataJTable.select(name,true);\n  }\n  np.matchIgnoreCase(\";\");\n}\n"}
{"nl": "This method will divide the blocks among the nodes as per the data locality", "code": "public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos,int noOfNodesInput,List<String> activeNodes){\n  Map<String,List<Distributable>> nodeBlocksMap=new HashMap<String,List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);\n  List<NodeBlockRelation> flattenedList=new ArrayList<NodeBlockRelation>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);\n  Set<Distributable> uniqueBlocks=new HashSet<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);\n  Set<String> nodes=new HashSet<String>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);\n  createFlattenedListFromMap(blockInfos,flattenedList,uniqueBlocks,nodes);\n  int noofNodes=(-1 == noOfNodesInput) ? nodes.size() : noOfNodesInput;\n  if (null != activeNodes) {\n    noofNodes=activeNodes.size();\n  }\n  int blocksPerNode=blockInfos.size() / noofNodes;\n  blocksPerNode=blocksPerNode <= 0 ? 1 : blocksPerNode;\n  Collections.sort(flattenedList);\n  Map<String,List<Distributable>> nodeAndBlockMapping=new LinkedHashMap<String,List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);\n  createNodeVsBlockMapping(flattenedList,nodeAndBlockMapping);\n  createOutputMap(nodeBlocksMap,blocksPerNode,uniqueBlocks,nodeAndBlockMapping,activeNodes);\n  assignLeftOverBlocks(nodeBlocksMap,uniqueBlocks,blocksPerNode,activeNodes);\n  return nodeBlocksMap;\n}\n"}
{"nl": "Initialize the toolbar in the layout", "code": "@Override protected void initToolbar(Bundle savedInstanceState){\n}\n"}
{"nl": "load a named classification block", "code": "public static IClassificationBlock loadClassification(DAAHeader daaHeader,String classificationName) throws IOException {\n  for (int i=0; i < daaHeader.getBlockTypeRankArrayLength() - 1; i++) {\n    if (daaHeader.getBlockType(i) == BlockType.megan_classification_key_block) {\n      long keyBase=daaHeader.computeBlockStart(i);\n      try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileRandomAccessReadOnlyAdapter(daaHeader.getFileName()))){\n        ins.seek(keyBase);\n        String cName=ins.readNullTerminatedBytes();\n        if (cName.equalsIgnoreCase(classificationName)) {\n          final ClassificationBlockDAA classificationBlock=new ClassificationBlockDAA(classificationName);\n          int numberOfClasses=ins.readInt();\n          for (int c=0; c < numberOfClasses; c++) {\n            int classId=ins.readInt();\n            classificationBlock.setSum(classId,ins.readInt());\n            ins.skipBytes(12);\n          }\n          return classificationBlock;\n        }\n      }\n     }\n  }\n  return null;\n}\n"}
{"nl": "Check if user is loggedIn", "code": "public boolean isLoggedIn(){\n  AccessToken accessToken=getAccessToken();\n  return accessToken != null && !accessToken.isExpired();\n}\n"}
{"nl": "Initialise contrast subfilter", "code": "public ContrastSubfilter(float contrast){\n  this.contrast=contrast;\n}\n"}
{"nl": "Creates the channel selection object", "code": "private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){\n  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());\n  FilterFactory ff=CommonFactoryFinder.getFilterFactory();\n  Map<String,Expression> options=contrastEnhancement.getOptions();\n  options.put(\"algorithm\",ff.literal(\"StretchToMinimumMaximum\"));\n  options.put(\"minValue\",ff.literal(\"1\"));\n  options.put(\"maxValue\",ff.literal(\"5\"));\n  SelectedChannelType channelType=styleFactory.createSelectedChannelType(\"channel name\",contrastEnhancement);\n  SelectedChannelType[] channels=new SelectedChannelType[3];\n  channels[0]=channelType;\n  channels[1]=channelType;\n  channels[2]=channelType;\n  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);\n  return channelSelection;\n}\n"}
{"nl": "Import source text units into the TM", "code": "protected void handleSourceTextUnit(ITextUnit textUnit){\n  if (!textUnit.isTranslatable()) {\n    return;\n  }\n  String name=textUnit.getName();\n  String sourceContent=textUnit.getSource().toString();\n  ImportExportNote importExportNote=textUnitUtils.getImportExportNote(textUnit);\n  tmService.addTMTextUnit(asset.getRepository().getTm().getId(),asset.getId(),name,sourceContent,importExportNote.getSourceComment(),importExportNote.getCreatedDate());\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent event){\n  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();\n  File lastOpenFile;\n  String name=importBlastDialog.getBlastFileName();\n  if (name.length() > 0)   lastOpenFile=new File(Basic.replaceFileSuffix(name,\".rma6\"));\n else   lastOpenFile=new File(ProgramProperties.getFile(MeganProperties.SAVEFILE),\"Untitled.rma6\");\n  File file=ChooseFileDialog.chooseFileToSave(importBlastDialog,lastOpenFile,new RMAFileFilter(),new RMAFileFilter(),event,\"Save MEGAN file\",\".rma6\");\n  if (file != null) {\n    ProgramProperties.put(MeganProperties.SAVEFILE,file);\n    importBlastDialog.setMeganFileName(file.getPath());\n    importBlastDialog.getMeganFileNameField().setText(file.getPath());\n  }\n}\n"}
{"nl": "Draw sun", "code": "private void drawSun(Canvas canvas){\n  final Matrix matrix=mMatrix;\n  matrix.reset();\n  float dragPercent=Math.min(1f,Math.abs(mPercent));\n  final float offsetX=isRefreshing ? mScreenWidth / 2 * (2 - dragPercent) - mSunWidth / 2 : (mScreenWidth * dragPercent - mSunWidth) / 2;\n  final float offsetY=totalDistance * func(dragPercent);\n  matrix.preRotate(mSunRotateAngle == 0.0f ? (360 * dragPercent) : mSunRotateAngle,mSunWidth / 2,mSunHeight / 2);\n  matrix.postTranslate(offsetX,offsetY);\n  canvas.drawBitmap(mSun,matrix,null);\n}\n"}
{"nl": "test the request is Ajax ? <br> X-Request-With:XMLHttpRequest<br> Content-Type: application/json <br> output: json <br>", "code": "protected boolean isAjax(){\n  String request=this.getHeader(\"X-Requested-With\");\n  if (request != null && request.equals(\"XMLHttpRequest\")) {\n    return true;\n  }\n  String type=this.getHeader(\"Content-Type\");\n  if (type != null && type.contains(\"application/json\")) {\n    return true;\n  }\n  String output=this.getString(\"output\");\n  if (X.isSame(\"json\",output)) {\n    return true;\n  }\n  output=this.getHeader(\"output\");\n  if (X.isSame(\"json\",output)) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "converts the file", "code": "public static void main(String[] args) throws Exception {\n  if (args.length == 0 && System.getProperty(\"user.name\").equals(\"huson\")) {\n    args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/PF04563_meta.out\",\"-o\",\"/Users/huson/data/michael/adam/PF04563_meta.blastx\",\"-r\",\"/Users/huson/data/michael/input/SRR172902-rpoB.fasta\"};\n    args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next2/880_rpoB_sequences_min_1000_AAs.out\",\"-o\",\"/Users/huson/data/michael/adam/next2/880_rpoB_sequences_min_1000_AAs.blastx\",\"-r\",\"/Users/huson/data/michael/adam/next2/SRR172902-rpoB.fasta\"};\n    args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next/orthodb_EOG6M9DS6_bacteria_all.out\",\"-o\",\"/Users/huson/data/michael/adam/next/orthodb_EOG6M9DS6_bacteria_all.blastx\",\"-r\",\"/Users/huson/data/michael/adam/next/SRR172902-rpoB.fasta\"};\n    args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next/33_uniprot_seqs_with_specific_RNA_pol_Rpb2_arch.out\",\"-o\",\"/Users/huson/data/michael/adam/next/33_uniprot_seqs_with_specific_RNA_pol_Rpb2_arch.blastx\",\"-r\",\"/Users/huson/data/michael/adam/next/SRR172902-rpoB.fasta\"};\n    args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next3/SRR172902.out\",\"-o\",\"/Users/huson/data/michael/adam/next3/SRR172902.blastx\",\"-r\",\"/Users/huson/data/hmp-mock/input-wgs/SRR172902.fastq.gz\"};\n    args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next4/rpoB_reference_sequences_malt_matches.out\",\"-o\",\"/Users/huson/data/michael/adam/next4/rpoB_reference_sequences_malt_matches.blastx\",\"-r\",\"/Users/huson/data/michael/adam/next/SRR172902-rpoB.fasta\"};\n    args=new String[]{\"-i\",\"/Users/huson/data/michael/adam/next5/rpoB_reference_sequences_SRR172902.out\",\"-o\",\"/Users/huson/data/michael/adam/next5/rpoB_reference_sequences_SRR172902.blastx\",\"-r\",\"/Users/huson/data/hmp-mock/input-wgs/SRR172902.fastq.gz\"};\n  }\n  try {\n    ProgramProperties.setProgramName(\"HMM2BlastX\");\n    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);\n    long start=System.currentTimeMillis();\n    (new HMM2Blastx()).run(args);\n    System.err.println(\"Time: \" + ((System.currentTimeMillis() - start) / 1000) + \"s\");\n    System.exit(0);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n    System.exit(1);\n  }\n}\n"}
{"nl": "Adds a handler which is invoked whenever a taint is propagated", "code": "public void addTaintPropagationHandler(TaintPropagationHandler handler){\n  if (this.taintPropagationHandlers == null)   this.taintPropagationHandlers=new HashSet<>();\n  this.taintPropagationHandlers.add(handler);\n}\n"}
{"nl": "Set extended", "code": "protected PhotosGetCommentsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Updates tab's UI", "code": "public void updateState(final boolean done,final boolean current){\n  mStepDoneIndicator.setVisibility(done ? View.VISIBLE : View.GONE);\n  mStepNumber.setVisibility(!done ? View.VISIBLE : View.GONE);\n  colorViewBackground(done ? mStepDoneIndicator : mStepNumber,done || current);\n  mStepTitle.setTypeface(current ? Typeface.DEFAULT_BOLD : Typeface.DEFAULT);\n  mStepTitle.setAlpha(done || current ? OPAQUE_ALPHA : INACTIVE_STEP_TITLE_ALPHA);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n"}
{"nl": "Share Weixin", "code": "public void shareWeiXin(String liveTitle,String webUrl){\n  String msgTitle=context.getString(R.string.app_name);\n  String msgText=liveTitle + context.getString(R.string.share_str_weixin_title);\n  shareWeiXin(webUrl,msgTitle,msgText);\n}\n"}
{"nl": "Set fields", "code": "public WallSearchQueryWithExtended fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"unhide attribute=\");\n  Set<String> attributes=new HashSet<>();\n  while (!np.peekMatchIgnoreCase(\";\")) {\n    String attribute=np.getWordRespectCase();\n    attributes.add(attribute);\n  }\n  np.matchIgnoreCase(\";\");\n  if (attributes.size() > 0) {\n    final SamplesViewer viewer=((SamplesViewer)getViewer());\n    viewer.getSamplesTable().unhideColumns(attributes.toArray(new String[attributes.size()]));\n  }\n}\n"}
{"nl": "Starts the Traffic Alerts service to receive traffic alerts for the current active flight", "code": "public static void enableTrafficAlerts(AirMapTrafficListener listener){\n  getAirMapTrafficService().addListener(listener);\n  getAirMapTrafficService().connect();\n}\n"}
{"nl": "Determine whether the provided EventDescriptor matches properties of this EventDescriptor", "code": "public boolean matches(EventDescriptor template){\n  if (template == null)   throw new NullPointerException(\"template is null\");\n  boolean matches=false;\n  if (template.eventID == null) {\n    if (template.eventClass == null)     matches=true;\n else     if (this.eventClass != null)     matches=this.eventClass.equals(template.eventClass);\n  }\n else {\n    if (this.eventID != null)     matches=this.eventID.equals(template.eventID);\n  }\n  return (matches);\n}\n"}
{"nl": "This method will add a new history for a legion", "code": "public void addHistory(Legion legion,String text,LegionHistoryType legionHistoryType,int tabId,String description){\n  LegionHistory legionHistory=new LegionHistory(legionHistoryType,text,new Timestamp(System.currentTimeMillis()),tabId,description);\n  legion.addHistory(legionHistory);\n  DAOManager.getDAO(LegionDAO.class).saveNewLegionHistory(legion.getLegionId(),legionHistory);\n  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_TABS(legion.getLegionHistoryByTabId(tabId),tabId));\n}\n"}
{"nl": "Recalculates Influence", "code": "public void recalculateInfluence(){\n  calculateInfluence();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  ClusterViewer viewer=getViewer();\n  String name=Basic.replaceFileSuffix(((Director)getDir()).getDocument().getMeganFile().getName(),\".nex\");\n  File lastOpenFile=new File(name);\n  String lastDir=ProgramProperties.get(MeganProperties.NETWORK_DIRECTORY,\"\");\n  if (lastDir.length() > 0) {\n    lastOpenFile=new File(lastDir,lastOpenFile.getName());\n  }\n  getDir().notifyLockInput();\n  File file=ChooseFileDialog.chooseFileToSave(viewer.getFrame(),lastOpenFile,new TextFileFilter(),new NexusFileFilter(),ev,\"Save as Nexus file\",\".nexus\");\n  getDir().notifyUnlockInput();\n  if (file != null) {\n    execute(\"export data=distances file='\" + file.getPath() + \"' replace=true;\");\n    ProgramProperties.put(MeganProperties.NETWORK_DIRECTORY,file.getParent());\n  }\n}\n"}
{"nl": "close the readerWriter/writer, if it is open", "code": "public void close() throws IOException {\n  if (io != null) {\n    try {\n      io.close();\n    }\n  finally {\n      io=null;\n    }\n  }\n}\n"}
{"nl": "WS to start re-importing a drop", "code": "@RequestMapping(method=RequestMethod.POST,value=\"/api/drops/import\") public ImportDropConfig importDrop(@RequestBody ImportDropConfig importDropConfig) throws Exception {\n  PollableFuture importDropFuture=dropService.importDrop(importDropConfig.getDropId(),importDropConfig.getStatus(),PollableTask.INJECT_CURRENT_TASK);\n  importDropConfig.setPollableTask(importDropFuture.getPollableTask());\n  return importDropConfig;\n}\n"}
{"nl": "Set date", "code": "public VideoSearchQuery date(Integer value){\n  return unsafeParam(\"date\",value);\n}\n"}
{"nl": "Replace the line at given position with the given string, which can span multiple lines", "code": "public void replaceLineAt(int pos,String newLines) throws BadLocationException {\n  Element e=getParagraphElement(pos);\n  replace(e.getStartOffset(),getElementLength(e),newLines,null);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetRequestsQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getRequests\",GetRequestsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "/*    ", "code": "@deprecated public LanguageMatcherData cloneAsThawed(){\n  try {\n    LanguageMatcherData result=(LanguageMatcherData)clone();\n    result.languageScores=this.languageScores.cloneAsThawed();\n    result.scriptScores=this.scriptScores.cloneAsThawed();\n    result.regionScores=this.regionScores.cloneAsThawed();\n    result.frozen=false;\n    return result;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new IllegalArgumentException(e);\n  }\n}\n"}
{"nl": "Determine if we are storing the images in internal or external storage", "code": "private Uri whichContentStore(){\n  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n    return android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n  }\n else {\n    return android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI;\n  }\n}\n"}
{"nl": "Clear the reference to the objects to help the garbage collection", "code": "public void clear(){\n  for (int i=0; i < lastNumber; ++i)   numberToObj[i]=null;\n  lastNumber=0;\n  filledCells=0;\n  objContainer.clear();\n}\n"}
{"nl": "Increments the count of cleared thresholds", "code": "public void incThresholdClearedCount(){\n  clearedCount++;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"copy what=clusterViewer;\");\n}\n"}
{"nl": "Return a tap target for the navigation button (back, up, etc) from the given toolbar", "code": "public static ToolbarTapTarget forToolbarNavigationIcon(android.widget.Toolbar toolbar,CharSequence title,@Nullable CharSequence description){\n  return new ToolbarTapTarget(toolbar,true,title,description);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ViewerBase viewer=(ViewerBase)getViewer();\n  return viewer.getGraph().getNumberOfNodes() > 0;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetSubscriptionsQuery(VkApiClient client,UserActor actor){\n  super(client,\"users.getSubscriptions\",GetSubscriptionsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Process EVENT_SUPPORTED_REPORT", "code": "protected void processEventSupportedReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {\n  int notificationType=serialMessage.getMessagePayloadByte(offset + 1);\n  int numBytes=serialMessage.getMessagePayloadByte(offset + 2) & 0x1f;\n  List<Integer> types=new ArrayList<>();\n  for (int i=0; i < numBytes; ++i) {\n    for (int bit=0; bit < 8; ++bit) {\n      if (((serialMessage.getMessagePayloadByte(offset + i + 3)) & (1 << bit)) == 0) {\n        continue;\n      }\n      int index=(i << 3) + bit;\n      types.add(index);\n      getAlarm(notificationType).getReportedEvents().add(index);\n    }\n  }\n  logger.debug(\"NODE {}: AlarmType: {} reported events -> {}\",getNode().getNodeId(),AlarmType.getAlarmType(notificationType),types);\n  eventsSupportedInitialised=true;\n}\n"}
{"nl": "Also tries to retrieve the scoreboost", "code": "public void testWithScore2() throws Exception {\n  deleteAllDocs();\n  send(\"addDocument\",\"{fields: {text: 'the wind is howling like this swirling storm inside', id: 0, boost: 1.0}}\");\n  send(\"addDocument\",\"{fields: {text: 'I am one with the wind and sky', id: 1, boost: 2.0}}\");\n  send(\"search\",\"{queryText: wind, sort: {fields: [{field: scoreboost, reverse: true}]}, retrieveFields: [id, scoreboost, logboost]}\");\n  assertEquals(2,getInt(\"totalHits\"));\n  assertEquals(1,getInt(\"hits[0].fields.id\"));\n  assertEquals(0,getInt(\"hits[1].fields.id\"));\n  assertEquals(0.861380339f,getFloat(\"hits[0].fields.scoreboost\"),.0001f);\n  assertEquals(0.16823316f,getFloat(\"hits[1].fields.scoreboost\"),.0001f);\n  assertEquals(.6931f,getFloat(\"hits[0].fields.logboost\"),.0001f);\n  assertEquals(0.0f,getFloat(\"hits[1].fields.logboost\"),.0001f);\n}\n"}
{"nl": "Service name's Version key", "code": "private static String keyForVersion(String name){\n  return \"service_version_\" + name;\n}\n"}
{"nl": "call this when tab containing list is deactivated", "code": "public void deactivate(){\n  if (!inSelection) {\n    inSelection=true;\n    try {\n      chartSelection.clearSelectionClasses();\n      this.repaint();\n    }\n  finally {\n      inSelection=false;\n    }\n  }\n}\n"}
{"nl": "Calculate chart data (Total count of issues) for UI", "code": "private Map<String,List<ChartObject>> assembleWidgetData(List<ChartObject> input){\n  if (input.isEmpty())   return new HashMap<>();\n  input.stream().forEach(null);\n  Map<String,List<ChartObject>> result=new HashMap<>();\n  result.put(RESULT,input);\n  return result;\n}\n"}
{"nl": "Reduce the specified columns by taking the standard deviation of the values", "code": "public Builder stdevColumns(String... columns){\n  return add(ReduceOp.Stdev,columns);\n}\n"}
{"nl": "Adds an iterable containing contexts to the set", "code": "public void addAll(Iterable<Map.Entry<String,String>> iterable){\n  if (iterable == null) {\n    throw new NullPointerException(\"contexts\");\n  }\nsynchronized (this.contexts) {\n    for (    Map.Entry<String,String> e : iterable) {\n      this.contexts.add(Maps.immutableEntry(e.getKey(),e.getValue()));\n    }\n  }\n}\n"}
{"nl": "Required for Externalizable", "code": "public LocalCacheDetails(){\n}\n"}
{"nl": "Prints out the help message", "code": "private void printHelp(){\n  HelpFormatter formatter=new HelpFormatter();\n  formatter.setWidth(140);\n  formatter.printHelp(\"QuerierDriver\",cliOptions);\n}\n"}
{"nl": "Execute a command in a specific directory", "code": "public static String execute(String command,File cwd){\n  return SubprocessUttility.execute(command,cwd);\n}\n"}
{"nl": "Create an <code>unsigned int</code>", "code": "public static UInteger valueOf(long value) throws NumberFormatException {\n  return valueOfUnchecked(rangeCheck(value));\n}\n"}
{"nl": "Serve a GoogleApiClient with callback actions", "code": "public static void actions(Context context,Api api,Api.ApiOptions.HasOptions options,Action1<GoogleApiClient> onClientConnected,Action1<Throwable> onError){\n  GoogleApiClientActions.create(context.getApplicationContext(),new ApiWithOptions(api,options),onClientConnected,onError);\n}\n"}
{"nl": "execute shell commands, default return result msg", "code": "public static CommandResult execCommand(List<String> commands,boolean isRoot,String path){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true,path);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PagesGetVersionQuery(VkApiClient client,UserActor actor,int versionId){\n  super(client,\"pages.getVersion\",WikipageFull.class);\n  accessToken(actor.getAccessToken());\n  versionId(versionId);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set pc1=2 pc2=3;\");\n}\n"}
{"nl": "Allows to delete an item with a given item index", "code": "public void deleteItem(final int _index){\n  this.model.remove(_index);\n  notifyItemRemoved(_index);\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return isLocked;\n}\n"}
{"nl": "Creates a shared folder inside the drop folder", "code": "public BoxFolder createSharedFolder(String folderName) throws BoxSDKServiceException {\n  return createSharedFolder(folderName,getBoxSDKServiceConfig().getRootFolderId());\n}\n"}
{"nl": "Execute an HTTP request", "code": "public static HttpResponse execute(HttpMethod method,String targetUrl,String body) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {\n  return execute(method,targetUrl,body,null);\n}\n"}
{"nl": "Get the name of the role the owner of the given type will play", "code": "default String roleParentName(String type){\n  return String.format(ROLE_PARENT,type);\n}\n"}
{"nl": "Check that the key is valid for this map", "code": "protected void checkKey(Object key){\n  if (!canContainKey(key))   throw new IllegalArgumentException(\"key is not valid for this LeaseMap\");\n}\n"}
{"nl": "Convert an image file in to a matrix", "code": "public INDArray asMatrix(File f) throws IOException {\n  return NDArrayUtil.toNDArray(fromFile(f));\n}\n"}
{"nl": "Should be used when need to define whether spawn will be deleted after death Using this method spawns will not be saved with //save_spawn command", "code": "public static SpawnTemplate addNewSpawn(int worldId,int npcId,float x,float y,float z,byte heading,int respawnTime){\n  SpawnTemplate spawnTemplate=createSpawnTemplate(worldId,npcId,x,y,z,heading);\n  spawnTemplate.setRespawnTime(respawnTime);\n  return spawnTemplate;\n}\n"}
{"nl": "Loads account from DB and returns it, or returns null if account was not loaded", "code": "public static Account loadAccount(String name){\n  Account account=getAccountDAO().getAccount(name);\n  if (account != null) {\n    account.setAccountTime(getAccountTimeDAO().getAccountTime(account.getId()));\n  }\n  return account;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedIgnoreItemQuery(VkApiClient client,UserActor actor,NewsfeedItemType type,int ownerId,int itemId){\n  super(client,\"newsfeed.ignoreItem\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  ownerId(ownerId);\n  itemId(itemId);\n}\n"}
{"nl": "This function browses up one level according to the field: currentDirectory", "code": "private void upOneLevel(){\n  if (this.currentDirectory.getParent() != null)   this.browseTo(this.currentDirectory.getParentFile());\n}\n"}
{"nl": "convert number in byte to more readable format", "code": "public static String convertByteToReadable(long sizeInbyte){\n  String readableSize;\n  if (sizeInbyte < CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR) {\n    readableSize=sizeInbyte + \" Byte\";\n  }\n else   if (sizeInbyte < CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR * CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR) {\n    readableSize=sizeInbyte / CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR + \" KB\";\n  }\n else {\n    readableSize=sizeInbyte / CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR / CarbonCommonConstants.BYTE_TO_KB_CONVERSION_FACTOR + \" MB\";\n  }\n  return readableSize;\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public GroupsGetInvitedUsersQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Close the JDBC connection", "code": "@Override public void close(){\n  try {\n    if (connection != null) {\n      connection.close();\n    }\n  }\n catch (  SQLException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Entered player should not be in group yet", "code": "@Override public boolean checkCondition(){\n  return !alliance.hasMember(invited.getObjectId());\n}\n"}
{"nl": "Check if file exists and is not a directory", "code": "public static boolean fileExists(File file){\n  return file.exists() && !file.isDirectory();\n}\n"}
{"nl": "Check kinah in inventory for teleportation", "code": "private static boolean checkKinahForTransportation(TeleportLocation location,Player player){\n  Storage inventory=player.getInventory();\n  int basePrice=location.getPrice();\n  long transportationPrice=PricesService.getPriceForService(basePrice,player.getRace());\n  if (player.getController().isHiPassInEffect()) {\n    transportationPrice=1;\n  }\n  if (!inventory.tryDecreaseKinah(transportationPrice,ItemUpdateType.DEC_KINAH_FLY)) {\n    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_NOT_ENOUGH_KINA(transportationPrice));\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "COMBINING QUERIES", "code": "public CombiningCursor queryCombinings(){\n  return mHelper.queryCombinings();\n}\n"}
{"nl": "Tests if a node is associated to this group", "code": "public boolean isAssociated(int node){\n  return isAssociated(node,0);\n}\n"}
{"nl": "Log out user", "code": "@GET @Path(\"/logout\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Log a user out\") @Timed public Response logUserOut(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String tokenHeader){\n  authentication.logOut(tokenHeader);\n  return httpHeader.headers(NO_CONTENT).build();\n}\n"}
{"nl": "Creates a reference to an object inside another object", "code": "protected LuaObject(LuaObject parent,String name) throws LuaException {\nsynchronized (parent.getLuaState()) {\n    this.L=parent.getLuaState();\n    if (!parent.isTable() && !parent.isUserdata()) {\n      throw new LuaException(\"Object parent should be a table or userdata .\");\n    }\n    parent.push();\n    L.pushString(name);\n    L.getTable(-2);\n    L.remove(-2);\n    registerValue(-1);\n    L.pop(1);\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  File lastOpenFile=ProgramProperties.getFile(MeganProperties.TAXONOMYFILE);\n  getDir().notifyLockInput();\n  File file=ChooseFileDialog.chooseFileToOpen(getViewer().getFrame(),lastOpenFile,new TextFileFilter(\"tre\"),new TextFileFilter(\"tre\"),ev,\"Open Tree File\");\n  getDir().notifyUnlockInput();\n  if (file != null && file.exists() && file.canRead()) {\n    ProgramProperties.put(MeganProperties.TAXONOMYFILE,file.getAbsolutePath());\n    String mappingFile=Basic.replaceFileSuffix(file.getPath(),\".map\");\n    if (!(new File(mappingFile)).exists()) {\n      mappingFile=null;\n    }\n    StringBuilder buf=new StringBuilder();\n    buf.append(\"load taxonomyFile='\").append(file.getPath()).append(\"'\");\n    if (mappingFile != null)     buf.append(\" mapFile='\").append(mappingFile).append(\"';\");\n else     buf.append(\";\");\n    buf.append(\"collapse level=2;\");\n    execute(buf.toString());\n  }\n}\n"}
{"nl": "Checks if the passed httpStatusCode is contained in given range", "code": "public boolean contains(int httpStatusCode){\n  return httpStatusCode >= lowerBound && httpStatusCode <= upperBound;\n}\n"}
{"nl": "Sets the Visibility of all children to GONE", "code": "public void hideContent(){\n  for (int i=0; i < getChildCount(); i++) {\n    getChildAt(i).setVisibility(GONE);\n  }\n}\n"}
{"nl": "make a new MEGAN file name", "code": "private File makeNewRMAFile(File directory,String fileName){\n  int count=0;\n  while (true) {\n    File meganFile=new File(directory,Basic.replaceFileSuffix(Basic.getFileNameWithoutZipOrGZipSuffix(fileName),(count > 0 ? \"-\" + count : \"\") + \".rma6\"));\n    if (!meganFile.exists())     return meganFile;\n    count++;\n  }\n}\n"}
{"nl": "Initializes error handling objects", "code": "protected void initErrorReporter(){\n  if (fErrorReporter == null) {\n    fErrorReporter=new XMLErrorReporter();\n  }\n  if (fErrorHandler == null) {\n    fErrorHandler=new XPointerErrorHandler();\n  }\n  fErrorReporter.putMessageFormatter(XPointerMessageFormatter.XPOINTER_DOMAIN,new XPointerMessageFormatter());\n}\n"}
{"nl": "init velocity", "code": "private static void init() throws Exception {\n  ve=new VelocityEngine();\n  ve.setProperty(RuntimeConstants.RESOURCE_LOADER,\"classpath\");\n  ve.setProperty(\"classpath.resource.loader.class\",ClasspathResourceLoader.class.getName());\n  ve.setProperty(Velocity.ENCODING_DEFAULT,\"UTF-8\");\n  ve.setProperty(Velocity.INPUT_ENCODING,\"UTF-8\");\n  ve.setProperty(Velocity.OUTPUT_ENCODING,\"UTF-8\");\n  ve.init();\n}\n"}
{"nl": "Convert a long to interger, detecting overflows", "code": "public static int toIntExact(final long n) throws MathRuntimeException {\n  if (n < Integer.MIN_VALUE || n > Integer.MAX_VALUE) {\n    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW);\n  }\n  return (int)n;\n}\n"}
{"nl": "Call requires API level 16", "code": "public boolean isKeyguardLocked(){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {\n    LogUtils.e(\"can not call isKeyguardLocked if SDK_INT < 16 \");\n    return false;\n  }\n else {\n    return keyguardManager.isKeyguardLocked();\n  }\n}\n"}
{"nl": "Constructs new <tt>SM_NPC_INFO </tt> packet", "code": "public SM_NPC_INFO(Npc npc,Player player){\n  this._npc=npc;\n  npcTemplate=npc.getObjectTemplate();\n  npcTypeId=npc.getType(player);\n  npcId=npc.getNpcId();\n  creatorId=npc.getCreatorId();\n  masterName=npc.getMasterName();\n}\n"}
{"nl": "Reconfiguration possibility with database properties", "code": "public EmailService reconfig(ServerEmailConfig config){\n  this.authRequired=(null != config.getAuthEnabled() && config.getAuthEnabled());\n  Properties javaMailProperties=new Properties();\n  javaMailProperties.put(\"mail.smtp.connectiontimeout\",5000);\n  javaMailProperties.put(\"mail.smtp.auth\",this.authRequired);\n  javaMailProperties.put(\"mail.debug\",config.getDebug());\n  EmailService refreshed=new EmailService(javaMailProperties);\n  refreshed.setTemplateEngine(templateEngine);\n  this.setHost(config.getHost());\n  this.setPort(config.getPort());\n  this.setProtocol(config.getProtocol());\n  if (authRequired) {\n    this.setUsername(config.getUsername());\n    this.setPassword(config.getPassword());\n  }\n  return refreshed;\n}\n"}
{"nl": "Type of complaint", "code": "protected UsersReportQuery type(UsersReportType value){\n  return unsafeParam(\"type\",value);\n}\n"}
{"nl": "Show progress bar and progress text below it (if any)", "code": "public void startProgress(){\n  mBasoStatus=BasoStatus.PROGRESSING;\n  toggleLayout();\n}\n"}
{"nl": "the operations that are not relevant for analysis like \"not\" or casts are removed - array refs are only removed if explicitly stated", "code": "public static Value selectBase(Value val,boolean keepArrayRef){\n  if (val instanceof ArrayRef && !keepArrayRef) {\n    return selectBase(((ArrayRef)val).getBase(),keepArrayRef);\n  }\n  if (val instanceof CastExpr) {\n    return selectBase(((CastExpr)val).getOp(),keepArrayRef);\n  }\n  if (val instanceof UnopExpr)   return selectBase(((UnopExpr)val).getOp(),keepArrayRef);\n  return val;\n}\n"}
{"nl": "Update the authenticated pilot's phone number", "code": "public static void updatePhoneNumber(String phoneNumber,@Nullable AirMapCallback<Void> callback){\n  PilotService.updatePhoneNumber(phoneNumber,callback);\n}\n"}
{"nl": "Just for backwards compatibility with workspaces stored with previous version", "code": "private void readFromVersion2Stream(StatusFromBytesStream dis) throws IOException {\n  String urlString=dis.readUTF();\n  if (urlString.equals(\"\")) {\n    url=null;\n  }\n else {\n    url=urlString;\n  }\n  lastChangedRevision=dis.readLong();\n  lastChangedDate=dis.readLong();\n  String lastCommitAuthorString=dis.readUTF();\n  if ((url == null) || (lastCommitAuthorString.equals(\"\"))) {\n    lastCommitAuthor=null;\n  }\n else {\n    lastCommitAuthor=lastCommitAuthorString;\n  }\n  textStatus=dis.readInt();\n  propStatus=dis.readInt();\n  setRevisionNumber(dis.readLong());\n  nodeKind=dis.readInt();\n}\n"}
{"nl": "NON-DOM: convert LSInput to XNIInputSource", "code": "XMLInputSource dom2xmlInputSource(LSInput is){\n  XMLInputSource xis=null;\n  if (is.getCharacterStream() != null) {\n    xis=new XMLInputSource(is.getPublicId(),is.getSystemId(),is.getBaseURI(),is.getCharacterStream(),\"UTF-16\");\n  }\n else   if (is.getByteStream() != null) {\n    xis=new XMLInputSource(is.getPublicId(),is.getSystemId(),is.getBaseURI(),is.getByteStream(),is.getEncoding());\n  }\n else   if (is.getStringData() != null && is.getStringData().length() > 0) {\n    xis=new XMLInputSource(is.getPublicId(),is.getSystemId(),is.getBaseURI(),new StringReader(is.getStringData()),\"UTF-16\");\n  }\n else   if ((is.getSystemId() != null && is.getSystemId().length() > 0) || (is.getPublicId() != null && is.getPublicId().length() > 0)) {\n    xis=new XMLInputSource(is.getPublicId(),is.getSystemId(),is.getBaseURI());\n  }\n else {\n    if (fErrorHandler != null) {\n      DOMErrorImpl error=new DOMErrorImpl();\n      error.fType=\"no-input-specified\";\n      error.fMessage=\"no-input-specified\";\n      error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;\n      fErrorHandler.getErrorHandler().handleError(error);\n    }\n    throw new LSException(LSException.PARSE_ERR,\"no-input-specified\");\n  }\n  return xis;\n}\n"}
{"nl": "Left click mouse at a point", "code": "public void leftClick(int x,int y) throws InterruptedException {\n  click(InputEvent.BUTTON1_MASK,x,y);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show what=selected;\");\n}\n"}
{"nl": "move to next group-value", "code": "public void nextGroup() throws SAException {\n  releaseScan();\n  return;\n}\n"}
{"nl": "Constructs a new (empty) blocked list", "code": "public BlockList(){\n  this(new ConcurrentHashMap<Integer,BlockedPlayer>());\n}\n"}
{"nl": "Dispose of a resource", "code": "protected void dispose(Object obj){\n  if (obj instanceof PoolableThread) {\n    PoolableThread thread=(PoolableThread)obj;\n    thread.cleanStop();\n  }\n}\n"}
{"nl": "Calculate the number of gaps + 1 given a start and end range", "code": "public static int gaps(int[] start,int[] end){\n  Arrays.sort(start);\n  Arrays.sort(end);\n  int overlap=0;\n  int gaps=0;\n  for (int i=0, j=0; j < end.length; ) {\n    if (i < start.length && start[i] < end[j]) {\n      overlap++;\n      i++;\n    }\n else {\n      j++;\n      overlap--;\n    }\n    if (overlap == 0) {\n      gaps++;\n    }\n  }\n  return gaps;\n}\n"}
{"nl": "show a info Notification", "code": "public static void infoNotification(final String message){\n  showNotification(message,NotificationType.INFORMATION);\n}\n"}
{"nl": "Creates an event with given id", "code": "public SpaceConnectionEvent(Object id){\n  _id=id;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PlacesCheckinQuery(VkApiClient client,UserActor actor){\n  super(client,\"places.checkin\",CheckinResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "this one uses the side effect tester", "code": "protected void internalTransform(Body b,String phaseName,Map options){\n  SmartLocalDefs sld=SmartLocalDefsPool.v().getSmartLocalDefsFor(b);\n  UnitGraph g=sld.getGraph();\n  NaiveSideEffectTester nset=new NaiveSideEffectTester();\n  LoopFinder lf=new LoopFinder();\n  lf.internalTransform(b,phaseName,options);\n  Collection<Loop> loops=lf.loops();\n  constants=new ArrayList();\n  if (loops.isEmpty())   return;\n  Iterator<Loop> lIt=loops.iterator();\n  while (lIt.hasNext()) {\n    Loop loop=lIt.next();\n    Stmt header=loop.getHead();\n    Collection<Stmt> loopStmts=loop.getLoopStatements();\n    Iterator<Stmt> bIt=loopStmts.iterator();\n    while (bIt.hasNext()) {\n      Stmt tStmt=bIt.next();\n      handleLoopBodyStmt(tStmt,nset,loopStmts);\n    }\n  }\n}\n"}
{"nl": "Generates an authCredentials object from a url", "code": "private static AuthCredential authCredentialsFromUrl(String url){\n  if (isValidLoginSchema(url)) {\n    url=url.replace(Utils.getCallbackUrl() + \"#\",Utils.getCallbackUrl() + \"?\");\n    HttpUrl parsed=HttpUrl.parse(url);\n    try {\n      String idToken=parsed.queryParameter(\"id_token\");\n      AuthCredential authCredentials=new AuthCredential();\n      authCredentials.setAccessToken(idToken);\n      authCredentials.setTokenType(parsed.queryParameter(\"token_type\"));\n      authCredentials.setRefreshToken(parsed.queryParameter(\"refresh_token\"));\n      JwtConsumer consumer=new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification().build();\n      JwtClaims claims=consumer.processToClaims(idToken);\n      authCredentials.setUserId(claims.getSubject());\n      authCredentials.setExpiresAt(new Date(claims.getExpirationTime().getValueInMillis()));\n      return authCredentials;\n    }\n catch (    InvalidJwtException|MalformedClaimException e) {\n      e.printStackTrace();\n    }\n  }\n  return null;\n}\n"}
{"nl": "has next fastA record?", "code": "public boolean hasNext(){\n  return !isClosed && nextLine != null;\n}\n"}
{"nl": "Add all items without update counters", "code": "public void reAddAllItems(@NonNull Collection<? extends MODEL> collection){\n  if (collection.size() == 0) {\n    return;\n  }\n  mInserts.addAll(createEmptyInsertsList(collection.size()));\n  getItems().addAll(collection);\n}\n"}
{"nl": "Allows to easily report an event", "code": "public static void log(final String _msg){\n  FirebaseCrash.log(_msg);\n}\n"}
{"nl": "Prints all results stored in this object to the standard output", "code": "public void printResults(){\n  for (  ResultSinkInfo sink : this.results.keySet()) {\n    logger.info(\"Found a flow to sink {}, from the following sources:\",sink);\n    for (    ResultSourceInfo source : this.results.get(sink)) {\n      logger.info(\"\\t- {}\",source.getSource());\n      if (source.getPath() != null && !source.getPath().isEmpty())       logger.info(\"\\t\\ton Path {}\",source.getPath());\n    }\n  }\n}\n"}
{"nl": "Creates new cylinder with given radius", "code": "public CylinderArea(ZoneName zoneName,int worldId,Point2D center,float radius,float minZ,float maxZ){\n  this(zoneName,worldId,center.getX(),center.getY(),radius,minZ,maxZ);\n}\n"}
{"nl": "Creates new are from given coords", "code": "public RectangleArea(ZoneName zoneName,int worldId,float minX,float minY,float maxX,float maxY,float minZ,float maxZ){\n  super(zoneName,worldId,minZ,maxZ);\n  this.minX=minX;\n  this.maxX=maxX;\n  this.minY=minY;\n  this.maxY=maxY;\n}\n"}
{"nl": "Parse any part of a Graql query", "code": "private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,GraqlErrorListener errorListener,TokenStream tokens){\n  GraqlParser parser=new GraqlParser(tokens);\n  parser.removeErrorListeners();\n  parser.addErrorListener(errorListener);\n  S tree=parseRule.apply(parser);\n  if (errorListener.hasErrors()) {\n    throw new IllegalArgumentException(errorListener.toString());\n  }\n  return visit.apply(getQueryVisitor(),tree);\n}\n"}
{"nl": "Unquantize an array of 16bits signed shorts over a float range", "code": "public static float[] unQuantize(short[] s,float fMin,float fRange){\n  int len=s.length;\n  float[] ret=new float[len];\n  for (int i=0; i < len; i++)   ret[i]=unQuantize(s[i],fMin,fRange);\n  return (ret);\n}\n"}
{"nl": "Return a tap target for the specified view", "code": "public static ViewTapTarget forView(View view,CharSequence title){\n  return forView(view,title,null);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioDeleteQuery(VkApiClient client,UserActor actor,int audioId,int ownerId){\n  super(client,\"audio.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  audioId(audioId);\n  ownerId(ownerId);\n}\n"}
{"nl": "Amount of albums to return", "code": "public MarketGetAlbumsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Perform actions upon day time change", "code": "private void onDayTimeChange(){\n  WeatherService.getInstance().checkWeathersTime();\n}\n"}
{"nl": "Tests the OpenInputStream method, the test is successful when the stream is correctly opened", "code": "public final void testOpenInputStream(){\n  FallbackFileController fFileController=new FallbackFileController(PATH);\n  try {\n    fFileController.openFallbackInputStream();\n  }\n catch (  DataFallbackException e) {\n    fail(\"The InputStream could not be opened\");\n  }\n  assertNotNull(fFileController.getInput());\n}\n"}
{"nl": "Creates a lint client for batch inspections", "code": "public static IntellijLintClient forBatch(@NotNull Project project,@NotNull Map<Issue,Map<File,List<ProblemData>>> problemMap,@NotNull AnalysisScope scope,@NotNull List<Issue> issues){\n  return new BatchLintClient(project,problemMap,scope,issues);\n}\n"}
{"nl": "auto select init or run freeline project", "code": "public static void initOrBuild(Project project){\n  if (hadInitFreeline(project)) {\n    build(project);\n  }\n else {\n    initFree(project);\n  }\n}\n"}
{"nl": "is the current object set?", "code": "public boolean isCurrentSet(){\n  return current.get1() >= 0 && current.get1() < table.getGrid().getRowCount() && current.get2() >= 0 && current.get2() < table.getGrid().getColumnCount();\n}\n"}
{"nl": "Determine if an option was provided by the user via the CLI", "code": "public boolean hasOption(String option){\n  return commandLine.hasOption(option);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersReportQuery(VkApiClient client,UserActor actor,int userId,UsersReportType type){\n  super(client,\"users.report\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n  type(type);\n}\n"}
{"nl": "Helper to determine if a list of argument types match that of a method", "code": "private static boolean checkParameters(Method method,Class[] types){\n  boolean result=true;\n  Class[] parameters=method.getParameterTypes();\n  if (parameters.length != types.length) {\n    result=false;\n  }\n else {\n    for (int i=0; i < parameters.length; ++i) {\n      Class parameter=parameters[i];\n      if (types[i] == null) {\n        if (parameter.isPrimitive()) {\n          result=false;\n          break;\n        }\n      }\n else       if (!parameter.isAssignableFrom(types[i]) && !parameter.isAssignableFrom(getPrimitiveType(types[i]))) {\n        result=false;\n        break;\n      }\n    }\n  }\n  return result;\n}\n"}
{"nl": "convert from external to wrapper encoding", "code": "private Encoding fromExternalToWrapperEncoding(org.apache.carbondata.format.Encoding encoder){\n  if (null == encoder) {\n    return null;\n  }\nswitch (encoder) {\ncase DICTIONARY:\n    return Encoding.DICTIONARY;\ncase DELTA:\n  return Encoding.DELTA;\ncase RLE:\nreturn Encoding.RLE;\ncase INVERTED_INDEX:\nreturn Encoding.INVERTED_INDEX;\ncase BIT_PACKED:\nreturn Encoding.BIT_PACKED;\ncase DIRECT_DICTIONARY:\nreturn Encoding.DIRECT_DICTIONARY;\ndefault :\nreturn Encoding.DICTIONARY;\n}\n}\n"}
{"nl": "Derives a new abstraction that models the current local being thrown as an exception", "code": "public final Abstraction deriveNewAbstractionOnThrow(Stmt throwStmt){\n  assert !this.exceptionThrown;\n  Abstraction abs=clone();\n  abs.currentStmt=throwStmt;\n  abs.sourceContext=null;\n  abs.exceptionThrown=true;\n  return abs;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetOfficeUsersQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getOfficeUsers\",Utils.buildParametrizedType(List.class,Users.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"wall.reportComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n"}
{"nl": "Adds a data type with the given ID to the allowed data types for this packet", "code": "public PacketSpecBuilder with(String id,DataType type){\n  if (types.containsKey(id))   throw new IllegalArgumentException(String.format(\"ID %s is already set to DataType %s\",id,types.get(id)));\n  types.put(id,type);\n  return this;\n}\n"}
{"nl": "modify appender file to storage server (by file buff)", "code": "public int modify_file(String group_name,String appender_filename,long file_offset,byte[] file_buff,int buffer_offset,int buffer_length) throws IOException, MyException {\n  return this.do_modify_file(group_name,appender_filename,file_offset,buffer_length,new UploadBuff(file_buff,buffer_offset,buffer_length));\n}\n"}
{"nl": "Returns true if we have a dedicated frame image for the given device", "code": "public boolean hasDeviceFrame(@Nullable Device device){\n  DeviceData deviceData=getDeviceData(device);\n  if (deviceData == null) {\n    return false;\n  }\n  return !deviceData.getDescriptor().isStretchable();\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.KULCZYNSKI + \";\");\n}\n"}
{"nl": "Format a map scale into a string", "code": "private static String format(double value){\n  return String.format(\"%s%s\",SCALE_PREFIX,NumberFormat.getIntegerInstance().format((int)value));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedGetBannedQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getBanned\",GetBannedExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "Validates business rules related to test item of this log", "code": "protected void validate(TestItem testItem,SaveLogRQ saveLogRQ){\n  BusinessRule.expect(testItem,Predicates.notNull()).verify(ErrorType.LOGGING_IS_NOT_ALLOWED,Suppliers.formattedSupplier(\"Logging to test item '{}' is not allowed. Probably you try to log for Launch type.\",saveLogRQ.getTestItemId()));\n  BusinessRule.expect(testItem,Preconditions.IN_PROGRESS).verify(ErrorType.REPORTING_ITEM_ALREADY_FINISHED,testItem.getId());\n  BusinessRule.expect(testItem.hasChilds(),Predicates.equalTo(Boolean.FALSE)).verify(ErrorType.LOGGING_IS_NOT_ALLOWED,Suppliers.formattedSupplier(\"Logging to item '{}' with descendants is not permitted\",testItem.getId()));\n  BusinessRule.expect(testItem.getStartTime().before(saveLogRQ.getLogTime()),Predicates.equalTo(Boolean.TRUE)).verify(ErrorType.LOGGING_IS_NOT_ALLOWED,Suppliers.formattedSupplier(\"Log has incorrect log time. Log time should be after parent item's start time.\"));\n  BusinessRule.expect(LogLevel.toLevelOrUnknown(saveLogRQ.getLevel()),Predicates.notNull()).verify(ErrorType.BAD_SAVE_LOG_REQUEST,Suppliers.formattedSupplier(\"Cannot convert '{}' to valid 'LogLevel'\",saveLogRQ.getLevel()));\n}\n"}
{"nl": "Puts a new request in queue as a new thread in pool to be executed", "code": "protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){\n  if (contentType != null) {\n    uriRequest.setHeader(\"Content-Type\",contentType);\n  }\n  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());\n  responseHandler.setRequestURI(uriRequest.getURI());\n  Future<?> request=threadPool.submit(new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler));\n  if (context != null) {\n    List<WeakReference<Future<?>>> requestList=requestMap.get(context);\n    if (requestList == null) {\n      requestList=new LinkedList<WeakReference<Future<?>>>();\n      requestMap.put(context,requestList);\n    }\n    requestList.add(new WeakReference<Future<?>>(request));\n  }\n  return new RequestHandle(request);\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return locked;\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String line=Basic.getFirstLineFromFile(new File(fileName));\n  return line != null && line.split(\"\\t\").length == 2 && line.endsWith(\";\");\n}\n"}
{"nl": "called when delete success", "code": "protected void onDeleteSuccess(DragFlowLayout dfl,View child,Object data){\n}\n"}
{"nl": "Check, if the player has not acquired listed quests", "code": "private boolean checkNoAcquiredQuests(QuestStateList qsl){\n  if (noacquired != null && noacquired.size() > 0) {\n    for (    Integer questId : noacquired) {\n      QuestState qs=qsl.getQuestState(questId);\n      if (qs != null && (qs.getStatus() == QuestStatus.START || qs.getStatus() == QuestStatus.REWARD)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n"}
{"nl": "Override this method to update your insertions", "code": "protected void onBindInsertionViewHolder(RecyclerView.ViewHolder holder,int position){\n  updateInsertClickListener(position,holder.itemView);\n}\n"}
{"nl": "Return an additional \"likes\" field", "code": "public VideoGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "Resets the current context", "code": "public static void resetContext(){\n  contexts.set(null);\n}\n"}
{"nl": "Set time", "code": "public AccountSetSilenceModeQuery time(Integer value){\n  return unsafeParam(\"time\",value);\n}\n"}
{"nl": "Just for Rider class skills", "code": "private boolean isKineticSkill(){\nswitch (getSkillId()) {\ncase 2440:\ncase 2441:\ncase 2442:\ncase 2443:\ncase 2444:\ncase 2445:\ncase 2446:\ncase 2447:\ncase 2448:\ncase 2449:\ncase 2579:\ncase 2580:\ncase 2581:\n    return true;\n}\nreturn false;\n}\n"}
{"nl": "Returns true if legion is in cached by id", "code": "public boolean contains(int memberObjId){\n  return legionMemberById.containsKey(memberObjId);\n}\n"}
{"nl": "List field should always assigned new list with one elment 1L", "code": "public void testUntypedListField() throws Exception {\n  AnObject empty=new AnObject();\n  AnObject full=helper.fill(new AnObject());\n  Object value=getPropertyValue(full,\"untypedListField\");\n  assertTrue(value instanceof List);\n  assertFalse(((List)value).isEmpty());\n  assertEquals(1L,((List)value).get(0));\n  assertTrue(helper.areEquals(full,full));\n  assertFalse(helper.areEquals(empty,full));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Returns true if there were errors", "code": "public boolean hasErrors(){\n  return hasErrors;\n}\n"}
{"nl": "Inserts a group at a certain position on this track", "code": "public void insertGroup(Group group,int position) throws ObjectAlreadyHasException, IndexOutOfBoundsException {\n  assertNotContains(group);\n  groups.add(position,group.getName());\n}\n"}
{"nl": "Check if a string is NOT empty", "code": "public static boolean isNotEmpty(CharSequence str){\n  return !isEmpty(str);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  ChartViewer chartViewer=(ChartViewer)getViewer();\n  LabelsJList list=chartViewer.getActiveLabelsJList();\n  StringBuilder buf=new StringBuilder();\n  int count=list.getSelectedLabels().size();\n  for (  String label : list.getSelectedLabels()) {\n    buf.append(label);\n    if (count > 1)     buf.append(\"\\n\");\n  }\n  if (buf.toString().length() > 0) {\n    StringSelection selection=new StringSelection(buf.toString());\n    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection,null);\n  }\n}\n"}
{"nl": "signals all listener that a remote resource has been copied", "code": "public void remoteResourceCopied(ISVNRemoteResource source,ISVNRemoteFolder destination){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.remoteResourceCopied(source,destination);\n  }\n}\n"}
{"nl": "Returns true if field globalContext is set (has been assigned a value) and false otherwise", "code": "public boolean isSetGlobalContext(){\n  return this.globalContext != null;\n}\n"}
{"nl": "Return an abbreviated English-language desc of the byte length", "code": "public static String byteDesc(long len){\n  double val;\n  String ending;\n  if (len < 1024 * 1024) {\n    val=(1.0 * len) / 1024;\n    ending=\" KB\";\n  }\n else   if (len < 1024 * 1024 * 1024) {\n    val=(1.0 * len) / (1024 * 1024);\n    ending=\" MB\";\n  }\n else   if (len < 1024L * 1024 * 1024* 1024) {\n    val=(1.0 * len) / (1024 * 1024 * 1024);\n    ending=\" GB\";\n  }\n else   if (len < 1024L * 1024 * 1024* 1024* 1024) {\n    val=(1.0 * len) / (1024L * 1024 * 1024* 1024);\n    ending=\" TB\";\n  }\n else {\n    val=(1.0 * len) / (1024L * 1024 * 1024* 1024* 1024);\n    ending=\" PB\";\n  }\n  return limitDecimalTo2(val) + ending;\n}\n"}
{"nl": "Find the smallest power of two greater than the input value", "code": "private static int nextPowerOfTwo(final int i){\n  return Integer.highestOneBit(i) << 1;\n}\n"}
{"nl": "Converts pressure in millimeters of mercury (Hg) to hectoPascals (hPa)", "code": "public static Float hgToHpa(float hg){\n  return (float)(hg * 33.864);\n}\n"}
{"nl": "Removes a listener that was previously registered with listenForSubscriptions", "code": "@ObjectiveCName(\"unlisten:\") public void unlisten(String pattern){\n  UtilListener listener=listeners.get(pattern);\n  if (listener != null) {\n    listener.destroy();\n    listeners.remove(pattern);\n  }\n else {\n    client.onError(Topic.RECORD,Event.NOT_LISTENING,pattern);\n  }\n}\n"}
{"nl": "Creates a new instance of CompleteLinkClusterer", "code": "public CompleteLinkClusterer(){\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  String result=JOptionPane.showInputDialog((getViewer() != null ? getViewer().getFrame() : null),\"Paste MeganServer file URL:\");\n  if (result != null) {\n    if (!result.endsWith(\";\"))     result+=\";\";\n    String[] tokens=result.split(\";\");\n    final StringBuilder buf=new StringBuilder();\n    int count=0;\n    for (    String token : tokens) {\n      final String fileName=token.trim();\n      if (fileName.length() > 0)       buf.append(\"open file='\").append(fileName).append(\"';\");\n      count++;\n    }\n    if (count > 10) {\n      if (JOptionPane.showConfirmDialog(getViewer() != null ? getViewer().getFrame() : null,\"Do you really want to open \" + count + \" new files?\",\"Confirm\",JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)       return;\n    }\n    execute(buf.toString());\n  }\n}\n"}
{"nl": "Compose two functions together into a single function", "code": "private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){\n  return null;\n}\n"}
{"nl": "Checks whether the value does not exist", "code": "public boolean isEmpty(){\n  return !isDefined();\n}\n"}
{"nl": "initialize JavaFX", "code": "private void initFxLater(JFXPanel jfxPanel){\n  if (!initialized) {\nsynchronized (lock) {\n      if (!initialized) {\n        try {\n          final BorderPane rootNode=new BorderPane();\n          jfxPanel.setScene(new Scene(rootNode,600,600));\n          final Node main=createMainNode();\n          rootNode.setCenter(main);\n          BorderPane.setMargin(main,new Insets(3,3,3,3));\n          String css=NotificationsInSwing.getControlStylesheetURL();\n          if (css != null)           jfxPanel.getScene().getStylesheets().add(css);\n          css=getControlStylesheetURL();\n          if (css != null) {\n            jfxPanel.getScene().getStylesheets().add(css);\n            spreadsheetView.getStylesheets().add(css);\n          }\n          columnContextMenu=new PopupMenuFX(GUIConfiguration.getAttributeColumnHeaderPopupConfiguration(),samplesViewer.getCommandManager());\n          rowContextMenu=new PopupMenuFX(GUIConfiguration.getSampleRowHeaderPopupConfiguration(),samplesViewer.getCommandManager());\n          originalRowContextMenuLength=rowContextMenu.getItems().size();\n        }\n  finally {\n          initialized=true;\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Initialize the view in the layout", "code": "@Override protected void initViews(Bundle savedInstanceState){\n  getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n  Intent intent=getIntent();\n  url=intent.getStringExtra(\"url\");\n  name=intent.getStringExtra(\"name\");\n  photoView=(PhotoView)findViewById(R.id.img);\n  photoView.enable();\n}\n"}
{"nl": "Creates a new instance of INSECTFileDB", "code": "public INSECTFileRawDB(String sPrefix,String sBaseDir){\n  super(sPrefix,sBaseDir);\n}\n"}
{"nl": "after refresh ,you should call this method on the UI thread", "code": "public void refreshComplate(){\n  mOnRefreshCompleteListenter.refreshComplete();\n  isLoadingData=false;\n  isLoadingMoreData=false;\n  mHeaderView.getLayoutParams().height=0;\n  getAdapter().notifyDataSetChanged();\n}\n"}
{"nl": "Required for Externalizable", "code": "public ReadTakeEntrySpaceOperationRequest(){\n}\n"}
{"nl": "backup the data to file", "code": "public static void backup(String filename){\n  File f=new File(filename);\n  f.getParentFile().mkdirs();\n  Connection c=null;\n  ResultSet r1=null;\n  try {\n    ZipOutputStream zip=new ZipOutputStream(new FileOutputStream(f));\n    zip.putNextEntry(new ZipEntry(\"db\"));\n    PrintStream out=new PrintStream(zip);\n    c=getConnection();\n    DatabaseMetaData m1=c.getMetaData();\n    r1=m1.getTables(null,null,null,new String[]{\"TABLE\"});\n    while (r1.next()) {\n      _backup(out,c,r1.getString(\"TABLE_NAME\"));\n    }\n    zip.closeEntry();\n    zip.close();\n  }\n catch (  Exception e) {\n    log.error(e.getMessage(),e);\n  }\n finally {\n    close(r1,c);\n  }\n}\n"}
{"nl": "Wait until the engine is a consistent state, which means it has no pending operations that will be lost when closing the engine", "code": "public void waitForConsistentState(){\n  if (isReplicated()) {\n    try {\n      if (shouldFlushPendingReplication())       getReplicationNode().getAdmin().flushPendingReplication(_clusterPolicy.getReplicationPolicy().getAsyncChannelShutdownTimeout(),TimeUnit.MILLISECONDS);\n    }\n catch (    RuntimeException e) {\n      if (_logger.isLoggable(Level.SEVERE))       _logger.log(Level.SEVERE,\"Flush pending replication raised an exception:\",e);\n      throw e;\n    }\n  }\n}\n"}
{"nl": "Entered alliance should not be in league yet", "code": "@Override public boolean checkCondition(){\n  return !league.hasMember(invitedAlliance.getObjectId());\n}\n"}
{"nl": "Performs the removal of the local copy of the target file", "code": "@Override public void onCancel(String callerTag){\n  ComponentsGetter cg=(ComponentsGetter)getActivity();\n  cg.getFileOperationsHelper().removeFiles(mTargetFiles,true);\n}\n"}
{"nl": "zlib decompress 2 byte", "code": "public static byte[] decompressForZlib(byte[] bytesToDecompress){\n  byte[] returnValues=null;\n  Inflater inflater=new Inflater();\n  int numberOfBytesToDecompress=bytesToDecompress.length;\n  inflater.setInput(bytesToDecompress,0,numberOfBytesToDecompress);\n  int bufferSizeInBytes=numberOfBytesToDecompress;\n  int numberOfBytesDecompressedSoFar=0;\n  List<Byte> bytesDecompressedSoFar=new ArrayList<Byte>();\n  try {\n    while (inflater.needsInput() == false) {\n      byte[] bytesDecompressedBuffer=new byte[bufferSizeInBytes];\n      int numberOfBytesDecompressedThisTime=inflater.inflate(bytesDecompressedBuffer);\n      numberOfBytesDecompressedSoFar+=numberOfBytesDecompressedThisTime;\n      for (int b=0; b < numberOfBytesDecompressedThisTime; b++) {\n        bytesDecompressedSoFar.add(bytesDecompressedBuffer[b]);\n      }\n    }\n    returnValues=new byte[bytesDecompressedSoFar.size()];\n    for (int b=0; b < returnValues.length; b++) {\n      returnValues[b]=(byte)(bytesDecompressedSoFar.get(b));\n    }\n  }\n catch (  DataFormatException dfe) {\n    dfe.printStackTrace();\n  }\n  inflater.end();\n  return returnValues;\n}\n"}
{"nl": "Utility method computing the size of the widget if dimensions are set to wrap_content, using the default font", "code": "protected void wrapContent(){\n  mWidget.setMinWidth(32);\n  mWidget.setMinHeight(32);\n  int tw=mWidget.getMinWidth();\n  int th=mWidget.getMinHeight();\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setWidth(tw);\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {\n    mWidget.setHeight(th);\n  }\n  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getWidth() <= mWidget.getMinWidth()) {\n      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {\n    if (mWidget.getHeight() <= mWidget.getMinHeight()) {\n      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);\n    }\n  }\n  mWidget.setBaselineDistance(0);\n}\n"}
{"nl": "is the entry returned already matched against the searching template currently is true if the underlying scan made by CacheManager::EntriesIter", "code": "public boolean isAlreadyMatched(){\n  return false;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n"}
{"nl": "Move all the messages in a collection to the queue and encapsulates them", "code": "private void addToQueue(Collection<SerialMessage> msgs,ZWaveCommandClass commandClass,int endpointId){\n  if (msgs == null) {\n    return;\n  }\n  for (  SerialMessage serialMessage : msgs) {\n    addToQueue(node.encapsulate(serialMessage,commandClass,endpointId));\n  }\n}\n"}
{"nl": "Helper method to add elements to the test data schema", "code": "public static void addElement(Document doc,Element rootElement,String elementName,String typeIn,String isArrayIn,String partitionerIn){\n  Element element=doc.createElement(\"element\");\n  rootElement.appendChild(element);\n  Element name=doc.createElement(\"name\");\n  name.appendChild(doc.createTextNode(elementName));\n  element.appendChild(name);\n  Element type=doc.createElement(\"type\");\n  type.appendChild(doc.createTextNode(typeIn));\n  element.appendChild(type);\n  if (isArrayIn.equals(\"true\")) {\n    element.appendChild(doc.createElement(\"isArray\"));\n  }\n  if (partitionerIn != null) {\n    Element partitioner=doc.createElement(\"partitioner\");\n    partitioner.appendChild(doc.createTextNode(partitionerIn));\n    element.appendChild(partitioner);\n  }\n}\n"}
{"nl": "Test only", "code": "public CertPinManager(String path,TrustedCertificateStore store) throws PinManagerException {\n  if (path == null) {\n    throw new NullPointerException(\"path == null\");\n  }\n  pinFile=new File(path);\n  certStore=store;\n}\n"}
{"nl": "Calculates the date of the easter Sunday for the given year", "code": "public Date calculateEasterForYear(int year){\n  int a=year % 4;\n  int b=year % 7;\n  int c=year % 19;\n  int d=(19 * c + 15) % 30;\n  int e=(2 * a + 4 * b - d + 34) % 7;\n  int month=(int)Math.floor((d + e + 114) / 31);\n  int day=((d + e + 144) % 31) + 1;\n  day++;\n  return Date.on(day,month,year).addDay(13);\n}\n"}
{"nl": "is the current object selected?", "code": "public boolean isCurrentSelected(){\n  return isCurrentSet() && selected.contains(current);\n}\n"}
{"nl": "performs the triangulation test described in Huson et al, A statistical test for detecting taxonomic inhomogeneity in replicated metagenomic samples", "code": "public boolean apply(ClusterViewer clusterViewer,String attributeThatDefinesBiologicalSamples){\n  final SampleAttributeTable sampleAttributeTable=clusterViewer.getDocument().getSampleAttributeTable();\n  final ArrayList<Triplet<String,String,String>> triangles=computeTriangluation(sampleAttributeTable,attributeThatDefinesBiologicalSamples);\n  System.err.println(\"Triangulation (\" + triangles.size() + \"):\");\n  for (  Triplet<String,String,String> triangle : triangles) {\n    System.err.println(triangle.toString());\n  }\n  final int minNumberOfNonConflictedTrianglesRequired=computeMinNumberOfNonConflictedTrianglesRequired(triangles.size());\n  System.err.println(\"Minimum number of non-conflicted triangles required to reject H0: \" + minNumberOfNonConflictedTrianglesRequired);\n  final Taxa taxa=clusterViewer.getTaxa();\n  final Distances distances=clusterViewer.getDistances();\n  int numberOfNonconflictedTriangles=0;\n  for (  Triplet<String,String,String> triangle : triangles) {\n    double ab=distances.get(taxa.indexOf(triangle.get1()),taxa.indexOf(triangle.get2()));\n    double ac=distances.get(taxa.indexOf(triangle.get1()),taxa.indexOf(triangle.get3()));\n    double bc=distances.get(taxa.indexOf(triangle.get2()),taxa.indexOf(triangle.get3()));\n    if (ac < ab || bc < ab) {\n      System.err.println(\"Conflicted triangle a=\" + triangle.get1() + \",b=\"+ triangle.get2()+ \" vs c=\"+ triangle.get3()+ \", distances: \"+ String.format(\"ab=%.4f, ac=%.4f, bc=%.4f\",ab,ac,bc));\n    }\n else     numberOfNonconflictedTriangles++;\n  }\n  if (numberOfNonconflictedTriangles < minNumberOfNonConflictedTrianglesRequired)   System.err.println(\"Insufficient number of non-conflicted triangles: \" + numberOfNonconflictedTriangles + \", null hypothesis not rejected\");\n  return numberOfNonconflictedTriangles >= minNumberOfNonConflictedTrianglesRequired;\n}\n"}
{"nl": "Tests the CloseOutputStream method, the test is successful when the stream is correctly closed", "code": "public final void testCloseOutputStream(){\n  FallbackFileController fFileController=new FallbackFileController(PATH);\n  try {\n    fFileController.closeFallbackOutputStream();\n  }\n catch (  DataFallbackException e) {\n    fail(\"The OutputStream could not be closed\");\n  }\n  assertNull(fFileController.getOutput());\n}\n"}
{"nl": "Constructs a new async result filter event", "code": "public AsyncResultFilterEvent(AsyncResult<T> currentResult,AsyncResult<T>[] receivedResults,int totalExpectedResults){\n  this.currentResult=currentResult;\n  this.receivedResults=receivedResults;\n  this.totalExpectedResults=totalExpectedResults;\n}\n"}
{"nl": "Set filters", "code": "public VideoSearchQuery filters(List<VideoSearchFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "does this searcher support find all?", "code": "public boolean canFindAll(){\n  return true;\n}\n"}
{"nl": "Toggles headers between type and alphabetic", "code": "private void toggleAlphabetic(){\n  List<Pokemon> pokemonList=Pokedex.getAllPokemonAlphabetic();\n  List<UndoAdapter.UndoItem> list=new ArrayList<>();\n  if (isAlphabetic) {\n    for (int i=0; i < pokemonList.size(); i++) {\n      UndoAdapter.UndoItem undoItem=new UndoAdapter.UndoItem(pokemonList.get(i).type,pokemonList.get(i));\n      list.add(i,undoItem);\n    }\n    isAlphabetic=false;\n  }\n else {\n    for (int i=0; i < pokemonList.size(); i++) {\n      UndoAdapter.UndoItem undoItem=new UndoAdapter.UndoItem(pokemonList.get(i).name.substring(0,1),pokemonList.get(i));\n      list.add(i,undoItem);\n    }\n    isAlphabetic=true;\n  }\n  adapter.swap(list);\n}\n"}
{"nl": "use an incense", "code": "public void useIncense(ItemId type) throws RemoteServerException, LoginFailedException {\n  UseIncenseMessage useIncenseMessage=UseIncenseMessage.newBuilder().setIncenseType(type).setIncenseTypeValue(type.getNumber()).build();\n  ServerRequest useIncenseRequest=new ServerRequest(RequestType.USE_INCENSE,useIncenseMessage);\n  api.getRequestHandler().sendServerRequests(useIncenseRequest);\n  try {\n    UseIncenseResponse response=UseIncenseResponse.parseFrom(useIncenseRequest.getData());\n    Log.i(\"Main\",\"Use incense result: \" + response.getResult());\n  }\n catch (  InvalidProtocolBufferException e) {\n    throw new RemoteServerException(e);\n  }\n}\n"}
{"nl": "Exclude any relations that are mapped to an encountered resource", "code": "public static Var map(Relation relation){\n  if (isHasResourceRelation(relation)) {\n    return var();\n  }\n  Var var=base(relation);\n  var=roleplayers(var,relation);\n  return var;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set showAminoAcids=true;\");\n}\n"}
{"nl": "pixel to dip", "code": "public static int px2dip(Context context,float pxValue){\n  if (context == null) {\n    return 0;\n  }\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(pxValue / scale + 0.5f);\n}\n"}
{"nl": "Checks if checkbox in AemSidekick grid row is selected", "code": "public boolean isGridRowCheckboxSelected(){\n  return gridRow.getAttribute(HtmlTags.Attributes.CLASS).contains(ROW_SELECTED_CLASS);\n}\n"}
{"nl": "Remember to clean the is_new flag", "code": "@Override public void do_after_propagation(){\n  for (  PtInsIntervalManager pim : pt_objs.values()) {\n    pim.flush();\n  }\n  new_pts=new HashMap<AllocNode,PtInsIntervalManager>();\n}\n"}
{"nl": "Returns true if this query is a stored procedure", "code": "public boolean isStoredProcedure(){\n  if (_expression == null)   return false;\n  String trimmed=_expression.trim();\n  return CALL.matcher(trimmed).matches();\n}\n"}
{"nl": "notify that creature attacked by dot's hit", "code": "public void notifyDotAttackedObservers(Creature creature,Effect effect){\n  notifyObservers(ObserverType.DOT_ATTACKED,creature,effect);\n}\n"}
{"nl": "Returns all values from all list sections in the project views, in order", "code": "public <T>List<T> listItems(SectionKey<T,ListSection<T>> key){\n  List<T> result=Lists.newArrayList();\n  for (  ListSection<T> section : getSections(key)) {\n    result.addAll(section.items());\n  }\n  return result;\n}\n"}
{"nl": "Update state index", "code": "@Override public void updateStateIndex(MutationBatch batch,Experiment experiment) throws ConnectionException {\n  updateStateIndex(batch,experiment.getID(),experiment.getState() != State.DELETED ? ExperimentsKeyspace.ExperimentStateIndexKey.NOT_DELETED : ExperimentsKeyspace.ExperimentStateIndexKey.DELETED);\n}\n"}
{"nl": "Convenience function to snap the top position", "code": "private static int snapTop(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int top,ArrayList<SnapCandidate> snapCandidates){\n  return snapVertical(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.TOP),top,snapCandidates);\n}\n"}
{"nl": "Creates location to the given offset and length for the compilation unit", "code": "public static Location toLocation(ICompilationUnit unit,int offset,int length) throws JavaModelException {\n  Location result=new Location();\n  result.setUri(getFileURI(unit));\n  int[] loc=JsonRpcHelpers.toLine(unit.getBuffer(),offset);\n  int[] endLoc=JsonRpcHelpers.toLine(unit.getBuffer(),offset + length);\n  Range range=new Range();\n  if (loc != null) {\n    range.withStart(new Position().withLine(loc[0]).withCharacter(loc[1]));\n  }\n  if (endLoc != null) {\n    range.withEnd(new Position().withLine(endLoc[0]).withCharacter(endLoc[1]));\n  }\n  return result.withRange(range);\n}\n"}
{"nl": "paint the selection rectangle", "code": "public void paintSelection(Graphics g0){\n  Graphics2D g=(Graphics2D)g0;\n  SelectedBlock selectedBlock=getSelectedBlock();\n  if (selectedBlock.isSelected()) {\n    Rectangle2D rect=new Rectangle2D.Double(Math.max(0,getX(selectedBlock.getFirstCol())),0,0,0);\n    rect.add(Math.min(getX(selectedBlock.getLastCol() + 1),getSize().getWidth()),getSize().height);\n    g.setColor(highlightColorSemiTransparent);\n    g.fill(rect);\n    g.setColor(highlightColor);\n    g.draw(rect);\n  }\n}\n"}
{"nl": "Emit event", "code": "public static void emit(String event,Object... args){\n  if (instance.events.containsKey(event) && !instance.disabled.contains(event)) {\n    instance.events.get(event).run(args);\n    log(event + \" emitted\",args);\n  }\n else   log(event + \" not exist\");\n}\n"}
{"nl": "Initialize the client", "code": "public AirMapClient(final String apiKey,final String token){\n  this.authToken=token;\n  this.xApiKey=apiKey;\n  clearAndResetHeaders();\n}\n"}
{"nl": "Logs to the logs directory a formatted CSV of the supplied list strings", "code": "private void logIndexed(String repoName,List<String[]> reportList){\n  try {\n    CSVWriter writer=new CSVWriter(new FileWriter(Helpers.getLogPath() + repoName + \".csv.tmp\"));\n    writer.writeAll(reportList);\n    writer.flush();\n    writer.close();\n    Path source=Paths.get(Helpers.getLogPath() + repoName + \".csv.tmp\");\n    Files.move(source,source.resolveSibling(repoName + \".csv\"),StandardCopyOption.REPLACE_EXISTING);\n  }\n catch (  IOException ex) {\n    Singleton.getLogger().warning(\"ERROR - caught a \" + ex.getClass() + \" in \"+ this.getClass()+ \" logIndexed for \"+ repoName+ \"\\n with message: \"+ ex.getMessage());\n  }\n}\n"}
{"nl": "Add multiple long columns, with no restrictions on the allowable values", "code": "public Builder addColumnsLong(String... names){\n  for (  String s : names)   addColumnLong(s);\n  return this;\n}\n"}
{"nl": "Updates the DAQ by removing a whole EquipmentUnit", "code": "public ChangeReport onEquipmentUnitRemove(final EquipmentUnitRemove equipmentUnitRemove){\n  log.debug(\"onEquipmentUnitRemove - entering onEquipmentUnitRemove()..\");\n  ChangeReport changeReport=new ChangeReport(equipmentUnitRemove);\n  changeReport.setState(CHANGE_STATE.SUCCESS);\n  ProcessConfiguration processConfiguration=configurationController.getProcessConfiguration();\n  if (processConfiguration.getEquipmentConfiguration(equipmentUnitRemove.getEquipmentId()) == null) {\n    changeReport.appendError(\"Equipment unit id: \" + equipmentUnitRemove.getEquipmentId() + \" is unknown\");\n    changeReport.setState(CHANGE_STATE.FAIL);\n    return changeReport;\n  }\n  if (!unregisterEquipmentUnit(equipmentUnitRemove.getEquipmentId())) {\n    changeReport.setState(CHANGE_STATE.REBOOT);\n    changeReport.appendWarn(\"problem detected while unregistering equipment id: \" + equipmentUnitRemove.getEquipmentId() + \". You need to restart the DAQ\");\n  }\n  return changeReport;\n}\n"}
{"nl": "copy file in assets into destination file", "code": "public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {\n  String abi=Build.CPU_ABI;\n  String libraryName;\n  if (abi.equalsIgnoreCase(\"armeabi\")) {\n    libraryName=\"armeabi\";\n  }\n else   if (abi.equalsIgnoreCase(\"x86\")) {\n    libraryName=\"x86\";\n  }\n else   if (abi.contains(\"armeabi-v7\")) {\n    libraryName=\"armeabi-v7a\";\n  }\n else {\n    return;\n  }\n  AssetManager manager=context.getAssets();\n  final InputStream is=manager.open(libraryName + \"/\" + assetsFilename);\n  copyFile(file,is,mode);\n}\n"}
{"nl": "Type of notifications to return", "code": "public NotificationsGetQuery filters(NotificationsGetFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "Quest Steps/Finish (2)", "code": "public SM_QUEST_ACTION(int questId,QuestStatus status,int step){\n  this.action=2;\n  this.questId=questId;\n  this.status=status.value();\n  this.step=step;\n}\n"}
{"nl": "This method will add a record both key and value to list object it will keep track of how many record is processed, to handle limit scenario", "code": "@Override public List<Object[]> collectData(AbstractScannedResult scannedResult,int batchSize){\n  List<Object[]> listBasedResult=new ArrayList<>(batchSize);\n  QueryMeasure[] queryMeasures=tableBlockExecutionInfos.getQueryMeasures();\n  ByteArrayWrapper wrapper=null;\n  int rowCounter=0;\n  while (scannedResult.hasNext() && rowCounter < batchSize) {\n    Object[] row=new Object[1 + queryMeasures.length];\n    wrapper=new ByteArrayWrapper();\n    wrapper.setDictionaryKey(scannedResult.getDictionaryKeyArray());\n    wrapper.setNoDictionaryKeys(scannedResult.getNoDictionaryKeyArray());\n    wrapper.setComplexTypesKeys(scannedResult.getComplexTypeKeyArray());\n    row[0]=wrapper;\n    fillMeasureData(row,1,scannedResult);\n    listBasedResult.add(row);\n    rowCounter++;\n  }\n  updateData(listBasedResult);\n  return listBasedResult;\n}\n"}
{"nl": "entry function for encoding", "code": "public void encoding(){\n  if (stripe_unit_size % block_nbr != 0) {\n    throw new RuntimeException(\" Cannot  striping. wrong DATA_LENGTH!\");\n  }\n  STAR_encoding_row();\n  STAR_encoding_diag1();\n  STAR_encoding_diag2();\n}\n"}
{"nl": "Only contains transient or static fields, which is the case for a model that is empty, but says it \"implements Parcelable\"", "code": "private static boolean containsOnlyTransientAndStaticFields(List<Field> fields){\n  boolean containsNormalField=false;\n  for (  Field field : fields) {\n    if (!Modifier.isTransient(field.getModifiers()) && !Modifier.isStatic(field.getModifiers())) {\n      containsNormalField=true;\n    }\n  }\n  return !containsNormalField;\n}\n"}
{"nl": "This returns the combination of n choose r", "code": "public static double combination(double n,double r){\n  double nFac=MathUtils.factorial(n);\n  double rFac=MathUtils.factorial(r);\n  double nMinusRFac=MathUtils.factorial((n - r));\n  return nFac / (rFac * nMinusRFac);\n}\n"}
{"nl": "List of application ID", "code": "public AppsGetQuery appIds(List<String> value){\n  return unsafeParam(\"app_ids\",value);\n}\n"}
{"nl": "Convenience function to snap the height", "code": "private static int snapHeight(Collection<ConstraintWidget> widgets,ConstraintWidget widget,int height,ArrayList<SnapCandidate> snapCandidates){\n  int bottomPosition=widget.getDrawY() + height;\n  bottomPosition=snapVertical(widgets,widget,widget.getAnchor(ConstraintAnchor.Type.BOTTOM),bottomPosition,snapCandidates);\n  height=bottomPosition - widget.getDrawY();\n  return height;\n}\n"}
{"nl": "Post the saved video on a user's wall", "code": "public VideoSaveQuery wallpost(Boolean value){\n  return unsafeParam(\"wallpost\",value);\n}\n"}
{"nl": "Set user id", "code": "protected AccountGetAppPermissionsQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Npc starts dancing iu 3", "code": "public static final void emoteStartDancing3(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,142,0));\n}\n"}
{"nl": "Return the distance between point and the line defined as passing through the origin and lineVec", "code": "public static double lineDistance(Vec3 lineVec,Vec3 point){\n  double mag=lineVec.lengthVector();\n  Vec3 nPoint=scale(point,-1);\n  return lineVec.crossProduct(nPoint).lengthVector() / mag;\n}\n"}
{"nl": "elapsedMinuted Get the elapsed minutes between two dates", "code": "public static long elapsedMilliseconds(Date dateStart,Date dateEnd){\n  return dateEnd.getTime() - dateStart.getTime();\n}\n"}
{"nl": "Gets the number of key-value context pairs in the set", "code": "public int size(){\nsynchronized (contexts) {\n    return contexts.size();\n  }\n}\n"}
{"nl": "keep alive one lease only once", "code": "@Override public ListenableFuture<LeaseKeepAliveResponse> keepAliveOnce(long leaseId){\n  StreamObserver<LeaseKeepAliveRequest> requestObserver=this.leaseStub.leaseKeepAlive(keepAliveResponseStreamObserver);\n  requestObserver.onNext(newKeepAliveRequest(leaseId));\n  requestObserver.onCompleted();\n  throw new UnsupportedOperationException();\n}\n"}
{"nl": "This method logs the DEBUG message", "code": "public final void debug(final Object o,final Throwable t){\n  log(Level.DEBUG,o,t);\n}\n"}
{"nl": "show the dialog and choose the projects", "code": "public List<Integer> showDialog(Director defaultDir){\n  setupDialog(defaultDir);\n  getContentPane().validate();\n  setSize(getPreferredSize());\n  setVisible(true);\n  return result;\n}\n"}
{"nl": "Check if provided url and current url are the same", "code": "public static ExpectedCondition<Boolean> pageUrlIs(final String url){\n  return null;\n}\n"}
{"nl": "given an entry and a template, return true if dirty-read should be performed", "code": "public boolean indicateDirtyRead(ITemplateHolder template){\n  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());\n}\n"}
{"nl": "Checks whether the given method dynamically registers a new broadcast receiver", "code": "private void analyzeMethodForDynamicBroadcastReceiver(SootMethod method){\n  if (!method.isConcrete() || !method.hasActiveBody())   return;\n  for (  Unit u : method.getActiveBody().getUnits()) {\n    Stmt stmt=(Stmt)u;\n    if (stmt.containsInvokeExpr()) {\n      if (stmt.getInvokeExpr().getMethod().getName().equals(\"registerReceiver\") && stmt.getInvokeExpr().getArgCount() > 0 && isInheritedMethod(stmt,\"android.content.ContextWrapper\",\"android.content.Context\")) {\n        Value br=stmt.getInvokeExpr().getArg(0);\n        if (br.getType() instanceof RefType) {\n          RefType rt=(RefType)br.getType();\n          dynamicManifestComponents.add(rt.getClassName());\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "clone this split", "code": "public Object clone(){\n  Split result=new Split();\n  result.copy(this);\n  return result;\n}\n"}
{"nl": "Changes item place in a collection", "code": "public MarketReorderItemsQuery reorderItems(UserActor actor,int ownerId,int itemId){\n  return new MarketReorderItemsQuery(getClient(),actor,ownerId,itemId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosDeleteQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n"}
{"nl": "Set counters", "code": "public SecureSetCounterQuery counters(String... value){\n  return unsafeParam(\"counters\",value);\n}\n"}
{"nl": "Verifies that there is at least one element, and that there are no duplicates;", "code": "static void verify(Principal[] principals) throws InvalidObjectException {\n  if (principals == null || principals.length == 0) {\n    throw new InvalidObjectException(\"cannot create constraint with no elements\");\n  }\n  for (int i=principals.length; --i >= 0; ) {\n    Principal p=principals[i];\n    if (p == null) {\n      throw new InvalidObjectException(\"elements cannot be null\");\n    }\n    if (contains(principals,i,p)) {\n      throw new InvalidObjectException(\"cannot create constraint with duplicate elements\");\n    }\n  }\n}\n"}
{"nl": "Find a Class using the specified ClassLoader", "code": "static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    final int lastDot=className.lastIndexOf(\".\");\n    String packageName=className;\n    if (lastDot != -1)     packageName=className.substring(0,lastDot);\n    security.checkPackageAccess(packageName);\n  }\n  Class providerClass;\n  if (cl == null) {\n    providerClass=Class.forName(className);\n  }\n else {\n    try {\n      providerClass=cl.loadClass(className);\n    }\n catch (    ClassNotFoundException x) {\n      if (doFallback) {\n        ClassLoader current=ObjectFactory.class.getClassLoader();\n        if (current == null) {\n          providerClass=Class.forName(className);\n        }\n else         if (cl != current) {\n          cl=current;\n          providerClass=cl.loadClass(className);\n        }\n else {\n          throw x;\n        }\n      }\n else {\n        throw x;\n      }\n    }\n  }\n  return providerClass;\n}\n"}
{"nl": "Search query, for example \"pink slippers\"", "code": "public MarketSearchQuery q(String value){\n  return unsafeParam(\"q\",value);\n}\n"}
{"nl": "Creates a new instance of CompleteLinkClusterer", "code": "public CompleteLinkClusterer(){\n}\n"}
{"nl": "Parses the Manifest File", "code": "private static boolean parse(){\n  URLClassLoader cLoader=(URLClassLoader)ManifestParser.class.getClassLoader();\n  try {\n    URL url=cLoader.findResource(\"META-INF/MANIFEST.MF\");\n    manifest=new Manifest(url.openStream());\n    return true;\n  }\n catch (  IOException ex) {\n    ex.printStackTrace();\n    return false;\n  }\n}\n"}
{"nl": "Removes the reference to the PersistenceManager object", "code": "private void resetPersistenceManager(){\n  persistenceManager=null;\n}\n"}
{"nl": "is this object contained in the SL ?", "code": "public boolean contains(T obj){\n  throw new RuntimeException(\"ConcurrentSegmentedStoredList::contains not supported\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LikesGetListQueryWithExtended(VkApiClient client,LikesType type){\n  super(client,\"likes.getList\",GetListExtendedResponse.class);\n  type(type);\n  extended(true);\n}\n"}
{"nl": "Outputs a debug message if debugging is turned on", "code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n"}
{"nl": "Returns the values defined in the map", "code": "public Array<T> values(){\n  Array<T> out=new JavaArray<>();\n  for (  T value : internalMap.values()) {\n    out.push(value);\n  }\n  return out;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"show window=message;\");\n  execute(\"list assignmentsToLevels;\");\n}\n"}
{"nl": "Given an array of bytes it will convert the bytes to a hex string representation of the bytes", "code": "public static String byteToHexString(byte[] bytes,int start,int end){\n  if (bytes == null) {\n    throw new IllegalArgumentException(\"bytes == null\");\n  }\n  StringBuilder s=new StringBuilder();\n  for (int i=start; i < end; i++) {\n    s.append(String.format(\"%02x\",bytes[i]));\n  }\n  return s.toString();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQuery(VkApiClient client,UserActor actor,String groupId){\n  super(client,\"groups.isMember\",BoolInt.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "Calls the OnChartGestureListener to do the end callback", "code": "public void endAction(MotionEvent me){\n  OnChartGestureListener l=mChart.getOnChartGestureListener();\n  if (l != null) {\n    l.onChartGestureEnd(me,mLastGesture);\n  }\n}\n"}
{"nl": "Set levels", "code": "public SecureSetUserLevelQuery levels(List<String> value){\n  return unsafeParam(\"levels\",value);\n}\n"}
{"nl": "Fireworks *", "code": "private void drawFireworks(final Canvas canvas){\n  if (!mIsAnimationStarted || mRocketAnimationPercent < 0.95f) {\n    return;\n  }\n  mFireworksDrawer.draw(canvas,canvas.getWidth(),(int)getCurveYStart());\n}\n"}
{"nl": "Constructs a new chatlog with all required information", "code": "public Chatlog(String link,String user,Date creation){\n  this.link=link;\n  this.user=user;\n  this.creation=creation;\n}\n"}
{"nl": "Initialize this VisualTable", "code": "protected void init(Visualization vis,String group,Schema schema){\n  setVisualization(vis);\n  setGroup(group);\n  addColumns(schema);\n  if (canGetBoolean(VisualItem.VISIBLE))   index(VisualItem.VISIBLE);\n  if (canGetBoolean(VisualItem.STARTVISIBLE))   index(VisualItem.STARTVISIBLE);\n  if (canGetBoolean(VisualItem.VALIDATED))   index(VisualItem.VALIDATED);\n}\n"}
{"nl": "Used for calculating top part of simple regression for beta 1", "code": "public static double sumOfMeanDifferencesOnePoint(double[] vector){\n  double mean=sum(vector) / vector.length;\n  double ret=0;\n  for (int i=0; i < vector.length; i++) {\n    double vec1Diff=Math.pow(vector[i] - mean,2);\n    ret+=vec1Diff;\n  }\n  return ret;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetCountQuery(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"audio.getCount\",Integer.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n}\n"}
{"nl": "Reads an NBT list from the buffer", "code": "public static NBTTagList readNBTList(PacketBuffer buf){\n  NBTTagList value=new NBTTagList();\n  for (int i=0; i < buf.readInt(); i++) {\n    value.set(i,buf.readNBTTagCompoundFromBuffer());\n  }\n  return value;\n}\n"}
{"nl": "Used for testing -- input is a full csv line: <freq,domain,ip,ts,opt:generic>", "code": "public static String extractCSVOutputLineFreq(String csvOut){\n  String tokens[]=csvOut.split(\",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\",-1);\n  return tokens[0];\n}\n"}
{"nl": "Hide overlapping container, all overlapping view will be hidden", "code": "public void hideOverlappingContainer(){\n  mFrameLayoutOverlappingViewContainer.setVisibility(GONE);\n}\n"}
{"nl": "Return additional \"likes\", \"comments\", and \"tags\" fields", "code": "protected PhotosGetQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Use Uri as the pdf source, for use with content provider", "code": "public Configurator fromUri(Uri uri){\n  return new Configurator(uri.toString(),false);\n}\n"}
{"nl": "Return an additional \"likes\" field", "code": "public VideoGetCommentsQueryWithExtended needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "Adds a Job, and starts a Scheduler when none was yet started", "code": "protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){\n  String jobName=clazz.getName();\n  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();\n  JobDetail job=new JobDetail(jobName,jobGroup,clazz);\n  job.setDurability(false);\n  job.setVolatility(true);\n  job.setDescription(jobName);\n  try {\n    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);\n    if (scheduler == null) {\n      if (schedulerProperties == null) {\n        schedulerProperties=getDefaultSchedulerProperties();\n      }\n      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();\n      scheduler.start();\n    }\n    Date date=scheduler.scheduleJob(job,trigger);\n    Logger.info(this,\"Scheduled job \" + jobName + \", next trigger is on \"+ date);\n  }\n catch (  ParseException e) {\n    Logger.error(this,\"Cron expression '\" + cronExpression + \"' has an exception. Throwing IllegalArgumentException\",e);\n    throw new IllegalArgumentException(e);\n  }\ncatch (  SchedulerException e) {\n    Logger.error(this,\"Unable to schedule job \" + jobName,e);\n  }\n}\n"}
{"nl": "Who can view the wiki page", "code": "public PagesSaveAccessQuery view(PagesSaveAccess value){\n  return unsafeParam(\"view\",value);\n}\n"}
{"nl": "println the object to end-user", "code": "final public void println(Object o){\n  print(o + \"<br>\");\n}\n"}
{"nl": "reset timer", "code": "private void resetTimer(){\n  if (mTimer != null) {\n    mTimer.cancel();\n    mTimer.purge();\n    mTimer=null;\n    times_current=0;\n  }\n}\n"}
{"nl": "upload appender file to storage server (by file buff)", "code": "public String[] upload_appender_file(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE,group_name,null,null,file_ext_name,file_buff.length,new UploadBuff(file_buff,0,file_buff.length),meta_list);\n}\n"}
{"nl": "Show soft keyboard", "code": "public static void showSoftKeyboard(Context context,View view){\n  view.setFocusable(true);\n  view.setFocusableInTouchMode(true);\n  view.requestFocus();\n  InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\n  inputManager.showSoftInput(view,0);\n}\n"}
{"nl": "assumes correct representation of a long value for  specified radix in scanner buffer from <code>start</code>  to <code>end</code>", "code": "private long parseLong(int start,int end,int radix){\n  long result=0;\n  long digit;\n  for (int i=start; i < end; i++) {\n    digit=Character.digit(yycharat(i),radix);\n    result*=radix;\n    result+=digit;\n  }\n  return result;\n}\n"}
{"nl": "Extracts a zip entry (file entry)", "code": "private static void extractFile(ZipInputStream zipIn,String filePath) throws IOException {\n  BufferedOutputStream bos=new BufferedOutputStream(new FileOutputStream(filePath));\n  byte[] bytesIn=new byte[BUFFER_SIZE];\n  int read=0;\n  while ((read=zipIn.read(bytesIn)) != -1) {\n    bos.write(bytesIn,0,read);\n  }\n  bos.close();\n}\n"}
{"nl": "This loads the parameters form mWidget the ConstraintWidget", "code": "private void configureUI(){\n  if (mWidget == null) {\n    return;\n  }\n  int top=getMargin(ConstraintAnchor.Type.TOP);\n  int left=getMargin(ConstraintAnchor.Type.LEFT);\n  int right=getMargin(ConstraintAnchor.Type.RIGHT);\n  int bottom=getMargin(ConstraintAnchor.Type.BOTTOM);\n  boolean baseline=hasBaseline();\n  boolean showVerticalSlider=bottom != UNCONNECTED && top != UNCONNECTED;\n  boolean showHorizontalSlider=left != UNCONNECTED && right != UNCONNECTED;\n  if (showHorizontalSlider) {\n    float bias=mWidget.getHorizontalBiasPercent();\n    mHorizontalSlider.setValue((int)(bias * 100));\n  }\n  if (showVerticalSlider) {\n    float bias=mWidget.getVerticalBiasPercent();\n    mVerticalSlider.setValue(100 - (int)(bias * 100));\n  }\n  mVerticalSlider.setEnabled(showVerticalSlider);\n  mHorizontalSlider.setEnabled(showHorizontalSlider);\n  mHorizontalSlider.invalidate();\n  mVerticalSlider.invalidate();\n  mVerticalSlider.setToolTipText(showVerticalSlider ? VERTICAL_TOOL_TIP_TEXT : null);\n  mHorizontalSlider.setToolTipText(showHorizontalSlider ? HORIZONTAL_TOOL_TIP_TEXT : null);\n  int widthVal=convert(mWidget.getHorizontalDimensionBehaviour());\n  int heightValue=convert(mWidget.getVerticalDimensionBehaviour());\n  mMain.configureUi(bottom,top,left,right,baseline,widthVal,heightValue);\n}\n"}
{"nl": "Validate the input of the text view validate all validators", "code": "private void validate(String value){\n  for (int i=0; i < validators.size(); i++) {\n    if (!validators.get(i).validate(value)) {\n      onValidationErrorListener.onError(input,inputParent,validators.get(i).getValidationMessage());\n    }\n  }\n}\n"}
{"nl": "start the modification process", "code": "public void startModification() throws IOException {\n  io=new InputOutputReaderWriter(new File(getFileName()),READ_WRITE);\n  getClassificationsFooter().clear();\n  io.seek(getFileFooter().getClassificationsStart());\n  io.setLength(io.getPosition());\n}\n"}
{"nl": "Creates a new instance of DocumentNGramSymWinDistroGraph", "code": "public DocumentNGramSymWinDistroGraph(){\n  InitGraphs();\n}\n"}
{"nl": "Compiles the given path into the compiled form", "code": "private Object[] compile(String path){\n  List list=new ArrayList();\n  if (path == null) {\n    return list.toArray();\n  }\n  StringTokenizer tok=new StringTokenizer(path,\":.\");\n  while (tok.hasMoreTokens()) {\n    String token=tok.nextToken();\n    OpEnum op=OpEnum.getInstance(token);\n    if (op == null) {\n      throw new Error(\"Bad path compiled \" + path);\n    }\n    list.add(op);\n    if (op == OpEnum.RELATION) {\n      list.add(tok.nextToken());\n    }\n  }\n  return list.toArray();\n}\n"}
{"nl": "Convert Any to SingleWidgetView flags", "code": "private static int convert(ConstraintWidget.DimensionBehaviour behaviour){\nswitch (behaviour) {\ncase FIXED:\n    return SingleWidgetView.FIXED;\ncase WRAP_CONTENT:\n  return SingleWidgetView.WRAP_CONTENT;\ncase ANY:\nreturn SingleWidgetView.ANY;\n}\nreturn SingleWidgetView.FIXED;\n}\n"}
{"nl": "Retrieve per-node gossip data by key", "code": "public GossipDataMessage findPerNodeData(String nodeId,String key){\n  return getGossipManager().findPerNodeGossipData(nodeId,key);\n}\n"}
{"nl": "returns the LCA of a set of taxon ids", "code": "public int computeNaiveLCA(Collection<Integer> taxonIds){\n  if (taxonIds.size() == 0)   return IdMapper.NOHITS_ID;\n else   if (taxonIds.size() == 1)   return taxonIds.iterator().next();\n  if (taxonIds.size() > addresses.length) {\n    addresses=new String[taxonIds.size()];\n    weights=new int[taxonIds.size()];\n  }\n  int numberOfAddresses=0;\n  for (  Integer taxonId : taxonIds) {\n    if (!TaxonomyData.isTaxonDisabled(taxonId)) {\n      String address=TaxonomyData.getAddress(taxonId);\n      if (address != null) {\n        addresses[numberOfAddresses++]=address;\n      }\n    }\n  }\n  if (numberOfAddresses > 0) {\n    final String address=LCAAddressing.getCommonPrefix(addresses,numberOfAddresses,true);\n    return TaxonomyData.getAddress2Id(address);\n  }\n  return IdMapper.UNASSIGNED_ID;\n}\n"}
{"nl": "Parses, validates and computes normalized version of gMonthDay object", "code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  date.year=YEAR;\n  if (str.charAt(0) != '-' || str.charAt(1) != '-') {\n    throw new SchemaDateTimeException(\"Invalid format for gMonthDay: \" + str);\n  }\n  date.month=parseInt(str,2,4);\n  int start=4;\n  if (str.charAt(start++) != '-') {\n    throw new SchemaDateTimeException(\"Invalid format for gMonthDay: \" + str);\n  }\n  date.day=parseInt(str,start,start + 2);\n  if (MONTHDAY_SIZE < len) {\n    if (!isNextCharUTCSign(str,MONTHDAY_SIZE,len)) {\n      throw new SchemaDateTimeException(\"Error in month parsing:\" + str);\n    }\n else {\n      getTimeZone(str,date,MONTHDAY_SIZE,len);\n    }\n  }\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  date.position=1;\n  return date;\n}\n"}
{"nl": "generate splits for this run", "code": "private InputSplit[] generateDebugSplits(Path input_path,JobConf job){\n  long block_size=localFs.getDefaultBlockSize();\n  System.out.println(\"default block size: \" + (block_size / 1024 / 1024) + \"MB\");\n  FileInputFormat.setInputPaths(job,input_path);\n  TextInputFormat format=new TextInputFormat();\n  format.configure(job);\n  int numSplits=1;\n  InputSplit[] splits=null;\n  try {\n    splits=format.getSplits(job,numSplits);\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n  return splits;\n}\n"}
{"nl": "Resets the audio clock", "code": "public synchronized void resetTime(){\n}\n"}
{"nl": "Search for an annotation", "code": "private MarkerOptions searchForId(String id){\n  for (  MarkerOptions options : markers) {\n    if (options.getTitle().equals(id)) {\n      return options;\n    }\n  }\n  return null;\n}\n"}
{"nl": "yyyy-MM-dd hh:mm:ss", "code": "public static String dateToStringWithTime(Date date){\n  return dateToString(date,DATETIME_PATTERN);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return (getDoc().getMeganFile().isRMA2File() || getDoc().getMeganFile().isRMA3File()) || (getDoc().getSampleNames().size() > 0 && getDoc().getSampleAttributeTable().get(getDoc().getSampleNames().get(0),SampleAttributeTable.DescriptionAttribute) != null);\n}\n"}
{"nl": "Loads the samples from the byte bufer", "code": "public static Sample loadBinary(ByteBuffer bb) throws IOException {\n  int frameDataSize=bb.getInt();\n  short[] frameData=new short[frameDataSize];\n  for (int i=0; i < frameData.length; i++) {\n    frameData[i]=bb.getShort();\n  }\n  int residualDataSize=bb.getInt();\n  byte[] residualData=new byte[residualDataSize];\n  for (int i=0; i < residualData.length; i++) {\n    residualData[i]=bb.get();\n  }\n  return new Sample(frameData,residualData,residualDataSize);\n}\n"}
{"nl": "Creates an exception with a detailed message", "code": "public IDBPersistenceException(final String msg){\n  super(msg);\n}\n"}
{"nl": "Gets the ip from the string returned by a ping", "code": "private String parseIpFromPing(String ping){\n  String ip=\"\";\n  if (ping.contains(FROM_PING) || ping.contains(SMALL_FROM_PING)) {\n    int index=ping.indexOf(FROM_PING);\n    if (index == 0) {\n      index=ping.indexOf(SMALL_FROM_PING);\n    }\n    ip=ping.substring(index + 5);\n    if (ip.contains(PARENTHESE_OPEN_PING)) {\n      int indexOpen=ip.indexOf(PARENTHESE_OPEN_PING);\n      int indexClose=ip.indexOf(PARENTHESE_CLOSE_PING);\n      ip=ip.substring(indexOpen + 1,indexClose);\n    }\n else {\n      ip=ip.substring(0,ip.indexOf(\"\\n\"));\n      if (ip.contains(\":\")) {\n        index=ip.indexOf(\":\");\n      }\n else {\n        index=ip.indexOf(\" \");\n      }\n      ip=ip.substring(0,index);\n    }\n  }\n else {\n    int indexOpen=ping.indexOf(PARENTHESE_OPEN_PING);\n    int indexClose=ping.indexOf(PARENTHESE_CLOSE_PING);\n    ip=ping.substring(indexOpen + 1,indexClose);\n  }\n  return ip;\n}\n"}
{"nl": "Returns true if field methodQpsMap is set (has been assigned a value) and false otherwise", "code": "public boolean isSetMethodQpsMap(){\n  return this.methodQpsMap != null;\n}\n"}
{"nl": "Fill in the values that can be derived from the selected min SDK level:", "code": "public void deriveValues(@NotNull ScopedStateStore stateStore,@NotNull Set<ScopedStateStore.Key> modified){\n  myMinSdkCombobox.deriveValues(stateStore,modified);\n}\n"}
{"nl": "Binary log: finds the smallest power k such that 2^k>=n", "code": "public static int binaryLogUp(int n_){\n  int k=0;\n  while ((1 << k) < n_)   k++;\n  return k;\n}\n"}
{"nl": "add a file, if not already present and explicitly set its size", "code": "public int addFile(File file,Long fileSize){\n  int fileId=getFileId(file);\n  if (fileSize != null)   fileSizes.set(fileId,fileSize);\n  return fileId;\n}\n"}
{"nl": "Creates the taint wrapper for using library summaries", "code": "@SuppressWarnings({\"rawtypes\",\"unchecked\"}) private static ITaintPropagationWrapper createLibrarySummaryTW() throws IOException {\n  try {\n    Class clzLazySummary=Class.forName(\"soot.jimple.infoflow.methodSummary.data.impl.LazySummary\");\n    Object lazySummary=clzLazySummary.getConstructor(File.class).newInstance(new File(summaryPath));\n    ITaintPropagationWrapper summaryWrapper=(ITaintPropagationWrapper)Class.forName(\"soot.jimple.infoflow.methodSummary.taintWrappers.SummaryTaintWrapper\").getConstructor(clzLazySummary).newInstance(lazySummary);\n    final TaintWrapperSet taintWrapperSet=new TaintWrapperSet();\n    taintWrapperSet.addWrapper(summaryWrapper);\n    taintWrapperSet.addWrapper(new EasyTaintWrapper(\"EasyTaintWrapperConversion.txt\"));\n    return taintWrapperSet;\n  }\n catch (  ClassNotFoundException|NoSuchMethodException ex) {\n    System.err.println(\"Could not find library summary classes: \" + ex.getMessage());\n    ex.printStackTrace();\n    return null;\n  }\ncatch (  InvocationTargetException ex) {\n    System.err.println(\"Could not initialize library summaries: \" + ex.getMessage());\n    ex.printStackTrace();\n    return null;\n  }\ncatch (  IllegalAccessException|InstantiationException ex) {\n    System.err.println(\"Internal error in library summary initialization: \" + ex.getMessage());\n    ex.printStackTrace();\n    return null;\n  }\n}\n"}
{"nl": "Makes a new group object", "code": "@Override public Group apply(String name){\n  return new Group(name,plugin);\n}\n"}
{"nl": "Returns the specified variant", "code": "@Nullable public Variant findVariantByName(@NotNull String variantName){\n  return myVariantsByName.get(variantName);\n}\n"}
{"nl": "Limit the results of the query to certain categories", "code": "public void addCategoryLimitations(boolean include,Category... categories){\n  String[] categoryVelocityVarNames=new String[categories.length];\n  for (int i=0; i < categories.length; i++) {\n    categoryVelocityVarNames[i]=categories[i].getCategoryVelocityVarName();\n  }\n  addCategoryLimitations(include,categoryVelocityVarNames);\n}\n"}
{"nl": "record App Start", "code": "public static void recordAppStart(){\n  TcStatSdk.getInstance(context).recordAppStart();\n}\n"}
{"nl": "Add footer after all items and before TYPE_ABSOLUTE_FOOTER", "code": "public void addFooter(@LayoutRes int layoutId){\n  addFooter(layoutId,null);\n}\n"}
{"nl": "Gets the visible height of load footer", "code": "private final boolean isItemFilledScreen(){\n  return (getLastVisiblePosition() - getFirstVisiblePosition() + 1) < getCount();\n}\n"}
{"nl": "does the split split the given taxa?", "code": "public boolean splitsTaxa(BitSet taxa){\n  return A.intersects(taxa) && B.intersects(taxa);\n}\n"}
{"nl": "Required for Externalizable", "code": "public AbstractSpaceActionInfo(){\n}\n"}
{"nl": "store an element", "code": "public IObjectInfo<T> add(T subject){\n  return addImpl(subject,true);\n}\n"}
{"nl": "Must be called first when the resource is acquired only after ensureCapacity was called", "code": "public byte[] array(){\n  return _tempBuffer;\n}\n"}
{"nl": "Set ids", "code": "public AdsGetSuggestionsQueryWithSchools ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n"}
{"nl": "Returns when request failed", "code": "public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONObject errorResponse){\n}\n"}
{"nl": "Split a file into a list of directories ending with the file name", "code": "public static List<String> splitPath(File file){\n  List<String> output=new ArrayList<>();\n  File current=file;\n  while (current != null) {\n    output.add(current.getName());\n    current=current.getParentFile();\n  }\n  Collections.reverse(output);\n  return output;\n}\n"}
{"nl": "Required for Externalizable", "code": "public UnregisterReplicationNotificationRequestInfo(){\n}\n"}
{"nl": "Set peer id", "code": "public AccountSetSilenceModeQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n"}
{"nl": "compute the Shannon-Weaver diversity index in bits", "code": "public static String computeShannonWeaver(ViewerBase viewer,ProgressListener progressListener) throws IOException, CanceledException {\n  if (viewer instanceof MainViewer)   return toString(computeShannonWeaver((MainViewer)viewer,progressListener));\n else   if (viewer instanceof ClassificationViewer)   return toString(computeShannonWeaver((ClassificationViewer)viewer,progressListener));\n else   return null;\n}\n"}
{"nl": "dp to px", "code": "private int dp2px(float dpValue){\n  final float scale=getContext().getResources().getDisplayMetrics().density;\n  return (int)(dpValue * scale + 0.5f);\n}\n"}
{"nl": "Used to check if a recipe matches current crafting inventory", "code": "public boolean matches(InventoryCrafting inv,World worldIn){\n  ItemStack itemstack=null;\n  List<ItemStack> list=Lists.<ItemStack>newArrayList();\n  for (int i=0; i < inv.getSizeInventory(); ++i) {\n    ItemStack itemstack1=inv.getStackInSlot(i);\n    if (itemstack1 != null) {\n      if (itemstack1.getItem() instanceof ItemArmor) {\n        ItemArmor itemarmor=(ItemArmor)itemstack1.getItem();\n        if (itemarmor.getArmorMaterial() != CyberwareContent.trenchMat || itemstack != null) {\n          return false;\n        }\n        itemstack=itemstack1;\n      }\n else {\n        if (itemstack1.getItem() != Items.DYE) {\n          return false;\n        }\n        list.add(itemstack1);\n      }\n    }\n  }\n  return itemstack != null && !list.isEmpty();\n}\n"}
{"nl": "write json data to response", "code": "public static boolean writeJson(HttpServletResponse resp,Object msg){\n  return write(resp,\"application/json\",msg);\n}\n"}
{"nl": "Return the soonest actual renewal time", "code": "private long wakeupTime(){\n  if (leases.isEmpty())   return Long.MAX_VALUE;\n  return leases.lastKey().actualRenew;\n}\n"}
{"nl": "Reason for the complaint", "code": "public WallReportPostQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n"}
{"nl": "hilite the node", "code": "private void hilite(Node v){\n  NodeView nv=viewer.getNV(v);\n  if (nv.getLocation() == null)   return;\n{\n    int scaledWidth;\n    int scaledHeight;\n    if (nv.getShape() == NodeView.NONE_NODE) {\n      scaledWidth=scaledHeight=2;\n    }\n else {\n      if (nv.getFixedSize()) {\n        scaledWidth=nv.getWidth();\n        scaledHeight=nv.getHeight();\n      }\n else {\n        scaledWidth=NodeView.computeScaledWidth(viewer.trans,nv.getWidth());\n        scaledHeight=NodeView.computeScaledHeight(viewer.trans,nv.getHeight());\n      }\n    }\n    Point apt=viewer.trans.w2d(nv.getLocation());\n    apt.x-=(scaledWidth >> 1);\n    apt.y-=(scaledHeight >> 1);\n    gc.setColor(ProgramProperties.SELECTION_COLOR);\n    Shape shape=new Rectangle(apt.x - 2,apt.y - 2,scaledWidth + 4,scaledHeight + 4);\n    gc.fill(shape);\n    gc.setColor(ProgramProperties.SELECTION_COLOR_DARKER);\n    final Stroke oldStroke=gc.getStroke();\n    gc.setStroke(NodeView.NORMAL_STROKE);\n    gc.draw(shape);\n    gc.setStroke(oldStroke);\n  }\n}\n"}
{"nl": "Utility function to gather snap candidates on the horizontal axis", "code": "private static int snapHorizontal(Collection<ConstraintWidget> widgets,ConstraintWidget widget,ConstraintAnchor anchor,int position,ArrayList<SnapCandidate> snapCandidates){\n  SnapCandidate candidate=new SnapCandidate();\n  ConstraintHandle handle=WidgetInteractionTargets.constraintHandle(anchor);\n  handle.setDrawX(position);\n  SnapPlacement.snapAnchor(widgets,widget,anchor,candidate);\n  if (candidate.target != null) {\n    ConstraintHandle targetHandle=WidgetInteractionTargets.constraintHandle(candidate.target);\n    int tx=candidate.x;\n    if (targetHandle != null) {\n      tx=targetHandle.getDrawX();\n    }\n    position=tx + candidate.margin;\n    snapCandidates.add(candidate);\n  }\n  return position;\n}\n"}
{"nl": "Creates a Circle instance", "code": "public static Circle circle(Point center,double radius){\n  return new CircleImpl(center.getX(),center.getY(),radius);\n}\n"}
{"nl": "returns the next number of matches found", "code": "@Override public int next(){\n  moveToNext();\n  return matchesInResult;\n}\n"}
{"nl": "Execute an HTTP request without body", "code": "public static HttpResponse execute(HttpMethod method,String targetUrl) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {\n  return execute(method,targetUrl,null,null);\n}\n"}
{"nl": "Query the cluster in order to check, whether the given index is  existing", "code": "private boolean isIndexExisting(String index){\n  ActionFuture<IndicesExistsResponse> response=client.admin().indices().exists(new IndicesExistsRequest(index));\n  return response.actionGet(1000L).isExists();\n}\n"}
{"nl": "Returns the most dominate emotion", "code": "@NotNull public static String dominantEmotion(@NotNull Emotion emotion){\n  Map<Emotion.EmotionScore,Double> scores=emotion.scores.scores();\n  Emotion.EmotionScore key=scores.entrySet().stream().max(null).get().getKey();\n  return StringUtils.capitalize(key.name());\n}\n"}
{"nl": "Creates new cylider with given radius", "code": "public CylinderArea(ZoneName zoneName,int worldId,float x,float y,float radius,float minZ,float maxZ){\n  super(zoneName,worldId,minZ,maxZ);\n  this.centerX=x;\n  this.centerY=y;\n  this.radius=radius;\n}\n"}
{"nl": "Shutdown server", "code": "public void shutdownAll(){\n  ChannelGroupFuture future=channelGroup.close();\n  future.awaitUninterruptibly();\n  loginToClientChannelFactory.releaseExternalResources();\n  nioServer.shutdown();\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0,0.0282475249,0.0847425747,0.139825248255,0.167790297906,0.163595540458,0.137420253985,0.103065190489,0.070673273478,0.0450542118422,0.0270325271053,0.0154085404500,0.0084046584273};\n}\n"}
{"nl": "This method is called, when view is ready", "code": "public void onLoad(boolean viewRecreated){\n}\n"}
{"nl": "load the data section of the file as ascii text", "code": "private void loadTextData(DataInputStream dis) throws IOException {\n  for (int f=0; f < numFrames; f++) {\n    times[f]=Float.parseFloat(General.readWord(dis));\n    General.readWord(dis);\n    for (int c=0; c < numChannels; c++) {\n      frames[f][c]=Float.parseFloat(General.readWord(dis));\n    }\n  }\n}\n"}
{"nl": "<code>optional string name = 1;</code>", "code": "public Builder clearName(){\n  name_=getDefaultInstance().getName();\n  onChanged();\n  return this;\n}\n"}
{"nl": "Save a previous merge source location", "code": "public void saveMergeSource(String mergeFrom,String commonRoot){\n  List<String> fromUrls=new ArrayList<String>();\n  fromUrls.add(mergeFrom);\n  String previousFromUrls=null;\n  try {\n    previousFromUrls=Activator.getDefault().getDialogSettings().get(\"mergeFromUrls_\" + commonRoot);\n  }\n catch (  Exception e) {\n  }\n  if (previousFromUrls != null) {\n    String[] urls=previousFromUrls.split(\"\\\\,\");\n    for (    String url : urls) {\n      if (!fromUrls.contains(url))       fromUrls.add(url);\n    }\n  }\n  StringBuffer mergeFromBuffer=new StringBuffer(mergeFrom);\n  for (  String url : fromUrls) {\n    mergeFromBuffer.append(\",\" + url);\n  }\n  Activator.getDefault().getDialogSettings().put(\"mergeFromUrls_\" + commonRoot,mergeFromBuffer.toString());\n}\n"}
{"nl": "For a community: true - to post the topic as by the community false - to post the topic as by the user (default)", "code": "public BoardAddTopicQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n"}
{"nl": "Java Compatibility", "code": "public Iterable<T> asIterable(){\n  return internalArray;\n}\n"}
{"nl": "Launching & checking task process", "code": "private void registerTaskInstances(){\n  for (  TaskFromDBTrigger trigger : tasksList) {\n    if (trigger.isValid()) {\n      trigger.initTrigger();\n    }\n else {\n      log.error(\"Cannot load task from db with ID: \" + trigger.getTaskId());\n    }\n  }\n}\n"}
{"nl": "move to next group-value", "code": "public void nextGroup() throws SAException {\n  if (_curGroupValue != null) {\n    if (_alreadyUsedGroupValues == null)     _alreadyUsedGroupValues=new HashSet<Object>();\n    _alreadyUsedGroupValues.add(_curGroupValue);\n    _curGroupValue=null;\n  }\n}\n"}
{"nl": "Tests that a module without an Android Manifest can still import a lib's R class", "code": "public void testIsRJavaFileImportedNoManifest() throws Exception {\n  Module libModule=myAdditionalModules.get(0);\n  deleteManifest(libModule);\n  myFixture.copyFileToProject(\"util/lib/AndroidManifest.xml\",\"additionalModules/lib/AndroidManifest.xml\");\n  VirtualFile libRFile=myFixture.copyFileToProject(\"util/lib/R.java\",\"additionalModules/lib/gen/p1/p2/lib/R.java\");\n  myFixture.copyFileToProject(\"util/lib/strings.xml\",\"additionalModules/lib/res/values/strings.xml\");\n  deleteManifest(myModule);\n  PsiField[] mainFields=AndroidResourceUtil.findResourceFields(AndroidFacet.getInstance(myModule),\"string\",\"lib_hello\",false);\n  assertEmpty(mainFields);\n  PsiManager psiManager=PsiManager.getInstance(getProject());\n  PsiFile libRClassFile=psiManager.findFile(libRFile);\n  assertNotNull(libRClassFile);\n  assertTrue(AndroidResourceUtil.isRJavaFile(myFacet,libRClassFile));\n}\n"}
{"nl": "Create the test data schema file", "code": "private static void createDataSchema(boolean hdfs) throws IOException {\n  createDataSchema(null,hdfs);\n}\n"}
{"nl": "add highlights for the given Token on the given pane", "code": "public static void markToken(JTextComponent pane,Token token,SimpleMarker marker){\n  markText(pane,token.start,token.end(),marker);\n}\n"}
{"nl": "Constructs a NullAudioPlayer", "code": "public NullAudioPlayer(){\n}\n"}
{"nl": "setup the green gradient", "code": "public Black2RedGradient(int maxCount){\n  this.maxCount=maxCount;\n  factor=maxCount / Math.log(maxCount);\n}\n"}
{"nl": "Outputs a debug message if debugging is turned on", "code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n"}
{"nl": "save to file", "code": "public void save(File file,boolean append) throws IOException {\n  try (DataOutputStream outs=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file,append)))){\n    outs.writeInt(MAGIC_NUMBER);\n    outs.writeBoolean(m_hasFreeKey);\n    outs.writeInt(m_freeValue);\n    outs.writeFloat(m_fillFactor);\n    outs.writeInt(m_threshold);\n    outs.writeInt(m_size);\n    outs.writeInt(m_mask);\n    outs.writeInt(m_mask2);\n    outs.writeInt(m_data.length);\n    for (    int a : m_data)     outs.writeInt(a);\n  }\n }\n"}
{"nl": "Global message sending", "code": "public static void sendMessage(Player player,String msg){\n  sendPacket(player,new SM_MESSAGE(0,null,msg,ChatType.GOLDEN_YELLOW));\n}\n"}
{"nl": "Release summon", "code": "public void release(final UnsummonType unsummonType){\n  SummonsService.release(getOwner(),unsummonType,isAttacked);\n}\n"}
{"nl": "Linearly interpolates a double value from start to end for given progress", "code": "public static double lerp(double start,double end,double progress){\n  return start - progress * (start - end);\n}\n"}
{"nl": "Drag the current drag'n drop widget", "code": "public void dragComponent(@AndroidCoordinate int x,@AndroidCoordinate int y){\n  if (myDragDropWidget == null) {\n    return;\n  }\n  int ax=pxToDp(x);\n  int ay=pxToDp(y);\n  myDragDropWidget.setX(ax);\n  myDragDropWidget.setY(ay);\n  myDragDropWidget.forceUpdateDrawPosition();\n  for (  DrawConstraintModel drawConstraintModel : getDrawConstraintModels()) {\n    drawConstraintModel.getMouseInteraction().dragAndDrop(myDragDropWidget,ax,ay);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AppsGetLeaderboardQuery(VkApiClient client,UserActor actor,AppsGetLeaderboardType type){\n  super(client,\"apps.getLeaderboard\",GetLeaderboardResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n}\n"}
{"nl": "Parses the string with the model using velocity engine", "code": "public String parse(String str,Model m){\n  try {\n    str=VEngine.parse(str,m.context);\n  }\n catch (  Exception e) {\n    log.error(str,e);\n  }\n  return str;\n}\n"}
{"nl": "on main thread", "code": "private void joinRoom(final Invitation invitation){\n  controller=createController();\n  Games.RealTimeMultiplayer.join(client,RoomConfig.builder(controller).setRoomStatusUpdateListener(controller).setMessageReceivedListener(controller).setVariant(invitation.getVariant()).setInvitationIdToAccept(invitation.getInvitationId()).build());\n}\n"}
{"nl": "This method will set the legion ranking if needed", "code": "public void performRankingUpdate(Map<Integer,Integer> legionRanking){\n  log.info(\"Legion ranking update task started\");\n  long startTime=System.currentTimeMillis();\n  Iterator<Legion> legionsIterator=allCachedLegions.iterator();\n  int legionsUpdated=0;\n  this.legionRanking=legionRanking;\n  while (legionsIterator.hasNext()) {\n    Legion legion=legionsIterator.next();\n    if (legionRanking.containsKey(legion.getLegionId())) {\n      legion.setLegionRank(legionRanking.get(legion.getLegionId()));\n      PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x01,legion));\n    }\n    legionsUpdated++;\n  }\n  long workTime=System.currentTimeMillis() - startTime;\n  log.info(\"Legion ranking update: \" + workTime + \" ms, legions: \"+ legionsUpdated);\n}\n"}
{"nl": "This will take care of all work that needs to be done when disconnected", "code": "private void onDisconnect(){\n  onDisconnect(true);\n}\n"}
{"nl": "Perform interaction calculation", "code": "@Override protected void analyzeInteraction(){\n  int critVal=(int)(Rnd.get(55000) / (skillLvlDiff + 1));\n  if (critVal < CraftConfig.CRAFT_CHANCE_PURPLECRIT) {\n    critType=CraftCritType.PURPLE;\n    currentSuccessValue=maxSuccessValue;\n    return;\n  }\n else   if (critVal < CraftConfig.CRAFT_CHANCE_BLUECRIT) {\n    critType=CraftCritType.BLUE;\n  }\n else   if (critVal < CraftConfig.CRAFT_CHANCE_INSTANT) {\n    critType=CraftCritType.INSTANT;\n    currentSuccessValue=maxSuccessValue;\n    return;\n  }\n  if (CraftConfig.CRAFT_CHECKTASK) {\n    if (this.task == null) {\n      return;\n    }\n  }\n  double mod=Math.sqrt((double)skillLvlDiff / 450f) * 100f + Rnd.nextGaussian() * 10f;\n  mod-=(double)this.itemQuality.getQualityId();\n  if (mod < 0) {\n    currentFailureValue-=(int)mod;\n  }\n else {\n    currentSuccessValue+=(int)mod;\n  }\n  if (currentSuccessValue >= maxSuccessValue) {\n    currentSuccessValue=maxSuccessValue;\n  }\n else   if (currentFailureValue >= maxFailureValue) {\n    currentFailureValue=maxFailureValue;\n  }\n}\n"}
{"nl": "Show only text in item", "code": "public void showTextOnly(){\n  isTextOnlyMode=true;\n}\n"}
{"nl": "Test to validate fix for ACT-1399: Boundary-event and event-based auditing", "code": "@Deployment public void testEventBasedGateway(){\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"catchSignal\");\n  Execution waitingExecution=runtimeService.createExecutionQuery().signalEventSubscriptionName(\"alert\").singleResult();\n  assertNotNull(waitingExecution);\n  runtimeService.signalEventReceived(\"alert\",waitingExecution.getId());\n  assertEquals(0L,runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).count());\n  HistoricActivityInstance historicActivityInstance=historyService.createHistoricActivityInstanceQuery().activityId(\"eventBasedgateway\").processInstanceId(processInstance.getId()).singleResult();\n  assertNotNull(historicActivityInstance);\n}\n"}
{"nl": "Creates a new SourceDataTag", "code": "public SourceDataTag(final Long id,final String name,final boolean control){\n  this(id,name,control,DataTagConstants.MODE_OPERATIONAL,null,null);\n}\n"}
{"nl": "Creates a CartPaymentInfo object", "code": "public CartPaymentInfo makePaymentInfo(String id,String refNum,BigDecimal amount){\n  CartPaymentInfo inf=new CartPaymentInfo();\n  inf.refNum[0]=refNum;\n  inf.amount=amount;\n  inf.origAmount=amount;\n  if (!isPaymentMethodType(id)) {\n    inf.paymentMethodTypeId=this.getPaymentMethodTypeId(id);\n    inf.paymentMethodId=id;\n  }\n else {\n    inf.paymentMethodTypeId=id;\n  }\n  return inf;\n}\n"}
{"nl": "Test confirming fix for ACT-1731", "code": "@Deployment(resources={\"org/activiti/engine/test/history/oneTaskProcess.bpmn20.xml\"}) public void testQueryHistoricProcessInstanceIncludeBinaryVariable() throws Exception {\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"oneTaskProcess\",Collections.singletonMap(\"binaryVariable\",(Object)\"It is I, le binary\".getBytes()));\n  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n  assertNotNull(task);\n  taskService.complete(task.getId());\n  HistoricProcessInstance historicProcess=historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstance.getId()).includeProcessVariables().singleResult();\n  assertNotNull(historicProcess);\n  assertNotNull(historicProcess.getProcessVariables());\n  byte[] bytes=(byte[])historicProcess.getProcessVariables().get(\"binaryVariable\");\n  assertEquals(\"It is I, le binary\",new String(bytes));\n}\n"}
{"nl": "decode sequence to nucleotides or amino acids", "code": "public static byte[] translate(byte[] sequence,byte[] alphabet){\n  return translate(sequence,alphabet,0,sequence.length);\n}\n"}
{"nl": "Method used to confirm changes in the dialog", "code": "public void confirm(){\n  okButton.click();\n  verifyIsHidden();\n}\n"}
{"nl": "Handle unsubscribe command from the client API Check with the dispatcher is this consumer can proceed with unsubscribe", "code": "@Override public CompletableFuture<Void> doUnsubscribe(Consumer consumer){\n  CompletableFuture<Void> future=new CompletableFuture<>();\n  try {\n    if (dispatcher.canUnsubscribe(consumer)) {\n      consumer.close();\n      return delete();\n    }\n    future.completeExceptionally(new ServerMetadataException(\"Unconnected or shared consumer attempting to unsubscribe\"));\n  }\n catch (  BrokerServiceException e) {\n    log.warn(\"Error removing consumer {}\",consumer);\n    future.completeExceptionally(e);\n  }\n  return future;\n}\n"}
{"nl": "add a new classification", "code": "public void addClassification(String name,int size,long dumpStart,long dumpEnd,long indexStart,long indexEnd){\n  classificationNames=extend(classificationNames,name);\n  classificationSizes=extend(classificationSizes,size);\n  classificationDumpSectionStart=extend(classificationDumpSectionStart,dumpStart);\n  classificationDumpSectionEnd=extend(classificationDumpSectionEnd,dumpEnd);\n  classificationIndexSectionStart=extend(classificationIndexSectionStart,indexStart);\n  classificationIndexSectionEnd=extend(classificationIndexSectionEnd,indexEnd);\n}\n"}
{"nl": "Constructs an empty friend list for the given player", "code": "public FriendList(Player player){\n  this(player,new ConcurrentLinkedQueue<Friend>());\n}\n"}
{"nl": "Create a new tournament player with rank 0;", "code": "public TournamentPlayer(CKPlayerFactory player,int groupId){\n  this.player=player;\n  this.groupId=groupId;\n  rank=0;\n}\n"}
{"nl": "Prints list of classes containing entry points to stdout", "code": "public void printEntrypoints(){\n  if (this.entrypoints == null)   System.out.println(\"Entry points not initialized\");\n else {\n    System.out.println(\"Classes containing entry points:\");\n    for (    String className : entrypoints)     System.out.println(\"\\t\" + className);\n    System.out.println(\"End of Entrypoints\");\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n}\n"}
{"nl": "Log in user", "code": "@POST @Path(\"/login\") @Consumes(APPLICATION_FORM_URLENCODED) @Produces(APPLICATION_JSON) @ApiOperation(value=\"Log a user in\") @Timed public Response logUserIn(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader,@FormParam(\"grant_type\") @DefaultValue(\"client_credentials\") @ApiParam(value=\"please enter client_credentials in this field\") final String grantType){\n  if (!\"client_credentials\".equals(grantType)) {\n    throw new AuthenticationException(\"error, grant_type was not provided\");\n  }\n  return httpHeader.headers().entity(authentication.logIn(authorizationHeader)).build();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetByIdQuery(VkApiClient client,String... photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,Photo.class));\n  photos(photos);\n}\n"}
{"nl": "Creates a new instance of INSECTWordDocument", "code": "public SimpleTextDocument(){\n  Graph=new DocumentWordGraph();\n  Histogram=new DocumentWordHistogram();\n}\n"}
{"nl": "Enable event (if disabled)", "code": "public static void enable(String event){\n  instance.disabled.remove(event);\n  log(event + \" enabled\");\n}\n"}
{"nl": "Change the index sign", "code": "private static int changeIndexSign(final int index){\n  return -index - 1;\n}\n"}
{"nl": "Deletes an item", "code": "public MarketDeleteQuery delete(UserActor actor,int ownerId,int itemId){\n  return new MarketDeleteQuery(getClient(),actor,ownerId,itemId);\n}\n"}
{"nl": "Release Memory", "code": "public void reset(){\n  if (mBitmap != null)   mBitmap.recycle();\n}\n"}
{"nl": "Set privacy comment", "code": "public PhotosCreateAlbumQuery privacyComment(String... value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n"}
{"nl": "Utility routine that sets a security manager (if one isn't already present) and the security policy", "code": "public synchronized static void ensureSecurityManager(@SuppressWarnings(\"UnusedParameters\") String[] args){\n  SecurityPolicyLoader.load(SystemBoot.class,\"policy.all\");\n  System.setSecurityManager(new RMISecurityManager());\n}\n"}
{"nl": "Compare two game times", "code": "@Override public boolean equals(Object o){\n  GameTime other=(GameTime)o;\n  return this.getTime() == other.getTime();\n}\n"}
{"nl": "Propagate the time change", "code": "private void onTimeChanged(){\n  sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);\n  if (mOnTimeChangedListener != null) {\n    mOnTimeChangedListener.onTimeChanged(this,getCurrentHour(),getCurrentMinute());\n  }\n}\n"}
{"nl": "Returns true if the night mode is overridden", "code": "public final boolean isOverridingNightMode(){\n  return (myOverride & CFG_NIGHT_MODE) != 0;\n}\n"}
{"nl": "Creates an <code>AlarmValueImpl</code> object for the given parameters", "code": "public static AlarmValueImpl createAlarmValue(final Alarm alarm){\n  AlarmValueImpl alarmValueImpl=null;\n  if (alarm != null) {\n    alarmValueImpl=new AlarmValueImpl(alarm.getId(),alarm.getFaultCode(),alarm.getFaultMember(),alarm.getFaultFamily(),alarm.getInfo(),alarm.getTagId(),alarm.getTimestamp(),alarm.isActive());\n  }\n  return alarmValueImpl;\n}\n"}
{"nl": "Read a matching entity from the data-grid Template matching is done by field equality or any if field is null", "code": "private static void read(GigaSpace space,Phrase template){\n  Phrase[] results=space.readMultiple(template);\n  System.out.println(\"read - \" + Arrays.toString(results));\n}\n"}
{"nl": "Search user role by user id", "code": "@Override public List<String> searchRoleByUserId(String userId){\n  return sessionTemplate.selectList(NAMESPACE + \".searchRoleByUserId\",userId);\n}\n"}
{"nl": "Check the string against XML's definition of acceptable names for elements and attributes and so on using the XMLCharacterProperties utility class", "code": "public static final boolean isXMLName(String s,boolean xml11Version){\n  if (s == null) {\n    return false;\n  }\n  if (!xml11Version)   return XMLChar.isValidName(s);\n else   return XML11Char.isXML11ValidName(s);\n}\n"}
{"nl": "Stops movements", "code": "public void stopMoving(){\n  Creature owner=getOwner();\n  World.getInstance().updatePosition(owner,owner.getX(),owner.getY(),owner.getZ(),owner.getHeading());\n  PacketSendUtility.broadcastPacket(owner,new SM_MOVE(owner));\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"hide what=unSelected;\");\n}\n"}
{"nl": "Create a datavec schema from a struct type", "code": "public static Schema fromStructType(StructType structType){\n  Schema.Builder builder=new Schema.Builder();\n  StructField[] fields=structType.fields();\n  String[] fieldNames=structType.fieldNames();\n  for (int i=0; i < fields.length; i++) {\n    String name=fields[i].dataType().typeName().toLowerCase();\nswitch (name) {\ncase \"double\":\n      builder.addColumnDouble(fieldNames[i]);\n    break;\ncase \"float\":\n  builder.addColumnFloat(fieldNames[i]);\nbreak;\ncase \"long\":\nbuilder.addColumnLong(fieldNames[i]);\nbreak;\ncase \"int\":\ncase \"integer\":\nbuilder.addColumnInteger(fieldNames[i]);\nbreak;\ncase \"string\":\nbuilder.addColumnString(fieldNames[i]);\nbreak;\ndefault :\nthrow new RuntimeException(\"Unknown type: \" + name);\n}\n}\nreturn builder.build();\n}\n"}
{"nl": "Move reference within current result set up by one", "code": "public void nextRow() throws SQLException {\n  currentRow.next();\n}\n"}
{"nl": "Add property you need", "code": "public Builder add(String property){\n  properties.add(property);\n  return this;\n}\n"}
{"nl": "Return <code>True</code> if appsecret_proof should be passed with graph api calls, otherwise return <code>False</code>", "code": "public boolean useAppsecretProof(){\n  return mUseAppsecretProof;\n}\n"}
{"nl": "Set start from", "code": "public NotificationsGetQuery startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n"}
{"nl": "Same test case as before, but now with all automatic steps", "code": "@Deployment public void testSimpleAutomaticSubProcess(){\n  ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"simpleSubProcessAutomatic\");\n  assertTrue(pi.isEnded());\n  assertProcessEnded(pi.getId());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesRestoreCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"notes.restoreComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "Convert string representation to Locale object", "code": "private Locale toLocale(String str){\n  if (str == null)   return null;\n  String[] split=str.split(\"_\");\n  if (split.length == 0)   return new Locale(\"\");\n else   if (split.length == 1)   return new Locale(split[0]);\n else   if (split.length == 2)   return new Locale(split[0],split[1]);\n else   return new Locale(split[0],split[1],split[2]);\n}\n"}
{"nl": "Comment text (required if \"attachments\" parameter is not specified)", "code": "public MarketCreateCommentQuery message(String value){\n  return unsafeParam(\"message\",value);\n}\n"}
{"nl": "Convert comma delimited and/or space String to array of Strings", "code": "public static String[] toArray(String arg){\n  if (arg == null) {\n    return new String[0];\n  }\n  StringTokenizer tok=new StringTokenizer(arg,\" ,\");\n  String[] array=new String[tok.countTokens()];\n  int i=0;\n  while (tok.hasMoreTokens()) {\n    array[i]=tok.nextToken();\n    i++;\n  }\n  return (array);\n}\n"}
{"nl": "set the location manager", "code": "public void syncLocationManager2InfoSection(LocationManager locationManager) throws IOException {\n  if (textStoragePolicy != locationManager.getTextStoragePolicy())   throw new IOException(\"setLocationManager(): attempting to change textStoragePolicy from \" + textStoragePolicy + \" to \"+ locationManager.getTextStoragePolicy());\n  textStoragePolicy=locationManager.getTextStoragePolicy();\n  textFileNames=locationManager.getFileNames();\n  textFileSizes=locationManager.getFileSizes();\n}\n"}
{"nl": "Convert a datavec schema to a struct type in spark", "code": "public static StructType fromSchema(Schema schema){\n  StructField[] structFields=new StructField[schema.numColumns()];\n  for (int i=0; i < structFields.length; i++) {\nswitch (schema.getColumnTypes().get(i)) {\ncase Double:\n      structFields[i]=new StructField(schema.getName(i),DataTypes.DoubleType,false,Metadata.empty());\n    break;\ncase Integer:\n  structFields[i]=new StructField(schema.getName(i),DataTypes.IntegerType,false,Metadata.empty());\nbreak;\ncase Long:\nstructFields[i]=new StructField(schema.getName(i),DataTypes.LongType,false,Metadata.empty());\nbreak;\ncase Float:\nstructFields[i]=new StructField(schema.getName(i),DataTypes.FloatType,false,Metadata.empty());\nbreak;\ndefault :\nthrow new IllegalStateException(\"This api should not be used with strings , binary data or ndarrays. This is only for columnar data\");\n}\n}\nreturn new StructType(structFields);\n}\n"}
{"nl": "Reads in the html page with infos on the ncbi attributes", "code": "private void generateHelpText(){\n  String filename=\"resources/files/attributehelp.txt\";\n  helpText=new StringBuilder(3000);\n  try {\n    String line;\n    BufferedReader br=new BufferedReader(new FileReader(filename));\n    while (true) {\n      line=br.readLine();\n      if (line == null)       break;\n      helpText.append(line);\n    }\n  }\n catch (  IOException e1) {\n    System.out.println(\"Could not find/parse \" + filename);\n    e1.printStackTrace();\n  }\n}\n"}
{"nl": "Reads an instance of the data type from the buffer", "code": "public T read(PacketBuffer buf){\n  return reader.apply(buf);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetOwnerPhotoUploadServerQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getOwnerPhotoUploadServer\",GetOwnerPhotoUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "****************************** MONSTER TO ARENA QUERIES", "code": "public MonsterToArenaCursor queryMonsterToArenaMonster(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_MONSTER_TO_ARENA;\n  qh.Columns=null;\n  qh.Selection=\"mta.\" + S.COLUMN_MONSTER_TO_ARENA_MONSTER_ID + \" = ? \";\n  qh.SelectionArgs=new String[]{\"\" + id};\n  qh.GroupBy=\"a.\" + S.COLUMN_ARENA_QUESTS_NAME;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new MonsterToArenaCursor(wrapJoinHelper(builderMonsterToArena(qh.Distinct),qh));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetDemographicsQuery(VkApiClient client,UserActor actor,int accountId,AdsGetDemographicsIdsType idsType,String ids,String period,String dateFrom,String dateTo){\n  super(client,\"ads.getDemographics\",Utils.buildParametrizedType(List.class,DemoStats.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  idsType(idsType);\n  ids(ids);\n  period(period);\n  dateFrom(dateFrom);\n  dateTo(dateTo);\n}\n"}
{"nl": "Sets rationale dialog message", "code": "public Builder withRationaleDialogMsg(String rationaleMsg){\n  buildObj.rationaleDialogMsg=rationaleMsg;\n  buildObj.showRationaleDialog=true;\n  return this;\n}\n"}
{"nl": "Creates a new comment for an item", "code": "public MarketCreateCommentQuery createComment(UserActor actor,int ownerId,int itemId){\n  return new MarketCreateCommentQuery(getClient(),actor,ownerId,itemId);\n}\n"}
{"nl": "Returns true if the given token matches part of a phone number", "code": "private boolean matchesPartPhoneNumber(String tokenVal){\n  String n_name=(String)tokenItem.findFeature(\"n.name\");\n  String n_n_name=(String)tokenItem.findFeature(\"n.n.name\");\n  String p_name=(String)tokenItem.findFeature(\"p.name\");\n  String p_p_name=(String)tokenItem.findFeature(\"p.p.name\");\n  boolean matches3DigitsP_name=matches(threeDigitsPattern,p_name);\n  return ((matches(threeDigitsPattern,tokenVal) && ((!matches(digitsPattern,p_name) && matches(threeDigitsPattern,n_name) && matches(fourDigitsPattern,n_n_name)) || (matches(sevenPhoneNumberPattern,n_name)) || (!matches(digitsPattern,p_p_name) && matches3DigitsP_name && matches(fourDigitsPattern,n_name)))) || (matches(fourDigitsPattern,tokenVal) && (!matches(digitsPattern,n_name) && matches3DigitsP_name && matches(threeDigitsPattern,p_p_name))));\n}\n"}
{"nl": "Delete the ElasticSearch indices that was used for functional testing", "code": "public static void deleteESInput(){\n  String esPIRIndex=SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_NODES_PROPERTY) + \":\" + SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_PORT_PROPERTY)+ \"/\"+ SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_INDEX_PROPERTY);\n  logger.info(\"ES input being deleted at \" + esPIRIndex);\n  ProcessBuilder pDeletePIR=new ProcessBuilder(\"curl\",\"-XDELETE\",esPIRIndex);\n  try {\n    TestUtils.executeCommand(pDeletePIR);\n    logger.info(\"ES input deleted!\");\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Return a clone of this SourceDataQuality object", "code": "public SourceDataQuality clone() throws CloneNotSupportedException {\n  return (SourceDataQuality)super.clone();\n}\n"}
{"nl": "Stop timing", "code": "public void stop(){\n  this.stopTime=this.world.getTotalWorldTime();\n}\n"}
{"nl": "To notify the implementor should init the presenter", "code": "@NonNull @Override public CoreContract.Presenter initPresenter(@NonNull final CoreContract.Service service){\n  requireNonNull(service);\n  CoreContract.Presenter presenter=new MessagePresenter(this,service);\n  this.changePresenter(presenter);\n  return presenter;\n}\n"}
{"nl": "Only for test purposes DON'T USE IT!", "code": "@VisibleForTesting public void subscribeForTesting(){\n  mObservable.subscribe(mObserver);\n}\n"}
{"nl": "Creates a new instance of StandardComparator", "code": "public StandardDocumentComparator(){\n  sGraph=new GraphSimilarity();\n  sHistogram=new GraphSimilarity();\n}\n"}
{"nl": "Checks whether the fallback log file has any contents or not", "code": "public final boolean isFallBackFileEmpty(){\n  boolean isEmpty=false;\n  try {\n    openFallbackInputStream();\n    if (!getInput().ready()) {\n      isEmpty=true;\n    }\n  }\n catch (  IOException e) {\n    LOG.error(\"isFallBackFileEmpty() : A problem has ocurred while trying to determine if the file was empty\",e);\n  }\ncatch (  Exception ex) {\n    LOG.error(\"isFallBackFileEmpty() : \" + ex.getMessage());\n  }\n finally {\n    try {\n      closeFallbackInputStream();\n    }\n catch (    Exception ex) {\n      LOG.error(\"isFallBackFileEmpty() : \" + ex.getMessage());\n    }\n  }\n  if (LOG.isDebugEnabled())   LOG.debug(\"isFallBackFileEmpty() : The result of checking whether the file is empty or not is \" + isEmpty);\n  return isEmpty;\n}\n"}
{"nl": "Creates a storable time fence which will be valid on Friday in the given daily time frame", "code": "public static StorableTimeFence inFridayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(FRIDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n"}
{"nl": "Set target id", "code": "public VideoGetAlbumsByVideoQuery targetId(Integer value){\n  return unsafeParam(\"target_id\",value);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int writeDeltaTo(int jumpTarget){\n  int i=this.charsLength - jumpTarget;\n  assert (i >= 0);\n  if (i <= 64511)   return write(i);\n  int length;\n  int length;\n  if (i <= 67043327) {\n    this.intUnits[0]=((char)(64512 + (i >> 16)));\n    length=1;\n  }\n else {\n    this.intUnits[0]=65535;\n    this.intUnits[1]=((char)(i >> 16));\n    length=2;\n  }\n  this.intUnits[(length++)]=((char)i);\n  return write(this.intUnits,length);\n}\n"}
{"nl": "Returns the block number component of the entry", "code": "public long blockNumber(){\n  return blockNum;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null;\n}\n"}
{"nl": "Checks if ip (or mask) is banned", "code": "public static boolean isBanned(String ip){\n  for (  BannedIP ipBan : banList) {\n    if (ipBan.isActive() && NetworkUtils.checkIPMatching(ipBan.getMask(),ip)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Notify waiting asyncReceive request with the received message", "code": "void notifyPendingReceivedCallback(final MessageImpl message,Exception exception){\n  if (!pendingReceives.isEmpty()) {\n    CompletableFuture<Message> receivedFuture=pendingReceives.poll();\n    if (exception == null) {\n      checkNotNull(message,\"received message can't be null\");\n      if (receivedFuture != null) {\n        if (conf.getReceiverQueueSize() == 0) {\n          receivedFuture.complete(message);\n        }\n else {\n          messageProcessed(message);\n          listenerExecutor.execute(null);\n        }\n      }\n    }\n else {\n      listenerExecutor.execute(null);\n    }\n  }\n}\n"}
{"nl": "adds source file tag to each sootclass", "code": "protected static void addSourceFileTag(SootClass sc,String fileName){\n  soot.tagkit.SourceFileTag tag=null;\n  if (sc.hasTag(\"SourceFileTag\")) {\n    return;\n  }\n else {\n    tag=new soot.tagkit.SourceFileTag();\n    sc.addTag(tag);\n  }\n  tag.setSourceFile(fileName);\n}\n"}
{"nl": "Clear the list of animations that we might have", "code": "public void clear(){\n  mAnimations.clear();\n}\n"}
{"nl": "Check if this device has a camera", "code": "private boolean checkCameraHardware(Context context){\n  if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {\n    return true;\n  }\n else   if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT)) {\n    return true;\n  }\n else   if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "BlockExplodeEvent is fired when an explosion happens with an unknown case", "code": "@EventHandler(priority=EventPriority.LOW,ignoreCancelled=true) public void onBlockExplode(BlockExplodeEvent event){\n  List<Block> blocks=event.blockList();\n  if (blocks.isEmpty())   return;\n  BlockPos pos=plugin.blockPos(blocks.get(0));\n  ClaimedChunk chunk=plugin.mineCity.provideChunk(pos.getChunk());\n  for (Iterator<Block> iter=blocks.iterator(); iter.hasNext(); ) {\n    Block block=iter.next();\n    BlockPos blockPos=plugin.blockPos(pos,block);\n    ClaimedChunk claim=plugin.mineCity.provideChunk(blockPos.getChunk(),chunk);\n    if (claim.reserve || claim.owner instanceof Nature) {\n      if (blockPos.y >= 40)       iter.remove();\n    }\n else {\n      iter.remove();\n    }\n  }\n}\n"}
{"nl": "mgc2mgc: frequency and generalized cepstral transformation", "code": "public static void mgc2mgc(double c1[],int m1,double a1,double g1,double c2[],int m2,double a2,double g2){\n  if (a1 == a2) {\n    gnorm(c1,c1,m1,g1);\n    gc2gc(c1,m1,g1,c2,m2,g2);\n    ignorm(c2,c2,m2,g2);\n  }\n else {\n    double a=(a2 - a1) / (1 - a1 * a2);\n    freqt(c1,m1,c2,m2,a);\n    gnorm(c2,c2,m2,g1);\n    gc2gc(c2,m2,g1,c2,m2,g2);\n    ignorm(c2,c2,m2,g2);\n  }\n}\n"}
{"nl": "Transform string from the format \"quick-brown-fox\" into \"quickBrownFox\"", "code": "public static String joinDash(String input){\n  String[] temp=input.split(\"-\");\n  for (int i=1; i < temp.length; i++) {\n    temp[i]=upperCaseFirstChar(temp[i]);\n  }\n  return join(temp,\"\");\n}\n"}
{"nl": "does table contain given value", "code": "public boolean containsValue(V value){\n  if (value == null)   return false;\n  for (  Map<C,V> row : dataMap.values()) {\n    if (row.containsValue(value))     return true;\n  }\n  return false;\n}\n"}
{"nl": "Specify whether or not the keyboard should be hidden at the beginning", "code": "public Builder hideKeyboard(boolean hideKeyboard){\n  this.hideKeyboard=hideKeyboard;\n  return this;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();\n  return remoteServiceBrowser != null && remoteServiceBrowser.getServicePanel() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot() != null && remoteServiceBrowser.getServicePanel().getFileTree().getModel().getChildCount(remoteServiceBrowser.getServicePanel().getFileTree().getModel().getRoot()) > 0;\n}\n"}
{"nl": "Address of the page where you need to refesh the cached version", "code": "protected PagesClearCacheQuery url(String value){\n  return unsafeParam(\"url\",value);\n}\n"}
{"nl": "Constructs a new Cluster info", "code": "public ClusterInfo(String schema,Integer instanceId,Integer backupId,Integer numberOfInstances,Integer numberOfBackups){\n  this.schema=schema;\n  this.instanceId=instanceId;\n  this.backupId=backupId;\n  this.numberOfInstances=numberOfInstances;\n  this.numberOfBackups=numberOfBackups;\n}\n"}
{"nl": "creates a new assignment algorithm use this repeatedly to create multiple assignment algorithms that can be run in parallel", "code": "public IAssignmentAlgorithm createAssignmentAlgorithm(){\n  return new AssignmentUsingWeightedLCA(cName,refId2weight,ref2weight,taxId2SpeciesId,percentToCover,useIdentityFilter);\n}\n"}
{"nl": "remove the lease from keep alive map", "code": "private void removeLease(long leaseId){\n  if (this.keepAlives.containsKey(leaseId)) {\n    this.keepAlives.remove(leaseId);\n  }\n}\n"}
{"nl": "Compute next probe for collision resolution", "code": "private static int probe(final int perturb,final int j){\n  return (j << 2) + j + perturb+ 1;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  final ChartViewer viewer=(ChartViewer)getViewer();\n  return viewer.getActiveLabelsJList() != null && viewer.getActiveLabelsJList().getSelectedIndex() != -1;\n}\n"}
{"nl": "Find which ResizeHandle is close to the (x, y) coordinates", "code": "public ResizeHandle findResizeHandle(float x,float y,ViewTransform transform){\n  for (  Selection.Element element : mSelection.getElements()) {\n    ConstraintWidget widget=element.widget;\n    ResizeHandle handle=findResizeHandleInWidget(widget,x,y,transform);\n    if (handle != null) {\n      return handle;\n    }\n  }\n  for (  ConstraintWidget widget : mWidgets.values()) {\n    if (widget.isRootContainer()) {\n      continue;\n    }\n    ResizeHandle handle=findResizeHandleInWidget(widget,x,y,transform);\n    if (handle != null) {\n      return handle;\n    }\n  }\n  return null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQueryWithExtended(VkApiClient client,UserActor actor,String groupId){\n  super(client,\"groups.isMember\",IsMemberExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  extended(true);\n}\n"}
{"nl": "Register start of an step evaluation", "code": "public void stepStart(LoadableComponentContext context){\n  String info=produceLoadableComponentInfo(context.getConditionContext());\n  LOG.debug(\"Started lodable component condition evaluation: \" + info);\n  progressData.add(new ConditionProgressStep(info));\n}\n"}
{"nl": "Creates the replica data from the entry holder", "code": "private AbstractEntryReplicaData buildEntryReplicaData(IEntryHolder entry,ISynchronizationCallback syncCallback){\n  while (entry != null) {\n    XtnEntry wlXtn=entry.getWriteLockOwner();\n    boolean locked=acquireTransactionLock(entry,wlXtn);\n    ILockObject entryLock=_engine.getCacheManager().getLockManager().getLockObject(entry);\n    try {\nsynchronized (entryLock) {\n        IEntryPacket entryPacket=getEntryPacketSafely(entry,wlXtn,locked);\n        if (entryPacket == null)         return null;\n        AbstractEntryReplicaData data=newEntryReplicaData(entryPacket);\n        boolean duplicateUid=syncCallback.synchronizationDataGenerated(data);\n        if (duplicateUid)         return null;\n        return data;\n      }\n    }\n catch (    TransactionConflictException e) {\n      entry=handleTransactionConflict(entry);\n    }\n finally {\n      _engine.getCacheManager().getLockManager().freeLockObject(entryLock);\n      releaseTransactionLock(wlXtn,locked);\n    }\n  }\n  return null;\n}\n"}
{"nl": "Sends an email warning about not being able to access to a concrete file", "code": "public final void fileNotReachable(final boolean alarmUp,final File file){\n  if (alarmUp == FallbackAlarmsInterface.ACTIVATED) {\n    ArrayList recipients=new ArrayList();\n    MailDetailsBean mailDetails=new MailDetailsBean();\n    mailDetails.setSender(\"mruizgar@cern.ch\");\n    recipients.add(\"mruizgar@cern.ch\");\n    mailDetails.setToRecipients(recipients);\n    mailDetails.setSubject(\"File not reachable\");\n    mailDetails.setServer(\"cernmx.cern.ch\");\n    mailDetails.setMessage(\"The file \" + file.getAbsolutePath() + \" could not be reached\");\n    SMTPMailSender mailSender=new SMTPMailSender();\n    try {\n      mailSender.sendMail(mailDetails);\n    }\n catch (    MailSenderException e) {\n      LOG.debug(e.getMessage());\n    }\n  }\n}\n"}
{"nl": "Set this skill as canceled", "code": "public void cancelCast(){\n  isCancelled=true;\n}\n"}
{"nl": "check if nullable int, float, resource", "code": "private boolean isNullableCoreType(HashSet<String> resolvedTypesSet){\n  if (resolvedTypesSet.size() != 2 || !resolvedTypesSet.contains(Types.strNull)) {\n    return false;\n  }\n  return resolvedTypesSet.contains(Types.strInteger) || resolvedTypesSet.contains(Types.strFloat) || resolvedTypesSet.contains(Types.strResource);\n}\n"}
{"nl": "Return a tap target for the specified bounds", "code": "public static TapTarget forBounds(Rect bounds,CharSequence title){\n  return forBounds(bounds,title,null);\n}\n"}
{"nl": "Returns true is the underlying data source doesn't support data changes", "code": "public boolean isReadOnly(){\n  return !(isDataPersister() || isBulkDataPersister());\n}\n"}
{"nl": "rescan the status bar", "code": "private void updateStatusBar(){\n  SampleAttributeTable sampleAttributeTable=doc.getSampleAttributeTable();\n  String message=\"Samples=\" + sampleAttributeTable.getNumberOfSamples();\n  message+=\" Attributes=\" + sampleAttributeTable.getNumberOfUnhiddenAttributes();\n  if (getSamplesTable().getNumberOfSelectedSamples() > 0 || getSamplesTable().getNumberOfSelectedCols() > 0) {\n    message+=\" (Selection: \" + getSamplesTable().getNumberOfSelectedSamples() + \" samples, \"+ getSamplesTable().getNumberOfSelectedCols()+ \" attributes)\";\n  }\n  statusbar.setText2(message);\n}\n"}
{"nl": "Invokes an action by menu path", "code": "public void invokeMenuPath(@NotNull String... path){\n  getMenuFixture().invokeMenuPath(path);\n}\n"}
{"nl": "Reduce the specified columns by taking the minimum value", "code": "public Builder minColumns(String... columns){\n  return add(ReduceOp.Min,columns);\n}\n"}
{"nl": "Toggle line wrap", "code": "public SourceEditor toggleWrap(){\n  return setWrap(!wrap);\n}\n"}
{"nl": "increase item count and return left count", "code": "long increaseItemCount(Item item,long count,ItemUpdateType updateType,Player actor){\n  long leftCount=item.increaseItemCount(count);\n  ItemPacketService.sendItemPacket(actor,storageType,item,updateType);\n  setPersistentState(PersistentState.UPDATE_REQUIRED);\n  return leftCount;\n}\n"}
{"nl": "Looks through the existing errors and attempts to find one that has the same root cause", "code": "@Nullable private static Message findRootCause(@NotNull String text,@NotNull Collection<Message> messages){\n  for (  Message message : messages) {\n    if (message.getKind() != Message.Kind.INFO && message.getText().contains(text)) {\n      if (message.getSourceFilePositions().isEmpty()) {\n        return message;\n      }\n    }\n  }\n  int index=text.indexOf(':');\n  if (index != -1 && index < text.length() - 1) {\n    return findRootCause(text.substring(index + 1).trim(),messages);\n  }\n  return null;\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public MessagesGetChatQueryWithChatIdsFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "recursively visit all the selected leaves", "code": "private static void visitSelectedLeavesRec(ClassificationViewer viewer,Node v,NodeSet selected,Vector<String> path,LinkedList<Map> rowList,LinkedList<int[]> dataList,ProgressListener progressListener) throws CanceledException {\n  if (v.getOutDegree() > 0 || selected.contains(v)) {\n    Integer classId=(Integer)v.getInfo();\n    String className=v == viewer.getTree().getRoot() ? \"Root\" : viewer.getClassification().getName2IdMap().get(classId);\n    path.addElement(className);\n    if (selected.contains(v)) {\n      NodeData data=viewer.getNodeData(v);\n      if (data != null) {\n        int[] values;\n        if (v.getOutDegree() == 0)         values=data.getSummarized();\n else         values=data.getAssigned();\n        Map rowItem=new StringMap();\n        rowItem.put(\"id\",\"\" + classId);\n        Map metadata=new StringMap();\n        ArrayList<String> classification=new ArrayList<>(path.size());\n        classification.addAll(path);\n        metadata.put(\"taxonomy\",classification);\n        rowItem.put(\"metadata\",metadata);\n        rowList.add(rowItem);\n        dataList.add(values);\n      }\n      progressListener.incrementProgress();\n    }\n    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n      visitSelectedLeavesRec(viewer,e.getTarget(),selected,path,rowList,dataList,progressListener);\n    }\n    path.setSize(path.size() - 1);\n  }\n}\n"}
{"nl": "Check if player can learn more master crafting skill or not (max is 1)", "code": "public static boolean canLearnMoreMasterCraftingSkill(Player player){\n  return getTotalMasterCraftingSkills(player) < CraftConfig.MAX_MASTER_CRAFTING_SKILLS;\n}\n"}
{"nl": "Status of the follow-peak", "code": "public boolean isFollowPeak(){\n  return followPeak;\n}\n"}
{"nl": "Moves the page with provided title to provided destination path by selecting it and pressing Move button on Action Bar", "code": "public SiteAdminPage movePage(String title,String destinationPath){\n  grid.selectPageByTitle(title);\n  grid.getActionBar().clickOnButton(SiteAdminButtons.MOVE,movePageWindow);\n  movePageWindow.typeDestinationPath(destinationPath);\n  movePageWindow.confirm();\n  clickYesOnConfirmationWindow();\n  grid.waitForLoaderNotPresent();\n  return this;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"zoom what=fit;\");\n}\n"}
{"nl": "Executes the \"jimplify\" operation for a special invocation", "code": "protected void jimplifySpecial(DexBody body){\n  List<Local> parameters=buildParameters(body,false);\n  invocation=Jimple.v().newSpecialInvokeExpr(parameters.get(0),getSootMethodRef(),parameters.subList(1,parameters.size()));\n  body.setDanglingInstruction(this);\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getReadFailsVendorQualityCheckFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getReadFailsVendorQualityCheckFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Create an aggregate that will group a query by a variable name and apply the given aggregate to each group", "code": "public static <T>Aggregate<Map<String,Concept>,Map<Concept,T>> group(String varName,Aggregate<? super Map<String,Concept>,T> aggregate){\n  return Aggregates.group(varName,aggregate);\n}\n"}
{"nl": "Parses a date in a string to a Date", "code": "private Date parseDate(String date){\n  try {\n    return DateFormat.getDateInstance(DateFormat.SHORT).parse(date);\n  }\n catch (  ParseException e) {\n    MessageDialog.openError(getShell(),Messages.FilterRevisionsDialog_dateParseErrorTitle,Messages.FilterRevisionsDialog_dateParseErrorMessage);\n    return null;\n  }\n}\n"}
{"nl": "This is the code that will increment the progress variable and so spin the wheel", "code": "@Override public void handleMessage(Message msg){\nswitch (msg.what) {\ncase 0:\n    invalidate();\n  if (isSpinning) {\n    progress+=spinSpeed;\n    if (progress > 360) {\n      progress=0;\n    }\n    spinHandler.sendEmptyMessageDelayed(0,delayMillis);\n  }\nbreak;\ncase 1:\nspinHandler.removeMessages(0);\nisSpinning=false;\ninvalidate();\nbreak;\n}\n}\n"}
{"nl": "load the data by the query", "code": "public static <T extends Bean>T load(Bson query,Class<T> t){\n  String collection=getCollection(t);\n  if (collection != null) {\n    try {\n      T obj=t.newInstance();\n      return load(query,null,obj);\n    }\n catch (    Exception e) {\n      if (log.isErrorEnabled())       log.error(e.getMessage(),e);\n    }\n  }\n  return null;\n}\n"}
{"nl": "Item identifier", "code": "protected MarketRemoveFromAlbumQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "append new blocks", "code": "public static void appendBlocks(DAAHeader header,BlockType type,byte[][] blocks,int[] sizes) throws IOException {\n  BlockType[] types=new BlockType[blocks.length];\n  for (int i=0; i < types.length; i++) {\n    types[i]=type;\n  }\n  appendBlocks(header,types,blocks,sizes);\n}\n"}
{"nl": "Dissmiss view with reverse animation", "code": "private void dismiss(){\n  preferencesManager.setDisplayed(usageId);\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    if (isRevealAnimationEnabled)     exitRevealAnimation();\n else     startFadeout();\n  }\n else {\n    startFadeout();\n  }\n}\n"}
{"nl": "verify the code associated", "code": "public static Result verify(String sid,String code){\n  String id=\"//captcha/\" + sid;\n  Code c=(Code)Cache.get(id);\n  if (c == null) {\n    log.warn(\"no code in cache, sid=\" + sid);\n    return Result.badcode;\n  }\n else   if (!X.isSame(code,c.code)) {\n    log.warn(\"is not same, code.server=\" + c.code + \", code.client=\"+ code);\n    return Result.badcode;\n  }\n else   if (c.expired < System.currentTimeMillis()) {\n    log.warn(\"expired, expired=\" + c.expired);\n    return Result.expired;\n  }\n  return Result.ok;\n}\n"}
{"nl": "Ensure that only one instance of CrashHandler", "code": "private CrashHandler(){\n}\n"}
{"nl": "Stored  notify events that were generated by replication only on backup", "code": "public void add(RemoteEventBusPacket packet){\n  OperationID id=packet.getStatus().getOperationId();\n  ConcurrentHashSet<RemoteEventBusPacket> outgoingEventsForOperation=_outgoingEvents.get(id);\n  if (outgoingEventsForOperation == null) {\n    outgoingEventsForOperation=new ConcurrentHashSet<RemoteEventBusPacket>();\n    ConcurrentHashSet<RemoteEventBusPacket> previous=_outgoingEvents.putIfAbsent(id,outgoingEventsForOperation);\n    if (previous != null)     outgoingEventsForOperation=previous;\n  }\n  outgoingEventsForOperation.add(packet);\n}\n"}
{"nl": "Market delivery cities (if only one country is specified)", "code": "public GroupsEditQuery marketCity(List<Integer> value){\n  return unsafeParam(\"market_city\",value);\n}\n"}
{"nl": "Puts the controller into exclusion mode to remove new nodes", "code": "public void requestRemoveNodesStart(){\n  if (exclusion == true || inclusion == true) {\n    logger.debug(\"ZWave exclusion already in progress - aborted\");\n    return;\n  }\n  enqueue(new RemoveNodeMessageClass().doRequestStart());\n  exclusion=true;\n  startInclusionTimer();\n  logger.debug(\"ZWave controller start exclusion\");\n}\n"}
{"nl": "Prepare and commit the transaction - called for single participant transaction or transaction without changes", "code": "public int prepareAndCommit(TransactionManager mgr,ServerTransaction st,OperationID operationID) throws UnknownTransactionException, RemoteException {\n  if (_operationLogger.isLoggable(Level.FINEST))   _operationLogger.finest(\"preparing and committing transaction [\" + createTransactionDetailsString(st,operationID) + \"]\");\n  int result;\n  if (isExecutedAlready(operationID)) {\n    handleDuplicateCommitOperation(st,operationID);\n    result=TransactionConstants.COMMITTED;\n  }\n else {\n    result=prepare(mgr,st,true,false,operationID);\n    if (result == TransactionConstants.PREPARED) {\n      commitSA(mgr,st,false,null,true);\n      result=TransactionConstants.COMMITTED;\n    }\n  }\n  if (_operationLogger.isLoggable(Level.FINEST))   _operationLogger.finest(\"prepared and committed transaction [\" + createTransactionDetailsString(st,operationID) + \"] result=\"+ result);\n  return result;\n}\n"}
{"nl": "Set fields", "code": "public WallGetByIdQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureGetUserLevelQuery(VkApiClient client,ServiceActor actor,int... userIds){\n  super(client,\"secure.getUserLevel\",Utils.buildParametrizedType(List.class,Level.class));\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n  userIds(userIds);\n}\n"}
{"nl": "Set client secret", "code": "protected AuthConfirmQuery clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n"}
{"nl": "v1 -> has start signal event v2 -> has no start signal event v3 -> has start signal event", "code": "public void testDeployIntermediateVersionWithoutSignalStartEvent(){\n  String deploymentId1=deployStartSignalTestProcess();\n  assertEquals(1,getAllEventSubscriptions().size());\n  assertEquals(0,runtimeService.createProcessInstanceQuery().count());\n  runtimeService.signalEventReceived(\"myStartSignal\");\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  assertEventSubscriptionsCount(1);\n  String deploymentId2=deployProcessWithoutEvents();\n  assertEquals(0,getAllEventSubscriptions().size());\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  runtimeService.signalEventReceived(\"myStartSignal\");\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  assertEventSubscriptionsCount(0);\n  String deploymentId3=deployStartSignalTestProcess();\n  assertEquals(1,getAllEventSubscriptions().size());\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  runtimeService.signalEventReceived(\"myStartSignal\");\n  assertEquals(2,runtimeService.createProcessInstanceQuery().count());\n  assertEventSubscriptionsCount(1);\n  List<EventSubscriptionEntity> eventSubscriptions=getAllEventSubscriptions();\n  assertEquals(repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId3).singleResult().getId(),eventSubscriptions.get(0).getProcessDefinitionId());\n  cleanup(deploymentId1,deploymentId2,deploymentId3);\n}\n"}
{"nl": "Returns true if the locale is alternated", "code": "public final boolean isAlternatingLocale(){\n  return (myAlternate & CFG_LOCALE) != 0;\n}\n"}
{"nl": "Clears the data tags of this time deadband activator", "code": "@Override public void clearDataTags(){\n  sourceDataTags.clear();\n  movingAverages.clear();\n}\n"}
{"nl": "Adds the process id as dependency to this tag", "code": "public boolean addProcessId(final Long processId){\n  if (processId != null && processId > 0) {\n    return processIds.add(processId);\n  }\n  return false;\n}\n"}
{"nl": "Read a UTF-8 format String from HDFS (or local)", "code": "public static String readStringFromFile(String path,SparkContext sc) throws IOException {\n  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());\n  try (BufferedInputStream bis=new BufferedInputStream(fileSystem.open(new Path(path)))){\n    byte[] asBytes=IOUtils.toByteArray(bis);\n    return new String(asBytes,\"UTF-8\");\n  }\n }\n"}
{"nl": "When an explicit break statement is encountered this method should be called to store the current davaflowset", "code": "public void addToBreakList(String labelBroken,DavaFlowSet<T> set){\n  List<DavaFlowSet<T>> labelsBreakList=breakList.get(labelBroken);\n  if (labelsBreakList == null) {\n    labelsBreakList=new ArrayList<DavaFlowSet<T>>();\n    labelsBreakList.add(set);\n    breakList.put(labelBroken,labelsBreakList);\n  }\n else {\n    breakList.put(labelBroken,addIfNotDuplicate(labelsBreakList,set));\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"select series=\");\n  List<String> list=np.getTokensRespectCase(null,\";\");\n  ChartViewer viewer=(ChartViewer)getViewer();\n  for (  String name : list) {\n    if (name.equalsIgnoreCase(\"all\"))     viewer.getChartSelection().setSelectedSeries(viewer.getChartData().getSeriesNames(),true);\n else     if (name.equalsIgnoreCase(\"none\"))     viewer.getChartSelection().setSelectedSeries(viewer.getChartData().getSeriesNames(),false);\n else     viewer.getChartSelection().setSelectedSeries(name,true);\n  }\n  viewer.repaint();\n}\n"}
{"nl": "call this when tab containing list is activated", "code": "public void activate(){\n  getViewer().getSearchManager().setSearcher(getSearcher());\n  getViewer().getSearchManager().getFindDialogAsToolBar().clearMessage();\n  if (!inSelection) {\n    inSelection=true;\n    try {\n      chartSelection.clearSelectionSeries();\n      chartSelection.setSelectedSeries(getSelectedLabels(),true);\n      this.repaint();\n    }\n  finally {\n      inSelection=false;\n    }\n  }\n}\n"}
{"nl": "this tab has been selected", "code": "@Override public void activate(){\n}\n"}
{"nl": "method name to field name", "code": "public static String methodNameToFieldName(String methodPrefix,String methodName){\n  return methodNameToFieldName(methodPrefix,methodName,false);\n}\n"}
{"nl": "This function will rename the table to be deleted", "code": "public static void renameTableForDeletion(int partitionCount,String storePath,String databaseName,String tableName){\n  String tableNameWithPartition=\"\";\n  String databaseNameWithPartition=\"\";\n  String fullPath=\"\";\n  String newFilePath=\"\";\n  String newFileName=\"\";\n  Callable<Void> c=null;\n  long time=System.currentTimeMillis();\n  FileFactory.FileType fileType=null;\n  ExecutorService executorService=Executors.newFixedThreadPool(10);\n  for (int i=0; i < partitionCount; i++) {\n    databaseNameWithPartition=databaseName + '_' + i;\n    tableNameWithPartition=tableName + '_' + i;\n    newFileName=tableNameWithPartition + '_' + time;\n    fullPath=storePath + File.separator + databaseNameWithPartition+ File.separator+ tableNameWithPartition;\n    newFilePath=storePath + File.separator + databaseNameWithPartition+ File.separator+ newFileName;\n    fileType=FileFactory.getFileType(fullPath);\n    try {\n      if (FileFactory.isFileExist(fullPath,fileType)) {\n        CarbonFile file=FileFactory.getCarbonFile(fullPath,fileType);\n        boolean isRenameSuccessfull=file.renameTo(newFilePath);\n        if (!isRenameSuccessfull) {\n          LOGGER.error(\"Problem renaming the table :: \" + fullPath);\n          c=new DeleteFolderAndFiles(file);\n          executorService.submit(c);\n        }\n else {\n          c=new DeleteFolderAndFiles(FileFactory.getCarbonFile(newFilePath,fileType));\n          executorService.submit(c);\n        }\n      }\n    }\n catch (    IOException e) {\n      LOGGER.error(\"Problem renaming the table :: \" + fullPath);\n    }\n  }\n  executorService.shutdown();\n}\n"}
{"nl": "uninstall package and clear data of app silent by root", "code": "public int uninstallSilent(Context context,String packageName){\n  return uninstallSilent(context,packageName,false);\n}\n"}
{"nl": "If already connected and reconnect=false - nope", "code": "public void connect(List<StompHeader> _headers,boolean reconnect){\n  if (reconnect)   disconnect();\n  if (mConnected)   return;\n  mConnectionProvider.getLifecycleReceiver().subscribe(null);\n  mMessagesSubscription=mConnectionProvider.messages().map(null).subscribe(null);\n}\n"}
{"nl": "Registers the GUI handler for the given owner", "code": "public static void register(String owner,GUIHandler handler){\n  handlers.put(owner,handler);\n}\n"}
{"nl": "Set server", "code": "public PhotosSaveWallPhotoQuery server(Integer value){\n  return unsafeParam(\"server\",value);\n}\n"}
{"nl": "This function needs to be called when the application is no longer in the background (onStart, onResume)", "code": "public static void resume(){\n  TrafficService service=getAirMapTrafficService();\n  if (service != null) {\n    service.connect();\n  }\n}\n"}
{"nl": "make child query consistent by performing variable substitution so that parent variables are propagated", "code": "public void unify(Atomic parentAtom){\n  unifyViaAtom(parentAtom);\n  propagateConstraints(parentAtom);\n}\n"}
{"nl": "Draw table controls when selected", "code": "public static void drawTableControls(ViewTransform transform,Graphics2D g,ConstraintTableLayout table){\n  ArrayList<Guideline> vertical=table.getVerticalGuidelines();\n  Graphics2D g2=(Graphics2D)g.create();\n  g2.setStroke(new BasicStroke(1));\n  int l=transform.getSwingX(table.getDrawX());\n  int t=transform.getSwingY(table.getDrawY());\n  g2.setFont(sFont);\n  g2.drawRect(l,t - 20 - 4,20,20);\n  int column=0;\n  String align=table.getColumnAlignmentRepresentation(column++);\n  g2.drawString(align,l + 5,t - 4 - 5);\n  for (  ConstraintWidget v : vertical) {\n    int x=transform.getSwingX(v.getX()) + l;\n    g2.drawRect(x,t - 20 - 4,20,20);\n    align=table.getColumnAlignmentRepresentation(column++);\n    g2.drawString(align,x + 5,t - 4 - 5);\n  }\n  g2.dispose();\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAircraftManufacturer && ((AirMapAircraftManufacturer)o).getId().equals(getId());\n}\n"}
{"nl": "Writes the content into a file in UTF8", "code": "public void writeFileContent(String content,Path path) throws CommandException {\n  try {\n    Files.write(content,path.toFile(),StandardCharsets.UTF_8);\n  }\n catch (  IOException e) {\n    throw new CommandException(\"Cannot write file content in path: \" + path.toString(),e);\n  }\n}\n"}
{"nl": "returns the LCA of a set of taxon ids", "code": "public int computeNaiveLCA(Collection<Integer> taxonIds){\n  if (taxonIds.size() == 0)   return IdMapper.NOHITS_ID;\n else   if (taxonIds.size() == 1)   return taxonIds.iterator().next();\n  if (taxonIds.size() > addresses.length) {\n    addresses=new String[taxonIds.size()];\n  }\n  int numberOfAddresses=0;\n  for (  Integer id : taxonIds) {\n    if (!idMapper.isDisabled(id)) {\n      final String address=fullTree.getAddress(id);\n      if (address != null) {\n        addresses[numberOfAddresses++]=address;\n      }\n    }\n  }\n  if (numberOfAddresses > 0) {\n    final String address=LCAAddressing.getCommonPrefix(addresses,numberOfAddresses,true);\n    return fullTree.getAddress2Id(address);\n  }\n  return IdMapper.UNASSIGNED_ID;\n}\n"}
{"nl": "Offset based on a first matching item to get a certain items subset", "code": "public MarketGetQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n"}
{"nl": "init The ClientGameInformation Using Game's Name", "code": "public ClientGameInformation(String sGameName){\n  super();\n  this.gameName=sGameName;\n  this.playTimes=0;\n  this.win=0;\n  this.defeat=0;\n  this.score=0;\n}\n"}
{"nl": "Set whether or not Master balls can be used", "code": "public AsyncCatchOptions noMasterBall(boolean skipMasterBall){\n  this.skipMasterBall=skipMasterBall;\n  return this;\n}\n"}
{"nl": "Click mouse with default delay at certain position", "code": "public void click(int mask,int x,int y) throws InterruptedException {\n  move(x,y);\n  click(mask);\n}\n"}
{"nl": "This method will load the dictionary data for a given columnIdentifier", "code": "@Override public void load(DictionaryInfo dictionaryInfo,ColumnIdentifier columnIdentifier,long dictionaryChunkStartOffset,long dictionaryChunkEndOffset,boolean loadSortIndex) throws IOException {\n  Iterator<byte[]> columnDictionaryChunkWrapper=load(columnIdentifier,dictionaryChunkStartOffset,dictionaryChunkEndOffset);\n  if (loadSortIndex) {\n    readSortIndexFile(dictionaryInfo,columnIdentifier);\n  }\n  fillDictionaryValuesAndAddToDictionaryChunks(dictionaryInfo,columnDictionaryChunkWrapper);\n}\n"}
{"nl": "Sets up a connection to the MongoDB", "code": "private void connectDB(){\n  mongoClient=new MongoClient(dbHost,dbPort);\n  db=mongoClient.getDatabase(dbName);\n  usersCollection=db.getCollection(\"users\");\n  loginSessionsCollection=db.getCollection(\"logins\");\n}\n"}
{"nl": "make the time beauty", "code": "private String number2Full(int time){\n  if (time < 10) {\n    return \"0\" + time;\n  }\n else {\n    return \"\" + time;\n  }\n}\n"}
{"nl": "Insert all the Vars", "code": "Stream<Concept> insertAll(){\n  return insertAll(new HashMap<>());\n}\n"}
{"nl": "Synchronizes the file listening state with whether instant run is enabled", "code": "static void updateFileListener(@NotNull Project project){\n  InstantRunManager manager=get(project);\n  manager.myFileChangeListener.setEnabled(InstantRunSettings.isInstantRunEnabled());\n}\n"}
{"nl": "User login api", "code": "@RequestMapping(value=\"/user/login\",method=RequestMethod.POST,headers={\"Accept=application/json; charset=UTF-8\",\"Content-Type=application/json\"}) public RespJson userLogin(@RequestBody LoginReqDto reqDto){\n  if (reqDto == null || StringUtils.isEmpty(reqDto.getUserId()) || StringUtils.isEmpty(reqDto.getPassword())) {\n    return RespJson.buildFailureResponse(ERR_ID_PASSWORD_EMPTY);\n  }\n  try {\n    LoginResDto resDto=userService.login(reqDto);\n    return RespJson.buildSuccessResponse(resDto);\n  }\n catch (  Exception e) {\n    logger.error(\"Login Failed: \" + StringUtils.getValidString(e.getMessage()));\n    return RespJson.buildFailureResponse(StringUtils.getValidString(e.getMessage()));\n  }\n}\n"}
{"nl": "Objects read and written with repetitive must be immutable (cannot be changed as they are kept in underlying map, changing them will affect the next repetitiveRead/Write", "code": "public static <T>T readRepetitiveObject(ObjectInput in) throws IOException, ClassNotFoundException {\n  if (in instanceof MarshalInputStream)   return (T)((MarshalInputStream)in).readRepetitiveObject();\n  return (T)readObject(in);\n}\n"}
{"nl": "load multiple fragments", "code": "public void loadMultipleFragments(FragmentManager fragmentManager,int containerId,int showPos,BaseFragment... fragments){\n  FragmentTransaction ft=fragmentManager.beginTransaction();\n  ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);\n  for (int i=0; i < fragments.length; i++) {\n    BaseFragment fragment=fragments[i];\n    if (fragment == null) {\n      throw new IllegalArgumentException(\"loadMultipleFragments fragment in list can not be null \");\n    }\n    String tag=fragment.getClass().getName();\n    ft.add(containerId,fragment,tag);\n    if (showPos != i) {\n      ft.hide(fragment);\n    }\n    Bundle bundle=fragment.getArguments();\n    if (bundle != null) {\n      bundle.putBoolean(ARG_IS_ROOT,true);\n    }\n  }\n  ft.commit();\n}\n"}
{"nl": "Return the page as HTML", "code": "public PagesGetVersionQuery needHtml(Boolean value){\n  return unsafeParam(\"need_html\",value);\n}\n"}
{"nl": "not implemented", "code": "public void remove(){\n}\n"}
{"nl": "Return true if the given value can safely/correctly be set/loaded into this AnyVal", "code": "public boolean canSet(T value){\n  return isSettable ? internalCanSet(value) : matches(value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AuthConfirmQuery(VkApiClient client,int clientId,String clientSecret,String phone,String code){\n  super(client,\"auth.confirm\",ConfirmResponse.class);\n  clientId(clientId);\n  clientSecret(clientSecret);\n  phone(phone);\n  code(code);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsDeleteListQuery(VkApiClient client,UserActor actor,int listId){\n  super(client,\"friends.deleteList\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  listId(listId);\n}\n"}
{"nl": "save document", "code": "public static void saveDocument(final Document document,final String outputFullFilename){\n  OutputStream outputStream=null;\n  try {\n    TransformerFactory transformerFactory=TransformerFactory.newInstance();\n    Transformer transformer=transformerFactory.newTransformer();\n    DOMSource domSource=new DOMSource(document);\n    transformer.setOutputProperty(OutputKeys.ENCODING,Constant.Encoding.UTF8);\n    outputStream=new FileOutputStream(outputFullFilename);\n    StreamResult result=new StreamResult(outputStream);\n    transformer.transform(domSource,result);\n  }\n catch (  Exception e) {\n    throw new JavaXmlUtilException(e);\n  }\n finally {\n    if (outputStream != null) {\n      try {\n        outputStream.close();\n      }\n catch (      Exception e) {\n        throw new JavaXmlUtilException(e);\n      }\n    }\n  }\n}\n"}
{"nl": "sync summary to network formatting", "code": "public static void syncSummary2NetworkFormatting(DataTable megan4Table,ClusterViewer clusterViewer){\n  System.err.println(\"syncSummary2NetworkFormatting(): not implemented\");\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent event){\n  final ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();\n  final File lastOpenFile=ProgramProperties.getFile(MeganProperties.BLASTFILE);\n  final DAAFileFilter fileFilter=new DAAFileFilter();\n  java.util.List<File> files=ChooseFileDialog.chooseFilesToOpen(importBlastDialog,lastOpenFile,fileFilter,fileFilter,event,\"Open Diamond DAA file(s)\");\n  if (files.size() > 0) {\n    importBlastDialog.setBlastFileName(Basic.toString(files,\"\\n\"));\n    importBlastDialog.getBlastFileNameField().setText(Basic.toString(files,\"\\n\"));\n    ProgramProperties.put(MeganProperties.BLASTFILE,files.get(0));\n  }\n}\n"}
{"nl": "returns a string representation of the object", "code": "@Override public String toString(){\n  return \"PointD, x: \" + x + \", y: \"+ y;\n}\n"}
{"nl": "Calculate the optimal width and height of a page considering the area width and height", "code": "private void calculateOptimalWidthAndHeight(){\n  if (state == State.DEFAULT || getWidth() == 0) {\n    return;\n  }\n  float maxWidth=getWidth(), maxHeight=getHeight();\n  float w=pageWidth, h=pageHeight;\n  float ratio=w / h;\n  w=maxWidth;\n  h=(float)Math.floor(maxWidth / ratio);\n  if (h > maxHeight) {\n    h=maxHeight;\n    w=(float)Math.floor(maxHeight * ratio);\n  }\n  optimalPageWidth=w;\n  optimalPageHeight=h;\n}\n"}
{"nl": "Emits a tuple received from the Pulsar consumer unless there are any failed messages", "code": "@Override public void nextTuple(){\n  Message msg;\n  msg=failedMessages.peek();\n  if (msg != null) {\n    MessageRetries messageRetries=pendingMessageRetries.get(msg.getMessageId());\n    if (Backoff.shouldBackoff(messageRetries.getTimeStamp(),TimeUnit.NANOSECONDS,messageRetries.getNumRetries())) {\n      Utils.sleep(100);\n    }\n else {\n      LOG.info(\"[{}] Retrying failed message {}\",spoutId,msg.getMessageId());\n      failedMessages.remove();\n      mapToValueAndEmit(msg);\n    }\n    return;\n  }\n  if (consumer != null) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"[{}] Receiving the next message from pulsar consumer to emit to the collector\",spoutId);\n    }\n    try {\n      msg=consumer.receive(1,TimeUnit.SECONDS);\n      if (msg != null) {\n        ++messagesReceived;\n        messageSizeReceived+=msg.getData().length;\n      }\n      mapToValueAndEmit(msg);\n    }\n catch (    PulsarClientException e) {\n      LOG.error(\"[{}] Error receiving message from pulsar consumer\",spoutId,e);\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public StatusGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"status.get\",Status.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Npc stops attacking", "code": "public static final void emoteStopAttacking(Npc owner){\n  owner.unsetState(CreatureState.WEAPON_EQUIPPED);\n  if (owner.getTarget() != null && owner.getTarget() instanceof Player) {\n    PacketSendUtility.sendPacket((Player)owner.getTarget(),SM_SYSTEM_MESSAGE.STR_UI_COMBAT_NPC_RETURN(owner.getObjectTemplate().getNameId()));\n  }\n}\n"}
{"nl": "true - test mode, in which the user will not be registered and the phone number will not be checked for availability false - default mode (default)", "code": "public AuthSignupQuery testMode(Boolean value){\n  return unsafeParam(\"test_mode\",value);\n}\n"}
{"nl": "Returns a resize policy allowing vertical resizing only", "code": "@NotNull public static ResizePolicy vertical(){\n  return ourVertical;\n}\n"}
{"nl": "This method will add a new legion member to a legion with input rank", "code": "private void addLegionMember(Legion legion,Player player,LegionRank rank){\n  player.setLegionMember(new LegionMember(player.getObjectId(),legion,rank));\n  storeLegionMember(player.getLegionMember(),true);\n  PacketSendUtility.sendPacket(player,new SM_LEGION_INFO(legion));\n  ArrayList<LegionMemberEx> totalMembers=loadLegionMemberExList(legion,player.getObjectId());\n  ListSplitter<LegionMemberEx> splits=new ListSplitter<LegionMemberEx>(totalMembers,128);\n  boolean isFirst=true;\n  while (!splits.isLast()) {\n    boolean result=false;\n    List<LegionMemberEx> curentMembers=splits.getNext();\n    if (isFirst && curentMembers.size() < totalMembers.size()) {\n      result=true;\n    }\n    PacketSendUtility.sendPacket(player,new SM_LEGION_MEMBERLIST(curentMembers,result,isFirst));\n    isFirst=false;\n  }\n  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_ADD_MEMBER(player,false,1300260,player.getName()),player.getObjectId());\n  PacketSendUtility.sendPacket(player,new SM_LEGION_ADD_MEMBER(player,false,0,\"\"));\n  LegionEmblem legionEmblem=legion.getLegionEmblem();\n  PacketSendUtility.broadcastPacket(player,new SM_LEGION_UPDATE_EMBLEM(legion.getLegionId(),legionEmblem.getEmblemId(),legionEmblem.getColor_r(),legionEmblem.getColor_g(),legionEmblem.getColor_b(),legionEmblem.getEmblemType()),true);\n  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x08));\n  PacketSendUtility.broadcastPacket(player,new SM_LEGION_UPDATE_TITLE(player.getObjectId(),legion.getLegionId(),legion.getLegionName(),player.getLegionMember().getRank().getRankId()),true);\n}\n"}
{"nl": "Formats a list of Coordinates into WKT format", "code": "private static String makeGeoString(List<Coordinate> coordinates){\n  return TextUtils.join(\",\",coordinates);\n}\n"}
{"nl": "Getter returning true if we are in auto connect mode", "code": "public boolean isAutoConnect(){\n  return mAutoConnect;\n}\n"}
{"nl": "This method will fill the dictionary values according to dictionary bucket size and add to the dictionary chunk list", "code": "private void fillDictionaryValuesAndAddToDictionaryChunks(DictionaryInfo dictionaryInfo,Iterator<byte[]> columnDictionaryChunkWrapper){\n  int dictionaryChunkSize=CarbonUtil.getDictionaryChunkSize();\n  int sizeOfLastDictionaryChunk=dictionaryInfo.getSizeOfLastDictionaryChunk();\n  int sizeOfOneDictionaryChunk=dictionaryChunkSize - sizeOfLastDictionaryChunk;\n  if (sizeOfOneDictionaryChunk <= 0) {\n    sizeOfOneDictionaryChunk=dictionaryChunkSize;\n  }\n  List<List<byte[]>> dictionaryChunks=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);\n  List<byte[]> oneDictionaryChunk=new ArrayList<>(sizeOfOneDictionaryChunk);\n  dictionaryChunks.add(oneDictionaryChunk);\n  while (columnDictionaryChunkWrapper.hasNext()) {\n    oneDictionaryChunk.add(columnDictionaryChunkWrapper.next());\n    if (oneDictionaryChunk.size() >= sizeOfOneDictionaryChunk) {\n      sizeOfOneDictionaryChunk=dictionaryChunkSize;\n      oneDictionaryChunk=new ArrayList<>(sizeOfOneDictionaryChunk);\n      dictionaryChunks.add(oneDictionaryChunk);\n    }\n  }\n  for (  List<byte[]> dictionaryChunk : dictionaryChunks) {\n    if (!dictionaryChunk.isEmpty()) {\n      dictionaryInfo.addDictionaryChunk(dictionaryChunk);\n    }\n  }\n}\n"}
{"nl": "A casting without a role type specified", "code": "Casting(VarAdmin rolePlayer){\n  this.roleType=Optional.empty();\n  this.rolePlayer=rolePlayer;\n}\n"}
{"nl": "Base58 helper method", "code": "private byte[] copyOfRange(byte[] source,int from,int to){\n  byte[] range=new byte[to - from];\n  System.arraycopy(source,from,range,0,range.length);\n  return range;\n}\n"}
{"nl": "Invoked before bulk execution in EDS to update mirror statistics", "code": "private void beforeBulkExecution(IReplicationInBatchContext context){\n  if (_operationStatisticsHandler != null) {\n    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());\n    List<BulkItem> bulk=context.getPendingContext();\n    sourceChannelStatistics.addOperationCount(bulk);\n  }\n}\n"}
{"nl": "****************************** WISHLIST DATA QUERIES", "code": "public WishlistDataCursor queryWishlistsData(){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=false;\n  qh.Table=S.TABLE_WISHLIST_DATA;\n  qh.Columns=null;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  SQLiteQueryBuilder qb=builderWishlistData();\n  Cursor cursor=qb.query(getWritableDatabase(),qh.Columns,qh.Selection,qh.SelectionArgs,qh.GroupBy,qh.Having,qh.OrderBy,qh.Limit);\n  return new WishlistDataCursor(cursor);\n}\n"}
{"nl": "Sets deny dialog message", "code": "public Builder withDenyDialogMsg(@StringRes int denyDialogMsgRes){\n  buildObj.denyDialogMsgRes=denyDialogMsgRes;\n  buildObj.showDenyDialog=true;\n  return this;\n}\n"}
{"nl": "Checks if a channel with the given name is already registered", "code": "public static boolean exists(String name){\n  return channels.containsKey(name);\n}\n"}
{"nl": "Returns the color that, placed underneath the colors background and foreground, would result in the worst contrast", "code": "@NotNull public static Color worstContrastColor(@NotNull Color foreground,@NotNull Color background){\n  int backgroundAlpha=background.getAlpha();\n  int r=worstContrastComponent(foreground.getRed(),background.getRed(),backgroundAlpha);\n  int g=worstContrastComponent(foreground.getGreen(),background.getGreen(),backgroundAlpha);\n  int b=worstContrastComponent(foreground.getBlue(),background.getBlue(),backgroundAlpha);\n  return new Color(r,g,b);\n}\n"}
{"nl": "whether debug", "code": "public static void debug(){\n  DEBUG=true;\n}\n"}
{"nl": "The main program", "code": "public static void main(String[] args){\n  Vertx vertx=Vertx.vertx();\n  vertx.deployVerticleObservable(WebServiceExample.class.getName()).subscribe(null,null);\n}\n"}
{"nl": "Change to attackMode", "code": "public void attackMode(int targetObjId){\n  VisibleObject obj=getOwner().getKnownList().getObject(targetObjId);\n  if (obj != null && obj instanceof Creature) {\n    SummonsService.attackMode(getOwner());\n  }\n}\n"}
{"nl": "Add a double column with the specified restrictions", "code": "public Builder addColumnDouble(String name,Double minAllowedValue,Double maxAllowedValue,boolean allowNaN,boolean allowInfinite){\n  return addColumn(new DoubleMetaData(name,minAllowedValue,maxAllowedValue,allowNaN,allowInfinite));\n}\n"}
{"nl": "draw a rectangle at the given anchor point at the given angle (in radiant)", "code": "public static void drawRect(Graphics2D gc,double x,double y,double width,double height,double labelAngle){\n  Dimension theSize=new Dimension((int)Math.round(width),(int)Math.round(height));\n  Point2D apt=new Point2D.Float((float)x,(float)y);\n  AffineTransform saveTransform=gc.getTransform();\n  if (labelAngle >= 0.5 * Math.PI && labelAngle <= 1.5 * Math.PI) {\n    apt=Geometry.translateByAngle(apt,labelAngle,theSize.getWidth());\n    gc.rotate(Geometry.moduloTwoPI(labelAngle - Math.PI),apt.getX(),apt.getY());\n  }\n else {\n    gc.rotate(labelAngle,apt.getX(),apt.getY());\n  }\n  gc.drawRect((int)Math.round(apt.getX()),(int)Math.round(apt.getY()) - theSize.height,theSize.width,theSize.height);\n  gc.setTransform(saveTransform);\n}\n"}
{"nl": "Starts the reset expired jobs thread", "code": "protected void startResetExpiredJobsThread(){\n  if (resetExpiredJobThread == null) {\n    resetExpiredJobThread=new Thread(resetExpiredJobsRunnable);\n  }\n  resetExpiredJobThread.start();\n}\n"}
{"nl": "Checks if whole document can be displayed on screen, doesn't include zoom", "code": "public boolean documentFitsView(){\n  if (swipeVertical) {\n    return getPageCount() * optimalPageHeight < getHeight();\n  }\n else {\n    return getPageCount() * optimalPageWidth < getWidth();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public StorageGetKeysQuery(VkApiClient client,UserActor actor){\n  super(client,\"storage.getKeys\",Utils.buildParametrizedType(List.class,String.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "returns the currently pressed keys", "code": "public static int read(){\n  return KEYS;\n}\n"}
{"nl": "create the LogEntry for the logMessages", "code": "public static ILogEntry[] createLogEntriesFrom(ISVNRemoteFile remoteFile,ISVNLogMessage[] logMessages,Tags[] tags,SVNUrl[] urls){\n  ILogEntry[] result=new ILogEntry[logMessages.length];\n  for (int i=0; i < logMessages.length; i++) {\n    ISVNLogMessage logMessage=logMessages[i];\n    ISVNRemoteResource correspondingResource;\n    correspondingResource=new RemoteFile(null,remoteFile.getRepository(),urls[i],logMessage.getRevision(),logMessage.getRevision(),logMessage.getDate(),logMessage.getAuthor());\n    result[i]=new LogEntry(logMessage,remoteFile,correspondingResource,(tags[i] != null) ? tags[i].getTags() : null);\n  }\n  return result;\n}\n"}
{"nl": "zlib decompress 2 String", "code": "public static String decompressToStringForZlib(byte[] bytesToDecompress){\n  byte[] bytesDecompressed=decompressForZlib(bytesToDecompress);\n  String returnValue=null;\n  try {\n    returnValue=new String(bytesDecompressed,0,bytesDecompressed.length,\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException uee) {\n    uee.printStackTrace();\n  }\n  return returnValue;\n}\n"}
{"nl": "extract named samples from the given document", "code": "public void extractSamples(Collection<String> samples,Document srcDoc){\n  getDataTable().clear();\n  srcDoc.getDataTable().extractSamplesTo(samples,getDataTable());\n  getSampleAttributeTable().clear();\n  getSampleAttributeTable().addTable(srcDoc.getSampleAttributeTable().extractTable(samples),false,true);\n  getSampleAttributeTable().getAttributeOrder().clear();\n  getSampleAttributeTable().setAttributeOrder(srcDoc.getSampleAttributeTable().getAttributeOrder());\n  getSampleAttributeTable().getSampleOrder().clear();\n  getSampleAttributeTable().getSampleOrder().addAll(samples);\n}\n"}
{"nl": "Make a singleton ContextSet from a context pair", "code": "public static ContextSet singleton(String key,String value){\n  if (key == null) {\n    throw new NullPointerException(\"key\");\n  }\n  if (value == null) {\n    throw new NullPointerException(\"value\");\n  }\n  MutableContextSet set=new MutableContextSet();\n  set.add(key,value);\n  return set.immutableCopy();\n}\n"}
{"nl": "Just save html file", "code": "public boolean saveHtmlCache(String url,byte[] bytes){\n  if (TextUtils.isEmpty(url) || null == bytes || bytes.length == 0) {\n    return false;\n  }\n  if (!checkUrl(url)) {\n    return true;\n  }\n  return mInternalHtmlCache.saveCache(url,bytes);\n}\n"}
{"nl": "Returns Java code which provides a cast of the specified value to the type of this property ref", "code": "protected static String cast(VariableRef value,Type<?> type){\n  String castValue=value.toString();\n  String typeName=type.getCanonicalName();\n  if (type.isPrimitive()) {\n    if (value.isWrapper()) {\n      castValue=format(\"%s.%sValue()\",castValue,type);\n    }\n else     if (Character.TYPE == type.getRawType() && value.type().isString()) {\n      castValue=format(\"%s.charAt(0)\",value);\n    }\n else     if (!value.isPrimitive()) {\n      castValue=format(\"%s.valueOf(\\\"\\\"+%s).%sValue()\",type.getWrapperType().getCanonicalName(),castValue,typeName);\n    }\n  }\n else   if (type.isPrimitiveWrapper() && value.isPrimitive()) {\n    castValue=format(\"%s.valueOf(%s)\",type.getCanonicalName(),castValue);\n  }\n else   if (type.isString() && !value.type().isString()) {\n    castValue=\"\\\"\\\" + \" + castValue;\n  }\n else   if (!castValue.replace(\"(\",\"\").startsWith(typeName)) {\n    castValue=\"((\" + typeName + \")\"+ castValue+ \")\";\n  }\n  return castValue;\n}\n"}
{"nl": "Constructs new <tt>SM_PLAYER_INFO </tt> packet", "code": "public SM_PLAYER_INFO(Player player,boolean enemy){\n  this.player=player;\n  this.enemy=enemy;\n}\n"}
{"nl": "Returns true if this policy requires resizing in an aspect-ratio preserving manner", "code": "public boolean isAspectPreserving(){\n  return (myFlags & PRESERVE_RATIO) != 0;\n}\n"}
{"nl": "build the overlap graph", "code": "public void computeOverlapGraph(String label,int minOverlap,List<ReadData> readData,ProgressListener progress) throws IOException, CanceledException {\n  this.label=label;\n  final OverlapGraphBuilder overlapGraphBuilder=new OverlapGraphBuilder(minOverlap,verbose);\n  overlapGraphBuilder.apply(readData,progress);\n  overlapGraph=overlapGraphBuilder.getOverlapGraph();\n{\n    if (verbose)     System.err.print(\"Checking for cycles: \");\n    final int edgesRemoved=DirectedCycleBreaker.apply(overlapGraph);\n    if (verbose) {\n      System.err.println(edgesRemoved + (edgesRemoved > 0 ? \" removed\" : \"\"));\n    }\n  }\n  readId2ReadData=overlapGraphBuilder.getReadId2ReadData();\n  node2ReadNameMap=overlapGraphBuilder.getNode2ReadNameMap();\n  readId2ContainedReads=overlapGraphBuilder.getReadId2ContainedReads();\n  final PathExtractor pathExtractor=new PathExtractor(overlapGraph,readId2ContainedReads);\n  pathExtractor.apply(progress);\n}\n"}
{"nl": "write a byte-byte-int", "code": "public void writeByteByteInt(ByteByteInt a) throws IOException {\n  outs.write(a.getByte1());\n  outs.write(a.getByte2());\n  position+=2;\n  writeInt(a.getValue());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardCreateCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n"}
{"nl": "Utility method for saving a user or group", "code": "void save(PermissionHolder holder){\n  if (holder instanceof User) {\n    plugin.getDatastore().saveUser(((User)holder),null);\n  }\n  if (holder instanceof Group) {\n    plugin.getDatastore().saveGroup(((Group)holder),null);\n  }\n}\n"}
{"nl": "Check whether user assigned to project<br> Or user is ADMIN who is GOD of ReportPortal", "code": "@Override public boolean isAllowed(Authentication authentication,Object projectName){\n  return authentication.isAuthenticated() && projectRepository.get().isAssignedToProject((String)projectName,authentication.getName());\n}\n"}
{"nl": "Adds the entry set of a map to the set", "code": "public void addAll(Map<String,String> map){\n  if (map == null) {\n    throw new NullPointerException(\"contexts\");\n  }\n  addAll(map.entrySet());\n}\n"}
{"nl": "Delete a selected directory recursively", "code": "public static boolean deleteDir(File dir){\n  if (dir == null) {\n    return false;\n  }\n  if (dir.isDirectory()) {\n    String[] children=dir.list();\n    for (    String child : children) {\n      boolean success=deleteDir(new File(dir,child));\n      if (!success) {\n        return false;\n      }\n    }\n  }\n  return dir.delete();\n}\n"}
{"nl": "Convert a reader to a string", "code": "public static String convertReaderToString(Reader reader,int readerLength) throws IOException {\n  StringWriter writer=new StringWriter();\n  int blockSize=DEFAULT_BUFFER_SIZE;\n  char[] buffer=new char[blockSize];\n  int left=readerLength;\n  while (left > 0) {\n    int read=reader.read(buffer,0,left > blockSize ? blockSize : left);\n    if (read == -1)     break;\n    writer.write(buffer,0,read);\n    left-=read;\n  }\n  writer.close();\n  return writer.toString();\n}\n"}
{"nl": "performs gene-centric assemblies", "code": "public static void main(String[] args){\n  try {\n    ProgramProperties.setProgramName(\"GCAssembler\");\n    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);\n    PeakMemoryUsageMonitor.start();\n    (new GCAssembler()).run(args);\n    System.err.println(\"Total time:  \" + PeakMemoryUsageMonitor.getSecondsSinceStartString());\n    System.err.println(\"Peak memory: \" + PeakMemoryUsageMonitor.getPeakUsageString());\n    System.exit(0);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n    System.exit(1);\n  }\n}\n"}
{"nl": "Checks if there is a Manifest file loaded", "code": "private static boolean checkLoaded(){\n  if (manifest == null) {\n    return parse();\n  }\n  return true;\n}\n"}
{"nl": "append the cigar string", "code": "public static void appendCigar(String alignedQuery,String alignedReference,StringBuilder buffer){\n  char cigarState='M';\n  int count=0;\n  for (int i=0; i < alignedQuery.length(); i++) {\n    if (alignedQuery.charAt(i) == '-') {\n      if (cigarState == 'D') {\n        count++;\n      }\n else       if (count > 0) {\n        buffer.append(count).append(cigarState);\n        cigarState='D';\n        count=1;\n      }\n    }\n else     if (alignedReference.charAt(i) == '-') {\n      if (cigarState == 'I') {\n        count++;\n      }\n else       if (count > 0) {\n        buffer.append(count).append(cigarState);\n        cigarState='I';\n        count=1;\n      }\n    }\n else {\n      if (cigarState == 'M') {\n        count++;\n      }\n else       if (count > 0) {\n        buffer.append(count).append(cigarState);\n        cigarState='M';\n        count=1;\n      }\n    }\n  }\n  if (count > 0) {\n    buffer.append(count).append(cigarState);\n  }\n}\n"}
{"nl": "DECORATION QUERIES", "code": "public DecorationCursor queryDecorations(){\n  return mHelper.queryDecorations();\n}\n"}
{"nl": "Logs an error message to the console or logcat", "code": "public static void error(Object message){\n  Gdx.app.error(TAG,String.valueOf(message));\n}\n"}
{"nl": "Returns the vector length (sqrt(sum(x_i))", "code": "public static double vectorLength(double[] vector){\n  double ret=0;\n  if (vector == null)   return ret;\n else {\n    for (    double aVector : vector) {\n      ret+=Math.pow(aVector,2);\n    }\n  }\n  return ret;\n}\n"}
{"nl": "Return an additional \"likes\" field", "code": "public PhotosGetCommentsQuery needLikes(Boolean value){\n  return unsafeParam(\"need_likes\",value);\n}\n"}
{"nl": "Indicate whether the feature definition contains the feature with the given name", "code": "public boolean hasFeature(String name){\n  return featureNames.contains(name);\n}\n"}
{"nl": "Set university chair", "code": "public UsersSearchQuery universityChair(Integer value){\n  return unsafeParam(\"university_chair\",value);\n}\n"}
{"nl": "Reduce the specified columns by counting the number of values", "code": "public Builder countColumns(String... columns){\n  return add(ReduceOp.Count,columns);\n}\n"}
{"nl": "does label match pattern?", "code": "private static boolean matches(Pattern pattern,String label){\n  if (label == null)   label=\"\";\n  Matcher matcher=pattern.matcher(label);\n  return matcher.find();\n}\n"}
{"nl": "erase labels", "code": "public void clearLabels(){\n  sample2label.clear();\n}\n"}
{"nl": "Checks if object id's are the same", "code": "public boolean sameObjectId(int objectId){\n  return this.getObjectId() == objectId;\n}\n"}
{"nl": "Opens a GUI for the player from the given owner, GUI ID, and context", "code": "public static void open(EntityPlayer player,String owner,String guiID,GUIContext context){\n  if (player.worldObj.isRemote) {\n    openClient(player,owner,guiID,context);\n  }\n else {\n    openServer(player,owner,guiID,context);\n  }\n}\n"}
{"nl": "We're simply posting the event to the provided bus", "code": "protected InternalEventTracker handleEvent(Event event){\n  InternalEventTracker eventTracker=bus.postEvent(event);\n  if (eventTracker.hasErrors()) {\n    eventTracker.getFirstError().printStackTrace();\n  }\n  return eventTracker;\n}\n"}
{"nl": "Put an instance of a type which may or may not have an ID specified", "code": "private <T extends Type,S extends Instance>S putInstance(Optional<String> id,T type,BiFunction<String,T,S> putInstance,Function<T,S> addInstance){\n  return id.map(null).orElseGet(null);\n}\n"}
{"nl": "Calculate point on circumference for circle(centerX, centerY, radius) with angle in radians", "code": "public static float[] pointOnCircumference(int centerX,int centerY,double angle,double radius){\n  float[] result=new float[2];\n  pointOnCircumference(centerX,centerY,angle,radius,result);\n  return result;\n}\n"}
{"nl": "Helper method to build the url to the given test file", "code": "private String toUrl(String testFile) throws MalformedURLException {\n  return new File(TestUtil.TEST_DATA_FOLDER + \"pac\",testFile).toURI().toURL().toString();\n}\n"}
{"nl": "Check whether c is an arithmetic (+ - * /) character", "code": "private boolean cIsArithmetic(Character c){\n  return (c == '+' || c == '-' || c == '*' || c == '/');\n}\n"}
{"nl": "Handle permission results", "code": "@Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){\nswitch (requestCode) {\ncase Constants.PERMISSION_REQUEST_WRITE_EXTERNAL_STORAGE:\n{\n      if (grantResults.length != 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n        Log.d(TAG,\"Write External permission granted\");\n        getData();\n        return;\n      }\n      Log.e(TAG,\"Permission not granted: results len = \" + grantResults.length + \" Result code = \"+ (grantResults.length > 0 ? grantResults[0] : \"(empty)\"));\n      finish();\n    }\ncase Constants.PERMISSION_REQUEST_CAMERA:\n{\n    if (grantResults.length != 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n      Log.d(TAG,\"Camera permission granted\");\n      captureImage();\n      return;\n    }\n    Log.e(TAG,\"Permission not granted: results len = \" + grantResults.length + \" Result code = \"+ (grantResults.length > 0 ? grantResults[0] : \"(empty)\"));\n    break;\n  }\ndefault :\n{\n  Log.d(TAG,\"Got unexpected permission result: \" + requestCode);\n  super.onRequestPermissionsResult(requestCode,permissions,grantResults);\n  break;\n}\n}\n}\n"}
{"nl": "Return true if the connection is represented by a curve", "code": "public boolean hasCurve(){\n  return mHasCurve;\n}\n"}
{"nl": "Is this a Spark or Geom?", "code": "public boolean hasGeomExecuted(){\n  return hasExecuted;\n}\n"}
{"nl": "Builds the TileLayerOptions new instance", "code": "public TileLayerOptions build(){\n  TileLayerOptions options=new TileLayerOptions();\n  options.minZoom=this.minZoom;\n  options.maxZoom=this.maxZoom;\n  options.maxNativeZoom=this.maxNativeZoom;\n  options.tileSize=this.tileSize;\n  options.subdomains=this.subdomains;\n  options.errorTileUrl=this.errorTileUrl;\n  options.attribution=this.attribution;\n  options.tms=this.tms;\n  options.continuousWorld=this.continuousWorld;\n  options.noWrap=this.noWrap;\n  options.zoomOffset=this.zoomOffset;\n  options.zoomReverse=this.zoomReverse;\n  options.opacity=this.opacity;\n  options.zIndex=this.zIndex;\n  options.unloadInvisibleTiles=this.unloadInvisibleTiles;\n  options.updateWhenIdle=this.updateWhenIdle;\n  options.detectRetina=this.detectRetina;\n  options.reuseTiles=this.reuseTiles;\n  options.bounds=this.bounds;\n  return options;\n}\n"}
{"nl": "Hide all dialogs", "code": "public static void hideProgressDialogsAll(){\nsynchronized (sLock) {\n    for (    ProgressDialog dialog : sDialogs.keySet()) {\n      if (isAlive(dialog) && dialog.isShowing())       dialog.dismiss();\n    }\n    sDialogs.clear();\n  }\n}\n"}
{"nl": "Notify the listeners that traffic has been added", "code": "private void notifyAdded(List<AirMapTraffic> added){\n  if (added == null || added.isEmpty()) {\n    return;\n  }\n  for (  AirMapTrafficListener listener : listeners) {\n    listener.onAddTraffic(added);\n  }\n}\n"}
{"nl": "determines whether this is the identity matrix", "code": "public boolean isIdentity(){\n  for (int i=0; i < v.length; i++) {\n    for (int j=0; j < v.length; j++) {\n      if (i == j) {\n        if (v[i].v[j] != 1)         return false;\n      }\n else       if (v[i].v[j] != 0)       return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Are there any logged errors or warnings during the render?", "code": "public boolean hasProblems(){\n  return hasErrors() || myFidelityWarnings != null;\n}\n"}
{"nl": "Logs with error level", "code": "public static void error(@NonNull String tag,String message,Object... args){\n  android.util.Log.e(tag,String.format(Locale.ENGLISH,message,args));\n}\n"}
{"nl": "Convert Aggregation result into readable map content", "code": "private Map<String,ComplexValue> mapAggregationConvert(Map<String,String> input){\n  return input.entrySet().stream().collect(toMap(null,null));\n}\n"}
{"nl": "Defines class from bytecode, in the current classloader", "code": "private Class<?> defineClass(String className,byte[] definition) throws ClassFormatError {\n  if (_logger.isLoggable(Level.FINE))   _logger.fine(this.toString() + \" defining class: \" + className);\n  try {\n    Class<?> defineClass=defineClass(className,definition,0,definition.length);\n    LRMIClassLoader previousClassLoader=_serviceClassLoaderContext.putClassBytesAndLoader(className,this,definition);\n    if (previousClassLoader != null)     throw new IllegalStateException(\"Class: \" + className + \" is already loaded in this service by LRMIClassLoader \"+ previousClassLoader);\n    return defineClass;\n  }\n catch (  ClassFormatError e) {\n    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE,this.toString() + \" class format error caught while defining class: \" + className,e);\n    throw e;\n  }\n}\n"}
{"nl": "check whether current entries are valid", "code": "public boolean isApplicable(){\n  try {\n    resamplingMethod.setOptionResamplingSize(Integer.parseInt(resamplingSizeTF.getText()));\n    resamplingMethod.setOptionRepeatitions(Integer.parseInt(repeatitionsTF.getText()));\n    resamplingMethod.setOptionLeftPercentile(Double.parseDouble(percentileLeftTF.getText()));\n    return resamplingMethod.isApplicable();\n  }\n catch (  NumberFormatException ex) {\n    System.err.println(\"Error: \" + ex);\n    return false;\n  }\n}\n"}
{"nl": "Stores an IFallback object into a DB table", "code": "@Override public final void storeData(final IFallback object) throws IDBPersistenceException {\n  if (object instanceof FallbackImpl) {\n    if (!((FallbackImpl)object).toString().equals(FallbackImpl.ERROR)) {\n      storage.add(object);\n    }\n else {\n      throw new IDBPersistenceException(\"Connection to the DB has been lost\");\n    }\n  }\n}\n"}
{"nl": "Pauses audio output", "code": "public void pause(){\n}\n"}
{"nl": "Returns the string form of this object", "code": "public String toString(){\n  return \"AudioOutput\";\n}\n"}
{"nl": "Deserialises the JSON string into a <code>DeviceTransfer</code> object instance", "code": "public static TransferDevice fromJson(final String json){\n  return getGson().fromJson(json,TransferDeviceImpl.class);\n}\n"}
{"nl": "Constructs new server packet with specified opcode", "code": "public SM_EMOTION(Creature creature,EmotionType emotionType,int emotion,int targetObjectId){\n  this.senderObjectId=creature.getObjectId();\n  this.emotionType=emotionType;\n  this.emotion=emotion;\n  this.targetObjectId=targetObjectId;\n  this.state=creature.getState();\n  Stat2 aSpeed=creature.getGameStats().getAttackSpeed();\n  this.baseAttackSpeed=aSpeed.getBase();\n  this.currentAttackSpeed=aSpeed.getCurrent();\n  this.speed=creature.getGameStats().getMovementSpeedFloat();\n}\n"}
{"nl": "Builds the PolylineOptions new instance", "code": "public PolylineOptions build(){\n  PolylineOptions options=new PolylineOptions();\n  options.smoothFactor=this.smoothFactor;\n  options.noClip=this.noClip;\n  options.stroke=this.stroke;\n  options.color=this.color;\n  options.weight=this.weight;\n  options.opacity=this.opacity;\n  options.fill=this.fill;\n  options.fillColor=this.fillColor;\n  options.fillOpacity=this.fillOpacity;\n  options.fillRule=this.fillRule;\n  options.dashArray=this.dashArray;\n  options.lineCap=this.lineCap;\n  options.lineJoin=this.lineJoin;\n  options.clickable=this.clickable;\n  options.pointerEvents=this.pointerEvents;\n  options.className=this.className;\n  return options;\n}\n"}
{"nl": "Set date", "code": "public VideoSearchQueryWithExtended date(Integer value){\n  return unsafeParam(\"date\",value);\n}\n"}
{"nl": "Asserts if the provided text is part of some text, ignoring any uppercase characters", "code": "public void assertTextPresentIgnoreCase(String expected,String actual){\n  assertTextPresent(expected.toLowerCase(),actual.toLowerCase());\n}\n"}
{"nl": "add children to read level data node", "code": "public void addChildren(final ReadDataLevelNode parent){\n  parent.add(new ReadDataNode(parent.getData()));\n}\n"}
{"nl": "check patch signature, TINKER_ID and meta files", "code": "@Override public void onLoadPackageCheckFail(File patchFile,int errorCode){\n  TinkerLog.i(TAG,\"load patch package check fail file path:%s, errorCode:%d\",patchFile.getAbsolutePath(),errorCode);\n  Tinker.with(context).cleanPatch();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsGetByIdQuery(VkApiClient client,UserActor actor,List<String> docs){\n  super(client,\"docs.getById\",Utils.buildParametrizedType(List.class,Doc.class));\n  accessToken(actor.getAccessToken());\n  docs(docs);\n}\n"}
{"nl": "Initializes the QualityCheckSession defined in the parent step, using Reflection", "code": "public QualityCheckStep(){\n  super();\n  try {\n    parentSession=new QualityCheckSession();\n    Field field=FieldUtils.getDeclaredField(this.getClass().getSuperclass(),\"session\",true);\n    field.set(this,parentSession);\n  }\n catch (  IllegalAccessException e) {\n    logger.error(\"Cannot replace the QualityCheckSession with Reflection\");\n  }\n}\n"}
{"nl": "Initialise the connector", "code": "@Override public void initialize(ConnectorContext ctx,List<Map<String,String>> taskConfigs){\n}\n"}
{"nl": "Use the given style for subsequent drawing operations", "code": "public void useStyle(@NotNull NlDrawingStyle style){\n  myStyle=style;\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.BRAYCURTIS);\n}\n"}
{"nl": "Creates a file with the specified contents and file path in the test project", "code": "protected VirtualFile createFile(String filePath,String... contentLines){\n  return createFile(filePath,Joiner.on(\"\\n\").join(contentLines));\n}\n"}
{"nl": "API will prepare the Keys from the surrogates of particular filter resolver", "code": "public static void prepareKeysFromSurrogates(DimColumnFilterInfo filterValues,SegmentProperties segmentProperties,CarbonDimension dimension,DimColumnExecuterFilterInfo dimColumnExecuterInfo){\n  byte[][] keysBasedOnFilter=getKeyArray(filterValues,dimension,segmentProperties);\n  dimColumnExecuterInfo.setFilterKeys(keysBasedOnFilter);\n}\n"}
{"nl": "run neighbor-net", "code": "public SplitSystem apply(ProgressListener progressListener,Taxa taxa,Distances distances) throws CanceledException {\n  progressListener.setTasks(\"Computing non-hierarchical clustering using\",\"Neighbor-Net\");\n  ordering=new int[taxa.size() + 1];\n  if (taxa.size() > 3)   runNeighborNet(progressListener,taxa.size(),setupMatrix(distances),ordering);\n else   return new SplitSystem();\n  return CircularSplitWeights.getWeightedSplits(ordering,distances,\"ols\",true,0.0001f);\n}\n"}
{"nl": "Fill data on BluePrint view", "code": "public CreateSiteWindow selectBlueprint(String createdSiteTitle,String createdSiteName,String createdSiteTemplate){\n  typeTitle(createdSiteTitle);\n  typeName(createdSiteName);\n  selectTemplate(createdSiteTemplate);\n  return this;\n}\n"}
{"nl": "get the named column", "code": "public int findColumn(String name){\n  for (int col=0; col < getColumnCount(); col++)   if (getColumnName(col).equals(name))   return col;\n  return -1;\n}\n"}
{"nl": "Open app settings screen", "code": "private void openAppSettings(){\n  Intent intent=new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,Uri.fromParts(\"package\",getPackageName(),null));\n  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  startActivity(intent);\n}\n"}
{"nl": "Registers a listener for a particular condition with a given priority", "code": "public void registerListener(Condition condition,EventListener listener,int priority){\n  getListenerForCondition(condition,-1).registerListener(listener,priority);\n}\n"}
{"nl": "This method will add a new legion member to the cache", "code": "private void addCachedLegionMemberEx(LegionMemberEx legionMemberEx){\n  this.allCachedLegionMembers.addMemberEx(legionMemberEx);\n}\n"}
{"nl": "construct an RMA6 modifier and read in RMA6 data", "code": "public RMA6FileModifier(String fileName) throws IOException {\n  super(fileName,READ_WRITE);\n  super.close();\n}\n"}
{"nl": "construct a parser and load all commands found for the given paths", "code": "public CommandManagerFX(IDirector dir,Object viewer,String[] commandsPaths,boolean returnOnCommandNotFound){\n  super(dir,viewer,commandsPaths,returnOnCommandNotFound);\n}\n"}
{"nl": "erase the current label", "code": "public void clearCurrentItem(){\n  currentItem=null;\n}\n"}
{"nl": "Take the url passed when creating the client and ensure the correct protocol is provided", "code": "private URI parseUri(String url,String defaultPath) throws URISyntaxException {\n  if (url.matches(\"^http:|^https:\")) {\n    throw new URISyntaxException(url,\"HTTP/HTTPS is not supported, please use ws or wss instead\");\n  }\n  if (url.matches(\"^//\")) {\n    url=\"ws:\" + url;\n  }\n else   if (!url.matches(\"^ws:|^wss:\")) {\n    url=\"ws://\" + url;\n  }\n  URI uri=new URI(url);\n  if (uri.getPath().equals(\"\")) {\n    uri=uri.resolve(defaultPath);\n  }\n  return uri;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  ClassificationViewer classificationViewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName(cName);\n  if (classificationViewer == null) {\n    try {\n      classificationViewer=new ClassificationViewer((Director)getDir(),ClassificationManager.get(cName,true),true);\n      getDir().addViewer(classificationViewer);\n    }\n catch (    Exception e) {\n      Basic.caught(e);\n    }\n  }\n  if (classificationViewer != null) {\n    classificationViewer.updateView(Director.ALL);\n    classificationViewer.getFrame().setVisible(true);\n    classificationViewer.getFrame().setState(JFrame.NORMAL);\n    classificationViewer.getFrame().toFront();\n  }\n}\n"}
{"nl": "This method checks all restrictions for disband legion", "code": "private boolean canDisbandLegion(Player activePlayer,Legion legion){\n  if (legion == null) {\n    return false;\n  }\n  if (!isBrigadeGeneral(activePlayer)) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_DISPERSE_ONLY_MASTER_CAN_DISPERSE);\n    return false;\n  }\n else   if (legion.getLegionWarehouse().size() > 0) {\n    return false;\n  }\n else   if (legion.isDisbanding()) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_DISPERSE_ALREADY_REQUESTED);\n    return false;\n  }\n else   if (legion.getLegionWarehouse().size() > 0) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_DISPERSE_CANT_DISPERSE_GUILD_STORE_ITEM_IN_WAREHOUSE);\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedDeleteBanQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.deleteBan\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Apply reasoner to match query", "code": "private MatchQuery reasonMatchQuery(MatchQuery query){\n  if (!reasoner.getRules().isEmpty()) {\n    return reasoner.resolveToQuery(query);\n  }\n else {\n    return query;\n  }\n}\n"}
{"nl": "Creates a new instance of NGramDocumentComparatorAgent", "code": "public NGramDocumentComparatorAgent(){\n  super();\n}\n"}
{"nl": "A method to be called when an element has been renamed", "code": "void renamedElement(Element oldEl,Element newEl){\n}\n"}
{"nl": "if the trunk server", "code": "public boolean isTrunkServer(){\n  return this.ifTrunkServer;\n}\n"}
{"nl": "is this a major KPCOFGS rank?", "code": "public static boolean isMajorRank(int rank){\n  return getInstance().majorRanks.get(rank);\n}\n"}
{"nl": "grab the last token of the last line that contains the given key and is passed the first occurrence of \"Score\"", "code": "public static String grabLastInLinePassedScore(String text,String key) throws IOException {\n  int scorePos=text.indexOf(\"Score\");\n  if (scorePos == -1)   throw new IOException(\"Token not found: 'Score'\");\n  int end=text.lastIndexOf(key);\n  if (end == -1)   throw new IOException(\"Token not found: '\" + key + \"'\");\n  if (end < scorePos)   throw new IOException(\"Token not found before 'Score': '\" + key + \"'\");\n  end=text.indexOf(\"\\n\",end);\n  if (end == -1)   end=text.length() - 1;\n  while (end > 0 && Character.isWhitespace(text.charAt(end)))   end--;\n  int start=end;\n  while (start > 0 && !Character.isWhitespace(text.charAt(start)))   start--;\n  start+=1;\n  return text.substring(start,end + 1);\n}\n"}
{"nl": "Set target id", "code": "public VideoAddToAlbumQuery targetId(Integer value){\n  return unsafeParam(\"target_id\",value);\n}\n"}
{"nl": "test whether there are at least two samples for each attribute value", "code": "public static boolean isSuitableAttribute(SampleAttributeTable sampleAttributeTable,String attribute){\n  if (sampleAttributeTable.isSecretAttribute(attribute) || sampleAttributeTable.isHiddenAttribute(attribute))   return false;\n  boolean ok=true;\n  Map<Object,Integer> value2count=new HashMap<>();\n  for (  String sample : sampleAttributeTable.getSampleOrder()) {\n    Object value=sampleAttributeTable.get(sample,attribute);\n    if (value == null) {\n      ok=false;\n      break;\n    }\n else {\n      Integer count=value2count.get(value);\n      if (count == null)       value2count.put(value,1);\n else       value2count.put(value,count + 1);\n    }\n  }\n  if (ok) {\n    for (    Integer count : value2count.values()) {\n      if (count < 2) {\n        ok=false;\n        break;\n      }\n    }\n  }\n  return ok;\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n"}
{"nl": "is viewer uptodate?", "code": "public boolean isUptoDate(){\n  return this.uptodate;\n}\n"}
{"nl": "read int little endian", "code": "public int readInt() throws IOException {\n  if (ins.read(bytes,0,4) < 4)   throw new IOException(\"buffer underflow\");\n  return (((int)bytes[0] & 0xFF)) | (((int)bytes[1] & 0xFF) << 8) | (((int)bytes[2] & 0xFF) << 16)| (((int)bytes[3]) << 24);\n}\n"}
{"nl": "Not thread-safe: only call from main thread!", "code": "public static void applyDrawableToImageView(Drawable drawable,ImageView view,int color){\n  drawable.mutate().setColorFilter(color,PorterDuff.Mode.MULTIPLY);\n  view.setImageDrawable(drawable);\n}\n"}
{"nl": "append file to storage server (by file name)", "code": "public int append_file(String group_name,String appender_filename,String local_filename) throws IOException, MyException {\n  File f=new File(local_filename);\n  FileInputStream fis=new FileInputStream(f);\n  try {\n    return this.do_append_file(group_name,appender_filename,f.length(),new UploadStream(fis,f.length()));\n  }\n  finally {\n    fis.close();\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set colorMatchesVsConsensus=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().getAlignmentPanel().setColorMatchesVsConsensus(value);\n  ProgramProperties.put(\"ColorMatchesVsConsensus\",value);\n  viewer.repaint();\n}\n"}
{"nl": "Create page in provided location", "code": "public void createPage(String parentPath,String title,String template) throws IOException {\n  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(CMD_PROPERTY,CREATE_PAGE_COMMAND).put(CHARSET_PROPERTY,UTF_8).put(PARENT_PATH_PROPERTY,parentPath).put(TITLE_PROPERTY,title).put(TEMPLATE_PROPERTY,template).build()),WCM_COMMAND_URL,PAGE_CREATED_SUCCESS_MESSAGE);\n}\n"}
{"nl": "merge RMA files", "code": "public static void main(String[] args){\n  try {\n    ProgramProperties.setProgramName(\"DAA2RMA\");\n    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);\n    PeakMemoryUsageMonitor.start();\n    (new DAA2RMA6()).run(args);\n    System.err.println(\"Total time:  \" + PeakMemoryUsageMonitor.getSecondsSinceStartString());\n    System.err.println(\"Peak memory: \" + PeakMemoryUsageMonitor.getPeakUsageString());\n    System.exit(0);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n    System.exit(1);\n  }\n}\n"}
{"nl": "Attach the new child to the previous node", "code": "public void attachPrevious(NlComponent previous,NlComponent node){\n  removeRelativeParams(node);\n  String id=previous.getId();\n  if (StringUtil.isEmpty(id)) {\n    return;\n  }\n  if (myCurrentTopMatch != null || myCurrentBottomMatch != null) {\n    node.setAttribute(ANDROID_URI,myCurrentTopMatch != null ? ATTR_LAYOUT_BELOW : ATTR_LAYOUT_ABOVE,id);\n    if (myCurrentLeftMatch != null) {\n      applyConstraint(node,myCurrentLeftMatch.getConstraint(true));\n      applyMargin(node,ATTR_LAYOUT_MARGIN_LEFT,myLeftMargin);\n    }\n else     if (myCurrentRightMatch != null) {\n      applyConstraint(node,myCurrentRightMatch.getConstraint(true));\n      applyMargin(node,ATTR_LAYOUT_MARGIN_RIGHT,myRightMargin);\n    }\n  }\n else   if (myCurrentLeftMatch != null || myCurrentRightMatch != null) {\n    node.setAttribute(ANDROID_URI,myCurrentLeftMatch != null ? ATTR_LAYOUT_TO_RIGHT_OF : ATTR_LAYOUT_TO_LEFT_OF,id);\n    if (myCurrentTopMatch != null) {\n      applyConstraint(node,myCurrentTopMatch.getConstraint(true));\n      applyMargin(node,ATTR_LAYOUT_MARGIN_TOP,getTopMarginDp());\n    }\n else     if (myCurrentBottomMatch != null) {\n      applyConstraint(node,myCurrentBottomMatch.getConstraint(true));\n      applyMargin(node,ATTR_LAYOUT_MARGIN_BOTTOM,getBottomMarginDp());\n    }\n  }\n}\n"}
{"nl": "Add another resource", "code": "private static int res(String res){\n  int nextRes=lastRes++;\n  resources.put(nextRes,res);\n  return nextRes;\n}\n"}
{"nl": "copy the remote resource to the given remote folder ", "code": "public void copyRemoteResource(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String message,IProgressMonitor monitor) throws SVNException {\n  IProgressMonitor progress=Policy.monitorFor(monitor);\n  progress.beginTask(Policy.bind(\"RepositoryResourcesManager.copyRemoteResources\"),100);\n  ISVNClientAdapter svnClient=null;\n  try {\n    svnClient=resource.getRepository().getSVNClient();\n    svnClient.copy(resource.getUrl(),destinationFolder.getUrl(),message,SVNRevision.HEAD);\n    destinationFolder.refresh();\n    remoteResourceCopied(resource,destinationFolder);\n  }\n catch (  SVNClientException e) {\n    throw SVNException.wrapException(e);\n  }\n finally {\n    resource.getRepository().returnSVNClient(svnClient);\n    progress.done();\n  }\n}\n"}
{"nl": "creates a label", "code": "private Label createLabel(Composite parent,String text,int span,int horizontalIndent){\n  Label label=new Label(parent,SWT.LEFT);\n  label.setText(text);\n  GridData data=new GridData();\n  data.horizontalSpan=span;\n  data.horizontalAlignment=GridData.FILL;\n  data.horizontalIndent=horizontalIndent;\n  label.setLayoutData(data);\n  return label;\n}\n"}
{"nl": "Sets the Visibility of all children to VISIBLE", "code": "public void showContent(){\n  for (int i=0; i < getChildCount(); i++) {\n    getChildAt(i).setVisibility(VISIBLE);\n  }\n}\n"}
{"nl": "add a split", "code": "public int addSplit(Split split){\n  nsplits++;\n  index2split.put(nsplits,split);\n  split2index.put(split,nsplits);\n  return nsplits;\n}\n"}
{"nl": "Set voip", "code": "public AccountSetOnlineQuery voip(Boolean value){\n  return unsafeParam(\"voip\",value);\n}\n"}
{"nl": "Prints the list of sources registered with FlowDroud to stdout", "code": "public void printSources(){\n  if (this.sourceSinkProvider == null) {\n    System.err.println(\"Sources not calculated yet\");\n    return;\n  }\n  System.out.println(\"Sources:\");\n  for (  SourceSinkDefinition am : getSources()) {\n    System.out.println(am.toString());\n  }\n  System.out.println(\"End of Sources\");\n}\n"}
{"nl": "* Southern Shield Generator Periodic Spawn  *", "code": "private void startWaveSouthernShieldGenerator1(){\n  sp(233724,337.93338f,257.88702f,292.43845f,(byte)60,1000,\"SouthernShieldGenerator1\");\n  sp(233725,338.05304f,254.6424f,292.3325f,(byte)60,1000,\"SouthernShieldGenerator2\");\n  sp(233883,338.13315f,251.34738f,292.48932f,(byte)59,1000,\"SouthernShieldGenerator3\");\n}\n"}
{"nl": "interactively test deflation and inflation", "code": "public static void main(String[] args) throws IOException, DataFormatException {\n  Compressor compression=new Compressor();\n  BufferedReader r=new BufferedReader(new InputStreamReader(System.in));\n  System.out.print(\"> \");\n  System.out.flush();\n  String inputString=\"\";\n  String aLine;\n  while ((aLine=r.readLine()) != null) {\n    if (aLine.length() > 0) {\n      if (aLine.equals(\".\")) {\n        byte[] bytes=new byte[inputString.length() + 1000];\n        int numberOfBytes=compression.deflateString2ByteArray(inputString,bytes);\n        String outputString;\n        if (numberOfBytes < 0)         outputString=compression.inflateByteArray2String(-numberOfBytes,bytes);\n else         outputString=Compressor.convertUncompressedByteArray2String(numberOfBytes,bytes);\n        System.err.println(\"=<\" + outputString + \">\");\n        System.err.println(\"= \" + outputString);\n        System.err.println(\"uncompressed: \" + inputString.length());\n        System.err.println(\"compressed:   \" + numberOfBytes);\n        System.err.println(\"decompressed: \" + outputString.length());\n{\n          byte[] target=new byte[10 * bytes.length];\n          compression.inflateByteArray(-numberOfBytes,bytes,target);\n          System.err.println(\"decompressed bytes: \" + Basic.toString(target));\n        }\n        inputString=\"\";\n        System.out.print(\"> \");\n      }\n else {\n        inputString+=aLine + \"\\n\";\n        System.out.print(\"? \");\n      }\n      System.out.flush();\n    }\n  }\n}\n"}
{"nl": "Types of communities to return", "code": "public GroupsGetQuery filter(GroupsGetFilter... value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "Filter from the input map the unmapped field of this entity", "code": "protected Map<String,Object> filterItemValue(String entityName,Map<String,Object> itemValues){\n  ClassMetadata classMetadata=sessionFactory.getClassMetadata(entityName);\n  String[] propertyNames=classMetadata.getPropertyNames();\n  List<String> names=Arrays.asList(propertyNames);\n  Iterator<String> iterator=itemValues.keySet().iterator();\n  while (iterator.hasNext()) {\n    if (!names.contains(iterator.next()))     iterator.remove();\n  }\n  return itemValues;\n}\n"}
{"nl": "Broadcasts current effects to all visible objects", "code": "public void broadCastEffectsImp(){\n  List<Effect> effects=getAbnormalEffects();\n  PacketSendUtility.broadcastPacket(getOwner(),new SM_ABNORMAL_EFFECT(getOwner(),abnormals,effects));\n}\n"}
{"nl": "entry function for encoding", "code": "public void encoding(){\n  if (stripe_unit_size % block_nbr != 0) {\n    throw new RuntimeException(\" Cannot  striping. wrong DATA_LENGTH!\");\n  }\n  STAR_encoding_row();\n  STAR_encoding_diag1();\n  STAR_encoding_diag2();\n}\n"}
{"nl": "convert from wrapper to external data type", "code": "private org.apache.carbondata.format.DataType fromWrapperToExternalDataType(DataType dataType){\n  if (null == dataType) {\n    return null;\n  }\nswitch (dataType) {\ncase STRING:\n    return org.apache.carbondata.format.DataType.STRING;\ncase INT:\n  return org.apache.carbondata.format.DataType.INT;\ncase SHORT:\nreturn org.apache.carbondata.format.DataType.SHORT;\ncase LONG:\nreturn org.apache.carbondata.format.DataType.LONG;\ncase DOUBLE:\nreturn org.apache.carbondata.format.DataType.DOUBLE;\ncase DECIMAL:\nreturn org.apache.carbondata.format.DataType.DECIMAL;\ncase TIMESTAMP:\nreturn org.apache.carbondata.format.DataType.TIMESTAMP;\ncase ARRAY:\nreturn org.apache.carbondata.format.DataType.ARRAY;\ncase STRUCT:\nreturn org.apache.carbondata.format.DataType.STRUCT;\ndefault :\nreturn org.apache.carbondata.format.DataType.STRING;\n}\n}\n"}
{"nl": "Draw a snap vertical margin indicator", "code": "public static void drawSnapVerticalMargin(ViewTransform transform,Graphics2D g,int x1,int y1,int y2,String text){\n  Canvas c=new Canvas();\n  FontMetrics fm=c.getFontMetrics(sFont);\n  g.setFont(sFont);\n  int padding=transform.getSwingDimension(4);\n  Rectangle2D bounds=fm.getStringBounds(text,g);\n  int th=(int)bounds.getHeight();\n  int offset=6 * CONNECTION_ARROW_SIZE;\n  if (y1 > y2) {\n    int temp=y1;\n    y1=y2;\n    y2=temp;\n  }\n  int h=((y2 - y1) - (th + 2 * padding)) / 2;\n  if (h <= padding) {\n    g.drawLine(x1,y1,x1,y2);\n    g.drawString(text,(int)(x1 - bounds.getWidth() / 2) + offset,y2 - h - padding);\n  }\n else {\n    g.drawLine(x1,y1,x1,y1 + h);\n    g.drawLine(x1,y2 - h,x1,y2);\n    g.drawString(text,(int)(x1 - bounds.getWidth() / 2),y2 - h - padding);\n  }\n  g.drawLine(x1 - CONNECTION_ARROW_SIZE,y1,x1 + CONNECTION_ARROW_SIZE,y1);\n  g.drawLine(x1 - CONNECTION_ARROW_SIZE,y2,x1 + CONNECTION_ARROW_SIZE,y2);\n}\n"}
{"nl": "Convert key value to entry", "code": "public IEntryPacket toEntry(Object key,Object value) throws RemoteException, UnusableEntryException, UnknownTypeException {\n  if (key == null || value == null)   return null;\n  return _converter.toInternal(MapEntryFactory.create(key,value));\n}\n"}
{"nl": "download file from storage server", "code": "public int download_file(String group_name,String remote_filename,DownloadCallback callback) throws IOException, MyException {\n  final long file_offset=0;\n  final long download_bytes=0;\n  return this.download_file(group_name,remote_filename,file_offset,download_bytes,callback);\n}\n"}
{"nl": "Required for Externalizable", "code": "public ConstrainableTxnMgrProxy(){\n}\n"}
{"nl": "clear the values held by this ByteArray", "code": "public void clear(){\n  buf=null;\n  offset=0;\n  length=0;\n}\n"}
{"nl": "parse shell commends", "code": "String[] parserOfCommandSyntax(String commandSyntax){\n  String sCommandWords[]=new String[Settings.nMaximumCommandWordSize];\n  int nSyntexOnePosition;\n  int nRepeatCounter=0;\n  for (; ; ) {\n    nSyntexOnePosition=commandSyntax.toLowerCase().indexOf(\" \");\n    if (nRepeatCounter >= Settings.nMaximumCommandWordSize)     return null;\n    if (Settings.ERRORCODE == nSyntexOnePosition) {\n      sCommandWords[nRepeatCounter]=commandSyntax;\n      break;\n    }\n else     if (0 == nSyntexOnePosition) {\n      return null;\n    }\n else {\n      sCommandWords[nRepeatCounter]=commandSyntax.substring(0,nSyntexOnePosition);\n      commandSyntax=commandSyntax.substring(nSyntexOnePosition + 1,commandSyntax.length());\n    }\n    nRepeatCounter++;\n  }\n  for (int i=nRepeatCounter + 1; i < Settings.nMaximumCommandWordSize; i++) {\n    sCommandWords[i]=\" \";\n  }\n  for (int i=0; i < Settings.nMaximumCommandWordSize; i++) {\n    if (sCommandWords[i] != \" \")     System.out.println(\"execution command Queue[\" + i + \"] :\"+ sCommandWords[i]);\n  }\n  return sCommandWords;\n}\n"}
{"nl": "get an iterator over all members", "code": "public Iterator<Pair<Rectangle2D,T>> iterator(){\n  return data.iterator();\n}\n"}
{"nl": "Evaluate string presentation to object", "code": "private Object evaluate(String val){\n  if (val == null || val.isEmpty())   return null;\n  if (\"?\".equals(val))   return PARAMETER_PLACEHOLDER;\n  boolean isValue=stringPattern.matcher(val).matches();\n  if (isValue) {\n    return val.substring(1,val.length() - 1);\n  }\n  isValue=booleanPattern.matcher(val).matches();\n  if (isValue) {\n    return Boolean.valueOf(val);\n  }\n  isValue=numberPattern.matcher(val).matches();\n  if (isValue) {\n    int floatIndex=val.indexOf('.');\n    if (floatIndex > -1) {\n      return Double.valueOf(val);\n    }\n    return Long.valueOf(val);\n  }\n  throw new IllegalArgumentException(val);\n}\n"}
{"nl": "send file content callback function, be called only once when the file uploaded", "code": "public int send(OutputStream out) throws IOException {\n  out.write(this.fileBuff,this.offset,this.length);\n  return 0;\n}\n"}
{"nl": "Creates a new event scope execution and moves existing event subscriptions to this new execution", "code": "public static void createCopyOfSubProcessExecutionForCompensation(ExecutionEntity subProcessExecution){\n  EventSubscriptionEntityManager eventSubscriptionEntityManager=Context.getCommandContext().getEventSubscriptionEntityManager();\n  List<EventSubscriptionEntity> eventSubscriptions=eventSubscriptionEntityManager.findEventSubscriptionsByExecutionAndType(subProcessExecution.getId(),\"compensate\");\n  List<CompensateEventSubscriptionEntity> compensateEventSubscriptions=new ArrayList<CompensateEventSubscriptionEntity>();\n  for (  EventSubscriptionEntity event : eventSubscriptions) {\n    if (event instanceof CompensateEventSubscriptionEntity) {\n      compensateEventSubscriptions.add((CompensateEventSubscriptionEntity)event);\n    }\n  }\n  if (CollectionUtil.isNotEmpty(compensateEventSubscriptions)) {\n    ExecutionEntity processInstanceExecutionEntity=subProcessExecution.getProcessInstance();\n    ExecutionEntity eventScopeExecution=Context.getCommandContext().getExecutionEntityManager().createChildExecution(processInstanceExecutionEntity);\n    eventScopeExecution.setActive(false);\n    eventScopeExecution.setEventScope(true);\n    eventScopeExecution.setCurrentFlowElement(subProcessExecution.getCurrentFlowElement());\n    Map<String,Object> variables=subProcessExecution.getVariablesLocal();\n    for (    Entry<String,Object> variable : variables.entrySet()) {\n      eventScopeExecution.setVariableLocal(variable.getKey(),variable.getValue());\n    }\n    for (    CompensateEventSubscriptionEntity eventSubscriptionEntity : compensateEventSubscriptions) {\n      eventSubscriptionEntityManager.delete(eventSubscriptionEntity);\n      CompensateEventSubscriptionEntity newSubscription=eventSubscriptionEntityManager.insertCompensationEvent(eventScopeExecution,eventSubscriptionEntity.getActivityId());\n      newSubscription.setConfiguration(eventSubscriptionEntity.getConfiguration());\n      newSubscription.setCreated(eventSubscriptionEntity.getCreated());\n    }\n    CompensateEventSubscriptionEntity eventSubscription=eventSubscriptionEntityManager.insertCompensationEvent(processInstanceExecutionEntity,eventScopeExecution.getCurrentFlowElement().getId());\n    eventSubscription.setConfiguration(eventScopeExecution.getId());\n  }\n}\n"}
{"nl": "Writes a short to the buffer", "code": "public static void writeShort(PacketBuffer buf,short value){\n  buf.writeShort(value);\n}\n"}
{"nl": "Determine whether the client is connected", "code": "public boolean isConnected(){\n  return client != null && client.isConnected();\n}\n"}
{"nl": "delete all the token by the uid and sid", "code": "public static void delete(long uid,String sid){\n  delete(W.create(\"uid\",uid).and(\"sid\",sid));\n}\n"}
{"nl": "Creates a new executor object for spawning worker threads", "code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(maxThreadNum == -1 ? numThreads : Math.min(maxThreadNum,numThreads),Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n"}
{"nl": "create summon", "code": "public static final void createSummon(Player master,int npcId,int skillId,int skillLevel,int time){\n  if (master.getSummon() != null) {\n    PacketSendUtility.sendPacket(master,new SM_SYSTEM_MESSAGE(1300072));\n    return;\n  }\n  Summon summon=VisibleObjectSpawner.spawnSummon(master,npcId,skillId,skillLevel,time);\n  if (summon.getAi2().getName().equals(\"siege_weapon\")) {\n    summon.getAi2().onGeneralEvent(AIEventType.SPAWNED);\n  }\n  master.setSummon(summon);\n  PacketSendUtility.sendPacket(master,new SM_SUMMON_PANEL(summon));\n  PacketSendUtility.broadcastPacket(summon,new SM_EMOTION(summon,EmotionType.START_EMOTE2));\n  PacketSendUtility.broadcastPacket(summon,new SM_SUMMON_UPDATE(summon));\n}\n"}
{"nl": "Create a JsonMigrator to migrate into the given graph", "code": "public JsonMigrator(Loader loader){\n  this.loader=loader;\n}\n"}
{"nl": "Search order info by primary key", "code": "@RequestMapping(value=\"/order/info\",method=RequestMethod.GET) public RespJson selectOrderInfo(@RequestParam(value=\"id\",required=false) long id){\n  try {\n    Order order=orderDao.searchById(id);\n    order.setOrderTypeName(OrderType.getByCode(order.getOrderType()).getDesc());\n    order.setCustomerGenderName(Gender.getByCode(order.getCustomerGender()).getDesc());\n    return RespJson.buildSuccessResponse(order);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    return RespJson.buildFailureResponse(StringUtils.getValidString(e.getMessage()));\n  }\n}\n"}
{"nl": "remove an element described by ObjectInfo", "code": "public void remove(IObjectInfo<T> oi){\n  lock.lock();\n  try {\n    if (_objectsMap != null && oi.getSubject() != null) {\n      _objectsMap.remove(oi.getSubject());\n    }\n    remove_impl((ObjectInfo<T>)oi);\n    if (m_Size == 0 && _objectsMap != null)     _objectsMap=null;\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "Release mouse mask", "code": "public void release(int mask){\n  controller.mouseRelease(mask);\n}\n"}
{"nl": "Writes out the flow policy component of the RIFL document", "code": "private void writeFlowPolicy(Document document,Element rootElement){\n  Element flowPolicy=document.createElement(\"flowpolicy\");\n  rootElement.appendChild(flowPolicy);\n  for (  FlowPair pair : this.document.getFlowPolicy())   writeFlowPair(pair,document,flowPolicy);\n}\n"}
{"nl": "stop listen notify1", "code": "private void stop_notify_1(){\n  bleManager.stopListenCharacterCallback(UUID_NOTIFY_1);\n}\n"}
{"nl": "paint the ellipse", "code": "public void paint(Graphics g){\n  final Graphics2D g2d=(Graphics2D)g;\n  final AffineTransform old=g2d.getTransform();\n  if (color != null)   g2d.setColor(color);\n  g2d.rotate(angleInRadians,centerX,centerY);\n  g2d.drawOval((int)Math.round(centerX - lengthA),(int)Math.round(centerY - lengthB),(int)Math.round(2 * lengthA),(int)Math.round(2 * lengthB));\n  g2d.setTransform(old);\n}\n"}
{"nl": "Calls the OnChartGestureListener to do the start callback", "code": "public void startAction(MotionEvent me){\n  OnChartGestureListener l=mChart.getOnChartGestureListener();\n  if (l != null) {\n    l.onChartGestureStart(me,mLastGesture);\n  }\n}\n"}
{"nl": "String representation of virtual cursor - LedgerId:EntryId", "code": "@Override public String toString(){\n  return String.format(\"%d:%d\",ledgerId,entryId);\n}\n"}
{"nl": "setup the list", "code": "private void loadList(Collection<String> files){\n  int[] selectionIds=new int[files.size()];\n  int f=0;\n  for (  String file : files) {\n    selectionIds[f++]=listModel.size();\n    listModel.addElement(new MyListItem(file));\n  }\n  if (f > 0)   jList.setSelectedIndices(selectionIds);\n}\n"}
{"nl": "Will resolve constants references", "code": "private static void resolveConstantReference(ConstantReference objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){\n  if (ExpressionSemanticUtil.isBoolean(objSubjectExpression)) {\n    objTypesSet.add(Types.strBoolean);\n    return;\n  }\n  if (PhpLangUtil.isNull(objSubjectExpression)) {\n    objTypesSet.add(Types.strNull);\n    return;\n  }\n  final String types;\n  final Collection<? extends PhpNamedElement> declaration=objSubjectExpression.resolveGlobal(false);\n  if (declaration.size() > 0) {\n    types=declaration.iterator().next().getType().toString();\n  }\n else {\n    types=objSubjectExpression.getType().toString();\n  }\n  storeAsTypeWithSignaturesImport(types,objScope,objIndex,objTypesSet);\n}\n"}
{"nl": "Set longer", "code": "public VideoSearchQueryWithExtended longer(Integer value){\n  return unsafeParam(\"longer\",value);\n}\n"}
{"nl": "Update supplements in queue and clear the queue", "code": "public void updateSupplements(){\n  if (subtractedSupplementId == 0 || subtractedSupplementsCount == 0) {\n    return;\n  }\n  this.getInventory().decreaseByItemId(subtractedSupplementId,subtractedSupplementsCount);\n  subtractedSupplementsCount=0;\n  subtractedSupplementId=0;\n}\n"}
{"nl": "Set group ids", "code": "public NewsfeedAddBanQuery groupIds(Integer... value){\n  return unsafeParam(\"group_ids\",value);\n}\n"}
{"nl": "Number of items to return", "code": "public MarketGetQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "is there a next line?", "code": "protected boolean hasNextLine(){\n  return pushedBackLine != null || iterator.hasNext();\n}\n"}
{"nl": "Hide all other states and show content", "code": "public void showContent(){\n  switchState(CONTENT,null,null,null,null,Collections.<Integer>emptyList());\n}\n"}
{"nl": "Adds a Subfilter to the Main Filter", "code": "public void addSubFilter(SubFilter subFilter){\n  subFilters.add(subFilter);\n}\n"}
{"nl": "read all locations for a given class and adds the to list", "code": "public int readLocations(ClassificationsFooterRMA3 classificationsFooter,IInputReader reader,int classId,ListOfLongs list) throws IOException {\n  long start=classificationsFooter.getStart(classificationType);\n  if (start != 0) {\n    reader.seek(start);\n    final int numberOfClasses=reader.readInt();\n    for (int i=0; i < numberOfClasses; i++) {\n      int currentId=reader.readInt();\n      int sum=reader.readInt();\n      if (currentId == classId) {\n        for (int z=0; z < sum; z++) {\n          list.add(reader.readLong());\n        }\n      }\n else       reader.skipBytes(8 * sum);\n    }\n  }\n  return list.size();\n}\n"}
{"nl": "Construct an empty list of DOMImplementations", "code": "public DOMImplementationListImpl(){\n  fImplementations=new ArrayList();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n}\n"}
{"nl": "Create new named ThreadPool with a specified amount of minimum and maximum elements in the pool", "code": "public ThreadPool(String identifier,int min,int max){\n  setIdentifier(identifier);\n  setMin(min);\n  setMax(max);\n  group=new ThreadGroup(identifier);\n  group.setDaemon(true);\n  try {\n    createResources();\n  }\n catch (  ResourceUnavailableException e) {\n    logger.log(Level.SEVERE,\"Creating ThreadPool with min=\" + min + \", max=\"+ max,e);\n  }\n}\n"}
{"nl": "A function returns the value of [first] [operation] [second]", "code": "private Double completeOperation(Double first,Double second,Character operation){\n  Double result=0.0;\nswitch (operation) {\ncase '+':\n    result=first + second;\n  break;\ncase '-':\nif (first == null) {\n  result=-second;\n}\n else {\n  result=first - second;\n}\nbreak;\ncase '*':\nresult=first * second;\nbreak;\ncase '/':\nresult=first / second;\nbreak;\ndefault :\nbreak;\n}\nreturn result;\n}\n"}
{"nl": "Opens the inventory display", "code": "public void open(){\n  ScreenManager.setScreen(this.inventoryScreen);\n  this.open=true;\n}\n"}
{"nl": "Builds the TileLayerWMSOptions new instance", "code": "public TileLayerWMSOptions build(){\n  TileLayerWMSOptions options=new TileLayerWMSOptions();\n  options.layers=this.layers;\n  options.styles=this.styles;\n  options.format=this.format;\n  options.transparent=this.transparent;\n  options.version=this.version;\n  options.crs=this.crs;\n  return options;\n}\n"}
{"nl": "Broadcasts packet to all legion members of a legion", "code": "public static void broadcastPacketToLegion(Legion legion,AionServerPacket packet){\n  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {\n    sendPacket(onlineLegionMember,packet);\n  }\n}\n"}
{"nl": "Computes the call-to-return flow function for the given call-site abstraction", "code": "protected Set<D> computeCallToReturnFlowFunction(FlowFunction<D> callToReturnFlowFunction,D d1,D d2){\n  return callToReturnFlowFunction.computeTargets(d2);\n}\n"}
{"nl": "returns the LCA of a set of taxon ids", "code": "public int computeNaiveLCA(final int[] taxonIds,final int length){\n  if (length == 0)   return IdMapper.NOHITS_ID;\n else   if (length == 1)   return taxonIds[0];\n  if (taxonIds.length > addresses.length) {\n    addresses=new String[taxonIds.length];\n    weights=new int[taxonIds.length];\n  }\n  int numberOfAddresses=0;\n  for (int i=0; i < length; i++) {\n    int taxonId=taxonIds[i];\n    if (!TaxonomyData.isTaxonDisabled(taxonId)) {\n      String address=TaxonomyData.getAddress(taxonId);\n      if (address != null) {\n        addresses[numberOfAddresses++]=address;\n      }\n    }\n  }\n  if (numberOfAddresses > 0) {\n    final String address=LCAAddressing.getCommonPrefix(addresses,numberOfAddresses,true);\n    return TaxonomyData.getAddress2Id(address);\n  }\n  return IdMapper.UNASSIGNED_ID;\n}\n"}
{"nl": "A method to be called when an attribute value has been modified", "code": "void modifiedAttrValue(AttrImpl attr,String oldvalue){\n}\n"}
{"nl": "This only checks against the completed pending compactions that are in memory currently, but not against the pending compactions that are in progress", "code": "boolean checkIfDeltaIsTooLarge(Delta delta){\n  return delta.size() + _archiveDeltaSizeInMemory.getCount() >= MAX_DELTA_ARCHIVE_SIZE;\n}\n"}
{"nl": "Increments the primitive value mapped to key by 1", "code": "public boolean increment(K key){\n  return adjustValue(key,(short)1);\n}\n"}
{"nl": "Constructs a sample info from the given input stream", "code": "public SampleInfo(DataInputStream is) throws IOException {\n  numberOfChannels=is.readInt();\n  sampleRate=is.readInt();\n  coeffMin=is.readFloat();\n  coeffRange=is.readFloat();\n  postEmphasis=is.readFloat();\n  residualFold=is.readInt();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetByIdQuery(VkApiClient client,UserActor actor,String... audios){\n  super(client,\"audio.getById\",Utils.buildParametrizedType(List.class,AudioFull.class));\n  accessToken(actor.getAccessToken());\n  audios(audios);\n}\n"}
{"nl": "reset the footer view height", "code": "private void updateFooterViewSize(int dy,XRecyclerView view){\n  if (dy > 0) {\n    if (view.mFooterView.getLayoutParams().height < view.mFooterViewHeight) {\n      view.mFooterView.getLayoutParams().height+=dy / 2;\n    }\n else {\n      view.mFooterView.getLayoutParams().height+=dy / 4;\n    }\n  }\n  view.mFooterView.setVisibility(VISIBLE);\n  view.mFooterView.requestLayout();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  return inspectorWindow != null && inspectorWindow.getDataTree() != null && inspectorWindow.getDataTree().getModel().getRoot() != null && inspectorWindow.getDataTree().getModel().getChildCount(inspectorWindow.getDataTree().getModel().getRoot()) > 0;\n}\n"}
{"nl": "Test typed Map", "code": "public void testTypesHashMapField() throws Exception {\n  AnObject empty=new AnObject();\n  AnObject full=helper.fill(new AnObject());\n  Object value=getPropertyValue(full,\"mapField\");\n  assertTrue(value instanceof HashMap);\n  assertTrue(helper.areEquals(full,full));\n  assertFalse(helper.areEquals(empty,full));\n}\n"}
{"nl": "is a global find possible?", "code": "public boolean isGlobalFindable(){\n  return classificationViewer.getTree().getNumberOfNodes() > 0;\n}\n"}
{"nl": "Test that \"add broadcast receiver\" quick intention shows up and works", "code": "public void testAddBroadcastReceiver() throws Exception {\n  final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyReceiver.java\",\"src/com/example/DummyReceiver.java\");\n  myFixture.configureFromExistingVirtualFile(file);\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,\"Add broadcast receiver to manifest\");\n  assertNotNull(action);\n  action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());\n  myFixture.checkResultByFile(\"AndroidManifest.xml\",\"intentions/DummyReceiver_manifest_after.xml\",true);\n}\n"}
{"nl": "register one identity constraint", "code": "public final void addIDConstraintDecl(XSElementDecl elmDecl,IdentityConstraint decl){\n  elmDecl.addIDConstraint(decl);\n  fGlobalIDConstraintDecls.put(decl.getIdentityConstraintName(),decl);\n}\n"}
{"nl": "Given a query and what page of results we are on return the matching results for that search", "code": "public SearchResult search(String queryString,int page){\n  SearchResult searchResult=new SearchResult();\n  statsService.incrementSearchCount();\n  try {\n    IndexReader reader=DirectoryReader.open(FSDirectory.open(Paths.get(this.INDEXPATH)));\n    IndexSearcher searcher=new IndexSearcher(reader);\n    Analyzer analyzer=new CodeAnalyzer();\n    QueryParser parser=new QueryParser(CODEFIELD,analyzer);\n    Query query=parser.parse(queryString);\n    LOGGER.info(\"Searching for: \" + query.toString(CODEFIELD));\n    searchResult=this.doPagingSearch(reader,searcher,query,page);\n    reader.close();\n  }\n catch (  Exception ex) {\n    LOGGER.warning(\" caught a \" + ex.getClass() + \"\\n with message: \"+ ex.getMessage());\n  }\n  return searchResult;\n}\n"}
{"nl": "Converts comma separated string to List", "code": "public static <T>List<T> stringToList(String val,Class<T> type){\n  String[] tokens=trim(val).split(\",\");\n  return Arrays.stream(tokens).map(null).collect(Collectors.toList());\n}\n"}
{"nl": "Market delivery regions", "code": "public GroupsEditQuery marketCountry(List<Integer> value){\n  return unsafeParam(\"market_country\",value);\n}\n"}
{"nl": "This method will get the store location for the given path, segment id and partition id", "code": "private String checkAndCreateCarbonStoreLocation(String factStoreLocation,String databaseName,String tableName,String partitionId,String segmentId){\n  String carbonStorePath=factStoreLocation;\n  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(databaseName + CarbonCommonConstants.UNDERSCORE + tableName);\n  CarbonTableIdentifier carbonTableIdentifier=carbonTable.getCarbonTableIdentifier();\n  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(carbonStorePath,carbonTableIdentifier);\n  String carbonDataDirectoryPath=carbonTablePath.getCarbonDataDirectoryPath(partitionId,segmentId);\n  CarbonUtil.checkAndCreateFolder(carbonDataDirectoryPath);\n  return carbonDataDirectoryPath;\n}\n"}
{"nl": "Scale all data  0 to 1", "code": "public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data){\n  return normalize(schema,data,0,1,Collections.<String>emptyList());\n}\n"}
{"nl": "recalculate and set duration based on current start and end times", "code": "public void updateDuration(){\n  if (!Double.isNaN(getXmin()) && !Double.isNaN(getXmax())) {\n    setDuration(getXmax() - getXmin());\n  }\n}\n"}
{"nl": "Used to write to SM_PET packet, so checks only needed ones", "code": "public boolean ContainsFunction(PetFunctionType type){\n  if (type.getId() < 0) {\n    return false;\n  }\n  for (  PetFunction t : getPetFunctions()) {\n    if (t.getPetFunctionType() == type) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Creates a new instance of NGramHistoDocument", "code": "public NGramHistoDocument(){\n  Graph=new DocumentNGramGraph();\n  Histogram=new DocumentNGramHistogram();\n}\n"}
{"nl": "Execute delete operation with given template", "code": "private ResponsePacket executeDelete(QueryTemplatePacket template,ISpaceProxy space,Transaction txn) throws RemoteException, TransactionException, UnusableEntryException, InterruptedException {\n  ResponsePacket packet=new ResponsePacket();\n  template.setOperationID(getOperationID());\n  template.setExplainPlan(getExplainPlan());\n  if (isReturnResult()) {\n    int max=getRownumLimit();\n    ArrayList<IEntryPacket> entries=template.take(space,getRouting(),getProjectionTemplate(),txn,getTimeout(),getReadModifier(),getIfExists(),max,getMinEntriesToWaitFor(),getQueryResultType());\n    packet.setResultSet(entries);\n    packet.setIntResult(entries.size());\n  }\n else {\n    template.setRouting(getRouting());\n    int cleared=_executor.clear(template,space,txn,getReadModifier());\n    packet.setIntResult(cleared);\n  }\n  return packet;\n}\n"}
{"nl": "exit System", "code": "@SuppressWarnings(\"deprecation\") public void exit(Context context,boolean isClearCache){\n  try {\n    finishAllActivity();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "copy selected reference to clip-board", "code": "public boolean copyReference(){\n  final SelectedBlock selectedBlock=getSelectedBlock();\n  if (selectedBlock.isSelected()) {\n    StringSelection ss=new StringSelection(getSelectedReference());\n    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,null);\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Does this class declare a field with the given subsignature?", "code": "public boolean declaresField(String subsignature){\n  checkLevel(SIGNATURES);\n  for (  SootField field : fields)   if (field.getSubSignature().equals(subsignature))   return true;\n  return false;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UtilsGetServerTimeQuery(VkApiClient client,UserActor actor){\n  super(client,\"utils.getServerTime\",Integer.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Check if both API key and Auth Token are valid", "code": "public static boolean hasValidCredentials(){\n  return apiKey != null && !apiKey.isEmpty() && authToken != null && !authToken.isEmpty() && hasValidAuthenticatedUser();\n}\n"}
{"nl": "Insufficient data", "code": "@Override @Test public void testInsufficientData(){\n  double[] one=new double[]{1};\n  double[] two=new double[]{2};\n  try {\n    new SpearmansCorrelation().correlation(one,two);\n    Assert.fail(\"Expecting MathIllegalArgumentException\");\n  }\n catch (  MathIllegalArgumentException ex) {\n  }\n  RealMatrix matrix=new BlockRealMatrix(new double[][]{{0},{1}});\n  try {\n    new SpearmansCorrelation(matrix);\n    Assert.fail(\"Expecting MathIllegalArgumentException\");\n  }\n catch (  MathIllegalArgumentException ex) {\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatUsersQueryWithChatIds(VkApiClient client,UserActor actor,Integer... chatIds){\n  super(client,\"messages.getChatUsers\",GetChatUsersChatIdsResponse.class);\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n}\n"}
{"nl": "Set start comment id", "code": "public VideoGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n"}
{"nl": "Initialize an AirMapTrafficProperties with default values", "code": "public AirMapTrafficProperties(){\n}\n"}
{"nl": "This method will disband a legion and update all members", "code": "public void disbandLegion(Legion legion){\n  for (  Integer memberObjId : legion.getLegionMembers()) {\n    this.allCachedLegionMembers.remove(getLegionMemberEx(memberObjId));\n  }\n  SiegeService.getInstance().cleanLegionId(legion.getLegionId());\n  updateAfterDisbandLegion(legion);\n  deleteLegionFromDB(legion);\n}\n"}
{"nl": "convert Drawable to byte array", "code": "public static byte[] toByteArray(Drawable drawable){\n  return toByteArray(toBitmap(drawable));\n}\n"}
{"nl": "are we currently updating the document?", "code": "public boolean isInUpdate(){\n  return docInUpdate;\n}\n"}
{"nl": "Assuming instant run is enabled, does code patching require an activity restart in the given project?", "code": "public static boolean isRestartActivity(){\n  InstantRunConfiguration configuration=InstantRunConfiguration.getInstance();\n  return configuration.RESTART_ACTIVITY;\n}\n"}
{"nl": "custom function to open all REALLY FUCKING SLOW", "code": "public void openAll(){\n  ArrayList<ItemIndex> lvl1Sections=getItemIndices(ItemType.LVL1_SECTION);\n  for (  ItemIndex itemIndex : lvl1Sections) {\n    openCloseLvl1Section(itemIndex,true);\n  }\n  ArrayList<ItemIndex> lvl2Sections=getItemIndices(ItemType.LVL2_SECTION);\n  for (  ItemIndex itemIndex : lvl2Sections) {\n    openCloseLvl2Section(itemIndex,true);\n  }\n  ArrayList<ItemIndex> lvl3Sections=getItemIndices(ItemType.LVL3_SECTION);\n  for (  ItemIndex itemIndex : lvl3Sections) {\n    openCloseLvl3Section(itemIndex,true);\n  }\n}\n"}
{"nl": "Means the player has it spawned, not the game server", "code": "public boolean isSpawnedByPlayer(){\n  return x != 0 || y != 0 || z != 0;\n}\n"}
{"nl": "Inner method which handles the process names request", "code": "Collection<? extends ClientRequestResult> handleProcessNamesRequest(final ClientRequest clientRequest){\n  Collection<ProcessNameResponse> names=new ArrayList<ProcessNameResponse>();\n  for (  Long processId : processCache.getKeys()) {\n    cern.c2mon.server.common.process.Process process=processCache.get(processId);\n    names.add(new ProcessNameResponseImpl(process.getName()));\n  }\n  return names;\n}\n"}
{"nl": "move to first fastA record", "code": "private void moveToFirst() throws IOException {\n  nextHeaderPosition=position;\n  nextHeader=r.readLine();\n  if (nextHeader != null) {\n    position+=nextHeader.length() + endOfLineBytes;\n    String aLine;\n    while ((aLine=r.readLine()) != null) {\n      if (aLine.startsWith(\">\")) {\n        nextNextHeaderPosition=position;\n        nextNextHeader=aLine;\n        position+=aLine.length() + endOfLineBytes;\n        break;\n      }\n else {\n        position+=aLine.length() + endOfLineBytes;\n        parts.add(aLine);\n      }\n    }\n    nextSequence=Basic.concatenateAndRemoveWhiteSpaces(parts);\n    parts.clear();\n  }\n else   close();\n}\n"}
{"nl": "Initialize main space components", "code": "public void initAndRecoverFromDataStorage(boolean isWarm) throws RemoteException, CreateException, SpaceComponentsInitializeException {\n  _engine.init(isWarm,true);\n  _statistics=(JSpaceStatistics)getFilterObject(Constants.Statistics.STATISTICS_FILTER_NAME);\n  _workerManager=createWorkerManager();\n  _componentManager=new SpaceComponentManager(this);\n}\n"}
{"nl": "parses the given command and executes it", "code": "public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"expand attribute=\");\n  final String attribute=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  final Director dir=(Director)getDir();\n  final Document doc=dir.getDocument();\n  final SamplesViewer samplesViewer=(SamplesViewer)getDir().getViewerByClass(SamplesViewer.class);\n  if (samplesViewer != null) {\n  }\n  final int count=doc.getSampleAttributeTable().expandAttribute(attribute,true);\n  if (count > 0 && samplesViewer != null)   samplesViewer.getSamplesTable().syncFromDocument();\n  if (count == 0)   NotificationsInSwing.showWarning(getViewer().getFrame(),\"Expand attribute failed\");\n else   NotificationsInSwing.showInformation(getViewer().getFrame(),\"Expand \" + attribute + \"' added \"+ count+ \" columns\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public StatsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"stats.get\",Utils.buildParametrizedType(List.class,Period.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Starts or temporary locks the mission Used only from the QuestHandler class", "code": "public static void startMission(QuestEnv env,QuestStatus status){\n  Player player=env.getPlayer();\n  int questId=env.getQuestId();\n  if (player.getQuestStateList().getQuestState(questId) != null) {\n    return;\n  }\n else {\n    player.getQuestStateList().addQuest(questId,new QuestState(questId,status,0,0,null,0,null));\n  }\n  PacketSendUtility.sendPacket(player,new SM_QUEST_ACTION(questId,status.value(),0));\n}\n"}
{"nl": "Restores a recently deleted comment", "code": "public MarketRestoreCommentQuery restoreComment(UserActor actor,int ownerId,int commentId){\n  return new MarketRestoreCommentQuery(getClient(),actor,ownerId,commentId);\n}\n"}
{"nl": "Exctracts information from XMLParserException)", "code": "public DOMErrorImpl(short severity,XMLParseException exception){\n  fSeverity=severity;\n  fException=exception;\n  fLocator=createDOMLocator(exception);\n}\n"}
{"nl": "Open the playstore page for the current app", "code": "public static void openPlayStoreAppPage(Context context){\n  final String appPackageName=context.getPackageName();\n  try {\n    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(\"market://details?id=\" + appPackageName)));\n  }\n catch (  android.content.ActivityNotFoundException anfe) {\n    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(\"https://play.google.com/store/apps/details?id=\" + appPackageName)));\n  }\n}\n"}
{"nl": "create a Html object by html string", "code": "public static Html create(String html){\n  return new Html(html);\n}\n"}
{"nl": "Community identifier", "code": "protected GroupsEditQuery groupId(int value){\n  return unsafeParam(\"group_id\",value);\n}\n"}
{"nl": "Draws shadows on top and bottom of control", "code": "private void drawShadows(Canvas canvas){\n  topShadow.setBounds(0,0,getWidth(),getHeight() / 2);\n  topShadow.draw(canvas);\n  bottomShadow.setBounds(0,getHeight() / 2,getWidth(),getHeight());\n  bottomShadow.draw(canvas);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ClassificationViewer viewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName(\"KEGG\");\n  return viewer != null && viewer.hasComparableData();\n}\n"}
{"nl": "Set privacy comment", "code": "public PhotosEditAlbumQuery privacyComment(String... value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n"}
{"nl": "recursively print a summary", "code": "private void listAssignedRec(ViewerBase viewer,Classification classification,NodeSet selectedNodes,Node v,int indent,Writer outs,final Single<Integer> countLines) throws IOException {\n  int id=(Integer)v.getInfo();\n  final String name=classification.getName2IdMap().get(id);\n  NodeData data=(viewer.getNodeData(v));\n  if ((selectedNodes == null || selectedNodes.contains(v))) {\n    if (data.getCountSummarized() > 0) {\n      for (int i=0; i < indent; i++)       outs.write(\" \");\n      outs.write(name + \": \" + Basic.toString(data.getSummarized(),\",\")+ \"\\n\");\n      countLines.set(countLines.get() + 1);\n    }\n  }\n  if (viewer.getCollapsedIds().contains(id)) {\n    return;\n  }\n  for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {\n    listAssignedRec(viewer,classification,selectedNodes,f.getOpposite(v),indent + 2,outs,countLines);\n  }\n}\n"}
{"nl": "MapBox method that is called when the map is ready", "code": "@Override public void onMapReady(MapboxMap mapboxMap){\n  map=mapboxMap;\n  map.setOnMapLongClickListener(this);\n}\n"}
{"nl": "Attach the fragment to hold the drawer and toolbar", "code": "public static <ParentActivity extends AppCompatActivity & OnNavigationItemSelectedListener>DrawerDelegate attach(@Nullable ParentActivity parent){\n  return attach(parent.getSupportFragmentManager());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesSearchDialogsQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.searchDialogs\",Utils.buildParametrizedType(List.class,SearchDialogsResponse.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "User creation confirmation email", "code": "public void sendConfirmationEmail(final String subject,final String[] recipients,final String url){\n  MimeMessagePreparator preparator=null;\n  this.send(preparator);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show gridLines=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Equipment id: 15 statusTagId: 200 commFaultTagId: 201", "code": "public static Configuration createEquipment(){\n  Configuration configuration=new Configuration();\n  Equipment equipment=Equipment.create(\"E_INI_TEST\",\"handlerClass\").id(15L).statusTag(StatusTag.create(\"E:STATUS\").id(200L).build()).commFaultTag(CommFaultTag.create(\"E:Comm\").id(201L).build()).build();\n  equipment.setProcessId(5L);\n  configuration.addEntity(equipment);\n  return configuration;\n}\n"}
{"nl": "performance improvement: since we start directly at the sources, we do not  need to generate additional taints unconditionally", "code": "@Override public boolean autoAddZero(){\n  return false;\n}\n"}
{"nl": "init the acceptableFilterList by desired capacity", "code": "public static void initAcceptableFilterList(EntryArrivedRemoteEvent theEvent,int capacity){\n  theEvent.initAcceptableFilterList(capacity);\n}\n"}
{"nl": "Creates a ClusterUnitVoice", "code": "public ClusterUnitVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,Lexicon lexicon,URL database,ClusterUnitNamer unitNamer,URL phonesetURL,URL partOfSpeechURL){\n  super(name,gender,age,description,locale,domain,organization);\n  setRate(150f);\n  setPitch(100F);\n  setPitchRange(12F);\n  if (lexicon != null) {\n    setLexicon(lexicon);\n  }\n else {\n    setLexicon(new CMULexicon(\"cmutimelex\"));\n  }\n  this.database=database;\n  this.unitNamer=unitNamer;\n  this.phonesetURL=phonesetURL;\n  this.partOfSpeechURL=partOfSpeechURL;\n}\n"}
{"nl": "Initialises the clustered values", "code": "@PostConstruct public void init(){\n  LOGGER.trace(\"Initialising AliveTimerChecker...\");\n  clusterCache.acquireWriteLockOnKey(LAST_ALIVE_TIMER_CHECK_INITIALISATION_KEY);\n  try {\n    if (!clusterCache.hasKey(LAST_ALIVE_TIMER_CHECK_INITIALISATION_KEY)) {\n      clusterCache.put(LAST_ALIVE_TIMER_CHECK_INITIALISATION_KEY,true);\n      clusterCache.put(LAST_ALIVE_TIMER_CHECK_LONG,Long.valueOf(0L));\n    }\n  }\n  finally {\n    clusterCache.releaseWriteLockOnKey(LAST_ALIVE_TIMER_CHECK_INITIALISATION_KEY);\n  }\n  LOGGER.trace(\"Initialisation complete.\");\n}\n"}
{"nl": "Item id", "code": "protected MarketCreateCommentQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardGetTopicsQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"board.getTopics\",GetTopicsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "this may be wrong since we are comparing available and not the usage", "code": "public int compareTo(ResourceUsage o){\n  double required=o.limit - o.usage;\n  double available=limit - usage;\n  return Double.compare(available,required);\n}\n"}
{"nl": "Capital only first letter", "code": "public static String capitalizeFirstLetter(String original){\n  if (original == null || original.length() == 0) {\n    return original;\n  }\n  return original.substring(0,1).toUpperCase() + original.substring(1).toLowerCase();\n}\n"}
{"nl": "Didn't get tokens, sleep for some time", "code": "private void sleep(){\n  state=STATE.SLEEPING;\n  this.nextActTime+=(SLEEP_TIME_MS + (int)(SLEEP_FUZZ * rnd.nextDouble())) * MockTimeSource.NANOSECONDS_IN_MILLISECOND;\n}\n"}
{"nl": "Init function", "code": "public void init(final Long aliveTagInterval,final String confName){\n  this.aliveTagInterval=aliveTagInterval;\n  this.confName=confName;\n}\n"}
{"nl": "Allows to start this activity", "code": "public static void startMe(Context _context){\n  Intent intent=new Intent(_context,BucketActivity.class);\n  intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n  _context.startActivity(intent);\n}\n"}
{"nl": "Method called to assign value serializer for property", "code": "public void assignSerializer(JsonSerializer<Object> ser){\n  if (_serializer != null && _serializer != ser) {\n    throw new IllegalStateException(\"Can not override serializer\");\n  }\n  _serializer=ser;\n}\n"}
{"nl": "Perform a check against a view that only allows actions such as a view found by RecyclerViewActions", "code": "public static ViewAction checkViewAction(ViewAssertion viewAssertion){\n  return ViewActions.actionWithAssertions(new CheckAssertionAction(viewAssertion));\n}\n"}
{"nl": "Clear all insertions with headers and footers", "code": "public void clearAllInsertions(){\n  List<MODEL> items=new ArrayList<>();\n  items.addAll(getOnlyItems());\n  mInserts.clear();\n  getItems().clear();\n  mOnlyInsertsCount=0;\n  mHeadersCount=0;\n  mFootersCount=0;\n  reAddAllItems(items);\n  notifyIfNeed();\n}\n"}
{"nl": "Checks for Auth Errors or AuthCredentials, if Valid, Saves AuthCredentials", "code": "public static boolean login(String url,Context context,LoginCallback callback){\n  AuthErrors authError=authErrorsFromUrl(url);\n  if (authError != null) {\nswitch (authError.type) {\ncase EmailVerification:\n      callback.onEmailVerificationNeeded(authError.resendLink);\n    return true;\ncase DomainBlackList:\n  callback.onErrorDomainBlackList();\nreturn true;\n}\nreturn false;\n}\nAuthCredential authCredentials=authCredentialsFromUrl(url);\nif (authCredentials != null) {\nAirMap.getInstance().setAuthToken(authCredentials.getAccessToken());\nif (authCredentials.getRefreshToken() != null && !authCredentials.getRefreshToken().isEmpty()) {\nSharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);\npreferences.edit().putString(Utils.REFRESH_TOKEN_KEY,authCredentials.getRefreshToken()).apply();\n}\ncallback.onSuccess(authCredentials);\nreturn true;\n}\ncallback.onContinue();\nreturn false;\n}\n"}
{"nl": "Construct Success Response", "code": "public static RespJson buildSuccessResponse(Object data){\n  RespJson respJson=new RespJson();\n  respJson.setCode(ResponseCode.SUCCESS.getCode());\n  respJson.setData(data);\n  respJson.setMsg(StringConstant.EMPTY_STRING);\n  return respJson;\n}\n"}
{"nl": "This method will send the set bind point packet", "code": "public static void sendSetBindPoint(Player player){\n  int worldId;\n  float x, y, z;\n  if (player.getBindPoint() != null) {\n    BindPointPosition bplist=player.getBindPoint();\n    worldId=bplist.getMapId();\n    x=bplist.getX();\n    y=bplist.getY();\n    z=bplist.getZ();\n  }\n else {\n    PlayerInitialData.LocationData locationData=DataManager.PLAYER_INITIAL_DATA.getSpawnLocation(player.getRace());\n    worldId=locationData.getMapId();\n    x=locationData.getX();\n    y=locationData.getY();\n    z=locationData.getZ();\n  }\n  PacketSendUtility.sendPacket(player,new SM_BIND_POINT_INFO(worldId,x,y,z,player));\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{1.49599158008e-06,0.000149550440335,0.000933076881878,0.00370933207799,0.0144742330437,1.49599158008e-06,0.000149550440335,0.000933076881878,0.00370933207799,0.0144742330437};\n}\n"}
{"nl": "Searches market items in a community's catalog", "code": "public MarketSearchQuery search(UserActor actor,int ownerId){\n  return new MarketSearchQuery(getClient(),actor,ownerId);\n}\n"}
{"nl": "Delete the config", "code": "public void delete(PushLog log){\n  configPushLogDao.unBindApp(log);\n  configPushLogDao.delete(log.getId());\n}\n"}
{"nl": "Updates the given key by calling the itemhandler's get method", "code": "public void updateWithItemHandler(K key){\n  remove(key);\n  put(key,itemHandler.get(key));\n}\n"}
{"nl": "Calculation of differences in one group or in overall array of items", "code": "private Map<String,List<ChartObject>> calculateDiffs(List<ChartObject> initial,Sort sorting){\n  if (initial.isEmpty())   return new HashMap<>();\n  if (sorting.toString().contains(Sort.Direction.DESC.name())) {\n    Integer previous=Integer.valueOf(initial.get(initial.size() - 1).getValues().get(getTotalFieldName()));\n    for (int i=initial.size() - 1; i >= 0; i--) {\n      Integer current=Integer.valueOf(initial.get(i).getValues().get(getTotalFieldName()));\n      initial.get(i).getValues().put(DELTA,String.valueOf(current - previous));\n      previous=current;\n    }\n  }\n else {\n    Integer previous=Integer.valueOf(initial.get(0).getValues().get(getTotalFieldName()));\n    for (    ChartObject anInitial : initial) {\n      Integer current=Integer.valueOf(anInitial.getValues().get(getTotalFieldName()));\n      anInitial.getValues().put(DELTA,String.valueOf(current - previous));\n      previous=current;\n    }\n  }\n  Map<String,List<ChartObject>> result=new HashMap<>();\n  result.put(RESULT,initial);\n  return result;\n}\n"}
{"nl": "Network Status: %0 ms", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_PING_RESULT(String value0){\n  return new SM_SYSTEM_MESSAGE(1400118,value0);\n}\n"}
{"nl": "Loads a text file with filename sFilename and adds all its words to the definitions", "code": "public void loadFromFile(String sFileName) throws FileNotFoundException, IOException {\n  FileReader frFile=new FileReader(sFileName);\n  String sText=\"\";\n  int c=frFile.read();\n  while (c != -1) {\n    sText+=c;\n    c=frFile.read();\n  }\n  addText(sText);\n  frFile.close();\n}\n"}
{"nl": "This method will update the gathering status", "code": "public static void updateGatherableStatus(Player player){\n  if (player.isNotGatherable()) {\n    long gatherableTimer=player.getGatherableTimer();\n    if (gatherableTimer > 0) {\n      scheduleGatherableTask(player,gatherableTimer);\n      player.setStopGatherable(System.currentTimeMillis());\n    }\n  }\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static int compare(CharSequence string,int codePoint){\n  if ((codePoint < 0) || (codePoint > 1114111)) {\n    throw new IllegalArgumentException();\n  }\n  int stringLength=string.length();\n  if (stringLength == 0) {\n    return -1;\n  }\n  char firstChar=string.charAt(0);\n  int offset=codePoint - 65536;\n  if (offset < 0) {\n    int result=firstChar - codePoint;\n    if (result != 0) {\n      return result;\n    }\n    return stringLength - 1;\n  }\n  char lead=(char)((offset >>> 10) + 55296);\n  int result=firstChar - lead;\n  if (result != 0) {\n    return result;\n  }\n  if (stringLength > 1) {\n    char trail=(char)((offset & 0x3FF) + 56320);\n    result=string.charAt(1) - trail;\n    if (result != 0) {\n      return result;\n    }\n  }\n  return stringLength - 2;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  if (viewer != null) {\n    DefaultMutableTreeNode root=(DefaultMutableTreeNode)viewer.getTree().getModel().getRoot();\n    TreeNode[] treePath=root.getPath();\n    if (treePath != null) {\n      viewer.getTree().setSelectionPath(new TreePath(treePath));\n    }\n  }\n}\n"}
{"nl": "Below method will be used to add the statistics", "code": "public synchronized void recordStatisticsForDriver(QueryStatistic statistic,String queryId){\n}\n"}
{"nl": "Asserts that the resources generated by the test exactly match the resources located in the expected directory", "code": "public void checkExpectedGeneratedResources(){\n  try {\n    checkDirectoriesContainSameContent(getExpectedResourcesTestDir(),targetTestDir);\n  }\n catch (  DifferentDirectoryContentException e) {\n    String msg=\"Generated resources do not match the expected resources\";\n    logger.debug(msg,e);\n    Assert.fail(msg + \"\\n\" + e.getMessage());\n  }\n}\n"}
{"nl": "Edit a node in a KD-tree", "code": "public void edit(final double[] key,final Editor<T> editor) throws KeySizeException, KeyDuplicateException {\n  if (key.length != m_K) {\n    throw new KeySizeException();\n  }\nsynchronized (this) {\n    if (null == m_root) {\n      m_root=KDNode.create(new HPoint(key),editor);\n      m_count=m_root.deleted ? 0 : 1;\n      return;\n    }\n  }\n  m_count+=KDNode.edit(new HPoint(key),editor,m_root,0,m_K);\n}\n"}
{"nl": "Returns when request succeeds", "code": "public void onSuccess(int statusCode,Header[] headers,JSONObject response){\n}\n"}
{"nl": "Execute a one shot task or start executing a continuous task", "code": "@Override public void startExecuting(){\n  if (entity.getGrowingAge() < 1 && !entity.isInLove()) {\n    if (entity instanceof EntityWolf) {\n      if (((EntityWolf)entity).isSitting())       return;\n    }\n    this.entity.getNavigator().tryMoveToXYZ(targetItem.posX,targetItem.posY,targetItem.posZ,1.0F);\n  }\n}\n"}
{"nl": "normal status", "code": "public void normal(){\n}\n"}
{"nl": "Binding Adapter Wrapper for checking memory leak", "code": "@BindingAdapter({\"items\",\"view_provider\"}) public static void bindRecyclerViewAdapter(RecyclerView recyclerView,Observable<List<ViewModel>> items,ViewProvider viewProvider){\n  RecyclerView.Adapter previousAdapter=recyclerView.getAdapter();\n  BindingUtils.bindAdapterWithDefaultBinder(recyclerView,items,viewProvider);\n  if (previousAdapter != null)   ExampleApplication.getRefWatcher(recyclerView.getContext()).watch(previousAdapter);\n}\n"}
{"nl": "This is called to get the tags value", "code": "public void characters(char[] ch,int start,int length) throws SAXException {\n  if (elementOn && isItem || elementOn) {\n    elementValue.append(new String(ch,start,length));\n  }\n}\n"}
{"nl": "Returns true if mWidget has a baseline", "code": "private boolean hasBaseline(){\n  ConstraintAnchor anchor=mWidget.getAnchor(ConstraintAnchor.Type.BASELINE);\n  return anchor != null && anchor.isConnected();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoReorderVideosQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){\n  super(client,\"video.reorderVideos\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  videoId(videoId);\n}\n"}
{"nl": "Perform interaction calculation", "code": "@Override protected void analyzeInteraction(){\n  int critVal=(int)(Rnd.get(55000) / (skillLvlDiff + 1));\n  if (critVal < CraftConfig.CRAFT_CHANCE_BLUECRIT) {\n    critType=CraftCritType.BLUE;\n  }\n else   if ((critVal < CraftConfig.CRAFT_CHANCE_INSTANT) && (this.itemQuality.getQualityId() < ItemQuality.EPIC.getQualityId())) {\n    critType=CraftCritType.INSTANT;\n    currentSuccessValue=maxSuccessValue;\n    return;\n  }\n  if (CraftConfig.CRAFT_CHECKTASK) {\n    if (this.task == null) {\n      return;\n    }\n  }\n  double mod=Math.sqrt((double)skillLvlDiff / 450f) * 100f + Rnd.nextGaussian() * 10f;\n  mod-=(double)this.itemQuality.getQualityId() / 2;\n  if (mod < 0) {\n    currentFailureValue-=(int)mod;\n  }\n else {\n    currentSuccessValue+=(int)mod;\n  }\n  if (currentSuccessValue >= maxSuccessValue) {\n    currentSuccessValue=maxSuccessValue;\n  }\n else   if (currentFailureValue >= maxFailureValue) {\n    currentFailureValue=maxFailureValue;\n  }\n}\n"}
{"nl": "Adds a callback method found in an XML file to the result set", "code": "private void addCallbackMethod(String layoutFile,String callback){\n  addToMapSet(callbackMethods,layoutFile,callback);\n  if (includeDependencies.containsKey(layoutFile))   for (  String target : includeDependencies.get(layoutFile))   addCallbackMethod(target,callback);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesEditQuery(VkApiClient client,UserActor actor,int noteId,String title,String text){\n  super(client,\"notes.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  noteId(noteId);\n  title(title);\n  text(text);\n}\n"}
{"nl": "does this searcher support find all?", "code": "public boolean canFindAll(){\n  return true;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  if (getViewer() instanceof ClusterViewer) {\n    final ClusterViewer clusterViewer=(ClusterViewer)getViewer();\n    return clusterViewer.isPCoATab() && clusterViewer.getGraphView().getSelectedNodes().size() >= 1;\n  }\n else   if (getViewer() instanceof SamplesViewer) {\n    final SamplesViewer samplesViewer=(SamplesViewer)getViewer();\n    return samplesViewer.getSamplesTable().getNumberOfSelectedSamples() > 0;\n  }\n else   return ((Director)getDir()).getDocument().getSampleSelection().size() >= 1;\n}\n"}
{"nl": "Status of the component auto repainting", "code": "public boolean isAutoRepaint(){\n  return autoRepaint;\n}\n"}
{"nl": "Computes the normal flow function for the given set of start and end abstractions-", "code": "protected Set<D> computeNormalFlowFunction(FlowFunction<D> flowFunction,D d1,D d2){\n  return flowFunction.computeTargets(d2);\n}\n"}
{"nl": "Check for the \"environment\" key in the pluginAPI", "code": "private boolean isConfigurationPluginAvailable(){\n  if (configurationPluginAvailable == null) {\n    try {\n      String value=APILocator.getPluginAPI().loadProperty(pluginName,\"environment\");\n      configurationPluginAvailable=(value != null);\n    }\n catch (    Exception e) {\n      Logger.warn(this,\"Exception while trying to get property 'environment' \",e);\n      configurationPluginAvailable=false;\n    }\n    Logger.info(this,\"Configuration plugin available: \" + configurationPluginAvailable);\n  }\n  return configurationPluginAvailable;\n}\n"}
{"nl": "Formats the json content and print it", "code": "public static void json(String json){\n  Logger.json(json);\n}\n"}
{"nl": "1 / 1 + exp(-x)", "code": "public static double sigmoid(double x){\n  return 1.0 / (1.0 + Math.pow(Math.E,-x));\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n"}
{"nl": "Should only be called by ClassMapper", "code": "public ServiceType(Class clazz,ServiceType superclass,ServiceType[] interfaces) throws MarshalException {\n  if (!Proxy.isProxyClass(clazz)) {\n    name=clazz.getName();\n  }\n else   if (interfaces.length == 0) {\n    name=\";\";\n  }\n else {\n    StringBuffer buf=new StringBuffer();\n    for (int i=0; i < interfaces.length; i++) {\n      buf.append(';');\n      buf.append(interfaces[i].getName());\n    }\n    name=buf.toString();\n  }\n  this.superclass=superclass;\n  if (clazz != Object.class)   this.interfaces=interfaces;\n  try {\n    computeHash();\n  }\n catch (  Exception e) {\n    throw new MarshalException(\"unable to calculate the type hash for \" + name,e);\n  }\n}\n"}
{"nl": "Required for Externalizable", "code": "public SpaceConnectResult(){\n}\n"}
{"nl": "Converts a given Image into a BufferedImage", "code": "public static BufferedImage toBufferedImage(Image img,int type){\n  if (img instanceof BufferedImage) {\n    return (BufferedImage)img;\n  }\n  BufferedImage bimage=new BufferedImage(img.getWidth(null),img.getHeight(null),type);\n  Graphics2D bGr=bimage.createGraphics();\n  bGr.drawImage(img,0,0,null);\n  bGr.dispose();\n  return bimage;\n}\n"}
{"nl": "create file here</p> try to delete dictory or file if exists", "code": "private static void createFile(String filePath,String text) throws Exception {\n  File dir=new File(filePath.substring(0,filePath.lastIndexOf(File.separator)));\n  File file=new File(filePath);\n  if (dir.exists()) {\n    dir.delete();\n  }\n  if (!dir.exists()) {\n    dir.mkdirs();\n  }\n  if (file.exists()) {\n    file.delete();\n  }\n  if (!file.exists()) {\n    file.createNewFile();\n  }\n else {\n    throw new Exception(\"file:[\" + filePath + \"] already exists and cannot delete!\");\n  }\n  FileOutputStream fileOutputStream=new FileOutputStream(file);\n  FileChannel channel=fileOutputStream.getChannel();\n  CharBuffer charBuffer=CharBuffer.allocate(text.length());\n  charBuffer.put(text);\n  charBuffer.flip();\n  Charset charset=Charset.defaultCharset();\n  ByteBuffer byteBuffer=charset.encode(charBuffer);\n  while (byteBuffer.hasRemaining()) {\n    channel.write(byteBuffer);\n  }\n  channel.close();\n  fileOutputStream.close();\n  logger.info(\"success generator file:-- \" + filePath);\n}\n"}
{"nl": "Community description (ignored fof \"type\"=public)", "code": "public GroupsCreateQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n"}
{"nl": "Resets the audio clock", "code": "public void resetTime(){\n}\n"}
{"nl": "Constructs a configuration: (sentence, stack, buffer, arcs)", "code": "public Configuration(Sentence sentence,Stack<Integer> stack,Queue<Integer> queue,List<Dependency> arcs){\n  this.sentence=sentence;\n  this.stack=stack;\n  this.queue=queue;\n  this.arcs=arcs;\n}\n"}
{"nl": "return human readable string representation", "code": "public String toString(String hitDef,int hitLen){\n  StringBuilder buffer=new StringBuilder();\n  buffer.append(String.format(\">%s\\n\\tLength = %d\\n\",Basic.fold(hitDef,100),hitLen));\n  buffer.append(String.format(\" Score = %.1f bits (%.1f), Expect= %e\\n\",bitScore,score,eValue));\n  buffer.append(String.format(\" Identities = %d/%d (%d%%), Positives = %d/%d (%d%%), Gaps = %d/%d (%d%%)\\n\",identity,alignLength,Math.round(100 * identity / alignLength),positive,alignLength,100 * positive / alignLength,gaps,alignLength,100 * gaps / alignLength));\n  if (queryFrame != 0)   buffer.append(String.format(\" Frame = %+d\\n\",queryFrame));\n  if (qSeq != null && hSeq != null) {\n    long a=(queryFrame >= 0 ? queryFrom : queryTo);\n    long b=(queryFrame >= 0 ? queryTo : queryFrom);\n    buffer.append(String.format(\"\\nQuery:%9d  %s  %d\\n\",a,qSeq,b));\n    if (midLine != null)     buffer.append(String.format(\"                 %s\\n\",midLine));\n    buffer.append(String.format(\"Sbjct:%9d  %s  %d\\n\",hitFrom,hSeq,hitTo));\n  }\n else   buffer.append(\"[No alignment given]\\n\");\n  return buffer.toString();\n}\n"}
{"nl": "Gets if global or non server specific group memberships should be applied", "code": "public boolean isApplyGlobalGroups(){\n  return this.applyGlobalGroups;\n}\n"}
{"nl": "Returns an absolute URL to an image representing the map input", "code": "private String generateMapHtml(Map map,User user) throws IOException {\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  BufferedImage image=mapGenerationService.generateMapImageForUser(map,new Date(),null,578,440,user);\n  ImageIO.write(image,\"PNG\",baos);\n  return uploadImage(map.getUid(),baos.toByteArray());\n}\n"}
{"nl": "force killing forkable VM by direct remote call on remote JVM", "code": "@Override public void stop(boolean force){\n  try {\n    if (force) {\n      getProcessAdmin().killVM();\n    }\n  }\n catch (  RemoteException ex) {\n    ProcessLogger.log(\"Exception caught while killing VM\",ex);\n  }\n  super.stop(force);\n}\n"}
{"nl": "Sets the pattern factory to use", "code": "public PackageScanner usePatternFactory(PatternFactory factory){\n  this.patternFactory=factory;\n  return this;\n}\n"}
{"nl": "Returns whether an in-progress EntityAIBase should continue executing", "code": "@Override public boolean continueExecuting(){\n  if (targetItem.isDead || targetItem.getEntityItem().stackSize < 1)   return false;\n  if (entity.getGrowingAge() < 1 && !entity.isInLove()) {\n    if (entity instanceof EntityWolf) {\n      if (((EntityWolf)entity).isSitting())       return false;\n    }\n    if (timeoutCounter > 1200)     return false;\n    if (!this.entity.getNavigator().noPath()) {\n      double sqDistToPos=this.entity.getDistanceSq(targetItem.posX,targetItem.posY,targetItem.posZ);\n      if (sqDistToPos > 2.0D)       return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Group the results according to the group by clause", "code": "public IQueryResultSet<IEntryPacket> groupBy(IQueryResultSet<IEntryPacket> entries,List<SelectColumn> groupColumns) throws SQLException {\n  IQueryResultSet<IEntryPacket> currGroup=null;\n  IEntryPacket currRow=null, prevRow=null;\n  int rc;\n  Comparator comparator=getGroupByComparator(entries,groupColumns);\n  Collections.sort((List<IEntryPacket>)entries,comparator);\n  Iterator<IEntryPacket> iter=entries.iterator();\n  ArrayList<IQueryResultSet<IEntryPacket>> groupList=new ArrayList<IQueryResultSet<IEntryPacket>>();\n  for (int i=0; i < entries.size(); i++) {\n    prevRow=currRow;\n    currRow=iter.next();\n    rc=comparator.compare(prevRow,currRow);\n    if (rc != 0) {\n      currGroup=entries.newResultSet();\n      groupList.add(currGroup);\n      currGroup.add(currRow);\n    }\n else {\n      currGroup.add(currRow);\n    }\n  }\n  IQueryResultSet<IEntryPacket> groupByResult=query.isConvertResultToArray() ? new ProjectedResultSet() : new ArrayListResult();\n  for (Iterator<IQueryResultSet<IEntryPacket>> iterator=groupList.iterator(); iterator.hasNext(); ) {\n    IQueryResultSet<IEntryPacket> group=iterator.next();\n    if (query.isConvertResultToArray())     groupByResult.add(aggregate(group));\n else     groupByResult.add(group.iterator().next());\n  }\n  return groupByResult;\n}\n"}
{"nl": "Loads all the CART trees", "code": "public void loadTreeSet(HMMData htsData,FeatureDefinition featureDef,PhoneTranslator trickyPhones) throws IOException, MaryConfigurationException {\n  PhoneTranslator phTranslator=trickyPhones;\n  HTSCARTReader htsReader=new HTSCARTReader();\n  if (htsData.getTreeDurStream() != null) {\n    Log.d(Mary.LOG,\"Loading duration tree...\");\n    durTree=htsReader.load(1,htsData.getTreeDurStream(),htsData.getPdfDurStream(),PdfFileFormat.dur,featureDef,phTranslator);\n    numStates=htsReader.getVectorSize();\n  }\n  if (htsData.getTreeLf0Stream() != null) {\n    Log.d(Mary.LOG,\"Loading log F0 tree...\");\n    lf0Tree=htsReader.load(numStates,htsData.getTreeLf0Stream(),htsData.getPdfLf0Stream(),PdfFileFormat.lf0,featureDef,phTranslator);\n    lf0Stream=htsReader.getVectorSize();\n  }\n  if (htsData.getTreeMgcStream() != null) {\n    Log.d(Mary.LOG,\"Loading mgc tree...\");\n    mgcTree=htsReader.load(numStates,htsData.getTreeMgcStream(),htsData.getPdfMgcStream(),PdfFileFormat.mgc,featureDef,phTranslator);\n    mcepVsize=htsReader.getVectorSize();\n  }\n  if (htsData.getTreeStrStream() != null) {\n    Log.d(Mary.LOG,\"Loading str tree...\");\n    strTree=htsReader.load(numStates,htsData.getTreeStrStream(),htsData.getPdfStrStream(),PdfFileFormat.str,featureDef,phTranslator);\n    strVsize=htsReader.getVectorSize();\n  }\n  if (htsData.getTreeMagStream() != null) {\n    Log.d(Mary.LOG,\"Loading mag tree...\");\n    magTree=htsReader.load(numStates,htsData.getTreeMagStream(),htsData.getPdfMagStream(),PdfFileFormat.mag,featureDef,phTranslator);\n    magVsize=htsReader.getVectorSize();\n  }\n}\n"}
{"nl": "Save data on shutdown", "code": "public void onShutdown(){\n  log.info(\"Starting data save on shutdown.\");\n  legionWhUpdateTask.cancel(false);\n  new LegionWhUpdateTask().run();\n  log.info(\"Data successfully saved.\");\n}\n"}
{"nl": "Constructs new instance of <tt>CM_TITLE_BONUS </tt> packet", "code": "public CM_BONUS_TITLE(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "center the given widget vertically", "code": "public void centerVertically(ConstraintWidget widget){\n  ConstraintAnchor top=getClosestVerticalWidgetAnchor(widget,true);\n  ConstraintAnchor bottom=getClosestVerticalWidgetAnchor(widget,false);\n  widget.connect(widget.getAnchor(ConstraintAnchor.Type.TOP),top,0);\n  widget.connect(widget.getAnchor(ConstraintAnchor.Type.BOTTOM),bottom,0);\n}\n"}
{"nl": "Format the download speed", "code": "public static final String formatSpeed(float speed){\n  float realSpeed=speed * KB_CONSTANT;\n  if (realSpeed < KB_CONSTANT) {\n    float kSize=realSpeed / KB_CONSTANT;\n    kSize=((float)((int)(kSize * 10))) / 10;\n    return kSize + \" B/s\";\n  }\n else   if (realSpeed < MB_CONSTANT) {\n    float kSize=realSpeed / KB_CONSTANT;\n    kSize=((float)((int)(kSize * 10))) / 10;\n    return kSize + \" KB/s\";\n  }\n else   if (realSpeed < GB_CONSTANT) {\n    float kSize=realSpeed / MB_CONSTANT;\n    kSize=((float)((int)(kSize * 10))) / 10;\n    return kSize + \" MB/s\";\n  }\n else {\n    float kSize=realSpeed / GB_CONSTANT;\n    kSize=((float)((int)(kSize * 100))) / 100;\n    return kSize + \" GB/s\";\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set colorMismatchesVsConsensus=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Checks whether the given method is a source, a sink or is accepted by the taint wrapper", "code": "private boolean isSourceSinkOrTaintWrapped(Stmt callSite){\n  if (!callSite.containsInvokeExpr())   return false;\n  SootMethod method=callSite.getInvokeExpr().getMethod();\n  if (sourceSinkManager != null && sourceSinkManager.getSourceInfo((Stmt)callSite,icfg) != null) {\n    methodFieldReads.put(method,true);\n    return true;\n  }\n  if (sourceSinkManager != null && sourceSinkManager.isSink((Stmt)callSite,icfg,null)) {\n    methodSinks.put(method,true);\n    return true;\n  }\n  if (taintWrapper != null && taintWrapper.supportsCallee(method)) {\n    methodSideEffects.put(method,true);\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set sortreads=\");\n  String which=np.getWordMatchesIgnoringCase(\"alphabetically no\");\n  np.matchIgnoreCase(\";\");\n  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  inspectorWindow.setSortReadsAlphabetically(which.equalsIgnoreCase(\"alphabetically\"));\n}\n"}
{"nl": "Helper method to delete Product Category", "code": "public Boolean deleteProductCategory(EntityManager em,String productCategory){\n  Boolean status=true;\n  ProductCategory prodcat=null;\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    prodcat=em.find(ProductCategory.class,productCategory);\n    em.remove(prodcat);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during delete of Product category. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "Set screen name", "code": "public AccountSaveProfileInfoQuery screenName(String value){\n  return unsafeParam(\"screen_name\",value);\n}\n"}
{"nl": "Build system menus", "code": "private List<SysMenu> buildSystemMenus(String userId){\n  List<SysMenu> menuList=new ArrayList<SysMenu>();\n  List<Module> modules=moduleDao.getModulesByUserId(userId);\n  if (modules != null && !modules.isEmpty()) {\n    for (    Module module : modules) {\n      if (module.getParent() == null)       menuList.add(buildMenuFromModule(module));\n    }\n    for (    SysMenu firstMenu : menuList) {\n      buildSubMenu(firstMenu,modules);\n      if (firstMenu.getSubMenus() != null) {\n        for (        SysMenu secondMenu : firstMenu.getSubMenus())         buildSubMenu(secondMenu,modules);\n      }\n    }\n  }\n  return menuList;\n}\n"}
{"nl": "returns true if this mgr which requires that the txn participants join into the txn in contrary to a mgr which the participants are known prior to txn propagation", "code": "public boolean needParticipantsJoin() throws RemoteException {\n  return true;\n}\n"}
{"nl": "update the status text", "code": "private void updateStatus(){\n  conflicts=null;\n  if (resource == null && remoteResource == null) {\n    statusLabel.setText(\"\");\n    return;\n  }\n  if (resource != null) {\n    try {\n      LocalResourceStatus status=resource.getStatus();\n      if (!resource.isManaged()) {\n        statusLabel.setText(Policy.bind(\"SvnPropertiesView.resourceNotManaged\"));\n      }\n else       if (status.getPropStatus().equals(SVNStatusKind.MODIFIED)) {\n        statusLabel.setText(Policy.bind(\"SvnPropertiesView.somePropertiesModified\"));\n      }\n else       if (status.getPropStatus().equals(SVNStatusKind.NORMAL)) {\n        statusLabel.setText(Policy.bind(\"SvnPropertiesView.noPropertiesModified\"));\n      }\n else       if (status.getPropStatus().equals(SVNStatusKind.CONFLICTED)) {\n        statusLabel.setText(Policy.bind(\"SvnPropertiesView.conflictOnProperties\"));\n        try {\n          conflicts=PropertyConflict.getPropertyConflicts(resource);\n        }\n catch (        Exception e) {\n        }\n      }\n else {\n        statusLabel.setText(\"\");\n      }\n    }\n catch (    SVNException e) {\n      statusLabel.setText(Policy.bind(\"SvnPropertiesView.errorGettingStatus\"));\n    }\n  }\n}\n"}
{"nl": "convert an array of floats to fixed length strings", "code": "static String toS(float[] a){\n  String s=\"[\";\n  if (a == null) {\n    return \"[null]\";\n  }\n  for (int i=0; i < a.length; i++) {\n    if (i != 0) {\n      s+=\" , \";\n    }\n    String t=df.format(a[i]) + \"       \";\n    s+=t.substring(0,7);\n  }\n  s+=\"]\";\n  return s;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  final InspectorWindow inspectorWindow=(InspectorWindow)getViewer();\n  final TreePath[] paths=inspectorWindow.getDataTree().getSelectionPaths();\n  if (paths != null) {\n    inspectorWindow.expand(paths);\n  }\n else {\n    for (    NodeBase root : inspectorWindow.getClassification2RootNode().values()) {\n      inspectorWindow.expand(root);\n    }\n  }\n}\n"}
{"nl": "info log", "code": "public static void i(String msg){\n  if (LOG_ENABLE) {\n    Log.i(TAG,buildMsg(msg));\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),\"Choose label fill color\",null);\n  if (color != null)   execute(\"set labelFillColor=\" + color.getRed() + \" \"+ color.getGreen()+ \" \"+ color.getBlue()+ \";\");\n}\n"}
{"nl": "Creates Katharsis Jackson module with all required serializers", "code": "public SimpleModule build(ResourceRegistry resourceRegistry,boolean isClient){\n  SimpleModule simpleModule=new SimpleModule(JSON_API_MODULE_NAME,new Version(1,0,0,null,null,null));\n  simpleModule.addSerializer(new ContainerSerializer(resourceRegistry,isClient)).addSerializer(new DataLinksContainerSerializer(resourceRegistry)).addSerializer(new RelationshipContainerSerializer(resourceRegistry,isClient)).addSerializer(new LinkageContainerSerializer()).addSerializer(new BaseResponseSerializer(resourceRegistry)).addSerializer(new ErrorResponseSerializer());\n  return simpleModule;\n}\n"}
{"nl": "Set photo sizes", "code": "public FaveGetPhotosQuery photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n"}
{"nl": "Community name", "code": "public GroupsEditQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n"}
{"nl": "Set a float value in the preferences editor, to be written back once", "code": "public static void putFloat(String key,float value){\n  prefs.edit().putFloat(key,value).commit();\n}\n"}
{"nl": "Sends message to all league members", "code": "private void broadcastToLeagueMembers(final Player player){\n  player.getPlayerAlliance2().getLeague().sendPacket(new SM_MESSAGE(player,message,type));\n}\n"}
{"nl": "Updates the model with the current head orientation", "code": "public void update(float ipd,float yawHeadDegrees,float pitchHeadDegrees,float rollHeadDegrees,float worldYawOffsetDegrees,float worldPitchOffsetDegrees,float worldRollOffsetDegrees){\n}\n"}
{"nl": "apply the edits to the tax mapping", "code": "public void apply(Map<Integer,String> taxId2TaxName,Map<String,Integer> taxName2TaxId){\n  for (  Edit edit : list) {\nswitch (edit.type) {\ncase Edit.APPEND:\n      taxId2TaxName.put(edit.taxId,edit.taxName);\n    taxName2TaxId.put(edit.taxName,edit.taxId);\n  break;\ncase Edit.RENAME:\ntaxId2TaxName.put(edit.taxId,edit.taxName);\ntaxName2TaxId.put(edit.taxName,edit.taxId);\nbreak;\ncase Edit.DELETE:\ntaxId2TaxName.remove(edit.taxId);\ntaxName2TaxId.remove(edit.taxName);\nbreak;\ndefault :\nbreak;\n}\n}\n}\n"}
{"nl": "Checks if laststamp is on the previous day and only gives the stamp if it is after 9 AM", "code": "private boolean checkLastStamp(Timestamp lastStamp){\n  Timestamp now=new Timestamp(System.currentTimeMillis());\n  Calendar c=Calendar.getInstance();\n  c.setTimeInMillis(lastStamp.getTime());\n  c.add(Calendar.DATE,1);\n  c.set(Calendar.HOUR_OF_DAY,9);\n  c.set(Calendar.MINUTE,0);\n  Timestamp nextStamp=new Timestamp(c.getTime().getTime());\n  return now.after(nextStamp);\n}\n"}
{"nl": "Format impl key", "code": "public static String format(Object... parts){\n  StringBuilder key=new StringBuilder(DIABLO_NAMESPACE);\n  for (  Object part : parts) {\n    key.append(KEY_DELIMITER).append(part);\n  }\n  return key.toString();\n}\n"}
{"nl": "Call repaint on the scene draw", "code": "public void repaint(){\n  mySceneDraw.repaint();\n}\n"}
{"nl": "Creates a new instance of INSECTCategoryDB", "code": "public INSECTCategoryDB(){\n}\n"}
{"nl": "Offset to select a certain subset of users", "code": "public GroupsGetInvitedUsersQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n"}
{"nl": "This method checks if specified component group is present in Sidekick", "code": "public boolean isComponentGroupPresent(String groupName){\n  return getComponentGroupNames().contains(groupName);\n}\n"}
{"nl": "Resets the audio clock", "code": "public synchronized void resetTime(){\n}\n"}
{"nl": "Offset based on a first matching item to get a certain items subset", "code": "public MarketGetAlbumsQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n"}
{"nl": "Set access key", "code": "public PhotosGetCommentsQuery accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n"}
{"nl": "Save the photo in memory bitmap, resize and return the photo", "code": "public Bitmap onTakePhotoResult(){\n  Uri takenPhotoUri=getPhotoFileUri(this.thePhotoName,this.anotherPhotoName,this.activity);\n  if (takenPhotoUri != null) {\n    Bitmap takenImage=BitmapFactory.decodeFile(takenPhotoUri.getPath());\n    takenImage=resizePhoto(takenImage,this.resizePhoto,true);\n    return takenImage;\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "is the named parsing method loaded", "code": "public boolean isLoaded(MapType mapType){\n  return loadedMaps.contains(mapType);\n}\n"}
{"nl": "****************************** QUEST REWARD QUERIES", "code": "public QuestRewardCursor queryQuestRewardItem(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_QUEST_REWARDS;\n  qh.Selection=\"qr.\" + S.COLUMN_QUEST_REWARDS_ITEM_ID + \" = ? \";\n  qh.SelectionArgs=new String[]{\"\" + id};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=\"q.\" + S.COLUMN_QUESTS_HUB + \" ASC, \"+ \"q.\"+ S.COLUMN_QUESTS_STARS+ \" ASC\";\n  qh.Limit=null;\n  return new QuestRewardCursor(wrapJoinHelper(builderQuestReward(),qh));\n}\n"}
{"nl": "int file getter in memory", "code": "public ByteFileGetterInMemory(File file) throws IOException, CanceledException {\n  limit=file.length();\n  data=new byte[(int)((limit >>> BITS)) + 1][];\n  final int length0=(1 << BITS);\n  for (int i=0; i < data.length; i++) {\n    int length=(i < data.length - 1 ? length0 : (int)(limit & BIT_MASK) + 1);\n    data[i]=new byte[length];\n  }\n  try (InputStream ins=new BufferedInputStream(new FileInputStream(file));ProgressPercentage progress=new ProgressPercentage(\"Reading file: \" + file,limit)){\n    int whichArray=0;\n    int indexInArray=0;\n    for (long index=0; index < limit; index++) {\n      data[whichArray][indexInArray]=(byte)ins.read();\n      if (++indexInArray == length0) {\n        whichArray++;\n        indexInArray=0;\n      }\n      progress.setProgress(index);\n    }\n    progress.close();\n  }\n }\n"}
{"nl": "Returns a hash function implementing the MurmurHash3 algorithm, 32-bit x86 variant, with the given seed value", "code": "public static StatelessIntHash murmur3_32(int seed){\n  return Hashes.getStatelessInt(new MurmurHash3Parameters(MurmurHash3Variant.X86_32,seed));\n}\n"}
{"nl": "Set order", "code": "public WidgetsGetCommentsQuery order(String value){\n  return unsafeParam(\"order\",value);\n}\n"}
{"nl": "returns an indication if the underlying DB is a central DB common to several cluster members", "code": "public boolean isCentralDB(){\n  return _isCentralDB;\n}\n"}
{"nl": "draw the x axis", "code": "private void drawXAxis(Graphics2D gc){\n  int x0=leftMargin;\n  int x1=getWidth() - rightMargin;\n  int y0=getHeight() - bottomMargin;\n  int y1=topMargin;\n  gc.setColor(Color.BLACK);\n  gc.drawLine(x0,y0,x1 + 10,y0);\n  drawArrowHead(gc,new Point(x0,y0),new Point(x1 + 10,y0));\n  drawXAxisTicks(gc);\n  if (getChartData().getSeriesLabel() != null) {\n    gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n    gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));\n    int x=5;\n    int y=getHeight() - bottomMargin + 25;\n    if (isTranspose())     gc.drawString(getChartData().getClassesLabel(),x,y);\n else     gc.drawString(getChartData().getSeriesLabel(),x,y);\n  }\n}\n"}
{"nl": "check whether value read is the same as the value expected", "code": "static public void check(long got,long expected) throws IOException {\n  if (expected != got)   throw new IOException(\"RMA2 file corrupt? Expected: \" + expected + \", got: \"+ got);\n}\n"}
{"nl": "Signals that the tap target has been dismissed", "code": "public void onTargetDismissed(TapTargetView view,boolean userInitiated){\n}\n"}
{"nl": "get the state about game Running Boolean", "code": "public boolean isGameRunning(){\n  return isGameRunning;\n}\n"}
{"nl": "Identifier of an album", "code": "public MarketGetQueryWithExtended albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n"}
{"nl": "Set lead id", "code": "protected LeadsCheckUserQuery leadId(int value){\n  return unsafeParam(\"lead_id\",value);\n}\n"}
{"nl": "Return index of UTC char: 'Z', '+', '-'", "code": "protected int findUTCSign(String buffer,int start,int end){\n  int c;\n  for (int i=start; i < end; i++) {\n    c=buffer.charAt(i);\n    if (c == 'Z' || c == '+' || c == '-') {\n      return i;\n    }\n  }\n  return -1;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsCreateCampaignsQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.createCampaigns\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapAircraft && getAircraftId().equals(((AirMapAircraft)o).getAircraftId());\n}\n"}
{"nl": "STATE_IDLE 0 STATE_DRAGGING 1 STATE_SETTLING 2", "code": "@Override public void onDragStateChange(int state){\n}\n"}
{"nl": "This function checks if object id is in list", "code": "public boolean isMember(int playerObjId){\n  return legionMembers.contains(playerObjId);\n}\n"}
{"nl": "Add an Android module, along with any recursive library dependencies", "code": "@NotNull private static ModuleDependency addAndroidModule(@NotNull AndroidLibrary library,@NotNull String gradleProjectPath,@NotNull DependencySet dependencies,@NotNull DependencyScope scope,@NotNull Set<File> unique,boolean supportsDependencyGraph){\n  ModuleDependency dependency=new ModuleDependency(gradleProjectPath,scope);\n  dependencies.add(dependency);\n  addTransitiveDependencies(library,dependencies,scope,unique,supportsDependencyGraph);\n  return dependency;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesCreateChatQuery(VkApiClient client,UserActor actor,int... userIds){\n  super(client,\"messages.createChat\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n"}
{"nl": "Adds +deleted to the query", "code": "public void addDeleted(boolean deleted){\n  query.append(\" +deleted:\" + deleted);\n}\n"}
{"nl": "*************** put", "code": "public void put(String key,Object ser){\n  put(key,ser,null);\n}\n"}
{"nl": "Shows metrics for this audio player", "code": "public void showMetrics(){\n}\n"}
{"nl": "Prints the list of sinks registered with FlowDroud to stdout", "code": "public void printSinks(){\n  if (this.sourceSinkProvider == null) {\n    System.err.println(\"Sinks not calculated yet\");\n    return;\n  }\n  System.out.println(\"Sinks:\");\n  for (  SourceSinkDefinition am : getSinks()) {\n    System.out.println(am.toString());\n  }\n  System.out.println(\"End of Sinks\");\n}\n"}
{"nl": "Launch documents pick flow", "code": "@PickTriggerResult @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2) public int fromDocuments(final boolean pAllowMultiple){\n  return this.triggerPick(this.prepareDocumentsIntent(pAllowMultiple),QiPick.REQ_DOCUMENTS);\n}\n"}
{"nl": "Special string key to be sent with the request", "code": "public AppsSendRequestQuery key(String value){\n  return unsafeParam(\"key\",value);\n}\n"}
{"nl": "Set user ids", "code": "protected SecureGetUserLevelQuery userIds(int... value){\n  return unsafeParam(\"user_ids\",value);\n}\n"}
{"nl": "Reads the packet from the given buffer", "code": "@Override public void readPacketData(PacketBuffer buf) throws IOException {\n  AbstractChannel<?> channel=ChannelManager.get(buf.readInt());\n  packet=channel.read(buf);\n}\n"}
{"nl": "subCheck the TicTacToc game win using user define constant", "code": "private void subCheckTheTicTacTocWin(int tag,int i,int j){\n  if (_isGameContinueCheck)   if (getTictactocBoardStatues()[j][i] == tag) {\n    _counter++;\n    if (_counter >= Settings.nWinTheTicTacTocCountNumber) {\n      setTheClientScoreAboutTicTacTok(tag);\n    }\n  }\n else {\n    _counter=0;\n  }\n}\n"}
{"nl": "call when path's position changed", "code": "protected void onPathPositionUpdate(Path invokedPath,float distance,float[] pos,float[] tan){\n}\n"}
{"nl": "measure width", "code": "private int measureWidthSize(int measureSpec){\n  int defSize=dp2px(DEFAULT_WIDTH);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int result=0;\nswitch (specMode) {\ncase MeasureSpec.UNSPECIFIED:\ncase MeasureSpec.AT_MOST:\n    result=Math.min(defSize,specSize);\n  break;\ncase MeasureSpec.EXACTLY:\nresult=specSize;\nbreak;\n}\nreturn result;\n}\n"}
{"nl": "Determines if the given item is accented", "code": "private static boolean isAccented(Item item){\n  return (item.getFeatures().isPresent(\"accent\") || item.getFeatures().isPresent(\"endtone\"));\n}\n"}
{"nl": "End a flight", "code": "public static void endFlight(AirMapFlight flight,AirMapCallback<AirMapFlight> listener){\n  String url=String.format(flightEndUrl,flight.getFlightId());\n  AirMap.getClient().post(url,new GenericOkHttpCallback(listener,AirMapFlight.class));\n}\n"}
{"nl": "upload file to storage server (by file buff)", "code": "public String[] upload_file(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_file(group_name,file_buff,0,file_buff.length,file_ext_name,meta_list);\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n"}
{"nl": "Set page id", "code": "public WidgetsGetCommentsQuery pageId(String value){\n  return unsafeParam(\"page_id\",value);\n}\n"}
{"nl": "Gets whether the result is empty", "code": "public boolean isEmptyResult(){\n  return _results.getRowNumber() == 0;\n}\n"}
{"nl": "Insert records to TempRecordFile for sorting, at most one block long", "code": "public int insertFromScan(Scan s){\n  if (!super.insertIntoNextEmptySlot()) {\n    return 0;\n  }\n  for (  String fldName : sch.fields()) {\n    Constant val=s.getVal(fldName);\n    this.setVal(fldName,val);\n  }\n  if (s.next())   return 1;\n else   return -1;\n}\n"}
{"nl": "Resolve a reference", "code": "GitReference resolveReference(String reference) throws RepoException {\n  return new GitReference(this,revParse(reference));\n}\n"}
{"nl": "Converts a FallbackImpl object into a string representation", "code": "public final String toString(){\n  if (this.objectData == null) {\n    this.setObjectData(STR_LINE);\n  }\n  return this.objectData;\n}\n"}
{"nl": "Brings up the UI to perform crop on passed image URI", "code": "private void performCrop(Uri picUri,int destType,Intent cameraIntent){\n  try {\n    Intent cropIntent=new Intent(\"com.android.camera.action.CROP\");\n    cropIntent.setDataAndType(picUri,\"image/*\");\n    cropIntent.putExtra(\"crop\",\"true\");\n    if (targetWidth > 0) {\n      cropIntent.putExtra(\"outputX\",targetWidth);\n    }\n    if (targetHeight > 0) {\n      cropIntent.putExtra(\"outputY\",targetHeight);\n    }\n    if (targetHeight > 0 && targetWidth > 0 && targetWidth == targetHeight) {\n      cropIntent.putExtra(\"aspectX\",1);\n      cropIntent.putExtra(\"aspectY\",1);\n    }\n    croppedUri=Uri.fromFile(createCaptureFile(this.encodingType,System.currentTimeMillis() + \"\"));\n    cropIntent.putExtra(\"output\",croppedUri);\n    if (this.cordova != null) {\n      this.cordova.startActivityForResult((CordovaPlugin)this,cropIntent,CROP_CAMERA + destType);\n    }\n  }\n catch (  ActivityNotFoundException anfe) {\n    Log.e(LOG_TAG,\"Crop operation not supported on this device\");\n    try {\n      processResultFromCamera(destType,cameraIntent);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n      Log.e(LOG_TAG,\"Unable to write to file\");\n    }\n  }\n}\n"}
{"nl": "Set from list", "code": "public UsersSearchQuery fromList(List<String> value){\n  return unsafeParam(\"from_list\",value);\n}\n"}
{"nl": "Cancel all current operations", "code": "public void destroy(){\n  BackgroundExecutor.cancelAll(\"\",true);\n  UiThreadExecutor.cancelAll(\"\");\n}\n"}
{"nl": "Set ids", "code": "public AdsGetSuggestionsQuery ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n"}
{"nl": "Accept Quest(1)", "code": "public SM_QUEST_ACTION(int questId,int status,int step){\n  this.action=1;\n  this.questId=questId;\n  this.status=status;\n  this.step=step;\n}\n"}
{"nl": "Pretty-prints the given list fixture", "code": "@NotNull public static String listToString(@NotNull JListFixture list,int startRow,int endRow,int cellWidth){\n  String[] contents=list.contents();\n  StringBuilder sb=new StringBuilder();\n  String formatString=\"%-\" + Integer.toString(cellWidth) + \"s\";\n  for (int row=Math.max(0,startRow); row < Math.min(endRow,contents.length); row++) {\n    String cell=contents[row];\n    if (cell.length() > cellWidth) {\n      cell=cell.substring(0,cellWidth - 3) + \"...\";\n    }\n    sb.append(String.format(formatString,cell));\n    sb.append('\\n');\n  }\n  return sb.toString();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();\n  if (remoteServiceBrowser != null) {\n    String url=remoteServiceBrowser.getURL();\n    if (url.length() > 0) {\n      execute(\"detach remoteServer=\" + url + \";\");\n    }\n  }\n}\n"}
{"nl": "Checks if the given field has package-private visibility", "code": "private boolean isFieldPackagePrivate(Element attribute){\n  Set<Modifier> modifiers=attribute.getModifiers();\n  return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE);\n}\n"}
{"nl": "Below method will be used to log the statistic", "code": "public void logStatistics(){\n}\n"}
{"nl": "Creates stoplist file", "code": "public static String createStopList(FileSystem fs,boolean hdfs) throws IOException, PIRException {\n  logger.info(\"StopList file being created\");\n  List<String> elements=Arrays.asList(\"something.else.on.stoplist\",\"3.3.3.132\");\n  if (hdfs) {\n    String pirStopListFile=SystemConfiguration.getProperty(DistributedTestDriver.PIR_STOPLIST_FILE);\n    if (pirStopListFile == null) {\n      throw new PIRException(\"HDFS stop list file configuration name is required.\");\n    }\n    HDFS.writeFile(elements,fs,pirStopListFile,true);\n    logger.info(\"pirStopListFile file successfully created on hdfs!\");\n  }\n  String prefix=SystemConfiguration.getProperty(\"pir.stopListFile\");\n  if (prefix == null) {\n    throw new PIRException(\"Local stop list file configuration name is required.\");\n  }\n  return TestUtils.writeToTmpFile(elements,prefix,null);\n}\n"}
{"nl": "parse str to hump type<p> if class name ,param isFirstUpper should be true,else false", "code": "public static String parseHumpName(String str,boolean isFirstUpper,boolean isHump){\n  str=str.toLowerCase();\n  if (isHump && str.indexOf(\"_\") != -1) {\n    boolean isUpper=false;\n    StringBuilder builder=new StringBuilder();\n    for (    char c : str.toCharArray()) {\n      if (isUpper) {\n        c=Character.toUpperCase(c);\n        isUpper=false;\n      }\n      if (c == '_') {\n        isUpper=true;\n        continue;\n      }\n      builder.append(c);\n    }\n    str=builder.toString();\n  }\n  if (isFirstUpper) {\n    return upperFirst(str);\n  }\n  return lowerFirst(str);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set showBiPlot=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.getPcoaTab().setShowBiPlot(show);\n  try {\n    viewer.updateView(IDirector.ENABLE_STATE);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsCreateTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,String name){\n  super(client,\"ads.createTargetGroup\",CreateTargetGroupResponse.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  name(name);\n}\n"}
{"nl": "Creates a storable time fence which will be valid on Monday in the given daily time frame", "code": "public static StorableTimeFence inMondayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(MONDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n"}
{"nl": "Add a typed array to the config", "code": "public ResourcesPoet addTypedArray(String name,@NotNull List<String> values){\n  Element element=document.createElement(\"array\");\n  element.setAttribute(\"name\",name);\n  for (  String value : values) {\n    Element valueElement=document.createElement(\"item\");\n    valueElement.appendChild(document.createTextNode(value));\n    element.appendChild(valueElement);\n  }\n  resourceElement.appendChild(element);\n  return this;\n}\n"}
{"nl": "Return a new AnyVal that matches any head of a list and the given tail of a list", "code": "static <T>AnyVal<Object> anyHeadTail(AnyVal<T> head,ConsList<T> tail){\n  return new AnyConsImpl(null,head,tail,null);\n}\n"}
{"nl": "Print out the log for checking", "code": "public static void printLogs(){\n  System.out.println(getLogString());\n}\n"}
{"nl": "generate java code", "code": "String brewJava(){\n  StringBuilder java=new StringBuilder();\n  java.append(\"package \").append(classPackage).append(\";\").append(\"\\n\");\n  java.append(\"\\n\");\n  java.append(\"import android.os.Bundle;\").append(\"\\n\");\n  java.append(\"import android.os.Parcelable;\").append(\"\\n\");\n  java.append(\"import java.io.Serializable;\").append(\"\\n\");\n  java.append(\"import java.util.ArrayList;\").append(\"\\n\");\n  java.append(\"\\n\");\n  java.append(\"import com.thirtydegreesray.dataautoaccess.DataAutoAccess;\").append(\"\\n\");\n  java.append(\"import com.thirtydegreesray.dataautoaccess.DataAutoAccess.DataAccessor;\").append(\"\\n\");\n  java.append(\"\\n\");\n  java.append(\"public class \").append(className).append(\"<T extends \").append(targetClass).append(\">\").append(\" implements\").append(\" DataAccessor<T>\").append(\"{\\n\");\n  generateGetDataCode(java);\n  generateSaveDataCode(java);\n  java.append(\"}\\n\");\n  return java.toString();\n}\n"}
{"nl": "Find the smallest power of two greater than the input value", "code": "private static int nextPowerOfTwo(final int i){\n  return Integer.highestOneBit(i) << 1;\n}\n"}
{"nl": "Creates a simple version checker", "code": "public VersionChecker(Context ctx,String versionUrl,int iconResId,int uniqueNotificationId,String notificationUrl){\n  handler=new LeakGuardHandlerWrapper<Context>(ctx);\n  this.userAgent=new OkHttpClient();\n  this.versionUrl=versionUrl;\n  this.iconResId=iconResId;\n  this.notificationUrl=notificationUrl;\n  this.uniqueNotificationId=uniqueNotificationId;\n  try {\n    this.currentVersion=ctx.getPackageManager().getPackageInfo(ctx.getPackageName(),0).versionCode;\n  }\n catch (  NameNotFoundException e) {\n  }\n}\n"}
{"nl": "Reset the currentHighThreshold to tbe original highThreshold value", "code": "public void resetHighThreshold(){\n  this.currentHighThreshold=highThreshold;\n}\n"}
{"nl": "zlib decompress 2 String", "code": "public static String decompressToStringForZlib(byte[] bytesToDecompress){\n  byte[] bytesDecompressed=decompressForZlib(bytesToDecompress);\n  String returnValue=null;\n  try {\n    returnValue=new String(bytesDecompressed,0,bytesDecompressed.length,\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException uee) {\n    uee.printStackTrace();\n  }\n  return returnValue;\n}\n"}
{"nl": "Unescape commas in the string using the default escape char", "code": "public static String unEscapeString(String str){\n  return unEscapeString(str,ESCAPE_CHAR,COMMA);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardRestoreCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId,int commentId){\n  super(client,\"board.restoreComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  commentId(commentId);\n}\n"}
{"nl": "The main logic method, execute the query on the space by calling snapshot", "code": "public ResponsePacket executeOnSpace(ISpaceProxy space,Transaction txn) throws SQLException {\n  ResponsePacket response=new ResponsePacket();\n  try {\n    if (getSecurityInterceptor() != null) {\n      SpaceContext spaceContext=getSession().getConnectionContext().getSpaceContext();\n      SecurityContext securityContext=SpaceContextHelper.getSecurityContext(spaceContext);\n      getSecurityInterceptor().intercept(securityContext,SpacePrivilege.ALTER,tableName);\n    }\n    ExternalEntry template=new ExternalEntry(tableName,null,null);\n    template.setFieldsNames(_columnNames);\n    template.setFieldsTypes(_columnTypes);\n    template.setIndexIndicators(_indices);\n    template.setRoutingFieldName(_routingFieldName);\n    space.snapshot(template);\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.fine(\"Wrote a new table to space [\" + tableName + \"]\");\n    }\n    response.setIntResult(0);\n  }\n catch (  Exception e) {\n    if (_logger.isLoggable(Level.SEVERE)) {\n      _logger.log(Level.SEVERE,e.getMessage(),e);\n    }\n    SQLException se=new SQLException(\"Failed to create table [\" + tableName + \"]; Cause: \"+ e,\"GSP\",-106);\n    se.initCause(e);\n    throw se;\n  }\n  return response;\n}\n"}
{"nl": "Set test name", "code": "TestType(final String name){\n  this.name=name;\n}\n"}
{"nl": "Set the Offsets of the Screens to draw and the offset to center all the content", "code": "private void computeOffsets(@Nullable ScreenView currentScreenView){\n  if (myDesignSurface != null && currentScreenView != null) {\n    myCurrentScreenViewSize=currentScreenView.getSize(myCurrentScreenViewSize);\n    if (myDesignSurface.getScreenMode() == BOTH) {\n      if (myDesignSurface.isStackVertically()) {\n        mySecondScreenOffset.setLocation(0,myDeviceSize.getHeight() * myDeviceScale + myScaledScreenSpace);\n      }\n else {\n        mySecondScreenOffset.setLocation(myDeviceSize.getWidth() * myDeviceScale + myScaledScreenSpace,0);\n      }\n    }\n  }\n  myCenterOffset=(int)Math.round((PREFERRED_SIZE.getWidth() - myXScreenNumber * myDeviceSize.getWidth() * myDeviceScale) / 2);\n}\n"}
{"nl": "Create a LeaseMap for batch renewal", "code": "private static LeaseMap createBatchLeaseMap(List<Entry> bList,long now){\n  Iterator<Entry> iter=bList.iterator();\n  Entry e=iter.next();\n  LeaseMap batchLeaseMap=e.lease.createLeaseMap(e.getRenewDuration(now));\n  if (e.lease instanceof RemoteMethodControl && batchLeaseMap instanceof RemoteMethodControl) {\n    batchLeaseMap=(LeaseMap)((RemoteMethodControl)batchLeaseMap).setConstraints(ConstrainableProxyUtil.translateConstraints(((RemoteMethodControl)e.lease).getConstraints(),leaseToLeaseMapMethods));\n  }\n  while (iter.hasNext()) {\n    e=iter.next();\n    batchLeaseMap.put(e.lease,new Long(e.getRenewDuration(now)));\n  }\n  return batchLeaseMap;\n}\n"}
{"nl": "Returns true if speed can be changed at this moment", "code": "@Override public boolean canSetSpeed(){\n  Log.d(SBMP_TAG,\"canSetSpeed() 180\");\n  if (pmInterface == null) {\n    if (!ConnectPlayMediaService()) {\n      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);\n    }\n  }\n  if (pmInterface != null) {\n    try {\n      return pmInterface.canSetSpeed(ServiceBackedMediaPlayer.this.sessionId);\n    }\n catch (    RemoteException e) {\n      e.printStackTrace();\n      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);\n    }\n  }\n  return false;\n}\n"}
{"nl": "Run the flow", "code": "public void pls(){\n  mDna.evolve();\n}\n"}
{"nl": "/*    ", "code": "@deprecated public ComposedCharIter(){\n  this(false,0);\n}\n"}
{"nl": "Whether a section's contents are visually empty", "code": "protected boolean isEmpty(){\n  return children.isEmpty() || getItemCount(children) == 0;\n}\n"}
{"nl": "Filters to apply", "code": "public NewsfeedGetCommentsQuery filters(List<NewsfeedGetCommentsFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "decrease shield if the shield value down then 0, this unit will be dead", "code": "public void decreaseShield(){\n  this.shield--;\n  if (shield <= 0)   this.isDead=true;\n}\n"}
{"nl": "DOM Level 3", "code": "@Override public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n"}
{"nl": "read a packed transcript from a buffer", "code": "public void read(ByteInputBuffer buffer){\n  size=0;\n  for (PackedOperation op=new PackedOperation(buffer.read()); !op.equals(PackedOperation.terminator()); op=new PackedOperation(buffer.read())) {\n    if (size == transcript.length - 1) {\n      final PackedOperation[] tmp=new PackedOperation[2 * transcript.length];\n      System.arraycopy(transcript,0,tmp,0,size);\n      transcript=tmp;\n    }\n    transcript[size++]=op;\n  }\n}\n"}
{"nl": "Set count", "code": "public WidgetsGetCommentsQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Lifecycle Methods", "code": "@Override protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  overridePendingTransition(0,0);\n  Scoop.getInstance().apply(this);\n  setContentView(R.layout.activity_main);\n  ButterKnife.bind(this);\n  Scoop.sugarCone().bind(this);\n  setSupportActionBar(mAppBar);\n}\n"}
{"nl": "Set guid", "code": "public MarketCreateCommentQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n"}
{"nl": "WISHLIST COMPONENT QUERIES", "code": "public WishlistComponentCursor queryWishlistComponents(long id){\n  return mHelper.queryWishlistComponents(id);\n}\n"}
{"nl": "Take a screenshot without the status bar", "code": "public static Bitmap takeScreenShoteWithoutStatusBar(Activity activity){\n  View view=activity.getWindow().getDecorView();\n  view.setDrawingCacheEnabled(true);\n  view.buildDrawingCache();\n  Bitmap bmp=view.getDrawingCache();\n  int statusBarHeight=getStatusBarHeight(activity);\n  int width=getScreenWidthInPx(activity);\n  int height=getScreenHeightInPx(activity);\n  Bitmap bp=Bitmap.createBitmap(bmp,0,statusBarHeight,width,height - statusBarHeight);\n  view.destroyDrawingCache();\n  return bp;\n}\n"}
{"nl": "Set user id", "code": "public StorageGetQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LeadsMetricHitQuery(VkApiClient client,UserActor actor,String data){\n  super(client,\"leads.metricHit\",MetricHitResponse.class);\n  accessToken(actor.getAccessToken());\n  data(data);\n}\n"}
{"nl": "Reports an XPointer error", "code": "protected void reportError(String key,Object[] arguments) throws XNIException {\n  throw new XNIException((fErrorReporter.getMessageFormatter(XPointerMessageFormatter.XPOINTER_DOMAIN)).formatMessage(fErrorReporter.getLocale(),key,arguments));\n}\n"}
{"nl": "Attempt to construct the specified object from this XML string", "code": "static public Object deserialiseObject(String xml,String xsdFile,Class<?> objclass) throws JAXBException, SAXException, XMLStreamException {\n  Object obj=null;\n  JAXBContext jaxbContext=getJAXBContext(objclass);\n  SchemaFactory schemaFactory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n  final String schemaResourceFilename=new String(xsdFile);\n  URL schemaURL=MalmoMod.class.getClassLoader().getResource(schemaResourceFilename);\n  Schema schema=schemaFactory.newSchema(schemaURL);\n  Unmarshaller jaxbUnmarshaller=jaxbContext.createUnmarshaller();\n  jaxbUnmarshaller.setSchema(schema);\n  StringReader stringReader=new StringReader(xml);\n  XMLInputFactory xif=XMLInputFactory.newFactory();\n  xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES,false);\n  xif.setProperty(XMLInputFactory.SUPPORT_DTD,false);\n  XMLStreamReader XMLreader=xif.createXMLStreamReader(stringReader);\n  obj=jaxbUnmarshaller.unmarshal(XMLreader);\n  return obj;\n}\n"}
{"nl": "Required for Externalizable", "code": "public WriteEntryResult(){\n}\n"}
{"nl": "thinker package check", "code": "public static int checkTinkerPackage(Context context,int tinkerFlag,File patchFile,ShareSecurityCheck securityCheck){\n  int returnCode=checkSignatureAndTinkerID(context,patchFile,securityCheck);\n  if (returnCode == ShareConstants.ERROR_PACKAGE_CHECK_OK) {\n    returnCode=checkPackageAndTinkerFlag(securityCheck,tinkerFlag);\n  }\n  return returnCode;\n}\n"}
{"nl": "Stop listening to the mouse for movement", "code": "protected void stopListening(){\n  mouseListener.stopListening();\n}\n"}
{"nl": "Required for Externalizable", "code": "public SpaceRemoteEvent(){\n  super(EMPTY_STRING,0,0,null);\n}\n"}
{"nl": "Set counters", "code": "public SecureSetCounterQuery counters(List<String> value){\n  return unsafeParam(\"counters\",value);\n}\n"}
{"nl": "update the enable state", "code": "public void updateEnableState(String commandName){\n  if (SwingUtilities.isEventDispatchThread())   super.updateEnableState(commandName);\n  for (  MenuItem menuItem : menuItem2CommandFX.keySet()) {\n    ICommand command=menuItem2CommandFX.get(menuItem);\n    if (command.getName().equals(commandName)) {\n      menuItem.setDisable(!command.isApplicable());\n      if (command instanceof ICheckBoxCommand) {\n        ((CheckMenuItem)menuItem).setSelected(((ICheckBoxCommand)command).isSelected());\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveGetPostsQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getPosts\",GetPostsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Called once the source iterator has no more objects", "code": "private void sourceIteratorExhaushted(){\n  if (_logger.isLoggable(Level.FINEST))   _logger.finest(\"shared iterator source wrapped iterator is exhausted [\" + _identifier + \"]\");\n  _sourceIteratorExhausted=true;\n}\n"}
{"nl": "set select state of all objects", "code": "public void selectAll(boolean select){\n  if (select) {\n    table.getSelectionModel().selectAll();\n  }\n else {\n    table.getSelectionModel().clearSelection();\n  }\n}\n"}
{"nl": "Constructs new <tt>SM_RESTORE_CHARACTER </tt> packet", "code": "public SM_RESTORE_CHARACTER(int chaOid,boolean success){\n  this.chaOid=chaOid;\n  this.success=success;\n}\n"}
{"nl": "create an accession to integer map from the named file", "code": "@Override public IString2IntegerMap create(IName2IdMap label2id,String fileName,ProgressListener progress) throws IOException, CanceledException {\n  if (String2IntegerFileBasedABinMap.isTableFile(fileName))   return new String2IntegerFileBasedABinMap(fileName);\n else   return new Accession2IdMap(label2id,fileName,progress);\n}\n"}
{"nl": "Release of this SLHolder resource", "code": "public void release(){\n  if (_entries != null)   _entries.freeSLHolder(_pos);\n  _pos=null;\n  _entries=null;\n}\n"}
{"nl": "Remove account from this GameServer", "code": "public final Account removeAccountFromGameServer(int accountId){\n  return accountsOnGameServer.remove(accountId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardEditCommentQuery(VkApiClient client,UserActor actor,int groupId,int topicId,int commentId){\n  super(client,\"board.editComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  commentId(commentId);\n}\n"}
{"nl": "Calculate cluster size", "code": "public static int calcCount(int totalhosts,int vcclustersize){\n  final Float f=((float)totalhosts / (float)vcclustersize);\n  final int i=(int)Math.ceil(f);\n  return i;\n}\n"}
{"nl": "Lazy initialization of the map", "code": "private void initialize(){\n  if (_map == null) {\nsynchronized (lazyLock) {\n      if (_map == null) {\n        _map=new ConcurrentHashMap<Key,SoftReference<Value>>();\n      }\n    }\n  }\n}\n"}
{"nl": "Dumps the possible audio output file types", "code": "private static void dumpAudioTypes(){\n  AudioFileFormat.Type[] types=AudioSystem.getAudioFileTypes();\n  for (int i=0; i < types.length; i++) {\n    System.out.println(types[i].getExtension());\n  }\n}\n"}
{"nl": "Tell if a pokemon is fully evolved", "code": "public static boolean isFullyEvolved(PokemonId pokemonId){\n  if (EEVEE_FINAL_EVOLUTIONS.contains(pokemonId)) {\n    return true;\n  }\n else {\n    PokemonId[] info=EVOLUTION_INFO.get(pokemonId);\n    return info[info.length - 1] == pokemonId;\n  }\n}\n"}
{"nl": "stop notify", "code": "public boolean disableCharacteristicNotify(BluetoothGattCharacteristic characteristic){\n  if (characteristic != null && (characteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {\n    BleLog.w(TAG,\"characteristic.getProperties():\" + characteristic.getProperties());\n    return setCharacteristicNotification(getBluetoothGatt(),characteristic,false);\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Sets the condition evaluation status after evaluation", "code": "public void provideStepResult(ConditionStatus status){\n  LOG.debug(\"Evaluated loadable condition \" + progressData.peekLast().getLoadableComponentInfo() + \" with status \"+ status.getMessage());\n  progressData.peekLast().setStepStatus(status);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardGetCommentsQuery(VkApiClient client,UserActor actor,int groupId,int topicId){\n  super(client,\"board.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n}\n"}
{"nl": "Updates the display name in this configuration based on the values and override settings", "code": "public void updateDisplayName(){\n  setDisplayName(computeDisplayName());\n}\n"}
{"nl": "Public page subcategory", "code": "public GroupsEditQuery publicSubcategory(Integer value){\n  return unsafeParam(\"public_subcategory\",value);\n}\n"}
{"nl": "Specify whether or not the vertical lines should be displayed when steps are collapsed", "code": "public Builder showVerticalLineWhenStepsAreCollapsed(boolean showVerticalLineWhenStepsAreCollapsed){\n  this.showVerticalLineWhenStepsAreCollapsed=showVerticalLineWhenStepsAreCollapsed;\n  return this;\n}\n"}
{"nl": "sample usage for native library", "code": "public static boolean loadLibraryFromTinker(Context context,String relativePath,String libname) throws UnsatisfiedLinkError {\n  final Tinker tinker=Tinker.with(context);\n  libname=libname.startsWith(\"lib\") ? libname : \"lib\" + libname;\n  libname=libname.endsWith(\".so\") ? libname : libname + \".so\";\n  String relativeLibPath=relativePath + \"/\" + libname;\n  if (tinker.isEnabledForNativeLib() && tinker.isTinkerLoaded()) {\n    TinkerLoadResult loadResult=tinker.getTinkerLoadResultIfPresent();\n    if (loadResult.libs != null) {\n      for (      String name : loadResult.libs.keySet()) {\n        if (name.equals(relativeLibPath)) {\n          String patchLibraryPath=loadResult.libraryDirectory + \"/\" + name;\n          File library=new File(patchLibraryPath);\n          if (library.exists()) {\n            boolean verifyMd5=tinker.isTinkerLoadVerify();\n            if (verifyMd5 && !SharePatchFileUtil.verifyFileMd5(library,loadResult.libs.get(name))) {\n              tinker.getLoadReporter().onLoadFileMd5Mismatch(library,ShareConstants.TYPE_LIBRARY);\n            }\n else {\n              System.load(patchLibraryPath);\n              TinkerLog.i(TAG,\"loadLibraryFromTinker success:\" + patchLibraryPath);\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "close the array", "code": "@Override public void close(){\n  try {\n    raf.close();\n    System.err.println(\"Closing file: \" + file.getName() + \" (\"+ pages+ \"/\"+ data.length+ \" pages)\");\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "creates a radio button", "code": "private Button createRadio(Composite parent,String label,int span){\n  Button button=new Button(parent,SWT.RADIO);\n  button.setText(label);\n  GridData data=new GridData();\n  data.horizontalSpan=span;\n  button.setLayoutData(data);\n  return button;\n}\n"}
{"nl": "Apply for a permit", "code": "public static void applyForPermit(AirMapAvailablePermit permit,@Nullable AirMapCallback<AirMapPilotPermit> callback){\n  PermitService.applyForPermit(permit,callback);\n}\n"}
{"nl": "Creates a project fixture for this description", "code": "IdeFrameFixture create(){\n  WelcomeFrameFixture.find(guiTest.robot()).createNewProject();\n  NewProjectWizardFixture newProjectWizard=NewProjectWizardFixture.find(guiTest.robot());\n  ConfigureAndroidProjectStepFixture configureAndroidProjectStep=newProjectWizard.getConfigureAndroidProjectStep();\n  configureAndroidProjectStep.enterApplicationName(myName).enterCompanyDomain(myDomain).enterPackageName(myPkg);\n  guiTest.setProjectPath(configureAndroidProjectStep.getLocationInFileSystem());\n  newProjectWizard.clickNext();\n  newProjectWizard.getConfigureFormFactorStep().selectMinimumSdkApi(MOBILE,myMinSdk);\n  newProjectWizard.clickNext();\n  newProjectWizard.clickNext();\n  newProjectWizard.getChooseOptionsForNewFileStep().enterActivityName(myActivity);\n  newProjectWizard.clickFinish();\n  guiTest.ideFrame().requestFocusIfLost();\n  if (myWaitForSync) {\n    guiTest.ideFrame().waitForGradleProjectSyncToFinish();\n  }\n  return guiTest.ideFrame();\n}\n"}
{"nl": "Delegates parsing to SchemaParsingConfig", "code": "public void parse(XMLInputSource inputSource) throws IOException {\n  config.parse(inputSource);\n}\n"}
{"nl": "Initializes the page", "code": "private void initialize(){\n  location=null;\n  IAdaptable element=getElement();\n  if (element instanceof ISVNRepositoryLocation) {\n    location=(ISVNRepositoryLocation)element;\n  }\n else {\n    Object adapter=element.getAdapter(ISVNRepositoryLocation.class);\n    if (adapter instanceof ISVNRepositoryLocation) {\n      location=(ISVNRepositoryLocation)adapter;\n    }\n  }\n  showCredentials=SVNProviderPlugin.getPlugin().getSVNClientManager().getSvnClientInterface().equals(COMMANDLINE_CLIENT);\n  if (!showCredentials) {\n    if (location.getUsername() != null && !location.getUsername().trim().equals(\"\"))     showCredentials=true;\n  }\n}\n"}
{"nl": "This method will add a new legion to the cache", "code": "private void addCachedLegion(Legion legion){\n  this.allCachedLegions.add(legion);\n}\n"}
{"nl": "Writes Graphic Control Extension", "code": "protected void writeGraphicCtrlExt() throws IOException {\n  out.write(0x21);\n  out.write(0xf9);\n  out.write(4);\n  int transp, disp;\n  if (transparent == -1) {\n    transp=0;\n    disp=0;\n  }\n else {\n    transp=1;\n    disp=2;\n  }\n  if (dispose >= 0) {\n    disp=dispose & 7;\n  }\n  disp<<=2;\n  out.write(0 | disp | 0| transp);\n  writeShort(delay);\n  out.write(transIndex);\n  out.write(0);\n}\n"}
{"nl": "add name to AST to map - used mostly for inner and non public top-level classes", "code": "protected void addNameToAST(String name){\n  if (sootNameToAST == null) {\n    sootNameToAST=new HashMap<String,Node>();\n  }\n  sootNameToAST.put(name,astNode);\n}\n"}
{"nl": "<p>Get AccessToken</p>", "code": "public AccessToken accessToken(String code){\n  return getClient(null);\n}\n"}
{"nl": "check whether a value is a valid default for some type returns the compiled form of the value The parameter value could be either a String or a ValidatedInfo object", "code": "public static Object ElementDefaultValidImmediate(XSTypeDefinition type,String value,ValidationContext context,ValidatedInfo vinfo){\n  XSSimpleType dv=null;\n  if (type.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {\n    dv=(XSSimpleType)type;\n  }\n else {\n    XSComplexTypeDecl ctype=(XSComplexTypeDecl)type;\n    if (ctype.fContentType == XSComplexTypeDefinition.CONTENTTYPE_SIMPLE) {\n      dv=ctype.fXSSimpleType;\n    }\n else     if (ctype.fContentType == XSComplexTypeDefinition.CONTENTTYPE_MIXED) {\n      if (!((XSParticleDecl)ctype.getParticle()).emptiable())       return null;\n    }\n else {\n      return null;\n    }\n  }\n  Object actualValue=null;\n  if (dv == null) {\n    dv=STRING_TYPE;\n  }\n  try {\n    actualValue=dv.validate(value,context,vinfo);\n    if (vinfo != null)     actualValue=dv.validate(vinfo.stringValue(),context,vinfo);\n  }\n catch (  InvalidDatatypeValueException ide) {\n    return null;\n  }\n  return actualValue;\n}\n"}
{"nl": "Returns true if this policy allows resizing the right edge", "code": "public boolean rightAllowed(){\n  return (myFlags & RIGHT_EDGE) != 0;\n}\n"}
{"nl": "Test the renaming of the parent of a style", "code": "public void testStyleParentRename() throws Throwable {\n  doTestStyleInheritance(\"styles13.xml\",\"styles13_after.xml\",\"myStyle42\");\n}\n"}
{"nl": "Run the git command", "code": "public void run() throws RepoException {\n  List<String> params=Lists.newArrayList(\"add\");\n  if (force) {\n    params.add(\"-f\");\n  }\n  if (all) {\n    params.add(\"--all\");\n  }\n  params.add(\"--\");\n  Iterables.addAll(params,files);\n  git(getCwd(),addGitDirAndWorkTreeParams(params));\n}\n"}
{"nl": "Sets the fifo grouping property", "code": "public SpaceTypeDescriptorBuilder fifoGroupingProperty(String fifoGroupingPropertyPath){\n  if (fifoGroupingPropertyPath == null)   throw new IllegalArgumentException(\"Argument cannot be null - 'fifoGroupingPropertyPath'.\");\n  if (_fifoGroupingPropertyPath != null)   throw new IllegalStateException(\"Cannot set fifo grouping to '\" + fifoGroupingPropertyPath + \"' - it was already set to '\"+ _fifoGroupingPropertyPath+ \"'.\");\n  validateNoCollectionPath(fifoGroupingPropertyPath);\n  this._fifoGroupingPropertyPath=fifoGroupingPropertyPath;\n  return this;\n}\n"}
{"nl": "Create an <code>unsigned long</code>", "code": "public static ULong ulong(String value) throws NumberFormatException {\n  return value == null ? null : ULong.valueOf(value);\n}\n"}
{"nl": "Load unit database from various relevant files", "code": "protected void loadUnitDatabase(String audioTimelineFileName,String basenameTimelineFileName,String unitFileName) throws IOException, MaryConfigurationException {\n  unitDB=new UnitDatabase();\n  UnitFileReader unitFileReader=new UnitFileReader(unitFileName);\n  TimelineReader audioTimelineReader=loadAudioTimeline(audioTimelineFileName);\n  TimelineReader basenameTimelineReader=new TimelineReader(basenameTimelineFileName);\n  unitDB.load(null,null,unitFileReader,null,audioTimelineReader,basenameTimelineReader,0);\n}\n"}
{"nl": "/*     ", "code": "@deprecated public TimeZoneFormat freeze(){\n  this._frozen=true;\n  return this;\n}\n"}
{"nl": "Adds an issue annotation on the target of the given text unit", "code": "private void addAnnotationOnTarget(ITextUnit textUnit,Issue issue){\n  TextContainer targetContainer=textUnit.getTarget(targetLocale);\n  addAnnotation(targetContainer,issue);\n}\n"}
{"nl": "List the clients", "code": "@RequestMapping(value=\"/clients\",method=RequestMethod.GET) public JsonResponse clients(@RequestParam(\"appId\") Long appId){\n  Response<List<ClientDto>> clientsResp=clusterService.listClients(appId);\n  if (!clientsResp.isSuccess()) {\n    return JsonResponse.notOk(clientsResp.getErr());\n  }\n  return JsonResponse.ok(clientsResp.getData());\n}\n"}
{"nl": "update the cache using the given statuses", "code": "public IResource updateCache(IResource resource,ISVNStatus status){\n  if (resource != null && status != null && status.getTextStatus() != null && !resource.exists() && status.getTextStatus().equals(SVNStatusKind.MISSING) && (status.getLastChangedRevision() == null || status.getLastChangedRevision().getNumber() == -1)) {\n    statusCache.removeStatus(resource);\n    return resource;\n  }\n  return statusCache.addStatus(resource,new LocalResourceStatus(status,getURL(status),checkForReadOnly));\n}\n"}
{"nl": "Completely removes player from database", "code": "public static int deleteAccountsCharsFromDB(int accountId){\n  List<Integer> charIds=DAOManager.getDAO(PlayerDAO.class).getPlayerOidsOnAccount(accountId);\n  for (  int playerId : charIds) {\n    deletePlayerFromDB(playerId);\n  }\n  return charIds.size();\n}\n"}
{"nl": "TODO: Javadoc", "code": "private static String parsePiece(String whole,int[] idx) throws IllegalArgumentException {\n  int start=idx[0];\n  while (idx[0] < whole.length() && isDigitOrPeriod(whole.charAt(idx[0]))) {\n    idx[0]++;\n  }\n  if (idx[0] == whole.length()) {\n    throw new IllegalArgumentException(whole);\n  }\n  idx[0]++;\n  return whole.substring(start,idx[0]);\n}\n"}
{"nl": "Method to compute the standalone response <p> Assumes that the input data is a single file in the local filesystem and is fully qualified", "code": "public void computeStandaloneResponse() throws IOException {\n  String inputData=SystemConfiguration.getProperty(\"pir.inputData\");\n  try {\n    BufferedReader br=new BufferedReader(new FileReader(inputData));\n    String line;\n    JSONParser jsonParser=new JSONParser();\n    while ((line=br.readLine()) != null) {\n      logger.info(\"line = \" + line);\n      JSONObject jsonData=(JSONObject)jsonParser.parse(line);\n      logger.info(\"jsonData = \" + jsonData.toJSONString());\n      String selector=QueryUtils.getSelectorByQueryTypeJSON(qSchema,jsonData);\n      addDataElement(selector,jsonData);\n    }\n    br.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  String outputFile=SystemConfiguration.getProperty(\"pir.outputFile\");\n  setResponseElements();\n  new LocalFileSystemStore().store(outputFile,response);\n}\n"}
{"nl": "change current state to acquire state in lookup service", "code": "private boolean doChangeState(State currentState,State acquireState) throws RemoteException, InterruptedException {\n  ServiceItem activeCandidate=findActive();\n  if (activeCandidate != null) {\n    if (_logger.isLoggable(Level.FINE)) {\n      _logger.fine(\"Advance from [\" + currentState + \"] to [\"+ acquireState+ \"] was rejected - found [\"+ activeCandidate.service+ \"] in [ACTIVE] state\");\n    }\n    return false;\n  }\n  if (_logger.isLoggable(Level.FINE)) {\n    _logger.fine(\"Advance from [\" + currentState + \"] to [\"+ acquireState+ \"] was accepted\");\n  }\n  return changeState(currentState,acquireState,false);\n}\n"}
{"nl": "true if the entry packet has an array of fixed properties", "code": "@Override public boolean hasFixedPropertiesArray(){\n  return false;\n}\n"}
{"nl": "Creates a file url for the given file and line position", "code": "@Nullable public static String createFilePositionUrl(@NotNull File file,int line,int column){\n  try {\n    String fileUrl=SdkUtils.fileToUrlString(file);\n    if (line != -1) {\n      if (column > 0) {\n        return fileUrl + ':' + line+ ':'+ column;\n      }\n else {\n        return fileUrl + ':' + line;\n      }\n    }\n    return fileUrl;\n  }\n catch (  MalformedURLException e) {\n    Logger.getInstance(HtmlLinkManager.class).error(e);\n    return null;\n  }\n}\n"}
{"nl": "Add a node ID to the neighbor list", "code": "public void addNeighbor(Integer nodeId){\n  nodeNeighbors.add(nodeId);\n}\n"}
{"nl": "Removes all effects from controllers and ends them appropriately Passive effect will not be removed", "code": "public void removeAllEffects(){\n  this.removeAllEffects(false);\n}\n"}
{"nl": "Cancel use Item", "code": "public void cancelUseItem(){\n}\n"}
{"nl": "Take a list of InferWidgets and return a list of Rectangles", "code": "private static Rectangle[] widgetsToRectangles(ScoutWidget[] list){\n  Rectangle[] ret=new Rectangle[list.length];\n  for (int i=0; i < ret.length; i++) {\n    int x=list[i].mConstraintWidget.getX();\n    int y=list[i].mConstraintWidget.getY();\n    int w=list[i].mConstraintWidget.getWidth();\n    int h=list[i].mConstraintWidget.getHeight();\n    ret[i]=new Rectangle(x,y,w,h);\n  }\n  return ret;\n}\n"}
{"nl": "Read the steps information from a Kettle repository", "code": "public void readRep(Repository rep,ObjectId idStep,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleException {\n  try {\n    this.tabelName=rep.getStepAttributeString(idStep,\"TableName\");\n    this.outputRowSize=rep.getStepAttributeString(idStep,\"outputRowSize\");\n    this.databaseName=rep.getStepAttributeString(idStep,\"databaseName\");\n    this.tableName=rep.getStepAttributeString(idStep,\"tableName\");\n    this.dimensionCount=rep.getStepAttributeString(idStep,\"dimensionCount\");\n    this.noDictionaryDims=rep.getStepAttributeString(idStep,\"noDictionaryDims\");\n    this.noDictionaryDims=rep.getStepAttributeString(idStep,\"noDictionaryDimsMapping\");\n    this.complexDimensionCount=rep.getStepAttributeString(idStep,\"complexDimensionCount\");\n    this.measureCount=rep.getStepAttributeString(idStep,\"measureCount\");\n    this.updateMemberRequest=rep.getStepAttributeString(idStep,\"isUpdateMemberRequest\");\n    this.measureDataType=rep.getStepAttributeString(idStep,\"measureDataType\");\n    this.partitionID=rep.getStepAttributeString(idStep,\"partitionID\");\n    this.segmentId=rep.getStepAttributeString(idStep,\"segmentId\");\n    this.taskNo=rep.getStepAttributeString(idStep,\"taskNo\");\n  }\n catch (  Exception ex) {\n    throw new KettleException(BaseMessages.getString(PKG,\"CarbonDataWriterStepMeta.Exception.UnexpectedErrorInReadingStepInfo\",new String[0]),ex);\n  }\n}\n"}
{"nl": "Changes the topic of this group", "code": "public void changeTopic(String topic){\n  skype.changeGroupTopic(this,topic);\n}\n"}
{"nl": "Calculated the fraction of the area filled with widgets", "code": "public float fractionFilled(){\n  return mWidgetArea / (float)mGroupArea;\n}\n"}
{"nl": "Method called when the field has been selected from a combo box and may need to be initialised", "code": "@Override public void justSelected(){\n  setCachedExpression(generateExpression());\n  checkSymbolIsValid();\n}\n"}
{"nl": "Creates a configured Jackson object mapper for parsing YAML", "code": "public static ObjectMapper createObjectMapper(){\n  return new ObjectMapper(new YAMLFactory());\n}\n"}
{"nl": "Selects a device matching the given label prefix in the configuration toolbar's device menu", "code": "public void chooseDevice(@NotNull String label){\n  JButton menuButton=findToolbarButton(\"The virtual device to render the layout with\");\n  myRobot.click(menuButton);\n  clickPopupMenuItemMatching(new DeviceNameMatcher(label),myToolBar.getComponent(),myRobot);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int handleGetExtendedYear(){\n  int eyear;\n  int eyear;\n  if (newerField(19,1) == 19) {\n    eyear=internalGet(19,1);\n  }\n else {\n    int eyear;\n    if (isAmeteAlemEra()) {\n      eyear=internalGet(1,5501) - 5500;\n    }\n else {\n      int era=internalGet(0,1);\n      int eyear;\n      if (era == 1) {\n        eyear=internalGet(1,1);\n      }\n else       eyear=internalGet(1,1) - 5500;\n    }\n  }\n  return eyear;\n}\n"}
{"nl": "Add a list of pages to an experiment", "code": "@POST @Path(\"{experimentID}/pages\") @Consumes(APPLICATION_JSON) @ApiOperation(value=\"Post a list of pages to an experiment\",notes=\"Pages can only be added to an experiment with DRAFT, RUNNING, or PAUSED states\") @Timed public Response postPages(@PathParam(\"experimentID\") @ApiParam(value=\"Experiment ID\") final Experiment.ID experimentID,final ExperimentPageList experimentPageList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  Username userName=authorization.getUser(authorizationHeader);\n  Experiment experiment=experiments.getExperiment(experimentID);\n  if (experiment == null) {\n    throw new ExperimentNotFoundException(experimentID);\n  }\n  authorization.checkUserPermissions(userName,experiment.getApplicationName(),CREATE);\n  pages.postPages(experimentID,experimentPageList,authorization.getUserInfo(userName));\n  return httpHeader.headers(CREATED).build();\n}\n"}
{"nl": "Create a syllable iterator over the given feature file, starting from the given fromUnitIndex and reaching up to (and including) the  given toUnitIndex", "code": "public SyllableIterator(FeatureFileReader features,int fromUnitIndex,int toUnitIndex){\n  this.features=features;\n  this.fromUnitIndex=fromUnitIndex;\n  this.toUnitIndex=toUnitIndex;\n  FeatureDefinition featureDefinition=features.getFeatureDefinition();\n  fiPhone=featureDefinition.getFeatureIndex(\"phone\");\n  fvPhone_0=featureDefinition.getFeatureValueAsByte(fiPhone,\"0\");\n  fvPhone_Silence=featureDefinition.getFeatureValueAsByte(fiPhone,\"_\");\n  fiSylStart=featureDefinition.getFeatureIndex(\"segs_from_syl_start\");\n  fiSylEnd=featureDefinition.getFeatureIndex(\"segs_from_syl_end\");\n  String halfphoneFeature=\"halfphone_lr\";\n  if (featureDefinition.hasFeature(halfphoneFeature)) {\n    isHalfphone=true;\n    fiLR=featureDefinition.getFeatureIndex(halfphoneFeature);\n    fvLR_L=featureDefinition.getFeatureValueAsByte(fiLR,\"L\");\n    fvLR_R=featureDefinition.getFeatureValueAsByte(fiLR,\"R\");\n  }\n else {\n    isHalfphone=false;\n    fiLR=fvLR_L=fvLR_R=0;\n  }\n  i=fromUnitIndex;\n}\n"}
{"nl": "Return the id associated with this tap target", "code": "public int id(){\n  return id;\n}\n"}
{"nl": "Create a Box App User", "code": "public BoxUser.Info createAppUser(String clientId,String clientSecret,String publicKeyId,String privateKey,String privateKeyPassword,String enterpriseId) throws BoxSDKServiceException {\n  logger.debug(\"Creating Box App User: {}\",MOJITO_APP_USER_NAME);\n  JWTEncryptionPreferences jwtEncryptionPreferences=boxSDKJWTProvider.getJWTEncryptionPreferences(publicKeyId,privateKey,privateKeyPassword);\n  BoxDeveloperEditionAPIConnection appEnterpriseConnection=BoxDeveloperEditionAPIConnection.getAppEnterpriseConnection(enterpriseId,clientId,clientSecret,jwtEncryptionPreferences,new InMemoryLRUAccessTokenCache(5));\n  CreateUserParams createUserParams=new CreateUserParams();\n  createUserParams.setSpaceAmount(UNLIMITED_SPACE);\n  try {\n    return BoxUser.createAppUser(appEnterpriseConnection,MOJITO_APP_USER_NAME,createUserParams);\n  }\n catch (  BoxAPIException e) {\n    throw new BoxSDKServiceException(\"Couldn't create App User\",e);\n  }\n}\n"}
{"nl": "Mouse dragged handling", "code": "public int mouseDragged(MouseEvent e){\n  mIsControlDown=e.isControlDown();\n  mIsShiftDown=e.isShiftDown();\n  mIsAltDown=e.isAltDown();\n  int x=mViewTransform.getAndroidX(e.getX());\n  int y=mViewTransform.getAndroidY(e.getY());\n  return mouseDragged(x,y);\n}\n"}
{"nl": "Creates directory for cache files if it doesn't already exist", "code": "private void makeCacheDirectory(){\n  File cacheDir=new File(CACHE_DIRECTORY);\n  if (!cacheDir.exists()) {\n    cacheDir.mkdir();\n  }\n}\n"}
{"nl": "zlib compress 2 byte", "code": "public static byte[] compressForZlib(byte[] bytesToCompress){\n  Deflater deflater=new Deflater();\n  deflater.setInput(bytesToCompress);\n  deflater.finish();\n  byte[] bytesCompressed=new byte[Short.MAX_VALUE];\n  int numberOfBytesAfterCompression=deflater.deflate(bytesCompressed);\n  byte[] returnValues=new byte[numberOfBytesAfterCompression];\n  System.arraycopy(bytesCompressed,0,returnValues,0,numberOfBytesAfterCompression);\n  return returnValues;\n}\n"}
{"nl": "internal method to share code with subclass", "code": "protected void cloneNode(CoreDocumentImpl newdoc,boolean deep){\n  if (needsSyncChildren()) {\n    synchronizeChildren();\n  }\n  if (deep) {\n    HashMap reversedIdentifiers=null;\n    if (identifiers != null) {\n      reversedIdentifiers=new HashMap();\n      Iterator entries=identifiers.entrySet().iterator();\n      while (entries.hasNext()) {\n        Map.Entry entry=(Map.Entry)entries.next();\n        Object elementId=entry.getKey();\n        Object elementNode=entry.getValue();\n        reversedIdentifiers.put(elementNode,elementId);\n      }\n    }\n    for (ChildNode kid=firstChild; kid != null; kid=kid.nextSibling) {\n      newdoc.appendChild(newdoc.importNode(kid,true,true,reversedIdentifiers));\n    }\n  }\n  newdoc.allowGrammarAccess=allowGrammarAccess;\n  newdoc.errorChecking=errorChecking;\n}\n"}
{"nl": "get enemy path", "code": "private void GetPath(int num){\n  sPath=this.map_controler.get_Path(num);\n  if (sPath.get_Start_X() != -99)   position.x=sPath.get_Start_X();\n  if (sPath.get_Start_Y() != -99)   position.y=sPath.get_Start_Y();\n  col=0;\n  GetDir(col);\n}\n"}
{"nl": "Save the specified value to the shared preferences", "code": "public void save(String key,String value){\n  prefs.edit().putString(key,value).apply();\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return locked;\n}\n"}
{"nl": "Set user ids", "code": "public SecureSendNotificationQuery userIds(List<Integer> value){\n  return unsafeParam(\"user_ids\",value);\n}\n"}
{"nl": "create a format definition from a defining string", "code": "public static FormatDefinition fromString(String string){\n  FormatDefinition formatDefinition=new FormatDefinition();\n  String[] tokens=string.split(\" \");\n  for (  String word : tokens) {\n    int pos=word.indexOf(\":\");\n    formatDefinition.addItem(word.substring(0,pos),Type.valueOf(word.substring(pos + 1)));\n  }\n  return formatDefinition;\n}\n"}
{"nl": "compute correlation distance between two series", "code": "private static double computeCorrelationDistanceBetweenSeries(String seriesA,String seriesB,Table<String,String,Double> seriesAndClass2Value){\n  final Set<String> classes=seriesAndClass2Value.columnKeySet();\n  final ArrayList<Double> xValues=new ArrayList<>(classes.size());\n  final ArrayList<Double> yValues=new ArrayList<>(classes.size());\n  for (  String className : classes) {\n    xValues.add(seriesAndClass2Value.get(seriesA,className));\n    yValues.add(seriesAndClass2Value.get(seriesB,className));\n  }\n  return 1 - Correlation.computePersonsCorrelationCoefficent(classes.size(),xValues,yValues);\n}\n"}
{"nl": "does A part contain set H?", "code": "public boolean isAcontains(BitSet H){\n  BitSet M=((BitSet)A.clone());\n  M.and(H);\n  return M.cardinality() == H.cardinality();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PlacesGetTypesQuery(VkApiClient client,UserActor actor){\n  super(client,\"places.getTypes\",Utils.buildParametrizedType(List.class,Types.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Given cluster will be merged into this cluster", "code": "public void mergeCluster(Cluster xCluster){\n  if (xCluster == null) {\n    throw new NullPointerException(\"Input cluster should not be null\");\n  }\n  ArrayList<String> xDataPoints=xCluster.getAllDataPoints();\n  Iterator<String> it=xDataPoints.iterator();\n  while (it.hasNext()) {\n    this.dataPoints.add(it.next());\n  }\n  this.clusterSize=this.dataPoints.size();\n}\n"}
{"nl": "Multiplies the this color and the given color", "code": "public Color mul(Color color){\n  this.r*=color.r;\n  this.g*=color.g;\n  this.b*=color.b;\n  this.a*=color.a;\n  clamp();\n  return this;\n}\n"}
{"nl": "Initialize an AirMapStatusRequirementNotice with default values", "code": "public AirMapStatusRequirementNotice(){\n}\n"}
{"nl": "Note:<br> max level is 255", "code": "private static int makeHash(int npcId,int level){\n  return npcId << 8 | level;\n}\n"}
{"nl": "Write a float from the output stream, byte-swapping as necessary", "code": "public static void writeFloat(DataOutputStream dos,boolean isBigEndian,float val) throws IOException {\n  if (!isBigEndian) {\n    writeLittleEndianFloat(dos,val);\n  }\n else {\n    dos.writeFloat(val);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "used for MODE_SHOW_DATA_OF_THIS_MONTH", "code": "@Override public int daysCompleteTheTask(){\n  int k=0;\n  for (int i=1; i <= daysOfCurrentMonth(); i++) {\n    k+=data[i] ? 1 : 0;\n  }\n  return k;\n}\n"}
{"nl": "is selected?", "code": "@Override public boolean isSelected(){\n  return ClassificationManager.isActiveMapper(cName,mapType);\n}\n"}
{"nl": "Parses, validates and computes normalized version of gYear object", "code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  int start=0;\n  if (str.charAt(0) == '-') {\n    start=1;\n  }\n  int sign=findUTCSign(str,start,len);\n  final int length=((sign == -1) ? len : sign) - start;\n  if (length < 4) {\n    throw new RuntimeException(\"Year must have 'CCYY' format\");\n  }\n else   if (length > 4 && str.charAt(start) == '0') {\n    throw new RuntimeException(\"Leading zeros are required if the year value would otherwise have fewer than four digits; otherwise they are forbidden\");\n  }\n  if (sign == -1) {\n    date.year=parseIntYear(str,len);\n  }\n else {\n    date.year=parseIntYear(str,sign);\n    getTimeZone(str,date,sign,len);\n  }\n  date.month=MONTH;\n  date.day=1;\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  date.position=0;\n  return date;\n}\n"}
{"nl": "Set a new project name to use for the new project", "code": "NewProjectDescriptor withName(@NotNull String name){\n  myName=name;\n  return this;\n}\n"}
{"nl": "Analyzes the given class to find callback methods", "code": "private void analyzeClass(SootClass sootClass,SootClass lifecycleElement){\n  if (sootClass.getName().startsWith(\"android.\") || sootClass.getName().startsWith(\"java.\"))   return;\n  analyzeClassInterfaceCallbacks(sootClass,sootClass,lifecycleElement);\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n"}
{"nl": "Process port binding properties", "code": "private void mapPortBindingProperties(ContainerState containerState,Map<String,Object> networkSettings){\n  if (networkSettings == null) {\n    return;\n  }\n  Map<String,List<Map<String,String>>> portMap=getMap(networkSettings,DOCKER_CONTAINER_NETWORK_SETTINGS_PORTS_PROP_NAME);\n  if (containerState.ports == null) {\n    containerState.ports=new ArrayList<PortBinding>();\n  }\n  if (portMap != null) {\n    List<DockerPortMapping> portMappings=DockerPortMapping.fromMap(portMap);\n    containerState.ports=portMappings.stream().map(null).collect(Collectors.toList());\n  }\n}\n"}
{"nl": "Set album id", "code": "public VideoRemoveFromAlbumQuery albumId(Integer value){\n  return unsafeParam(\"album_id\",value);\n}\n"}
{"nl": "Method to take an input json array format string and output a String array", "code": "public static String[] jsonArrayStringToList(String jsonString){\n  String modString=jsonString.replaceFirst(\"\\\\[\",\"\");\n  modString=modString.replaceFirst(\"\\\\]\",\"\");\n  modString=modString.replaceAll(\"\\\"\",\"\");\n  return modString.split(\"\\\\s*,\\\\s*\");\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null && viewer.getJList().getSelectedValuesList().size() >= 1;\n}\n"}
{"nl": "add all ids that many be missing from the tree to the tree", "code": "private void addMissingToTree(String unclassifiedNodeLabel,int unclassifiedNodeId,String labelFormat,final int maxId){\n  Node unclassified=null;\n  for (int id=1; id <= maxId; id++) {\n    if (!containsId(id)) {\n      if (unclassified == null) {\n        unclassified=newNode();\n        Edge before=null;\n        for (Edge e=getRoot().getFirstOutEdge(); e != null; e=getRoot().getNextOutEdge(e)) {\n          Node w=e.getTarget();\n          Integer wid=(Integer)w.getInfo();\n          if (wid < 0) {\n            before=e;\n            break;\n          }\n        }\n        if (before != null)         newEdge(getRoot(),before,unclassified,null,Edge.BEFORE,Edge.AFTER,null);\n else         newEdge(getRoot(),unclassified);\n        unclassified.setInfo(unclassifiedNodeId);\n        addId2Node(unclassifiedNodeId,unclassified);\n        name2IdMap.put(unclassifiedNodeLabel,unclassifiedNodeId);\n      }\n      Node v=newNode(id);\n      newEdge(unclassified,v);\n      name2IdMap.put(String.format(labelFormat,id),id);\n      addId2Node(id,v);\n    }\n  }\n}\n"}
{"nl": "Sends this packet to all the players in the world within the radius", "code": "public void toAllInRadius(WorldServer world,Vec3d pos,double radius){\n  double maxDistance=radius * radius + radius * radius + radius * radius;\n  toAll(world.getPlayers(EntityPlayerMP.class,null));\n}\n"}
{"nl": "Assign predicted F0 values to the phones by parsing the XML Document", "code": "private void insertTargetF0Values() throws Exception {\n  NodeList phoneNodes;\n  try {\n    phoneNodes=getPhoneNodes();\n  }\n catch (  Exception e) {\n    Log.d(Mary.LOG,new Exception(\"Could not get the phone Nodes from the Document\",e).toString());\n    throw new Exception(\"Could not get the phone Nodes from the Document\",e);\n  }\n  int totalNumberOfFrames=getNumberOfFrames();\n  ProsodyElementHandler elementHandler=new ProsodyElementHandler();\n  double[] f0Targets=elementHandler.getF0Contour(phoneNodes,totalNumberOfFrames);\n  int f0TargetStartIndex=0;\n  for (  Phone phone : phones) {\n    int numberOfLeftUnitFrames=phone.getNumberOfLeftUnitFrames();\n    int f0TargetMidIndex=f0TargetStartIndex + numberOfLeftUnitFrames;\n    double[] leftF0Targets=ArrayUtils.subarray(f0Targets,f0TargetStartIndex,f0TargetMidIndex);\n    phone.setLeftTargetF0Values(leftF0Targets);\n    int numberOfRightUnitFrames=phone.getNumberOfRightUnitFrames();\n    int f0TargetEndIndex=f0TargetMidIndex + numberOfRightUnitFrames;\n    double[] rightF0Targets=ArrayUtils.subarray(f0Targets,f0TargetMidIndex,f0TargetEndIndex);\n    phone.setRightTargetF0Values(rightF0Targets);\n    f0TargetStartIndex=f0TargetEndIndex;\n  }\n  return;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set showGroups=\");\n  final boolean show=np.getBoolean();\n  final String style;\n  if (np.peekMatchIgnoreCase(\"style\")) {\n    np.matchIgnoreCase(\"style=\");\n    style=np.getWordMatchesIgnoringCase(\"ellipses convexHulls\");\n  }\n else   style=\"ellipses\";\n  np.matchIgnoreCase(\";\");\n  final ClusterViewer viewer=getViewer();\n  if (style.equalsIgnoreCase(\"ellipses\"))   viewer.getPcoaTab().setShowGroupsAsEllipses(show);\n else   viewer.getPcoaTab().setShowGroupsAsConvexHulls(show);\n  try {\n    if (show)     viewer.getPcoaTab().computeConvexHullsAndEllipsesForGroups(viewer.getGroup2Nodes());\n    viewer.updateView(IDirector.ENABLE_STATE);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n  }\n}\n"}
{"nl": "Expands section if collapsed based on provided sidekick section", "code": "public AemSidekick expandSectionIfCollapsed(SidekickSection sidekickSections){\n  final WebElement section=getSectionByName(sidekickSections.getSectionName());\n  bobcatWait.withTimeout(Timeouts.BIG).until(SidekickActions.expandSection(section),Timeouts.SMALL);\n  return this;\n}\n"}
{"nl": "Start operations to delete one or several files", "code": "public void removeFiles(Collection<OCFile> files,boolean onlyLocalCopy){\n  for (  OCFile file : files) {\n    Intent service=new Intent(mFileActivity,OperationsService.class);\n    service.setAction(OperationsService.ACTION_REMOVE);\n    service.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());\n    service.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());\n    service.putExtra(OperationsService.EXTRA_REMOVE_ONLY_LOCAL,onlyLocalCopy);\n    mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);\n  }\n  mFileActivity.showLoadingDialog(mFileActivity.getString(R.string.wait_a_moment));\n}\n"}
{"nl": "Changes the brightness by the value passed as parameter", "code": "public void changeBrightness(int value){\n  this.brightness+=value;\n}\n"}
{"nl": "Creates new bitmap by scaling given one", "code": "public static Bitmap createScaledBitmap(Bitmap bitmap,float scaleFactor){\n  Matrix m=new Matrix();\n  m.setRectToRect(new RectF(0,0,bitmap.getWidth(),bitmap.getHeight()),new RectF(0,0,bitmap.getWidth() * scaleFactor,bitmap.getHeight() * scaleFactor),Matrix.ScaleToFit.CENTER);\n  return Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,true);\n}\n"}
{"nl": "Called when the user clicks the Send button", "code": "public void OMTG_ENV_005_Webview_Remote(View view){\n  Intent intent=new Intent(this,OMTG_ENV_005_WebView_Remote.class);\n  startActivity(intent);\n}\n"}
{"nl": "Checks if current device supports running Unity Ads", "code": "public static boolean isSupported(){\n  return Build.VERSION.SDK_INT >= 9;\n}\n"}
{"nl": "execute shell commands", "code": "public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg,String path){\n  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg,path);\n}\n"}
{"nl": "Test if a given string can be decoded correctly", "code": "private void assertString(String expected) throws CharacterCodingException {\n  byte[] input=expected.getBytes(StandardCharsets.UTF_8);\n  int i=0;\n  int j=0;\n  while (i < input.length) {\n    while (!feeder.isFull() && i < input.length) {\n      feeder.feed(input[i]);\n      ++i;\n    }\n    while (feeder.hasInput()) {\n      assertEquals(expected.charAt(j),feeder.nextInput());\n      ++j;\n    }\n  }\n  assertEquals(expected.length(),j);\n  assertFalse(feeder.hasInput());\n  assertFalse(feeder.isFull());\n}\n"}
{"nl": "Waits for all queued audio to be played", "code": "public boolean drain(){\n  timer.stop(\"AudioOutput\");\n  return true;\n}\n"}
{"nl": "Show error view with a button when something goes wrong and prompting the user to try again", "code": "public void showError(Drawable errorImageDrawable,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){\n  switchState(ERROR,errorImageDrawable,errorTextContent,errorButtonText,onClickListener,skipIds);\n}\n"}
{"nl": "open a bin  file", "code": "public Long2IntegerBinMap(String fileName) throws IOException, CanceledException {\n  final File file=new File(fileName);\n  if (!file.exists())   throw new IOException(\"No such file: \" + file);\n  if (!file.canRead())   throw new IOException(\"Can't read file: \" + file);\n  if (!isBinFile(fileName))   throw new IOException(\"Wrong magic number: \" + file);\n  try {\n    reader=new IntFileGetterMappedMemory(file);\n  }\n catch (  IOException ex) {\n    System.err.println(\"Opening file: \" + file);\n    reader=new IntFileGetterRandomAccess(file);\n  }\n}\n"}
{"nl": "Return the map key of the given value", "code": "public Value mapKey(Value key,Value val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n"}
{"nl": "Create a pet for player (with validation)", "code": "public static void adoptPet(Player player,int eggObjId,int petId,String name,int decorationId){\n  int eggId=player.getInventory().getItemByObjId(eggObjId).getItemId();\n  ItemTemplate template=DataManager.ITEM_DATA.getItemTemplate(eggId);\n  if (!validateAdoption(player,template,petId)) {\n    return;\n  }\n  if (!player.getInventory().decreaseByObjectId(eggObjId,1)) {\n    return;\n  }\n  int expireTime=template.getActions().getAdoptPetAction().getExpireMinutes() != 0 ? (int)((System.currentTimeMillis() / 1000) + template.getActions().getAdoptPetAction().getExpireMinutes() * 60) : 0;\n  addPet(player,petId,name,decorationId,expireTime);\n}\n"}
{"nl": "override to build a spring aware ScriptingEngines", "code": "protected Bindings createBindings(VariableScope variableScope,boolean storeScriptVariables){\n  return scriptBindingsFactory.createBindings(variableScope,storeScriptVariables);\n}\n"}
{"nl": "do we need to recompute coordinates?", "code": "private boolean mustUpdateCoordinates(){\n  boolean mustUpdate=(zScores.size() == 0);\n  if (previousTranspose != isTranspose()) {\n    mustUpdate=true;\n  }\n  if (!mustUpdate && scalingType == ChartViewer.ScalingType.ZSCORE && getChartData().getNumberOfClasses() > 0 && getChartData().getNumberOfSeries() > 0 && zScores.size() == 0) {\n    mustUpdate=true;\n  }\n  if (previousTranspose != isTranspose()) {\n    previousTranspose=isTranspose();\n    previousClusterSeries=false;\n    previousClusterClasses=false;\n  }\n  if (!mustUpdate && classNames != null) {\n    final ArrayList<String> currentClasses=new ArrayList<>(getChartData().getClassNames());\n    if (!previousClasses.equals(currentClasses)) {\n      mustUpdate=true;\n      previousClasses.clear();\n      previousClasses.addAll(currentClasses);\n    }\n  }\n  if (!mustUpdate && seriesNames != null) {\n    final ArrayList<String> currentSamples=new ArrayList<>(getChartData().getSeriesNames());\n    if (!previousSamples.equals(currentSamples)) {\n      mustUpdate=true;\n      previousSamples.clear();\n      previousSamples.addAll(currentSamples);\n    }\n  }\n  if (!mustUpdate) {\n    if (!previousClusterClasses && viewer.getClassesList().isDoClustering())     mustUpdate=true;\n  }\n  if (!mustUpdate) {\n    if (!previousClusterSeries && viewer.getSeriesList().isDoClustering())     mustUpdate=true;\n  }\n  return mustUpdate;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n"}
{"nl": "Creates a new Socket", "code": "private SocketChannel createSocket(String host,int port) throws IOException {\n  SocketChannel sockChannel=SocketChannel.open();\n  sockChannel.configureBlocking(true);\n  m_Address=new InetSocketAddress(host,port);\n  LRMIUtilities.initNewSocketProperties(sockChannel);\n  return sockChannel;\n}\n"}
{"nl": "Required for Externalizable", "code": "public ExecuteTaskSpaceOperationResult(){\n}\n"}
{"nl": "Signal the source this shared data iterator is closed", "code": "public void closeSharedIterator(){\n  _sharedObjectListLock.writeLock().lock();\n  try {\n    _numberOfConsumers--;\n    if (_closed)     return;\n    if (_sourceIteratorExhausted || _numberOfConsumers == 0) {\n      if (_logger.isLoggable(Level.FINEST))       _logger.finest(\"closed shared iterator source [\" + _identifier + \"]\");\n      triggerClosedEvent();\n      if (_sourceDataIterator != null) {\n        _sharedObjectListLock.writeLock().lock();\n        try {\n          _sourceDataIterator.close();\n        }\n  finally {\n          _sharedObjectListLock.writeLock().unlock();\n        }\n      }\n      _closed=true;\n    }\n  }\n  finally {\n    _sharedObjectListLock.writeLock().unlock();\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"chart wordCount kmer=\");\n  int kmer=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\"step=\");\n  int step=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\"mindepth=\");\n  int mindepth=np.getInt(1,Integer.MAX_VALUE);\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer alignmentViewer=(AlignmentViewer)getViewer();\n  DiversityPlotViewer viewer=new DiversityPlotViewer((Director)getDir(),alignmentViewer,kmer,step,mindepth);\n  getDir().addViewer(viewer);\n  viewer.setVisible(true);\n}\n"}
{"nl": "Clear all of the users permission nodes", "code": "@Override public void clearNodes(){\n  super.clearNodes();\n  getPlugin().getUserManager().giveDefaultIfNeeded(this,false);\n}\n"}
{"nl": "****************************** WISHLIST COMPONENT QUERIES", "code": "public WishlistComponentCursor queryWishlistsComponent(){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=false;\n  qh.Table=S.TABLE_WISHLIST_COMPONENT;\n  qh.Columns=null;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  SQLiteQueryBuilder qb=builderWishlistComponent();\n  Cursor cursor=qb.query(getWritableDatabase(),qh.Columns,qh.Selection,qh.SelectionArgs,qh.GroupBy,qh.Having,qh.OrderBy,qh.Limit);\n  return new WishlistComponentCursor(cursor);\n}\n"}
{"nl": "Check if any collision between the gestures set and the set of currently registered gestures", "code": "public Set<UserDefinedAction> areGesturesRegistered(Collection<MouseGesture> gesture){\n  Set<MouseGesture> collisions=new HashSet<>(actionMap.keySet());\n  collisions.retainAll(gesture);\n  Set<UserDefinedAction> output=new HashSet<>();\n  for (  MouseGesture collision : collisions) {\n    output.add(actionMap.get(collision));\n  }\n  return output;\n}\n"}
{"nl": "A method to be called when an attribute node has been renamed", "code": "void renamedAttrNode(Attr oldAt,Attr newAt){\n}\n"}
{"nl": "puts value for given index", "code": "@Override public void put(long index,int value){\n  index<<=2;\n  if (index < fileLength) {\n    final ByteBuffer buf=buffers[getWhichBuffer(index)];\n    int indexBuffer=getIndexInBuffer(index);\n    buf.put(indexBuffer++,(byte)(value >> 24));\n    buf.put(indexBuffer++,(byte)(value >> 16));\n    buf.put(indexBuffer++,(byte)(value >> 8));\n    buf.put(indexBuffer,(byte)(value));\n  }\n else {\n    throw new ArrayIndexOutOfBoundsException(\"\" + index);\n  }\n}\n"}
{"nl": "Read letter with specified letter id", "code": "public void readMail(Player player,int letterId){\n  Letter letter=player.getMailbox().getLetterFromMailbox(letterId);\n  if (letter == null) {\n    log.warn(\"Cannot read mail \" + player.getObjectId() + \" \"+ letterId);\n    return;\n  }\n  PacketSendUtility.sendPacket(player,new SM_MAIL_SERVICE(player,letter,letter.getTimeStamp().getTime()));\n  letter.setReadLetter();\n}\n"}
{"nl": "Its all over", "code": "public void drop(){\n  if (logger.isLoggable(Level.FINEST))   logger.finest(\"Terminating GigaSpacesFaultDetectionHandler \" + \"Thread\");\n  keepAlive=false;\n  interrupt();\n}\n"}
{"nl": "unpublish the service from registry", "code": "public static <T>void unpublishService(String url) throws RpcException {\n  try {\n    ServicePublisher.unpublishService(url);\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while unpublishing service:\" + url,e);\n  }\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  dir.getDocument().getSampleSelection().removeSampleSelectionListener(selectionListener);\n  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());\n  dir.removeViewer(this);\n  frame.dispose();\n}\n"}
{"nl": "Non-reversed sort by virtual field", "code": "public void testSortByVirtualFieldStraight() throws Exception {\n  deleteAllDocs();\n  send(\"addDocument\",\"{fields: {id: 0, boost: 1.0}}\");\n  send(\"addDocument\",\"{fields: {id: 1, boost: 2.0}}\");\n  send(\"search\",\"{query: MatchAllDocsQuery, sort: {fields: [{field: logboost}]}, retrieveFields: [id]}\");\n  assertEquals(2,getInt(\"totalHits\"));\n  assertEquals(0,getInt(\"hits[0].fields.id\"));\n  assertEquals(1,getInt(\"hits[1].fields.id\"));\n  assertEquals(0.0f,getFloat(\"hits[0].fields.sortFields.logboost\"),.0001f);\n  assertEquals(.6931f,getFloat(\"hits[1].fields.sortFields.logboost\"),.0001f);\n}\n"}
{"nl": "component resized", "code": "public void componentResized(ComponentEvent ev){\n  viewer.setSize(viewer.getSize());\n}\n"}
{"nl": "Set mark as ads", "code": "public WallEditQuery markAsAds(Boolean value){\n  return unsafeParam(\"mark_as_ads\",value);\n}\n"}
{"nl": "Unquantize a 16bits signed short over a float range", "code": "public static float unQuantize(short s,float fMin,float fRange){\n  return ((float)(((s) + 32768.0) * fRange / 65535.0 - fMin));\n}\n"}
{"nl": "SemanticConcepts are similar if they share a synset or a concept", "code": "public boolean similarTo(Object o){\n  if (o == null) {\n    return false;\n  }\n  if (!(o instanceof SemanticConcept)) {\n    return false;\n  }\n  SemanticConcept otherConcept=(SemanticConcept)o;\n  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);\n  synset_intersection.retainAll(otherConcept.synsets);\n  if (!synset_intersection.isEmpty()) {\n    return true;\n  }\n  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);\n  concept_intersection.retainAll(otherConcept.concepts);\n  return !concept_intersection.isEmpty();\n}\n"}
{"nl": "Determines if current L&F is Windows XP LookAndFeel", "code": "public static boolean isWindowsXPLookAndFeel(){\n  return UIUtils.isWindowsXPLookAndFeel();\n}\n"}
{"nl": "remove the header from a blast text (but keeping Length statement, if present)", "code": "public String removeReferenceHeaderFromBlastMatch(String blastText){\n  int index=blastText.indexOf(\"Length\");\n  if (index == -1)   index=blastText.indexOf(\"Score\");\n  if (index > 0)   return blastText.substring(index);\n else   return blastText;\n}\n"}
{"nl": "Terminates the inclusion mode", "code": "private void requestAddNodesStop(){\n  enqueue(new AddNodeMessageClass().doRequestStop());\n  logger.debug(\"ZWave controller end inclusion\");\n}\n"}
{"nl": "Set if last screen should be able to exit with alpha transition", "code": "@SuppressWarnings(\"unused\") public void enableLastSlideAlphaExitTransition(boolean enableAlphaExitTransition){\n  adapter.addEmptySlide(new LastEmptySlideFragment());\n}\n"}
{"nl": "Geographic longitude of the place a user is located, in degrees (from -180 to 180)", "code": "protected UsersGetNearbyQuery longitude(float value){\n  return unsafeParam(\"longitude\",value);\n}\n"}
{"nl": "Convenience method to create the library without initialize it", "code": "private static FingerLock createInstance(@NonNull String keyName){\n  FingerLock fragment=new FingerLock();\n  Bundle arguments=new Bundle();\n  arguments.putString(ARG_KEY_NAME,keyName);\n  fragment.setArguments(arguments);\n  return fragment;\n}\n"}
{"nl": "Returns whether an in-progress EntityAIBase should continue executing", "code": "public boolean continueExecuting(){\n  return this.mate.isEntityAlive() && isWillingToMate(mate) && this.spawnBabyDelay < 60;\n}\n"}
{"nl": "Utility function to draw a circle text centered at coordinates (x, y)", "code": "public static void drawCircledText(Graphics2D g,Font font,String text,int x,int y){\n  Graphics2D g2=(Graphics2D)g.create();\n  g2.setFont(font);\n  FontMetrics fm=g2.getFontMetrics();\n  int padding=4;\n  Rectangle2D bounds=fm.getStringBounds(text,g2);\n  double th=bounds.getHeight();\n  double tw=bounds.getWidth();\n  float radius=(float)(Math.max(th,tw) / 2f + padding);\n  Ellipse2D.Float circle=new Ellipse2D.Float(x - radius,y - radius,2 * radius + 1,2 * radius + 1);\n  g2.fill(circle);\n  g2.setColor(Color.BLACK);\n  g2.drawString(text,(int)(x - tw / 2),(y + fm.getAscent() / 2));\n  if (DEBUG) {\n    g2.setColor(Color.RED);\n    g2.drawLine(x - 50,y,x + 50,y);\n    g2.drawLine(x,y - 50,x,y + 50);\n  }\n  g2.dispose();\n}\n"}
{"nl": "Normalize the specified column with a given type of normalization", "code": "public Builder normalize(String column,Normalize type,DataAnalysis da){\n  ColumnAnalysis ca=da.getColumnAnalysis(column);\n  if (!(ca instanceof NumericalColumnAnalysis))   throw new IllegalStateException(\"Column \\\"\" + column + \"\\\" analysis is not numerical. \"+ \"Column is not numerical?\");\n  NumericalColumnAnalysis nca=(NumericalColumnAnalysis)ca;\n  double min=nca.getMinDouble();\n  double max=nca.getMaxDouble();\n  double mean=nca.getMean();\n  double sigma=nca.getSampleStdev();\nswitch (type) {\ncase MinMax:\n    return transform(new MinMaxNormalizer(column,min,max));\ncase MinMax2:\n  return transform(new MinMaxNormalizer(column,min,max,-1,1));\ncase Standardize:\nreturn transform(new StandardizeNormalizer(column,mean,sigma));\ncase SubtractMean:\nreturn transform(new SubtractMeanNormalizer(column,mean));\ncase Log2Mean:\nreturn transform(new Log2Normalizer(column,mean,min,0.5));\ncase Log2MeanExcludingMin:\nlong countMin=nca.getCountMinValue();\ndouble meanExMin;\nif (ca.getCountTotal() - countMin == 0) {\nif (ca.getCountTotal() == 0) {\nlog.warn(\"Normalizing with Log2MeanExcludingMin but 0 records present in analysis\");\n}\n else {\nlog.warn(\"Normalizing with Log2MeanExcludingMin but all records are the same value\");\n}\nmeanExMin=mean;\n}\n else {\nmeanExMin=(mean * ca.getCountTotal() - countMin * min) / (ca.getCountTotal() - countMin);\n}\nreturn transform(new Log2Normalizer(column,meanExMin,min,0.5));\ndefault :\nthrow new RuntimeException(\"Unknown/not implemented normalization type: \" + type);\n}\n}\n"}
{"nl": "Finds the mappings between classes and their respective layout files", "code": "private void findClassLayoutMappings(){\n  Iterator<MethodOrMethodContext> rmIterator=Scene.v().getReachableMethods().listener();\n  while (rmIterator.hasNext()) {\n    SootMethod sm=rmIterator.next().method();\n    if (!sm.isConcrete())     continue;\n    for (    Unit u : sm.retrieveActiveBody().getUnits())     if (u instanceof Stmt) {\n      Stmt stmt=(Stmt)u;\n      if (stmt.containsInvokeExpr()) {\n        InvokeExpr inv=stmt.getInvokeExpr();\n        if (invokesSetContentView(inv)) {\n          for (          Value val : inv.getArgs())           if (val instanceof IntConstant) {\n            IntConstant constVal=(IntConstant)val;\n            Set<Integer> layoutIDs=this.layoutClasses.get(sm.getDeclaringClass().getName());\n            if (layoutIDs == null) {\n              layoutIDs=new HashSet<Integer>();\n              this.layoutClasses.put(sm.getDeclaringClass().getName(),layoutIDs);\n            }\n            layoutIDs.add(constVal.value);\n          }\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a list of ModelEntity objects based on meta data from the database", "code": "public List<ModelEntity> induceModelFromDb(Collection<String> messages){\n  ExecutorService executor=Executors.newFixedThreadPool(datasourceInfo.getMaxWorkerPoolSize());\n  TreeSet<String> tableNames=this.getTableNames(messages);\n  Map<String,Map<String,ColumnCheckInfo>> colInfo=getColumnInfo(tableNames,true,messages,executor);\n  List<ModelEntity> newEntList=new LinkedList<ModelEntity>();\n  boolean isCaseSensitive=getIsCaseSensitive(messages);\n  for (  String tableName : new TreeSet<String>(colInfo.keySet())) {\n    Map<String,ColumnCheckInfo> colMap=colInfo.get(tableName);\n    ModelEntity newEntity=new ModelEntity(tableName,colMap,modelFieldTypeReader,isCaseSensitive);\n    newEntList.add(newEntity);\n  }\n  executor.shutdown();\n  return newEntList;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static int matchAfter(CharSequence a,CharSequence b,int aIndex,int bIndex){\n  int i=aIndex;\n  int j=bIndex;\n  int alen=a.length();\n  int blen=b.length();\n  for (; (i < alen) && (j < blen); j++) {\n    char ca=a.charAt(i);\n    char cb=b.charAt(j);\n    if (ca != cb) {\n      break;\n    }\n    i++;\n  }\n  int result=i - aIndex;\n  if ((result != 0) && (!onCharacterBoundary(a,i)) && (!onCharacterBoundary(b,j))) {\n    result--;\n  }\n  return result;\n}\n"}
{"nl": "Saves the configuration as YAML in the given file", "code": "public static boolean saveConfig(FunktionConfig config,File file) throws IOException {\n  createObjectMapper().writeValue(file,config);\n  return true;\n}\n"}
{"nl": "Adds all sub equipment id's of that list as dependency to this tag", "code": "public void addSubEquipmentIds(final Collection<Long> subEquipmentIds){\n  for (  Long subEquipmentId : subEquipmentIds) {\n    addSubEquipmentId(subEquipmentId);\n  }\n}\n"}
{"nl": "Given a set of exceptions, return the highest known classfile version format", "code": "public static int findHighestMajorVersion(Collection<Throwable> list){\n  int result=0;\n  for (  Throwable t : list) {\n    if (t instanceof InconvertibleClassError) {\n      InconvertibleClassError error=(InconvertibleClassError)t;\n      result=Math.max(result,error.getMajor());\n    }\n  }\n  return result;\n}\n"}
{"nl": "Create a ByteArray", "code": "public ByteArray(byte[] buf,int offset,int length){\n  this.buf=buf;\n  this.offset=offset;\n  this.length=length;\n}\n"}
{"nl": "Convert native data format to a stream of templates", "code": "private Stream<String> resolve(String template,Stream<File> files){\n  Stream<Json> json=files.map(null);\n  return partitionedStream(json.iterator()).map(null).map(null);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountGetInfoQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getInfo\",Info.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Gets whether the two values must always point to the same runtime object", "code": "public boolean mustAlias(Local val1,Local val2,Stmt position){\n  if (val1 == val2)   return true;\n  if (!(val1.getType() instanceof RefLikeType) || !(val2.getType() instanceof RefLikeType))   return false;\n  LocalMustAliasAnalysis lmaa=strongAliasAnalysis.getUnchecked(cfg.getMethodOf(position));\n  return lmaa.mustAlias(val1,position,val2,position);\n}\n"}
{"nl": "Relationship status", "code": "public UsersSearchQuery status(UsersSearchRelation value){\n  return unsafeParam(\"status\",value);\n}\n"}
{"nl": "Concerts a String color (#ff882465) to an int color", "code": "public static int convertToColorInt(String argb,boolean useAlpha) throws NumberFormatException {\n  if (argb.startsWith(\"#\")) {\n    argb=argb.replace(\"#\",\"\");\n  }\n  int alpha=-1, red=-1, green=-1, blue=-1;\n  if (argb.length() == 8) {\n    alpha=Integer.parseInt(argb.substring(0,2),16);\n    red=Integer.parseInt(argb.substring(2,4),16);\n    green=Integer.parseInt(argb.substring(4,6),16);\n    blue=Integer.parseInt(argb.substring(6,8),16);\n  }\n else   if (argb.length() == 6) {\n    alpha=255;\n    red=Integer.parseInt(argb.substring(0,2),16);\n    green=Integer.parseInt(argb.substring(2,4),16);\n    blue=Integer.parseInt(argb.substring(4,6),16);\n  }\n  return Color.argb(useAlpha ? alpha : -1,red,green,blue);\n}\n"}
{"nl": "Pauses audio output", "code": "public void pause(){\n}\n"}
{"nl": "Return an extended response with additional fields", "code": "protected VideoGetQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Adds this handler to this messageID, returns false if there already exists one", "code": "public synchronized boolean putRequest(int messageId,RequestResponseHandler handler){\n  if (map.containsKey(messageId)) {\n    return false;\n  }\n  map.put(messageId,handler);\n  return true;\n}\n"}
{"nl": "Calculate string similarity with tfidf weights relative to each character frequency and how many times a character appears in a given string", "code": "public static double stringSimilarity(String... strings){\n  if (strings == null)   return 0;\n  Counter<String> counter=new Counter<>();\n  Counter<String> counter2=new Counter<>();\n  for (int i=0; i < strings[0].length(); i++)   counter.incrementCount(String.valueOf(strings[0].charAt(i)),1.0);\n  for (int i=0; i < strings[1].length(); i++)   counter2.incrementCount(String.valueOf(strings[1].charAt(i)),1.0);\n  Set<String> v1=counter.keySet();\n  Set<String> v2=counter2.keySet();\n  Set<String> both=SetUtils.intersection(v1,v2);\n  double scalar=0, norm1=0, norm2=0;\n  for (  String k : both)   scalar+=counter.getCount(k) * counter2.getCount(k);\n  for (  String k : v1)   norm1+=counter.getCount(k) * counter.getCount(k);\n  for (  String k : v2)   norm2+=counter2.getCount(k) * counter2.getCount(k);\n  return scalar / Math.sqrt(norm1 * norm2);\n}\n"}
{"nl": "Check is player is invul", "code": "public boolean isInvul(){\n  return invul;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ProjectManager.getNumberOfProjects() == 1 && ((Director)ProjectManager.getProjects().get(0)).getDocument().getNumberOfSamples() == 0;\n}\n"}
{"nl": "Real Time: %0 %1", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_LOCAL_TIME(String value0,String value1){\n  return new SM_SYSTEM_MESSAGE(1390145,value0,value1);\n}\n"}
{"nl": "Add data to the List", "code": "private void initRecyclerview(){\n  mRecyclerView.setLayoutManager(new GridLayoutManager(this,3));\n  mPicAdapter=new PicAdapter();\n  for (int i=0; i < names.length; i++) {\n    mPicAdapter.add(new Item(images[i],names[i],textDescription));\n  }\n  mRecyclerView.setAdapter(mPicAdapter);\n  ItemTouchHelper.Callback callback=new CustomItHelperCallback(this);\n  ItemTouchHelper touchHelper=new ItemTouchHelper(callback);\n  touchHelper.attachToRecyclerView(mRecyclerView);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=previous;\");\n}\n"}
{"nl": "Return photo sizes in a special format", "code": "public PhotosGetByIdQueryWithExtended photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n"}
{"nl": "Creates a storable time fence which will be valid in the given absolute time frame", "code": "public static StorableTimeFence inInterval(long startTimeMillis,long stopTimeMillis){\n  return new StorableTimeFence(ABSOLUTE,null,startTimeMillis,stopTimeMillis);\n}\n"}
{"nl": "Function version", "code": "protected ExecuteStorageFunctionQuery funcV(Integer value){\n  return unsafeParam(\"func_v\",value);\n}\n"}
{"nl": "Makes a call", "code": "public static void callNumber(Context context,String phoneNumber){\n  openDialerActivityWithAction(context,phoneNumber,Intent.ACTION_CALL);\n}\n"}
{"nl": "Count of users to return", "code": "public GroupsGetInvitedUsersQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Returns true if the device is alternated", "code": "public final boolean isAlternatingDevice(){\n  return (myAlternate & CFG_DEVICE) != 0;\n}\n"}
{"nl": "show a warning notation", "code": "public static void showWarning(Object parentIgnored,String message){\n  showNotification(title,message,Mode.warning,Pos.BOTTOM_LEFT,60000);\n}\n"}
{"nl": "Delete an aircraft", "code": "public static void deleteAircraft(AirMapAircraft aircraft,AirMapCallback<Void> listener){\n  String url=String.format(pilotAircraftByIdUrl,AirMap.getUserId(),aircraft.getAircraftId());\n  AirMap.getClient().delete(url,new VoidCallback(listener));\n}\n"}
{"nl": "Sends a note to the business layer, to confirm that the equipment is not properly configured, or connected to its data source", "code": "@Override public final void confirmEquipmentStateIncorrect(){\n  confirmEquipmentStateIncorrect(null);\n}\n"}
{"nl": "scale non-uniformly", "code": "public void scale(Vector3D v){\n  scale(v.get(0),v.get(1),v.get(2));\n}\n"}
{"nl": "Cassandra hosts", "code": "public HectorCassandraClientConfigurer hosts(String hosts){\n  this.hosts=hosts;\n  return this;\n}\n"}
{"nl": "gzip decompress 2 string", "code": "public static String decompressForGzip(byte[] compressed){\n  final int BUFFER_SIZE=compressed.length;\n  GZIPInputStream gis=null;\n  ByteArrayInputStream is=null;\n  try {\n    is=new ByteArrayInputStream(compressed);\n    gis=new GZIPInputStream(is,BUFFER_SIZE);\n    StringBuilder string=new StringBuilder();\n    byte[] data=new byte[BUFFER_SIZE];\n    int bytesRead;\n    while ((bytesRead=gis.read(data)) != -1) {\n      string.append(new String(data,0,bytesRead,\"UTF-8\"));\n    }\n    return string.toString();\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n finally {\n    okhttp3.internal.Util.closeQuietly(gis);\n    okhttp3.internal.Util.closeQuietly(is);\n  }\n  return null;\n}\n"}
{"nl": "assume that initAcceptableFilterList() was called before, filterID or TemplateID", "code": "public static void addAcceptableFilterID(EntryArrivedRemoteEvent theEvent,String filterID){\n  theEvent.addAcceptableFilterID(filterID);\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  return getViewer() != null && getViewer().getPcoaTab() != null && getViewer().getPcoaTab().isFlipV();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set description=\");\n  String description=np.getWordRespectCase();\n  np.matchIgnoreCase(\";\");\n  getDoc().getSampleAttributeTable().put(getDoc().getSampleNames().get(0),SampleAttributeTable.DescriptionAttribute,description);\n  getDoc().setDirty(true);\n}\n"}
{"nl": "Merge the context sensitive tuples, and make a single insensitive tuple", "code": "private void do_pts_interval_merge(){\n  for (  HeapInsIntervalManager him : new_pts.values()) {\n    him.mergeFigures(Parameters.max_pts_budget);\n  }\n}\n"}
{"nl": "Transfer all entries from src to dest tables", "code": "private void transfer(Entry[] src,Entry[] dest){\n  for (int j=0; j < src.length; ++j) {\n    Entry e=src[j];\n    src[j]=null;\n    while (e != null) {\n      Entry next=e.next;\n      Object key=e.get();\n      if (key == null || (timeToLive > 0 && ((TimedEntry)e).isExpired(timeToLive))) {\n        e.next=null;\n        size--;\n      }\n else {\n        int i=indexFor(e.hash,dest.length);\n        e.next=dest[i];\n        dest[i]=e;\n      }\n      e=next;\n    }\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ExtractReadsViewer viewer=(ExtractReadsViewer)getParent();\n  return viewer != null && viewer.getMode().equals(ClassificationType.Taxonomy.toString());\n}\n"}
{"nl": "Set return friends", "code": "public AppsGetCatalogQuery returnFriends(Boolean value){\n  return unsafeParam(\"return_friends\",value);\n}\n"}
{"nl": "Return additional information about album privacy settings for the current user", "code": "protected VideoGetAlbumsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Is the delete button shown", "code": "public boolean isShowDeleteButton(){\n  return mShowDeleteButton;\n}\n"}
{"nl": "Verify discovery of projects with non-default locations", "code": "public void testImportSubProjectWithCustomLocation() throws IOException, ConfigurationException {\n  VirtualFile projectRoot=createProjectWithSubprojects(Collections.singletonMap(pathToGradleName(SAMPLE_PROJECT_NAME),SAMPLE_PROJECT_PATH));\n  Map<String,VirtualFile> subProjects=moduleListToMap(GradleModuleImporter.getRelatedProjects(projectRoot,getProject()));\n  assertEquals(1,subProjects.size());\n  VirtualFile moduleLocation=projectRoot.findFileByRelativePath(SAMPLE_PROJECT_PATH);\n  assert moduleLocation != null;\n  assertEquals(moduleLocation,subProjects.get(pathToGradleName(SAMPLE_PROJECT_NAME)));\n  GradleModuleImporter.importModules(this,subProjects,getProject(),null);\n  assertModuleImported(getProject(),SAMPLE_PROJECT_NAME,moduleLocation);\n}\n"}
{"nl": "When valuePosition is OutsideSlice, this allows variable line length", "code": "@Override public boolean isValueLineVariableLength(){\n  return mValueLineVariableLength;\n}\n"}
{"nl": "Set value", "code": "public StorageSetQuery value(String value){\n  return unsafeParam(\"value\",value);\n}\n"}
{"nl": "stop the view's animations", "code": "public void stopAnimations(){\n  if (animatorSet != null) {\n    isStopSearchingAnim=true;\n    animatorSet.end();\n    animatorSet.cancel();\n  }\n}\n"}
{"nl": "Initialize an AirMapTrafficProperties from JSON", "code": "public AirMapTrafficProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n"}
{"nl": "Extracts the id from a host id", "code": "public static String extractHostId(String hostId){\n  AssertUtil.assertNotNull(hostId,\"hostId\");\n  int idx=hostId.indexOf(HOST_ID_TENANT_SEPARATOR);\n  String id=hostId;\n  if (idx != -1) {\n    id=hostId.substring(idx + HOST_ID_TENANT_SEPARATOR.length());\n  }\n  return id;\n}\n"}
{"nl": "Check all in use equipment conditions", "code": "private boolean useEquipmentConditionsCheck(){\n  Conditions useEquipConditions=skillTemplate.getUseEquipmentconditions();\n  return useEquipConditions != null ? useEquipConditions.validate(this) : true;\n}\n"}
{"nl": "Checks if Generic Type of field is annoted with PageObject Annotation", "code": "public static boolean isGenericTypeAnnotedWithPageObject(Field field){\n  Class<?> genericType=PageObjectProviderHelper.getGenericType(field);\n  return genericType != null && genericType.isAnnotationPresent(PageObject.class);\n}\n"}
{"nl": "does another group contain this group", "code": "public boolean contains(ScoutCandidateGroup candidate){\n  return mRect.contains(candidate.mRect);\n}\n"}
{"nl": "erase the table", "code": "public void clear(){\n  id2row.clear();\n  clearSelection();\n  while (model.getRowCount() > 0)   model.removeRow(model.getRowCount() - 1);\n  model.getDataVector().clear();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsEditPlaceQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.editPlace\",EditPlaceResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "Allows a ViewGroupHandler to update the mouse cursor", "code": "public boolean updateCursor(@NotNull ScreenView screenView,@AndroidCoordinate int x,@AndroidCoordinate int y){\n  return false;\n}\n"}
{"nl": "MONSTER DAMAGE QUERIES", "code": "public MonsterDamageCursor queryMonsterDamage(long id){\n  return mHelper.queryMonsterDamage(id);\n}\n"}
{"nl": "Start space components", "code": "private void startComponents(boolean spaceIsPrimary){\n  for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {\n    ISpaceComponentsHandler handler=iterator.next();\n    handler.startComponents(spaceIsPrimary);\n  }\n}\n"}
{"nl": "Remove a specific listener from a specific class listener", "code": "public void removeClassLoaderStateListener(Long classLoaderKey,IClassLoaderCacheStateListener listener){\n  ClassLoaderContext classLoaderContext=_classLoaders.get(classLoaderKey);\n  if (classLoaderContext == null)   return;\n  classLoaderContext.removeListener(listener);\n}\n"}
{"nl": "fetch the options information from conf and metadata, set to the field \"options\"", "code": "protected ContentCreateOptions newContentCreateOptions(DocumentMetadata meta){\n  ContentCreateOptions opt=(ContentCreateOptions)options.clone();\n  if (meta != null) {\n    if (opt.getQuality() == 0) {\n      opt.setQuality(meta.quality);\n    }\n    HashSet<String> colSet=new HashSet<String>(meta.collectionsList);\n    if (opt.getCollections() != null) {\n      for (      String s : opt.getCollections()) {\n        colSet.add(s);\n      }\n    }\n    opt.setCollections(colSet.toArray(new String[colSet.size()]));\n    HashSet<ContentPermission> pSet=new HashSet<ContentPermission>(meta.permissionsList);\n    if (opt.getPermissions() != null) {\n      for (      ContentPermission p : opt.getPermissions()) {\n        pSet.add(p);\n      }\n    }\n    opt.setPermissions(pSet.toArray(new ContentPermission[pSet.size()]));\n    opt.setMetadata(meta.meta);\n  }\n  return opt;\n}\n"}
{"nl": "Clones this point", "code": "@Override public Point3D clone() throws CloneNotSupportedException {\n  return new Point3D(this);\n}\n"}
{"nl": "Convert an BufferedImage to a matrix", "code": "public INDArray asMatrix(BufferedImage image){\n  if (channels == 3) {\n    return toBgr(image);\n  }\n else {\n    image=scalingIfNeed(image,true);\n    int w=image.getWidth();\n    int h=image.getHeight();\n    INDArray ret=Nd4j.create(h,w);\n    for (int i=0; i < h; i++) {\n      for (int j=0; j < w; j++) {\n        ret.putScalar(new int[]{i,j},image.getRGB(i,j));\n      }\n    }\n    return ret;\n  }\n}\n"}
{"nl": "build a array of rectangles representing the gaps used for debugging purposes", "code": "public Rectangle[] computeGaps(){\n  ArrayList<Rectangle> ret=new ArrayList<>();\n  Rectangle gap=new Rectangle();\n  for (int i=0; i < mRectList.length; i++) {\n    Rectangle rectangleA=mRectList[i];\n    for (int j=i + 1; j < mRectList.length; j++) {\n      Rectangle rectangleB=mRectList[j];\n      boolean viable=calculateGap(rectangleA,rectangleB,gap);\n      if (viable) {\n        for (int k=0; k < mRectList.length; k++) {\n          if (k != j && k != i) {\n            if (gap.intersects(mRectList[k])) {\n              viable=false;\n              break;\n            }\n          }\n        }\n      }\n      if (viable) {\n        ret.add(new Rectangle(gap));\n      }\n    }\n  }\n  return ret.toArray(new Rectangle[ret.size()]);\n}\n"}
{"nl": "Determine if the schema has a column with the specified name", "code": "public boolean hasColumn(String columnName){\n  Integer idx=columnNamesIndex.get(columnName);\n  return idx != null;\n}\n"}
{"nl": "error log", "code": "public static void e(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.e(tag,buildMsg(msg));\n  }\n}\n"}
{"nl": "inserts a split into a tree", "code": "private void processSplit(Node v,NodeArray node2taxa,int outGroupTaxonId,Split split,PhyloTree tree){\n  BitSet partB=split.getPartNotContainingTaxon(outGroupTaxonId);\n  double weight=split.getWeight();\n  boolean done=false;\n  while (!done) {\n    List edgesToPush=new LinkedList();\n    for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {\n      Node w=f.getTarget();\n      BitSet nodeSet=(BitSet)node2taxa.get(w);\n      if (nodeSet.intersects(partB))       edgesToPush.add(f);\n    }\n    if (edgesToPush.size() == 1) {\n      Edge f=(Edge)edgesToPush.get(0);\n      v=f.getTarget();\n    }\n else     if (edgesToPush.size() > 1) {\n      Node u=tree.newNode();\n      node2taxa.set(u,partB);\n      Edge h=tree.newEdge(v,u);\n      tree.setWeight(h,weight);\n      for (      Object anEdgesToPush1 : edgesToPush) {\n        Edge f=(Edge)anEdgesToPush1;\n        Node w=f.getTarget();\n        Edge g=tree.newEdge(u,w);\n        tree.setWeight(g,tree.getWeight(f));\n      }\n      for (      Object anEdgesToPush : edgesToPush) {\n        Edge f=(Edge)anEdgesToPush;\n        tree.deleteEdge(f);\n      }\n      done=true;\n    }\n else {\n      throw new RuntimeException(\"0 taxa in splitsToTreeRec\");\n    }\n  }\n}\n"}
{"nl": "Create an <code>unsigned byte</code>", "code": "private UByte(String value) throws NumberFormatException {\n  this.value=rangeCheck(Short.parseShort(value));\n}\n"}
{"nl": "Constructs credential provider using username and password", "code": "public GoogleAutoCredentialProvider(OkHttpClient httpClient,String username,String password) throws LoginFailedException, RemoteServerException {\n  this.gpsoauth=new Gpsoauth(httpClient);\n  this.username=username;\n  this.tokenInfo=login(username,password);\n  this.time=new SystemTimeImpl();\n}\n"}
{"nl": "Quest failed: %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_GIVEUP(String value0){\n  return new SM_SYSTEM_MESSAGE(1300618,value0);\n}\n"}
{"nl": "synchronize chart to reflect latest user selection in taxon chart", "code": "public void sync() throws CanceledException {\n  if (!inSync) {\n    inSync=true;\n    setChartTitle(cName + \" rarefaction plot for \" + doc.getTitle());\n    for (    String name : doc.getSampleNames()) {\n      ((Plot2DDrawer)getChartDrawer()).setShowLines(name,true);\n      ((Plot2DDrawer)getChartDrawer()).setShowDots(name,true);\n    }\n    Map<String,Collection<Pair<Number,Number>>> name2counts=computeCounts(doc,1,parentViewer,doc.getProgressListener());\n    IPlot2DData chartData=(IPlot2DData)getChartData();\n    chartData.clear();\n    chartData.setDataSetName(doc.getTitle());\n    for (    String name : doc.getSampleNames())     chartData.setDataForSeries(name,name2counts.get(name));\n    getChartData().setSeriesLabel(\"Number of reads sampled from leaves\");\n    getChartData().setCountsLabel(\"Number of leaves in \" + cName + \" tree\");\n    super.sync();\n    inSync=false;\n  }\n}\n"}
{"nl": "Create a new builder", "code": "public static ResourcesPoet create(){\n  init();\n  Document document=sDocumentBuilder.newDocument();\n  Element resources=document.createElement(ELEMENT_RESOURCES);\n  document.appendChild(resources);\n  return create(document,resources);\n}\n"}
{"nl": "NON-DOM method for debugging convenience", "code": "@Override public String toString(){\n  return getName() + \"=\" + \"\\\"\"+ getValue()+ \"\\\"\";\n}\n"}
{"nl": "The name of the entity role type in an entity-role relation representing an OWL data property", "code": "default String entityRole(String resourceId){\n  return \"has-\" + resourceId + \"-owner\";\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetCatalogQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.getCatalog\",GetCatalogResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Checkin any local changes to given resources", "code": "public String checkin(IResource[] resources,final String comment,boolean keepLocks,final int depth,IProgressMonitor progress) throws TeamException {\n  CheckinResourcesCommand command=new CheckinResourcesCommand(getSVNWorkspaceRoot(),resources,depth,comment,keepLocks);\n  command.run(progress);\n  return command.getPostCommitError();\n}\n"}
{"nl": "Clear the registry", "code": "public static void clearRegistry(){\n  registry.clear();\n}\n"}
{"nl": "You Whisper to %1: %0", "code": "public static SM_SYSTEM_MESSAGE STR_CMD_WHISHPER_INPUT(String value1,String value0){\n  return new SM_SYSTEM_MESSAGE(1400008,value1,value0);\n}\n"}
{"nl": "given an object scan the list, find it and remove it, returns true if found", "code": "public boolean removeByObject(T obj){\n  lock.lock();\n  try {\n    return removeByObject_impl(obj);\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "Adds multifield entry, equivalent of: | tab_name | multifield#index#itemType | multifieldLabel#itemLabel | value |", "code": "public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){\n  String type=String.format(\"multifield#%s#%s\",index,itemType);\n  String label=String.format(\"%s#%s\",multifieldLabel,itemLabel);\n  config.add(new ConfigurationEntry(currentTab,type,label,value));\n  return this;\n}\n"}
{"nl": "Returns a resize policy not allowing any resizing", "code": "@NotNull public static ResizePolicy none(){\n  return ourNone;\n}\n"}
{"nl": "Creates a new instance of the MethodSourceSinkDefinition class", "code": "public SourceSinkDefinition(SootMethodAndClass am,Set<AccessPathTuple> baseObjects,Set<AccessPathTuple>[] parameters,Set<AccessPathTuple> returnValues){\n  this.method=am;\n  this.baseObjects=baseObjects == null || baseObjects.isEmpty() ? null : baseObjects;\n  this.parameters=parameters;\n  this.returnValues=returnValues == null || returnValues.isEmpty() ? null : returnValues;\n}\n"}
{"nl": "Set ids", "code": "public AdsGetSuggestionsQueryWithRegions ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n"}
{"nl": "Initialize this helper class with the provided builder", "code": "private void initialize(Builder builder){\n  if (builder.prefs != null && !builder.flavors.isEmpty()) {\n    mPreferences=builder.prefs;\n    mFlavors=new ArrayList<>(builder.flavors);\n    if (builder.defaultFlavor != null) {\n      mDefaultFlavorIndex=mFlavors.indexOf(builder.defaultFlavor);\n    }\n    mSugarCone=new SugarCone();\n    mInitialized=true;\n  }\n else {\n    throw new IllegalStateException(\"SharedPreferences and at least one flavor must be set\");\n  }\n}\n"}
{"nl": "Creates a new instance of CASCDistanceCalculator", "code": "public CASCDistanceCalculator(String sPathToCasc) throws IOException {\n  PathToCasc=sPathToCasc;\n  Process p=Runtime.getRuntime().exec(PathToCasc);\n  try {\n    p.waitFor();\n  }\n catch (  InterruptedException iee) {\n    return;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketReorderAlbumsQuery(VkApiClient client,UserActor actor,int ownerId,int albumId){\n  super(client,\"market.reorderAlbums\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  albumId(albumId);\n}\n"}
{"nl": "creates a copy of all chart drawers", "code": "public static Map<String,IChartDrawer> createChartDrawers(){\nsynchronized (allSupportedChartDrawers) {\n    final boolean fillAllSupportedDrawers=(allSupportedChartDrawers.size() == 0);\n    final Map<String,IChartDrawer> name2DrawerInstance=new HashMap<>();\n    for (    Object object : PluginClassLoader.getInstances(paths,IChartDrawer.class)) {\n      if (object instanceof IChartDrawer) {\n        final IChartDrawer drawer=(IChartDrawer)object;\n        if (!(drawer instanceof MultiChartDrawer) && drawer.isEnabled()) {\n          name2DrawerInstance.put(drawer.getChartDrawerName(),drawer);\n          if (fillAllSupportedDrawers && !(object instanceof Plot2DDrawer))           allSupportedChartDrawers.add(drawer.getChartDrawerName());\n        }\n      }\n    }\n    return name2DrawerInstance;\n  }\n}\n"}
{"nl": "Long pulling config", "code": "@RequestMapping(value=ClientUris.CONFIG_PULLING,method=RequestMethod.POST) public void pulling(@RequestParam(\"configs\") String configs,HttpServletRequest req,HttpServletResponse resp){\n  ClientSession client=ClientContext.get();\n  assert client != null;\n  if (Strings.isNullOrEmpty(configs)) {\n    return;\n  }\n  Map<String,String> pullingConfigs=JsonUtil.INSTANCE.fromJson(configs,JsonUtil.MAP_STR_STR_TYPE);\n  pullingSupport.pulling(client,pullingConfigs,req,resp);\n}\n"}
{"nl": "obj --> json", "code": "public String toJson() throws JsonGenerationException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.writeValueAsString(this);\n}\n"}
{"nl": "Compare only itemIDs and damage value, taking into account that a damage value of -1 matches any", "code": "public static boolean wildcardSimilar(ItemStack template,ItemStack stranger){\n  if (template == null || stranger == null) {\n    return template == stranger;\n  }\n  if (template.getItemDamage() == WILDCARD_DAMAGE) {\n    return template.getItem() == stranger.getItem();\n  }\n  return similar(template,stranger);\n}\n"}
{"nl": "Loads a file using the standard Java IO classes", "code": "public static byte[] loadImageFile(File imageLoc) throws IOException {\n  FileInputStream fis=new FileInputStream(imageLoc);\n  byte[] read=new byte[fis.available()];\n  fis.read(read);\n  fis.close();\n  return read;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"move attribute=\");\n  Set<String> attributes=new HashSet<>();\n  while (!np.peekMatchIgnoreCase(\"direction=\")) {\n    String attribute=np.getWordRespectCase();\n    attributes.add(attribute);\n  }\n  np.matchIgnoreCase(\"direction=\");\n  String direction=np.getWordMatchesIgnoringCase(\"left right\");\n  np.matchIgnoreCase(\";\");\n  if (attributes.size() > 0) {\n    final SamplesViewer viewer=((SamplesViewer)getViewer());\n    viewer.getSamplesTable().moveColumns(direction.equalsIgnoreCase(\"left\"),attributes.toArray(new String[attributes.size()]));\n  }\n}\n"}
{"nl": "Set hash", "code": "public PhotosSaveMessagesPhotoQuery hash(String value){\n  return unsafeParam(\"hash\",value);\n}\n"}
{"nl": "Notifies the user about a failed synchronization through the status notification bar", "code": "private void notifyFailedSynchronization(){\n  NotificationCompat.Builder notificationBuilder=createNotificationBuilder();\n  boolean needsToUpdateCredentials=(mLastFailedResult != null && ResultCode.UNAUTHORIZED.equals(mLastFailedResult.getCode()));\n  if (needsToUpdateCredentials) {\n    Intent updateAccountCredentials=new Intent(getContext(),AuthenticatorActivity.class);\n    updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACCOUNT,getAccount());\n    updateAccountCredentials.putExtra(AuthenticatorActivity.EXTRA_ACTION,AuthenticatorActivity.ACTION_UPDATE_EXPIRED_TOKEN);\n    updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    updateAccountCredentials.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);\n    updateAccountCredentials.addFlags(Intent.FLAG_FROM_BACKGROUND);\n    notificationBuilder.setTicker(i18n(R.string.sync_fail_ticker_unauthorized)).setContentTitle(i18n(R.string.sync_fail_ticker_unauthorized)).setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),updateAccountCredentials,PendingIntent.FLAG_ONE_SHOT)).setContentText(i18n(R.string.sync_fail_content_unauthorized,getAccount().name));\n  }\n else {\n    notificationBuilder.setTicker(i18n(R.string.sync_fail_ticker)).setContentTitle(i18n(R.string.sync_fail_ticker)).setContentText(i18n(R.string.sync_fail_content,getAccount().name));\n  }\n  showNotification(R.string.sync_fail_ticker,notificationBuilder);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetBudgetQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getBudget\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n"}
{"nl": "Constructs new <tt>SM_NICKNAME_CHECK_RESPONSE</tt> packet", "code": "public SM_NICKNAME_CHECK_RESPONSE(int value){\n  this.value=value;\n}\n"}
{"nl": "It opens the counter binary file for writing", "code": "private void openCounterDataOutputStream() throws DataFallbackException {\n  if (dOutput == null) {\n    if (LOG.isDebugEnabled())     LOG.debug(\"openDataOutputStream() ; Opening the writer for the \" + counterFile.getName() + \" file\");\n    try {\n      dOutput=new BufferedWriter(new FileWriter(counterFile));\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n  }\n}\n"}
{"nl": "Pretty printing of try-with-resources", "code": "public void toString(StringBuffer sb){\n  sb.append(indent() + \"try (\");\n  for (  ResourceDeclaration resource : getResourceList()) {\n    sb.append(resource.toString());\n  }\n  sb.append(\") \");\n  getBlock().toString(sb);\n  for (  CatchClause cc : getCatchClauseList()) {\n    sb.append(\" \");\n    cc.toString(sb);\n  }\n  if (hasFinally()) {\n    sb.append(\" finally \");\n    getFinally().toString(sb);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetFollowersQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"users.getFollowers\",GetFollowersFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "Creates a new instance of WelcomeOptions", "code": "private WelcomeOptions(){\n}\n"}
{"nl": "Find first instance", "code": "public boolean findFirst(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,false) > 0;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountLookupContactsQuery(VkApiClient client,UserActor actor,AccountLookupContactsService service){\n  super(client,\"account.lookupContacts\",LookupResult.class);\n  accessToken(actor.getAccessToken());\n  service(service);\n}\n"}
{"nl": "TODO: Javadoc", "code": "private static boolean isDigit(char ch){\n  return '0' <= ch && ch <= '9';\n}\n"}
{"nl": "Set a specific Pokeball to use", "code": "public AsyncCatchOptions usePokeball(Pokeball pokeBall){\n  this.pokeBall=pokeBall;\n  return this;\n}\n"}
{"nl": "Close this topic - close all producers and subscriptions associated with this topic", "code": "@Override public CompletableFuture<Void> close(){\n  CompletableFuture<Void> closeFuture=new CompletableFuture<>();\n  lock.writeLock().lock();\n  try {\n    if (!isFenced) {\n      isFenced=true;\n    }\n else {\n      log.warn(\"[{}] Topic is already being closed or deleted\",topic);\n      closeFuture.completeExceptionally(new TopicFencedException(\"Topic is already fenced\"));\n      return closeFuture;\n    }\n  }\n  finally {\n    lock.writeLock().unlock();\n  }\n  List<CompletableFuture<Void>> futures=Lists.newArrayList();\n  replicators.forEach(null);\n  producers.forEach(null);\n  subscriptions.forEach(null);\n  FutureUtil.waitForAll(futures).thenRun(null).exceptionally(null);\n  return closeFuture;\n}\n"}
{"nl": "Find a faces within a local image", "code": "@NotNull public List<Face> findEmotionFaces(@NotNull InputStream image){\n  return faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,image).withResult();\n}\n"}
{"nl": "Pauses audio output", "code": "public void pause(){\n}\n"}
{"nl": "Create an instance of the Authentication-Plugin", "code": "public static final Authentication create(String authPluginClassName,Map<String,String> authParams) throws UnsupportedAuthenticationException {\n  try {\n    if (isNotBlank(authPluginClassName)) {\n      Class<?> authClass=Class.forName(authPluginClassName);\n      Authentication auth=(Authentication)authClass.newInstance();\n      auth.configure(authParams);\n      return auth;\n    }\n else {\n      return new AuthenticationDisabled();\n    }\n  }\n catch (  Throwable t) {\n    throw new UnsupportedAuthenticationException(t);\n  }\n}\n"}
{"nl": "Will activate toggle skill and start checking task", "code": "private void activateToggleSkill(){\n  PacketSendUtility.sendPacket((Player)effector,new SM_SKILL_ACTIVATION(getSkillId(),true));\n}\n"}
{"nl": "Initialize a reasonable set of default values (based on the Nexus 5)", "code": "private void initDefaultValues(){\n  myName.set(getUniqueId(null));\n  myDiagonalScreenSize.set(5.0);\n  myScreenResolutionWidth.set(1080);\n  myScreenResolutionHeight.set(1920);\n  myRamStorage.set(new Storage(2,Storage.Unit.GiB));\n  myHasHardwareButtons.set(false);\n  myHasHardwareKeyboard.set(false);\n  myNavigation.setValue(Navigation.NONAV);\n  mySupportsPortrait.set(true);\n  mySupportsLandscape.set(true);\n  myHasFrontCamera.set(true);\n  myHasBackCamera.set(true);\n  myHasAccelerometer.set(true);\n  myHasGyroscope.set(true);\n  myHasGps.set(true);\n  myHasProximitySensor.set(true);\n}\n"}
{"nl": "Deletes the public and private key from the system given the public key", "code": "public void deleteKey(String publicKey){\n  this.api.deleteApiByPublicKey(publicKey);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  if (getParent() instanceof OverlapGraphViewer) {\n    final OverlapGraphViewer overlapGraphViewer=(OverlapGraphViewer)getParent();\n    final GraphView graphView=overlapGraphViewer.getGraphView();\n    final NodeMap<String> node2ReadNameMap=overlapGraphViewer.getNode2ReadNameMap();\n    final Set<String> previousSelection=ProjectManager.getPreviouslySelectedNodeLabels();\n    if (previousSelection.size() > 0) {\n      Graph graph=graphView.getGraph();\n      NodeSet toSelect=new NodeSet(graph);\n      for (Node v=graph.getFirstNode(); v != null; v=graph.getNextNode(v)) {\n        String label=node2ReadNameMap.get(v);\n        if (label != null && previousSelection.contains(label))         toSelect.add(v);\n      }\n      if (toSelect.size() > 0) {\n        graphView.setSelected(toSelect,true);\n        graphView.repaint();\n      }\n    }\n  }\n}\n"}
{"nl": "Removes the information for this node from the table, either if it's a target node or a via node", "code": "public synchronized void removeAllFor(String nodeId){\n  RoutesMap rl=forwardTable.remove(nodeId);\n  if (rl == null) {\n    Set<String> targets=inverseTable.remove(nodeId);\n    if (targets != null) {\n      for (      String to : targets) {\n        RoutesMap trl=forwardTable.get(to);\n        if (trl != null) {\n          trl.remove(nodeId);\n          if (trl.size() == 0) {\n            forwardTable.remove(to);\n          }\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "upload file to storage server (by file name)", "code": "protected String[] upload_file(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final byte cmd=ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE;\n  return this.upload_file(cmd,group_name,local_filename,file_ext_name,meta_list);\n}\n"}
{"nl": "Limit the results of the query to certain categories", "code": "public void addCategoryLimitations(boolean include,String... categoryVelocityVarNames){\n  query.append(\" \" + (include ? \"+\" : \"-\") + \"(\");\n  for (  String categoryVelocityVarName : categoryVelocityVarNames) {\n    query.append(\"categories:\" + escapeValue(categoryVelocityVarName) + \" \");\n  }\n  query.append(\")\");\n}\n"}
{"nl": "do we use subject for locking itself ?", "code": "public boolean isPerLogicalSubjectLockObject(boolean isEvictable){\n  return !isEvictable;\n}\n"}
{"nl": "Constructs new <tt>SM_RECONNECT_KEY</tt> packet", "code": "public SM_RECONNECT_KEY(int key){\n  this.key=key;\n}\n"}
{"nl": "Public methods", "code": "public void removeBites(){\n  setImageDrawable(drawableChomp);\n  bitesTakenMap=new HashMap<>();\n  for (  int direction : BITE_DIRECTIONS_LIST) {\n    bitesTakenMap.put(direction,0);\n  }\n  hasAllBitesTaken=false;\n  numBitesForOneDirection=(imageCircleRadius * 2) / biteRadius;\n}\n"}
{"nl": "Return information about users who uploaded audio files", "code": "public AudioGetQuery needUser(Boolean value){\n  return unsafeParam(\"need_user\",value);\n}\n"}
{"nl": "Add SlideFragment to IntroScreen", "code": "@SuppressWarnings(\"unused\") public void addSlide(SlideFragment slideFragment){\n  adapter.addItem(slideFragment);\n}\n"}
{"nl": "delete the auth-token by the query", "code": "public static void delete(W q){\n  Helper.delete(q,AuthToken.class);\n}\n"}
{"nl": "Thread safe hash map impl", "code": "public static <K,T,V>MultiDimensionalMap<K,T,V> newHashBackedMap(){\n  return new MultiDimensionalMap<>(new HashMap<Pair<K,T>,V>());\n}\n"}
{"nl": "Determines the height of this view", "code": "private int measureHeight(int measureSpec){\n  float result;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if (specMode == MeasureSpec.EXACTLY) {\n    result=specSize;\n  }\n else {\n    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return (int)((float)Math.ceil(result));\n}\n"}
{"nl": "Creates a scalar predicate using the specified expected value", "code": "public NotRegexSpacePredicate(String pattern){\n  super(pattern,null);\n  if (pattern == null)   throw new IllegalArgumentException(\"Argument 'pattern' cannot be null.\");\n}\n"}
{"nl": "Map port binding to ExposedPorts and PortBinding ExposedPorts are only used by the API adapter, as the docker CLI will add that itself", "code": "private void addPortBindings(CommandInput input,PortBinding[] portBindings){\n  Map<String,Map<String,String>> exposedPortsMap=new HashMap<>();\n  input.withProperty(DOCKER_CONTAINER_EXPOSED_PORTS_PROP_NAME,exposedPortsMap);\n  Map<String,Object> hostConfig=getOrAddMap(input,DOCKER_CONTAINER_HOST_CONFIG_PROP_NAME);\n  Map<String,List<Map<String,String>>> portBindingsMap=new HashMap<>();\n  hostConfig.put(DOCKER_CONTAINER_PORT_BINDINGS_PROP_NAME,portBindingsMap);\n  for (  PortBinding portBinding : portBindings) {\n    exposedPortsMap.put(portBinding.containerPort,Collections.emptyMap());\n    DockerPortMapping mapping=DockerPortMapping.fromString(portBinding.toString());\n    Map<String,List<Map<String,String>>> portDetails=mapping.toMap();\n    portBindingsMap.putAll(portDetails);\n  }\n}\n"}
{"nl": "Extends the taint propagation path with the given abstraction", "code": "public SourceContextAndPath extendPath(Abstraction abs,boolean trackPath){\n  if (abs == null)   return this;\n  if (abs.getCurrentStmt() == null && abs.getCorrespondingCallSite() == null)   return this;\n  if (abs.getCorrespondingCallSite() == null && !trackPath)   return this;\n  if (this.path != null)   for (  Abstraction a : this.path)   if (a == abs)   return null;\n  SourceContextAndPath scap=clone();\n  if (trackPath && abs.getCurrentStmt() != null) {\n    if (scap.path == null)     scap.path=new ArrayList<Abstraction>();\n    scap.path.add(0,abs);\n  }\n  if (abs.getCorrespondingCallSite() != null && abs.getCorrespondingCallSite() != abs.getCurrentStmt()) {\n    if (scap.callStack == null)     scap.callStack=new ArrayList<Stmt>();\n    scap.callStack.add(0,abs.getCorrespondingCallSite());\n  }\n  return scap;\n}\n"}
{"nl": "Set whether or not the disabled steps will have a Material Design look", "code": "public Builder materialDesignInDisabledSteps(boolean materialDesignInDisabledSteps){\n  this.materialDesignInDisabledSteps=materialDesignInDisabledSteps;\n  return this;\n}\n"}
{"nl": "find the nearest widget in a list of widgets only considering the horizontal location", "code": "private static ConstraintWidget nearestHorizontal(ConstraintWidget nextTo,ArrayList<ConstraintWidget> list){\n  int min=Integer.MAX_VALUE;\n  ConstraintWidget ret=null;\n  int nextToLeft=nextTo.getX();\n  int nextToRight=nextToLeft + nextTo.getWidth();\n  for (  ConstraintWidget widget : list) {\n    if (widget == nextTo) {\n      continue;\n    }\n    int left=widget.getX();\n    int right=left + widget.getWidth();\n    int dist=Math.abs(left - nextToLeft);\n    dist=Math.min(dist,Math.abs(left - nextToRight));\n    dist=Math.min(dist,Math.abs(right - nextToRight));\n    dist=Math.min(dist,Math.abs(right - nextToLeft));\n    if (dist < min) {\n      min=dist;\n      ret=widget;\n    }\n  }\n  return ret;\n}\n"}
{"nl": "Set order", "code": "public WidgetsGetPagesQuery order(String value){\n  return unsafeParam(\"order\",value);\n}\n"}
{"nl": "Returns when request succeeds", "code": "public void onSuccess(int statusCode,Header[] headers,JSONArray response){\n}\n"}
{"nl": "Bind disappear event", "code": "@Override public void bindDisappearEvent(WXComponent component){\n  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getRef());\n  if (appearMap == null) {\n    appearMap=new ConcurrentHashMap<>();\n  }\n  AppearData appearData=appearMap.get(component.getRef());\n  if (appearData == null) {\n    appearData=new AppearData();\n  }\n  appearData.mAppearComponent=component;\n  appearData.hasDisappear=true;\n  appearMap.put(component.getRef(),appearData);\n  mAppearMap.put(getRef(),appearMap);\n}\n"}
{"nl": "Check if item can be moved to storage by player", "code": "public static boolean isItemRestrictedTo(Player player,Item item,byte storage){\n  StorageType type=StorageType.getStorageTypeById(storage);\nswitch (type) {\ncase REGULAR_WAREHOUSE:\n    if (!item.isStorableinWarehouse(player)) {\n      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300418));\n      return true;\n    }\n  break;\ncase ACCOUNT_WAREHOUSE:\nif (!item.isStorableinAccWarehouse(player)) {\n  PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1400356));\n  return true;\n}\nbreak;\ncase LEGION_WAREHOUSE:\nif (!item.isStorableinLegWarehouse(player) || !LegionConfig.LEGION_WAREHOUSE) {\nPacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1400355));\nreturn true;\n}\n else if (!player.isLegionMember() || !LegionService.getInstance().getLegionMember(player.getObjectId()).hasRights(LegionPermissionsMask.WH_DEPOSIT)) {\nPacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300322));\nreturn true;\n}\nbreak;\ndefault :\nbreak;\n}\nreturn false;\n}\n"}
{"nl": "convert Bitmap to Drawable", "code": "public static Drawable toDrawable(Bitmap bitmap){\n  return bitmap == null ? null : new BitmapDrawable(null,bitmap);\n}\n"}
{"nl": "get the group name of the access name", "code": "public String groupName(){\n  int i=name.indexOf(\".\");\n  if (i > 0) {\n    int j=name.indexOf(\".\",i + 1);\n    if (j > 0) {\n      return name.substring(0,j);\n    }\n else {\n      return name.substring(0,i);\n    }\n  }\n  return \"access\";\n}\n"}
{"nl": "add the value to this Math_Vector", "code": "public Math_Vector add(double x,double y){\n  this.x+=x;\n  this.y+=y;\n  return this;\n}\n"}
{"nl": "Set widget api id", "code": "public WidgetsGetPagesQuery widgetApiId(Integer value){\n  return unsafeParam(\"widget_api_id\",value);\n}\n"}
{"nl": "Record that the given exception was encountered during rendering", "code": "public void recordThrowable(@NotNull Throwable throwable){\n  if (myTraces == null) {\n    myTraces=new ArrayList<Throwable>();\n  }\n  myTraces.add(throwable);\n}\n"}
{"nl": "Constructs a set of patterns", "code": "public Patterns(String[] includes,String[] excludes){\n  this.origIncludes=includes;\n  this.origExcludes=excludes;\n}\n"}
{"nl": "Dumps this LPCResult to standard out", "code": "public void dump(){\n  dump(new OutputStreamWriter(System.out));\n}\n"}
{"nl": "clears the list of recent files", "code": "public static void clearRecentFiles(){\n  String str=ProgramProperties.get(RECENTFILES,\"\");\n  if (str.length() != 0) {\n    ProgramProperties.put(RECENTFILES,\"\");\n    notifyListChange(RECENTFILES);\n  }\n}\n"}
{"nl": "create LHS expressions", "code": "protected soot.Value createLHS(polyglot.ast.Expr expr){\n  if (expr instanceof polyglot.ast.Local) {\n    return getLocal((polyglot.ast.Local)expr);\n  }\n else   if (expr instanceof polyglot.ast.ArrayAccess) {\n    return getArrayRefLocalLeft((polyglot.ast.ArrayAccess)expr);\n  }\n else   if (expr instanceof polyglot.ast.Field) {\n    return getFieldLocalLeft((polyglot.ast.Field)expr);\n  }\n else {\n    throw new RuntimeException(\"Unhandled LHS\");\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardGetTopicsQueryWithExtended(VkApiClient client,int groupId){\n  super(client,\"board.getTopics\",GetTopicsExtendedResponse.class);\n  groupId(groupId);\n  extended(true);\n}\n"}
{"nl": "Directly restrict a flag for an ID, this will take priority over the default permission  and will override the previous direct permission", "code": "public void deny(PermissionFlag flag,Identity<?> identity,Message message){\n  strictPermission.computeIfAbsent(flag,null).put(identity,new Status(message));\n}\n"}
{"nl": "Constructs a feeder", "code": "public DefaultJsonFeeder(Charset charset){\n  this(charset,1024);\n}\n"}
{"nl": "Updates the city wheel", "code": "private void updateCities(WheelView city,List<VChartPeriod.PeriodsBean> list){\n  periodAdapter=new PeriodAdapter(getActivity(),list);\n  city.setViewAdapter(periodAdapter);\n  city.setCurrentItem(0);\n}\n"}
{"nl": "SKILL TREE QUERIES", "code": "public SkillTreeCursor querySkillTrees(){\n  return mHelper.querySkillTrees();\n}\n"}
{"nl": "Creates the default cumulative probability density test expected values", "code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0,0,0,0.00948199951485,0.432056525076,0.381648158697,0.354555726206,0.329513316888,0.298422824228};\n}\n"}
{"nl": "Custom draw the blurred bitmap and color to define your own shape", "code": "protected void drawBlurredBitmap(Canvas canvas,Bitmap blurredBitmap,int overlayColor){\n  if (blurredBitmap != null) {\n    mRectSrc.right=blurredBitmap.getWidth();\n    mRectSrc.bottom=blurredBitmap.getHeight();\n    mRectDst.right=getWidth();\n    mRectDst.bottom=getHeight();\n    canvas.drawBitmap(blurredBitmap,mRectSrc,mRectDst,null);\n  }\n  canvas.drawColor(overlayColor);\n}\n"}
{"nl": "Makes the thread sleep for some time", "code": "public static void threadSleep(long millis){\n  try {\n    Thread.sleep(millis);\n  }\n catch (  InterruptedException ex) {\n    Log.e(\"Exception\",StringUtils.exceptionStackTraceToString(ex));\n  }\n}\n"}
{"nl": "Create store without any restructure", "code": "public static void createCarbonStore(){\n  try {\n    String factFilePath=new File(\"../hadoop/src/test/resources/data.csv\").getCanonicalPath();\n    File storeDir=new File(absoluteTableIdentifier.getStorePath());\n    CarbonUtil.deleteFoldersAndFiles(storeDir);\n    CarbonProperties.getInstance().addProperty(CarbonCommonConstants.STORE_LOCATION_HDFS,absoluteTableIdentifier.getStorePath());\n    String kettleHomePath=\"../processing/carbonplugins\";\n    CarbonTable table=createTable();\n    writeDictionary(factFilePath,table);\n    CarbonDataLoadSchema schema=new CarbonDataLoadSchema(table);\n    LoadModel loadModel=new LoadModel();\n    String partitionId=\"0\";\n    loadModel.setSchema(schema);\n    loadModel.setDatabaseName(absoluteTableIdentifier.getCarbonTableIdentifier().getDatabaseName());\n    loadModel.setTableName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());\n    loadModel.setTableName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());\n    loadModel.setFactFilePath(factFilePath);\n    loadModel.setLoadMetadataDetails(new ArrayList<LoadMetadataDetails>());\n    executeGraph(loadModel,absoluteTableIdentifier.getStorePath(),kettleHomePath);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesMarkAsImportantQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.markAsImportant\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "write a char", "code": "public void writeChar(char a) throws IOException {\n  outs.write((byte)(a >> 8));\n  outs.write((byte)(a));\n  position+=2;\n}\n"}
{"nl": "Normalizes the values of the distribution to the range [0,1]", "code": "public void normalize(){\n  normalizeTo(1.0);\n}\n"}
{"nl": "just decrease kinah without any checks", "code": "public void decreaseKinah(long amount,Player actor){\n  decreaseKinah(amount,ItemUpdateType.DEC_KINAH_BUY,actor);\n}\n"}
{"nl": "Sends a local broadcast using an intent with the action and the extras specified", "code": "public static void sendBroadcast(Context context,String action,Bundle extras){\n  Intent intent=new Intent(action);\n  if (extras != null) {\n    intent.putExtras(extras);\n  }\n  LocalBroadcastManager.getInstance(context).sendBroadcast(intent);\n}\n"}
{"nl": "Use reverse order", "code": "public MarketSearchQueryWithExtended rev(Boolean value){\n  return unsafeParam(\"rev\",value);\n}\n"}
{"nl": "Verifies that the matrix is an identity matrix", "code": "protected void checkIdentityFieldMatrix(FieldMatrix<Fraction> m){\n  for (int i=0; i < m.getRowDimension(); i++) {\n    for (int j=0; j < m.getColumnDimension(); j++) {\n      if (i == j) {\n        Assert.assertEquals(m.getEntry(i,j),Fraction.ONE);\n      }\n else {\n        Assert.assertEquals(m.getEntry(i,j),Fraction.ZERO);\n      }\n    }\n  }\n}\n"}
{"nl": "Determines the width of this view", "code": "private int measureWidth(int measureSpec){\n  float result;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {\n    result=specSize;\n  }\n else {\n    final int count=mViewPager.getAdapter().getCount();\n    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return (int)((float)Math.ceil(result));\n}\n"}
{"nl": "Helper Methods", "code": "private ClassName className(TypeElement element){\n  if (element != null) {\n    return ClassName.get(element);\n  }\n  return null;\n}\n"}
{"nl": "compute node addresses used to compute LCA", "code": "public static void computeAddresses(PhyloTree tree,Map<Integer,String> id2address,Map<String,Integer> address2id){\n  Node root=tree.getRoot();\n  if (root != null)   buildId2AddressRec(root,\"\",id2address,address2id);\n}\n"}
{"nl": "upload appender file to storage server (by file name)", "code": "public String upload_appender_file1(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String parts[]=this.upload_appender_file(group_name,local_filename,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Load the data by the query", "code": "public static <T extends Bean>T load(String collection,Bson query,Class<T> clazz){\n  try {\n    return load(collection,query,clazz.newInstance());\n  }\n catch (  Exception e) {\n    if (log.isErrorEnabled())     log.error(e.getMessage(),e);\n  }\n  return null;\n}\n"}
{"nl": "Item will be updated in UI slot (stacked items)", "code": "public static final void sendItemUpdatePacket(Player player,StorageType storageType,Item item,ItemUpdateType updateType){\nswitch (storageType) {\ncase CUBE:\n    PacketSendUtility.sendPacket(player,new SM_INVENTORY_UPDATE_ITEM(player,item,updateType));\n  break;\ncase LEGION_WAREHOUSE:\nif (item.getItemTemplate().isKinah()) {\n  PacketSendUtility.sendPacket(player,new SM_LEGION_EDIT(0x04,player.getLegion()));\n  break;\n}\ndefault :\nPacketSendUtility.sendPacket(player,new SM_WAREHOUSE_UPDATE_ITEM(player,item,storageType.getId(),updateType));\n}\n}\n"}
{"nl": "Returns whether the given issue is on the text unit's source", "code": "private boolean isIssueOnSource(Issue issue){\n  return !(issue.getSourceStart() == 0 && issue.getSourceEnd() == -1);\n}\n"}
{"nl": "This method call the intent to take photo", "code": "public boolean takePhoto(){\n  this.thePhotoName=\"MagicalCamera\";\n  this.anotherPhotoName=\"MagicalCamera\";\n  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  Uri FileUri=getPhotoFileUri(this.thePhotoName,this.anotherPhotoName,this.activity);\n  if (FileUri != null) {\n    intent.putExtra(MediaStore.EXTRA_OUTPUT,FileUri);\n    if (intent.resolveActivity(this.activity.getPackageManager()) != null) {\n      this.activity.startActivityForResult(intent,TAKE_PHOTO);\n    }\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "gets next fastA record", "code": "public Pair<String,String> next(){\n  try {\n    currentHeaderPosition=nextHeaderPosition;\n    String readHeader=nextLine;\n    nextHeaderPosition+=readHeader.length() + endOfLineBytes;\n    readHeader=\">\" + readHeader.substring(1);\n    String readSequence=r.readLine();\n    nextHeaderPosition+=readSequence.length() + endOfLineBytes;\n    String comments=r.readLine();\n    nextHeaderPosition+=comments.length() + endOfLineBytes;\n    if (comments.startsWith(\"+\")) {\n      String qualityValues=r.readLine();\n      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;\n    }\n    nextLine=r.readLine();\n    return new Pair<>(readHeader,readSequence);\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n  return null;\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public ClassElemValPair(String name,char kind,String cval){\n  super(name,kind);\n  this.cval=new AsciiCP(cval);\n}\n"}
{"nl": "Rebuild the preview and repaint", "code": "private void rebuild(){\n  rebuild(true);\n}\n"}
{"nl": "Does nothing, because compensation log record is redo-Only", "code": "@Override public void undo(Transaction tx){\n}\n"}
{"nl": "Sets deny dialog message", "code": "public Builder withDenyDialogMsg(String denyDialogMsg){\n  buildObj.denyDialogMsg=denyDialogMsg;\n  buildObj.showDenyDialog=true;\n  return this;\n}\n"}
{"nl": "Walking speed changed according to health/exhaustion/fat", "code": "@SubscribeEvent public void walkingPenalty(LivingUpdateEvent event){\n  if (!(event.getEntityLiving() instanceof EntityPlayer))   return;\n  EntityPlayer player=(EntityPlayer)event.getEntityLiving();\n  if (!EntityPlayerExt.isSurvival(player))   return;\n  if (!(player.getFoodStats() instanceof BWMFoodStats))   return;\n  final UUID penaltySpeedUUID=UUID.fromString(\"c5595a67-9410-4fb2-826a-bcaf432c6a6f\");\n  EntityPlayerExt.changeSpeed(player,penaltySpeedUUID,\"Health speed penalty\",EntityPlayerExt.getHealthAndExhaustionModifier(player));\n}\n"}
{"nl": "Mean for a column", "code": "public static Column mean(DataFrame dataFrame,String columnName){\n  return dataFrame.groupBy(columnName).agg(avg(columnName)).col(columnName);\n}\n"}
{"nl": "Go to the previous step", "code": "public void goToPreviousStep(){\n  goToStep(activeStep - 1,false);\n}\n"}
{"nl": "Method to convert the given selector into the extracted BigInteger partitions", "code": "public static List<BigInteger> embeddedSelectorToPartitions(String selector,String type,DataPartitioner partitioner) throws PIRException {\n  List<BigInteger> parts;\n  int partitionBits=partitioner.getBits(type);\n  if (partitionBits > 32) {\n    int hashedSelector=KeyedHash.hash(\"aux\",32,selector,\"MD5\");\n    parts=partitioner.toPartitions(hashedSelector,PrimitiveTypePartitioner.INT);\n  }\n else {\n    parts=partitioner.toPartitions(selector,type);\n  }\n  return parts;\n}\n"}
{"nl": "Legion Information: %0", "code": "public static SM_SYSTEM_MESSAGE STR_GUILD_INTRO(String value0){\n  return new SM_SYSTEM_MESSAGE(1300285,value0);\n}\n"}
{"nl": "Item id", "code": "protected MarketEditQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "make a SAM line", "code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(menuBar.getRecentFilesListener());\n  dir.removeViewer(this);\n  frame.dispose();\n}\n"}
{"nl": "Add listener for space availability", "code": "public void addListener(ISpaceModeListener listener){\n  _listeners.add(listener);\n}\n"}
{"nl": "Deserialized the JSON string into a <code>SupervisionEvent</code> object instance", "code": "public static final SupervisionEvent fromJson(final String json){\n  return getGson().fromJson(json,SupervisionEventImpl.class);\n}\n"}
{"nl": "Creates the empty WKT geometry", "code": "public static WKTGeometry createEmpty(WKTType wktType){\n  WKTGeometry wktGeometry=new WKTGeometry();\n  wktGeometry.setGeometryType(wktType);\n  return wktGeometry;\n}\n"}
{"nl": "prints out the contents of this list", "code": "public static void dump(String title,FloatList list){\n  System.out.println(title);\n  FloatList cur=list;\n  do {\n    System.out.println(\"Item: \" + cur.value);\n    cur=cur.next;\n  }\n while (cur != list);\n}\n"}
{"nl": "Counters information of which shall be returned", "code": "public AccountGetCountersQuery filter(AccountGetCountersFilter... value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "Parses, validates and computes normalized version of gMonth object", "code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  date.year=YEAR;\n  date.day=DAY;\n  if (str.charAt(0) != '-' || str.charAt(1) != '-') {\n    throw new SchemaDateTimeException(\"Invalid format for gMonth: \" + str);\n  }\n  int stop=4;\n  date.month=parseInt(str,2,stop);\n  if (str.length() >= stop + 2 && str.charAt(stop) == '-' && str.charAt(stop + 1) == '-') {\n    stop+=2;\n  }\n  if (stop < len) {\n    if (!isNextCharUTCSign(str,stop,len)) {\n      throw new SchemaDateTimeException(\"Error in month parsing: \" + str);\n    }\n else {\n      getTimeZone(str,date,stop,len);\n    }\n  }\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  date.position=1;\n  return date;\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public ArrayElemValPair(String name,char kind,ArrayList list){\n  super(name,kind);\n  this.list=list;\n}\n"}
{"nl": "Invokes an action by menu path", "code": "void invokeMenuPath(@NotNull String... path){\n  JMenuItem menuItem=findActionMenuItem(path);\n  assertWithMessage(\"Menu path \\\"\" + Joiner.on(\" -> \").join(path) + \"\\\" is not enabled\").that(menuItem.isEnabled()).isTrue();\n  myRobot.click(menuItem);\n}\n"}
{"nl": "split a given text into strings", "code": "public static String[] split(byte[] text,int offset,int end,byte splitChar){\n  while (Character.isWhitespace((char)text[offset]) && offset < end)   offset++;\n  int count=0;\n  for (int i=offset; i < end; i++) {\n    if (text[i] == splitChar)     count++;\n  }\n  String[] result=new String[count];\n  count=0;\n  for (int i=offset; i < end; i++) {\n    if (text[i] == splitChar) {\n      result[count++]=new String(text,offset,i - offset);\n      offset=i + 1;\n    }\n  }\n  return result;\n}\n"}
{"nl": "Return a tap target for the specified view", "code": "public static ViewTapTarget forView(View view,CharSequence title,@Nullable CharSequence description){\n  return new ViewTapTarget(view,title,description);\n}\n"}
{"nl": "Parse a port string format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort", "code": "public static DockerPortMapping fromString(String portMappingStr){\n  DockerPortMapping portMapping=new DockerPortMapping();\n  Matcher matcher=PORT_PATTERN.matcher(portMappingStr);\n  if (!matcher.matches()) {\n    throw new IllegalArgumentException(\"Invalid format for port mapping: \" + portMappingStr);\n  }\n  portMapping.hostIp=matcher.group(1);\n  portMapping.hostPort=matcher.group(2);\n  portMapping.containerPort=matcher.group(3);\n  String protocolStr=matcher.group(5);\n  if (protocolStr != null) {\n    portMapping.protocol=Protocol.fromString(protocolStr);\n  }\n else {\n    portMapping.protocol=Protocol.TCP;\n  }\n  if (\"\".equals(portMapping.hostPort)) {\n    portMapping.hostPort=null;\n  }\n  return portMapping;\n}\n"}
{"nl": "Creates a new ClassPath instance that can load classes from the given dex files", "code": "public ClassPath(@Nonnull Iterable<DexFile> classPath,int api){\n  this(Lists.newArrayList(classPath),api == 17);\n}\n"}
{"nl": "Exists just to make happy some json providers", "code": "public OAuth2AccessToken(){\n  super(\"stub\",\"stub\",0,\"stub\",\"stub\",\"stub\");\n  expirationDate=0;\n}\n"}
{"nl": "Save new directory in local database", "code": "public void saveFolderInDB(){\n  if (mCreateFullPath && getStorageManager().getFileByPath(FileStorageUtils.getParentPath(mRemotePath)) == null) {\n    String[] subFolders=mRemotePath.split(\"/\");\n    String composedRemotePath=\"/\";\n    for (int i=0; i < subFolders.length; i++) {\n      String subFolder=subFolders[i];\n      if (!subFolder.isEmpty()) {\n        composedRemotePath=composedRemotePath + subFolder + \"/\";\n        mRemotePath=composedRemotePath;\n        saveFolderInDB();\n      }\n    }\n  }\n else {\n    OCFile newDir=new OCFile(mRemotePath);\n    newDir.setMimetype(MimeType.DIRECTORY);\n    long parentId=getStorageManager().getFileByPath(FileStorageUtils.getParentPath(mRemotePath)).getFileId();\n    newDir.setParentId(parentId);\n    newDir.setModificationTimestamp(System.currentTimeMillis());\n    getStorageManager().saveFile(newDir);\n    Log_OC.d(TAG,\"Create directory \" + mRemotePath + \" in Database\");\n  }\n}\n"}
{"nl": "Delete all repurchase items for this player", "code": "public void removeRepurchaseItems(Player player){\n  repurchaseItems.removeAll(player.getObjectId());\n}\n"}
{"nl": "Adds +working to the query", "code": "public void addWorking(boolean working){\n  query.append(\" +working:\" + working);\n}\n"}
{"nl": "Determines if the consumer is closed", "code": "public boolean isClosed(){\n  return m_closed;\n}\n"}
{"nl": "Return a submonitor for monitor", "code": "public static IProgressMonitor subMonitorFor(IProgressMonitor monitor,int ticks){\n  if (monitor == null)   return new NullProgressMonitor();\n  if (monitor instanceof NullProgressMonitor)   return monitor;\n  return new SubProgressMonitor(monitor,ticks,SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);\n}\n"}
{"nl": "Required for Externalizable", "code": "public GroupByKey(){\n}\n"}
{"nl": "Builds the property", "code": "public Property build(){\n  return build(null);\n}\n"}
{"nl": "to make a copy", "code": "public IDataProcessStatus makeCopy(){\n  IDataProcessStatus copy=new DataProcessTaskStatus();\n  copy.setTableName(this.tableName);\n  copy.setDataloadstatusid(this.dataloadstatusid);\n  copy.setDesc(this.desc);\n  copy.setKey(this.key);\n  copy.setDatabaseName(databaseName);\n  copy.setStatus(status);\n  return copy;\n}\n"}
{"nl": "show the overlap graph", "code": "public void showOverlapGraph(Director dir,ProgressListener progress) throws CanceledException {\n  final OverlapGraphViewer overlapGraphViewer=new OverlapGraphViewer(dir,overlapGraph,node2readName,paths);\n  overlapGraphViewer.apply(progress);\n}\n"}
{"nl": "Return with photo only", "code": "public UsersSearchQuery hasPhoto(Boolean value){\n  return unsafeParam(\"has_photo\",value);\n}\n"}
{"nl": "Construct Failure Response", "code": "public static PageRespJson buildFailureResponse(String errorMsg,Integer reqId){\n  PageRespJson respJson=new PageRespJson();\n  respJson.setCode(ResponseCode.FAILURE.getCode());\n  respJson.setMsg(errorMsg);\n  respJson.setReqId(reqId);\n  respJson.setRecordsTotal(0L);\n  respJson.setRecordsFiltered(0L);\n  return respJson;\n}\n"}
{"nl": "Creates a new instance of INSECTDocumentGraph", "code": "public DocumentNGramGaussNormGraph(){\n  InitGraphs();\n}\n"}
{"nl": "Validates the jimple body and saves a list of all validation errors", "code": "public void validate(List<ValidationException> exceptionList){\n  super.validate(exceptionList);\n  final boolean runAllValidators=Options.v().debug() || Options.v().validate();\n  for (  BodyValidator validator : getValidators()) {\n    if (!validator.isBasicValidator() && !runAllValidators)     continue;\n    validator.validate(this,exceptionList);\n  }\n}\n"}
{"nl": "Audio file IDs, in the following format: {owner_id}_{audio_id}", "code": "protected AudioGetByIdQuery audios(List<String> value){\n  return unsafeParam(\"audios\",value);\n}\n"}
{"nl": "computes the CG content and coverage", "code": "public static Pair<Double,Double> computeCGContentAndCoverage(Alignment alignment,ProgressListener progressListener) throws CanceledException {\n  if (progressListener != null) {\n    progressListener.setTasks(\"Computing CG content and coverage\",\"\");\n    progressListener.setMaximum(alignment.getNumberOfSequences());\n    progressListener.setProgress(0);\n  }\n  int cgCount=0;\n  int atCount=0;\n  int otherLetterCount=0;\n  int firstCol=Integer.MAX_VALUE;\n  int lastCol=0;\n  for (int row=0; row < alignment.getNumberOfSequences(); row++) {\n    Lane lane=alignment.getLane(row);\n    firstCol=Math.min(firstCol,lane.getFirstNonGapPosition());\n    lastCol=Math.max(lastCol,lane.getLastNonGapPosition());\n    String block=lane.getBlock();\n    for (int i=0; i < block.length(); i++) {\n      int ch=Character.toUpperCase(block.charAt(i));\n      if (ch == 'C' || ch == 'G') {\n        cgCount++;\n      }\n else       if (ch == 'A' || ch == 'T' || ch == 'U') {\n        atCount++;\n      }\n else       if (Character.isLetter(ch))       otherLetterCount++;\n    }\n    if (progressListener != null)     progressListener.incrementProgress();\n  }\n  double totalCount=cgCount + atCount + otherLetterCount;\n  double cgContent=100 * (totalCount > 0 ? (double)cgCount / totalCount : 0);\n  double totalLength=lastCol - firstCol + 1;\n  double coverage=(firstCol <= lastCol ? totalCount / totalLength : 0);\n  return new Pair<>(cgContent,coverage);\n}\n"}
{"nl": "Write String to buffer", "code": "protected final void writeS(String text,int size){\n  if (text == null) {\n    buf.put(new byte[size]);\n  }\n else {\n    final int len=text.length();\n    for (int i=0; i < len; i++) {\n      buf.putChar(text.charAt(i));\n    }\n    buf.put(new byte[size - (len * 2)]);\n  }\n}\n"}
{"nl": "lock the grammar pool", "code": "@Override public void lockPool(){\nsynchronized (fGrammarPool) {\n    fGrammarPool.lockPool();\n  }\n}\n"}
{"nl": "load the data section of the file as ascii text", "code": "private void loadBinaryData(DataInputStream dis) throws IOException {\n  for (int f=0; f < numFrames; f++) {\n    times[f]=General.readFloat(dis,isBigEndian);\n    General.readFloat(dis,isBigEndian);\n    for (int c=0; c < numChannels; c++) {\n      frames[f][c]=General.readFloat(dis,isBigEndian);\n    }\n  }\n}\n"}
{"nl": "Check whether the given child exists", "code": "protected boolean exists(final ISVNRemoteResource child,IProgressMonitor monitor) throws SVNException {\n  ISVNRemoteResource[] members;\n  try {\n    members=getMembers(monitor);\n  }\n catch (  SVNException e) {\n    if (e.getStatus().getCode() == SVNStatus.DOES_NOT_EXIST) {\n      return false;\n    }\n else {\n      throw e;\n    }\n  }\n  for (int i=0; i < members.length; i++) {\n    if (members[i].equals(child))     return true;\n  }\n  return false;\n}\n"}
{"nl": "Returns the number of elements in the underlying array", "code": "public int size(){\n  return this.get().length;\n}\n"}
{"nl": "Set user id", "code": "public SecureSetUserLevelQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Determines if the steps that are previous to the given one are completed", "code": "public boolean arePreviousStepsCompleted(int stepNumber){\n  boolean previousStepsAreCompleted=true;\n  for (int i=(stepNumber - 1); i >= 0 && previousStepsAreCompleted; i--) {\n    previousStepsAreCompleted=completedSteps[i];\n  }\n  return previousStepsAreCompleted;\n}\n"}
{"nl": "List of application ID", "code": "public AppsGetQuery appIds(String... value){\n  return unsafeParam(\"app_ids\",value);\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n}\n"}
{"nl": "Override this method if you need to bind view getHolder for insertions <p/> viewType == 100500", "code": "public RecyclerView.ViewHolder newInsertionViewHolder(ViewGroup vParent){\n  return HandyHolder.create(this,vParent,mBottomProgressLayoutId).set().isRecyclable(false).asyncInflating(false).rippleEffect(false).init();\n}\n"}
{"nl": "Builds instance of PermissifyConfig", "code": "public PermissionCallOptions build(){\n  return buildObj;\n}\n"}
{"nl": "HP and MP restoring task", "code": "public Future<?> scheduleRestoreTask(CreatureLifeStats<? extends Creature> lifeStats){\n  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new HpMpRestoreTask(lifeStats),1700,DEFAULT_DELAY);\n}\n"}
{"nl": "NOTE: this is a slow method, since it makes many objects just to parse one date/time value", "code": "private static long dateStringToMSec(FieldDef fd,String s) throws ParseException {\n  assert fd.valueType == FieldDef.FieldValueType.DATE_TIME;\n  Calendar calendar=new GregorianCalendar(TimeZone.getTimeZone(\"UTC\"),Locale.ROOT);\n  calendar.setLenient(false);\n  SimpleDateFormat dateTimeFormat=new SimpleDateFormat(fd.dateTimeFormat,Locale.ROOT);\n  dateTimeFormat.setCalendar(calendar);\n  ParsePosition pos=new ParsePosition(0);\n  Date date=dateTimeFormat.parse(s,pos);\n  if (pos.getErrorIndex() != -1) {\n    throw new ParseException(\"could not parse field \\\"\" + fd.name + \"\\\", value \\\"\"+ s+ \"\\\" as date with format \\\"\"+ fd.dateTimeFormat+ \"\\\"\",pos.getErrorIndex());\n  }\n  if (pos.getIndex() != s.length()) {\n    throw new ParseException(\"could not parse field \\\"\" + fd.name + \"\\\", value \\\"\"+ s+ \"\\\" as date with format \\\"\"+ fd.dateTimeFormat+ \"\\\"\",pos.getIndex());\n  }\n  return date.getTime();\n}\n"}
{"nl": "Pulls CopyState off the wire", "code": "private static CopyState readCopyState(DataInput in) throws IOException {\n  byte[] infosBytes=new byte[in.readVInt()];\n  in.readBytes(infosBytes,0,infosBytes.length);\n  long gen=in.readVLong();\n  long version=in.readVLong();\n  Map<String,FileMetaData> files=CopyFilesHandler.readFilesMetaData(in);\n  int count=in.readVInt();\n  Set<String> completedMergeFiles=new HashSet<>();\n  for (int i=0; i < count; i++) {\n    completedMergeFiles.add(in.readString());\n  }\n  long primaryGen=in.readVLong();\n  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=square;\");\n}\n"}
{"nl": "Create a query to return all RegistryState links within a group or global RegistryState links if the group is null/empty", "code": "private static QueryTask buildRegistryQueryByGroup(String tenantLink){\n  Query groupClause=QueryUtil.addTenantGroupAndUserClause(tenantLink);\n  return buildRegistryQuery(groupClause);\n}\n"}
{"nl": "use by command line with xml config", "code": "public Configuration(File config,File outputFile,File oldApkFile,File newApkFile) throws IOException, ParserConfigurationException, SAXException, TinkerPatchException {\n  mUsingGradle=false;\n  mSoFilePattern=new HashSet<>();\n  mDexFilePattern=new HashSet<>();\n  mDexLoaderPattern=new HashSet<>();\n  mResFilePattern=new HashSet<>();\n  mResRawPattern=new HashSet<>();\n  mResIgnoreChangePattern=new HashSet<>();\n  mPackageFields=new HashMap<>();\n  mOutFolder=outputFile.getAbsolutePath();\n  FileOperation.cleanDir(outputFile);\n  mOldApkFile=oldApkFile;\n  mOldApkPath=oldApkFile.getAbsolutePath();\n  mNewApkFile=newApkFile;\n  mNewApkPath=newApkFile.getAbsolutePath();\n  mLargeModSize=100;\n  readXmlConfig(config);\n  createTempDirectory();\n  checkInputPatternParameter();\n}\n"}
{"nl": "onTimeOut msg", "code": "public void onTimeOut(){\n  staticsManagerImpl.onScheduleTimeOut();\n}\n"}
{"nl": "Create time in milliseconds from a formatted string", "code": "public static long stringToMilliseconds(String formattedDate){\n  return stringToMilliseconds(formattedDate,SIMPLE_DATE_FORMAT);\n}\n"}
{"nl": "set the shape associated with a sample", "code": "public void putSampleShape(String sampleName,String shape){\n  put(sampleName,HiddenAttribute.Shape,shape);\n}\n"}
{"nl": "Tests the CloseInputStream method, the test is successful when the stream is correclty closed", "code": "public final void testCloseInputStream(){\n  FallbackFileController fFileController=new FallbackFileController(PATH);\n  try {\n    fFileController.closeFallbackInputStream();\n  }\n catch (  DataFallbackException e) {\n    fail(\"The InputStream could not be closed\");\n  }\n  assertNull(fFileController.getInput());\n}\n"}
{"nl": "Perform a mathematical operation (add, subtract, scalar max etc) on the specified integer column, with a scalar", "code": "public Builder integerMathOp(String column,MathOp mathOp,int scalar){\n  return transform(new IntegerMathOpTransform(column,mathOp,scalar));\n}\n"}
{"nl": "parse the json object to Class object", "code": "@SuppressWarnings(\"rawtypes\") public static <T>T fromObject(Object json,Class<T> t){\n  if (json instanceof String) {\n    Gson g=new Gson();\n    return g.fromJson((String)json,t);\n  }\n else   if (json instanceof Reader) {\n    Gson g=new Gson();\n    return g.fromJson((Reader)json,t);\n  }\n else   if (json instanceof byte[]) {\n    Gson g=new Gson();\n    byte[] b1=(byte[])json;\n    return g.fromJson(new String(b1),t);\n  }\n else   if (json instanceof Map) {\n    try {\n      Map m=(Map)json;\n      T t1=t.newInstance();\n      Field[] fs=t.getDeclaredFields();\n      for (      Field f : fs) {\n        String name=f.getName();\n        if (m.containsKey(name)) {\n          f.setAccessible(true);\n          f.set(t1,m.get(name));\n        }\n      }\n      return t1;\n    }\n catch (    Exception e) {\n      log.error(json,e);\n    }\n  }\n  return null;\n}\n"}
{"nl": "Required for Externalizable", "code": "public RegisterReplicationNotificationResponseInfo(){\n}\n"}
{"nl": "Item will be deleted from UI slot", "code": "public static final void sendItemDeletePacket(Player player,StorageType storageType,Item item,ItemDeleteType deleteType){\nswitch (storageType) {\ncase CUBE:\n    PacketSendUtility.sendPacket(player,new SM_DELETE_ITEM(item.getObjectId(),deleteType));\n  break;\ndefault :\nPacketSendUtility.sendPacket(player,new SM_DELETE_WAREHOUSE_ITEM(storageType.getId(),item.getObjectId(),deleteType));\n}\nPacketSendUtility.sendPacket(player,SM_CUBE_UPDATE.cubeSize(storageType,player));\n}\n"}
{"nl": "Maintain the aspect ratio so the resulting image does not look smooshed", "code": "public int[] calculateAspectRatio(int origWidth,int origHeight){\n  int newWidth=this.targetWidth;\n  int newHeight=this.targetHeight;\n  if (newWidth <= 0 && newHeight <= 0) {\n    newWidth=origWidth;\n    newHeight=origHeight;\n  }\n else   if (newWidth > 0 && newHeight <= 0) {\n    newHeight=(newWidth * origHeight) / origWidth;\n  }\n else   if (newWidth <= 0 && newHeight > 0) {\n    newWidth=(newHeight * origWidth) / origHeight;\n  }\n else {\n    double newRatio=newWidth / (double)newHeight;\n    double origRatio=origWidth / (double)origHeight;\n    if (origRatio > newRatio) {\n      newHeight=(newWidth * origHeight) / origWidth;\n    }\n else     if (origRatio < newRatio) {\n      newWidth=(newHeight * origWidth) / origHeight;\n    }\n  }\n  int[] retval=new int[2];\n  retval[0]=newWidth;\n  retval[1]=newHeight;\n  return retval;\n}\n"}
{"nl": "Used for JUnit tests", "code": "private Player(PlayerCommonData plCommonData){\n  super(plCommonData.getPlayerObjId(),new PlayerController(),null,plCommonData,null);\n  this.playerCommonData=plCommonData;\n  this.playerAccount=new Account(0);\n  this.absStatsHolder=new AbsoluteStatOwner(this,0);\n}\n"}
{"nl": "Block until the service is finally closed", "code": "public void waitUntilClosed() throws InterruptedException {\n  mutex.lock();\n  try {\n    while (state != State.Closed) {\n      isClosedCondition.await();\n    }\n  }\n  finally {\n    mutex.unlock();\n  }\n}\n"}
{"nl": "Launches ping command", "code": "@SuppressLint(\"NewApi\") private String launchPing(String url) throws Exception {\n  Process p;\n  String command=String.format(PING_CMD_FORMMAT,ttl);\n  Log.e(\"TAG\",\"The command is : \" + command + url);\n  long startTime=System.nanoTime();\n  new TimeOutAsyncTask(this,ttl).execute();\n  p=Runtime.getRuntime().exec(command + url);\n  BufferedReader stdInput=new BufferedReader(new InputStreamReader(p.getInputStream()));\n  String s;\n  String res=\"\";\n  while ((s=stdInput.readLine()) != null) {\n    res+=s + \"\\n\";\n    if (s.contains(FROM_PING) || s.contains(SMALL_FROM_PING)) {\n      elapsedTime=(System.nanoTime() - startTime) / 1000000.0f;\n    }\n  }\n  p.destroy();\n  if (res.equals(\"\")) {\n    throw new IllegalArgumentException();\n  }\n  if (ttl == 1) {\n    Log.e(\"TAG\",\"ipToPings is : \" + ipToPing + \"res is:\"+ res);\n    ipToPing=parseIpToPingFromPing(res);\n  }\n  Log.e(\"TAG\",\"launch ping result is : \" + res);\n  return res;\n}\n"}
{"nl": "Populate member data", "code": "private static void populate(){\n  geometryMap.put(Point.class,GeometryTypeEnum.POINT);\n  geometryMap.put(MultiPoint.class,GeometryTypeEnum.POINT);\n  geometryMap.put(LineString.class,GeometryTypeEnum.LINE);\n  geometryMap.put(MultiLineString.class,GeometryTypeEnum.LINE);\n  geometryMap.put(Polygon.class,GeometryTypeEnum.POLYGON);\n  geometryMap.put(MultiPolygon.class,GeometryTypeEnum.POLYGON);\n}\n"}
{"nl": "<p>Method:only for '*' match pattern,return true of false</p>", "code": "public static boolean isMatchPattern(final String string,final String patternString){\n  boolean result=false;\n  if (string != null && patternString != null) {\n    if (patternString.indexOf(METCH_PATTERN) >= 0) {\n      String matchPattern=Constant.Symbol.XOR + patternString.replaceAll(METCH_PATTERN_REGEX,METCH_PATTERN_REPLACEMENT) + Constant.Symbol.DOLLAR;\n      result=isMatchRegex(string,matchPattern);\n    }\n else {\n      if (string.equals(patternString)) {\n        result=true;\n      }\n    }\n  }\n  return result;\n}\n"}
{"nl": "update the view", "code": "public void updateView(){\n  Graphics2D gc=(Graphics2D)getGraphics();\n  Dimension size=new Dimension();\n  draw(gc,size);\n  setPreferredSize(size);\n  revalidate();\n}\n"}
{"nl": "Extracts a data schema element node's contents", "code": "private void extractElementNode(Element eElement,DataSchema schema) throws PIRException {\n  String name=eElement.getElementsByTagName(\"name\").item(0).getTextContent().trim();\n  String type=eElement.getElementsByTagName(\"type\").item(0).getTextContent().trim();\n  schema.getTypeMap().put(name,type);\n  Node isArrayNode=eElement.getElementsByTagName(\"isArray\").item(0);\n  if (isArrayNode != null) {\n    String isArrayValue=isArrayNode.getTextContent().trim().toLowerCase();\n    String isArray=isArrayValue.isEmpty() ? \"true\" : isArrayValue;\n    if (isArray.equals(\"true\")) {\n      schema.getArrayElements().add(name);\n    }\n  }\n  String partitionerTypeName=PrimitiveTypePartitioner.class.getName();\n  boolean isPrimitivePartitioner=true;\n  if (eElement.getElementsByTagName(\"partitioner\").item(0) != null) {\n    partitionerTypeName=eElement.getElementsByTagName(\"partitioner\").item(0).getTextContent().trim();\n    isPrimitivePartitioner=partitionerTypeName.equals(PrimitiveTypePartitioner.class.getName());\n  }\n  DataPartitioner partitioner;\n  if (isPrimitivePartitioner) {\n    validateIsPrimitiveType(type);\n    partitioner=new PrimitiveTypePartitioner();\n  }\n else {\n    partitioner=instantiatePartitioner(partitionerTypeName);\n  }\n  schema.getPartitionerTypeMap().put(name,partitionerTypeName);\n  schema.getPartitionerInstances().put(partitionerTypeName,partitioner);\n  logger.info(\"name = \" + name + \" javaType = \"+ type+ \" isArray = \"+ schema.getArrayElements().contains(name)+ \" partitioner \"+ partitionerTypeName);\n}\n"}
{"nl": "apply the named computation to the taxonomy", "code": "public static int apply(final ViewerBase viewer,String method,final int threshold,final Distances distances) throws IOException {\n  System.err.println(\"Computing \" + method + \" distances\");\n  for (int s=1; s <= distances.getNtax(); s++) {\n    for (int t=s + 1; t <= distances.getNtax(); t++) {\n      distances.set(s,t,0);\n    }\n  }\n  int countNodes=0;\n  for (Node v=viewer.getTree().getFirstNode(); v != null; v=v.getNext()) {\n    if (v.getOutDegree() != 1 && (Integer)v.getInfo() > 0) {\n      countNodes++;\n      final int[] counts=(v.getOutDegree() == 0 ? viewer.getNodeData(v).getSummarized() : viewer.getNodeData(v).getAssigned());\n      for (int s=1; s <= distances.getNtax(); s++) {\n        for (int t=s + 1; t <= distances.getNtax(); t++) {\n          if ((counts[s - 1] < threshold) != (counts[t - 1] < threshold))           distances.increment(s,t);\n        }\n      }\n    }\n  }\n  if (countNodes > 0) {\n    for (int s=1; s <= distances.getNtax(); s++) {\n      for (int t=s + 1; t <= distances.getNtax(); t++) {\n        distances.set(s,t,distances.get(s,t) / countNodes);\n      }\n    }\n  }\n  return countNodes;\n}\n"}
{"nl": "Force adjust video to fit TextureView's width and height", "code": "public void adjustVideoFitTextureView(){\n  Matrix matrix=new Matrix();\n  getTransform(matrix);\n  matrix.setScale(1,1);\n  setTransform(matrix);\n}\n"}
{"nl": "Element/Attribute traversers call this method to check whether the type is NOTATION without enumeration facet", "code": "void checkNotationType(String refName,XSTypeDefinition typeDecl,Element elem){\n  if (typeDecl.getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE && ((XSSimpleType)typeDecl).getVariety() == XSSimpleTypeDefinition.VARIETY_ATOMIC && ((XSSimpleType)typeDecl).getPrimitiveKind() == XSSimpleType.PRIMITIVE_NOTATION) {\n    if ((((XSSimpleType)typeDecl).getDefinedFacets() & XSSimpleTypeDefinition.FACET_ENUMERATION) == 0) {\n      reportSchemaError(\"enumeration-required-notation\",new Object[]{typeDecl.getName(),refName,DOMUtil.getLocalName(elem)},elem);\n    }\n  }\n}\n"}
{"nl": "Merge the context sensitive tuples, and make a single insensitive tuple", "code": "private void do_pts_interval_merge(){\n  for (  PtInsIntervalManager im : pt_objs.values()) {\n    im.mergeFigures(Parameters.max_pts_budget);\n  }\n}\n"}
{"nl": "Factory method created instance from byte[]", "code": "public static RemoteResourceStatus fromBytes(byte[] bytes) throws SVNException {\n  return ((bytes != null) && (bytes.length > 0)) ? new RemoteResourceStatus(bytes) : null;\n}\n"}
{"nl": "Constructs a friend list for the given player, with the given friends", "code": "public FriendList(Player owner,Collection<Friend> newFriends){\n  this.friends=new ConcurrentLinkedQueue<Friend>(newFriends);\n  this.player=owner;\n}\n"}
{"nl": "Called whenever the OSGi framework stops our bundle", "code": "@Override public void stop(BundleContext bc) throws Exception {\n  context=null;\n  logger.debug(\"ZWave binding stopped.\");\n}\n"}
{"nl": "Create a directory that will contain the demo resource bundle", "code": "void initOutputDirectory() throws CommandException {\n  if (outputDirectoryParam == null) {\n    outputDirectoryPath=Paths.get(nameParam);\n  }\n else {\n    outputDirectoryPath=Paths.get(outputDirectoryParam);\n  }\n  try {\n    java.nio.file.Files.createDirectories(outputDirectoryPath);\n  }\n catch (  IOException ioe) {\n    throw new CommandException(\"Error creating output directory\",ioe);\n  }\n}\n"}
{"nl": "Creates a CMULexicon based upon the given compiled and addenda DBs and the given letter to sound rules", "code": "public CMULexicon(URL compiledURL,URL addendaURL,URL letterToSoundURL,boolean binary){\n  setLexiconParameters(compiledURL,addendaURL,letterToSoundURL,binary);\n}\n"}
{"nl": "Throw exception if value out of range (long version)", "code": "private static long rangeCheck(long value) throws NumberFormatException {\n  if (value < MIN_VALUE || value > MAX_VALUE) {\n    throw new NumberFormatException(\"Value is out of range : \" + value);\n  }\n  return value;\n}\n"}
{"nl": "Is this the last split?", "code": "public boolean isLastSplit(){\n  return isLastSplit;\n}\n"}
{"nl": "this method is used to update the reference count of the actions", "code": "public void increaseCounts(Map<String,Integer> eventCount,Predicate<String> predicate){\n  increaseEventCount(eventCount,predicate);\n  increaseActionCount(eventCount,predicate);\n}\n"}
{"nl": "Allows to add MULTIPLE items", "code": "public void addItems(List<Task> _model){\n  this.model.addAll(_model);\n  notifyDataSetChanged();\n}\n"}
{"nl": "Produce a String representation of an EventDescriptor", "code": "public String toString(){\n  String eventClassName=(eventClass == null ? \"<null>\" : eventClass.getName());\n  String eventIDVal=(eventID == null ? \"<null>\" : eventID.toString());\n  return (\"Class: \" + eventClassName + \", eventID: \"+ eventIDVal);\n}\n"}
{"nl": "Shows the properties for the given resource", "code": "public void showSvnProperties(ISVNRemoteResource resource) throws SVNException {\n  this.remoteResource=resource;\n  this.resource=null;\n  if (remoteResource != null) {\n    if (remoteResource.getRevision() != null) {\n      setContentDescription(Policy.bind(\"SvnRevPropertiesView.titleWithTwoArguments\",remoteResource.getRevision().toString(),remoteResource.getName()));\n    }\n  }\n else {\n    setContentDescription(\"\");\n  }\n  updateStatus();\n}\n"}
{"nl": "Returns true if a field was parsed, else false if the end of the bytes was hit first", "code": "private boolean parseUnescapedField(int fieldUpto) throws ParseException {\n  int fieldStart=bufferUpto;\n  while (bufferUpto < bytes.length) {\n    byte b=bytes[bufferUpto++];\n    if (b == delimChar) {\n      addOneField(fieldUpto,fieldStart,bufferUpto - fieldStart - 1);\n      return true;\n    }\n else     if (b == NEWLINE) {\n      addOneField(fieldUpto,fieldStart,bufferUpto - fieldStart - 1);\n      bufferUpto--;\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.KULCZYNSKI);\n}\n"}
{"nl": "Reloads the data of all online users", "code": "public void updateAllUsers(){\n  plugin.doSync(null);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n"}
{"nl": "Add a style to the config", "code": "public ResourcesPoet addStyle(String name,@Nullable String parentRef){\n  return addStyle(name,parentRef,null);\n}\n"}
{"nl": "unlock the grammar pool", "code": "@Override public void unlockPool(){\nsynchronized (fGrammarPool) {\n    fGrammarPool.unlockPool();\n  }\n}\n"}
{"nl": "use an item with itemID", "code": "public void useItem(ItemId type) throws RemoteServerException, LoginFailedException {\n  if (type == ItemId.UNRECOGNIZED) {\n    throw new IllegalArgumentException(\"You cannot use item for UNRECOGNIZED\");\n  }\nswitch (type) {\ncase ITEM_INCENSE_ORDINARY:\ncase ITEM_INCENSE_SPICY:\ncase ITEM_INCENSE_COOL:\ncase ITEM_INCENSE_FLORAL:\n    useIncense(type);\n  break;\ndefault :\nbreak;\n}\n}\n"}
{"nl": "Add a column", "code": "public Builder addColumn(ColumnMetaData metaData){\n  columnMetaData.add(metaData);\n  return this;\n}\n"}
{"nl": "Definitional formula for population standard deviation", "code": "protected double populationStandardDeviation(double[] v){\n  double mean=StatUtils.mean(v);\n  double sum=0;\n  for (  double val : v) {\n    sum+=(val - mean) * (val - mean);\n  }\n  return FastMath.sqrt(sum / v.length);\n}\n"}
{"nl": "destroy all the threads spawned by this pool", "code": "public void destroy(){\n  if (group.isDestroyed())   return;\n  int activeCount=group.activeCount();\n  Thread[] activeThreads=new Thread[activeCount];\n  int numThreads=group.enumerate(activeThreads);\n  for (int i=0; i < numThreads; i++) {\n    try {\n      if (activeThreads[i] instanceof PoolableThread)       ((PoolableThread)activeThreads[i]).cleanStop();\n      activeThreads[i].interrupt();\n    }\n catch (    Exception ex) {\n      logger.log(Level.WARNING,\"Failed to stop active thread \" + activeThreads[i].getId(),ex);\n      ex.printStackTrace();\n    }\n    remove(activeThreads[i]);\n  }\n  group.interrupt();\n  destroyChildGroup(group);\n  for (int i=0; group.activeCount() > 0 && i < 10; i++) {\n    try {\n      Thread.sleep(10);\n    }\n catch (    InterruptedException e) {\n      logger.log(Level.WARNING,\"Interrupted while destroying latent Threads\",e);\n    }\n  }\n  try {\n    if (!group.isDestroyed())     group.destroy();\n  }\n catch (  IllegalThreadStateException e) {\n    if (!group.isDestroyed()) {\n      logger.log(Level.WARNING,\"IllegalThreadState destroying ThreadGroup\",e);\n    }\n  }\n}\n"}
{"nl": "Waits for all queued audio to be played", "code": "public boolean drain(){\n  return true;\n}\n"}
{"nl": "Sends a note to the business layer, to confirm that the equipment is not properly configured, or connected to its data source", "code": "@Override public final void confirmEquipmentStateIncorrect(final String pDescription){\n  sendCommfaultTag(this.equipmentConfiguration.getCommFaultTagId(),equipmentConfiguration.getName(),this.equipmentConfiguration.getCommFaultTagValue(),pDescription);\n  Map<Long,SubEquipmentConfiguration> subEquipmentConfigurations=equipmentConfiguration.getSubEquipmentConfigurations();\n  for (  SubEquipmentConfiguration subEquipmentConfiguration : subEquipmentConfigurations.values()) {\n    sendCommfaultTag(subEquipmentConfiguration.getCommFaultTagId(),subEquipmentConfiguration.getName(),subEquipmentConfiguration.getCommFaultTagValue(),pDescription);\n  }\n}\n"}
{"nl": "Returns true if this facet includes data binding library", "code": "public boolean isDataBindingEnabled(){\n  return myDataBindingEnabled;\n}\n"}
{"nl": "Change item text if space navigation already set up", "code": "public void changeItemTextAtPosition(int itemIndex,String newText){\n  if (itemIndex < 0 || itemIndex > spaceItems.size()) {\n    throwArrayIndexOutOfBoundsException(itemIndex);\n  }\n else {\n    SpaceItem spaceItem=spaceItems.get(itemIndex);\n    RelativeLayout textAndIconContainer=(RelativeLayout)spaceItemList.get(itemIndex);\n    TextView spaceItemIcon=(TextView)textAndIconContainer.findViewById(R.id.space_text);\n    spaceItemIcon.setText(newText);\n    spaceItem.setItemName(newText);\n    changedItemAndIconHashMap.put(itemIndex,spaceItem);\n  }\n}\n"}
{"nl": "Return true the highlight operation is be full-bar oriented, false if single-value", "code": "@Override public boolean isHighlightFullBarEnabled(){\n  return mHighlightFullBarEnabled;\n}\n"}
{"nl": "Refreshes the pilot's authentication token", "code": "public static void refreshAccessToken(RefreshTokenListener listener){\n  Auth.refreshAccessToken(getInstance().getContext(),listener);\n}\n"}
{"nl": "Sort by virtual field, and ask for its value", "code": "public void testRetrieveVirtualFieldWithSort() throws Exception {\n  deleteAllDocs();\n  send(\"addDocument\",\"{fields: {id: 0, boost: 1.0}}\");\n  send(\"addDocument\",\"{fields: {id: 1, boost: 2.0}}\");\n  send(\"search\",\"{query: MatchAllDocsQuery, sort: {fields: [{field: logboost}]}, retrieveFields: [id, logboost]}\");\n  assertEquals(2,getInt(\"totalHits\"));\n  assertEquals(0,getInt(\"hits[0].fields.id\"));\n  assertEquals(1,getInt(\"hits[1].fields.id\"));\n  assertEquals(0.0f,getFloat(\"hits[0].fields.logboost\"),.0001f);\n  assertEquals(.6931f,getFloat(\"hits[1].fields.logboost\"),.0001f);\n}\n"}
{"nl": "Check out if it is a super interface of child", "code": "public static boolean isSuperInterface(Class child,String sup){\n  if (child == null)   return false;\n  if (child.getCanonicalName().equals(sup))   return true;\n  Class[] interfaces=child.getInterfaces();\n  for (  Class in : interfaces) {\n    if (in.getCanonicalName().equals(sup)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "does B part intersect set H?", "code": "public boolean isBintersects(BitSet H){\n  return B.intersects(H);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoCreateCommentQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.createComment\",Integer.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n"}
{"nl": "For unit test only!!!", "code": "void clearCache(){\nsynchronized (mCache) {\n    mCache.clear();\n  }\n}\n"}
{"nl": "Calculates |z[i]| for all i", "code": "private double[] calculateAbsoluteDifferences(final double[] z) throws MathIllegalArgumentException, NullArgumentException {\n  if (z == null) {\n    throw new NullArgumentException();\n  }\n  if (z.length == 0) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_DATA);\n  }\n  final double[] zAbs=new double[z.length];\n  for (int i=0; i < z.length; ++i) {\n    zAbs[i]=FastMath.abs(z[i]);\n  }\n  return zAbs;\n}\n"}
{"nl": "create an aligner for", "code": "public Blast2Alignment(Document doc){\n  this.doc=doc;\n}\n"}
{"nl": "Get the workspace root for a project", "code": "public static WorkspaceRoot fromImportSettings(BlazeImportSettings blazeSettings){\n  return new WorkspaceRoot(new File(blazeSettings.getWorkspaceRoot()));\n}\n"}
{"nl": "extract a set of samples to the given target", "code": "public void extractSamplesTo(Collection<String> samples,DataTable target){\n  Set<String> toDelete=new HashSet<>();\n  toDelete.addAll(sampleNames);\n  toDelete.removeAll(samples);\n  target.copy(this);\n  target.removeSamples(toDelete);\n}\n"}
{"nl": "Inner method to inform all subscribed listeners of the sub equipment supervision event", "code": "private void fireSubEquipmentSupervisionUpdate(final SupervisionEvent supervisionEvent){\n  Set<SupervisionListener> listeners=subEquipmentSupervisionListeners.get(supervisionEvent.getEntityId());\n  if (listeners != null) {\n    for (    SupervisionListener listener : listeners) {\n      listener.onSupervisionUpdate(supervisionEvent);\n    }\n  }\n}\n"}
{"nl": "Creates a denial status", "code": "public Status(@NotNull Message message){\n  this.message=message;\n}\n"}
{"nl": "StackBlur By Jni Bitmap", "code": "public static Bitmap blurNatively(Bitmap original,int radius,boolean canReuseInBitmap){\n  if (radius < 1) {\n    return null;\n  }\n  Bitmap bitmap=buildBitmap(original,canReuseInBitmap);\n  if (radius == 1) {\n    return bitmap;\n  }\n  blurBitmap(bitmap,radius);\n  return (bitmap);\n}\n"}
{"nl": "Kicks account from LoginServer and GameServers", "code": "public static void kickAccount(int accountId){\nsynchronized (AccountController.class) {\n    for (    GameServerInfo gsi : GameServerTable.getGameServers()) {\n      if (gsi.isAccountOnGameServer(accountId)) {\n        gsi.getConnection().sendPacket(new SM_REQUEST_KICK_ACCOUNT(accountId));\n        break;\n      }\n    }\n    if (accountsOnLS.containsKey(accountId)) {\n      LoginConnection conn=accountsOnLS.remove(accountId);\n      conn.closeNow();\n    }\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set showAminoAcids=false;\");\n}\n"}
{"nl": "check if only array type possible", "code": "private boolean isArrayType(HashSet<String> resolvedTypesSet){\n  return resolvedTypesSet.size() == 1 && resolvedTypesSet.contains(Types.strArray);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoReportCommentQuery(VkApiClient client,UserActor actor,int ownerId,int commentId){\n  super(client,\"video.reportComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  commentId(commentId);\n}\n"}
{"nl": "cancel any unsent api calls", "code": "public void cancelCalls(@NonNull Context context){\n  QueueManager.getInstance(context).getRequestQueue().cancelAll(context);\n}\n"}
{"nl": "Convert a file into a Json object", "code": "private Json convertFile(File file){\n  try {\n    return Json.read(file.toURI().toURL());\n  }\n catch (  MalformedURLException e) {\n    LOG.warn(\"Problem reading Json file \" + file.getPath());\n    return Json.object();\n  }\n}\n"}
{"nl": "compute an ellipse", "code": "public static Ellipse computeEllipse(ArrayList<Point2D> points){\n  final double[][] array=new double[points.size()][2];\n  int i=0;\n  for (  Point2D aPoint : points) {\n    array[i][0]=aPoint.getX();\n    array[i++][1]=aPoint.getY();\n  }\n  final double[] dimensions=convertVariablesToDimension(apply(array));\n  return new Ellipse(dimensions[0],dimensions[1],dimensions[2],dimensions[3],dimensions[4]);\n}\n"}
{"nl": "Initialise the WKTParser object", "code": "private static void initialise(){\n  Hints hints=new Hints(Hints.CRS,DefaultGeographicCRS.WGS84);\n  PositionFactory positionFactory=GeometryFactoryFinder.getPositionFactory(hints);\n  GeometryFactory geometryFactory=GeometryFactoryFinder.getGeometryFactory(hints);\n  PrimitiveFactory primitiveFactory=GeometryFactoryFinder.getPrimitiveFactory(hints);\n  AggregateFactory aggregateFactory=GeometryFactoryFinder.getAggregateFactory(hints);\n  wktParser=new WKTParser(geometryFactory,primitiveFactory,positionFactory,aggregateFactory);\n  wktTypeList.add(new WKTType(WKT_POINT,false,1,\"Point\",false));\n  wktTypeList.add(new WKTType(WKT_MULTIPOINT,true,1,\"Point\",false));\n  wktTypeList.add(new WKTType(WKT_LINESTRING,false,2,\"Line\",false));\n  wktTypeList.add(new WKTType(\"LINEARRING\",false,2,\"Line\",false));\n  wktTypeList.add(new WKTType(WKT_MULTILINESTRING,true,2,\"Line\",false));\n  wktTypeList.add(new WKTType(WKT_POLYGON,false,-1,\"Polygon\",true));\n  wktTypeList.add(new WKTType(WKT_MULTIPOLYGON,true,-1,\"Polygon\",true,true));\n  for (  WKTType wkyType : wktTypeList) {\n    wktTypeMap.put(wkyType.getName(),wkyType);\n  }\n}\n"}
{"nl": "launch the computation of a comparison", "code": "public static void launchComparison(Director dir0,Director dir1,Director dir2,String methodName,String options) throws IOException, CanceledException {\n  IMethodItem item=null;\n  if (methodName.equals(ResamplingMethodItem.NAME)) {\n    item=new ResamplingMethodItem();\n  }\n else   NotificationsInSwing.showError(\"Unknown statistical method: \" + methodName);\n  if (item != null) {\n    item.parseOptionString(options);\n    Map<Integer,Integer> input1=computeInputMapFromLeaves(dir1,item.getOptionUseInternal(),item.getOptionUseUnassigned());\n    System.err.println(\"Input map for \" + dir1.getTitle() + \": \"+ input1.keySet().size());\n    Map<Integer,Integer> input2=computeInputMapFromLeaves(dir2,item.getOptionUseInternal(),item.getOptionUseUnassigned());\n    System.err.println(\"Input map for \" + dir2.getTitle() + \": \"+ input2.keySet().size());\n    item.setInput(input1,input2);\n    item.apply(dir0.getDocument().getProgressListener());\n    Map<Integer,Double> result=item.getOutput();\n    ResamplingMethodItem.displayResult(result,dir1,dir2);\n  }\n}\n"}
{"nl": "Adds imports collected by importRewrite to item", "code": "private void addImports(CompletionItem item){\n  if (this.importRewrite != null) {\n    try {\n      TextEdit edit=this.importRewrite.rewriteImports(new NullProgressMonitor());\n      TextEditConverter converter=new TextEditConverter(this.compilationUnit,edit);\n      item.setAdditionalTextEdits(converter.convert());\n    }\n catch (    CoreException e) {\n      JavaLanguageServerPlugin.logException(\"Error adding imports\",e);\n    }\n  }\n}\n"}
{"nl": "yyyy-MM-dd hh:mm:ss", "code": "public static String dateToStringWithTime(Date date){\n  return dateToString(date,DATETIME_PATTERN);\n}\n"}
{"nl": "rescan the view", "code": "public void updateView(){\n  Graphics2D graphics=(Graphics2D)getGraphics();\n  Dimension size=new Dimension();\n  draw(graphics,size);\n  setPreferredSize(size);\n  revalidate();\n}\n"}
{"nl": "Flush any cached class loaders", "code": "public static void clearCache(){\n  ourCache.clear();\n}\n"}
{"nl": "Stop zookeeper cluster", "code": "protected void stopZKCluster() throws Exception {\n  zkUtil.killServer();\n}\n"}
{"nl": "Create a new transaction", "code": "public Transaction(SQLiteDatabase database){\n  mDatabase=database;\n  mIsSuccess=true;\n  mDatabase.beginTransaction();\n}\n"}
{"nl": "Display the authenticated pilot's profile", "code": "public static void showProfile(Fragment fragment,@Nullable HashMap<String,String> extras){\n  showProfile(fragment,AirMap.getUserId(),extras);\n}\n"}
{"nl": "Builds a key to index files", "code": "private String buildKey(String accountName,String remotePath){\n  return accountName + remotePath;\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.0689156576706,0.236735653193,0.364074131941,0.481570789649,0.595880479994,0.000133443915657,0.00286681303403,0.00969192007502,0.0242883861471,0.0605491314658};\n}\n"}
{"nl": "Delete a flight belonging to the logged in pilot", "code": "public static void deleteFlight(AirMapFlight flight,@Nullable AirMapCallback<Void> callback){\n  FlightService.deleteFlight(flight,callback);\n}\n"}
{"nl": "set to identity matrix", "code": "public void identity(){\n  for (int j=0; j < size(); j++)   for (int i=0; i < size(); i++)   set(i,j,(i == j ? 1 : 0));\n}\n"}
{"nl": "reset the header view height", "code": "private void updateHeaderViewSize(int dy,XRecyclerView view){\n  if (dy < 0) {\n    if (view.mHeaderView.getLayoutParams().height > view.mHeaderViewHeight) {\n      view.mHeaderView.getLayoutParams().height+=-dy / 5;\n    }\n else {\n      view.mHeaderView.getLayoutParams().height+=-dy / 2;\n    }\n  }\n else {\n    view.isLoadingMoreData=true;\n    view.mHeaderView.getLayoutParams().height-=dy;\n  }\n  view.mHeaderView.requestLayout();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetRecommendationsQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getRecommendations\",Utils.buildParametrizedType(List.class,AudioFull.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosSaveMarketPhotoQuery(VkApiClient client,UserActor actor,String photo,int server,String hash){\n  super(client,\"photos.saveMarketPhoto\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photo(photo);\n  server(server);\n  hash(hash);\n}\n"}
{"nl": "author  hhj TODO", "code": "public static void debugInfo(String msg){\n  debugInfo(\"zhibo\",msg);\n}\n"}
{"nl": "Create a feature file reader from the given MLSA feature file", "code": "public MLSAFeatureFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n"}
{"nl": "Remove all columns, except for those that are specified here", "code": "public Builder removeAllColumnsExceptFor(Collection<String> columnNames){\n  return removeAllColumnsExceptFor(columnNames.toArray(new String[columnNames.size()]));\n}\n"}
{"nl": "The default search results are added to the results of a global search for all users and groups, it can be disabled by passing 0", "code": "public SearchGetHintsQuery searchGlobal(Boolean value){\n  return unsafeParam(\"search_global\",value);\n}\n"}
{"nl": "Constructs an AirMap instance", "code": "private AirMap(Context context,String auth,boolean pinCertificates){\n  this.context=context;\n  authToken=auth == null ? \"\" : auth;\n  certificatePinning=pinCertificates;\n  decodeToken(auth);\n  try {\n    InputStream inputStream=getContext().getResources().getAssets().open(\"airmap.config.json\");\n    String json=Utils.readInputStreamAsString(inputStream);\n    config=new JSONObject(json);\n    apiKey=getConfig().getJSONObject(\"airmap\").getString(\"api_key\");\n  }\n catch (  IOException|JSONException|NullPointerException e) {\n    e.printStackTrace();\n    throw new RuntimeException(\"Please ensure you have your airmap.config.json file in your /assets directory\");\n  }\n  client=new AirMapClient(apiKey,auth);\n}\n"}
{"nl": "verify the code", "code": "@Path(path=\"verify\") public void verify(){\n  String code=this.getString(\"code\").toLowerCase();\n  Captcha.Result r=Captcha.verify(this.sid(),code);\n  JSON jo=new JSON();\n  if (Captcha.Result.badcode == r) {\n    jo.put(X.STATE,202);\n    jo.put(X.MESSAGE,\"bad code\");\n  }\n else   if (Captcha.Result.expired == r) {\n    jo.put(X.STATE,201);\n    jo.put(X.MESSAGE,\"expired\");\n  }\n else {\n    jo.put(X.STATE,200);\n    jo.put(X.MESSAGE,\"ok\");\n  }\n  this.response(jo);\n}\n"}
{"nl": "Draw the internal guidelines of a ConstraintTableLayout", "code": "private static void drawTableLayoutGuidelines(ViewTransform transform,Graphics2D g,ConstraintTableLayout table){\n  Graphics2D g2=(Graphics2D)g.create();\n  ArrayList<Guideline> vertical=table.getVerticalGuidelines();\n  ArrayList<Guideline> horizontal=table.getHorizontalGuidelines();\n  g2.setStroke(SnapDraw.sThinDashedStroke);\n  int l=transform.getSwingX(table.getDrawX());\n  int t=transform.getSwingY(table.getDrawY());\n  int r=transform.getSwingX(table.getDrawX() + table.getDrawWidth());\n  int b=transform.getSwingY(table.getDrawY() + table.getDrawHeight());\n  for (  ConstraintWidget v : vertical) {\n    int x=transform.getSwingX(v.getX()) + l;\n    g2.drawLine(x,t,x,b);\n  }\n  for (  ConstraintWidget h : horizontal) {\n    int y=transform.getSwingY(h.getY()) + t;\n    g2.drawLine(l,y,r,y);\n  }\n  g2.dispose();\n}\n"}
{"nl": "Collect attributes provided in XML declaration", "code": "private void collectAttributes(AttributeSet attributeSet){\n  TypedArray attributesArray=getContext().obtainStyledAttributes(attributeSet,R.styleable.PresenterLayout);\n  try {\n    mOverlappingBackgroundColor=attributesArray.getColor(R.styleable.PresenterLayout_background_color_overlapping,mDefaultOverlappingBackgroundColor);\n    mInflateDefaultViews=attributesArray.getBoolean(R.styleable.PresenterLayout_inflate_default_views,true);\n    mInitialViewId=attributesArray.getInt(R.styleable.PresenterLayout_show_initial_view,NONE_VIEW);\n  }\n  finally {\n    attributesArray.recycle();\n  }\n}\n"}
{"nl": "/*     ", "code": "@deprecated public static boolean isJavaLetter(int cp){\n  return isJavaIdentifierStart(cp);\n}\n"}
{"nl": "List field should always assigned new list with one elment 1L", "code": "public void testUntypedLinkedListField() throws Exception {\n  AnObject empty=new AnObject();\n  AnObject full=helper.fill(new AnObject());\n  Object value=getPropertyValue(full,\"untypedLinkedListField\");\n  assertTrue(value instanceof List);\n  assertFalse(((List)value).isEmpty());\n  assertEquals(1L,((List)value).get(0));\n  assertTrue(helper.areEquals(full,full));\n  assertFalse(helper.areEquals(empty,full));\n}\n"}
{"nl": "Add all resize handles into a single array", "code": "private void addResizeHandles(){\n  mResizeHandles.add(mLeftTop);\n  mResizeHandles.add(mLeftBottom);\n  mResizeHandles.add(mRightTop);\n  mResizeHandles.add(mRightBottom);\n  if (mWidget instanceof Guideline) {\n    mResizeHandles.add(mLeftSide);\n    mResizeHandles.add(mTopSide);\n  }\n else {\n    if (USE_SIDE_RESIZE) {\n      mResizeHandles.add(mLeftSide);\n      mResizeHandles.add(mTopSide);\n      mResizeHandles.add(mRightSide);\n      mResizeHandles.add(mBottomSide);\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PlacesGetByIdQuery(VkApiClient client,UserActor actor,int... places){\n  super(client,\"places.getById\",Utils.buildParametrizedType(List.class,Place.class));\n  accessToken(actor.getAccessToken());\n  places(places);\n}\n"}
{"nl": "assigns coordinates to nodes", "code": "private void assignCoordinatesToNodes(boolean useWeights,PhyloTreeView view) throws NotOwnerException {\n  PhyloTree graph=(PhyloTree)view.getGraph();\n  if (graph.getNumberOfNodes() == 0)   return;\n  Node v=graph.getTaxon2Node(1);\n  view.setLocation(v,new Point2D.Float(0,0));\n  BitSet splitsInPath=new BitSet();\n  NodeSet nodesVisited=new NodeSet(graph);\n  assignCoordinatesToNodesRec(v,splitsInPath,nodesVisited,useWeights,view);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetCatalogSectionQuery(VkApiClient client,UserActor actor,String sectionId,String from){\n  super(client,\"video.getCatalogSection\",GetCatalogSectionResponse.class);\n  accessToken(actor.getAccessToken());\n  sectionId(sectionId);\n  from(from);\n}\n"}
{"nl": "trigger to redraw the indicator when the ViewPager's selected item changed!", "code": "private void trigger(int position,float positionOffset){\n  CircleIndicator.this.mCurItemPosition=position;\n  CircleIndicator.this.mCurItemPositionOffset=positionOffset;\n  requestLayout();\n  invalidate();\n}\n"}
{"nl": "DoWhile Stmts Creation", "code": "private void createDo2(polyglot.ast.Do doStmt){\n  soot.jimple.Stmt noop1=soot.jimple.Jimple.v().newNopStmt();\n  body.getUnits().add(noop1);\n  endControlNoop.push(soot.jimple.Jimple.v().newNopStmt());\n  condControlNoop.push(soot.jimple.Jimple.v().newNopStmt());\n  createStmt(doStmt.body());\n  soot.jimple.Stmt continueStmt=condControlNoop.pop();\n  body.getUnits().add(continueStmt);\n  condControlNoop.push(continueStmt);\n  if (labelMap != null && labelMap.containsKey(doStmt)) {\n    body.getUnits().add(labelMap.get(doStmt));\n  }\n  polyglot.ast.Expr condition=doStmt.cond();\n  createBranchingExpr(condition,noop1,true);\n  body.getUnits().add((endControlNoop.pop()));\n  condControlNoop.pop();\n}\n"}
{"nl": "Start operations to move one or several files", "code": "public void moveFiles(Collection<OCFile> files,OCFile targetFolder){\n  for (  OCFile file : files) {\n    Intent service=new Intent(mFileActivity,OperationsService.class);\n    service.setAction(OperationsService.ACTION_MOVE_FILE);\n    service.putExtra(OperationsService.EXTRA_NEW_PARENT_PATH,targetFolder.getRemotePath());\n    service.putExtra(OperationsService.EXTRA_REMOTE_PATH,file.getRemotePath());\n    service.putExtra(OperationsService.EXTRA_ACCOUNT,mFileActivity.getAccount());\n    mWaitingForOpId=mFileActivity.getOperationsServiceBinder().queueNewOperation(service);\n  }\n  mFileActivity.showLoadingDialog(mFileActivity.getString(R.string.wait_a_moment));\n}\n"}
{"nl": "Chain a stream of functions into a single function, which applies each one after the other", "code": "private <T>UnaryOperator<T> chainOperators(Stream<UnaryOperator<T>> operators){\n  return operators.reduce(UnaryOperator.identity(),null);\n}\n"}
{"nl": "This method stores all legion announcements", "code": "private void storeLegionAnnouncements(Legion legion){\n  for (int i=0; i < (legion.getAnnouncementList().size() - 7); i++) {\n    removeAnnouncement(legion.getLegionId(),legion.getAnnouncementList().firstEntry().getKey());\n    legion.removeFirstEntry();\n  }\n}\n"}
{"nl": "Formats the json content and print it", "code": "@Override public void json(String json){\n  if (TextUtils.isEmpty(json)) {\n    d(\"Empty/Null json content\");\n    return;\n  }\n  try {\n    json=json.trim();\n    if (json.startsWith(\"{\")) {\n      JSONObject jsonObject=new JSONObject(json);\n      String message=jsonObject.toString(JSON_INDENT);\n      d(message);\n      return;\n    }\n    if (json.startsWith(\"[\")) {\n      JSONArray jsonArray=new JSONArray(json);\n      String message=jsonArray.toString(JSON_INDENT);\n      d(message);\n    }\n  }\n catch (  JSONException e) {\n    e(e.getCause().getMessage() + \"\\n\" + json);\n  }\n}\n"}
{"nl": "Releases given id", "code": "public void releaseId(int id){\n  try {\n    lock.lock();\n    boolean status=idList.get(id);\n    if (!status) {\n      throw new IDFactoryError(\"ID \" + id + \" is not taken, can't release it.\");\n    }\n    idList.clear(id);\n    if (id < nextMinId || nextMinId == Integer.MIN_VALUE) {\n      nextMinId=id;\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "backup the whole data from file", "code": "public static void backup(String filename){\n  File f=new File(filename);\n  f.getParentFile().mkdirs();\n  try {\n    ZipOutputStream zip=new ZipOutputStream(new FileOutputStream(f));\n    zip.putNextEntry(new ZipEntry(\"db\"));\n    PrintStream out=new PrintStream(zip);\n    Set<String> c1=getCollections();\n    log.debug(\"collections=\" + c1);\n    for (    String table : c1) {\n      _backup(out,table);\n    }\n    zip.closeEntry();\n    zip.close();\n  }\n catch (  Exception e) {\n  }\n}\n"}
{"nl": "CORS Processing", "code": "public void doFilter(ServletRequest req,ServletResponse res,FilterChain chain) throws IOException, ServletException {\n  HttpServletResponse response=(HttpServletResponse)res;\n  response.setHeader(\"Access-Control-Allow-Origin\",\"*\");\n  response.setHeader(\"Access-Control-Allow-Methods\",\"POST, GET, OPTIONS, DELETE\");\n  response.setHeader(\"Access-Control-Max-Age\",\"3600\");\n  response.setHeader(\"Access-Control-Allow-Headers\",\"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With\");\n  chain.doFilter(req,res);\n}\n"}
{"nl": "Change the adapted directory for a new one", "code": "public void swapDirectory(OCFile directory,FileDataStorageManager updatedStorageManager,boolean onlyOnDevice){\n  if (updatedStorageManager != null && updatedStorageManager != mStorageManager) {\n    mStorageManager=updatedStorageManager;\n    mAccount=AccountUtils.getCurrentOwnCloudAccount(mContext);\n  }\n  if (mStorageManager != null) {\n    mFiles=mStorageManager.getFolderContent(directory,onlyOnDevice);\n    if (mJustFolders) {\n      mFiles=getFolders(mFiles);\n    }\n    if (!mShowHiddenFiles) {\n      mFiles=filterHiddenFiles(mFiles);\n    }\n  }\n else {\n    mFiles=null;\n  }\n  mFiles=FileStorageUtils.sortOcFolder(mFiles);\n  mFilesAll.clear();\n  mFilesAll.addAll(mFiles);\n  notifyDataSetChanged();\n}\n"}
{"nl": "add a long switch (--switch=value) with the given name and value applying the unary operator on the key", "code": "public CommandBuilder withLongSwitch(String switchName,Object value,UnaryOperator<String> switchNameMapper){\n  if (value != null) {\n    switches.add(String.format(\"--%s='%s'\",switchNameMapper.apply(switchName),escapeQuotedSwitch(String.valueOf(value))));\n  }\n else {\n    switches.add(\"--\" + switchNameMapper.apply(switchName));\n  }\n  return this;\n}\n"}
{"nl": "Remove any reference to this object from the cache", "code": "@Override protected void finalize() throws Throwable {\n  super.finalize();\n  _map.remove(_key,_value);\n}\n"}
{"nl": "Test to verify listeners defined in the BPMN xml are added to the process definition and are active, for all entity types", "code": "@Deployment public void testProcessDefinitionListenerDefinitionEntities() throws Exception {\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"testEventListeners\");\n  assertNotNull(processInstance);\n  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n  assertNotNull(task);\n  TestActivitiEventListener theListener=(TestActivitiEventListener)processEngineConfiguration.getBeans().get(\"testAttachmentEventListener\");\n  assertNotNull(theListener);\n  assertEquals(0,theListener.getEventsReceived().size());\n  taskService.createAttachment(\"test\",task.getId(),processInstance.getId(),\"test\",\"test\",\"url\");\n  assertEquals(2,theListener.getEventsReceived().size());\n  assertEquals(ActivitiEventType.ENTITY_CREATED,theListener.getEventsReceived().get(0).getType());\n  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,theListener.getEventsReceived().get(1).getType());\n}\n"}
{"nl": "Required for Externalizable", "code": "public LocalCacheResponseEntryPacket(){\n  throw new IllegalStateException(\"This constructor is required for Externalizable and should not be called directly.\");\n}\n"}
{"nl": "compute euclidean distance to given vector", "code": "public double distance(VectorN vector){\n  double d=0d;\n  for (int i=0; i < size(); i++) {\n    double x=vector.get(0) - get(0);\n    double y=vector.get(1) - get(1);\n    d+=x * x + y * y;\n  }\n  return Math.sqrt(d);\n}\n"}
{"nl": "All modifiers of stones will be applied to character", "code": "private static void addStonesStats(Item item,Set<? extends ManaStone> itemStones,CreatureGameStats<?> cgs){\n  if (itemStones == null || itemStones.size() == 0) {\n    return;\n  }\n  for (  ManaStone stone : itemStones) {\n    addStoneStats(item,stone,cgs);\n  }\n}\n"}
{"nl": "return true if entry belongs to the partition of the space, false if entry is not from space partition", "code": "public boolean isEntryFromPartition(IEntryHolder entryHolder){\n  final Object routingValue=entryHolder.getRoutingValue();\n  if (routingValue == null)   return false;\n  if (!_clusterInfo.isPartitioned())   return true;\n  final int partitionId=PartitionedClusterUtils.getPartitionId(routingValue,_clusterInfo.getNumberOfPartitions());\n  return partitionId == _partitionId;\n}\n"}
{"nl": "Return a new ConsList consisting of the given items", "code": "@SafeVarargs public static <T>ConsList<T> List(T... a){\n  if ((a == null) || (a.length == 0)) {\n    return new ConsListImpl<>();\n  }\n  return new ConsListImpl<>(Arrays.asList(a),false);\n}\n"}
{"nl": "Checks whether the given type is a string", "code": "protected boolean isStringType(Type tp){\n  if (!(tp instanceof RefType))   return false;\n  RefType refType=(RefType)tp;\n  return refType.getClassName().equals(\"java.lang.String\");\n}\n"}
{"nl": "Remove the given animation from the list of running animations", "code": "public void removeAnimation(Animation animation){\n  mAnimations.remove(animation);\n}\n"}
{"nl": "next() method for getting another K/V pair off disk from the SVMLight text file", "code": "@Override public List<Writable> next(){\n  Text t=(Text)super.next().iterator().next();\n  String val=new String(t.getBytes());\n  List<Writable> ret=new ArrayList<>();\n  StringTokenizer tok;\n  int index, max;\n  String col;\n  double value;\n  try {\n    max=0;\n    tok=new StringTokenizer(val,\" \\t\");\n    tok.nextToken();\n    while (tok.hasMoreTokens()) {\n      col=tok.nextToken();\n      if (col.startsWith(\"#\"))       break;\n      if (col.startsWith(\"qid:\"))       continue;\n      index=Integer.parseInt(col.substring(0,col.indexOf(\":\")));\n      if (index > max)       max=index;\n    }\n    tok=new StringTokenizer(val,\" \\t\");\n    double classVal=Double.parseDouble(tok.nextToken());\n    while (tok.hasMoreTokens()) {\n      col=tok.nextToken();\n      if (col.startsWith(\"#\"))       break;\n      if (col.startsWith(\"qid:\"))       continue;\n      index=Integer.parseInt(col.substring(0,col.indexOf(\":\")));\n      value=Double.parseDouble(col.substring(col.indexOf(\":\") + 1));\n      ret.add(new DoubleWritable(value));\n    }\n    ret.add(new DoubleWritable(classVal));\n  }\n catch (  Exception e) {\n    log.error(\"Error parsing line '\" + val + \"': \",e);\n  }\n  return ret;\n}\n"}
{"nl": "Convert the specified column from an integer representation to a categorical representation, given the specified mapping between integer indexes and state names", "code": "public Builder integerToCategorical(String columnName,Map<Integer,String> categoryIndexNameMap){\n  return transform(new IntegerToCategoricalTransform(columnName,categoryIndexNameMap));\n}\n"}
{"nl": "Returns <code>true</code> if there is a lease renewal manager associated with this transaction", "code": "public boolean hasLeaseRenewalManager(){\n  return leaseRenewalManager != null;\n}\n"}
{"nl": "Find previous instance", "code": "public boolean findPrevious(String regularExpression){\n  return findAndUncollapseNext(regularExpression,true,false) > 0;\n}\n"}
{"nl": "Checks if dual one-handed weapon is equiped in any slot combination", "code": "public boolean hasDualWeaponEquipped(ItemSlot slot){\n  ItemSlot[] slotValues=ItemSlot.getSlotsFor(slot.getSlotIdMask());\n  if (slotValues.length == 0) {\n    return false;\n  }\n  for (  ItemSlot s : slotValues) {\n    Item weapon=equipment.get(s.getSlotIdMask());\n    if (weapon == null || weapon.getItemTemplate().isTwoHandWeapon()) {\n      continue;\n    }\n    if (weapon.getItemTemplate().getWeaponType() != null) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "When TombStones are Dead, first Door opens 457 = First Door in Tormet > 118 after second Boss 64 = Second Door in Terror", "code": "private boolean checkTombStones(int level){\nswitch (level) {\ncase 1:\n    if (getNpcs(702673).isEmpty() && getNpcs(702674).isEmpty() && getNpcs(702675).isEmpty()) {\n      return true;\n    }\n  break;\ncase 3:\nbreak;\n}\nreturn false;\n}\n"}
{"nl": "Get the name of the role the given type will play when it is contained in another type", "code": "default String roleChildName(String type){\n  return String.format(ROLE_CHILD,type);\n}\n"}
{"nl": "1) using window to get DecorView , 2) remove content view of DecorView, 3) replace with new content", "code": "public static void replaceContentView(Window window,ViewGroup newContentView){\n  ViewGroup decorView=(ViewGroup)window.getDecorView();\n  View content=decorView.getChildAt(0);\n  decorView.removeView(content);\n  newContentView.addView(content);\n  decorView.addView(newContentView);\n}\n"}
{"nl": "clear the grammar pool", "code": "@Override public void clear(){\nsynchronized (fGrammarPool) {\n    fGrammarPool.clear();\n  }\n}\n"}
{"nl": "This method will be used to get the sorted row", "code": "public Object[] next(){\n  return getSortedRecordFromFile();\n}\n"}
{"nl": "Check to see if the menu drawer is currently open", "code": "private boolean isMenuDrawerOpen(){\n  if (mDrawerLayout != null) {\n    return mDrawerLayout.isDrawerOpen(MENU_DRAWER_GRAVITY);\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Throw exception if value out of range (int version)", "code": "private static short rangeCheck(int value) throws NumberFormatException {\n  if (value < MIN_VALUE || value > MAX_VALUE) {\n    throw new NumberFormatException(\"Value is out of range : \" + value);\n  }\n  return (short)value;\n}\n"}
{"nl": "Sort order", "code": "public BoardGetCommentsQuery sort(BoardGetCommentsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Shutdown the server", "code": "@RequestMapping(value=\"/servers/shutdown\",method=RequestMethod.POST) public JsonResponse shutdownServer(@RequestParam(\"server\") String server){\n  serverService.shutdownServer(server);\n  return JsonResponse.ok(true);\n}\n"}
{"nl": "Parse and resolve a graql template", "code": "public String parseTemplate(String templateString,Map<String,Object> data){\n  GraqlTemplateLexer lexer=getLexer(templateString);\n  CommonTokenStream tokens=new CommonTokenStream(lexer);\n  GraqlTemplateParser parser=getParser(tokens);\n  parser.setBuildParseTree(true);\n  ParseTree tree=parser.template();\n  TemplateVisitor visitor=new TemplateVisitor(tokens,data,macros);\n  return visitor.visit(tree).toString();\n}\n"}
{"nl": "Default implement for check can perform pull to refresh", "code": "public static boolean checkContentCanBePulledUp(PtrFrameLayout frame,View content,View header){\n  return !canChildScrollDown(content);\n}\n"}
{"nl": "If Cell is Sticky, need wraped FrameLayout", "code": "@Override protected WXFrameLayout initComponentHostView(Context context){\n  if (isSticky()) {\n    WXFrameLayout view=new WXFrameLayout(context);\n    mRealView=new WXFrameLayout(context);\n    view.addView(mRealView);\n    return view;\n  }\n else {\n    WXFrameLayout view=new WXFrameLayout(context);\n    mRealView=view;\n    return view;\n  }\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(full);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ReplicationPolicy copy=(ReplicationPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(full,copy));\n}\n"}
{"nl": "When valuePosition is OutsideSlice, this allows variable line length", "code": "@Override public boolean isValueLineVariableLength(){\n  return mValueLineVariableLength;\n}\n"}
{"nl": "Validate a resource", "code": "protected boolean validate(Object obj){\n  return ((PoolableThread)obj).isAlive();\n}\n"}
{"nl": "share email", "code": "protected void shareByEmail(){\n  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_EMAIL,getShareData(ShareConstant.SHARE_CHANNEL_EMAIL),ShareConstant.REQUEST_CODE);\n}\n"}
{"nl": "Something has changed in our selection", "code": "@Override public void onSelectionChanged(Selection selection){\n  SelectionModel selectionModel=myNlModel.getSelectionModel();\n  if (selection.isEmpty()) {\n    selectionModel.clear();\n    return;\n  }\n  List<NlComponent> components=new ArrayList<>();\n  for (  Selection.Element selectedElement : mySelection.getElements()) {\n    if (selectedElement.widget == myDragDropWidget) {\n      continue;\n    }\n    WidgetCompanion companion=(WidgetCompanion)selectedElement.widget.getCompanionWidget();\n    NlComponent component=(NlComponent)companion.getWidgetModel();\n    components.add(component);\n  }\n  if (!components.isEmpty()) {\n    selectionModel.setSelection(components);\n  }\n else {\n    selectionModel.clear();\n  }\n}\n"}
{"nl": "Creates new 3D point from 2D point and z coord", "code": "public Point3D(Point2D point,float z){\n  this(point.getX(),point.getY(),z);\n}\n"}
{"nl": "Save a Bitmap to a local file", "code": "public static void saveBitmapToFile(Bitmap bmp,String fullPathWithFileName) throws IOException {\n  FileOutputStream out=null;\n  try {\n    out=new FileOutputStream(createParentDirIfNotExists(fullPathWithFileName));\n    bmp.compress(Bitmap.CompressFormat.PNG,100,out);\n  }\n  finally {\n    try {\n      if (out != null) {\n        out.close();\n      }\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"}
{"nl": "Set a String value in the preferences editor, to be written back once", "code": "public static void putString(String key,String value){\n  prefs.edit().putString(key,value).commit();\n}\n"}
{"nl": "inflate the current SAM line by replacing all & by the corresponding field in the previous SAM line", "code": "public static String inflate(String previous,String current){\n  if (previous == null)   return current;\n  StringBuilder buf=new StringBuilder();\n  int start1=0;\n  int start2=0;\n  while (start1 < previous.length() && start2 < current.length()) {\n    int end1=start1;\n    while (end1 < previous.length() && previous.charAt(end1) != '\\t') {\n      end1++;\n    }\n    int end2=start2;\n    while (end2 < current.length() && current.charAt(end2) != '\\t') {\n      end2++;\n    }\n    if (current.charAt(start2) == '&' && end2 == start2 + 1) {\n      for (int i=start1; i < end1; i++)       buf.append(previous.charAt(i));\n    }\n else {\n      for (int i=start2; i < end2; i++)       buf.append(current.charAt(i));\n    }\n    if (end2 < current.length())     buf.append(\"\\t\");\n    start1=end1 + 1;\n    start2=end2 + 1;\n  }\n  return buf.toString();\n}\n"}
{"nl": "display the dialog and then execute the command entered, if any", "code": "public void actionPerformed(ActionEvent event){\n  final Director newDir=Director.newProject();\n  newDir.getMainViewer().getFrame().setVisible(true);\n  newDir.getMainViewer().setDoReInduce(true);\n  newDir.getMainViewer().setDoReset(true);\n  boolean ok=false;\n  final CompareWindow compareWindow=new CompareWindow(newDir.getMainViewer().getFrame(),newDir,null);\n  if (!compareWindow.isCanceled()) {\n    String command=compareWindow.getCommand();\n    if (command != null) {\n      newDir.execute(command,newDir.getCommandManager());\n      ok=true;\n    }\n  }\n  if (!ok) {\n    try {\n      newDir.close();\n    }\n catch (    CanceledException e) {\n      e.printStackTrace();\n    }\n    ProjectManager.removeProject(newDir);\n  }\n}\n"}
{"nl": "calculates the distance between two widgets (assumed to be rectangles)", "code": "static float distance(ScoutWidget a,ScoutWidget b){\n  float ax1, ax2, ay1, ay2;\n  float bx1, bx2, by1, by2;\n  ax1=a.mX;\n  ax2=a.mX + a.mWidth;\n  ay1=a.mY;\n  ay2=a.mY + a.mHeight;\n  bx1=b.mX;\n  bx2=b.mX + b.mWidth;\n  by1=b.mY;\n  by2=b.mY + b.mHeight;\n  float xdiff11=Math.abs(ax1 - bx1);\n  float xdiff12=Math.abs(ax1 - bx2);\n  float xdiff21=Math.abs(ax2 - bx1);\n  float xdiff22=Math.abs(ax2 - bx2);\n  float ydiff11=Math.abs(ay1 - by1);\n  float ydiff12=Math.abs(ay1 - by2);\n  float ydiff21=Math.abs(ay2 - by1);\n  float ydiff22=Math.abs(ay2 - by2);\n  float xmin=Math.min(Math.min(xdiff11,xdiff12),Math.min(xdiff21,xdiff22));\n  float ymin=Math.min(Math.min(ydiff11,ydiff12),Math.min(ydiff21,ydiff22));\n  boolean yOverlap=ay1 <= by2 && by1 <= ay2;\n  boolean xOverlap=ax1 <= bx2 && bx1 <= ax2;\n  float xReturn=(yOverlap) ? xmin : (float)Math.hypot(xmin,ymin);\n  float yReturn=(xOverlap) ? ymin : (float)Math.hypot(xmin,ymin);\n  return Math.min(xReturn,yReturn);\n}\n"}
{"nl": "Creates a storable time fence which will be valid in the given daily time frame", "code": "public static StorableTimeFence inDailyInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(DAILY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n"}
{"nl": "Parses -path parameter", "code": "public static String parse(CommandLineParser.Parameter[] params) throws IOException {\n  String path=null;\n  for (int i=0; i < params.length; i++) {\n    if (params[i].getName().equalsIgnoreCase(PATH_PARAMETER)) {\n      for (int j=0; j < params[i].getArguments().length; j++) {\n        path=params[i].getArguments()[j];\n        break;\n      }\n    }\n  }\n  return path;\n}\n"}
{"nl": "Create option menus and update title", "code": "@Override public boolean onCreateOptionsMenu(Menu menu){\n  if (menu.findItem(menuCameraId) == null) {\n    menuCamera=menu.add(Menu.NONE,menuCameraId,1,getString(R.string.camera));\n    menuCamera.setIcon(R.drawable.ic_camera_white);\n    menuCamera.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);\n    menuCamera.setVisible(showCamera);\n  }\n  if (menu.findItem(menuDoneId) == null) {\n    menuDone=menu.add(Menu.NONE,menuDoneId,2,getString(R.string.done));\n    menuDone.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);\n  }\n  updateTitle();\n  return true;\n}\n"}
{"nl": "Create an <code>unsigned short</code>", "code": "private UShort(String value) throws NumberFormatException {\n  this.value=Integer.parseInt(value);\n  rangeCheck();\n}\n"}
{"nl": "/*     ", "code": "@deprecated public VariableField(String string){\n  this(string,false);\n}\n"}
{"nl": "Compute all possible positions for the north, south, east, and west borders of a group", "code": "private static void allPositions(ScoutWidget[] list,int[] north,int[] south,int[] west,int[] east){\n  for (int i=1; i < list.length; i++) {\n    int k=i - 1;\n    north[k]=list[i].mConstraintWidget.getY();\n    west[k]=list[i].mConstraintWidget.getX();\n    south[k]=list[i].mConstraintWidget.getHeight() + north[k];\n    east[k]=list[i].mConstraintWidget.getWidth() + west[k];\n  }\n}\n"}
{"nl": "Creates the format with JPEG compression", "code": "private void createMOVFormat(){\n  videoFormat=new VideoFormat(VideoFormat.JPEG,new Dimension(mip.getMWidth(),mip.getMHeight()),Format.NOT_SPECIFIED,Format.byteArray,mip.getFPS());\n}\n"}
{"nl": "matrix multiplication", "code": "public static double[][] multiply(double[][] x,double[][] y){\n  final int rowsX=x.length;\n  final int colsX=x[0].length;\n  final int rowsY=y.length;\n  final int colsY=y[0].length;\n  if (colsX != rowsY)   throw new RuntimeException(\"multiply(x,y): incompatible dimensions\");\n  final double[][] z=new double[rowsX][colsY];\n  for (int a=0; a < rowsX; a++) {\n    for (int b=0; b < colsY; b++) {\n      double value=0;\n      for (int c=0; c < colsX; c++) {\n        value+=x[a][c] * y[c][b];\n      }\n      z[a][b]=value;\n    }\n  }\n  return z;\n}\n"}
{"nl": "compute the size of the classification", "code": "private int computeSize(Map<Integer,Integer[]> integerMap){\n  int count=0;\n  for (  Integer taxonId : integerMap.keySet()) {\n    Integer value=integerMap.get(taxonId)[0];\n    if (value != null)     count+=value;\n  }\n  return count;\n}\n"}
{"nl": "big-endian buff convert to int", "code": "public static int buff2int(byte[] bs,int offset){\n  return (((int)(bs[offset] >= 0 ? bs[offset] : 256 + bs[offset])) << 24) | (((int)(bs[offset + 1] >= 0 ? bs[offset + 1] : 256 + bs[offset + 1])) << 16) | (((int)(bs[offset + 2] >= 0 ? bs[offset + 2] : 256 + bs[offset + 2])) << 8)| ((int)(bs[offset + 3] >= 0 ? bs[offset + 3] : 256 + bs[offset + 3]));\n}\n"}
{"nl": "Process id: 5 statusTagId: 100 aliveTagId: 101", "code": "public static Configuration createProcess(){\n  Configuration configuration=new Configuration();\n  Process process=Process.create(\"P_INI_TEST\").id(5L).statusTag(StatusTag.create(\"P:STATUS\").id(100L).build()).aliveTag(AliveTag.create(\"P:ALIVE\").id(101L).build(),60000).build();\n  configuration.addEntity(process);\n  return configuration;\n}\n"}
{"nl": "Constructs the default interceptor", "code": "Interceptor(){\n  start=0.0f;\n  mid=0.0f;\n  end=0.0f;\n}\n"}
{"nl": "To write as link header", "code": "public String toString(){\n  StringBuilder builder=new StringBuilder(\"<\");\n  builder.append(href).append(\">; rel=\").append(relationship);\n  if (type != null)   builder.append(\"; type=\").append(type);\n  return builder.toString();\n}\n"}
{"nl": "column contained?", "code": "public boolean containsColumn(C columnKey){\n  if (columnKey == null)   return false;\n  for (  Map<C,V> row : dataMap.values()) {\n    if (row.containsKey(columnKey))     return true;\n  }\n  return false;\n}\n"}
{"nl": "json --> obj", "code": "public static WxUserListResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxUserListResult.class);\n}\n"}
{"nl": "Adds a listener to this class loader removal event", "code": "public boolean addListener(IClassLoaderCacheStateListener listener){\n  _specificListeners.add(new WeakReference<IClassLoaderCacheStateListener>(listener));\n  return !_dispatchingRemoved;\n}\n"}
{"nl": "Reads a string from the buffer", "code": "public static String readString(PacketBuffer buf){\n  return buf.readStringFromBuffer(buf.readInt());\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show findToolbar=true;\");\n}\n"}
{"nl": "create new array with zero entries", "code": "private static Integer[] newZeroedIntegerArray(int size){\n  Integer[] result=new Integer[size];\n  for (int i=0; i < size; i++)   result[i]=0;\n  return result;\n}\n"}
{"nl": "Initializes resources", "code": "private void initResourcesIfNecessary(){\n  if (itemsPaint == null) {\n    itemsPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);\n    itemsPaint.setTextSize(TEXT_SIZE);\n    itemsPaint.setColor(0xFF666666);\n  }\n  if (valuePaint == null) {\n    valuePaint=new TextPaint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);\n    valuePaint.setTextSize(TEXT_SIZE);\n  }\n  if (centerDrawable == null) {\n    centerDrawable=getContext().getResources().getDrawable(R.drawable.wheel_val);\n  }\n  if (topShadow == null) {\n    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);\n  }\n  if (bottomShadow == null) {\n    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureSetUserLevelQuery(VkApiClient client,ServiceActor actor){\n  super(client,\"secure.setUserLevel\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetOnlineQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getOnline\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Pauses the audio output", "code": "public void pause(){\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  return viewer != null;\n}\n"}
{"nl": "Tell the client about an error during commit", "code": "private void sendCommitError(String errorMessage){\n  sendJson(Json.object(ACTION,ACTION_COMMIT,ERROR,errorMessage));\n}\n"}
{"nl": "load the list of beans, by the where", "code": "public final static <T extends Bean>List<T> load(String[] cols,String where,Object[] args,String orderby,int offset,int limit,Class<T> t){\n  Table mapping=(Table)t.getAnnotation(Table.class);\n  if (mapping == null) {\n    if (log.isErrorEnabled())     log.error(\"mapping missed in [\" + t + \"] declaretion\");\n    return null;\n  }\n  return load(mapping.name(),cols,where,args,orderby,offset,limit,t);\n}\n"}
{"nl": "Determines if list is empty", "code": "public boolean isEmpty(){\n  return this.optionsTable.isEmpty();\n}\n"}
{"nl": "Deletes the line at given position", "code": "public void removeLineAt(int pos) throws BadLocationException {\n  Element e=getParagraphElement(pos);\n  remove(e.getStartOffset(),getElementLength(e));\n}\n"}
{"nl": "Set access key", "code": "public PhotosGetTagsQuery accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesMarkAsReadQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.markAsRead\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesAllowMessagesFromCommunityQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"messages.allowMessagesFromCommunity\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "validate a value, and return the compiled form", "code": "@Override public Object validate(String content,ValidationContext context,ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {\n  if (context == null)   context=fEmptyContext;\n  if (validatedInfo == null)   validatedInfo=new ValidatedInfo();\n else   validatedInfo.memberType=null;\n  boolean needNormalize=context == null || context.needToNormalize();\n  Object ob=getActualValue(content,context,validatedInfo,needNormalize);\n  validate(context,validatedInfo);\n  return ob;\n}\n"}
{"nl": "Player should be in group before disconnection", "code": "@Override public boolean checkCondition(){\n  return group.hasMember(player.getObjectId());\n}\n"}
{"nl": "Euclidean distance", "code": "public double EuclideanDistance(double[] x,double[] y){\n  double sum=0;\n  if (x.length != y.length) {\n    throw new RuntimeException(\"Given array lengths were not equal.\");\n  }\n  int d=x.length;\n  for (int i=0; i < d; i++) {\n    sum=sum + (x[i] - y[i]) * (x[i] - y[i]);\n  }\n  sum=Math.sqrt(sum);\n  return sum;\n}\n"}
{"nl": "Creates a new instance of TextSpectralSpellPreprocessor", "code": "public TextSpectralSpellPreprocessor(String sArgs){\n  tWords=null;\n  hFoundWords=new Hashtable();\n  sWordMapSem=new Semaphore(1);\n  Args=sArgs.split(\" \");\n}\n"}
{"nl": "if you want addCurrentTimeZoneOffset to your date, just call this method", "code": "public void shouldAddCurrentTimeZoneOffsetToDate(){\n  addCurrentTimeZoneOffsetToDate=true;\n}\n"}
{"nl": "Target will die with all notifications using ai's owner as the last attacker", "code": "public static void killSilently(AbstractAI ai2,Creature target){\n  target.getController().onDie(ai2.getOwner());\n}\n"}
{"nl": "Set \"client secret\"", "code": "protected T clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsSearchQuery(VkApiClient client,UserActor actor,String q){\n  super(client,\"docs.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  q(q);\n}\n"}
{"nl": "Returns true if field status is set (has been assigned a value) and false otherwise", "code": "public boolean isSetStatus(){\n  return __isset_bit_vector.get(__STATUS_ISSET_ID);\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.EUCLIDEAN);\n}\n"}
{"nl": "Handle set single space [on off] request", "code": "public ResponsePacket visit(SetUseSingleSpace request,QuerySession session){\n  ResponsePacket response=new ResponsePacket();\n  session.setUseRegularSpace(request.isUseSingleSpace());\n  return response;\n}\n"}
{"nl": "rescan the view", "code": "public void updateView(){\n  Graphics2D graphics=(Graphics2D)getGraphics();\n  if (graphics != null) {\n    Dimension size=new Dimension();\n    draw(graphics,size);\n    setPreferredSize(size);\n    revalidate();\n  }\n}\n"}
{"nl": "method to get the hash code", "code": "@Override public int hashCode(){\n  int result=info.getFilePath().hashCode();\n  result=31 * result + (int)(info.getBlockOffset() ^ (info.getBlockOffset() >>> 32));\n  result=31 * result + (int)(info.getBlockLength() ^ (info.getBlockLength() >>> 32));\n  result=31 * result + info.getSegmentId().hashCode();\n  return result;\n}\n"}
{"nl": "Request the controller to set the return route from a node to the controller", "code": "public void requestAssignSucReturnRoute(int nodeId){\n  enqueue(new AssignSucReturnRouteMessageClass().doRequest(nodeId,getCallbackId()));\n}\n"}
{"nl": "update the Bounds of circular", "code": "private void updateBounds(int top,int bottom,int left,int right){\n  bounds.set(left,top,right,bottom);\n}\n"}
{"nl": "Check if provided element height is greater than expected height", "code": "public static ExpectedCondition<Boolean> heightOfElementGreaterThan(final WebElement element,final int expectedHeight){\n  return null;\n}\n"}
{"nl": "Returns true if the axis maxIndex value has been customized (and is not calculated automatically)", "code": "public boolean isAxisMaxCustom(){\n  return mCustomAxisMax;\n}\n"}
{"nl": "Calculate the maximum of an array", "code": "static int max(float[] array){\n  int max=0;\n  float val=array[0];\n  for (int i=1; i < array.length; i++) {\n    if (val < array[i]) {\n      max=i;\n      val=array[i];\n    }\n  }\n  return max;\n}\n"}
{"nl": "Check whether mailbox contains empty letters", "code": "public boolean haveUnread(){\n  for (  Letter letter : mails.values()) {\n    if (letter.isUnread()) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Infer alignment for each column", "code": "private static int inferAlignment(ConstraintWidget[] widget){\n  float[] start=new float[widget.length];\n  float[] center=new float[widget.length];\n  float[] end=new float[widget.length];\n  for (int i=0; i < end.length; i++) {\n    if (widget[i] == null) {\n      start[i]=Float.NaN;\n      end[i]=Float.NaN;\n      center[i]=Float.NaN;\n      continue;\n    }\n    start[i]=widget[i].getX();\n    end[i]=start[i] + widget[i].getWidth();\n    center[i]=(start[i] + end[i]) / 2;\n  }\n  float startDiv=standardDeviation(start);\n  float centerDiv=standardDeviation(center);\n  float endDiv=standardDeviation(end);\n  if (endDiv > startDiv && centerDiv > startDiv) {\n    return ALIGN_LEFT;\n  }\n else   if (startDiv > endDiv && centerDiv > endDiv) {\n    return ALIGN_RIGHT;\n  }\n  return ALIGN_CENTER;\n}\n"}
{"nl": "Method to take an input json array format string and output a WritableArrayWritable", "code": "public static WritableArrayWritable jsonArrayStringToWritableArrayWritable(String jsonString){\n  String modString=jsonString.replaceFirst(\"\\\\[\",\"\");\n  modString=modString.replaceFirst(\"\\\\]\",\"\");\n  modString=modString.replaceAll(\"\\\"\",\"\");\n  String[] elements=modString.split(\"\\\\s*,\\\\s*\");\n  logger.debug(\"elements = \");\n  for (  String element : elements) {\n    logger.debug(\"element: \" + element);\n  }\n  return new WritableArrayWritable(elements);\n}\n"}
{"nl": "add the named sample", "code": "public void addSample(String sample,int sampleSize,BlastMode mode,int srcId,Map<String,Map<Integer,Integer[]>> sourceClassification2class2counts){\n  if (!Arrays.asList(this.getSampleNames()).contains(sample)) {\n    this.sampleSizes.add(sampleSize);\n    this.sampleNames.add(sample);\n    this.sampleUIds.add(System.currentTimeMillis());\n    this.blastModes.add(mode);\n    int tarId=Basic.getIndex(sample,this.sampleNames);\n    for (    String classification : sourceClassification2class2counts.keySet()) {\n      Map<Integer,Integer[]> sourceClass2counts=sourceClassification2class2counts.get(classification);\n      Map<Integer,Integer[]> targetClass2counts=this.classification2class2counts.get(classification);\n      if (targetClass2counts == null) {\n        targetClass2counts=new HashMap<>();\n        this.classification2class2counts.put(classification,targetClass2counts);\n      }\n      for (      Integer classId : sourceClass2counts.keySet()) {\n        Integer[] sourceCounts=sourceClass2counts.get(classId);\n        if (sourceCounts != null && srcId < sourceCounts.length && sourceCounts[srcId] != null) {\n          Integer[] targetCounts=targetClass2counts.get(classId);\n          Integer[] newCounts=new Integer[tarId + 1];\n          if (targetCounts != null) {\n            System.arraycopy(targetCounts,0,newCounts,0,targetCounts.length);\n          }\n          newCounts[tarId]=sourceCounts[srcId];\n          targetClass2counts.put(classId,newCounts);\n        }\n      }\n    }\n    if (this.totalReads >= 0)     this.totalReads+=sampleSize;\n else     this.totalReads=sampleSize;\n  }\n}\n"}
{"nl": "Re-synthesize given vocalization using FDPSOLA technology", "code": "@Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {\n  double[] pScalesArray={1.0f};\n  double[] tScalesArray={1.0f};\n  return synthesizeUsingF0Modification(backchannelNumber,pScalesArray,tScalesArray,aft);\n}\n"}
{"nl": "Test confirming fix for ACT-1731", "code": "@Deployment(resources={\"org/activiti/engine/test/api/oneTaskProcess.bpmn20.xml\"}) public void testIncludeBinaryVariables() throws Exception {\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"oneTaskProcess\",Collections.singletonMap(\"binaryVariable\",(Object)\"It is I, le binary\".getBytes()));\n  processInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).includeProcessVariables().singleResult();\n  assertNotNull(processInstance);\n  byte[] bytes=(byte[])processInstance.getProcessVariables().get(\"binaryVariable\");\n  assertEquals(\"It is I, le binary\",new String(bytes));\n}\n"}
{"nl": "Wrap an array of ConstraintWidgets into an array of InferWidgets", "code": "public static ScoutWidget[] create(ConstraintWidget[] array){\n  ScoutWidget[] ret=new ScoutWidget[array.length];\n  ConstraintWidget root=array[0];\n  ScoutWidget rootwidget=new ScoutWidget(root,null);\n  ret[0]=rootwidget;\n  int count=1;\n  for (int i=0; i < ret.length; i++) {\n    if (array[i] != root) {\n      ret[count++]=new ScoutWidget(array[i],rootwidget);\n    }\n  }\n  Arrays.sort(ret);\n  if (DEBUG) {\n    for (int i=0; i < ret.length; i++) {\n      System.out.println(\"[\" + i + \"] -> \"+ ret[i].mConstraintWidget+ \"    \"+ ret[i].mRootDistance);\n    }\n  }\n  return ret;\n}\n"}
{"nl": "Constructs new instance of <tt>CM_RECONNECT_AUTH </tt> packet", "code": "public CM_RECONNECT_AUTH(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "End effect and all effect actions This method is synchronized and prevented to be called several times which could cause unexpected behavior", "code": "public synchronized void endEffect(){\n  if (isStopped) {\n    return;\n  }\n  for (  EffectTemplate template : successEffects.values()) {\n    template.endEffect(this);\n  }\n  if (effector instanceof Player) {\n    Player player=(Player)effector;\n    if (player.getController().getStanceSkillId() == getSkillId()) {\n      PacketSendUtility.sendPacket(player,new SM_PLAYER_STANCE(player,0));\n      player.getController().startStance(0);\n    }\n  }\n  if (isToggle() && effector instanceof Player || isRiderEffect(getSkillId())) {\n    deactivateToggleSkill();\n  }\n  stopTasks();\n  effected.getEffectController().clearEffect(this);\n  this.isStopped=true;\n  this.addedToController=false;\n}\n"}
{"nl": "Subscribes an iOS/Android-based device to receive push notifications", "code": "public AccountRegisterDeviceQuery registerDevice(UserActor actor,String token,String deviceId){\n  return new AccountRegisterDeviceQuery(getClient(),actor,token,deviceId);\n}\n"}
{"nl": "Validation for ACT-821", "code": "@Deployment(resources={\"org/activiti/engine/test/history/HistoricProcessInstanceTest.testDeleteHistoricProcessInstanceWithCallActivity.bpmn20.xml\",\"org/activiti/engine/test/history/HistoricProcessInstanceTest.testDeleteHistoricProcessInstanceWithCallActivity-subprocess.bpmn20.xml\"}) public void testDeleteHistoricProcessInstanceWithCallActivity(){\n  if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {\n    ProcessInstance pi=runtimeService.startProcessInstanceByKey(\"callSimpleSubProcess\");\n    runtimeService.deleteProcessInstance(pi.getId(),\"testing\");\n    assertEquals(2L,historyService.createHistoricProcessInstanceQuery().count());\n    historyService.deleteHistoricProcessInstance(pi.getId());\n    assertEquals(0L,historyService.createHistoricProcessInstanceQuery().count());\n  }\n}\n"}
{"nl": "Create a new socket channel and set its parameters", "code": "private SocketChannel createChannel(String host,int port) throws IOException {\n  if (_logger.isLoggable(Level.FINE))   _logger.fine(\"connecting new socket channel to \" + host + \":\"+ port+ \", connect timeout=\"+ _config.getSocketConnectTimeout()+ \" keepalive=\"+ LRMIUtilities.KEEP_ALIVE_MODE);\n  SocketChannel sockChannel;\n  for (int i=0; ; ++i) {\n    sockChannel=createSocket(host,port);\n    try {\n      sockChannel.socket().connect(m_Address,(int)_config.getSocketConnectTimeout());\n      break;\n    }\n catch (    ClosedSelectorException e) {\n      handleConnectError(i,host,port,sockChannel,e);\n    }\n  }\n  sockChannel.configureBlocking(_blocking);\n  sockChannel.read(ByteBuffer.allocate(0));\n  return sockChannel;\n}\n"}
{"nl": "When press back button, show folders if view is displaying images", "code": "@Override public void onBackPressed(){\n  if (folderMode && !isDisplayingFolderView()) {\n    setFolderAdapter();\n    return;\n  }\n  setResult(RESULT_CANCELED);\n  super.onBackPressed();\n}\n"}
{"nl": "serializable toString", "code": "public static String toString(Serializable serializable){\n  if (null == serializable) {\n    return null;\n  }\n  try {\n    return (String)serializable;\n  }\n catch (  Exception e) {\n    return serializable.toString();\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=triangle;\");\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set pc1=1 pc2=2;\");\n}\n"}
{"nl": "Creates new error", "code": "public NotSetPositionException(String message,Throwable cause){\n  super(message,cause);\n}\n"}
{"nl": "Will check for new episodes by fetching full episodes list for each subscribed podcast", "code": "private void checkForNewEpisods(){\n  Logger.printInfo(TAG,\"Checking for new episodes...\");\n  ArrayList<Podcast> subscribedPodcasts;\n  try {\n    subscribedPodcasts=ProfileManager.getInstance().getSubscribedPodcasts();\n  }\n catch (  Exception e) {\n    subscribedPodcasts=new ArrayList<>();\n    Logger.printError(TAG,\"Can't get favorites\");\n    e.printStackTrace();\n  }\n  if (subscribedPodcasts.size() > 0) {\n    for (    Podcast podcast : subscribedPodcasts) {\n      try {\n        ArrayList<Episode> parsedEpisodes=BackendManager.getInstance().fetchEpisodes(podcast.getFeedUrl());\n        if (Feed.handleUpdates(parsedEpisodes,podcast)) {\n          sendNewEpisodsNotification(podcast);\n        }\n        Logger.printError(TAG,\"Finished for podcast with url: \" + podcast.getFeedUrl());\n      }\n catch (      Exception e) {\n        Logger.printError(TAG,\"Can't check for updates for podcast with url: \" + podcast.getFeedUrl());\n        e.printStackTrace();\n      }\n    }\n  }\n  Logger.printInfo(TAG,\"Finished!\");\n}\n"}
{"nl": "Bind appear event", "code": "@Override public void bindAppearEvent(WXComponent component){\n  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getRef());\n  if (appearMap == null) {\n    appearMap=new ConcurrentHashMap<>();\n  }\n  AppearData appearData=appearMap.get(component.getRef());\n  if (appearData == null) {\n    appearData=new AppearData();\n  }\n  appearData.mAppearComponent=component;\n  appearData.hasAppear=true;\n  appearMap.put(component.getRef(),appearData);\n  mAppearMap.put(getRef(),appearMap);\n}\n"}
{"nl": "Determines if current L&F is MetalLookAndFeel", "code": "public static boolean isMetalLookAndFeel(){\n  return UIUtils.isMetalLookAndFeel();\n}\n"}
{"nl": "Merges two given sorted arrays into one", "code": "public static int[] mergeArrays(int[] a1,int[] a2){\n  int[] a3=new int[a1.length + a2.length];\n  int i=0;\n  int j=0;\n  while (i + j < a3.length) {\n    if (i < a1.length && j < a2.length) {\n      if (a1[i] < a2[j]) {\n        a3[i + j]=a1[i];\n        i++;\n      }\n else {\n        a3[i + j]=a2[j];\n        j++;\n      }\n    }\n else {\n      if (i < a1.length) {\n        a3[i + j]=a1[i];\n        i++;\n      }\n      if (j < a2.length) {\n        a3[i + j]=a2[j];\n        j++;\n      }\n    }\n  }\n  return a3;\n}\n"}
{"nl": "rescan classifications after running the data processor", "code": "@Override public void updateClassifications(String[] cNames,List<UpdateItem> updateItemList,ProgressListener progressListener) throws IOException, CanceledException {\n  final UpdateItemList updateItems=(UpdateItemList)updateItemList;\n  long maxProgress=0;\n  for (int i=0; i < cNames.length; i++) {\n    maxProgress+=updateItems.getClassIds(i).size();\n  }\n  progressListener.setMaximum(maxProgress);\n  final Map<Integer,ListOfLongs>[] fName2ClassId2Location=new HashMap[cNames.length];\n  final Map<Integer,Integer>[] fName2ClassId2Weight=new HashMap[cNames.length];\n  for (int i=0; i < cNames.length; i++) {\n    fName2ClassId2Location[i]=new HashMap<>(10000);\n    fName2ClassId2Weight[i]=new HashMap<>(10000);\n  }\n  for (int i=0; i < cNames.length; i++) {\n    final Map<Integer,ListOfLongs> classId2Location=fName2ClassId2Location[i];\n    final Map<Integer,Integer> classId2weight=fName2ClassId2Weight[i];\n    for (    Integer classId : updateItems.getClassIds(i)) {\n      int weightedSize=updateItems.getSize(i,classId);\n      final ListOfLongs positions=new ListOfLongs();\n      classId2Location.put(classId,positions);\n      classId2weight.put(classId,weightedSize);\n      if (weightedSize > 0) {\n        for (UpdateItem item=updateItems.getFirst(i,classId); item != null; item=updateItems.getUpdateItem(item.getNextInClassification(i))) {\n          positions.add(item.getReadUId());\n        }\n      }\n      progressListener.incrementProgress();\n    }\n  }\n  ModifyClassificationsDAA.saveClassifications(daaHeader,cNames,fName2ClassId2Location,fName2ClassId2Weight);\n}\n"}
{"nl": "#38900 - lazy addition of GUI components", "code": "private void doInitialize(){\n  initAccessibility();\n  if (null == content) {\n    content=new StartPageContent();\n    add(content,BorderLayout.CENTER);\n    setFocusable(false);\n  }\n}\n"}
{"nl": "Fetch the comment of the given SyncInfo", "code": "private String fetchComment(SVNStatusSyncInfo info){\n  String fetchedComment=Policy.bind(\"SynchronizeView.standardIncomingChangeSetComment\");\n  IResourceVariant remoteResource=info.getRemote();\n  if (remoteResource instanceof ISVNRemoteResource) {\n    ISVNRemoteResource svnRemoteResource=(ISVNRemoteResource)remoteResource;\n    ISVNClientAdapter client=null;\n    try {\n      client=svnRemoteResource.getRepository().getSVNClient();\n      SVNUrl url=svnRemoteResource.getRepository().getRepositoryRoot();\n      SVNRevision rev=svnRemoteResource.getLastChangedRevision();\n      ISVNLogMessage[] logMessages=client.getLogMessages(url,rev,rev,false);\n      if (logMessages.length != 0) {\n        String logComment=logMessages[0].getMessage();\n        if (logComment.trim().length() != 0) {\n          fetchedComment=flattenComment(logComment);\n        }\n else {\n          fetchedComment=\"\";\n        }\n      }\n    }\n catch (    SVNException e1) {\n      if (!e1.operationInterrupted()) {\n        SVNUIPlugin.log(e1);\n      }\n    }\ncatch (    SVNClientException e) {\n      SVNUIPlugin.log(SVNException.wrapException(e));\n    }\n finally {\n      svnRemoteResource.getRepository().returnSVNClient(client);\n    }\n  }\n  return fetchedComment;\n}\n"}
{"nl": "Handle set transaction lease time", "code": "public ResponsePacket visit(SetTransaction request,QuerySession session){\n  ResponsePacket response=new ResponsePacket();\n  session.setTransaction(request.getTransaction());\n  response.setIntResult(0);\n  return response;\n}\n"}
{"nl": "store an element in segment", "code": "protected IObjectInfo<T> store_impl(Segment<T> segment,ObjectInfo<T> oi){\n  if (_invalid)   return null;\n  _size.incrementAndGet();\n  segment.incrementSize();\n  ObjectInfo<T> tail=segment.getTail();\n  tail.setForwardRef(oi);\n  oi.setBackwardRef(tail);\n  segment.setTail(oi);\n  return oi;\n}\n"}
{"nl": "create tags for parsing header line", "code": "public static String[] createTags(String cName){\n  String shortTag=Classification.createShortTag(cName);\n  String longTag=cName.toLowerCase() + \"|\";\n  if (shortTag.equals(longTag))   return new String[]{shortTag};\n else   return new String[]{shortTag,longTag};\n}\n"}
{"nl": "process the utterance", "code": "public void processUtterance(Utterance utterance) throws ProcessException {\n  Relation tokenRelation;\n  if ((tokenRelation=utterance.getRelation(Relation.TOKEN)) == null) {\n    throw new IllegalStateException(\"TokenToWords: Token relation does not exist\");\n  }\n  Item wordItem;\n  wordRelation=WordRelation.createWordRelation(utterance,this);\n  for (tokenItem=tokenRelation.getHead(); tokenItem != null; tokenItem=tokenItem.getNext()) {\n    FeatureSet featureSet=tokenItem.getFeatures();\n    String tokenVal=featureSet.getString(\"name\");\n    tokenToWords(tokenVal);\n  }\n}\n"}
{"nl": "Set key", "code": "public AccountSetPushSettingsQuery key(String value){\n  return unsafeParam(\"key\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardAddTopicQuery(VkApiClient client,UserActor actor,int groupId,String title){\n  super(client,\"board.addTopic\",Integer.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  title(title);\n}\n"}
{"nl": "Traverse view recursively from the given target view", "code": "private void traverseView(View view,Typeface typeface){\n  if (view instanceof ViewGroup) {\n    ViewGroup viewGroup=(ViewGroup)view;\n    for (int i=0; i < viewGroup.getChildCount(); i++) {\n      View v=viewGroup.getChildAt(i);\n      if (v instanceof TextView) {\n        ((TextView)v).setTypeface(typeface);\n      }\n      if (v instanceof ViewGroup) {\n        traverseView(v,typeface);\n      }\n    }\n  }\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{-0.5001,-0.5,-0.4999,-0.25,-0.0001,0.0,0.0001,0.25,1.0,1.2499,1.25,1.2501};\n}\n"}
{"nl": "Re-synthesize given vocalization using HNM technology", "code": "@Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {\n  float[] pScalesArray={1.0f};\n  float[] tScalesArray={1.0f};\n  float[] tScalesTimes={1.0f};\n  float[] pScalesTimes={1.0f};\n  return synthesizeUsingF0Modification(backchannelNumber,pScalesArray,pScalesTimes,tScalesArray,tScalesTimes,aft);\n}\n"}
{"nl": "Set the account to legal screen in order to receive valid response", "code": "public void activateAccount() throws LoginFailedException, RemoteServerException {\n  markTutorial(TutorialStateOuterClass.TutorialState.LEGAL_SCREEN);\n}\n"}
{"nl": "create an XMLContentSpec for a leaf", "code": "protected int addUniqueLeafNode(String elementName){\n  int contentSpecIndex=createContentSpec();\n  fContentSpec.setValues(XMLContentSpec.CONTENTSPECNODE_LEAF,elementName,null);\n  setContentSpec(contentSpecIndex,fContentSpec);\n  return contentSpecIndex;\n}\n"}
{"nl": "Set user id", "code": "public PlacesGetCheckinsQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "ask view to prevent user input", "code": "public void lockUserInput(){\n  locked=true;\n  tabbedPane.setEnabled(false);\n  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  statusBar.setText2(\"Busy...\");\n  getCommandManager().setEnableCritical(false);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;\n}\n"}
{"nl": "Build the suggestion list based on the suggestion value", "code": "public void build(Context context,SuggestionValue suggestionValue,List<SuggestionRow> suggestionList){\n  if (nextBuilder != null) {\n    nextBuilder.build(context,suggestionValue,suggestionList);\n  }\n}\n"}
{"nl": "Update the profile with the given response", "code": "public void updateProfile(GetPlayerResponse playerResponse){\n  updateProfile(playerResponse.getPlayerData());\n}\n"}
{"nl": "Adds skill to player according to the specified level, class and race", "code": "private static void addSkills(Player player,int level,PlayerClass playerClass,Race playerRace){\n  SkillLearnTemplate[] skillTemplates=DataManager.SKILL_TREE_DATA.getTemplatesFor(playerClass,level,playerRace);\n  PlayerSkillList playerSkillList=player.getSkillList();\n  for (  SkillLearnTemplate template : skillTemplates) {\n    if (checkLearnIsPossible(player,playerSkillList,template)) {\n      if (template.isStigma())       playerSkillList.addStigmaSkill(player,template.getSkillId(),template.getSkillLevel());\n else       playerSkillList.addSkill(player,template.getSkillId(),template.getSkillLevel());\n    }\n  }\n}\n"}
{"nl": "Clear map objects cache", "code": "public void clearCache(){\n  cachedCatchable.clear();\n  cachedMapObjects.getNearbyPokemons().clear();\n  cachedMapObjects.getCatchablePokemons().clear();\n  cachedMapObjects.getWildPokemons().clear();\n  cachedMapObjects.getDecimatedSpawnPoints().clear();\n  cachedMapObjects.getSpawnPoints().clear();\n}\n"}
{"nl": "Validating fix for ACT-2070", "code": "@Deployment public void testDeleteTaskWithChildren() throws Exception {\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"testBatchDeleteOfTask\");\n  assertNotNull(processInstance);\n  assertFalse(processInstance.isEnded());\n  Task firstTask=taskService.createTaskQuery().processInstanceId(processInstance.getId()).taskDefinitionKey(\"taskOne\").singleResult();\n  assertNotNull(firstTask);\n  taskService.complete(firstTask.getId());\n  processInstance=runtimeService.createProcessInstanceQuery().processInstanceId(processInstance.getId()).singleResult();\n  assertNull(processInstance);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Add an integer to the config", "code": "public ResourcesPoet addInteger(String name,Integer value){\n  addInteger(name,String.valueOf(value));\n  return this;\n}\n"}
{"nl": "Find a lease entry, or null", "code": "private Entry findEntryDo(Lease lease){\n  Entry e=findLeaseFromIterator(leases.values().iterator(),lease);\n  if (e == null)   e=findLeaseFromIterator(leaseInRenew.iterator(),lease);\n  return e;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public boolean isOfType(RegionType type){\n  return this.type.equals(type);\n}\n"}
{"nl": "Sets the order root first followed by outside to inside, top to bottom, left to right", "code": "@Override public int compareTo(ScoutWidget scoutWidget){\n  if (mParent == null) {\n    return -1;\n  }\n  if (mRootDistance != scoutWidget.mRootDistance) {\n    return Float.compare(mRootDistance,scoutWidget.mRootDistance);\n  }\n  if (mY != scoutWidget.mY) {\n    return Float.compare(mY,scoutWidget.mY);\n  }\n  if (mX != scoutWidget.mX) {\n    return Float.compare(mX,scoutWidget.mX);\n  }\n  return 0;\n}\n"}
{"nl": "compute correlation distance between two series", "code": "private static double computeCorrelationDistances(int n,float[] seriesA,float[] seriesB){\n  return 1 - Correlation.computePersonsCorrelationCoefficent(n,seriesA,seriesB);\n}\n"}
{"nl": "Community screen name", "code": "public GroupsEditQuery screenName(String value){\n  return unsafeParam(\"screen_name\",value);\n}\n"}
{"nl": "return true if we can save iterator creation and get a single entry", "code": "public boolean optimizeScanForSingleObject(){\n  return false;\n}\n"}
{"nl": "gets an getLetterCodeIterator over all splits", "code": "public Iterator iterator(){\n  return split2index.keySet().iterator();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedGetBannedQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getBanned\",GetBannedResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Removes and unloads the object from the manager", "code": "public final void unload(T t){\n  if (t != null) {\n    objects.invalidate(t.getId());\n  }\n}\n"}
{"nl": "URL decodes a path element", "code": "private static String decode(String pathElement){\n  try {\n    return URLDecoder.decode(pathElement,Charsets.UTF_8.name());\n  }\n catch (  UnsupportedEncodingException e) {\n    throw Throwables.propagate(e);\n  }\n}\n"}
{"nl": "Creates an iterator over the specified map", "code": "public TShortObjectIterator(TShortObjectHashMap<V> map){\n  super(map);\n  this._map=map;\n}\n"}
{"nl": "entry function for encoding computing checksum in every row,*check_data[p]", "code": "void STAR_encoding_diag1(){\n  int i, j, stripe, k;\n  char[][] tmp;\n  tmp=new char[block_nbr + 1][block_size];\n  for (stripe=0; stripe < block_nbr + 1; stripe++) {\n    for (i=0; i < data_disk_nbr; i++) {\n      for (j=0; j < block_size; j++) {\n        k=(stripe - i + p) % p;\n        if (k < block_nbr) {\n          tmp[stripe][j]^=check_data[i][(stripe - i + p) % p * block_size + j];\n        }\n      }\n    }\n  }\n  for (i=0; i < block_nbr; i++) {\n    for (j=0; j < block_size; j++) {\n      tmp[i][j]=(char)(tmp[i][j] ^ tmp[block_nbr][j]);\n    }\n  }\n  for (i=0; i < block_nbr; i++) {\n    System.arraycopy(tmp[i],0,check_data[data_disk_nbr + 1],i * block_size,block_size);\n  }\n}\n"}
{"nl": "Tests setting a parent defined for api < projectMinApi", "code": "public void testSmallApiParent(){\n  doTestForParentApi(\"android:Theme.Light\",\"apiParentTestAfter2\");\n}\n"}
{"nl": "Does this class declare a method with the given name and parameter types?", "code": "public boolean declaresMethod(String name,List<Type> parameterTypes){\n  checkLevel(SIGNATURES);\n  for (  SootMethod method : methodList) {\n    if (method.getName().equals(name) && method.getParameterTypes().equals(parameterTypes))     return true;\n  }\n  return false;\n}\n"}
{"nl": "Renews the player ranking by race", "code": "private void renewPlayerRanking(Race race){\n  List<SM_ABYSS_RANKING_PLAYERS> newlyCalculated;\n  newlyCalculated=generatePacketsForRace(race);\n  players.remove(race);\n  players.put(race,newlyCalculated);\n}\n"}
{"nl": "Shows the error in UI", "code": "private void showError(String message){\n  Toast.makeText(getContext(),message,Toast.LENGTH_SHORT).show();\n}\n"}
{"nl": "Quest updated: %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_UPDATE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300619,value0);\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"@HD\");\n}\n"}
{"nl": "Create a new Kit for the given language", "code": "public DefaultSyntaxKit(Lexer lexer){\n  super();\n  this.lexer=lexer;\n}\n"}
{"nl": "Notifies the user whenever the list has changed, and notifies immediately if triggerNow is true", "code": "@ObjectiveCName(\"subscribe:triggerNow:\") public List subscribe(ListChangedListener listChangedListener,boolean triggerNow){\n  this.listChangedListeners.add(listChangedListener);\n  if (this.listChangedListeners.size() == 1) {\n    this.record.subscribe(this.recordListeners);\n  }\n  if (triggerNow) {\n    for (    ListChangedListener listChangeListener : this.listChangedListeners) {\n      listChangeListener.onListChanged(this.name(),this.getEntries());\n    }\n  }\n  return this;\n}\n"}
{"nl": "Each skill is a separate object upon invocation Skill level will be populated from player SkillList", "code": "public Skill(SkillTemplate skillTemplate,Player effector,Creature firstTarget){\n  this(skillTemplate,effector,effector.getSkillList().getSkillLevel(skillTemplate.getSkillId()),firstTarget,null);\n}\n"}
{"nl": "put a name and id", "code": "public void put(String name,int id){\n  name2id.put(name,id);\n  id2name.put(id,name);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveGetUsersQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getUsers\",GetUsersResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Starts the streaming consumption", "code": "@Override public void startStreamingConsumption(long timeout){\n  jssc.start();\n  if (timeout < 0)   jssc.awaitTermination();\n else   jssc.awaitTermination(timeout);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.BRAYCURTIS + \";\");\n}\n"}
{"nl": "compute an ellipse", "code": "public static javafx.scene.shape.Ellipse computeEllipseFX(ArrayList<Point2D> points){\n  final double[][] array=new double[points.size()][2];\n  int i=0;\n  for (  Point2D aPoint : points) {\n    array[i][0]=aPoint.getX();\n    array[i++][1]=aPoint.getY();\n  }\n  final double[] dimensions=convertVariablesToDimension(apply(array));\n  javafx.scene.shape.Ellipse ellipse=new javafx.scene.shape.Ellipse(dimensions[0],dimensions[1],dimensions[2],dimensions[3]);\n  ellipse.setRotate(Geometry.rad2deg(dimensions[4]));\n  return ellipse;\n}\n"}
{"nl": "Verifies that two double arrays have equal entries, up to tolerance", "code": "public static void assertEquals(double expected[],double observed[],double tolerance){\n  assertEquals(\"Array comparison failure\",expected,observed,tolerance);\n}\n"}
{"nl": "For listing all pets on this character", "code": "public SM_PET(int actionId,Collection<PetCommonData> pets){\n  this.actionId=actionId;\n  this.pets=pets;\n}\n"}
{"nl": "write a float", "code": "public void writeFloat(float a) throws IOException {\n  writeInt(Float.floatToIntBits(a));\n}\n"}
{"nl": "upload appender file to storage server (by file buff)", "code": "public String upload_appender_file1(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String parts[]=this.upload_appender_file(file_buff,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set fontSize=decrease;\");\n}\n"}
{"nl": "construct from input stream", "code": "public IntIntMap(InputStream inputStream) throws IOException {\n  try (DataInputStream ins=new DataInputStream(inputStream)){\n    int magicNumber=ins.readInt();\n    if (magicNumber != MAGIC_NUMBER)     throw new IOException(\"Wrong file type\");\n    m_hasFreeKey=ins.readBoolean();\n    m_freeValue=ins.readInt();\n    m_fillFactor=ins.readFloat();\n    m_threshold=ins.readInt();\n    m_size=ins.readInt();\n    m_mask=ins.readInt();\n    m_mask2=ins.readInt();\n    final int m_data_length=ins.readInt();\n    m_data=new int[m_data_length];\n    for (int i=0; i < m_data_length; i++)     m_data[i]=ins.readInt();\n  }\n }\n"}
{"nl": "init Data", "code": "private void initData(){\n  for (int i=0; i < 2; i++) {\n    List<String> url=new ArrayList<>();\n    url.add(\"http://g.hiphotos.baidu.com/image/pic/item/c75c10385343fbf25431e823b27eca8065388f95.jpg\");\n    url.add(\"http://g.hiphotos.baidu.com/image/pic/item/960a304e251f95ca2f34115acd177f3e6609521d.jpg\");\n    mLists.add(url);\n  }\n}\n"}
{"nl": "Determine if an option was provided by the user via the CLI", "code": "public boolean hasOption(String option){\n  return commandLine.hasOption(option);\n}\n"}
{"nl": "Write an object to HDFS (or local) using default Java object serialization", "code": "public static void writeObjectToFile(String path,Object toWrite,JavaSparkContext sc) throws IOException {\n  writeObjectToFile(path,toWrite,sc.sc());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedGetSuggestedSourcesQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getSuggestedSources\",GetSuggestedSourcesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "This method add to subsriber the proper error according to the", "code": "static <T>void buildError(Subscriber<T> subscriber,DatabaseError error){\nswitch (error.getCode()) {\ncase DatabaseError.INVALID_TOKEN:\n    subscriber.onError(new FirebaseInvalidTokenException(error.getMessage()));\n  break;\ncase DatabaseError.EXPIRED_TOKEN:\nsubscriber.onError(new FirebaseExpiredTokenException(error.getMessage()));\nbreak;\ncase DatabaseError.NETWORK_ERROR:\nsubscriber.onError(new FirebaseNetworkErrorException(error.getMessage()));\nbreak;\ncase DatabaseError.PERMISSION_DENIED:\nsubscriber.onError(new FirebasePermissionDeniedException(error.getMessage()));\nbreak;\ncase DatabaseError.OPERATION_FAILED:\nsubscriber.onError(new FirebaseOperationFailedException(error.getMessage()));\nbreak;\ndefault :\nsubscriber.onError(new FirebaseGeneralException(error.getMessage()));\nbreak;\n}\n}\n"}
{"nl": "Config recyclerView when configuration changed", "code": "@Override public void onConfigurationChanged(Configuration newConfig){\n  super.onConfigurationChanged(newConfig);\n  orientationBasedUI(newConfig.orientation);\n}\n"}
{"nl": "gets the format string", "code": "public String toString(){\n  return format;\n}\n"}
{"nl": "warning log", "code": "public static void w(String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.w(TAG,buildMsg(msg),e);\n  }\n}\n"}
{"nl": "is the row header column selected?", "code": "public boolean isRowHeaderSelected(){\n  final ObservableList selectedCells=spreadsheetView.getSelectionModel().getSelectedCells();\n  try {\n    for (    Object obj : selectedCells) {\n      final int col=((TablePosition)obj).getColumn();\n      if (col == 0)       return true;\n    }\n  }\n catch (  Exception ex) {\n    if (Platform.isFxApplicationThread())     Basic.caught(ex);\n  }\n  return false;\n}\n"}
{"nl": "Add GP to a player (current player GP + added GP)", "code": "public void addGp(int additionalGp){\n  dailyGP+=additionalGp;\n  if (dailyGP < 0) {\n    dailyGP=0;\n  }\n  weeklyGP+=additionalGp;\n  if (weeklyGP < 0) {\n    weeklyGP=0;\n  }\n  int GpcappedCount=0;\n  if (CustomConfig.ENABLE_GP_CAP) {\n    GpcappedCount=(long)(currentGp + additionalGp) > CustomConfig.GP_CAP_VALUE ? (int)(CustomConfig.GP_CAP_VALUE - currentGp) : additionalGp;\n  }\n else {\n    GpcappedCount=additionalGp;\n  }\n  currentGp+=GpcappedCount;\n  if (currentGp < 0) {\n    currentGp=0;\n  }\n  AbyssRankEnum newRank=AbyssRankEnum.getRankForGp(currentGp);\n  if (newRank.getId() <= 18 && newRank.getId() > 9) {\n    setRank(newRank);\n  }\n  setPersistentState(PersistentState.UPDATE_REQUIRED);\n}\n"}
{"nl": "Called when there was an error retrieving the current flight", "code": "@Override public void onError(AirMapException e){\n  onDisconnect(false);\n}\n"}
{"nl": "Set client secret", "code": "protected AuthSignupQuery clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n"}
{"nl": "DONT REMOVE!!!! Called by the ObjectInputStream on deserialization", "code": "public Object readResolve() throws ObjectStreamException {\n  ClassLoader cl=ReflectionUtil.getClassTargetLoader(_interfaces[0]);\n  Object proxyInstance=createInstance(cl);\n  if (_cacheProxy && _handler instanceof ILRMIProxy) {\n    StubId stubId=((ILRMIProxy)_handler).getStubId();\n    if (_stubCacheLogger.isLoggable(Level.FINE))     _stubCacheLogger.fine(\"adding stub to cache, id = \" + stubId + \", stub toString() = \"+ proxyInstance);\n    LRMIRuntime.getRuntime().getStubCache().addStub(stubId,proxyInstance);\n  }\n else {\n    if (_stubCacheLogger.isLoggable(Level.FINER))     _stubCacheLogger.finer(\"stub state is uncached, skipping cache insertion. toString() = \" + proxyInstance);\n  }\n  return proxyInstance;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public CompactByteArray(String indexArray,String valueArray){\n  this(Utility.RLEStringToCharArray(indexArray),Utility.RLEStringToByteArray(valueArray));\n}\n"}
{"nl": "test indexing", "code": "public static void main(String[] args) throws Exception {\n  ByteFileGetterInMemory byteFileGetterInMemory=new ByteFileGetterInMemory(new File(\"/dev/null\"));\n  int length0=(1 << byteFileGetterInMemory.BITS);\n  for (long i=0; i < 10L * Integer.MAX_VALUE; i++) {\n    int index=byteFileGetterInMemory.dataIndex(i);\n    int pos=byteFileGetterInMemory.dataPos(i);\n    long result=(long)index * (long)length0 + (long)pos;\n    if (result != i)     throw new Exception(\"i=\" + i + \" != result=\"+ result);\n  }\n}\n"}
{"nl": "Create an <code>unsigned short</code>", "code": "private UShort(int value) throws NumberFormatException {\n  this.value=value;\n  rangeCheck();\n}\n"}
{"nl": "create a matrix which let bitmap centerCrop in the border rect", "code": "static Matrix createMatrix(Border border,Bitmap bitmap,float extraSize){\n  return createMatrix(border,bitmap.getWidth(),bitmap.getHeight(),extraSize);\n}\n"}
{"nl": "Override this method to update your headers", "code": "protected void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){\n}\n"}
{"nl": "Required for Externalizable and ISwapExternalizable", "code": "public ExternalizableServerEntry(){\n}\n"}
{"nl": "Set user id", "code": "public SecureSendNotificationQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Position Tag Adder", "code": "public static void addPosTag(soot.tagkit.Host host,polyglot.util.Position pos){\n  if (pos != null) {\n    addPosTag(host,pos.column(),pos.endColumn());\n  }\n}\n"}
{"nl": "only for externalisation", "code": "public CharacterIdChannelPair(){\n}\n"}
{"nl": "StackBlur By Jni Pixels", "code": "public static Bitmap blurNativelyPixels(Bitmap original,int radius,boolean canReuseInBitmap){\n  if (radius < 1) {\n    return null;\n  }\n  Bitmap bitmap=buildBitmap(original,canReuseInBitmap);\n  if (radius == 1) {\n    return bitmap;\n  }\n  int w=bitmap.getWidth();\n  int h=bitmap.getHeight();\n  int[] pix=new int[w * h];\n  bitmap.getPixels(pix,0,w,0,0,w,h);\n  blurPixels(pix,w,h,radius);\n  bitmap.setPixels(pix,0,w,0,0,w,h);\n  return (bitmap);\n}\n"}
{"nl": "Return connector version", "code": "@Override public String version(){\n  return PostgreSQLSinkConnector.VERSION;\n}\n"}
{"nl": "Create an <code>unsigned long</code>", "code": "public static ULong valueOf(BigInteger value) throws NumberFormatException {\n  return new ULong(value);\n}\n"}
{"nl": "Convenience method for logging SVNExceptions to the plugin log", "code": "public static void log(TeamException e){\n  log(e.getStatus());\n}\n"}
{"nl": "load audio file", "code": "private void loadAudioFile(String file) throws IllegalArgumentException, SecurityException, IllegalStateException, IOException {\n  if (this.isStreaming(file)) {\n    this.player.setDataSource(file);\n    this.player.setAudioStreamType(AudioManager.STREAM_MUSIC);\n    this.setMode(MODE.PLAY);\n    this.setState(STATE.MEDIA_STARTING);\n    this.player.setOnPreparedListener(this);\n    this.player.prepareAsync();\n  }\n else {\n    if (file.startsWith(\"/android_asset/\")) {\n      String f=file.substring(15);\n      android.content.res.AssetFileDescriptor fd=this.handler.cordova.getActivity().getAssets().openFd(f);\n      this.player.setDataSource(fd.getFileDescriptor(),fd.getStartOffset(),fd.getLength());\n    }\n else {\n      File fp=new File(file);\n      if (fp.exists()) {\n        FileInputStream fileInputStream=new FileInputStream(file);\n        this.player.setDataSource(fileInputStream.getFD());\n        fileInputStream.close();\n      }\n else {\n        this.player.setDataSource(Environment.getExternalStorageDirectory().getPath() + \"/\" + file);\n      }\n    }\n    this.setState(STATE.MEDIA_STARTING);\n    this.player.setOnPreparedListener(this);\n    this.player.prepare();\n    this.duration=getDurationInSeconds();\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n"}
{"nl": "Stores a IFallback object in the fallback file", "code": "public final void fallback(final IFallback fallbackObj) throws DataFallbackException {\n  try {\n    if (isFallbackFileEmpty())     fFileController.closeFallbackInputStream();\n    fFileController.openFallbackOutputStream();\n    fFileController.writeLine(fallbackObj);\n    fFileController.setNumberOfLines(fFileController.getNumberOfLines() + 1);\n  }\n catch (  DataFallbackException e) {\n    throw new DataFallbackException(e.getMessage());\n  }\n}\n"}
{"nl": "flip coordinates so as to fit the specified root side", "code": "private static void flipCoordinates(final PhyloTreeView treeView,final SIDE rootSide){\n  final PhyloTree tree=treeView.getPhyloTree();\n  for (Node v=tree.getFirstNode(); v != null; v=tree.getNextNode(v)) {\n    final Point2D loc=treeView.getLocation(v);\nswitch (rootSide) {\ncase TOP:\n      treeView.setLocation(v,loc.getY(),loc.getX());\n    break;\ncase BOTTOM:\n  treeView.setLocation(v,loc.getY(),-loc.getX());\nbreak;\ncase RIGHT:\ntreeView.setLocation(v,-loc.getX(),loc.getY());\nbreak;\ndefault :\ncase LEFT:\nbreak;\n}\n}\n}\n"}
{"nl": "Item category id", "code": "protected MarketAddQuery categoryId(int value){\n  return unsafeParam(\"category_id\",value);\n}\n"}
{"nl": "is node with this f id selected?", "code": "public boolean isSelected(int fId){\n  Node v=getANode(fId);\n  return v != null && getSelected(v);\n}\n"}
{"nl": "Parses the attributes required for a layout file inclusion", "code": "private void parseIncludeAttributes(String layoutFile,AXmlNode rootNode){\n  for (  Entry<String,AXmlAttribute<?>> entry : rootNode.getAttributes().entrySet()) {\n    String attrName=entry.getKey().trim();\n    AXmlAttribute<?> attr=entry.getValue();\n    if (attrName.equals(\"layout\")) {\n      if ((attr.getType() == AxmlVisitor.TYPE_REFERENCE || attr.getType() == AxmlVisitor.TYPE_INT_HEX) && attr.getValue() instanceof Integer) {\n        AbstractResource targetRes=resParser.findResource((Integer)attr.getValue());\n        if (targetRes == null) {\n          System.err.println(\"Target resource \" + attr.getValue() + \" for layout include not found\");\n          return;\n        }\n        if (!(targetRes instanceof StringResource)) {\n          System.err.println(\"Invalid target node for include tag in layout XML, was \" + targetRes.getClass().getName());\n          return;\n        }\n        String targetFile=((StringResource)targetRes).getValue();\n        if (callbackMethods.containsKey(targetFile))         for (        String callback : callbackMethods.get(targetFile))         addCallbackMethod(layoutFile,callback);\n else {\n          addToMapSet(includeDependencies,targetFile,layoutFile);\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Convert integer value to bytes", "code": "private void integerToByteArray(int value,byte[] b,int offset){\n  b[offset]=(byte)(value & 0xFF);\n  b[offset + 1]=(byte)(value >> 8 & 0xFF);\n  b[offset + 2]=(byte)(value >> 16 & 0xFF);\n  b[offset + 3]=(byte)(value >> 24 & 0xFF);\n}\n"}
{"nl": "Check if provided string matches regex", "code": "public void assertMatches(String stringToMatch,String regex){\n  assertMatches(\"\",stringToMatch,regex);\n}\n"}
{"nl": "Draw the foreground layer for the GuiContainer (everything in front of the items)", "code": "protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){\n  this.fontRendererObj.drawString(I18n.format(\"container.crafting\",new Object[0]),97,8,4210752);\n}\n"}
{"nl": "Remove alliance from league (normal leave)", "code": "public static final void removeAlliance(PlayerAlliance alliance){\n  if (alliance != null) {\n    League league=alliance.getLeague();\n    Preconditions.checkNotNull(league,\"League should not be null\");\n    league.onEvent(new LeagueLeftEvent(league,alliance));\n  }\n}\n"}
{"nl": "compute sample vs sample data", "code": "private Map<String,Collection<Pair<Number,Number>>> computeCounts(Document doc,ViewerBase viewer,ProgressListener progressListener) throws CanceledException {\n  progressListener.setTasks(cName + \" vs \" + cName,\"Sampling from current leaves\");\n  progressListener.setMaximum(11 * doc.getNumberOfSamples());\n  progressListener.setProgress(0);\n  Map<String,Collection<Pair<Number,Number>>> plotName2Counts=new HashMap<>();\n  String[] sampleNames=doc.getSampleNamesAsArray();\n  for (int i=0; i < sampleNames.length; i++) {\n    String name1=sampleNames[i];\n    for (int j=i + 1; j < sampleNames.length; j++) {\n      String name2=sampleNames[j];\n      String name=name1 + \" vs \" + name2;\n      for (      Node v : viewer.getSelectedNodes()) {\n        int[] counts=((NodeData)v.getData()).getAssigned();\n        if (j < counts.length && counts[i] > 0 || counts[j] > 0) {\n          Collection<Pair<Number,Number>> pairs=plotName2Counts.get(name);\n          if (pairs == null) {\n            pairs=new LinkedList<>();\n            plotName2Counts.put(name,pairs);\n          }\n          pairs.add(new Pair<Number,Number>(counts[i],counts[i + 1]));\n        }\n      }\n    }\n  }\n  return plotName2Counts;\n}\n"}
{"nl": "Creates a new shapeless material recipe", "code": "public ShapelessMaterialRecipe(ItemStack output,Object... input){\n  this.output=output;\n  this.matchers=new ArrayList<>();\n  for (  Object obj : input) {\n    if (obj instanceof Predicate) {\n      matchers.add((Predicate<ItemStack>)obj);\n    }\n else     if (obj instanceof ItemStack) {\n      matchers.add(ItemStackDictionary.matcherOf((ItemStack)obj));\n    }\n else     if (obj instanceof Item) {\n      matchers.add(ItemStackDictionary.matcherOf(new ItemStack((Item)obj)));\n    }\n else     if (obj instanceof Block) {\n      matchers.add(ItemStackDictionary.matcherOf(new ItemStack((Block)obj)));\n    }\n else     if (obj instanceof String) {\n      matchers.add(Dictionaries.MATERIALS.get((String)obj));\n    }\n  }\n}\n"}
{"nl": "Are we in an extension namespace?", "code": "protected boolean inExtensionNamespace(){\n  boolean inExtension=false;\n  Enumeration elements=namespaceStack.elements();\n  while (!inExtension && elements.hasMoreElements()) {\n    String ns=(String)elements.nextElement();\n    if (ns == null) {\n      inExtension=true;\n    }\n else {\n      inExtension=(!ns.equals(tr9401NamespaceName) && !ns.equals(namespaceName));\n    }\n  }\n  return inExtension;\n}\n"}
{"nl": "Post the comment as from the community;", "code": "public WallCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n"}
{"nl": "Return true if find \",member,\" | \",member$\" | \"^member,\" | \"^member$\"", "code": "private static boolean contains(String group,String member){\n  String quote=Pattern.quote(member);\n  Pattern pattern=Pattern.compile(\",\" + quote + \"$|^\"+ quote+ \",|^\"+ quote+ \"$\"+ \"|,\"+ quote+ \",\");\n  Matcher matcher=pattern.matcher(group);\n  return matcher.find();\n}\n"}
{"nl": "Calculate the number of cells on the shortest path between (x1,z1) and (x2,z2)", "code": "private int distBetweenPoints(int x1,int z1,int x2,int z2,boolean bAllowDiags){\n  int w=Math.abs(x2 - x1);\n  int h=Math.abs(z2 - z1);\n  if (bAllowDiags) {\n    if (w < h)     w=0;\n else     h=0;\n  }\n  return w + h + 1;\n}\n"}
{"nl": "Start a new Graql shell session", "code": "private void startSession(Session session,Json json){\n  String namespace=json.at(NAMESPACE).asString();\n  MindmapsGraph graph=getGraph.apply(namespace);\n  GraqlSession graqlSession=new GraqlSession(session,graph);\n  sessions.put(session,graqlSession);\n}\n"}
{"nl": "Called when plugin is stopped", "code": "public void shutdown() throws TeamException {\n  commentsManager.saveCommentHistory();\n  commentsManager.saveCommentTemplates();\n  keyFilesManager.saveKeyFilesHistory();\n}\n"}
{"nl": "Add a comment to the config", "code": "public ResourcesPoet addComment(String comment){\n  Comment commentNode=document.createComment(comment);\n  resourceElement.appendChild(commentNode);\n  return this;\n}\n"}
{"nl": "Apply for a permit", "code": "public static void applyForPermit(AirMapAvailablePermit permit,AirMapCallback<AirMapPilotPermit> listener){\n  String url=String.format(permitApplyUrl,permit.getId());\n  AirMap.getClient().postWithJsonBody(url,permit.getAsParams(),new GenericOkHttpCallback(listener,AirMapPilotPermit.class));\n}\n"}
{"nl": "add recent file listener", "code": "public static void addPropertiesListListener(PropertiesListListener listener){\n  if (!propertieslistListeners.contains(listener)) {\nsynchronized (propertieslistListeners) {\n      propertieslistListeners.add(listener);\n    }\n  }\n}\n"}
{"nl": "Set a graph from which to get information", "code": "public SQLDataMigrator graph(MindmapsGraph graph){\n  this.graph=graph;\n  return this;\n}\n"}
{"nl": "New description", "code": "protected MarketEditQuery description(String value){\n  return unsafeParam(\"description\",value);\n}\n"}
{"nl": "Initialize the Activity data", "code": "@Override protected void initData(){\n  videoFilePresenter=new VideoFilePresenter();\n  videoFilePresenter.attachView(this);\n  if (path != null && !TextUtils.isEmpty(path)) {\n    tvFilePath.setText(path);\n    rootFile=new File(path);\n    videoFilePresenter.getVideoData(rootFile);\n  }\n}\n"}
{"nl": "save mapping to file", "code": "public void saveMappingToFile(String fileName) throws IOException {\n  System.err.println(\"Writing name2id map to file: \" + fileName);\n  try (Writer w=new FileWriter(fileName)){\n    writeMapping(w);\n  }\n   System.err.println(\"Done (\" + id2name.size() + \" entries)\");\n}\n"}
{"nl": "Registers a container creator for the given ID", "code": "public GUIHandler registerContainer(String id,Function<GUIContext,Container> creator){\n  containers.put(id,creator);\n  return this;\n}\n"}
{"nl": "Add pet to player", "code": "public static void addPet(Player player,int petId,String name,int decorationId,int expireTime){\n  PetCommonData petCommonData=player.getPetList().addPet(player,petId,decorationId,name,expireTime);\n  if (petCommonData != null) {\n    PacketSendUtility.sendPacket(player,new SM_PET(1,petCommonData));\n    if (expireTime > 0) {\n      ExpireTimerTask.getInstance().addTask(petCommonData,player);\n    }\n  }\n}\n"}
{"nl": "Write a String to a file (on HDFS or local) in UTF-8 format", "code": "public static void writeStringToFile(String path,String toWrite,SparkContext sc) throws IOException {\n  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());\n  try (BufferedOutputStream bos=new BufferedOutputStream(fileSystem.create(new Path(path)))){\n    bos.write(toWrite.getBytes(\"UTF-8\"));\n  }\n }\n"}
{"nl": "Copy a string to clipboard", "code": "public static void copyToClipboard(String s){\n  StringSelection stringSelection=new StringSelection(s);\n  Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n  clipboard.setContents(stringSelection,null);\n}\n"}
{"nl": "Creates a separator", "code": "public ViewActionSeparator(){\n  this(-1);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public int hashCode(){\n  return this.text.hashCode() ^ this.pos ^ this.begin^ this.end;\n}\n"}
{"nl": "Creates a reader from an input split", "code": "@Override public RecordReader createReader(InputSplit split,Configuration conf) throws IOException, InterruptedException {\n  RecordReader reader=new ListStringRecordReader();\n  reader.initialize(conf,split);\n  return reader;\n}\n"}
{"nl": "This method will increase the kinah amount of a player", "code": "private static void increaseKinahAmount(Player player,long price){\n  player.getInventory().increaseKinah(price);\n}\n"}
{"nl": "recursively print a summary", "code": "private void listSummaryRec(ViewerBase viewer,Classification classification,NodeSet selectedNodes,Node v,int indent,Writer outs,final Single<Integer> countLines) throws IOException {\n  int id=(Integer)v.getInfo();\n  final String name=classification.getName2IdMap().get(id);\n  NodeData data=(viewer.getNodeData(v));\n  if ((selectedNodes == null || selectedNodes.contains(v))) {\n    if (data.getCountSummarized() > 0) {\n      for (int i=0; i < indent; i++)       outs.write(\" \");\n      outs.write(name + \": \" + Basic.toString(data.getSummarized(),\",\")+ \"\\n\");\n      countLines.set(countLines.get() + 1);\n    }\n  }\n  if (viewer.getCollapsedIds().contains(id)) {\n    return;\n  }\n  for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {\n    listSummaryRec(viewer,classification,selectedNodes,f.getOpposite(v),indent + 2,outs,countLines);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoSearchQuery(VkApiClient client,UserActor actor,String q){\n  super(client,\"video.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  q(q);\n}\n"}
{"nl": "Returns the most dominate emotion and the score", "code": "@NotNull public static String dominantEmotionWithScore(@NotNull Emotion emotion){\n  Map.Entry<Emotion.EmotionScore,Double> scoreVal=emotion.scores.scores().entrySet().stream().max(null).get();\n  return String.format(\"%s:%.2f\",StringUtils.capitalize(scoreVal.getKey().name()),scoreVal.getValue());\n}\n"}
{"nl": "chomp some foodie goodness!", "code": "private void eatImage(){\n  if (getBitePosition()) {\n    setBittenImage();\n  }\n}\n"}
{"nl": "Used when loading a new world", "code": "public ChunkManager(World world,long seed){\n  this.world=world;\n  loadSeed(seed);\n  generateTerrain();\n  this.random=new Random();\n}\n"}
{"nl": "Retrieve the anchor from the owner's constraint widget", "code": "public void updateAnchor(){\n  if (mOwner != null) {\n    ConstraintWidget widget=mOwner.getConstraintWidget();\n    if (widget instanceof Guideline) {\n      mAnchor=((Guideline)widget).getAnchor();\n    }\n else {\n      mAnchor=widget.getAnchor(mType);\n    }\n  }\n else {\n    mAnchor=null;\n  }\n}\n"}
{"nl": "Create a new group from a set of people", "code": "public String createGroupWithPeople(@NotNull String personGroupId,@NotNull People people){\n  Validation.validateArray(people.simplePersons(),1,1000,new ParameterValidationException(\"people\",\"People list is invalid. min 1, max 1000\"));\n  boolean exists=!Utils.throwsException(null,PersonGroupNotFoundException.class);\n  if (!exists) {\n    personGroupBuilder.createGroup(personGroupId,personGroupId,\"\").withNoResult();\n  }\n  people.simplePersons().stream().forEach(null);\n  personGroupBuilder.trainGroup(personGroupId).withNoResult();\n  return personGroupId;\n}\n"}
{"nl": "test and create new menu if not exists", "code": "private static Menu insertOrUpdate(long parent,String name,V v){\n  String node=Model.node();\n  W q=W.create().and(\"parent\",parent).and(\"name\",name).and(\"node\",node);\n  try {\n    if (Helper.exists(q,Menu.class)) {\n      Helper.update(q,v,Menu.class);\n    }\n else {\n      long id=UID.next(\"menu.id\");\n      while (Helper.exists(W.create(X.ID,id),Menu.class)) {\n        id=UID.next(\"menu.id\");\n        log.debug(\"id=\" + id);\n      }\n      Helper.insert(v.set(X.ID,id).set(\"id\",id).set(\"parent\",parent).set(\"name\",name).set(\"node\",node),Menu.class);\n    }\n  }\n catch (  Exception e1) {\n    log.error(e1.getMessage(),e1);\n  }\n  long count=Helper.count(W.create(\"parent\",parent),Menu.class);\n  Helper.update(parent,V.create(\"childs\",count),Menu.class);\n  return Helper.load(q,Menu.class);\n}\n"}
{"nl": "obj --> json", "code": "public String toJson() throws JsonGenerationException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.writeValueAsString(this);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int write(int unit){\n  int newLength=this.charsLength + 1;\n  ensureCapacity(newLength);\n  this.charsLength=newLength;\n  this.chars[(this.chars.length - this.charsLength)]=((char)unit);\n  return this.charsLength;\n}\n"}
{"nl": "Service additional payload key", "code": "private static String keyForPayload(String name){\n  return \"service_payload_\" + name;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set mode=\" + (Comparer.COMPARISON_MODE.RELATIVE) + \";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.getCommandManager().updateEnableState();\n}\n"}
{"nl": "Rename a single column", "code": "public Builder renameColumn(String oldName,String newName){\n  return transform(new RenameColumnsTransform(oldName,newName));\n}\n"}
{"nl": "Add to this vector the given vector", "code": "public Vector add(Vector other){\n  return new Vector(x + other.x,y + other.y);\n}\n"}
{"nl": "rescan the status bar", "code": "public void updateStatusBar(){\n  statusBar.setText1(\"Terms=\" + getTree().getNumberOfNodes());\n  final long totalReads=doc.getNumberOfReads();\n  final StringBuilder buf2=new StringBuilder();\n  if (doc.getNumberOfSamples() > 1) {\n    Comparer.COMPARISON_MODE mode=Comparer.parseMode(doc.getDataTable().getParameters());\n    if (mode.equals(Comparer.COMPARISON_MODE.RELATIVE)) {\n      buf2.append(String.format(\"Relative comparison, Reads=%,d (normalized to %,d reads per sample)\",totalReads,Comparer.parseNormalizedTo(doc.getDataTable().getParameters())));\n    }\n else     buf2.append(String.format(\"Absolute comparison, Reads=%,d Assigned=%,d\",totalReads,totalAssignedReads));\n  }\n else   if (totalReads > 0) {\n    buf2.append(String.format(\"Reads=%,d Assigned=%,d\",totalReads,totalAssignedReads));\n    if (doc.getBlastMode() != BlastMode.Unknown)     buf2.append(\" mode=\").append(doc.getBlastMode().toString());\n  }\n else {\n    if (getTree().getNumberOfNodes() > 0)     buf2.append(String.format(\" total terms=%,d\",getTree().getNumberOfNodes()));\n  }\n  if (Document.getVersionInfo().get(getClassName() + \" tree\") != null)   buf2.append(\"     \").append(Basic.skipFirstLine(Document.getVersionInfo().get(getClassName() + \" tree\")).replaceAll(\"\\\\s+\",\" \"));\n  statusBar.setText2(buf2.toString());\n}\n"}
{"nl": "Gossip shared data", "code": "public void gossipSharedData(SharedGossipDataMessage message){\n  gossipManager.gossipSharedData(message);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetListsQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getLists\",GetListsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "reset the _initialIfExistSearchActive indicator", "code": "public void resetInitialIfExistSearchActive(){\n  _initialIfExistSearchActive=false;\n}\n"}
{"nl": "Generate the name of a MM relation type from the IRI of an OWL object property", "code": "default String objectPropertyName(IRI propIri){\n  return \"op-\" + fromIri(propIri);\n}\n"}
{"nl": "upload appender file to storage server (by file buff)", "code": "public String upload_appender_file1(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String parts[]=this.upload_appender_file(group_name,file_buff,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Notify hate value to all visible creatures", "code": "public void broadcastHate(int value){\n  for (  VisibleObject visibleObject : getOwner().getKnownList().getKnownObjects().values()) {\n    if (visibleObject instanceof Creature) {\n      ((Creature)visibleObject).getAggroList().notifyHate(getOwner(),value);\n    }\n  }\n}\n"}
{"nl": "Sort order", "code": "public FriendsGetMutualQuery order(FriendsGetMutualOrder value){\n  return unsafeParam(\"order\",value);\n}\n"}
{"nl": "applies the min support filter to taxon classification", "code": "public Map<Integer,Integer> apply() throws CanceledException {\n  final Map<Integer,Integer> orphan2AncestorMapping=new HashMap<>();\n  if (progress != null) {\n    progress.setMaximum(tree.getNumberOfNodes());\n    progress.setProgress(0);\n  }\n  final Set<Integer> orphans=new HashSet<>();\n  if (tree.getRoot() != null)   computeOrphan2AncestorMappingRec(tree.getRoot(),orphan2AncestorMapping,orphans);\n  for (  Integer id : orphans) {\n    orphan2AncestorMapping.put(id,IdMapper.UNASSIGNED_ID);\n  }\n  orphans.clear();\n  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();\n  return orphan2AncestorMapping;\n}\n"}
{"nl": "Removes all outgoing edges that start at the given unit", "code": "public boolean removeAllEdgesOutOf(Unit u){\n  boolean hasRemoved=false;\n  for (QueueReader<Edge> edgeRdr=listener(); edgeRdr.hasNext(); ) {\n    Edge e=edgeRdr.next();\n    if (e.srcUnit() == u) {\n      removeEdge(e);\n      hasRemoved=true;\n    }\n  }\n  return hasRemoved;\n}\n"}
{"nl": "Check for a leap year", "code": "public static boolean isLeapYear(int year){\n  return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n}\n"}
{"nl": "is the distance to the Root Cached", "code": "private boolean isDistanceToRootCache(Direction direction){\n  int directionOrdinal=direction.getDirection();\n  Float f=mDistToRootCache[directionOrdinal];\n  if (f < 0) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Validate fix for ACT-1627: Not throwing assignment event on every update", "code": "@Deployment(resources={\"org/activiti/examples/bpmn/tasklistener/TaskListenerTest.bpmn20.xml\"}) public void testTaskAssignmentListenerNotCalledWhenAssigneeNotUpdated(){\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"taskListenerProcess\");\n  Task task=taskService.createTaskQuery().singleResult();\n  assertEquals(\"TaskCreateListener is listening!\",task.getDescription());\n  taskService.setAssignee(task.getId(),\"kermit\");\n  task=taskService.createTaskQuery().singleResult();\n  assertEquals(\"TaskAssignmentListener is listening: kermit\",task.getDescription());\n  task.setDescription(\"Clear\");\n  taskService.saveTask(task);\n  taskService.setAssignee(task.getId(),\"kermit\");\n  task=taskService.createTaskQuery().singleResult();\n  assertEquals(\"Clear\",task.getDescription());\n  task.setAssignee(\"kermit\");\n  taskService.saveTask(task);\n  task=taskService.createTaskQuery().singleResult();\n  assertEquals(\"Clear\",task.getDescription());\n  task.setName(\"test\");\n  taskService.saveTask(task);\n  task=taskService.createTaskQuery().singleResult();\n  assertEquals(\"Clear\",task.getDescription());\n  task.setAssignee(\"john\");\n  taskService.saveTask(task);\n  task=taskService.createTaskQuery().singleResult();\n  assertEquals(\"TaskAssignmentListener is listening: john\",task.getDescription());\n  runtimeService.deleteProcessInstance(processInstance.getProcessInstanceId(),\"\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){\n  super(client,\"friends.get\",GetFieldsResponse.class);\n  accessToken(actor.getAccessToken());\n  fields(fields);\n}\n"}
{"nl": "Return true if the widget has horizontal constraints", "code": "private static boolean hasHorizontalConstraints(@NotNull ConstraintWidget widget){\n  ConstraintAnchor left=widget.getAnchor(ConstraintAnchor.Type.LEFT);\n  ConstraintAnchor right=widget.getAnchor(ConstraintAnchor.Type.RIGHT);\n  return (left != null && left.isConnected()) || (right != null && right.isConnected());\n}\n"}
{"nl": "refresh current month", "code": "public void refreshCalendar(){\n  TextView title=(TextView)rootView.findViewById(R.id.title);\n  refreshDays();\n  title.setText(android.text.format.DateFormat.format(CalendarUtils.getCalendarMonthTitleFormat(),month));\n}\n"}
{"nl": "Used for testing", "code": "public static String extractCSVOutputByFieldNum(String csvOut,int fieldNum){\n  String tokens[]=csvOut.split(\",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\",-1);\n  return tokens[fieldNum];\n}\n"}
{"nl": "get the unique id of repo", "code": "public static String id(){\n  String id=UID.id(System.currentTimeMillis(),UID.random());\n  try {\n    while (Helper.exists(id,Repo.class)) {\n      id=UID.id(System.currentTimeMillis(),UID.random());\n    }\n  }\n catch (  Exception e) {\n    log.error(e.getMessage(),e);\n  }\n  return id;\n}\n"}
{"nl": "Determines if current L&F is AquaLookAndFeel", "code": "public static boolean isAquaLookAndFeel(){\n  return UIUtils.isAquaLookAndFeel();\n}\n"}
{"nl": "Sets the classloader to scan", "code": "public PackageScanner useClassLoader(ClassLoader classLoader){\n  this.classLoader=classLoader;\n  return this;\n}\n"}
{"nl": "compute the scale factor to be used when drawing loadings", "code": "private double computeLoadingsScaleFactor(double[] vector){\n  if (vector.length >= 2) {\n    final double length=Math.sqrt(Geometry.squaredDistance(0,0,vector[0],vector[1]));\n    if (length > 0) {\n      final Rectangle2D bbox=graphView.getBBox();\n      return 0.2 * Math.min(bbox.getWidth(),bbox.getHeight()) / (length);\n    }\n  }\n  return 1;\n}\n"}
{"nl": "JSON representation of the EsAlarm", "code": "@Override public String toString(){\n  String json=gson.toJson(this);\n  log.debug(json);\n  return json;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountSetNameInMenuQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"account.setNameInMenu\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"show gridLines=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof ChartViewer) {\n    ((ChartViewer)getViewer()).setShowVerticalGridLines(show);\n  }\n}\n"}
{"nl": "Required for Externalizable", "code": "public DefaultQueryExtensionPathInfo(){\n}\n"}
{"nl": "Creates JSON input and writes to hdfs", "code": "public static List<JSONObject> createJSONInput(FileSystem fs){\n  String inputJSONFile=SystemConfiguration.getProperty(DistributedTestDriver.JSON_PIR_INPUT_FILE_PROPERTY);\n  logger.info(\"PIR JSON input being created at \" + inputJSONFile);\n  List<JSONObject> dataElementsJSON=createJSONDataElements();\n  HDFS.writeFile(dataElementsJSON,fs,inputJSONFile,true);\n  logger.info(\"PIR JSON input successfully created!\");\n  return dataElementsJSON;\n}\n"}
{"nl": "Check if this space should wait for other space in cluster to start", "code": "public synchronized boolean shouldWait(List<String> targetNames) throws InterruptedException {\n  if (_currentSpaceState == StartupState.LAST) {\n    return false;\n  }\n  if (!_activeSpaces.isEmpty())   return false;\n  if (_currentSpaceState == StartupState.UNINITIALIZED) {\n    if (_spaceName.equals(targetNames.get(0)))     return false;\n  }\n  return true;\n}\n"}
{"nl": "Correlation of X plus the new feature y (y is not included in X): J(X_k + y_j)", "code": "private double correlationOfNewFeature(String dataFile,String[] features,int indVarColNumber,int[] X,int y,int rowIni,int rowEnd){\n  double corXplusy;\n  Regression reg=new Regression();\n  int j=0;\n  int[] Xplusf=new int[X.length + 1];\n  for (int i=0; i < X.length; i++)   Xplusf[i]=X[i];\n  Xplusf[X.length]=y;\n  reg.multipleLinearRegression(dataFile,indVarColNumber,Xplusf,features,interceptTerm,rowIni,rowEnd);\n  corXplusy=reg.getCorrelation();\n  return corXplusy;\n}\n"}
{"nl": "Deleted comment id", "code": "protected MarketRestoreCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetAppUsersQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getAppUsers\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "To find next NonZero index in a given array", "code": "public static int findNextIndexNonZero(double[] contour,int current){\n  for (int i=current + 1; i < contour.length; i++) {\n    if (contour[i] != 0) {\n      return i;\n    }\n  }\n  return -1;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioAddQuery(VkApiClient client,UserActor actor,int audioId,int ownerId){\n  super(client,\"audio.add\",Integer.class);\n  accessToken(actor.getAccessToken());\n  audioId(audioId);\n  ownerId(ownerId);\n}\n"}
{"nl": "Writes this packet to the given buffer", "code": "@Override public PacketBuffer write(PacketBuffer buf){\n  values.forEach(null);\n  return buf;\n}\n"}
{"nl": "is viewer currently locked?", "code": "public boolean isLocked(){\n  return locked;\n}\n"}
{"nl": "Set platform", "code": "public AppsGetCatalogQuery platform(AppsPlatform value){\n  return unsafeParam(\"platform\",value);\n}\n"}
{"nl": "Constructs an EntryUpdatedPacket", "code": "public EntryUpdatedPacket(OperationID operationID,IEntryHolder originalEntryHolder,IEntryHolder newEntryHolder,IEntryHolder notifyEH,ServerTransaction xtn,boolean fromReplication,boolean notifyMatch,boolean notifyRematch){\n  super(operationID,newEntryHolder,xtn,0);\n  _originalEntryHolder=originalEntryHolder;\n  _notifyEH=notifyEH;\n  _fromReplication=fromReplication;\n  _notifyMatched=notifyMatch;\n  _notifyRematched=notifyRematch;\n}\n"}
{"nl": "Trim the wave data", "code": "public void trim(int leftTrimNumberOfSample,int rightTrimNumberOfSample){\n  long chunkSize=waveHeader.getChunkSize();\n  long subChunk2Size=waveHeader.getSubChunk2Size();\n  long totalTrimmed=leftTrimNumberOfSample + rightTrimNumberOfSample;\n  if (totalTrimmed > subChunk2Size) {\n    leftTrimNumberOfSample=(int)subChunk2Size;\n  }\n  chunkSize-=totalTrimmed;\n  subChunk2Size-=totalTrimmed;\n  if (chunkSize >= 0 && subChunk2Size >= 0) {\n    waveHeader.setChunkSize(chunkSize);\n    waveHeader.setSubChunk2Size(subChunk2Size);\n    byte[] trimmedData=new byte[(int)subChunk2Size];\n    System.arraycopy(data,leftTrimNumberOfSample,trimmedData,0,(int)subChunk2Size);\n    data=trimmedData;\n  }\n else {\n    System.err.println(\"Trim error: Negative length\");\n  }\n}\n"}
{"nl": "Set user ids", "code": "public NewsfeedAddBanQuery userIds(Integer... value){\n  return unsafeParam(\"user_ids\",value);\n}\n"}
{"nl": "Create from uncompressed binary representation", "code": "public PublicKey(byte[] pub,Cryptography crypto){\n  this.pub=pub;\n  this.crypto=crypto;\n}\n"}
{"nl": "Create a device info with already existing device infos", "code": "public DeviceInfo(DeviceInfos deviceInfos){\n  this();\n  deviceInfoBuilder.setAndroidBoardName(deviceInfos.getAndroidBoardName()).setAndroidBootloader(deviceInfos.getAndroidBootloader()).setDeviceBrand(deviceInfos.getDeviceBrand()).setDeviceId(deviceInfos.getDeviceId()).setDeviceModel(deviceInfos.getDeviceModel()).setDeviceModelBoot(deviceInfos.getDeviceModelBoot()).setDeviceModelIdentifier(deviceInfos.getDeviceModelIdentifier()).setFirmwareBrand(deviceInfos.getFirmwareBrand()).setFirmwareFingerprint(deviceInfos.getFirmwareFingerprint()).setFirmwareTags(deviceInfos.getFirmwareTags()).setFirmwareType(deviceInfos.getFirmwareType()).setHardwareManufacturer(deviceInfos.getHardwareManufacturer()).setHardwareModel(deviceInfos.getHardwareModel());\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public EnumElemValPair(String name,char kind,String tval,String cval){\n  super(name,kind);\n  this.tval=new AsciiCP(tval);\n  this.cval=new AsciiCP(cval);\n}\n"}
{"nl": "Create a group mapping representing specific named groups", "code": "public static GroupMapping createSpecificMapping(String... specificGroups){\n  return new GroupMapping(specificGroups);\n}\n"}
{"nl": "convert a constant to a object name schema", "code": "private String constantToObjectName(String string){\n  if (!Character.isUpperCase(string.charAt(0))) {\n    string=StringUtils.capitalize(string);\n    int length=string.length();\n    for (int i=0; i < length; i++) {\n      char character=string.charAt(i);\n      if (character == \"_\".charAt(0)) {\n        String firstPart=string.substring(0,i);\n        String secondPart=string.substring(i + 1,length);\n        String newSecondPart=StringUtils.capitalize(secondPart);\n        string=firstPart + newSecondPart;\n        i=firstPart.length();\n        length--;\n      }\n    }\n  }\n  return string;\n}\n"}
{"nl": "Snapshot current state and returns a new context which can be restored to the previous snapshot by calling restore", "code": "private LRMIInvocationContext snapshot(){\n  LRMIInvocationContext newContext=_nextContext == null ? new LRMIInvocationContext() : _nextContext;\n  newContext._previousContext=this;\n  return newContext;\n}\n"}
{"nl": "Return only the current user's friends", "code": "public LikesGetListQuery friendsOnly(Boolean value){\n  return unsafeParam(\"friends_only\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketSearchQueryWithExtended(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"market.search\",SearchExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  extended(true);\n}\n"}
{"nl": "replace the auxiliary data associated with the dataset", "code": "public void replaceAuxiliaryData(Map<String,byte[]> label2data) throws IOException {\n  loadInfoSection();\n  try (InputOutputReaderWriter io=new InputOutputReaderWriter(new FileRandomAccessReadWriteAdapter(file.getPath(),\"rw\"))){\n    long newPos=infoSection.getAuxiliaryDataStart();\n    if (newPos == 0)     newPos=infoSection.getInfoSectionStart();\n    io.seek(newPos);\n    infoSection.setAuxiliaryDataStart(newPos);\n    StringBuilder buf=new StringBuilder();\n    for (    String label : label2data.keySet()) {\n      byte[] bytes=label2data.get(label);\n      if (bytes != null) {\n        buf.append(\"<<<\").append(label).append(\">>>\").append(new String(bytes));\n      }\n    }\n    byte[] bytes=buf.toString().getBytes();\n    io.write(bytes,0,bytes.length);\n    infoSection.setAuxiliaryDataEnd(io.getPosition());\n    infoSection.write(io);\n    io.setLength(io.getPosition());\n  }\n }\n"}
{"nl": "read float, little endian", "code": "public float readFloat() throws IOException {\n  read(bytes,0,4);\n  for (int i=0; i < 4; i++)   byteBuffer.put(i,bytes[4 - i - 1]);\n  return byteBuffer.getFloat(0);\n}\n"}
{"nl": "Creates a new instance of the abstract info flow problem", "code": "public AbstractInfoflow(BiDirICFGFactory icfgFactory){\n  if (icfgFactory == null)   this.icfgFactory=new DefaultBiDiICFGFactory();\n else   this.icfgFactory=icfgFactory;\n}\n"}
{"nl": "Set privacy view", "code": "public PhotosEditAlbumQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "decide Attack Path when Enemy state is Attack", "code": "private void AttackPath(int kind,int num,int aKind){\n  enemys[kind][num].begin_Attack(aKind);\n}\n"}
{"nl": "Obter local do usuario", "code": "private void locationPlacesIntent(){\n  try {\n    PlacePicker.IntentBuilder builder=new PlacePicker.IntentBuilder();\n    startActivityForResult(builder.build(this),PLACE_PICKER_REQUEST);\n  }\n catch (  GooglePlayServicesRepairableException|GooglePlayServicesNotAvailableException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "erase all reads", "code": "public void clearReads(){\n  dataTable.clear();\n  setNumberReads(0);\n}\n"}
{"nl": "Creates the default cumulative probability density test expected values", "code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0,0.341417152147,0.512125728221,0.625931445604,0.71128573364,0.77956916407,0.836472022761,0.885245901639,0.927923045658,0.965858284785,1d,1d};\n}\n"}
{"nl": "Block until there is a host available", "code": "private HttpURLConnection acquireNextHost(){\n  String host=nextHost();\n  while (!availability.get(host).tryAcquire()) {\n    host=nextHost();\n  }\n  return getHost(host,POST);\n}\n"}
{"nl": "from yyyy-MM-dd HH:mm:ss to MM-dd HH:mm", "code": "public static String formatDate(String before){\n  String after;\n  try {\n    Date date=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\",Locale.getDefault()).parse(before);\n    after=new SimpleDateFormat(\"MM-dd HH:mm\",Locale.getDefault()).format(date);\n  }\n catch (  ParseException e) {\n    return before;\n  }\n  return after;\n}\n"}
{"nl": "calculate the total height of the widget", "code": "private int measureHeight(){\n  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);\n  int daysOfMonth=daysOfCurrentMonth();\n  int n=-1;\n  if (dayOfWeek >= 2 && dayOfWeek <= 7) {\n    n=daysOfMonth - (8 - dayOfWeek + 1);\n  }\n else   if (dayOfWeek == 1) {\n    n=daysOfMonth - 1;\n  }\n  int lines=2 + n / 7 + (n % 7 == 0 ? 0 : 1);\n  return (int)(cellHeight * lines);\n}\n"}
{"nl": "rotate transformation about the X axis", "code": "public void rotateX(double theta){\n  Matrix3D tmp=new Matrix3D();\n  double c=Math.cos(theta);\n  double s=Math.sin(theta);\n  tmp.set(1,1,c);\n  tmp.set(1,2,-s);\n  tmp.set(2,1,s);\n  tmp.set(2,2,c);\n  preMultiply(tmp);\n}\n"}
{"nl": "Starts the counter that increases the clock every tick", "code": "public static void startClock(){\n  if (clockStarted) {\n    throw new IllegalStateException(\"Clock is already started\");\n  }\n  updater=new GameTimeUpdater(getGameTime());\n  ThreadPoolManager.getInstance().scheduleAtFixedRate(updater,0,5000);\n  clockStarted=true;\n}\n"}
{"nl": "send the message type of T, all receiver can receive the message", "code": "public <T>void send(T message){\n  sendToTargetOrType(message,null,null);\n}\n"}
{"nl": "Adds all equipment id's of that list as dependency to this tag", "code": "public void addEquipmentIds(final Collection<Long> equipmentIds){\n  for (  Long equipmentId : equipmentIds) {\n    addEquipmentId(equipmentId);\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"move dir=\");\n  String dir=np.getWordMatchesIgnoringCase(\"up down\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  SelectedBlock selectedBlock=viewer.getSelectedBlock();\n  if (selectedBlock.isSelected()) {\n    if (dir.equals(\"up\")) {\n      if ((viewer.isShowAsMapping() && viewer.getAlignment().getRowCompressor().moveUp(selectedBlock.getFirstRow(),selectedBlock.getLastRow())) || (!viewer.isShowAsMapping() && AlignmentSorter.moveUp(viewer.getAlignment(),selectedBlock.getFirstRow(),selectedBlock.getLastRow()))) {\n        selectedBlock.setFirstRow(selectedBlock.getFirstRow() - 1);\n        selectedBlock.setLastRow(selectedBlock.getLastRow() - 1);\n        selectedBlock.fireSelectionChanged();\n      }\n    }\n else     if (dir.equals(\"down\")) {\n      if ((viewer.isShowAsMapping() && viewer.getAlignment().getRowCompressor().moveDown(selectedBlock.getFirstRow(),selectedBlock.getLastRow())) || (!viewer.isShowAsMapping() && AlignmentSorter.moveDown(viewer.getAlignment(),selectedBlock.getFirstRow(),selectedBlock.getLastRow()))) {\n        selectedBlock.setFirstRow(selectedBlock.getFirstRow() + 1);\n        selectedBlock.setLastRow(selectedBlock.getLastRow() + 1);\n        selectedBlock.fireSelectionChanged();\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetStreetsByIdQuery(VkApiClient client,int... streetIds){\n  super(client,\"database.getStreetsById\",Utils.buildParametrizedType(List.class,Street.class));\n  streetIds(streetIds);\n}\n"}
{"nl": "Set the alpha level of disabled elements", "code": "public Builder alphaOfDisabledElements(float alpha){\n  this.alphaOfDisabledElements=alpha;\n  return this;\n}\n"}
{"nl": "Method used to change actual opened tab on a dialog", "code": "public ConfigDialog switchTab(String tabLabel){\n  if (!tabs.isEmpty()) {\n    tabs.stream().filter(null).findFirst().orElseThrow(null).click();\n  }\n  return this;\n}\n"}
{"nl": "Converts from Joda-Time DateTime to DateUnit", "code": "public static DateTimeUnit fromJodaDateTime(DateTime dateTime){\n  return new DateTimeUnit(dateTime.getYear(),dateTime.getMonthOfYear(),dateTime.getDayOfMonth(),dateTime.getDayOfWeek());\n}\n"}
{"nl": "Put ObJect any type into SharedPrefrences with 'key' and save", "code": "public void putObject(String key,Object obj,Gson gson){\n  checkForNullKey(key);\n  putString(key,gson.toJson(obj));\n}\n"}
{"nl": "paint the selection rectangle", "code": "public void paintSelection(Graphics g0){\n  if (selectedBlock.isSelected()) {\n    Graphics2D g=(Graphics2D)g0;\n    double xMin=Math.min(getX(selectedBlock.getFirstCol()),getSize().width);\n    double xMax=Math.min((getX(selectedBlock.getLastCol() + 1)),getSize().width - 2);\n    double yMin=Math.min(getY(selectedBlock.getFirstRow() - 1),getSize().height - 3);\n    double yMax=Math.min(getY(selectedBlock.getLastRow()),getSize().height - 3);\n    Rectangle2D rect=new Rectangle2D.Double(xMin,yMin,0,0);\n    rect.add(xMax,yMax);\n    g.setColor(highlightColor);\n    g.draw(rect);\n    g.setColor(highlightColorSemiTransparent);\n    g.fill(rect);\n    selectionRectangle.setRectangle(this,rect);\n  }\n  selectionRectangle.setAnimate(selectedBlock.isSelected());\n}\n"}
{"nl": "check NetworkAvailable", "code": "public static boolean isNetworkAvailable(Context context){\n  ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n  if (null == manager)   return false;\n  NetworkInfo info=manager.getActiveNetworkInfo();\n  if (null == info || !info.isAvailable())   return false;\n  return true;\n}\n"}
{"nl": "Response Content-Type could be something like this: application/x-ns-proxy-autoconfig; charset=UTF-8", "code": "String parseCharsetFromHeader(String contentType){\n  String result=\"ISO-8859-1\";\n  if (contentType != null) {\n    String[] paramList=contentType.split(\";\");\n    for (    String param : paramList) {\n      if (param.toLowerCase().trim().startsWith(\"charset\") && param.indexOf(\"=\") != -1) {\n        result=param.substring(param.indexOf(\"=\") + 1).trim();\n      }\n    }\n  }\n  return result;\n}\n"}
{"nl": "Size of player templates", "code": "public int size(){\n  return playerTemplates.size();\n}\n"}
{"nl": "While Stmts Creation", "code": "private void createWhile2(polyglot.ast.While whileStmt){\n  soot.jimple.Stmt brchTgt=soot.jimple.Jimple.v().newNopStmt();\n  soot.jimple.Stmt beginTgt=soot.jimple.Jimple.v().newNopStmt();\n  body.getUnits().add(beginTgt);\n  endControlNoop.push(soot.jimple.Jimple.v().newNopStmt());\n  condControlNoop.push(soot.jimple.Jimple.v().newNopStmt());\n  soot.jimple.Stmt continueStmt=condControlNoop.pop();\n  body.getUnits().add(continueStmt);\n  condControlNoop.push(continueStmt);\n  polyglot.ast.Expr condition=whileStmt.cond();\n  createBranchingExpr(condition,brchTgt,false);\n  createStmt(whileStmt.body());\n  soot.jimple.GotoStmt gotoLoop=soot.jimple.Jimple.v().newGotoStmt(beginTgt);\n  body.getUnits().add(gotoLoop);\n  body.getUnits().add((endControlNoop.pop()));\n  body.getUnits().add(brchTgt);\n  condControlNoop.pop();\n}\n"}
{"nl": "Convert HTTP request string into key-value pairs", "code": "public static Map<String,String> toKeyValuePairs(String httpString,boolean performUrlDecode){\n  if (httpString == null || httpString.length() == 0) {\n    return null;\n  }\n  Map<String,String> keyValuePairs=new HashMap<String,String>();\n  StringTokenizer st=new StringTokenizer(httpString);\n  String newToken=null;\n  String param, val;\n  int equalSignInd;\n  while (st.hasMoreTokens() && (newToken=st.nextToken(\"&\")) != null) {\n    equalSignInd=newToken.indexOf(\"=\");\n    param=newToken;\n    val=\"\";\n    if (equalSignInd > -1) {\n      param=newToken.substring(0,equalSignInd);\n      val=newToken.substring(equalSignInd + 1);\n    }\n    if (performUrlDecode) {\n      param=StringUtils.urlDecode(param);\n      val=StringUtils.urlDecode(val);\n    }\n    keyValuePairs.put(param,val);\n  }\n  return keyValuePairs;\n}\n"}
{"nl": "Dumps the wave data associated with this result", "code": "public void dumpASCII(){\n  dumpASCII(new OutputStreamWriter(System.out));\n}\n"}
{"nl": "makes the given taxon to the ancestor taxon of the given rank", "code": "private static int mapToRank(String rank,int taxonId){\n  int targetLevel=TaxonomicLevels.getId(rank);\n  Node v=TaxonomyData.getTree().getANode(taxonId);\n  while (v != null) {\n    int level=TaxonomyData.getTaxonomicRank(taxonId);\n    if (level != 0 && level == targetLevel)     return taxonId;\n    if (v.getInDegree() == 0)     v=null;\n else {\n      v=v.getFirstInEdge().getSource();\n      taxonId=(Integer)v.getInfo();\n    }\n  }\n  return 0;\n}\n"}
{"nl": "Should be called when DownloadManager finishes to download item", "code": "public void markDownloadTaskFinished(long downloadId){\n  DownloadManager downloadManager=(DownloadManager)UpodsApplication.getContext().getSystemService(Context.DOWNLOAD_SERVICE);\n  DownloadManager.Query query=new DownloadManager.Query();\n  query.setFilterById(downloadId);\n  Cursor c=downloadManager.query(query);\n  if (c.moveToFirst()) {\n    DownloadTask task=getTaskById(downloadId);\n    int columnIndex=c.getColumnIndex(DownloadManager.COLUMN_STATUS);\n    if (task != null) {\n      if (DownloadManager.STATUS_SUCCESSFUL == c.getInt(columnIndex)) {\n        if (task.track instanceof Episode) {\n          ((Episode)task.track).setPathOnDisk(task.filePath);\n        }\n        ProfileManager.getInstance().addDownloadedTrack(task.mediaItem,task.track);\n        task.contentLoadListener.onContentLoaded();\n      }\n      allTasks.remove(task);\n    }\n  }\n  c.close();\n}\n"}
{"nl": "Create StartNavigation", "code": "public StartNavigator(Activity activity){\n  this.activity=activity;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatQueryWithChatIds(VkApiClient client,UserActor actor,List<Integer> chatIds){\n  super(client,\"messages.getChat\",Utils.buildParametrizedType(List.class,Chat.class));\n  accessToken(actor.getAccessToken());\n  chatIds(chatIds);\n}\n"}
{"nl": "Dumps the utterance in textual form", "code": "public void dumpRelations(String title){\n  dump(new PrintWriter(System.out),0,title,true);\n}\n"}
{"nl": "Create a ServiceClient instance using the given TrustManager, KeyManager and requestPayloadSizeLimit", "code": "public static ServiceClient createServiceClient(TrustManager trustManager,KeyManager keyManager,int requestPayloadSizeLimit){\n  return createServiceClient(CertificateUtil.createSSLContext(trustManager,keyManager),requestPayloadSizeLimit);\n}\n"}
{"nl": "Application ID", "code": "public AppsGetQuery appId(Integer value){\n  return unsafeParam(\"app_id\",value);\n}\n"}
{"nl": "return if the two itemstacks are identical, excepting stacksize", "code": "public static boolean identical(ItemStack a,ItemStack b){\n  if (a == null && b == null) {\n    return true;\n  }\n else   if (a == null || b == null) {\n    return false;\n  }\n  return couldMerge(a,b);\n}\n"}
{"nl": "Add category to Intent", "code": "public void addCategory(String category){\n  if (TextUtils.isEmpty(category))   return;\n  mIntent.addCategory(category);\n}\n"}
{"nl": "Finds a class or interface which is an ancestor of this type", "code": "public Type<?> findAncestor(final Class<?> ancestor){\n  if (ancestor.isInterface()) {\n    return findInterface(ancestor);\n  }\n else {\n    if (this.getRawType().equals(ancestor)) {\n      return this;\n    }\n else     if (!TypeFactory.TYPE_OF_OBJECT.equals(this)) {\n      return getSuperType().findAncestor(ancestor);\n    }\n else {\n      return null;\n    }\n  }\n}\n"}
{"nl": "private ctor", "code": "private DomainSuffixes(){\n  String file=\"domain-suffixes.xml\";\n  InputStream input=this.getClass().getClassLoader().getResourceAsStream(file);\n  assert input != null;\n  try {\n    new DomainSuffixesReader().read(this,input);\n  }\n catch (  Exception ex) {\n    LOG.warn(StringUtils.stringifyException(ex));\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set layout=\");\n  String layout=np.getWordMatchesIgnoringCase(Basic.toString(AlignmentViewer.AlignmentLayout.values(),\" \"));\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getSelectedBlock().clear();\n  viewer.setAlignmentLayout(AlignmentViewer.AlignmentLayout.valueOfIgnoreCase(layout),((Director)getDir()).getDocument().getProgressListener());\n  viewer.getAlignmentViewerPanel().zoom(\"both\",\"fit\",null);\n}\n"}
{"nl": "Encode sld to a string", "code": "public String encodeSLD(StyledLayerDescriptor sld){\n  String xml=\"\";\n  if (sld != null) {\n    SLDTransformer transformer=new SLDTransformer();\n    transformer.setIndentation(2);\n    try {\n      xml=transformer.transform(sld);\n    }\n catch (    TransformerException e) {\n      ConsoleManager.getInstance().exception(this,e);\n    }\n  }\n  return xml;\n}\n"}
{"nl": "Starts authentication flow and inject csrf token", "code": "protected void startAuthenticationAndInjectCsrfToken(HttpRequest request){\n  logger.debug(\"Authenticate because no session is found in cookie store or it doesn't match with the one used to get the CSRF token we have.\");\n  startAuthenticationFlow();\n  logger.debug(\"Injecting CSRF token\");\n  injectCsrfTokenIntoHeader(request,latestCsrfToken);\n}\n"}
{"nl": "Add an integer to the config", "code": "public ResourcesPoet addInteger(String name,String value){\n  Element bool=document.createElement(\"integer\");\n  bool.setAttribute(\"name\",name);\n  bool.appendChild(document.createTextNode(String.valueOf(value)));\n  resourceElement.appendChild(bool);\n  return this;\n}\n"}
{"nl": "<code>optional string message = 1;</code>", "code": "public Builder clearMessage(){\n  message_=getDefaultInstance().getMessage();\n  onChanged();\n  return this;\n}\n"}
{"nl": "No instances", "code": "private Unsigned(){\n}\n"}
{"nl": "Make sure you get an error if you try to addDocument after index is stopped", "code": "public void testAddAfterStop() throws Exception {\n  deleteAllDocs();\n  send(\"stopIndex\");\n  try {\n    send(\"addDocument\",\"{fields: {}}\");\n    fail();\n  }\n catch (  IOException ioe) {\n  }\n  send(\"startIndex\");\n}\n"}
{"nl": "add resource", "code": "public void addResource(RType rType,IdType idType,String name,String idValue){\n  Set<RDotTxtEntry> resourceSet=null;\n  if (this.rTypeResourceMap.containsKey(rType)) {\n    resourceSet=this.rTypeResourceMap.get(rType);\n  }\n else {\n    resourceSet=new HashSet<RDotTxtEntry>();\n    this.rTypeResourceMap.put(rType,resourceSet);\n  }\n  RDotTxtEntry rDotTxtEntry=new RDotTxtEntry(idType,rType,name,idValue);\n  boolean increaseResource=false;\n  if (!resourceSet.contains(rDotTxtEntry)) {\n    if (this.originalResourceMap.containsKey(rDotTxtEntry)) {\n      this.rTypeEnumeratorMap.get(rType).previous();\n      rDotTxtEntry=this.originalResourceMap.get(rDotTxtEntry);\n    }\n else {\n      increaseResource=true;\n    }\n    resourceSet.add(rDotTxtEntry);\n  }\n  Set<RDotTxtEntry> increaseResourceSet=null;\n  if (this.rTypeIncreaseResourceMap.containsKey(rType)) {\n    increaseResourceSet=this.rTypeIncreaseResourceMap.get(rType);\n  }\n else {\n    increaseResourceSet=new HashSet<RDotTxtEntry>();\n    this.rTypeIncreaseResourceMap.put(rType,increaseResourceSet);\n  }\n  if (increaseResource) {\n    increaseResourceSet.add(rDotTxtEntry);\n  }\n}\n"}
{"nl": "add all values to sum", "code": "private static void addToArray(Integer[] sum,int[] add){\n  for (int i=0; i < add.length; i++) {\n    sum[i]+=add[i];\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.getJList().clearSelection();\n}\n"}
{"nl": "Flushes content to the database", "code": "@Override public void flush(Map<TopicPartition,OffsetAndMetadata> offsets) throws ConnectException {\n  fLog.trace(\"Flush start at \" + System.currentTimeMillis());\n  try {\n    if (iDelivery > FASTEST)     iWriter.flush();\n    if (iDelivery == SYNCHRONIZED) {\n      int size=offsets.size();\n      String[] topicArray=new String[size];\n      Integer[] partitionArray=new Integer[size];\n      Long[] offsetArray=new Long[size];\n      Iterator<Map.Entry<TopicPartition,OffsetAndMetadata>> iterator=offsets.entrySet().iterator();\n      for (int i=0; i < size; ++i) {\n        Entry<TopicPartition,OffsetAndMetadata> entry=iterator.next();\n        TopicPartition key=entry.getKey();\n        OffsetAndMetadata value=entry.getValue();\n        topicArray[i]=key.topic();\n        partitionArray[i]=key.partition();\n        offsetArray[i]=value.offset();\n      }\n      iFlushStatement.setArray(1,iConnection.createArrayOf(\"varchar\",topicArray));\n      iFlushStatement.setArray(2,iConnection.createArrayOf(\"integer\",partitionArray));\n      iFlushStatement.setArray(3,iConnection.createArrayOf(\"bigint\",offsetArray));\n      iFlushStatement.executeQuery();\n    }\n  }\n catch (  SQLException|IOException exception) {\n    throw new ConnectException(exception);\n  }\n  fLog.trace(\"Flush stop at \" + System.currentTimeMillis());\n}\n"}
{"nl": "Checks whether this definition models a sink", "code": "public boolean isSink(){\n  return this.sinkSource == SinkSource.Sink || this.sinkSource == SinkSource.Both;\n}\n"}
{"nl": "Check for the \"environment\" key in the pluginAPI", "code": "private boolean isConfigurationPluginAvailable(){\n  if (configurationPluginAvailable == null) {\n    try {\n      String value=APILocator.getPluginAPI().loadProperty(pluginName,\"environment\");\n      configurationPluginAvailable=(value != null);\n    }\n catch (    Exception e) {\n      Logger.warn(this,\"Exception while trying to get property 'environment' \",e);\n      configurationPluginAvailable=false;\n    }\n    Logger.info(this,\"Configuration plugin available: \" + configurationPluginAvailable);\n  }\n  return configurationPluginAvailable;\n}\n"}
{"nl": "Used for compound abnormal state checks", "code": "public boolean isAbnormalState(AbnormalState id){\n  int state=abnormals & id.getId();\n  return state > 0 && state <= id.getId();\n}\n"}
{"nl": "Infers a sequence schema based on the record", "code": "public static SequenceSchema inferSequence(List<List<Writable>> record){\n  SequenceSchema.Builder builder=new SequenceSchema.Builder();\n  for (int i=0; i < record.size(); i++) {\n    if (record.get(i) instanceof DoubleWritable)     builder.addColumnDouble(String.valueOf(i));\n else     if (record.get(i) instanceof IntWritable)     builder.addColumnInteger(String.valueOf(i));\n else     if (record.get(i) instanceof LongWritable)     builder.addColumnLong(String.valueOf(i));\n else     if (record.get(i) instanceof FloatWritable)     builder.addColumnFloat(String.valueOf(i));\n else     throw new IllegalStateException(\"Illegal writable for infering schema of type \" + record.get(i).getClass().toString());\n  }\n  builder.minSequenceLength(record.size());\n  builder.maxSequenceLength(record.size());\n  return builder.build();\n}\n"}
{"nl": "Creates a scalar predicate using the specified expected value", "code": "public NotEqualsSpacePredicate(Object expectedValue){\n  super(expectedValue,null);\n}\n"}
{"nl": "Add a String column with the specified restrictions", "code": "public Builder addColumnString(String name,String regex,Integer minAllowableLength,Integer maxAllowableLength){\n  return addColumn(new StringMetaData(name,regex,minAllowableLength,maxAllowableLength));\n}\n"}
{"nl": "Finds the Type value of the given TypeVariable", "code": "public static <T>Type<T> valueOf(final TypeVariable<?> var){\n  if (var.getBounds().length > 0) {\n    Set<Type<?>> bounds=new HashSet<Type<?>>(var.getBounds().length);\n    for (int i=0, len=var.getBounds().length; i < len; ++i) {\n      bounds.add(valueOf(var.getBounds()[i]));\n    }\n    return (Type<T>)refineBounds(bounds);\n  }\n else {\n    return (Type<T>)TYPE_OF_OBJECT;\n  }\n}\n"}
{"nl": "Resolve all themes available from passed Configuration's source module and its dependencies which are defined in the current project (doesn't include themes available from libraries)", "code": "@NotNull private List<Pair<StyleResourceValue,Module>> resolveLocallyDefinedModuleThemes(){\n  final Module module=myConfiguration.getModule();\n  final List<Pair<StyleResourceValue,Module>> result=Lists.newArrayList();\n  fillModuleResources(module,ModuleResourceRepository.getModuleResources(module,true),result);\n  final List<AndroidFacet> allAndroidDependencies=AndroidUtils.getAllAndroidDependencies(module,false);\n  for (  AndroidFacet facet : allAndroidDependencies) {\n    fillModuleResources(facet.getModule(),facet.getModuleResources(true),result);\n  }\n  return result;\n}\n"}
{"nl": "Reason for the complaint", "code": "public PhotosReportCommentQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n"}
{"nl": "Check if connected to cellular provider", "code": "public static boolean isNetworkTypeCellular(String networkType){\n  return networkType.equals(\"MOBILE\");\n}\n"}
{"nl": "Creates a GermanLexicon based upon the given compiled and addenda DBs and the given letter to sound rules", "code": "public GermanLexicon(URL compiledURL,URL addendaURL,URL letterToSoundURL,boolean binary){\n  setLexiconParameters(compiledURL,addendaURL,letterToSoundURL,binary);\n}\n"}
{"nl": "Adds a host limit to the query", "code": "public ContentletQuery addHost(Host host){\n  return addHost(host.getIdentifier());\n}\n"}
{"nl": "Clear the scene", "code": "public void clear(){\n  mRoot=null;\n  if (mSelection != null) {\n    mSelection.clear();\n  }\n  mWidgets.clear();\n}\n"}
{"nl": "This method will destroy the player's store", "code": "public static void closePrivateStore(Player activePlayer){\n  activePlayer.setStore(null);\n  activePlayer.unsetState(CreatureState.PRIVATE_SHOP);\n  PacketSendUtility.broadcastPacket(activePlayer,new SM_EMOTION(activePlayer,EmotionType.CLOSE_PRIVATESHOP,0,0),true);\n}\n"}
{"nl": "Execute a command in the runtime environment", "code": "public static String execute(String command,File cwd){\n  try {\n    StringBuffer output=new StringBuffer();\n    Process process=Runtime.getRuntime().exec(command,null,cwd);\n    BufferedReader input=new BufferedReader(new InputStreamReader(process.getInputStream()));\n    String line;\n    while ((line=input.readLine()) != null) {\n      String trimmed=line.trim();\n      if (trimmed.length() == 0) {\n        continue;\n      }\n      output.append(trimmed);\n      output.append(\"\\n\");\n    }\n    process.waitFor();\n    return output.toString();\n  }\n catch (  Exception e) {\n    LOGGER.log(Level.WARNING,\"Exception encountered while running command \" + command,e);\n    return \"\";\n  }\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0,0,0,0,0.0594218160072,0.0436977691036,0.0508364857798,0.054873528325,0.0587182664085,0.0636229042785};\n}\n"}
{"nl": "compute the Shannon-Weaver diversity index in bits", "code": "public static String computeSimpsonReciprocal(ViewerBase viewer,ProgressListener progressListener) throws IOException, CanceledException {\n  if (viewer instanceof MainViewer)   return toString(computeSimpsonReciprocal((MainViewer)viewer,progressListener));\n else   if (viewer instanceof ClassificationViewer)   return toString(computeSimpsonReciprocal((ClassificationViewer)viewer,progressListener));\n else   return null;\n}\n"}
{"nl": "update the classifications", "code": "public void updateClassifications(String[] cNames,Map<Integer,ListOfLongs>[] fName2ClassId2Location,Map<Integer,Integer>[] fName2ClassId2Weight) throws IOException {\n  io=new InputOutputReaderWriter(new File(fileName),READ_WRITE);\n  io.seek(footerSectionRMA6.getStartClassificationsSection());\n  io.setLength(io.getPosition());\n  footerSectionRMA6.getAvailableClassification2Position().clear();\n  for (int i=0; i < cNames.length; i++) {\n    final String cName=cNames[i];\n    final ClassificationBlockRMA6 classification=new ClassificationBlockRMA6(cName);\n    final Map<Integer,ListOfLongs> id2locations=fName2ClassId2Location[i];\n    for (    int id : id2locations.keySet()) {\n      final Integer weight=fName2ClassId2Weight[i].get(id);\n      classification.setSum(id,weight != null ? weight : 0);\n    }\n    footerSectionRMA6.getAvailableClassification2Position().put(cName,io.getPosition());\n    classification.write(io,id2locations);\n    System.err.println(String.format(\"Numb. %4s classes: %,10d\",Basic.abbreviate(cName,4),id2locations.size()));\n  }\n  footerSectionRMA6.setEndClassificationsSection(io.getPosition());\n  footerSectionRMA6.setStartAuxDataSection(io.getPosition());\n  io.writeInt(0);\n  footerSectionRMA6.setEndAuxDataSection(io.getPosition());\n  footerSectionRMA6.setStartFooterSection(io.getPosition());\n  footerSectionRMA6.write(io);\n  close();\n}\n"}
{"nl": "Create a date from formatted string", "code": "public static Date stringToDate(String formattedDate){\n  return stringToDate(formattedDate,SIMPLE_DATE_FORMAT);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"show findToolbar=\");\n  boolean show=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof IViewerWithFindToolBar) {\n    IViewerWithFindToolBar viewer=(IViewerWithFindToolBar)getViewer();\n    if (show) {\n      if (!viewer.getSearchManager().getFindDialogAsToolBar().isEnabled())       viewer.setShowFindToolBar(true);\n else       viewer.getSearchManager().getFindDialogAsToolBar().setEnabled(true);\n    }\n else     viewer.setShowFindToolBar(false);\n  }\n else {\n    NotificationsInSwing.showWarning(getViewer().getFrame(),\"Find not implemented for this type of window\");\n  }\n}\n"}
{"nl": "Creates a default CMUTimeLexicon which is a binary lexicon", "code": "public CMUTimeLexicon(){\n  super(\"cmutimelex\");\n}\n"}
{"nl": "send message to target with token,when a receiver has register with same token,it will receive this msg", "code": "public void sendNoMsgToTargetWithToken(Object token,Object target){\n  sendToTargetOrType(target.getClass(),token);\n}\n"}
{"nl": "Stores all player skills according to their persistence state", "code": "@Override public boolean storeSkills(Player player){\n  List<PlayerSkillEntry> skillsActive=Lists.newArrayList(player.getSkillList().getAllSkills());\n  List<PlayerSkillEntry> skillsDeleted=Lists.newArrayList(player.getSkillList().getDeletedSkills());\n  store(player,skillsActive);\n  store(player,skillsDeleted);\n  return true;\n}\n"}
{"nl": "Converts dateUnit to JDK Calendar", "code": "public java.util.Calendar toJdkCalendar(){\n  return toJodaDateTime().toGregorianCalendar();\n}\n"}
{"nl": "Player Turn - Computer", "code": "static void turnAI(){\n  boolean withoutAI=true;\n  for (int y=0; y < field_size; y++) {\n    for (int x=0; x < field_size; x++) {\n      if (isCellBusy(x,y,dotHuman) && withoutAI) {\n        for (int y1=y - 1; y1 < y + field_size; y1++) {\n          for (int x1=x - 1; x1 < x + field_size; x1++) {\n            if (!((y == y1) && (x == x1))) {\n              if (isCellBusy(x1,y1,dotHuman)) {\n                if (isCellBusy(x * 2 - x1,y * 2 - y1,dotEmpty)) {\n                  field[x * 2 - x1][y * 2 - y1]=dotAI;\n                  withoutAI=false;\n                }\n                if (isCellBusy(x1 * 2 - x,y1 * 2 - y,dotEmpty)) {\n                  field[x1 * 2 - x][y1 * 2 - y]=dotAI;\n                  withoutAI=false;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  int x, y;\n  if (withoutAI) {\n    do {\n      x=rand.nextInt(field_size);\n      y=rand.nextInt(field_size);\n    }\n while (!isCellBusy(x,y,dotEmpty));\n    field[x][y]=dotAI;\n  }\n}\n"}
{"nl": "Build OnlineOffline state model definition", "code": "public static StateModelDefinition build(){\n  StateModelDefinition.Builder builder=new StateModelDefinition.Builder(name);\n  builder.initialState(States.OFFLINE.name());\n  builder.addState(States.ONLINE.name(),20);\n  builder.addState(States.OFFLINE.name(),-1);\n  for (  HelixDefinedState state : HelixDefinedState.values()) {\n    builder.addState(state.name(),-1);\n  }\n  builder.addTransition(States.ONLINE.name(),States.OFFLINE.name(),25);\n  builder.addTransition(States.OFFLINE.name(),States.ONLINE.name(),5);\n  builder.addTransition(States.OFFLINE.name(),HelixDefinedState.DROPPED.name(),0);\n  builder.dynamicUpperBound(States.ONLINE.name(),\"R\");\n  return builder.build();\n}\n"}
{"nl": "install multiDex before install tinker so we don't need to put the tinker lib classes in the main dex", "code": "@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) @Override public void onBaseContextAttached(Context base){\n  super.onBaseContextAttached(base);\n  MultiDex.install(base);\n  SampleApplicationContext.application=getApplication();\n  SampleApplicationContext.context=getApplication();\n  TinkerManager.setTinkerApplicationLike(this);\n  TinkerManager.initFastCrashProtect();\n  TinkerManager.setUpgradeRetryEnable(true);\n  TinkerInstaller.setLogIml(new MyLogImp());\n  TinkerManager.installTinker(this);\n}\n"}
{"nl": "Default transforms histogram equalization for CV_BGR2GRAY (grayscale)", "code": "public EqualizeHistTransform(){\n  this(new Random(1234),CV_BGR2GRAY);\n}\n"}
{"nl": "Returns information whether the tag has any update listeners registered or not", "code": "public boolean hasUpdateListeners(){\n  boolean isEmpty=!listeners.isEmpty();\n  return isEmpty;\n}\n"}
{"nl": "Import the Types from the WSDL definition using the same strategy that Cxf uses taking advantage of JAXB", "code": "protected void importTypes(Types types){\n  SchemaCompiler compiler=XJC.createSchemaCompiler();\n  ErrorListener elForRun=new ConsoleErrorReporter();\n  compiler.setErrorListener(elForRun);\n  Element rootTypes=this.getRootTypes();\n  this.createDefaultStructures(rootTypes);\n  S2JJAXBModel intermediateModel=this.compileModel(types,compiler,rootTypes);\n  Collection<? extends Mapping> mappings=intermediateModel.getMappings();\n  for (  Mapping mapping : mappings) {\n    this.importStructure(mapping);\n  }\n}\n"}
{"nl": "Called when a Block is right-clicked with this Item", "code": "public EnumActionResult onItemUse(ItemStack stack,EntityPlayer playerIn,World worldIn,BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){\n  if (facing != EnumFacing.UP) {\n    return EnumActionResult.FAIL;\n  }\n else {\n    IBlockState iblockstate=worldIn.getBlockState(pos);\n    Block block=iblockstate.getBlock();\n    if (!block.isReplaceable(worldIn,pos)) {\n      pos=pos.offset(facing);\n    }\n    if (playerIn.canPlayerEdit(pos,facing,stack) && this.block.canPlaceBlockAt(worldIn,pos)) {\n      EnumFacing enumfacing=EnumFacing.fromAngle((double)playerIn.rotationYaw);\n      int i=enumfacing.getFrontOffsetX();\n      int j=enumfacing.getFrontOffsetZ();\n      placeDoor(worldIn,pos,enumfacing,this.block);\n      SoundType soundtype=this.block.getSoundType();\n      worldIn.playSound(playerIn,pos,soundtype.getPlaceSound(),SoundCategory.BLOCKS,(soundtype.getVolume() + 1.0F) / 2.0F,soundtype.getPitch() * 0.8F);\n      --stack.stackSize;\n      return EnumActionResult.SUCCESS;\n    }\n else {\n      return EnumActionResult.FAIL;\n    }\n  }\n}\n"}
{"nl": "Sends a status to the client to be presented to users", "code": "public void sendStatus(ServiceStatus serverStatus,String status){\n  NotificationMessage<StatusReport> message=new NotificationMessage<>();\n  message.setMethod(LSPMethods.LANGUAGE_STATUS.getMethod());\n  message.setParams(new StatusReport().withMessage(status).withType(serverStatus.name()));\n  send(message);\n}\n"}
{"nl": "Create a directory if needed", "code": "public static File createParentDirIfNotExists(String filePath){\n  File file=new File(filePath);\n  file.getParentFile().mkdirs();\n  return file;\n}\n"}
{"nl": "Set fields", "code": "public PhotosGetCommentsQueryWithExtended fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Returns true if the current layout is orientation-specific", "code": "public boolean isOrientationSpecificLayout(){\n  return myEditedConfig.getScreenOrientationQualifier() != null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsDeleteAdsQuery(VkApiClient client,UserActor actor,int accountId,String ids){\n  super(client,\"ads.deleteAds\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  ids(ids);\n}\n"}
{"nl": "Constructs a new MapperKey instance", "code": "public MapperKey(Type<?> aType,Type<?> bType){\n  this.aType=(Type<Object>)aType;\n  this.bType=(Type<Object>)bType;\n}\n"}
{"nl": "Display Timer(4)", "code": "public SM_QUEST_ACTION(int questId,int timer){\n  this.action=4;\n  this.questId=questId;\n  this.timer=timer;\n  this.step=0;\n}\n"}
{"nl": "%0: Level %1 (%2)", "code": "public static SM_SYSTEM_MESSAGE STR_MACRO_MSG_PROCESS(String value0,String value1,String value2){\n  return new SM_SYSTEM_MESSAGE(1300921,value0,value1,value2);\n}\n"}
{"nl": "Make an immutable node instance", "code": "public Node(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){\n  if (permission == null || permission.equals(\"\")) {\n    throw new IllegalArgumentException(\"Empty permission\");\n  }\n  if (server != null && (server.equalsIgnoreCase(\"global\") || server.equals(\"\"))) {\n    server=null;\n  }\n  if (world != null && world.equals(\"\")) {\n    world=null;\n  }\n  if (world != null && server == null) {\n    server=\"global\";\n  }\n  this.permission=permission;\n  this.value=value;\n  this.override=override;\n  this.expireAt=expireAt;\n  this.server=server;\n  this.world=world;\n  this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable();\n}\n"}
{"nl": "Set extended", "code": "public WallGetCommentsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.HELLINGER + \";\");\n}\n"}
{"nl": "add shadow view on the left of content view", "code": "private void addShadowView(){\n  if (mShadowView == null) {\n    mShadowView=new ShadowView(getContext());\n    mShadowView.setX(-SHADOW_WIDTH);\n  }\n  final FrameLayout.LayoutParams layoutParams=new FrameLayout.LayoutParams(SHADOW_WIDTH,FrameLayout.LayoutParams.MATCH_PARENT);\n  final FrameLayout contentView=mCurrentContentView;\n  contentView.addView(mShadowView,1,layoutParams);\n}\n"}
{"nl": "gets the max value for a given class in a transposed chart when using percentages", "code": "public double computeMaxClassValueUsingPercentFactorPerSeries(DefaultChartData chartData,String[] series,double[] percentFactorPerSeries){\n  double maxValue=0;\n  for (  String className : chartData.getClassNamesIncludingDisabled()) {\n    double total=0;\n    for (int i=0; i < series.length; i++) {\n      String seriesName=series[i];\n      if (transposedHeightsAdditive)       total+=percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className);\n else       total=Math.max(total,percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className));\n    }\n    if (total > maxValue) {\n      maxValue=total;\n    }\n  }\n  return 1.1 * maxValue;\n}\n"}
{"nl": "Keccak-256 hash function", "code": "public static String sha3(String hexInput){\n  byte[] bytes=Numeric.hexStringToByteArray(hexInput);\n  byte[] result=sha3(bytes);\n  return Numeric.toHexString(result);\n}\n"}
{"nl": "Show error view with a button when something goes wrong and prompting the user to try again", "code": "public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){\n  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,skipIds);\n}\n"}
{"nl": "load the module by id", "code": "public static Module load(int id){\n  return modules.get(id);\n}\n"}
{"nl": "get enemy direction", "code": "private void GetDir(int col){\n  dir=sPath.get_Directions()[col];\n  len=sPath.get_Lens()[col];\n  sx=this.map_controler.get_Direc_Dis_X(dir);\n  sy=this.map_controler.get_Direc_Dis_Y(dir);\n}\n"}
{"nl": "Must call init first", "code": "private void initSkinLoader(){\n  setUpSkinFile();\n  SkinManager.getInstance().init(this);\n  SkinManager.getInstance().loadSkin();\n}\n"}
{"nl": "Creates a meta storable fence which is a logical 'and' of all the given fences", "code": "@NonNull public static StorableFence and(@NonNull StorableFence... fences){\n  return StorableFence.and(Arrays.asList(fences));\n}\n"}
{"nl": "Flush the disk cache used for storing Bitmaps", "code": "public void flush(){\n  getDiskCache().flush();\n}\n"}
{"nl": "Creates a new executor object for spawning worker threads", "code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  String choice=ProgramProperties.get(\"NucleotideColorScheme\",ColorSchemeNucleotides.NAMES.Default.toString());\n  String result=(String)JOptionPane.showInputDialog(getViewer().getFrame(),\"Choose nucleotide color scheme\",\"Choose colors\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),ColorSchemeNucleotides.getNames(),choice);\n  if (result != null) {\n    result=result.trim();\n    if (result.length() > 0) {\n      ProgramProperties.put(\"NucleotideColorScheme\",result);\n      execute(\"set nucleotideColors='\" + result + \"';\");\n    }\n  }\n}\n"}
{"nl": "Resets the audio clock", "code": "public synchronized void resetTime(){\n}\n"}
{"nl": "Set count", "code": "public PhotosGetQuery count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Set latitude", "code": "public PhotosEditQuery latitude(Float value){\n  return unsafeParam(\"latitude\",value);\n}\n"}
{"nl": "Called when the current flight was successfully received", "code": "@Override public void onSuccess(AirMapFlight response){\n  if (response != null) {\n    flightId=response.getFlightId();\n    options.setUserName(flightId);\n    AirMapLog.v(\"TrafficService\",options.toString());\n    AirMapLog.i(\"TrafficService\",\"Got flight with id: \" + flightId);\n    AirMapLog.i(\"TrafficService\",\"Connecting to MQTT server\");\n    try {\n      client.connect(options,ConnectionState.Connecting,actionListener);\n    }\n catch (    MqttException e) {\n      onDisconnect(false);\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PagesSaveQuery(VkApiClient client,UserActor actor){\n  super(client,\"pages.save\",Integer.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Utility to draw the given drawing as a shadow", "code": "private static void paintShadow(Graphics2D g,ColorSet colorSet,ConnectionDrawing drawing){\n  Color pre=g.getColor();\n  Stroke s=g.getStroke();\n  if (colorSet.getStyle() == WidgetDecorator.BLUEPRINT_STYLE) {\n    g.setPaint(colorSet.getBackgroundPaint());\n    g.setStroke(sLineShadowStroke);\n  }\n else {\n    g.setColor(colorSet.getShadow());\n    g.setStroke(colorSet.getShadowStroke());\n  }\n  drawing.draw(g);\n  g.setColor(pre);\n  g.setStroke(s);\n}\n"}
{"nl": "json --> obj", "code": "public static QrCodeResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,QrCodeResult.class);\n}\n"}
{"nl": "Returns a new AnyVal that matches the given literal value", "code": "static <T>AnyVal<T> lit(T matchValue){\n  return new AnyVal<T>(matchValue,false,false){\n  }\n;\n}\n"}
{"nl": "Set whether or not the bottom navigation bar will be displayed", "code": "public Builder displayBottomNavigation(boolean displayBottomNavigationBar){\n  this.displayBottomNavigation=displayBottomNavigationBar;\n  return this;\n}\n"}
{"nl": "Private lrmi method that constructs an unsupported method representation", "code": "private LRMIMethod(IMethod realMethod,boolean isOneWay,boolean isCallBack,boolean isAsync,boolean useStubCache,boolean livenessPriority,boolean monitoringPriority,boolean isCustomTracking,int orderId,boolean supported){\n  this.realMethod=realMethod;\n  this.isOneWay=isOneWay;\n  this.isCallBack=isCallBack;\n  this.useStubCache=useStubCache;\n  this.isCustomTracking=isCustomTracking;\n  this.orderId=orderId;\n  this.isAsync=isAsync;\n  this.supported=supported;\n  this.isLivenessPriority=livenessPriority;\n  this.isMonitoringPriority=monitoringPriority;\n  this.methodTypes=this.realMethod == null ? null : this.realMethod.getParameterTypes();\n  this.realMethodString=LRMIUtilities.getMethodDisplayString(this.realMethod);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public StorageGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"storage.get\",String.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Stores player data into db", "code": "public static void storePlayer(Player player){\n  DAOManager.getDAO(PlayerDAO.class).storePlayer(player);\n  DAOManager.getDAO(PlayerSkillListDAO.class).storeSkills(player);\n  DAOManager.getDAO(PlayerSettingsDAO.class).saveSettings(player);\n  DAOManager.getDAO(PlayerQuestListDAO.class).store(player);\n  DAOManager.getDAO(AbyssRankDAO.class).storeAbyssRank(player);\n  DAOManager.getDAO(PlayerPunishmentsDAO.class).storePlayerPunishments(player,PunishmentType.PRISON);\n  DAOManager.getDAO(PlayerPunishmentsDAO.class).storePlayerPunishments(player,PunishmentType.GATHER);\n  DAOManager.getDAO(InventoryDAO.class).store(player);\n  for (  House house : player.getHouses()) {\n    DAOManager.getDAO(HousesDAO.class).storeHouse(house);\n    if (house.getRegistry() != null && house.getRegistry().getPersistentState() == PersistentState.UPDATE_REQUIRED) {\n      DAOManager.getDAO(PlayerRegisteredItemsDAO.class).store(house.getRegistry(),player.getCommonData().getPlayerObjId());\n    }\n  }\n  DAOManager.getDAO(ItemStoneListDAO.class).save(player);\n  DAOManager.getDAO(MailDAO.class).storeMailbox(player);\n  DAOManager.getDAO(PortalCooldownsDAO.class).storePortalCooldowns(player);\n  DAOManager.getDAO(CraftCooldownsDAO.class).storeCraftCooldowns(player);\n  DAOManager.getDAO(PlayerNpcFactionsDAO.class).storeNpcFactions(player);\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getSupplementaryAlignmentFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getSupplementaryAlignmentFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Deserialized the JSON string into a <code>TagConfig</code> object instance", "code": "public static TagConfig fromJson(final String json){\n  return GsonFactory.createGson().fromJson(json,TagConfig.class);\n}\n"}
{"nl": "Verifies that the session isn't closed", "code": "void ensureOpen() throws IllegalStateException {\n  if (m_closed) {\n    throw new IllegalStateException(\"Forbidden call on a closed session.\");\n  }\n}\n"}
{"nl": "Verify the initialization state of the utility", "code": "private void checkInit(){\n  if (!mInitialized)   throw new IllegalStateException(\"Scoop needs to be initialized first!\");\n}\n"}
{"nl": "Net is 2G", "code": "public static boolean is2G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && (activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_EDGE || activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_GPRS || activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_CDMA)) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Creates a storable time fence which will be valid on Thursday in the given daily time frame", "code": "public static StorableTimeFence inThursdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(THURSDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n"}
{"nl": "Create new ServerKey instance based on data provided in the stream", "code": "public ServerKey(final InputStream certificateStream) throws InvalidKeystoreException {\n  try {\n    this.trustStore=keystoreOf(certificateStream);\n    certificateStream.close();\n  }\n catch (  final CertificateException e) {\n    throw new InvalidKeystoreException(e);\n  }\ncatch (  final NoSuchAlgorithmException e) {\n    throw new InvalidKeystoreException(e);\n  }\ncatch (  final KeyStoreException e) {\n    throw new InvalidKeystoreException(e);\n  }\ncatch (  final IOException e) {\n    throw new InvalidKeystoreException(e);\n  }\n finally {\n    IOUtils.closeQuietly(certificateStream);\n  }\n}\n"}
{"nl": "Singleton accessor", "code": "public static final Scheduler sharedInstance(){\n  return INSTANCE;\n}\n"}
{"nl": "put the label to be used for the sample", "code": "public void putSampleLabel(String sampleName,String label){\n  put(sampleName,SampleAttributeTable.HiddenAttribute.Label,label);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LeadsStartQuery(VkApiClient client,int leadId,String secret){\n  super(client,\"leads.start\",Start.class);\n  leadId(leadId);\n  secret(secret);\n}\n"}
{"nl": "Set owner id", "code": "protected VideoRemoveFromAlbumQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "Build a new empty directed graph", "code": "public DirectedGraph(){\n}\n"}
{"nl": "unpublish the service from registry", "code": "public static <T>void unpublishService(ProviderConfig<T> providerConfig) throws RpcException {\n  try {\n    ServicePublisher.unpublishService(providerConfig);\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while unpublishing service:\" + providerConfig,e);\n  }\n}\n"}
{"nl": "Writes out the domains assignments section of the RIFL document", "code": "private void writeDomainAssignment(Document document,Element rootElement){\n  Element domainAssignment=document.createElement(\"domainassignment\");\n  rootElement.appendChild(domainAssignment);\n  for (  SourceSinkDomPair spec : this.document.getDomainAssignment())   writeSourceSinkDomPair(spec,document,domainAssignment);\n}\n"}
{"nl": "Add an integer column with no restrictions on the allowable values", "code": "public Builder addColumnInteger(String name){\n  return addColumn(new IntegerMetaData(name));\n}\n"}
{"nl": "convert from wrapper to external data type", "code": "public static org.apache.carbondata.format.DataType fromWrapperToExternalDataType(DataType dataType){\n  if (null == dataType) {\n    return null;\n  }\nswitch (dataType) {\ncase STRING:\n    return org.apache.carbondata.format.DataType.STRING;\ncase INT:\n  return org.apache.carbondata.format.DataType.INT;\ncase LONG:\nreturn org.apache.carbondata.format.DataType.LONG;\ncase DOUBLE:\nreturn org.apache.carbondata.format.DataType.DOUBLE;\ncase DECIMAL:\nreturn org.apache.carbondata.format.DataType.DECIMAL;\ncase TIMESTAMP:\nreturn org.apache.carbondata.format.DataType.TIMESTAMP;\ncase ARRAY:\nreturn org.apache.carbondata.format.DataType.ARRAY;\ncase STRUCT:\nreturn org.apache.carbondata.format.DataType.STRUCT;\ndefault :\nreturn org.apache.carbondata.format.DataType.STRING;\n}\n}\n"}
{"nl": "read file to string list, a element of list is a line", "code": "public static List<String> readFileToList(String filePath,String charsetName){\n  File file=new File(filePath);\n  List<String> fileContent=new ArrayList<String>();\n  if (file == null || !file.isFile()) {\n    return null;\n  }\n  BufferedReader reader=null;\n  try {\n    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);\n    reader=new BufferedReader(is);\n    String line=null;\n    while ((line=reader.readLine()) != null) {\n      fileContent.add(line);\n    }\n    return fileContent;\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"IOException occurred. \",e);\n  }\n finally {\n    IOUtil.close(reader);\n  }\n}\n"}
{"nl": "DOM Level 3: isId", "code": "@Override public boolean isId(){\n  return isIdAttribute();\n}\n"}
{"nl": "connect to server", "code": "public Socket connect() throws IOException {\n  Socket sock=new Socket();\n  sock.setReuseAddress(true);\n  sock.setSoTimeout(ClientGlobal.g_network_timeout);\n  sock.connect(new InetSocketAddress(this.ip_addr,this.port),ClientGlobal.g_connect_timeout);\n  return sock;\n}\n"}
{"nl": "Remove any expired nonces from our table", "code": "private void cleanup(){\n  Iterator<Entry<Byte,Nonce>> iter=table.entrySet().iterator();\n  while (iter.hasNext()) {\n    Nonce nonce=iter.next().getValue();\n    if (nonce.getTimer() != null && nonce.getTimer().isExpired()) {\n      logger.warn(\"NODE {}: Expiring nonce with id={}\",node.getNodeId(),nonce.getNonceId());\n      iter.remove();\n      byte nonceId=nonce.getNonceId();\n      Iterator<Map.Entry<Long,Nonce>> iter2=timeToNonceMap.entrySet().iterator();\n      while (iter2.hasNext()) {\n        Map.Entry<Long,Nonce> entry=iter2.next();\n        if (nonceId == entry.getValue().getNonceId()) {\n          iter2.remove();\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Ids of additional photos", "code": "public MarketAddQuery photoIds(Integer... value){\n  return unsafeParam(\"photo_ids\",value);\n}\n"}
{"nl": "Removes all traffic callbacks", "code": "public static void removeAllTrafficListeners(){\n  getAirMapTrafficService().removeAllListeners();\n}\n"}
{"nl": "modify appender file to storage server (by callback)", "code": "public int modify_file(String group_name,String appender_filename,long file_offset,long modify_size,UploadCallback callback) throws IOException, MyException {\n  return this.do_modify_file(group_name,appender_filename,file_offset,modify_size,callback);\n}\n"}
{"nl": "Calculates the fall damage", "code": "public static boolean calculateFallDamage(Player player,float distance,boolean stoped){\n  if (player.isInvul()) {\n    return false;\n  }\n  if (distance >= FallDamageConfig.MAXIMUM_DISTANCE_DAMAGE || !stoped) {\n    player.getController().onStopMove();\n    player.getFlyController().onStopGliding(false);\n    player.getLifeStats().reduceHp(player.getLifeStats().getMaxHp() + 1,player);\n    return true;\n  }\n else   if (distance >= FallDamageConfig.MINIMUM_DISTANCE_DAMAGE) {\n    float dmgPerMeter=player.getLifeStats().getMaxHp() * FallDamageConfig.FALL_DAMAGE_PERCENTAGE / 100f;\n    int damage=(int)(distance * dmgPerMeter);\n    player.getLifeStats().reduceHp(damage,player);\n    PacketSendUtility.sendPacket(player,new SM_ATTACK_STATUS(player,SM_ATTACK_STATUS.TYPE.FALL_DAMAGE,0,-damage));\n  }\n  return false;\n}\n"}
{"nl": "returns true if this mgr which requires that the txn participants join into the txn in contrary to a mgr which the participants are known prior to txn propagation", "code": "public boolean needParticipantsJoin(){\n  return true;\n}\n"}
{"nl": "Synthesize a \"variant\" vocalization", "code": "private AudioInputStream synthesizeVariant(AudioFileFormat aft,Element domElement) throws SynthesisException {\n  int numberOfBackChannels=unitFileReader.getNumberOfUnits();\n  int backchannelNumber=0;\n  if (domElement.hasAttribute(\"variant\")) {\n    backchannelNumber=Integer.parseInt(domElement.getAttribute(\"variant\"));\n  }\n  if (backchannelNumber >= numberOfBackChannels) {\n    throw new IllegalArgumentException(\"This voice has \" + numberOfBackChannels + \" backchannels only. so it doesn't support unit number \"+ backchannelNumber);\n  }\n  return synthesizeSelectedVocalization(backchannelNumber,aft,domElement);\n}\n"}
{"nl": "Set privacy comment", "code": "public VideoSaveQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n"}
{"nl": "quick test if this would even make a good candidate group", "code": "public boolean viable(){\n  return (mWidgetArea + mGapArea) / (float)mGroupArea > .40f;\n}\n"}
{"nl": "Creates new error", "code": "public KeyAlreadySetException(String message,Throwable cause){\n  super(message,cause);\n}\n"}
{"nl": "Writes an instance of the data type to the buffer", "code": "public void write(PacketBuffer buf,T value){\n  writer.accept(buf,value);\n}\n"}
{"nl": "upload file to storage server (by file buff, slave file mode)", "code": "public String upload_file1(String master_file_id,String prefix_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(master_file_id,parts);\n  if (this.errno != 0) {\n    return null;\n  }\n  parts=this.upload_file(parts[0],parts[1],prefix_name,file_buff,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetInvitedUsersQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.getInvitedUsers\",GetInvitedUsersResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "****************************** MONSTER DAMAGE QUERIES", "code": "public MonsterDamageCursor queryMonsterDamage(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=false;\n  qh.Table=S.TABLE_MONSTER_DAMAGE;\n  qh.Columns=null;\n  qh.Selection=S.COLUMN_MONSTER_DAMAGE_MONSTER_ID + \" = ?\";\n  qh.SelectionArgs=new String[]{String.valueOf(id)};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new MonsterDamageCursor(wrapHelper(qh));\n}\n"}
{"nl": "Set longer", "code": "public VideoSearchQuery longer(Integer value){\n  return unsafeParam(\"longer\",value);\n}\n"}
{"nl": "Logs with error level", "code": "public static void error(@Nullable Class<?> caller,String message,Object... args){\n  android.util.Log.e(tag(caller),String.format(Locale.ENGLISH,message,args));\n}\n"}
{"nl": "Resumes audio output", "code": "public void resume(){\n}\n"}
{"nl": "Return the running state of the connection", "code": "protected boolean isStopped(){\n  return stopped;\n}\n"}
{"nl": "Creates a new array data type", "code": "public ArrayDataType(Class<T[]> clazz,DataType<T> baseType){\n  super(clazz,null,null);\n}\n"}
{"nl": "update the classifications", "code": "public static void saveClassifications(DAAHeader header,String[] cNames,Map<Integer,ListOfLongs>[] fName2ClassId2Location,Map<Integer,Integer>[] fName2ClassId2Weight) throws IOException {\n  DAAModifier.removeMEGANClassificationData(header);\n  for (int f=0; f < cNames.length; f++) {\n    final String cName=cNames[f];\n    final ByteOutputStream outKey=new ByteOutputStream(1000000);\n    final OutputWriterLittleEndian wKey=new OutputWriterLittleEndian(outKey);\n    final ByteOutputStream outDump=new ByteOutputStream(1000000);\n    final OutputWriterLittleEndian wDump=new OutputWriterLittleEndian(outDump);\n    final Map<Integer,ListOfLongs> id2locations=fName2ClassId2Location[f];\n    wKey.writeNullTerminatedString(cName.getBytes());\n    wKey.writeInt(id2locations.size());\n    wDump.writeNullTerminatedString(cName.getBytes());\n    for (    int classId : id2locations.keySet()) {\n      wKey.writeInt(classId);\n      wKey.writeInt(fName2ClassId2Weight[f].get(classId));\n      final ListOfLongs list=id2locations.get(classId);\n      wKey.writeInt(list.size());\n      wKey.writeLong(wDump.getPosition());\n      for (int i=0; i < list.size(); i++) {\n        wDump.writeLong(list.get(i));\n      }\n    }\n    DAAModifier.appendBlocks(header,new BlockType[]{BlockType.megan_classification_key_block,BlockType.megan_classification_dump_block},new byte[][]{outKey.getBytes(),outDump.getBytes()},new int[]{outKey.size(),outDump.size()});\n  }\n}\n"}
{"nl": "Writes out a domain pair object for the use inside the domain hierarchy", "code": "private void writeDomainPair(DomPair pair,Document document,Element parentElement){\n  Element domPair=document.createElement(\"dompair\");\n  parentElement.appendChild(domPair);\n  writeDomainSpec(pair.getFirstDomain(),document,domPair);\n  writeDomainSpec(pair.getSecondDomain(),document,domPair);\n}\n"}
{"nl": "Set using the best available ball", "code": "public CatchOptions useBestBall(boolean useBestPokeball){\n  this.useBestPokeball=useBestPokeball;\n  return this;\n}\n"}
{"nl": "zoom to selection", "code": "public void zoomToSelection(){\n  graphView.zoomToSelection();\n}\n"}
{"nl": "Creates an rgb format", "code": "private void createRGBFormat(){\n  videoFormat=new RGBFormat(new Dimension(mip.getMWidth(),mip.getMHeight()),width * height,int[].class,mip.getFPS(),32,0x00ff0000,0x0000ff00,0x000000ff,1,width,Format.FALSE,RGBFormat.BIG_ENDIAN);\n}\n"}
{"nl": "Behaves like startOrContinueTransaction(), but with a custom transaction style", "code": "public MithraTransaction startOrContinueTransaction(TransactionStyle style) throws MithraTransactionException {\n  MithraTransaction result;\n  MithraTransaction parent=this.getCurrentTransaction();\n  if (parent != null) {\n    result=new MithraNestedTransaction(parent);\n  }\n else {\n    Transaction jtaTx;\n    try {\n      if (this.getJtaTransactionManager().getStatus() != Status.STATUS_ACTIVE) {\n        this.getJtaTransactionManager().setTransactionTimeout(style.getTimeout());\n        this.getJtaTransactionManager().begin();\n      }\n      jtaTx=this.getJtaTransactionManager().getTransaction();\n      result=this.createMithraRootTransaction(jtaTx,style.getTimeout() * 1000);\n    }\n catch (    NotSupportedException e) {\n      throw new MithraTransactionException(\"JTA exception\",e);\n    }\ncatch (    SystemException e) {\n      throw new MithraTransactionException(\"JTA exception\",e);\n    }\ncatch (    RollbackException e) {\n      throw new MithraTransactionException(\"JTA exception\",e);\n    }\n  }\n  this.setThreadTransaction(result);\n  return result;\n}\n"}
{"nl": "Gives us a chance to change layers behaviour upon drag and drop interaction ending", "code": "public void stopDragDropInteraction(){\n  for (  Layer layer : myLayers) {\n    if (layer instanceof ConstraintsLayer) {\n      ConstraintsLayer constraintsLayer=(ConstraintsLayer)layer;\n      if (constraintsLayer.isShowOnHover()) {\n        constraintsLayer.setShowOnHover(false);\n        repaint();\n      }\n    }\n  }\n}\n"}
{"nl": "are the two splits equalOverShorterOfBoth as set bipartitionings (ignoring weights)", "code": "public boolean equals(Split split){\n  return (A.equals(split.A) && B.equals(split.B)) || (A.equals(split.B) && B.equals(split.A));\n}\n"}
{"nl": "Return true if the ResizeHandle is a side handle (left/right/top/bottom)", "code": "public boolean isSideHandle(){\nswitch (mType) {\ncase LEFT_SIDE:\ncase RIGHT_SIDE:\ncase TOP_SIDE:\ncase BOTTOM_SIDE:\n    return true;\n}\nreturn false;\n}\n"}
{"nl": "Create Hashed StoredList", "code": "public static <T>IStoredList<T> createHashList(){\n  return new HashedSimpleLockIStoredList<T>(false);\n}\n"}
{"nl": "Infers a sequence schema based on the record", "code": "public static SequenceSchema inferSequenceMulti(List<List<List<Writable>>> record){\n  SequenceSchema.Builder builder=new SequenceSchema.Builder();\n  int minSequenceLength=record.get(0).size();\n  int maxSequenceLength=record.get(0).size();\n  for (int i=0; i < record.size(); i++) {\n    if (record.get(i) instanceof DoubleWritable)     builder.addColumnDouble(String.valueOf(i));\n else     if (record.get(i) instanceof IntWritable)     builder.addColumnInteger(String.valueOf(i));\n else     if (record.get(i) instanceof LongWritable)     builder.addColumnLong(String.valueOf(i));\n else     if (record.get(i) instanceof FloatWritable)     builder.addColumnFloat(String.valueOf(i));\n else     throw new IllegalStateException(\"Illegal writable for infering schema of type \" + record.get(i).getClass().toString() + \" with record \"+ record.get(0));\n    builder.minSequenceLength(Math.min(record.get(i).size(),minSequenceLength));\n    builder.maxSequenceLength(Math.max(record.get(i).size(),maxSequenceLength));\n  }\n  return builder.build();\n}\n"}
{"nl": "Remove all columns, except for those that are specified here", "code": "public Builder removeAllColumnsExceptFor(String... columnNames){\n  return transform(new RemoveAllColumnsExceptForTransform(columnNames));\n}\n"}
{"nl": "Creates a MBean dimension key for metrics", "code": "private Metrics createMetricsByDimension(ObjectName objectName){\n  Map<String,String> dimensionMap=Maps.newHashMap();\n  dimensionMap.put(\"MBean\",objectName.toString());\n  return Metrics.create(dimensionMap);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public StringCharacterIterator(String text,int begin,int end,int pos){\n  if (text == null) {\n    throw new NullPointerException();\n  }\n  this.text=text;\n  if ((begin < 0) || (begin > end) || (end > text.length())) {\n    throw new IllegalArgumentException(\"Invalid substring range\");\n  }\n  if ((pos < begin) || (pos > end)) {\n    throw new IllegalArgumentException(\"Invalid position\");\n  }\n  this.begin=begin;\n  this.end=end;\n  this.pos=pos;\n}\n"}
{"nl": "Decrease item count and update inventory", "code": "private static void decreaseItemFromPlayer(Player seller,Item item,TradeItem tradeItem){\n  seller.getInventory().decreaseItemCount(item,tradeItem.getCount());\n  seller.getStore().getTradeItemByObjId(item.getObjectId()).decreaseCount(tradeItem.getCount());\n}\n"}
{"nl": "this tab has been selected", "code": "public void activate(){\n}\n"}
{"nl": "Returns the fields whose values will be modified", "code": "public Collection<String> targetFields(){\n  return new ArrayList<String>(fldVals.keySet());\n}\n"}
{"nl": "merge RMA files", "code": "public static void main(String[] args){\n  try {\n    ProgramProperties.setProgramName(\"ReferencesAnnotator\");\n    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);\n    PeakMemoryUsageMonitor.start();\n    (new ReferencesAnnotator()).run(args);\n    System.err.println(\"Total time:  \" + PeakMemoryUsageMonitor.getSecondsSinceStartString());\n    System.err.println(\"Peak memory: \" + PeakMemoryUsageMonitor.getPeakUsageString());\n    System.exit(0);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n    System.exit(1);\n  }\n}\n"}
{"nl": "Key released", "code": "public void keyReleased(KeyEvent ke){\n  if ((ke.getModifiers() & InputEvent.SHIFT_MASK) != 0) {\n    viewer.resetCursor();\n  }\n}\n"}
{"nl": "Collection cover photo id", "code": "public MarketAddAlbumQuery photoId(Integer value){\n  return unsafeParam(\"photo_id\",value);\n}\n"}
{"nl": "Impose a target f0 contour onto a (source) unit", "code": "private AudioInputStream imposeF0ContourOnVocalization(int sourceIndex,int targetIndex,AudioFileFormat aft,Element domElement) throws SynthesisException {\n  int numberOfBackChannels=unitFileReader.getNumberOfUnits();\n  if (targetIndex >= numberOfBackChannels) {\n    throw new IllegalArgumentException(\"This voice has \" + numberOfBackChannels + \" backchannels only. so it doesn't support unit number \"+ targetIndex);\n  }\n  if (sourceIndex >= numberOfBackChannels) {\n    throw new IllegalArgumentException(\"This voice has \" + numberOfBackChannels + \" backchannels only. so it doesn't support unit number \"+ sourceIndex);\n  }\n  VocalizationUnit bUnit=unitFileReader.getUnit(sourceIndex);\n  Unit[] units=bUnit.getUnits();\n  String[] unitNames=bUnit.getUnitNames();\n  long endTime=0l;\n  for (int i=0; i < units.length; i++) {\n    int unitDuration=units[i].duration * 1000 / unitFileReader.getSampleRate();\n    endTime+=unitDuration;\n    Element element=MaryXML.createElement(domElement.getOwnerDocument(),MaryXML.PHONE);\n    element.setAttribute(\"d\",Integer.toString(unitDuration));\n    element.setAttribute(\"end\",Long.toString(endTime));\n    element.setAttribute(\"p\",unitNames[i]);\n    domElement.appendChild(element);\n  }\n  return this.vSynthesizer.synthesizeUsingImposedF0(sourceIndex,targetIndex,aft);\n}\n"}
{"nl": "Method to take an input json array format string and output an ArrayWritable", "code": "public static ArrayWritable jsonArrayStringtoArrayWritable(String jsonString){\n  String modString=jsonString.replaceFirst(\"\\\\[\",\"\");\n  modString=modString.replaceFirst(\"\\\\]\",\"\");\n  modString=modString.replaceAll(\"\\\"\",\"\");\n  String[] elements=modString.split(\"\\\\s*,\\\\s*\");\n  logger.debug(\"elements = \");\n  for (  String element : elements) {\n    logger.debug(\"element: \" + element);\n  }\n  return new ArrayWritable(elements);\n}\n"}
{"nl": "Encrypt byte array", "code": "public static byte[] encryptMD5(byte[] bytes){\n  try {\n    MessageDigest md=MessageDigest.getInstance(\"MD5\");\n    md.update(bytes);\n    return md.digest();\n  }\n catch (  NoSuchAlgorithmException e) {\n    e.printStackTrace();\n  }\n  return new byte[0];\n}\n"}
{"nl": "****************************** WISHLIST QUERIES", "code": "public WishlistCursor queryWishlists(){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=false;\n  qh.Table=S.TABLE_WISHLIST;\n  qh.Columns=null;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new WishlistCursor(wrapHelper(qh));\n}\n"}
{"nl": "Set link id", "code": "protected FaveRemoveLinkQuery linkId(String value){\n  return unsafeParam(\"link_id\",value);\n}\n"}
{"nl": "uses polyglot to compile source and build AST", "code": "public polyglot.ast.Node compile(polyglot.frontend.Compiler compiler,String fileName,polyglot.frontend.ExtensionInfo extInfo){\n  SourceLoader source_loader=compiler.sourceExtension().sourceLoader();\n  try {\n    FileSource source=new FileSource(new File(fileName));\n    if (false)     throw new IOException(\"Bogus exception\");\n    SourceJob job=null;\n    if (compiler.sourceExtension() instanceof soot.javaToJimple.jj.ExtensionInfo) {\n      soot.javaToJimple.jj.ExtensionInfo jjInfo=(soot.javaToJimple.jj.ExtensionInfo)compiler.sourceExtension();\n      if (jjInfo.sourceJobMap() != null) {\n        job=(SourceJob)jjInfo.sourceJobMap().get(source);\n      }\n    }\n    if (job == null) {\n      job=compiler.sourceExtension().addJob(source);\n    }\n    boolean result=false;\n    result=compiler.sourceExtension().runToCompletion();\n    if (!result) {\n      throw new soot.CompilationDeathException(0,\"Could not compile\");\n    }\n    polyglot.ast.Node node=job.ast();\n    return node;\n  }\n catch (  IOException e) {\n    return null;\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set show-unaligned=\" + !isSelected() + \";\");\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set summarized=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  ((ExtractReadsViewer)getViewer()).setIncludeSummarized(value);\n}\n"}
{"nl": "Create a date from formatted string with specific date format", "code": "public static Date stringToDate(String formattedDate,SimpleDateFormat dateFormat){\n  return new Date(stringToMilliseconds(formattedDate,dateFormat));\n}\n"}
{"nl": "Computes incremental checksum with input previousChecksum and input payload", "code": "public static int resumeChecksum(int previousChecksum,ByteBuf payload){\n  if (payload.hasMemoryAddress() && (CRC32C_HASH instanceof Sse42Crc32C)) {\n    return CRC32C_HASH.resume(previousChecksum,payload.memoryAddress() + payload.readerIndex(),payload.readableBytes());\n  }\n else   if (payload.hasArray()) {\n    return CRC32C_HASH.resume(previousChecksum,payload.array(),payload.arrayOffset() + payload.readerIndex(),payload.readableBytes());\n  }\n else {\n    return CRC32C_HASH.resume(previousChecksum,payload.nioBuffer());\n  }\n}\n"}
{"nl": "author  hhj TODO", "code": "public static void debugLongInfo(String str){\n  debugLongInfo(DEFAULT_TAG,str);\n}\n"}
{"nl": "Pattern used : Visitor Pattern Method will create filter resolver tree based on the filter expression tree, in this algorithm based on the expression instance the resolvers will created", "code": "private FilterResolverIntf createFilterResolverTree(Expression expressionTree,AbsoluteTableIdentifier tableIdentifier,Expression intermediateExpression){\n  ExpressionType filterExpressionType=expressionTree.getFilterExpressionType();\n  BinaryExpression currentExpression=null;\nswitch (filterExpressionType) {\ncase OR:\n    currentExpression=(BinaryExpression)expressionTree;\n  return new LogicalFilterResolverImpl(createFilterResolverTree(currentExpression.getLeft(),tableIdentifier,currentExpression),createFilterResolverTree(currentExpression.getRight(),tableIdentifier,currentExpression),currentExpression);\ncase AND:\ncurrentExpression=(BinaryExpression)expressionTree;\nreturn new LogicalFilterResolverImpl(createFilterResolverTree(currentExpression.getLeft(),tableIdentifier,currentExpression),createFilterResolverTree(currentExpression.getRight(),tableIdentifier,currentExpression),currentExpression);\ncase EQUALS:\ncase IN:\nreturn getFilterResolverBasedOnExpressionType(ExpressionType.EQUALS,((BinaryConditionalExpression)expressionTree).isNull,expressionTree,tableIdentifier,expressionTree);\ncase GREATERTHAN:\ncase GREATERTHAN_EQUALTO:\ncase LESSTHAN:\ncase LESSTHAN_EQUALTO:\nreturn getFilterResolverBasedOnExpressionType(ExpressionType.EQUALS,true,expressionTree,tableIdentifier,expressionTree);\ncase NOT_EQUALS:\ncase NOT_IN:\nreturn getFilterResolverBasedOnExpressionType(ExpressionType.NOT_EQUALS,false,expressionTree,tableIdentifier,expressionTree);\ncase FALSE:\nreturn getFilterResolverBasedOnExpressionType(ExpressionType.FALSE,false,expressionTree,tableIdentifier,expressionTree);\ndefault :\nreturn getFilterResolverBasedOnExpressionType(ExpressionType.UNKNOWN,false,expressionTree,tableIdentifier,expressionTree);\n}\n}\n"}
{"nl": "Writes out the domain hierarchy component of the RIFL document", "code": "private void writeDomainHierarchy(Document document,Element rootElement){\n  Element domainHierarchy=document.createElement(\"domainhierarchy\");\n  rootElement.appendChild(domainHierarchy);\n  for (  DomPair pair : this.document.getDomainHierarchy())   writeDomainPair(pair,document,domainHierarchy);\n}\n"}
{"nl": "is unhide applicable to current selection?", "code": "public boolean unhideIsApplicable(){\n  try {\n    if (getSelectedColumns().size() == 1 && getSelectedAttributes().size() == 0) {\n      int which=0;\n      if (which < dataGrid.getAttributesOrder().size()) {\n        String next=dataGrid.getAttributesOrder().get(which);\n        if (samplesViewer.getSampleAttributeTable().isHiddenAttribute(next))         return true;\n      }\n      return false;\n    }\n    for (    String attribute : getSelectedAttributes()) {\n      int which=dataGrid.getAttributesOrder().indexOf(attribute) - 1;\n      if (which >= 0) {\n        String next=dataGrid.getAttributesOrder().get(which);\n        if (samplesViewer.getSampleAttributeTable().isHiddenAttribute(next)) {\n          return true;\n        }\n      }\n      which=dataGrid.getAttributesOrder().indexOf(attribute) + 1;\n      if (which > 0 && which < dataGrid.getAttributesOrder().size()) {\n        String next=dataGrid.getAttributesOrder().get(which);\n        if (samplesViewer.getSampleAttributeTable().isHiddenAttribute(next)) {\n          return true;\n        }\n      }\n    }\n  }\n catch (  Exception ex) {\n    if (Platform.isFxApplicationThread())     Basic.caught(ex);\n  }\n  return false;\n}\n"}
{"nl": "Creates a new wrapper packet", "code": "public PacketWrapper(AbstractChannel channel,AbstractPacket packet){\n  this.channel=channel;\n  this.packet=packet;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();\n  if (samples.size() > 0)   execute(\"set nodeShape=none sample='\" + Basic.toString(samples,\"' '\") + \"';\");\n}\n"}
{"nl": "Restores recently deleted item", "code": "public MarketRestoreQuery restore(UserActor actor,int ownerId,int itemId){\n  return new MarketRestoreQuery(getClient(),actor,ownerId,itemId);\n}\n"}
{"nl": "This method checks if value has format of system property", "code": "public static boolean isSystemProp(String propertyValue){\n  int fIndex=propertyValue.indexOf(\"${\");\n  int lIndex=propertyValue.lastIndexOf(\"}\");\n  return (fIndex != -1 && lIndex != -1);\n}\n"}
{"nl": "Create a new Ring Buffer with the specified producer type (SINGLE or MULTI)", "code": "public static <E>RingBuffer<E> create(ProducerType producerType,EventFactory<E> factory,int bufferSize,WaitStrategy waitStrategy){\nswitch (producerType) {\ncase SINGLE:\n    return createSingleProducer(factory,bufferSize,waitStrategy);\ncase MULTI:\n  return createMultiProducer(factory,bufferSize,waitStrategy);\ndefault :\nthrow new IllegalStateException(producerType.toString());\n}\n}\n"}
{"nl": "Open the app settings to enable permissions", "code": "public static void openPermissionsSettings(Context context){\n  if (context == null) {\n    return;\n  }\n  final Intent i=new Intent();\n  i.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n  i.addCategory(Intent.CATEGORY_DEFAULT);\n  i.setData(Uri.parse(\"package:\" + context.getPackageName()));\n  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n  i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);\n  i.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);\n  context.startActivity(i);\n}\n"}
{"nl": "ask view to prevent user input", "code": "public void lockUserInput(){\n}\n"}
{"nl": "Method checks whether local occurs in the left or right side of the localpair different semantics than the usual contains method which checks something in a list", "code": "public boolean contains(Local local){\n  if (leftLocal.toString().equals(local.toString()) || rightLocal.toString().equals(local.toString())) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  ProgramProperties.put(MeganProperties.CHART_WINDOW_GEOMETRY,new int[]{getLocation().x,getLocation().y,getSize().width,getSize().height});\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  executorService.shutdownNow();\n  boolean ok=false;\n  try {\n    ok=executorService.awaitTermination(2,TimeUnit.SECONDS);\n  }\n catch (  InterruptedException e) {\n    e.printStackTrace();\n  }\n  if (!ok)   NotificationsInSwing.showInternalError(getFrame(),\"Failed to terminate runaway threads... (consider restarting MEGAN)\");\n  getChartDrawer().close();\n  if (searchManager != null && searchManager.getFindDialogAsToolBar() != null)   searchManager.getFindDialogAsToolBar().close();\n  dir.removeViewer(this);\n  dispose();\n}\n"}
{"nl": "upload file to storage server (by file name, slave file mode)", "code": "public String upload_file1(String master_file_id,String prefix_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(master_file_id,parts);\n  if (this.errno != 0) {\n    return null;\n  }\n  parts=this.upload_file(parts[0],parts[1],prefix_name,local_filename,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Sort order", "code": "public FriendsGetRequestsQueryWithExtended sort(FriendsGetRequestsSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Check if the skill can be used", "code": "public boolean canUseSkill(){\n  Properties properties=skillTemplate.getProperties();\n  if (properties != null && !properties.validate(this)) {\n    log.debug(\"properties failed\");\n    return false;\n  }\n  if (!preCastCheck()) {\n    return false;\n  }\n  if (effector instanceof Player) {\n    Player player=(Player)effector;\n    if (this.skillTemplate.getCounterSkill() != null) {\n      long time=player.getLastCounterSkill(skillTemplate.getCounterSkill());\n      if ((time + 5000) < System.currentTimeMillis()) {\n        log.debug(\"chain skill failed, too late\");\n        return false;\n      }\n    }\n    if (skillMethod == SkillMethod.ITEM && duration > 0 && player.getMoveController().isInMove()) {\n      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_ITEM_CANCELED(new DescriptionId(getItemTemplate().getNameId())));\n      return false;\n    }\n  }\n  if (!validateEffectedList()) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Convert bytes to Hex", "code": "public static String bytesToHex(byte[] src){\n  char[] res=new char[src.length * 2];\n  final char hexDigits[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};\n  for (int i=0, j=0; i < src.length; i++) {\n    res[j++]=hexDigits[src[i] >>> 4 & 0x0f];\n    res[j++]=hexDigits[src[i] & 0x0f];\n  }\n  return new String(res);\n}\n"}
{"nl": "Method which writes an index to stdout", "code": "public void print(){\n  System.out.println(\"<INDEX>\");\n  int numIdx=getNumIdx();\n  System.out.println(\"interval = \" + idxInterval);\n  System.out.println(\"numIdx = \" + numIdx);\n  for (int i=0; i < numIdx; i++) {\n    System.out.println(\"( \" + bytePtrs[i] + \" , \"+ timePtrs[i]+ \" )\");\n  }\n  System.out.println(\"</INDEX>\");\n}\n"}
{"nl": "Set device id", "code": "public AccountSetSilenceModeQuery deviceId(String value){\n  return unsafeParam(\"device_id\",value);\n}\n"}
{"nl": "Converts to column dictionary integer value", "code": "@Override public int fillConvertedChunkData(int rowId,int columnIndex,int[] row,KeyStructureInfo restructuringInfo){\n  if (chunkAttributes.getInvertedIndexes() != null) {\n    rowId=chunkAttributes.getInvertedIndexesReverse()[rowId];\n  }\n  int start=rowId * chunkAttributes.getColumnValueSize();\n  int dict=0;\n  for (int i=start; i < start + chunkAttributes.getColumnValueSize(); i++) {\n    dict<<=8;\n    dict^=dataChunk[i] & 0xFF;\n  }\n  row[columnIndex]=dict;\n  return columnIndex + 1;\n}\n"}
{"nl": "Create a ServiceClient instance using the given TrustManager and KeyManager", "code": "public static ServiceClient createServiceClient(TrustManager trustManager,KeyManager keyManager){\n  return createServiceClient(CertificateUtil.createSSLContext(trustManager,keyManager));\n}\n"}
{"nl": "Creates new collection of items", "code": "public MarketAddAlbumQuery addAlbum(UserActor actor,int ownerId,String title){\n  return new MarketAddAlbumQuery(getClient(),actor,ownerId,title);\n}\n"}
{"nl": "Read a UTF8 encoded string from in", "code": "public static String readString(DataInput in) throws IOException {\n  int length=WritableUtils.readVInt(in);\n  byte[] bytes=new byte[length];\n  in.readFully(bytes,0,length);\n  return decode(bytes);\n}\n"}
{"nl": "goto the last object Not implemented", "code": "public boolean gotoLast(){\n  currentTaxonIterator=null;\n  currentTaxonId=null;\n  return isCurrentSet();\n}\n"}
{"nl": "Draws a small button with the skin face of rewinside on it", "code": "public static void drawButtonRewiConnect(RewiButtonConnectType connectType,IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){\n  if (!visible)   return;\n  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);\n  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);\n  getTextureHandler().bindModTexture(\"textures/misc/\" + (connectType == RewiButtonConnectType.MINECRAFT ? \"rewiHead16\" : \"teamspeak256\") + \".png\");\n  getGlStateManager().color(1.0F,1.0F,1.0F);\n  drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14);\n}\n"}
{"nl": "computes the id for a read from its matches matches", "code": "public int computeId(BitSet activeMatches,IReadBlock readBlock){\n  if (name2id != null) {\n    final String name=readBlock.getReadName();\n    final Integer id=name2id.get(name);\n    if (id != null && id > 0)     return id;\n  }\n  if (activeMatches.cardinality() == 0)   return IdMapper.NOHITS_ID;\n  for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {\n    IMatchBlock match=readBlock.getMatchBlock(i);\n    int id=match.getId(cName);\n    if (id > 0)     return id;\n  }\n  return IdMapper.UNASSIGNED_ID;\n}\n"}
{"nl": "Debug output to a text file", "code": "public void toTextOut(CART cart,PrintWriter pw) throws IOException {\n  try {\n    toWagonFormat(cart.getRootNode(),null,\"\",pw);\n    pw.flush();\n    pw.close();\n  }\n catch (  IOException ioe) {\n    IOException newIOE=new IOException(\"Error dumping CART to standard output\");\n    newIOE.initCause(ioe);\n    throw newIOE;\n  }\n}\n"}
{"nl": "Add a delegate identified by the given unique key (can be used to remove it later)", "code": "public void putDelegate(Object key,X509TrustManager newDelegate){\n  delegates.put(key,newDelegate);\n}\n"}
{"nl": "Test that the main theme will override the one from the library", "code": "public void testThemeOverride(){\n  VirtualFile virtualFile=myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles.xml\",\"res/values/styles.xml\");\n  myFixture.copyFileToProject(\"themeEditor/themeEditorStyle/styles_1.xml\",\"additionalModules/moduleA/res/values/styles.xml\");\n  ConfigurationManager configurationManager=myFacet.getConfigurationManager();\n  Configuration configuration=configurationManager.getConfiguration(virtualFile);\n  ThemeResolver resolver=new ThemeResolver(configuration);\n  ConfiguredThemeEditorStyle theme=resolver.getTheme(\"AppTheme\");\n  assertNotNull(theme);\n  assertEquals(1,theme.getParentNames().size());\n  assertEquals(\"ATheme\",theme.getParentNames().iterator().next().getElement());\n}\n"}
{"nl": "Logging Levels for debugging: BODY, HEADER", "code": "@Singleton @Provides Retrofit provideRetrofit(){\n  HttpLoggingInterceptor interceptor=new HttpLoggingInterceptor();\n  interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);\n  OkHttpClient client=new OkHttpClient.Builder().addInterceptor(interceptor).build();\n  Retrofit retrofit=new Retrofit.Builder().baseUrl(\"https://api.github.com/\").client(client).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).build();\n  return retrofit;\n}\n"}
{"nl": "adds source file tag to each sootclass", "code": "protected void addSourceFileTag(soot.SootClass sc){\n  soot.tagkit.SourceFileTag tag=null;\n  if (sc.hasTag(\"SourceFileTag\")) {\n    tag=(soot.tagkit.SourceFileTag)sc.getTag(\"SourceFileTag\");\n  }\n else {\n    tag=new soot.tagkit.SourceFileTag();\n    sc.addTag(tag);\n  }\n  String name=Util.getSourceFileOfClass(sc);\n  if (InitialResolver.v().classToSourceMap() != null) {\n    if (InitialResolver.v().classToSourceMap().containsKey(name)) {\n      name=InitialResolver.v().classToSourceMap().get(name);\n    }\n  }\n  int slashIndex=name.lastIndexOf(\"/\");\n  if (slashIndex != -1) {\n    name=name.substring(slashIndex + 1);\n  }\n  tag.setSourceFile(name);\n}\n"}
{"nl": "Picks a suitable configuration to use for resource resolution", "code": "@Nullable private static Configuration pickConfiguration(AndroidFacet facet,Module module,PsiFile file){\n  VirtualFile virtualFile=file.getVirtualFile();\n  if (virtualFile == null) {\n    return null;\n  }\n  VirtualFile parent=virtualFile.getParent();\n  if (parent == null) {\n    return null;\n  }\n  VirtualFile layout;\n  String parentName=parent.getName();\n  if (!parentName.startsWith(FD_RES_LAYOUT)) {\n    layout=pickLayoutFile(module,facet);\n    if (layout == null) {\n      return null;\n    }\n  }\n else {\n    layout=virtualFile;\n  }\n  return facet.getConfigurationManager().getConfiguration(layout);\n}\n"}
{"nl": "\"true\" - to add a star (mark as important) \"false\" - to remove the star", "code": "public MessagesMarkAsImportantQuery important(Boolean value){\n  return unsafeParam(\"important\",value);\n}\n"}
{"nl": "compute profiles for  analysis", "code": "public static double[][] computeProfiles(Document doc,ViewerBase graphView){\n  final int totalSamples=doc.getNumberOfSamples();\n  int totalClasses=0;\n  for (Node v=graphView.getGraph().getFirstNode(); v != null; v=v.getNext()) {\n    if (graphView.getSelected(v)) {\n      totalClasses++;\n    }\n  }\n  double[][] profiles=new double[totalSamples][totalClasses];\n  int classCount=0;\n  for (Node v=graphView.getGraph().getFirstNode(); v != null; v=v.getNext()) {\n    if (graphView.getSelected(v)) {\n      int[] counts=(v.getOutDegree() == 0 ? graphView.getNodeData(v).getSummarized() : graphView.getNodeData(v).getAssigned());\n      for (int sampleCount=0; sampleCount < totalSamples; sampleCount++) {\n        profiles[sampleCount][classCount]=counts[sampleCount];\n      }\n      classCount++;\n    }\n  }\n  for (  double[] profile : profiles) {\n    double sum=0;\n    for (    double value : profile)     sum+=value;\n    if (sum > 0) {\n      for (int i=0; i < profile.length; i++) {\n        profile[i]/=sum;\n      }\n    }\n  }\n  return profiles;\n}\n"}
{"nl": "jude is foot view", "code": "public boolean isFooter(int position){\n  return position < getItemCount() && position >= getItemCount() - mFootViews.size();\n}\n"}
{"nl": "Creates a new instance of CASCDistanceCalculator", "code": "public CASCDistanceCalculator() throws IOException {\n  Process p=Runtime.getRuntime().exec(PathToCasc);\n  try {\n    p.waitFor();\n  }\n catch (  InterruptedException iee) {\n    return;\n  }\n}\n"}
{"nl": "Reads a packet from the given buffer", "code": "@Override public Packet read(PacketBuffer buf){\n  PacketSpec spec=getSpec(buf.readInt());\n  Packet packet=new Packet(new PacketBuilder(this,spec));\n  packet.read(buf);\n  return packet;\n}\n"}
{"nl": "Required for Externalizable", "code": "public RegisterLocalViewSpaceOperationRequest(){\n}\n"}
{"nl": "Helper method to create a <code>TransferTagValueImpl</code> test object", "code": "public static TransferTagValueImpl createTagForValue(final Object tagValue){\n  TransferTagValueImpl result;\n  DataTagQualityImpl tagQuality=new DataTagQualityImpl(TagQualityStatus.PROCESS_DOWN,\"Process Down\");\n  Timestamp sourceTimestamp=new Timestamp(System.currentTimeMillis());\n  Timestamp daqTimestamp=new Timestamp(System.currentTimeMillis());\n  Timestamp serverTimestamp=new Timestamp(System.currentTimeMillis());\n  String descr=\"Test transfer tag\";\n  String valDesc=\"Test val desc {{ \\\"aaa:\\\" \\\"342343\\\" } \\n , ] }\";\n  result=new TransferTagValueImpl(1234L,tagValue,valDesc,tagQuality,TagMode.TEST,sourceTimestamp,daqTimestamp,serverTimestamp,descr);\n  result.setValueClassName(tagValue.getClass().getName());\n  return result;\n}\n"}
{"nl": "Test Start->User Task process on PROCESS_COMPLETED event", "code": "@Deployment(resources={\"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.noEndProcess.bpmn20.xml\"}) public void testProcessCompleted_NoEnd() throws Exception {\n  ProcessInstance noEndProcess=this.runtimeService.startProcessInstanceByKey(\"noEndProcess\");\n  Task task=taskService.createTaskQuery().processInstanceId(noEndProcess.getId()).singleResult();\n  taskService.complete(task.getId());\n  assertEquals(\"ActivitiEventType.PROCESS_COMPLETED was expected 1 time.\",1,listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());\n}\n"}
{"nl": "Save the config", "code": "@RequestMapping(value=\"/configs\",method=RequestMethod.POST) public JsonResponse saveConfig(@RequestParam(\"appId\") Long appId,@RequestParam(\"name\") String name,@RequestParam(\"value\") String value){\n  Response<Long> saveResp=configService.save(appId,name,value);\n  if (!saveResp.isSuccess()) {\n    Logs.error(\"failed to save config(appId={}, name={}, value={}), cause: {}\",appId,name,value,saveResp.getErr());\n    return JsonResponse.notOk(saveResp.getErr());\n  }\n  return JsonResponse.ok(saveResp.getData());\n}\n"}
{"nl": "Saves the widget values for the next time", "code": "private void saveWidgetValues(){\n  IDialogSettings settings=getDialogSettings();\n  if (settings != null) {\n    if (showCredentials) {\n      String[] userNames=settings.getArray(STORE_USERNAME_ID);\n      if (userNames == null)       userNames=new String[0];\n      userNames=addToHistory(userNames,userCombo.getText());\n      settings.put(STORE_USERNAME_ID,userNames);\n    }\n    String[] hostNames=settings.getArray(STORE_URL_ID);\n    if (hostNames == null)     hostNames=new String[0];\n    hostNames=addToHistory(hostNames,urlCombo.getText());\n    settings.put(STORE_URL_ID,hostNames);\n  }\n}\n"}
{"nl": "Returns the entire configuration as a multiline representation", "code": "public String toStringMultiLine(boolean interpolate){\n  ConfigurationNodeVisitor visitor=new ToStringMultiLineVisitor();\n  getRootNode().visit(visitor);\n  return visitor.toString();\n}\n"}
{"nl": "Maps Graphical User Interface", "code": "private void mapGUI(){\n  this.btnRelativeLayoutTest=(Button)findViewById(R.id.btnRelativeLayout);\n  this.btnRelativeLayoutTest.setOnClickListener(btnRelativeLayoutOnClickListener);\n  this.btnLinearLayoutTest=(Button)findViewById(R.id.btnLinearLayout);\n  this.btnLinearLayoutTest.setOnClickListener(btnLinearLayoutOnClickListener);\n  this.btnFrameLayoutTest=(Button)findViewById(R.id.btnFrameLayout);\n  this.btnFrameLayoutTest.setOnClickListener(btnFrameLayoutOnClickListener);\n}\n"}
{"nl": "Stores immediately the given fence id to the store", "code": "public void storeFenceId(@NonNull String fenceId){\n  Set<String> setTmp=mPrefs.getStringSet(mPrefix + FENCE_ID_SET_KEY,null);\n  HashSet<String> fenceIdSet;\n  if (setTmp == null) {\n    fenceIdSet=new HashSet<>();\n  }\n else {\n    fenceIdSet=new HashSet<>(setTmp);\n  }\n  SharedPreferences.Editor editor=mPrefs.edit();\n  fenceIdSet.add(fenceId);\n  editor.putStringSet(mPrefix + FENCE_ID_SET_KEY,fenceIdSet);\n  editor.apply();\n}\n"}
{"nl": "parse label map from line", "code": "public void parseLabelMapFromLine(String labelMapAsLine){\n  NexusStreamParser np=new NexusStreamParser(new StringReader(labelMapAsLine));\n  try {\n    while (!np.peekMatchIgnoreCase(\";\")) {\n      String sample=np.getWordRespectCase();\n      np.matchIgnoreCase(\":\");\n      String label=np.getWordRespectCase();\n      sample2label.put(sample,label);\n    }\n  }\n catch (  IOException e) {\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketAddToAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,int... albumIds){\n  super(client,\"market.addToAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n  albumIds(albumIds);\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public ElemValPair(String name,char kind){\n  this.name=new AsciiCP(name);\n  this.kind=(byte)kind;\n}\n"}
{"nl": "draw the ticks along the Y axis", "code": "private void drawYAxisTicksLog(Graphics2D gc){\n  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));\n  int x0=leftMargin;\n  int y0=getHeight() - bottomMargin;\n  int y1=topMargin;\n  double maxValue=getChartData().getRangeY().get2().doubleValue();\n  double botY=0;\n  double topY=computeMaxYAxisValueLogScale(maxValue);\n  double yFactor;\n  if (topY > botY)   yFactor=(y0 - y1) / (topY - botY);\n else   yFactor=1;\n  double value=0;\n  double previousY=-100000;\n  int mantisse=0;\n  int exponent=0;\n  while (value <= maxValue) {\n    if (maxDisplayedYValue != null && value > maxDisplayedYValue)     break;\n    double yPos=y0 - (value > 0 ? Math.log10(value) : 0) * yFactor;\n    if ((mantisse <= 1 || mantisse == 5) && Math.abs(yPos - previousY) >= 20) {\n      String label=\"\" + (long)value;\n      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();\n      previousY=yPos;\n      int x=leftMargin - (int)(labelSize.getWidth() + 3);\n      int y=(int)(yPos + labelSize.getHeight() / 2.0);\n      gc.drawString(label,x,y);\n      gc.drawLine(x0,(int)Math.round(yPos),x0 + 2,(int)Math.round(yPos));\n    }\n    if (mantisse < 9)     mantisse++;\n else {\n      mantisse=1;\n      exponent++;\n    }\n    value=mantisse * Math.pow(10,exponent);\n  }\n}\n"}
{"nl": "Determine if this object is a primitive value", "code": "public boolean isPrimitive(){\n  return !isBinaryObject() && !isCollection() && !isSymbol()&& !isNull();\n}\n"}
{"nl": "Calculates y[i] - x[i] for all i", "code": "private double[] calculateDifferences(final double[] x,final double[] y){\n  final double[] z=new double[x.length];\n  for (int i=0; i < x.length; ++i) {\n    z[i]=y[i] - x[i];\n  }\n  return z;\n}\n"}
{"nl": "Try and fuzzy find the specified Speaker", "code": "public Set<Speaker> find(final Speaker speaker){\n  final ArrayList<Speaker> speakers=new ArrayList<>();\n  speakers.addAll(this.speakers.values());\n  CollectionUtils.filter(speakers,null);\n  if (!speakers.isEmpty()) {\n    return new HashSet<>(speakers);\n  }\n  return Collections.emptySet();\n}\n"}
{"nl": "Construct a new EmptySearchViewerFilter", "code": "public EmptySearchViewerFilter(){\n}\n"}
{"nl": "Selects nth template from the list in CreatePageWindow", "code": "public CreatePageWindow selectNthTemplate(int i){\n  templatesList.get(i).click();\n  return this;\n}\n"}
{"nl": "Set ids", "code": "public AdsGetSuggestionsQueryWithCities ids(String value){\n  return unsafeParam(\"ids\",value);\n}\n"}
{"nl": "New comment text (required if \"attachments\" are not specified) <p> 2048 symbols max", "code": "public MarketEditCommentQuery message(String value){\n  return unsafeParam(\"message\",value);\n}\n"}
{"nl": "clean all patch files", "code": "public void cleanPatch(){\n  if (patchDirectory == null) {\n    return;\n  }\n  if (isTinkerLoaded()) {\n    TinkerLog.e(TAG,\"it is not safety to clean patch when tinker is loaded, you should kill all your process after clean!\");\n  }\n  SharePatchFileUtil.deleteDir(patchDirectory);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AppsSendRequestQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"apps.sendRequest\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "Return a tap target for the menu item from the given toolbar", "code": "public static ToolbarTapTarget forToolbarMenuItem(Toolbar toolbar,@IdRes int menuItemId,CharSequence title){\n  return forToolbarMenuItem(toolbar,menuItemId,title,null);\n}\n"}
{"nl": "Converts from Joda-Time DateTime to DateUnit", "code": "public static DateTimeUnit fromJodaDateTime(DateTime dateTime,boolean iso8601){\n  DateTimeUnit dateTimeUnit=new DateTimeUnit(iso8601);\n  dateTimeUnit.setDate(dateTime.getYear(),dateTime.getMonthOfYear(),dateTime.getDayOfMonth());\n  dateTimeUnit.setDayOfWeek(dateTime.getDayOfWeek());\n  dateTimeUnit.setTime(dateTime.getHourOfDay(),dateTime.getMinuteOfHour(),dateTime.getSecondOfMinute(),dateTime.getMillisOfSecond());\n  dateTimeUnit.setTimeZone(dateTime.getZone().toTimeZone());\n  return dateTimeUnit;\n}\n"}
{"nl": "measure width", "code": "private int measureWidthSize(int measureSpec){\n  int defSize=dp2px(DEFAULT_WIDTH);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int result=0;\nswitch (specMode) {\ncase MeasureSpec.UNSPECIFIED:\ncase MeasureSpec.AT_MOST:\n    result=Math.min(defSize,specSize);\n  break;\ncase MeasureSpec.EXACTLY:\nresult=specSize;\nbreak;\n}\nreturn result;\n}\n"}
{"nl": "Initializer Creation", "code": "private void createInitializer(polyglot.ast.Initializer initializer){\n  if (initializer.flags().isStatic()) {\n    if (staticInitializerBlocks == null) {\n      staticInitializerBlocks=new ArrayList<Block>();\n    }\n    staticInitializerBlocks.add(initializer.body());\n  }\n else {\n    if (initializerBlocks == null) {\n      initializerBlocks=new ArrayList<Block>();\n    }\n    initializerBlocks.add(initializer.body());\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  String fontName=ProgramProperties.get(\"Font\",\"Arial-PLAIN-12\");\n  fontName=JOptionPane.showInputDialog(\"Enter font\",fontName);\n  if (fontName != null) {\n    execute(\"set font='\" + fontName + \"';\");\n    ProgramProperties.put(\"Font\",fontName);\n  }\n}\n"}
{"nl": "Modulate the colorAlpha to new alpha", "code": "public static int modulateAlpha(int colorAlpha,int alpha){\n  int scale=alpha + (alpha >> 7);\n  return colorAlpha * scale >> 8;\n}\n"}
{"nl": "Return user and community objects needed to display posts", "code": "protected WallGetByIdQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Enable or disable the use of razzberries", "code": "public AsyncCatchOptions useRazzberries(boolean useRazzBerries){\n  this.useRazzBerry=useRazzBerries ? 1 : 0;\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsAddLinkQuery(VkApiClient client,UserActor actor,int groupId,String link){\n  super(client,\"groups.addLink\",GroupLink.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  link(link);\n}\n"}
{"nl": "Used to close the menu drawer", "code": "private void closeMenuDrawer(){\n  if (mDrawerLayout != null) {\n    mDrawerLayout.closeDrawer(MENU_DRAWER_GRAVITY);\n  }\n}\n"}
{"nl": "Return a submonitor for monitor", "code": "public static IProgressMonitor subMonitorFor(IProgressMonitor monitor,int ticks,int style){\n  if (monitor == null)   return new NullProgressMonitor();\n  if (monitor instanceof NullProgressMonitor)   return monitor;\n  return new SubProgressMonitor(monitor,ticks,style);\n}\n"}
{"nl": "ensure that the tree and mapping for the named classification are loaded", "code": "public static void ensureTreeIsLoaded(String name){\n  get(name,true);\n}\n"}
{"nl": "Returns true if the target is alternated", "code": "public final boolean isAlternatingTarget(){\n  return (myAlternate & CFG_TARGET) != 0;\n}\n"}
{"nl": "Sort order", "code": "public UsersSearchQuery sort(UsersSearchSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "verifies that two vectors are close (sup norm)", "code": "protected void assertEquals(String msg,Fraction[] m,Fraction[] n){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors have different lengths\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i],n[i]);\n  }\n}\n"}
{"nl": "Appends new content type value to permitted list (depending on the current permitted content types)", "code": "private void appendPermittedContentType(ContentType contentType){\n  if (permittedContentTypesMask == ContentType.ANY.getFlagValue()) {\n    permittedContentTypesMask=contentType.getFlagValue();\n  }\n else {\n    permittedContentTypesMask|=contentType.getFlagValue();\n  }\n}\n"}
{"nl": "Unload all the topic served by the broker service under the given service unit", "code": "public CompletableFuture<Integer> unloadServiceUnit(ServiceUnitId serviceUnit){\n  CompletableFuture<Integer> result=new CompletableFuture<Integer>();\n  List<CompletableFuture<Void>> closeFutures=Lists.newArrayList();\n  topics.forEach(null);\n  CompletableFuture<Void> aggregator=FutureUtil.waitForAll(closeFutures);\n  aggregator.thenAccept(null).exceptionally(null);\n  return result;\n}\n"}
{"nl": "Reset the headers", "code": "public void resetHeaders(){\n  headers.clear();\n}\n"}
{"nl": "Add the specified string as a token", "code": "private void addToken(String tokenStr){\n  Integer tokenInt=(Integer)fTokenNames.get(tokenStr);\n  if (tokenInt == null) {\n    tokenInt=new Integer(fTokenNames.size());\n    fTokenNames.put(tokenInt,tokenStr);\n  }\n  addToken(tokenInt.intValue());\n}\n"}
{"nl": "Adds a and b matrices and stores result in result matrix result = a + b", "code": "public static void add(Matrix a,Matrix b,Matrix result){\n  for (int i=0; i < a.rows; i++) {\n    for (int j=0; j < a.cols; j++) {\n      result.set(i,j,a.get(i,j) + b.get(i,j));\n    }\n  }\n}\n"}
{"nl": "Shuts down the whole job executor", "code": "public synchronized void shutdown(){\n  if (!isActive) {\n    return;\n  }\n  log.info(\"Shutting down the default async job executor [{}].\",getClass().getName());\n  if (timerJobRunnable != null) {\n    timerJobRunnable.stop();\n  }\n  if (asyncJobsDueRunnable != null) {\n    asyncJobsDueRunnable.stop();\n  }\n  if (resetExpiredJobsRunnable != null) {\n    resetExpiredJobsRunnable.stop();\n  }\n  stopResetExpiredJobsThread();\n  stopTimerAcquisitionThread();\n  stopJobAcquisitionThread();\n  stopExecutingAsyncJobs();\n  timerJobRunnable=null;\n  asyncJobsDueRunnable=null;\n  resetExpiredJobsRunnable=null;\n  isActive=false;\n}\n"}
{"nl": "Returns true if the axis minIndex value has been customized (and is not calculated automatically)", "code": "public boolean isAxisMinCustom(){\n  return mCustomAxisMin;\n}\n"}
{"nl": "\"true\" - comments will be returned as numbered objects, in addition lists of \"profiles\" and \"groups\" objects will be returned", "code": "public MarketGetCommentsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Converts time object representation to String", "code": "@Override protected String dateToString(DateTimeData date){\n  StringBuffer message=new StringBuffer(16);\n  append(message,date.hour,2);\n  message.append(':');\n  append(message,date.minute,2);\n  message.append(':');\n  append(message,date.second);\n  append(message,(char)date.utc,0);\n  return message.toString();\n}\n"}
{"nl": "Parses an Android resource ID into its components", "code": "public ResourceId parseResourceId(int resourceId){\n  return new ResourceId((resourceId & 0xFF000000) >> 24,(resourceId & 0x00FF0000) >> 16,resourceId & 0x0000FFFF);\n}\n"}
{"nl": "No arg contructor used for creation of persisted participant after startup", "code": "public SVNSynchronizeParticipant(){\n  super();\n}\n"}
{"nl": "Execute a one shot task or start executing a continuous task", "code": "@Override public void startExecuting(){\n  this.theEntityCreature.getNavigator().tryMoveToXYZ(this.randPosX,this.randPosY,this.randPosZ,this.speed);\n}\n"}
{"nl": "/*     ", "code": "@deprecated protected void zeroPaddingNumber(NumberFormat nf,StringBuffer buf,int value,int minDigits,int maxDigits){\n  if ((this.useLocalZeroPaddingNumberFormat) && (value >= 0)) {\n    fastZeroPaddingNumber(buf,value,minDigits,maxDigits);\n  }\n else {\n    nf.setMinimumIntegerDigits(minDigits);\n    nf.setMaximumIntegerDigits(maxDigits);\n    nf.format(value,buf,new FieldPosition(-1));\n  }\n}\n"}
{"nl": "calculates the angle between two Entries (points) in the chart taking ratios into consideration", "code": "public double calcAngleWithRatios(Entry p1,Entry p2){\n  float dx=p2.getXIndex() * mDeltaRatio - p1.getXIndex() * mDeltaRatio;\n  float dy=p2.getVal() * mScaleRatio - p1.getVal() * mScaleRatio;\n  return Math.atan2(dy,dx) * 180.0 / Math.PI;\n}\n"}
{"nl": "Id of the user to send a request", "code": "protected AppsSendRequestQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsDeleteQuery(VkApiClient client,UserActor actor,int ownerId,int docId){\n  super(client,\"docs.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  docId(docId);\n}\n"}
{"nl": "Set keys", "code": "public StorageGetQuery keys(List<String> value){\n  return unsafeParam(\"keys\",value);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set keep1=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setKeep1(value);\n}\n"}
{"nl": "return Pearson's correlation coefficient", "code": "private float computeCorrelationCoefficent(String classNameX,String classNameY){\n  final ArrayList<Double> xValues=new ArrayList<>(getChartData().getSeriesNames().size());\n  final ArrayList<Double> yValues=new ArrayList<>(getChartData().getSeriesNames().size());\n  for (  String sample : getChartData().getSeriesNames()) {\n    xValues.add(getChartData().getValueAsDouble(sample,classNameX));\n    yValues.add(getChartData().getValueAsDouble(sample,classNameY));\n  }\n  return (float)Correlation.computePersonsCorrelationCoefficent(xValues.size(),xValues,yValues);\n}\n"}
{"nl": "Check that, after a configuration update, the resolver updates the list of themes", "code": "public void testConfigurationUpdate(){\n  myFixture.copyFileToProject(\"themeEditor/attributeResolution/styles-v17.xml\",\"res/values-v17/styles.xml\");\n  myFixture.copyFileToProject(\"themeEditor/attributeResolution/styles-v19.xml\",\"res/values-v19/styles.xml\");\n  VirtualFile file=myFixture.copyFileToProject(\"themeEditor/attributeResolution/styles-v20.xml\",\"res/values-v20/styles.xml\");\n  ConfigurationManager configurationManager=myFacet.getConfigurationManager();\n  Configuration configuration=configurationManager.getConfiguration(file);\n  ThemeEditorContext context=new ThemeEditorContext(configuration);\n  ThemeResolver resolver=context.getThemeResolver();\n  assertNotNull(resolver.getTheme(\"V20OnlyTheme\"));\n  assertNotNull(resolver.getTheme(\"V19OnlyTheme\"));\n  assertNotNull(resolver.getTheme(\"V17OnlyTheme\"));\n  configuration.setTarget(new CompatibilityRenderTarget(configurationManager.getHighestApiTarget(),17,configurationManager.getHighestApiTarget()));\n  resolver=context.getThemeResolver();\n  assertNull(resolver.getTheme(\"V20OnlyTheme\"));\n  assertNull(resolver.getTheme(\"V19OnlyTheme\"));\n  assertNotNull(resolver.getTheme(\"V17OnlyTheme\"));\n}\n"}
{"nl": "Creates the default cumulative probability distribution test input values", "code": "@Override public double[] makeCumulativeTestPoints(){\n  return new double[]{0.857104827257,1.64649737269,2.17973074725,2.7326367935,3.48953912565,26.1244815584,20.0902350297,17.5345461395,15.5073130559,13.3615661365};\n}\n"}
{"nl": "parses a buffer", "code": "public void parseBuffer(ByteInputBuffer buffer){\n  int query_len=buffer.readIntLittleEndian();\n  queryName=buffer.readBytesNullTerminated();\n  int flags=buffer.readCharBigEndian();\n  boolean hasN=((flags & 1) == 1);\nswitch (daaParser.getHeader().getAlignMode()) {\ncase blastp:\n{\n      byte[] packed=PackedSequence.readPackedSequence(buffer,query_len,5);\n      sourceSequence=context[0]=PackedSequence.getUnpackedSequence(packed,query_len,5);\n      break;\n    }\ncase blastx:\n{\n    byte[] packed=PackedSequence.readPackedSequence(buffer,query_len,hasN ? 3 : 2);\n    sourceSequence=PackedSequence.getUnpackedSequence(packed,query_len,hasN ? 3 : 2);\n    byte[][] sixFrameTranslation=Translator.getSixFrameTranslations(sourceSequence);\n    System.arraycopy(sixFrameTranslation,0,context,0,sixFrameTranslation.length);\n    break;\n  }\ncase blastn:\n{\n  byte[] packed=PackedSequence.readPackedSequence(buffer,query_len,hasN ? 3 : 2);\n  sourceSequence=PackedSequence.getUnpackedSequence(packed,query_len,hasN ? 3 : 2);\n  context[0]=sourceSequence;\n  context[1]=Translator.getReverseComplement(sourceSequence);\n  break;\n}\ndefault :\n}\n}\n"}
{"nl": "removes the given cell, returns the old value or null", "code": "public V remove(R rowKey,C columnKey){\n  if (rowKey == null || columnKey == null)   return null;\n  Map<C,V> row=row(rowKey);\n  if (row == null)   return null;\n  V oldValue=get(rowKey,columnKey);\n  row.remove(columnKey);\n  return oldValue;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PagesGetTitlesQuery(VkApiClient client,UserActor actor){\n  super(client,\"pages.getTitles\",Utils.buildParametrizedType(List.class,Wikipage.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "delegate redo log monitoring", "code": "private void monitorReplicationStateForModifyingOperation(Transaction transaction){\n  if (transaction != null)   return;\n  monitorReplicationState();\n}\n"}
{"nl": "This method checks all restrictions for invite player to legion", "code": "private boolean canInvitePlayer(Player activePlayer,Player targetPlayer){\n  Legion legion=activePlayer.getLegion();\n  if (activePlayer.getLifeStats().isAlreadyDead()) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_CANT_INVITE_WHEN_DEAD);\n    return false;\n  }\n  if (isSelf(activePlayer,targetPlayer.getObjectId())) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_CAN_NOT_INVITE_SELF);\n    return false;\n  }\n else   if (targetPlayer.isLegionMember()) {\n    if (legion.isMember(targetPlayer.getObjectId())) {\n      PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_HE_IS_MY_GUILD_MEMBER(targetPlayer.getName()));\n    }\n else {\n      PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_INVITE_HE_IS_OTHER_GUILD_MEMBER(targetPlayer.getName()));\n    }\n    return false;\n  }\n else   if (!activePlayer.getLegionMember().hasRights(LegionPermissionsMask.INVITE)) {\n    return false;\n  }\n else   if (activePlayer.getRace() != targetPlayer.getRace() && !LegionConfig.LEGION_INVITEOTHERFACTION) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Helper method to schedule the sync adapter periodic execution", "code": "public static void configurePeriodicSync(Context context,Account account){\n  final String authority=context.getString(R.string.data_provider_authority);\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    SyncRequest request=new SyncRequest.Builder().setExtras(Bundle.EMPTY).syncPeriodic(SYNC_INTERVAL,SYNC_FLEXTIME).setSyncAdapter(account,authority).build();\n    ContentResolver.requestSync(request);\n  }\n else {\n    ContentResolver.addPeriodicSync(account,authority,Bundle.EMPTY,SYNC_INTERVAL);\n  }\n  Log.v(LOG_TAG,\"Periodic sync configured with \" + SYNC_INTERVAL + \" interval and \"+ SYNC_FLEXTIME+ \" flextime\");\n}\n"}
{"nl": "is a global find possible?", "code": "public boolean isGlobalFindable(){\n  return table.getGrid().getRowCount() > 0;\n}\n"}
{"nl": "Flatten the hierachy -- remove all existing containers children of the given container", "code": "public void flattenHierarchy(ConstraintWidgetContainer root){\n  ArrayList<ConstraintWidgetContainer> containers=gatherContainers(root);\n  while (containers.size() > 0) {\n    for (    ConstraintWidgetContainer container : containers) {\n      removeContainer(container);\n    }\n    containers=gatherContainers(root);\n  }\n}\n"}
{"nl": "write a string", "code": "public void writeString(String str) throws IOException {\n  if (str == null)   writeInt(0);\n else {\n    if (useCompression && str.length() >= Compressor.MIN_SIZE_FOR_DEFLATION) {\n      byte[] bytes=compressor.deflateString2ByteArray(str);\n      writeInt(-bytes.length);\n      io.write(bytes,0,bytes.length);\n    }\n else {\n      byte[] bytes=str.getBytes(\"UTF-8\");\n      writeInt(bytes.length);\n      io.write(bytes,0,bytes.length);\n    }\n  }\n}\n"}
{"nl": "show an error notation", "code": "public static void showError(String message,long milliseconds){\n  showNotification(title,message,Mode.error,Pos.BOTTOM_LEFT,milliseconds);\n}\n"}
{"nl": "Push the item up towards the the root of the tree (lowest reading position)", "code": "private void siftUp(Item item){\n  Item parent=getParent(item);\n  while (item.idx > 0 && parent.position.compareTo(item.position) > 0) {\n    swap(item,parent);\n    parent=getParent(item);\n  }\n}\n"}
{"nl": "Adds the given uris to the given group using the given dotCMS host as the host the uris should be looked up", "code": "public void addFiles(String fileUris,String group,Host host){\n  ParamValidationUtil.validateParamNotNull(fileUris,\"fileUris\");\n  ParamValidationUtil.validateParamNotNull(group,\"group\");\n  Host cleanHost=UtilMethods.isSet(host) ? host : HostTools.getCurrentHost(request);\n  for (  String fileUri : StringListUtil.getCleanStringList(fileUris)) {\n    FileAsset fileAsset=FileTools.getFileAssetByURI(fileUri,cleanHost,isLiveMode);\n    if (fileAsset != null) {\n      if (!fileMap.containsKey(group)) {\n        fileMap.put(group,new LinkedHashSet<FileAsset>());\n      }\n      fileMap.get(group).add(fileAsset);\n    }\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set labelColor=\");\n  Color color=null;\n  if (np.peekMatchIgnoreCase(\"null\"))   np.matchIgnoreCase(\"null\");\n else   color=np.getColor();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof GraphView) {\n    boolean changed=false;\n    GraphView viewer=(GraphView)getViewer();\n    for (    Node v : viewer.getSelectedNodes()) {\n      if (viewer.isLabelVisible(v)) {\n        viewer.setLabelColor(v,color);\n        changed=true;\n      }\n    }\n    for (    Edge edge : viewer.getSelectedEdges()) {\n      if (viewer.isLabelVisible(edge)) {\n        viewer.setLabelColor(edge,color);\n        changed=true;\n      }\n    }\n    if (changed) {\n      viewer.repaint();\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetHistoryQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.getHistory\",GetHistoryResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Add footer after all items and before TYPE_ABSOLUTE_FOOTER", "code": "public void addFooter(@LayoutRes int layoutId,Object data){\n  int absoluteFootersCount=getAbsoluteFootersCount();\n  if (absoluteFootersCount > 0) {\n    int position=getItemCount() <= absoluteFootersCount ? 0 : getItemCount() - absoluteFootersCount;\n    mInserts.add(position,new Insertion(layoutId,data,Insertion.TYPE_FOOTER));\n    getItems().add(position,null);\n    mFootersCount+=1;\n  }\n else {\n    mInserts.add(new Insertion(layoutId,data,Insertion.TYPE_FOOTER));\n    getItems().add(null);\n    mFootersCount+=1;\n  }\n  notifyIfNeed();\n}\n"}
{"nl": "Creates a storable time fence which will be valid on Wednesday in the given daily time frame", "code": "public static StorableTimeFence inWednesdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(WEDNESDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n"}
{"nl": "****************************** MONSTER TO QUEST QUERIES", "code": "public MonsterToQuestCursor queryMonsterToQuestMonster(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_MONSTER_TO_QUEST;\n  qh.Columns=null;\n  qh.Selection=\"mtq.\" + S.COLUMN_MONSTER_TO_QUEST_MONSTER_ID + \" = ? \";\n  qh.SelectionArgs=new String[]{\"\" + id};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=\"CASE q.\" + S.COLUMN_QUESTS_HUB + \" WHEN 'Village' THEN 0 WHEN 'Guild' THEN 1 WHEN 'Permit' THEN 2 ELSE (3||q.\"+ S.COLUMN_QUESTS_HUB+ \") END, \"+ \"q.\"+ S.COLUMN_QUESTS_STARS+ \" ASC\";\n  qh.Limit=null;\n  return new MonsterToQuestCursor(wrapJoinHelper(builderMonsterToQuest(qh.Distinct),qh));\n}\n"}
{"nl": "Session listener", "code": "@Override public void onStreamReceived(Session session,Stream stream){\n  if (mSubscriber == null) {\n    startSubscribing(stream);\n    sendEvent(Events.EVENT_SUBSCRIBE_START,Arguments.createMap());\n  }\n}\n"}
{"nl": "update the enable state for only the Swing menu items", "code": "public void updateEnableStateSwingItems(){\n  if (SwingUtilities.isEventDispatchThread())   super.updateEnableState();\n}\n"}
{"nl": "Reduces the instruction list by removing unnecessary instruction pairs such as move v0 v1; move v1 v0;", "code": "private void reduceInstructions(){\n  for (int i=0; i < this.insns.size() - 1; i++) {\n    Insn curInsn=this.insns.get(i);\n    if (curInsn instanceof AddressInsn)     continue;\n    if (!curInsn.getOpcode().name.startsWith(\"move/\"))     continue;\n    Insn nextInsn=null;\n    int nextIndex=-1;\n    for (int j=i + 1; j < this.insns.size(); j++) {\n      Insn candidate=this.insns.get(j);\n      if (candidate instanceof AddressInsn)       continue;\n      nextInsn=candidate;\n      nextIndex=j;\n      break;\n    }\n    if (nextInsn == null || !nextInsn.getOpcode().name.startsWith(\"move/\"))     continue;\n    if (nextIndex == this.insns.size() - 1)     continue;\n    Register firstTarget=curInsn.getRegs().get(0);\n    Register firstSource=curInsn.getRegs().get(1);\n    Register secondTarget=nextInsn.getRegs().get(0);\n    Register secondSource=nextInsn.getRegs().get(1);\n    if (firstTarget.equals(secondSource) && secondTarget.equals(firstSource)) {\n      Stmt origStmt=insnStmtMap.get(nextInsn);\n      if (origStmt == null || !isJumpTarget(origStmt)) {\n        Insn nextStmt=this.insns.get(nextIndex + 1);\n        insns.remove(nextIndex);\n        if (origStmt != null) {\n          insnStmtMap.remove(nextInsn);\n          insnStmtMap.put(nextStmt,origStmt);\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "store the session with the expired", "code": "public Session store(long expired){\n  this.setExpired(expired);\n  if (!Cache.set(\"session/\" + sid,this)) {\n    log.error(\"set session failed !\",new Exception(\"store session failed\"));\n  }\n  return this;\n}\n"}
{"nl": "call this when tab containing list is deactivated", "code": "public void deactivate(){\n  if (!inSelection) {\n    inSelection=true;\n    try {\n      chartSelection.clearSelectionAttributes();\n      this.repaint();\n    }\n  finally {\n      inSelection=false;\n    }\n  }\n}\n"}
{"nl": "/*     ", "code": "@deprecated public Object parseObject(String source,ParsePosition pos){\n  return parse(source,pos);\n}\n"}
{"nl": "write a long", "code": "public void writeLong(long a) throws IOException {\n  outs.write((byte)(a >> 56));\n  outs.write((byte)(a >> 48));\n  outs.write((byte)(a >> 40));\n  outs.write((byte)(a >> 32));\n  outs.write((byte)(a >> 24));\n  outs.write((byte)(a >> 16));\n  outs.write((byte)(a >> 8));\n  outs.write((byte)(a));\n  position+=8;\n}\n"}
{"nl": "Show stopped layout", "code": "public void stop(){\n  mBasoStatus=BasoStatus.ERROR;\n  toggleLayout();\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public IntElemValPair(String name,char kind,int val){\n  super(name,kind);\n  this.val=new IntegerCP(val);\n}\n"}
{"nl": "Returns Java code which provides a cast of the specified value to the type of this property ref", "code": "protected static String cast(String value,Type<?> type){\n  String castValue=value.trim();\n  String typeName=type.getCanonicalName();\n  if (!\"null\".equals(value)) {\n    if (type.isPrimitive()) {\n      if (type.getRawType() == Character.TYPE) {\n        castValue=format(\"(\\\"\\\"+%s).charAt(0)\",castValue);\n      }\n else       if (!isPrimitiveLiteral(castValue,type)) {\n        castValue=format(\"%s.valueOf(\\\"\\\"+%s).%sValue()\",type.getWrapperType().getCanonicalName(),castValue,type);\n      }\n    }\n else     if (type.isPrimitiveWrapper() && isPrimitiveLiteral(castValue,type)) {\n      castValue=format(\"%s.valueOf(%s)\",type.getWrapperType().getCanonicalName(),castValue);\n    }\n else     if (!value.startsWith(\"(\" + typeName + \")\") && !value.startsWith(\"((\" + typeName + \")\")) {\n      castValue=\"((\" + typeName + \")\"+ castValue+ \")\";\n    }\n  }\n  return castValue;\n}\n"}
{"nl": "Remove all of the specified columns, by name", "code": "public Builder removeColumns(String... columnNames){\n  return transform(new RemoveColumnsTransform(columnNames));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsUpdateClientsQuery(VkApiClient client,UserActor actor,int accountId,String data){\n  super(client,\"ads.updateClients\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  data(data);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public final void reset(){\n  while (stackIsNotEmpty()) {\n    pop();\n  }\n  this.scriptStart=this.textStart;\n  this.scriptLimit=this.textStart;\n  this.scriptCode=-1;\n  this.parenSP=-1;\n  this.pushCount=0;\n  this.fixupCount=0;\n  this.textIndex=this.textStart;\n}\n"}
{"nl": "Collection id", "code": "protected MarketDeleteAlbumQuery albumId(int value){\n  return unsafeParam(\"album_id\",value);\n}\n"}
{"nl": "clear the internal registry of substitutionGroup information", "code": "public void reset(){\n  fSubGroupsB.clear();\n  fSubGroups.clear();\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n"}
{"nl": "Left trim a string to a fixed length", "code": "static String leftTrim(String str,int len){\n  return str.substring(str.length() - len);\n}\n"}
{"nl": "close everything directed by this director", "code": "public void close() throws CanceledException {\n  notifyDestroyViewer();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsLeaveQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"groups.leave\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "This function should be called when the application enters the background (onDestroy, onStop, onPause)", "code": "public static void suspend(){\n  TrafficService service=getAirMapTrafficService();\n  if (service != null && service.isConnected()) {\n    service.disconnect();\n  }\n}\n"}
{"nl": "Returns the quadraticMean, aka the root-mean-square, for all values in this column", "code": "public double quadraticMean(){\n  return NumericReduceUtils.quadraticMean.reduce(this);\n}\n"}
{"nl": "Whether knownlist owner aware of found object (should be kept in knownlist)", "code": "protected boolean isAwareOf(VisibleObject newObject){\n  return true;\n}\n"}
{"nl": "Construct an XMLGrammarParser with the specified symbol table", "code": "protected XMLGrammarParser(SymbolTable symbolTable){\n  super((XMLParserConfiguration)ObjectFactory.createObject(\"mf.org.apache.xerces.xni.parser.XMLParserConfiguration\",\"mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration\"));\n  fConfiguration.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY,symbolTable);\n}\n"}
{"nl": "Dist between coordinates", "code": "public static double distFrom(Point start,Point end){\n  return distFrom(start.getLatitude(),start.getLongitude(),end.getLatitude(),end.getLongitude());\n}\n"}
{"nl": "Set privacy comment", "code": "public NotesEditQuery privacyComment(String... value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n"}
{"nl": "ask view to allow user input", "code": "public void unlockUserInput(){\n  getCommandManager().setEnableCritical(true);\n  searchManager.getFindDialogAsToolBar().setEnableCritical(true);\n  frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n  isLocked=false;\n  statusBar.setText2(\"\");\n}\n"}
{"nl": "Create a unit file reader from the given unit file", "code": "public VocalizationIntonationReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getSelectedBlock().selectAll();\n}\n"}
{"nl": "Runs the data flow analysis", "code": "public InfoflowResults runInfoflow(){\n  return runInfoflow(null);\n}\n"}
{"nl": "Return an additional \"online_mobile\" field", "code": "public FriendsGetOnlineQueryWithMobile onlineMobile(Boolean value){\n  return unsafeParam(\"online_mobile\",value);\n}\n"}
{"nl": "combine a set-method name from field name", "code": "public static String combineSetMethodName(String fieldName){\n  return \"set\" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);\n}\n"}
{"nl": "Parse any part of a Graql query", "code": "private <T,S extends ParseTree>T parseQueryFragment(Function<GraqlParser,S> parseRule,BiFunction<QueryVisitor,S,T> visit,TokenStream tokens){\n  GraqlErrorListener errorListener=new GraqlErrorListener(tokens.getText());\n  return parseQueryFragment(parseRule,visit,errorListener,tokens);\n}\n"}
{"nl": "Dismiss loading dialog", "code": "public void dismissLoadingDialog(){\n  final Fragment frag=getActivity().getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);\n  if (frag != null) {\n    LoadingDialog loading=(LoadingDialog)frag;\n    loading.dismissAllowingStateLoss();\n  }\n}\n"}
{"nl": "A wrapper function around JedisUtils to connect to Redis", "code": "private void localRedisConnect(){\n  if (this.localJedis == null) {\n    logger.info(\"Connecting to Redis.\");\n    this.localJedis=JedisUtils.connect(REDIS_ADDRESS,REDIS_PORT);\n  }\n}\n"}
{"nl": "Returns the hex dump of the given byte array", "code": "public static String rawHexDump(byte[] b){\n  if (b == null)   return \"\";\n  int size=b.length;\n  if (size == 0)   return \"\";\n  StringBuffer buf=new StringBuffer();\n  for (  byte aB : b) {\n    buf.append(zeropad(Integer.toHexString(byteToUInt(aB)).toUpperCase(),2));\n    buf.append(\" \");\n  }\n  buf.delete(buf.length() - 1,buf.length());\n  return buf.toString();\n}\n"}
{"nl": "Reads a signed/unsigned byte", "code": "public static int readByte(byte b,boolean signed){\n  if (signed) {\n    return b;\n  }\n else {\n    return b & 0xFF;\n  }\n}\n"}
{"nl": "Search role module mapping by params", "code": "@Override public List<RoleModule> searchRoleModule(RoleModule roleModule){\n  return sessionTemplate.selectList(NAMESPACE + \".searchRoleModule\",roleModule);\n}\n"}
{"nl": "Returns true if field oldGC is set (has been assigned a value) and false otherwise", "code": "public boolean isSetOldGC(){\n  return __isset_bit_vector.get(__OLDGC_ISSET_ID);\n}\n"}
{"nl": "Gets a SerialMessage with the SWITCH_MULTILEVEL_START_LEVEL_CHANGE command", "code": "public SerialMessage startLevelChangeMessage(boolean increase,int duration){\n  logger.debug(\"NODE {}: Creating new message for command SWITCH_MULTILEVEL_START_LEVEL_CHANGE\",getNode().getNodeId());\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.SendData,SerialMessagePriority.Set);\n  byte[] newPayload={(byte)getNode().getNodeId(),5,(byte)getCommandClass().getKey(),(byte)SWITCH_MULTILEVEL_START_LEVEL_CHANGE,0,0,0};\n  if (increase) {\n    newPayload[4]=32;\n  }\n else {\n    newPayload[4]=96;\n  }\n  newPayload[5]=0;\n  newPayload[6]=(byte)duration;\n  result.setMessagePayload(newPayload);\n  return result;\n}\n"}
{"nl": "Resets the time for this audio stream to zero", "code": "public synchronized void resetTime(){\n}\n"}
{"nl": "Config constant", "code": "public void configConstant(ConstantLoader constantLoader){\n}\n"}
{"nl": "stop notify", "code": "public boolean disableCharacteristicNotify(){\n  return disableCharacteristicNotify(getCharacteristic());\n}\n"}
{"nl": "put a value, If the index is larger than current maxIndex(), increases length of array", "code": "public void putAndEnsureCapacity(long index,int value){\n  int segment=(int)(index >>> SEGMENT_BITS);\n  int position=(int)(index & SEGMENT_MASK);\n  if (segment >= segments.length) {\n    grow(segment + 1);\n    segments[segment][position]=value;\n    if (value != 0)     numberOfNonZeroEntries++;\n  }\n else {\n    final int old=segments[segment][position];\n    if (old == 0) {\n      if (value != 0) {\n        segments[segment][position]=value;\n        numberOfNonZeroEntries++;\n      }\n    }\n else {\n      segments[segment][position]=value;\n      if (value == 0)       numberOfNonZeroEntries--;\n    }\n  }\n  maxIndex=Math.max(maxIndex,index);\n}\n"}
{"nl": "enemy position event", "code": "private void position(){\n  velocity.x=(int)(sx * 160);\n  velocity.y=(int)(sy * 160);\n  if (position.x < posX + this.map_controler.syncCnt)   dir=2;\n else   dir=14;\n  if (position.y < posY)   dir=(dir == 2) ? 2 : 14;\n  if (Math.abs(position.y - posY) <= 4) {\n    position.y=posY;\n    velocity.y=0;\n    if (position.x < posX + this.map_controler.syncCnt)     dir=4;\n else     dir=12;\n  }\n  if (Math.abs(position.x - (posX + this.map_controler.syncCnt)) <= 4) {\n    position.x=posX + this.map_controler.syncCnt;\n    velocity.x=0;\n    dir=0;\n  }\n  if (position.y == posY && position.x == posX + this.map_controler.syncCnt) {\n    dir=0;\n    sx=1;\n    status=SYNC;\n    return;\n  }\n  sx=this.map_controler.get_Direc_Dis_X(dir);\n  sy=this.map_controler.get_Direc_Dis_Y(dir);\n}\n"}
{"nl": "Types of potential friends to return", "code": "public FriendsGetSuggestionsQuery filter(List<FriendsGetSuggestionsFilter> value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "reads an archived string", "code": "public String readString() throws IOException {\n  int size=readInt();\n  if (Math.abs(size) > 100000000)   throw new IOException(\"Unreasonable string length: \" + Math.abs(size));\n  byte[] bytes=new byte[Math.abs(size)];\n  int got=io.read(bytes,0,Math.abs(size));\n  if (got != Math.abs(size))   throw new IOException(\"Bytes read: \" + got + \", expected: \"+ Math.abs(size));\n  if (size < 0) {\n    try {\n      return compressor.inflateByteArray2String(-size,bytes);\n    }\n catch (    DataFormatException e) {\n      throw new IOException(e.getMessage());\n    }\n  }\n else {\n    return Compressor.convertUncompressedByteArray2String(size,bytes);\n  }\n}\n"}
{"nl": "main onCreate method do not overwrite unless necessary", "code": "public T onCreateViewHolderItemType(ViewGroup parent,ItemType itemType){\nswitch (itemType) {\ncase LVL3_ITEM:\n    return onCreateLvl3ItemViewHolder(parent);\ncase LVL2_ITEM:\n  return onCreateLvl2ItemViewHolder(parent);\ncase LVL1_ITEM:\nreturn onCreateLvl1ItemViewHolder(parent);\ncase LVL0_ITEM:\nreturn onCreateLvl0ItemViewHolder(parent);\ncase LVL3_SECTION:\nreturn onCreateLvl3SectionViewHolder(parent);\ncase LVL2_SECTION:\nreturn onCreateLvl2SectionViewHolder(parent);\ncase LVL1_SECTION:\nreturn onCreateLvl1SectionViewHolder(parent);\ndefault :\nreturn null;\n}\n}\n"}
{"nl": "/*    ", "code": "@deprecated public UScriptRun(char[] chars){\n  reset(chars);\n}\n"}
{"nl": "Initialize the form submition progress by enabling the input field", "code": "private void processFormFieldBegin(){\n  currentFieldPosition++;\n  FormField field=formFields.get(currentFieldPosition);\n  slickFormSubmitButton.setText(field.getStepLabel());\n  slickFieldContainer.setVisibility(View.VISIBLE);\n  slickFieldContainer.setAlpha(0.0f);\n  slickFieldContainer.animate().translationY(slickFormSubmitButton.getY()).alpha(1.0f);\n  applySlideDownAnimationTo(slickFormSubmitButton);\n  slickFieldContainer.addView(field);\n}\n"}
{"nl": "Changes the form's is label when its doing background work", "code": "public SlickForm withProcessingLabel(String label){\n  this.endTag=label;\n  return this;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"deselect series=\");\n  List<String> list=np.getTokensRespectCase(null,\";\");\n  ChartViewer viewer=(ChartViewer)getViewer();\n  for (  String name : list) {\n    if (name.equalsIgnoreCase(\"all\"))     viewer.getChartSelection().setSelectedSeries(viewer.getChartData().getSeriesNames(),false);\n else     viewer.getChartSelection().setSelectedSeries(name,false);\n  }\n  viewer.repaint();\n}\n"}
{"nl": "Creates local or remote QP according to configuration", "code": "public static IQueryProcessor newInstance(IJSpace proxy,IRemoteSpace remoteSpace,Properties config) throws Exception {\n  if (isRemoteQueryProcessor(config))   return remoteSpace.getQueryProcessor();\n  ISpaceProxy clusteredProxy=(ISpaceProxy)proxy;\n  ISpaceProxy singleProxy=clusteredProxy;\n  if (clusteredProxy.isClustered()) {\n    singleProxy=(ISpaceProxy)clusteredProxy.getDirectProxy().getNonClusteredProxy();\n    CredentialsProvider credentialsProvider=clusteredProxy.getDirectProxy().getSecurityManager().getCredentialsProvider();\n    if (credentialsProvider != null)     singleProxy.getDirectProxy().getSecurityManager().login(credentialsProvider);\n  }\n  return newLocalInstance(clusteredProxy,singleProxy,config,null);\n}\n"}
{"nl": "Use max priority in thread execution", "code": "public EventBuilder maxPriority(){\n  this.event.setPriority(Thread.MAX_PRIORITY);\n  return this;\n}\n"}
{"nl": "Specify whether the target should be transparent", "code": "public TapTarget transparentTarget(boolean transparent){\n  this.transparentTarget=transparent;\n  return this;\n}\n"}
{"nl": "does the query match the string starting at the offset", "code": "public static boolean match(final String string,final int offset,final String query){\n  if (string.length() - offset < query.length())   return false;\n  for (int i=0; i < query.length(); i++) {\n    if (string.charAt(offset + i) != query.charAt(i))     return false;\n  }\n  return true;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  CompareWindow viewer=(CompareWindow)getParent();\n  return viewer != null;\n}\n"}
{"nl": "Gets the tile position given a vector position", "code": "public static boolean isWithinWorld(int x,int y){\n  return x >= 0 && y >= 0 && x < (CHUNKS_X * Chunk.CHUNK_SIZE) && y < (CHUNKS_Y * Chunk.CHUNK_SIZE);\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public NewsfeedGetBannedQueryWithExtended nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Analyzes the given APK file for data flows", "code": "public InfoflowResults analyzeAPKFile(String fileName) throws IOException, XmlPullParserException {\n  return analyzeAPKFile(fileName,false);\n}\n"}
{"nl": "Replicate and free the cache context", "code": "private int replicateAndfreeCache(Context context){\n  if (context != null) {\n    try {\n      return performReplication(context);\n    }\n  finally {\n      _cacheManager.freeCacheContext(context);\n    }\n  }\n  return 0;\n}\n"}
{"nl": "Remove all the markers from an JEditorPane", "code": "public static void removeMarkers(JTextComponent editorPane){\n  removeMarkers(editorPane,null);\n}\n"}
{"nl": "\"Xiaomi\" phone is different others,need add AppOpsManager", "code": "@TargetApi(23) private static boolean checkSelfPermissionForXiaomi(Context context,String permission){\n  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\n    try {\n      return checkSelfPermission(context,permission) == PackageManager.PERMISSION_GRANTED;\n    }\n catch (    RuntimeException t) {\n      return false;\n    }\n  }\n  int auth=ActivityCompat.checkSelfPermission(context,permission);\n  AppOpsManager appOpsManager=(AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);\n  int checkOp=appOpsManager.checkOp(AppOpsManager.permissionToOp(permission),Process.myUid(),context.getPackageName());\n  if (auth == PackageManager.PERMISSION_GRANTED && checkOp == AppOpsManager.MODE_ALLOWED) {\n    return true;\n  }\n  if (auth == PackageManager.PERMISSION_GRANTED && checkOp == AppOpsManager.MODE_IGNORED) {\n    return false;\n  }\n  return false;\n}\n"}
{"nl": "are the two splits equalOverShorterOfBoth as set bipartitionings (ignoring weights)", "code": "public boolean equals(Object object){\n  return object instanceof Split && equals((Split)object);\n}\n"}
{"nl": "check if skillId is crafting skill or not", "code": "public static boolean isCraftingSkill(int skillId){\n  Iterator<Integer> it=craftingSkillIds.iterator();\n  while (it.hasNext()) {\n    if (it.next() == skillId) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Register the listener", "code": "public void register(Object listener){\n  eventBus.register(listener);\n  Logs.info(\"register an listener({})\",listener);\n}\n"}
{"nl": "Required for Externalizable", "code": "public GSConnectionFactoryImpl(){\n}\n"}
{"nl": "Creates a new instance of INSECTDocumentGraph", "code": "public DocumentNGramGaussNormGraph(){\n  InitGraphs();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetCatalogSectionQuery(VkApiClient client,String sectionId,String from){\n  super(client,\"video.getCatalogSection\",GetCatalogSectionResponse.class);\n  sectionId(sectionId);\n  from(from);\n}\n"}
{"nl": "Enviar msg de texto simples para chat", "code": "private void sendMessageFirebase(){\n  ChatModel model=new ChatModel(userModel,edMessage.getText().toString(),Calendar.getInstance().getTime().getTime() + \"\",null);\n  mFirebaseDatabaseReference.child(CHAT_REFERENCE).push().setValue(model);\n  edMessage.setText(null);\n}\n"}
{"nl": "is the current object selected?", "code": "public boolean isCurrentSelected(){\n  return isCurrentSet() && toSelectTaxonIds.contains(currentTaxonId);\n}\n"}
{"nl": "Formats the duration as hh:mm:ss", "code": "public static String clockFormat(long duration){\n  long value=duration;\n  value=value / 1000;\n  long seconds=value % 60;\n  value=value / 60;\n  long minutes=value % 60;\n  value=value / 60;\n  long hours=value % 24;\n  return ((hours < 10 ? \"0\" + hours : \"\" + hours) + \":\" + (minutes < 10 ? \"0\" + minutes : \"\" + minutes)+ \":\"+ (seconds < 10 ? \"0\" + seconds : \"\" + seconds));\n}\n"}
{"nl": "Set client secret", "code": "protected AuthCheckPhoneQuery clientSecret(String value){\n  return unsafeParam(\"client_secret\",value);\n}\n"}
{"nl": "Instance will be destroyed All players moved to bind location All objects - deleted", "code": "public static void destroyInstance(WorldMapInstance instance){\n  if (instance.getEmptyInstanceTask() != null) {\n    instance.getEmptyInstanceTask().cancel(false);\n  }\n  int worldId=instance.getMapId();\n  WorldMap map=World.getInstance().getWorldMap(worldId);\n  if (!map.isInstanceType()) {\n    return;\n  }\n  int instanceId=instance.getInstanceId();\n  map.removeWorldMapInstance(instanceId);\n  log.info(\"Destroying instance:\" + worldId + \" \"+ instanceId);\n  Iterator<VisibleObject> it=instance.objectIterator();\n  while (it.hasNext()) {\n    VisibleObject obj=it.next();\n    if (obj instanceof Player) {\n      Player player=(Player)obj;\n      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(SystemMessageId.LEAVE_INSTANCE_NOT_PARTY));\n      moveToExitPoint((Player)obj);\n    }\n else {\n      obj.getController().onDelete();\n    }\n  }\n  instance.getInstanceHandler().onInstanceDestroy();\n  if (instance instanceof WorldMap2DInstance) {\n    WorldMap2DInstance w2d=(WorldMap2DInstance)instance;\n    if (w2d.isPersonal()) {\n      HousingService.getInstance().onInstanceDestroy(w2d.getOwnerId());\n    }\n  }\n  WalkerFormator.onInstanceDestroy(worldId,instanceId);\n}\n"}
{"nl": "Required for Externalizable", "code": "public RegisterReplicationNotificationRequestInfo(){\n}\n"}
{"nl": "parse the lines containing the match", "code": "public void parseLines(String queryLine,String midLine,String subjectLine) throws IOException {\n  if (!queryLine.startsWith(Query))   throw new IOException(\"Token '\" + Query + \"' not found in line: \"+ queryLine);\n  String[] queryTokens=queryLine.split(\"\\\\s+\");\n  if (queryTokens.length != 4)   throw new IOException(\"Wrong number of tokens: \" + queryTokens.length + \" in query line: \"+ queryLine);\n  queryStart=Basic.parseInt(queryTokens[1]);\n  querySequence=queryTokens[2];\n  queryEnd=Basic.parseInt(queryTokens[3]);\n  if (!subjectLine.startsWith(Subject))   throw new IOException(\"Token '\" + Subject + \"' not found in line: \"+ midLine);\n  String[] subjTokens=subjectLine.split(\"\\\\s+\");\n  if (subjTokens.length != 4)   throw new IOException(\"Wrong number of tokens: \" + subjTokens.length + \" in subject line: \"+ subjectLine);\n  refStart=Basic.parseInt(subjTokens[1]);\n  refSequence=subjTokens[2];\n  refEnd=Basic.parseInt(subjTokens[3]);\n}\n"}
{"nl": "Perform tasks on Creature death", "code": "public void onDie(Creature lastAttacker){\n  this.getOwner().getMoveController().abortMove();\n  this.getOwner().setCasting(null);\n  this.getOwner().getEffectController().removeAllEffects();\n  if (getOwner() instanceof Player) {\n    if (((Player)getOwner()).getIsFlyingBeforeDeath()) {\n      getOwner().unsetState(CreatureState.ACTIVE);\n      getOwner().setState(CreatureState.FLOATING_CORPSE);\n    }\n else {\n      this.getOwner().setState(CreatureState.DEAD);\n    }\n  }\n else {\n    if (getOwner() instanceof Npc) {\n      if (((Npc)getOwner()).getObjectTemplate().isFloatCorpse()) {\n        getOwner().setState(CreatureState.FLOATING_CORPSE);\n      }\n    }\n    this.getOwner().setState(CreatureState.DEAD);\n  }\n  this.getOwner().getObserveController().notifyDeathObservers(lastAttacker);\n}\n"}
{"nl": "build list of constraintWidgets from the ScoutWidget list", "code": "public ArrayList<ConstraintWidget> buildList(ScoutWidget[] list){\n  ArrayList<ConstraintWidget> ret=new ArrayList<>();\n  for (int i=mContainSet.nextSetBit(0); i >= 0; i=mContainSet.nextSetBit(i + 1)) {\n    ret.add(list[i].mConstraintWidget);\n  }\n  return ret;\n}\n"}
{"nl": "Generate an form, auto submit data to the given <code>actionUrl</code>", "code": "private static String generateAutoSubmitForm(String actionUrl,Map<String,String> paramMap){\n  StringBuilder html=new StringBuilder();\n  html.append(\"<script language=\\\"javascript\\\">window.onload=function(){document.pay_form.submit();}</script>\\n\");\n  html.append(\"<form id=\\\"pay_form\\\" name=\\\"pay_form\\\" action=\\\"\").append(actionUrl).append(\"\\\" method=\\\"post\\\">\\n\");\n  for (  String key : paramMap.keySet()) {\n    html.append(\"<input type=\\\"hidden\\\" name=\\\"\" + key + \"\\\" id=\\\"\"+ key+ \"\\\" value=\\\"\"+ paramMap.get(key)+ \"\\\">\\n\");\n  }\n  html.append(\"</form>\\n\");\n  return html.toString();\n}\n"}
{"nl": "Create the All On message", "code": "public SerialMessage allOnMessage(){\n  logger.debug(\"NODE {}: Switch All - Creating All On message.\",getNode().getNodeId());\n  SerialMessage result=new SerialMessage(getNode().getNodeId(),SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessageType.Request,SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessagePriority.Set);\n  byte[] newPayload={(byte)getNode().getNodeId(),2,(byte)getCommandClass().getKey(),(byte)SWITCH_ALL_ON};\n  result.setMessagePayload(newPayload);\n  return result;\n}\n"}
{"nl": "Initializes the Watchdog from System properties", "code": "private static void initWatchdog(){\n  if (_shutdown)   return;\n  if (null == _config)   _config=ServiceConfigLoader.getTransportConfiguration();\n  int timeoutResolution=Integer.parseInt(System.getProperty(SystemProperties.WATCHDOG_TIMEOUT_RESOLUTION,SystemProperties.WATCHDOG_TIMEOUT_RESOLUTION_DEFAULT));\n  boolean protocolValidationEnabled=((NIOConfiguration)_config).isProtocolValidationEnabled();\n  _watchdog=new Watchdog(WATCHDOG,_config.getWatchdogRequestTimeout(),_config.getWatchdogListeningTimeout(),_config.getWatchdogIdleConnectionTimeout(),timeoutResolution,protocolValidationEnabled);\n  _watchdog.start();\n}\n"}
{"nl": "update progress", "code": "public void upDateProgress(float progress){\n  setProgressInternal(progress);\n}\n"}
{"nl": "Attempts to send an event to elasticsearch for the `pipeline` index", "code": "public static String createEvent(String json,String index,TaskListener listener){\n  String protocol=Systems.getEnvVarOrSystemProperty(\"PIPELINE_ELASTICSEARCH_PROTOCOL\",\"http\");\n  String server=Systems.getEnvVarOrSystemProperty(\"PIPELINE_ELASTICSEARCH_HOST\",\"elasticsearch\");\n  String port=Systems.getEnvVarOrSystemProperty(\"ELASTICSEARCH_SERVICE_PORT\",\"9200\");\n  if (!isUrlReachable(protocol + \"://\" + server+ \":\"+ port)) {\n    return null;\n  }\n else {\n    listener.getLogger().println(\"Found Elasticsearch server, sending:\" + json);\n  }\n  try {\n    RestAssured.baseURI=protocol + \"://\" + server+ \":\"+ port+ \"/\"+ index+ \"/custom\";\n    Response r=given().contentType(\"application/json\").body(json).when().post(\"\");\n    ResponseBody body=r.getBody();\n    if (body != null) {\n      JsonPath path=body.jsonPath();\n      if (path != null) {\n        Boolean created=path.get(\"created\");\n        if (created != null && created == true) {\n          listener.getLogger().println(\"Event created\");\n          return path.get(\"_id\");\n        }\n else         if (path.get(\"error\") != null) {\n          listener.error(\"Elasticsearch response: \" + path.get(\"error.reason\"));\n        }\n      }\n    }\n    return null;\n  }\n catch (  Exception e) {\n    e.printStackTrace(listener.getLogger());\n    listener.error(\"Failed to send event: \" + json);\n    return null;\n  }\n}\n"}
{"nl": "Constructs a PartOfSpeechTagger", "code": "public PartOfSpeechTagger(){\n}\n"}
{"nl": "Return an additional \"online_mobile\" field", "code": "public FriendsGetOnlineQuery onlineMobile(Boolean value){\n  return unsafeParam(\"online_mobile\",value);\n}\n"}
{"nl": "Move the content of an old container to a new container", "code": "public void transformContainerToContainer(WidgetContainer oldContainer,ConstraintWidgetContainer newContainer){\n  WidgetContainer parent=(WidgetContainer)oldContainer.getParent();\n  if (newContainer.getCompanionWidget() == null) {\n    newContainer.setCompanionWidget(oldContainer.getCompanionWidget());\n  }\n  newContainer.setOrigin(oldContainer.getX(),oldContainer.getY());\n  newContainer.setDimension(oldContainer.getWidth(),oldContainer.getHeight());\n  newContainer.setHorizontalDimensionBehaviour(oldContainer.getHorizontalDimensionBehaviour());\n  newContainer.setVerticalDimensionBehaviour(oldContainer.getVerticalDimensionBehaviour());\n  ArrayList<ConstraintWidget> children=new ArrayList<>(oldContainer.getChildren());\n  for (  ConstraintWidget child : children) {\n    newContainer.add(child);\n  }\n  for (  ConstraintAnchor anchor : oldContainer.getAnchors()) {\n    if (anchor.isConnected()) {\n      newContainer.getAnchor(anchor.getType()).connect(anchor.getTarget(),anchor.getMargin(),anchor.getStrength(),anchor.getConnectionCreator());\n    }\n  }\n  for (  ConstraintWidget child : newContainer.getChildren()) {\n    child.resetAnchors();\n  }\n  if (parent != null) {\n    parent.remove(oldContainer);\n    parent.add(newContainer);\n  }\n else {\n    removeWidget(oldContainer);\n  }\n  mWidgets.remove(getTag(oldContainer));\n  setWidget(newContainer);\n  if (mRoot != null) {\n    boolean previousAnimationState=Animator.doAnimation();\n    Animator.setAnimationEnabled(false);\n    mRoot.layout();\n    Animator.setAnimationEnabled(previousAnimationState);\n  }\n}\n"}
{"nl": "Registers a listener for a particular condition with no special priority", "code": "public void registerListener(Condition condition,EventListener listener){\n  getListenerForCondition(condition,-1).registerListener(listener);\n}\n"}
{"nl": "Constructs a list of window of size windowSize", "code": "public static List<Window> windows(List<String> words,int windowSize){\n  List<Window> ret=new ArrayList<>();\n  for (int i=0; i < words.size(); i++)   ret.add(windowForWordInPosition(windowSize,i,words));\n  return ret;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardGetCommentsQueryWithExtended(VkApiClient client,int groupId,int topicId){\n  super(client,\"board.getComments\",GetCommentsExtendedResponse.class);\n  groupId(groupId);\n  topicId(topicId);\n  extended(true);\n}\n"}
{"nl": "Listener Methods", "code": "@OnClick({R.id.primary1,R.id.primary2,R.id.primary3,R.id.primary4,R.id.primary5,R.id.primary6}) void onPrimaryColorClicked(View view){\n  Button btn=(Button)view;\n  int tintColor=btn.getBackgroundTintList().getDefaultColor();\n  Scoop.sugarCone().update(Toppings.PRIMARY,tintColor);\n}\n"}
{"nl": "Add an entry at a certain index into the list", "code": "@ObjectiveCName(\"addEntry:index:\") public List addEntry(String entry,int index){\n  java.util.List<String> entries=this.getEntries();\n  entries.add(index,entry);\n  this.updateList(entries);\n  return this;\n}\n"}
{"nl": "Returns true if field threadNum is set (has been assigned a value) and false otherwise", "code": "public boolean isSetThreadNum(){\n  return __isset_bit_vector.get(__THREADNUM_ISSET_ID);\n}\n"}
{"nl": "build a Scope with the list of desired permissions", "code": "public static synchronized Scope build(LIPermission... permissions){\n  return new Scope(permissions);\n}\n"}
{"nl": "Required for Externalizable", "code": "public RegisterReplicationLocalViewRequestInfo(){\n}\n"}
{"nl": "Creates a new instance of SpectralSpellInteroperator", "code": "public SpectralSpellInteroperator(String sInputFile,String[] sArgs){\n  InputFile=sInputFile;\n  Args=sArgs;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set nodeRadius=\");\n  int radius=np.getInt(0,100);\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  for (Node v=viewer.getGraphView().getGraph().getFirstNode(); v != null; v=v.getNext()) {\n    viewer.getGraphView().getNV(v).setHeight(radius);\n    viewer.getGraphView().getNV(v).setWidth(radius);\n  }\n  viewer.setNodeRadius(radius);\n}\n"}
{"nl": "Download File from Server", "code": "public void downloadFile(TRSHttpRequest request,TRSFileDownloadHttpCallback callback){\n  mProvider.downloadFile(request,callback);\n}\n"}
{"nl": "Load's the configuration from the specified resource", "code": "public CustomConfigurationBuilder(ClassLoader cl,String resource) throws ConfigurationException {\n  this();\n  InputStream is=cl.getResourceAsStream(resource);\n  if (is == null)   throw new ConfigurationException(\"Unable to locate resource '\" + resource + \"'\");\n  try {\n    try {\n      load(is);\n      loadedOnInstantiation=true;\n    }\n  finally {\n      is.close();\n    }\n  }\n catch (  IOException e) {\n    throw new ConfigurationException(e);\n  }\n}\n"}
{"nl": "Required for Externalizable", "code": "public GroupByResult(){\n}\n"}
{"nl": "Add thumbnail to cache", "code": "private Bitmap addThumbnailToCache(String imageKey,Bitmap bitmap,String path,int px){\n  Bitmap thumbnail=ThumbnailUtils.extractThumbnail(bitmap,px,px);\n  thumbnail=BitmapUtils.rotateImage(thumbnail,path);\n  addBitmapToCache(imageKey,thumbnail);\n  return thumbnail;\n}\n"}
{"nl": "Interrupt all currently executing tasks, and clear the record of all executing tasks", "code": "public void haltAllTasks(){\n  LinkedList<Thread> endingThreads=new LinkedList<>();\n  endingThreads.addAll(executions.values());\n  for (  Thread thread : endingThreads) {\n    while (thread.isAlive() && thread != Thread.currentThread()) {\n      LOGGER.info(\"Interrupting execution thread \" + thread);\n      thread.interrupt();\n    }\n  }\n  executions.clear();\n}\n"}
{"nl": "how many objects are there?", "code": "public int numberOfObjects(){\n  return numberOfObjects;\n}\n"}
{"nl": "if the chart is fully zoomed out, return true", "code": "public boolean isFullyZoomedOut(){\n  return (isFullyZoomedOutX() && isFullyZoomedOutY());\n}\n"}
{"nl": "Closes the inventory display", "code": "public void close(){\n  this.open=false;\n}\n"}
{"nl": "Load the user object by id", "code": "public static User load(long id){\n  return Helper.load(id,User.class);\n}\n"}
{"nl": "Create an instance of the Authentication-Plugin", "code": "public static final Authentication create(String authPluginClassName,String authParamsString) throws UnsupportedAuthenticationException {\n  Map<String,String> authParams=new HashMap<String,String>();\n  if (isNotBlank(authParamsString)) {\n    String[] params=authParamsString.split(\",\");\n    for (    String p : params) {\n      String[] kv=p.split(\":\");\n      if (kv.length == 2) {\n        authParams.put(kv[0],kv[1]);\n      }\n    }\n  }\n  return AuthenticationFactory.create(authPluginClassName,authParams);\n}\n"}
{"nl": "read the temp file containing the downloaded image from the file system and proceed with imageCompletionHandler", "code": "private void processDownloadedImage(RequestContext context,File tempFile,CompletionHandler imageCompletionHandler){\n  Operation fileReadOp=Operation.createPatch(null).setContextId(context.request.getRequestId()).setCompletion(null);\n  FileUtils.readFileAndComplete(fileReadOp,tempFile);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set networkdata=\" + ClassificationType.Taxonomy + \";\");\n}\n"}
{"nl": "Click a mouse mask with delay", "code": "public void click(int mask,int delay) throws InterruptedException {\n  hold(mask,delay);\n}\n"}
{"nl": "The SAX <code>startDocument</code>", "code": "@Override public void startDocument() throws SAXException {\n  baseURIStack.push(catalog.getCurrentBase());\n  overrideStack.push(catalog.getDefaultOverride());\n  return;\n}\n"}
{"nl": "Returns the number of fields on this object", "code": "public int length(){\n  if (root.child == null) {\n    return 0;\n  }\n  if (length > -1) {\n    return length;\n  }\n  length=root.getChildCount();\n  return length;\n}\n"}
{"nl": "Create a new page using fc with at offset blockNum with virtual page number pageNum", "code": "public Page(FileChannel fc,int blockNum,int pageNum){\n  this(fc,blockNum,pageNum,true);\n}\n"}
{"nl": "Delete a legionMember from the legionMembers list", "code": "public void deleteLegionMember(int playerObjId){\n  legionMembers.remove(new Integer(playerObjId));\n}\n"}
{"nl": "Results are only meant to be useful in test failure reports", "code": "@Override public String toString(){\n  return \"Reading{\" + \"mDatabaseTag='\" + mDatabaseTag + '\\''+ \", mTimestampMillis=\"+ mTimestampMillis+ \", mValue=\"+ mValue+ '}';\n}\n"}
{"nl": "Add a child to the current json node", "code": "public static JsonNode addChild(JsonNode original,String key,JsonNode value){\n  Map<JsonStringNode,JsonNode> existingFields=original.getFields();\n  Map<JsonStringNode,JsonNode> newMap=new HashMap<>();\n  for (  Entry<JsonStringNode,JsonNode> entry : existingFields.entrySet()) {\n    newMap.put(entry.getKey(),entry.getValue());\n  }\n  newMap.put(JsonNodeFactories.string(key),value);\n  return JsonNodeFactories.object(newMap);\n}\n"}
{"nl": "Print the object to end-user", "code": "final public void print(Object o){\n  try {\n    BufferedWriter writer=new BufferedWriter(resp.getWriter());\n    writer.write(o.toString());\n    writer.flush();\n  }\n catch (  Exception e) {\n    if (log.isErrorEnabled())     log.error(o,e);\n  }\n}\n"}
{"nl": "Inserts this node between <code>pred</code> and its successor", "code": "void insertAfter(Node pred){\n  Node succ=pred.next;\n  next=succ;\n  prev=pred;\n  pred.next=this;\n  succ.prev=this;\n}\n"}
{"nl": "on main thread", "code": "private void onWaitingRoom(final int resultCode){\n  if (resultCode != Activity.RESULT_OK) {\n    Logger.log(\"waiting room result != ok, leaving room\");\n    leaveRoomIfExists(null,Option.<Throwable>none());\n  }\n else {\n    setSession(controller.session);\n  }\n  if (future != null && !future.isHappened()) {\n    Gdx.app.postRunnable(future);\n  }\n  future=null;\n}\n"}
{"nl": "Reorders the collections list", "code": "public MarketReorderAlbumsQuery reorderAlbums(UserActor actor,int ownerId,int albumId){\n  return new MarketReorderAlbumsQuery(getClient(),actor,ownerId,albumId);\n}\n"}
{"nl": "computes the weighted LCA", "code": "public int computeWeightedLCA(final Map<Integer,Integer> tax2weight,final double proportionOfWeightToCover){\n  if (tax2weight.size() == 0)   return IdMapper.UNASSIGNED_ID;\n  if (tax2weight.size() == 1)   return tax2weight.keySet().iterator().next();\n  if (tax2weight.size() > addresses.length) {\n    addresses=new String[tax2weight.size()];\n    weights=new int[tax2weight.size()];\n  }\n  int length=0;\n  int aTaxon=0;\n  int totalWeight=0;\n  for (  Integer taxonId : tax2weight.keySet()) {\n    if (taxonId > 0) {\n      String address=TaxonomyData.getAddress(taxonId);\n      Integer weight=tax2weight.get(taxonId);\n      if (address != null && weight != null) {\n        addresses[length]=address;\n        weights[length]=weight;\n        totalWeight+=weight;\n        if (length == 0)         aTaxon=taxonId;\n        length++;\n      }\n    }\n  }\n  if (length == 0)   return IdMapper.UNASSIGNED_ID;\n else   if (length == 1)   return aTaxon;\n  try {\n    final int weightToCover=Math.min(totalWeight,(int)Math.ceil(proportionOfWeightToCover * totalWeight));\n    final String address=getCommonPrefix(weightToCover,addresses,weights,length);\n    if (address != null) {\n      return TaxonomyData.getAddress2Id(address);\n    }\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n  }\n  return 1;\n}\n"}
{"nl": "Convert a file to a row vector", "code": "@Override public INDArray asRowVector(File f) throws IOException {\n  return asMatrix(f).ravel();\n}\n"}
{"nl": "Creates new NativeAdView instance and retrieves event emitter", "code": "public NativeAdView(ThemedReactContext context){\n  super(context);\n  mEventEmitter=context.getJSModule(RCTEventEmitter.class);\n}\n"}
{"nl": "upload file to storage server (by file buff)", "code": "public String[] upload_file(String group_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_FILE,group_name,null,null,file_ext_name,length,new UploadBuff(file_buff,offset,length),meta_list);\n}\n"}
{"nl": "QUEST QUERIES", "code": "public QuestCursor queryQuests(){\n  return mHelper.queryQuests();\n}\n"}
{"nl": "Type the given text into the editor", "code": "public EditorFixture enterText(@NotNull final String text){\n  Component component=getFocusedEditor();\n  if (component != null) {\n    robot.enterText(text);\n  }\n  return this;\n}\n"}
{"nl": "Reset the tree structure", "code": "private void reset(){\n  rootNode.removeAllChildren();\n  treeModel.reload();\n}\n"}
{"nl": "computes the id to address mapping", "code": "private static void buildId2AddressRec(Node v,String path,Map<Integer,String> id2address,Map<String,Integer> address2id){\n  int id=(Integer)v.getInfo();\n  id2address.put(id,path);\n  address2id.put(path,id);\n  if (v.getOutDegree() < Character.MAX_VALUE) {\n    char count=1;\n    for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {\n      buildId2AddressRec(f.getOpposite(v),path + count,id2address,address2id);\n      count++;\n    }\n  }\n else {\n    char count1=1;\n    char count2=1;\n    for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {\n      if (count1 == Character.MAX_VALUE) {\n        count2++;\n        count1=1;\n      }\n      buildId2AddressRec(f.getOpposite(v),(path + count1) + count2,id2address,address2id);\n      count1++;\n    }\n  }\n}\n"}
{"nl": "Switch URL for selected resource", "code": "public void switchToUrl(IResource resource,final SVNUrl svnUrl,final SVNRevision svnRevision,IProgressMonitor progress) throws TeamException {\n  SwitchToUrlCommand command=new SwitchToUrlCommand(getSVNWorkspaceRoot(),resource,svnUrl,svnRevision);\n  command.run(progress);\n}\n"}
{"nl": "reset all components before parsing", "code": "protected void reset() throws XNIException {\n}\n"}
{"nl": "Waits until no components match the given criteria under the given root", "code": "public static <T extends Component>void waitUntilGone(@NotNull Robot robot,@NotNull Container root,@NotNull GenericTypeMatcher<T> matcher){\n  String typeName=matcher.supportedType().getSimpleName();\n  Wait.minutes(2).expecting(\"absence of matching \" + typeName).until(null);\n}\n"}
{"nl": "upload appender file to storage server (by file name)", "code": "public String[] upload_appender_file(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_appender_file(group_name,local_filename,file_ext_name,meta_list);\n}\n"}
{"nl": "IRemoteJSpaceAdmin interface", "code": "public void restart() throws RemoteException {\n  ((IInternalRemoteJSpaceAdmin)adminImpl).restart();\n}\n"}
{"nl": "Override the parent method to also accept anonymous tokens", "code": "@Override public boolean supports(AuthenticationToken token){\n  return super.supports(token) || (_anonymousId != null && AnonymousToken.isAnonymous(token));\n}\n"}
{"nl": "searching the specified configuration file and return a Properties", "code": "public static Properties loadConfigFile(String path){\n  Properties property=null;\n  File file=new File(path);\n  if (file.exists() && file.canRead()) {\n    try {\n      property=new Properties();\n      property.load(new FileReader(file.getAbsolutePath()));\n    }\n catch (    FileNotFoundException e) {\n      e.printStackTrace();\n    }\ncatch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n  return property;\n}\n"}
{"nl": "Use the new components in our model", "code": "public void updateNlModel(@NotNull List<NlComponent> components,boolean deepUpdate){\n  ArrayList<ConstraintWidget> widgets=new ArrayList<>(myWidgetsScene.getWidgets());\n  if (widgets.size() > 0) {\n    for (    NlComponent component : components) {\n      findComponent(component,widgets);\n    }\n    if (widgets.size() > 0) {\n      for (      ConstraintWidget widget : widgets) {\n        myWidgetsScene.removeWidget(widget);\n      }\n    }\n  }\n  for (  NlComponent component : components) {\n    createSolverWidgetFromComponent(component);\n  }\n  for (  NlComponent component : components) {\n    updateSolverWidgetFromComponent(component,deepUpdate);\n  }\n  if (USE_GUIDELINES_DURING_DND) {\n    if (myDragDropWidget != null && !myWidgetsScene.getWidgets().contains(myDragDropWidget)) {\n      myDragDropWidget=null;\n    }\n  }\n  updateConstraintLayoutRoots(myWidgetsScene.getRoot());\n  WidgetContainer root=myWidgetsScene.getRoot();\n  if (root != null) {\n    root=root.getRootWidgetContainer();\n    if (root != null) {\n      root.layout();\n    }\n  }\n}\n"}
{"nl": "Create a fake entry for tailMap", "code": "public Entry(long renew,long renewalRTT){\n  this.renew=renew;\n  id=Long.MAX_VALUE;\n  lease=null;\n  listener=null;\n  this.renewalRTT=renewalRTT;\n}\n"}
{"nl": "Deletes a collection of items", "code": "public MarketDeleteAlbumQuery deleteAlbum(UserActor actor,int ownerId,int albumId){\n  return new MarketDeleteAlbumQuery(getClient(),actor,ownerId,albumId);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set contract-gaps=\" + !isSelected() + \";\");\n}\n"}
{"nl": "Allows to know if a given calendar instance is set today", "code": "public static boolean isToday(Calendar _calendar){\n  Calendar now=Calendar.getInstance();\n  if (now.get(Calendar.DAY_OF_MONTH) == _calendar.get(Calendar.DAY_OF_MONTH)) {\n    if (now.get(Calendar.MONTH) == _calendar.get(Calendar.MONTH)) {\n      if (now.get(Calendar.YEAR) == _calendar.get(Calendar.YEAR)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "Create a new instance", "code": "public SharedIteratorSQLDataProviderDecorator(SQLDataProvider<T> sqlDataProvider,long timeToLive){\n  _sqlDataProvider=sqlDataProvider;\n  _timeToLive=timeToLive;\n  _queryToSources=new ConcurrentHashMap<SQLQuery<T>,SharedDataIteratorSource<T>>();\n  _sourcesToQuery=new ConcurrentHashMap<SharedDataIteratorSource<T>,SQLQuery<T>>();\n}\n"}
{"nl": "Logs the user out", "code": "public void logout(){\n  setAuthToken(null);\n  userId=null;\n  getClient().clearAndResetHeaders();\n}\n"}
{"nl": "show a warning notation", "code": "public static void showWarning(String message){\n  showNotification(title,message,Mode.warning,Pos.BOTTOM_LEFT,60000);\n}\n"}
{"nl": "Filters to apply", "code": "public NewsfeedGetQuery filters(List<NewsfeedGetFilter> value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "Check if string is not empty", "code": "public static boolean isNotEmpty(String str){\n  return !isEmpty(str);\n}\n"}
{"nl": "Create an <code>unsigned byte</code>", "code": "public static UByte ubyte(int value) throws NumberFormatException {\n  return UByte.valueOf(value);\n}\n"}
{"nl": "add the service to pigeon and publish the service to registry", "code": "public static <T>void addService(Class<T> serviceInterface,T service) throws RpcException {\n  addService(null,serviceInterface,service,ServerConfig.DEFAULT_PORT);\n}\n"}
{"nl": "<p>Method:only for regex</p>", "code": "public static boolean isMatchRegex(final String string,final String regex){\n  boolean result=false;\n  if (string != null && regex != null) {\n    Pattern pattern=Pattern.compile(regex);\n    Matcher matcher=pattern.matcher(string);\n    result=matcher.find();\n  }\n  return result;\n}\n"}
{"nl": "Return only foreign audio files", "code": "public AudioGetPopularQuery onlyEng(Boolean value){\n  return unsafeParam(\"only_eng\",value);\n}\n"}
{"nl": "add a file to the recent files list", "code": "public static void addRecentFile(File file){\n  addRecentFile(file.getPath());\n}\n"}
{"nl": "Test HTML pages should be served through Jbrowser", "code": "public void testJBrowserHtml() throws Exception {\n  FetcherJBrowser fetcherJBrowser=TestUtils.newInstance(FetcherJBrowser.class,\"fetcher.jbrowser\");\n  Resource resource=new Resource(\"http://nutch.apache.org\",\"nutch.apache.org\",TestUtils.JOB_CONTEXT);\n  System.out.println(fetcherJBrowser.fetch(resource).getResponseCode());\n}\n"}
{"nl": "vm whether it is art", "code": "private static boolean isVmArt(String versionString){\n  boolean isArt=false;\n  if (versionString != null) {\n    Matcher matcher=Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+)(\\\\.\\\\d+)?\").matcher(versionString);\n    if (matcher.matches()) {\n      try {\n        int major=Integer.parseInt(matcher.group(1));\n        int minor=Integer.parseInt(matcher.group(2));\n        isArt=(major > 2) || ((major == 2) && (minor >= 1));\n      }\n catch (      NumberFormatException e) {\n      }\n    }\n  }\n  return isArt;\n}\n"}
{"nl": "true - text of comment will be visible to the user false - text of comment will be invisible to the user (default)", "code": "public GroupsBanUserQuery commentVisible(Boolean value){\n  return unsafeParam(\"comment_visible\",value);\n}\n"}
{"nl": "Returns the number of items in the list", "code": "public int size(){\n  return children.size();\n}\n"}
{"nl": "Instantiate an image with the given height and width", "code": "public NativeImageLoader(int height,int width){\n  this.height=height;\n  this.width=width;\n}\n"}
{"nl": "Called when mWidget is being changed", "code": "private void widgetChanged(){\n  configureUI();\n  repaint();\n}\n"}
{"nl": "show the message window", "code": "public static void showMessageWindow(){\n  if (ProgramProperties.isUseGUI() && MessageWindow.getInstance() != null) {\n    MessageWindow.getInstance().getFrame().setVisible(true);\n    MessageWindow.getInstance().getFrame().setState(JFrame.NORMAL);\n    MessageWindow.getInstance().getFrame().toFront();\n    MessageWindow.getInstance().startCapturingOutput();\n  }\n}\n"}
{"nl": "Element to map", "code": "public static void element2Map(Element e,Map<String,Object> map){\n  List<Object> list=e.elements();\n  if (e.attributeCount() > 0) {\n    for (    Object attri : e.attributes()) {\n      Attribute at=(Attribute)attri;\n      map.put(at.getName(),at.getValue());\n    }\n  }\n  if (list.size() < 1 && DataUtil.isEmpty(e.getText())) {\n    return;\n  }\n else   if (list.size() < 1 && !DataUtil.isEmpty(e.getText())) {\n    map.put(\"text\",e.getText());\n  }\n  for (  Object aList : list) {\n    Element iter=(Element)aList;\n    Map<String,Object> cMap=new HashMap<String,Object>();\n    element2Map(iter,cMap);\n    map.put(iter.getName(),cMap);\n  }\n}\n"}
{"nl": "Convert Date to string with long format", "code": "public static String formatDateLong(Context context,Date date){\n  DateFormat dateFormat=android.text.format.DateFormat.getLongDateFormat(context);\n  return dateFormat.format(date);\n}\n"}
{"nl": "Standard deviation for a column", "code": "public static Column var(DataFrame dataFrame,String columnName){\n  return dataFrame.groupBy(columnName).agg(functions.variance(columnName)).col(columnName);\n}\n"}
{"nl": "Create a new result", "code": "public Result(int event){\n  this(event,null);\n}\n"}
{"nl": "Registers a GUI creator for the given ID", "code": "@Strippable(side=Side.CLIENT) public GUIHandler registerGUI(String id,Function<GUIContext,GuiScreen> creator){\n  guis.put(id,creator);\n  return this;\n}\n"}
{"nl": "unzips the specified zip file to a temp folder", "code": "public static File unzipToTempFolder(File zipFile){\n  String zipFilename=zipFile.getName();\n  String tempFolderPrefix=zipFilename.substring(0,zipFilename.lastIndexOf('.'));\n  File tempFolder=createTempFolder(tempFolderPrefix);\n  try {\n    PUZipUtils.unzip(zipFile,tempFolder);\n    return tempFolder;\n  }\n catch (  Exception e) {\n    try {\n      FileUtils.deleteFileOrDirectory(tempFolder);\n    }\n catch (    RuntimeException ex) {\n      logger.debug(\"Failed to delete folder \" + tempFolder,ex);\n    }\n    throw new RuntimeException(\"Failed to unzip file \" + zipFile + \" to \"+ tempFolder,e);\n  }\n}\n"}
{"nl": "Get a projected coordinate from an AirMapTraffic's bearing and ground speed", "code": "private Coordinate projectedCoordinate(AirMapTraffic traffic){\n  long elapsedTime=(new Date().getTime() - traffic.getRecordedTime().getTime()) / 1000;\n  double metersPerSecond=traffic.getGroundSpeedKt() * 0.514444;\n  double distanceTraveled=metersPerSecond * elapsedTime;\n  return getCoordinateFromBearingAndDistance(traffic.getInitialCoordinate(),traffic.getTrueHeading(),distanceTraveled);\n}\n"}
{"nl": "Hide all other states and show content", "code": "public void showContent(List<Integer> skipIds){\n  switchState(CONTENT,null,null,null,null,skipIds);\n}\n"}
{"nl": "Gets if parent groups should be applied", "code": "public boolean isApplyGroups(){\n  return this.applyGroups;\n}\n"}
{"nl": "In proto3, repeated fields of scalar numeric types use packed encoding by default", "code": "private boolean isDefaultPackedEncoding(Field field){\n  if (field.getSyntax() == Syntax.SYNTAX_PROTO3 && field.isRepeated()) {\n    FieldDescriptorProto.Type fieldType=field.getProto().getType();\n    if (fieldType != FieldDescriptorProto.Type.TYPE_GROUP && fieldType != FieldDescriptorProto.Type.TYPE_BYTES && fieldType != FieldDescriptorProto.Type.TYPE_STRING && fieldType != FieldDescriptorProto.Type.TYPE_MESSAGE) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "return true if creature is under Fear effect", "code": "public boolean isUnderFear(){\n  return isAbnormalSet(AbnormalState.FEAR);\n}\n"}
{"nl": "If this utility has been started with override arguments, append the override arguments to the configuration file", "code": "public static String[] appendOverrides(String configFile){\n  if (configFile == null)   throw new NullPointerException(\"configFie is null\");\n  String[] confArgs;\n  if (overrideArgs != null)   confArgs=new String[overrideArgs.length + 1];\n else   confArgs=new String[]{\"\"};\n  confArgs[0]=configFile;\n  if (overrideArgs != null && overrideArgs.length > 0) {\n    for (int i=1; i < confArgs.length; i++)     confArgs[i]=overrideArgs[i - 1];\n  }\n  return (confArgs);\n}\n"}
{"nl": "Set user id", "code": "public UsersIsAppUserQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Deleted item id", "code": "protected MarketRestoreQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "Get the output schema, given the input schema", "code": "@Override public Schema transform(Schema schema){\n  int nCols=schema.numColumns();\n  List<String> colNames=schema.getColumnNames();\n  List<ColumnMetaData> meta=schema.getColumnMetaData();\n  List<ColumnMetaData> newMeta=new ArrayList<>(nCols);\n  for (int i=0; i < nCols; i++) {\n    String name=colNames.get(i);\n    ColumnMetaData inMeta=meta.get(i);\n    if (keyColumnsSet != null && keyColumnsSet.contains(name)) {\n      newMeta.add(inMeta);\n      continue;\n    }\n    if (customReductions != null && customReductions.containsKey(name)) {\n      ColumnReduction reduction=customReductions.get(name);\n      String outName=reduction.getColumnOutputName(name);\n      ColumnMetaData outMeta=reduction.getColumnOutputMetaData(outName,inMeta);\n      newMeta.add(outMeta);\n      continue;\n    }\n    if (conditionalReductions != null && conditionalReductions.containsKey(name)) {\n      ConditionalReduction reduction=conditionalReductions.get(name);\n      String outName=reduction.getOutputName();\n      ColumnMetaData m=getMetaForColumn(reduction.getReduction(),name,inMeta);\n      m.setName(outName);\n      newMeta.add(m);\n      continue;\n    }\n    ReduceOp op=opMap.get(name);\n    if (op == null)     op=defaultOp;\n    newMeta.add(getMetaForColumn(op,name,inMeta));\n  }\n  return schema.newSchema(newMeta);\n}\n"}
{"nl": "Get the distance to widget's parent in X", "code": "static int rootDistanceX(ConstraintWidget widget){\n  int rootWidth=widget.getParent().getWidth();\n  int aX=widget.getX();\n  int aWidth=widget.getWidth();\n  return Math.min(aX,rootWidth - (aX + aWidth));\n}\n"}
{"nl": "Return user onlines", "code": "public MessagesGetLongPollHistoryQuery onlines(Boolean value){\n  return unsafeParam(\"onlines\",value);\n}\n"}
{"nl": "Find faces within a given url", "code": "public List<Face> findFaces(@NotNull String imageUrl){\n  return faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,imageUrl).withResult();\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public MessagesGetChatQuery nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Changes the input stream in to an bgr based raveled(flattened) vector", "code": "public INDArray toRaveledTensor(File file){\n  try {\n    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));\n    INDArray ret=toRaveledTensor(bis);\n    bis.close();\n    return ret.ravel();\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  return samplesViewer != null && samplesViewer.getSamplesTable().getNumberOfSelectedSamples() > 0;\n}\n"}
{"nl": "Get the statuse(s) from the svn meta files", "code": "private LocalResourceStatus basicGetStatus(IResource resource,StatusUpdateStrategy strategy) throws SVNException {\n  if (!resource.exists())   return LocalResourceStatus.NONE;\n  LocalResourceStatus status=null;\n  strategy.setStatusCache(statusCache);\n  setStatuses(resource,strategy.statusesToUpdate(resource));\n  status=statusCache.getStatus(resource);\n  if (status == null && resource != null && resource.getLocation() != null) {\n    status=new LocalResourceStatus(new SVNStatusUnversioned(resource.getLocation().toFile(),false),null,checkForReadOnly);\n  }\n  return status;\n}\n"}
{"nl": "Returns the user id of the current process", "code": "public static int myUserId(){\n  return getUserId(VClientImpl.getClient().getVUid());\n}\n"}
{"nl": "Determines the height of this view", "code": "private int measureShort(int measureSpec){\n  int result;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if (specMode == MeasureSpec.EXACTLY) {\n    result=specSize;\n  }\n else {\n    result=(int)(3 * mRadius + getPaddingTop() + getPaddingBottom());\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return result;\n}\n"}
{"nl": "adds outer class params", "code": "private void handleOuterClassParams(ArrayList sootParams,soot.Value qVal,ArrayList sootParamsTypes,polyglot.types.ClassType typeToInvoke){\n  ArrayList needsRef=soot.javaToJimple.InitialResolver.v().getHasOuterRefInInit();\n  boolean addRef=needsOuterClassRef(typeToInvoke);\n  if (addRef) {\n    soot.SootClass outerClass=((soot.RefType)Util.getSootType(typeToInvoke.outer())).getSootClass();\n    sootParamsTypes.add(outerClass.getType());\n  }\n  if (addRef && !typeToInvoke.isAnonymous() && (qVal != null)) {\n    sootParams.add(qVal);\n  }\n else   if (addRef && !typeToInvoke.isAnonymous()) {\n    soot.SootClass outerClass=((soot.RefType)Util.getSootType(typeToInvoke.outer())).getSootClass();\n    sootParams.add(getThis(outerClass.getType()));\n  }\n else   if (addRef && typeToInvoke.isAnonymous()) {\n    soot.SootClass outerClass=((soot.RefType)Util.getSootType(typeToInvoke.outer())).getSootClass();\n    sootParams.add(getThis(outerClass.getType()));\n  }\n  if (typeToInvoke.isAnonymous() && (qVal != null)) {\n    sootParamsTypes.add(qVal.getType());\n    sootParams.add(qVal);\n  }\n}\n"}
{"nl": "Computes the Rx", "code": "double ComputeRx(NetNode z,NetNode Cx,NetNode Cy,double[][] D,NetNode netNodes){\n  double Rx=0.0;\n  for (NetNode p=netNodes.next; p != null; p=p.next) {\n    if (p == Cx || p == Cx.nbr || p == Cy || p == Cy.nbr || p.nbr == null)     Rx+=D[z.id][p.id];\n else     Rx+=D[z.id][p.id] / 2.0;\n  }\n  return Rx;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n"}
{"nl": "rdp encoding algorithm", "code": "private void rdp_encoding(){\n  int off, d, p, diag;\n  int packet_size=stripe_unit_size / w;\n  for (d=1; d < disks; d++) {\n    diag=d;\n    for (p=0; p < w; p++) {\n      if (diag <= w - 1) {\n        for (off=0; off < packet_size; off++) {\n          odata[0][p * packet_size + off]^=idata[d][p * packet_size + off];\n          odata[1][diag * packet_size + off]^=idata[d][p * packet_size + off];\n        }\n        diag++;\n      }\n else {\n        for (off=0; off < packet_size; off++) {\n          odata[0][p * packet_size + off]^=idata[d][p * packet_size + off];\n        }\n        diag=0;\n      }\n    }\n  }\n  for (p=1; p < w; p++) {\n    for (off=0; off < packet_size; off++) {\n      odata[1][(p - 1) * packet_size + off]^=odata[0][p * packet_size + off];\n    }\n  }\n  System.arraycopy(odata[0],0,idata[disks],0,stripe_unit_size);\n  System.arraycopy(odata[1],0,idata[disks + 1],0,stripe_unit_size);\n}\n"}
{"nl": "This returns the euclidean distance of two vectors sum(i=1,n)   (q_i - p_i)^2", "code": "public static double euclideanDistance(float[] p,float[] q){\n  double ret=0;\n  for (int i=0; i < p.length; i++) {\n    double diff=(q[i] - p[i]);\n    double sq=Math.pow(diff,2);\n    ret+=sq;\n  }\n  return ret;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n"}
{"nl": "Set the background colour of the buttons", "code": "public Builder buttonBackgroundColor(int buttonBackgroundColor){\n  this.buttonBackgroundColor=buttonBackgroundColor;\n  return this;\n}\n"}
{"nl": "Helper method to create Business Partner", "code": "public Boolean createCustomer(EntityManager em,String customerId){\n  Boolean status=true;\n  Customer bupa=null;\n  Date date=null;\n  DateFormat formatter=new SimpleDateFormat(\"yyyymmdd\");\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    Calendar cal=Calendar.getInstance();\n    date=formatter.parse(\"19770707\");\n    cal.setTime(date);\n    bupa=new Customer();\n    bupa.setCustomerId(customerId);\n    bupa.setPhoneNumber(\"009180437980098\");\n    bupa.setDateOfBirth(cal);\n    em.persist(bupa);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during creation of Business Partner. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UtilsCheckLinkQuery(VkApiClient client,String url){\n  super(client,\"utils.checkLink\",LinkChecked.class);\n  url(url);\n}\n"}
{"nl": "write bytes", "code": "public void write(byte[] bytes,int offset,int len) throws IOException {\n  outs.write(bytes,offset,len);\n}\n"}
{"nl": "force update", "code": "@Override public void forceUpdate(){\n  previousScalingType=null;\n}\n"}
{"nl": "Traverse global complexType declarations", "code": "XSComplexTypeDecl traverseGlobal(Element complexTypeNode,XSDocumentInfo schemaDoc,SchemaGrammar grammar){\n  Object[] attrValues=fAttrChecker.checkAttributes(complexTypeNode,true,schemaDoc);\n  String complexTypeName=(String)attrValues[XSAttributeChecker.ATTIDX_NAME];\n  contentBackup();\n  XSComplexTypeDecl type=traverseComplexTypeDecl(complexTypeNode,complexTypeName,attrValues,schemaDoc,grammar);\n  contentRestore();\n  grammar.addComplexTypeDecl(type,fSchemaHandler.element2Locator(complexTypeNode));\n  if (complexTypeName == null) {\n    reportSchemaError(\"s4s-att-must-appear\",new Object[]{SchemaSymbols.ELT_COMPLEXTYPE,SchemaSymbols.ATT_NAME},complexTypeNode);\n    type=null;\n  }\n else {\n    if (grammar.getGlobalTypeDecl(type.getName()) == null) {\n      grammar.addGlobalComplexTypeDecl(type);\n    }\n    final String loc=fSchemaHandler.schemaDocument2SystemId(schemaDoc);\n    final XSTypeDefinition type2=grammar.getGlobalTypeDecl(type.getName(),loc);\n    if (type2 == null) {\n      grammar.addGlobalComplexTypeDecl(type,loc);\n    }\n    if (fSchemaHandler.fTolerateDuplicates) {\n      if (type2 != null) {\n        if (type2 instanceof XSComplexTypeDecl) {\n          type=(XSComplexTypeDecl)type2;\n        }\n      }\n      fSchemaHandler.addGlobalTypeDecl(type);\n    }\n  }\n  fAttrChecker.returnAttrArray(attrValues,schemaDoc);\n  return type;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"openServer url=\");\n  final String url=np.getWordFileNamePunctuation();\n  String user=\"\";\n  if (np.peekMatchIgnoreCase(\"user\")) {\n    np.matchIgnoreCase(\"user=\");\n    user=np.getWordRespectCase();\n  }\n  String password=\"\";\n  if (np.peekMatchIgnoreCase(\"password\")) {\n    np.matchIgnoreCase(\"password=\");\n    password=np.getWordRespectCase();\nsynchronized (syncObject) {\n      if (password.equals(HIDDEN_PASSWORD) && hiddenPassword != null)       password=hiddenPassword;\n      hiddenPassword=null;\n    }\n  }\n  np.matchIgnoreCase(\";\");\n  if (!((megan.remote.RemoteServiceBrowser)getViewer()).selectServiceTab(url)) {\n    IRemoteService service=RemoteServiceManager.createService(url,user,password);\n    if (service != null) {\n      if (service instanceof LocalService) {\n        ((LocalService)service).rescan(((Director)getDir()).getDocument().getProgressListener());\n      }\n      if (service.isAvailable()) {\n        ((megan.remote.RemoteServiceBrowser)getViewer()).addService(service);\n        ((megan.remote.RemoteServiceBrowser)getViewer()).saveConfig();\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LeadsGetStatsQuery(VkApiClient client,UserActor actor,int leadId){\n  super(client,\"leads.getStats\",Lead.class);\n  accessToken(actor.getAccessToken());\n  leadId(leadId);\n}\n"}
{"nl": "adds a sequence to the alignment", "code": "public void addSequence(String name,String text,String toolTip,String unalignedPrefix,int leadingGaps,String block,int trailingGaps,String unalignedSuffix){\n  lanes.add(new Lane(this,name,text,toolTip,unalignedPrefix,leadingGaps,block,trailingGaps,unalignedSuffix));\n}\n"}
{"nl": "delete key", "code": "public int delete(KeyInfo keyInfo) throws MyException {\n  ServerInfo server;\n  ProtoCommon.PkgHeader header;\n  byte[] bsPackage;\n  header=new ProtoCommon.PkgHeader();\n  header.key_hash_code=keyInfo.getHashCode();\n  server=this.serverGroup.getServer(header.key_hash_code);\n  if (server == null) {\n    this.status=2;\n    return this.status;\n  }\n  try {\n    header.body_len=keyInfo.getPackLength();\n    header.cmd=ProtoCommon.FDHT_PROTO_CMD_DEL;\n    header.keep_alive=(byte)(this.serverGroup.keep_alive ? 1 : 0);\n    header.timestamp=(int)(System.currentTimeMillis() / 1000);\n    header.expires=0;\n    bsPackage=new byte[ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE + header.body_len];\n    ProtoCommon.packHeader(header,bsPackage);\n    keyInfo.pack(bsPackage,ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE);\n    OutputStream out=server.sock.getOutputStream();\n    out.write(bsPackage);\n    ProtoCommon.PkgInfo pkgInfo=ProtoCommon.recvPackage(server.sock.getInputStream(),ProtoCommon.FDHT_PROTO_CMD_RESP,0);\n    this.status=pkgInfo.header.status;\n    return this.status;\n  }\n catch (  IOException ex) {\n    System.err.println(\"server \" + server.address.getAddress().getHostAddress() + \":\"+ server.address.getPort()+ \" IOException, error msg: \"+ ex.getMessage());\n    this.serverGroup.forceClose(server);\n    this.status=5;\n    return this.status;\n  }\n finally {\n    this.serverGroup.closeServer(server);\n  }\n}\n"}
{"nl": "Delete the config of the app", "code": "public void deleteByAppId(Long appId){\n  List<Config> configs=configDao.listByAppId(appId,0,0);\n  if (configs != null && !configs.isEmpty()) {\n    for (    Config config : configs) {\n      delete(config);\n    }\n  }\n}\n"}
{"nl": "Equals the DynamicSmartStub instances by direct obj reference if the stubs in local VM, otherwise equals by remoteObjId", "code": "@Override public boolean equals(Object obj){\n  if (obj == null)   return false;\n  if (this == obj)   return true;\n  DynamicSmartStub eqSt=extractDynamicSmartStubFrom(obj);\n  if (eqSt == null)   return false;\n  if (eqSt == this)   return true;\n  if (_localObj != null && eqSt.getLocalObjImpl() != null)   return _localObj == eqSt.getLocalObjImpl();\n  return _remoteObjectId == eqSt._remoteObjectId;\n}\n"}
{"nl": "Creates new form Tester", "code": "public SyntaxTester(){\n  DefaultSyntaxKit.initKit();\n  initComponents();\n  jCmbLangs.setModel(new DefaultComboBoxModel(DefaultSyntaxKit.getContentTypes()));\n  jCmbLangs.setSelectedItem(\"text/java\");\n  new CaretMonitor(jEdtTest,lblCaretPos);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public LocaleMatcher(LocalePriorityList languagePriorityList,LanguageMatcherData matcherData){\n  this.matcherData=matcherData;\n  for (  ULocale language : languagePriorityList) {\n    add(language,languagePriorityList.getWeight(language));\n  }\n  Iterator<ULocale> it=languagePriorityList.iterator();\n  this.defaultLanguage=(it.hasNext() ? (ULocale)it.next() : null);\n}\n"}
{"nl": "Apply the desired theme to an activity and it's window", "code": "private void apply(Activity activity,@StyleRes int theme){\n  activity.setTheme(theme);\n  int color=AttrUtils.getColorAttr(activity,android.R.attr.colorBackground);\n  activity.getWindow().setBackgroundDrawable(new ColorDrawable(color));\n}\n"}
{"nl": "Answer a string representing the specified project", "code": "private String asReference(IProject project){\n  StringBuffer buffer=new StringBuffer();\n  buffer.append(\"0.9.3,\");\n  SVNTeamProvider provider=(SVNTeamProvider)RepositoryProvider.getProvider(project);\n  SVNWorkspaceRoot root=provider.getSVNWorkspaceRoot();\n  buffer.append(root.getLocalRoot().getUrl().toString());\n  buffer.append(\",\");\n  buffer.append(project.getName());\n  return buffer.toString();\n}\n"}
{"nl": "Pushes a new instance of a java Object of the type className", "code": "public static int javaNewInstance(int luaState,String className) throws LuaException {\n  LuaState L=LuaStateFactory.getExistingState(luaState);\nsynchronized (L) {\n    Class clazz;\n    try {\n      ClassLoader loader=ModuleContext.getInstance().getBaseClassLoader();\n      if (loader != null) {\n        clazz=loader.loadClass(className);\n      }\n else {\n        clazz=Class.forName(className);\n      }\n    }\n catch (    ClassNotFoundException e) {\n      throw new LuaException(e);\n    }\n    Object ret=getObjInstance(L,clazz);\n    L.pushJavaObject(ret);\n    return 1;\n  }\n}\n"}
{"nl": "Refresh the drawing of any symbols in renderers", "code": "private void updateSymbols(){\n  if (rendererList != null) {\n    for (    RenderSymbolInterface renderer : rendererList) {\n      renderer.renderSymbol();\n    }\n  }\n}\n"}
{"nl": "Returns whether an in-progress EntityAIBase should continue executing", "code": "@Override public boolean continueExecuting(){\n  if (!this.theEntityCreature.getNavigator().noPath() && this.theEntityCreature.getAITarget() != null) {\n    EntityLivingBase target=this.theEntityCreature.getAITarget();\n    if (target == null) {\n      return true;\n    }\n    double sqDistToPos=this.theEntityCreature.getDistanceSq(this.randPosX,this.randPosY,this.randPosZ);\n    if (sqDistToPos > 2.0D) {\n      double sqDistToTarget=this.theEntityCreature.getDistanceSqToEntity(target);\n      double sqDistOfTargetToPos=target.getDistanceSq(this.randPosX,this.randPosY,this.randPosZ);\n      if (sqDistToTarget < sqDistOfTargetToPos) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PlacesSearchQuery(VkApiClient client,UserActor actor,float latitude,float longitude){\n  super(client,\"places.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  latitude(latitude);\n  longitude(longitude);\n}\n"}
{"nl": "prepare DNA protein for pDNA", "code": "public static void main(String[] args){\n  try {\n    ProgramProperties.setProgramName(\"Blast2LCA\");\n    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);\n    long start=System.currentTimeMillis();\n    (new Blast2LCA()).run(args);\n    System.err.println(\"Time: \" + ((System.currentTimeMillis() - start) / 1000) + \"s\");\n    System.exit(0);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n    System.exit(1);\n  }\n}\n"}
{"nl": "has the data changed?", "code": "public boolean isChanged(SampleAttributeTable sampleAttributeTable){\n  if (originalBytes == null)   return false;\n  byte[] currentBytes=sampleAttributeTable.getBytes();\n  if (originalBytes.length != currentBytes.length)   return true;\n  for (int i=0; i < originalBytes.length; i++)   if (originalBytes[i] != currentBytes[i])   return true;\n  return false;\n}\n"}
{"nl": "make a SAM line", "code": "private String makeSAM(String queryName,String refName,int referenceLength,float bitScore,float expect,int rawScore,float percentIdentity,int frame,int queryStart,int queryEnd,int referenceStart,int referenceEnd,String alignedQuery,String alignedReference){\n  final StringBuilder buffer=new StringBuilder();\n  buffer.append(queryName).append(\"\\t\");\n  buffer.append(0);\n  buffer.append(\"\\t\");\n  buffer.append(refName).append(\"\\t\");\n  buffer.append(referenceStart).append(\"\\t\");\n  buffer.append(\"255\\t\");\n  Utilities.appendCigar(alignedQuery,alignedReference,buffer);\n  buffer.append(\"\\t\");\n  buffer.append(\"*\\t\");\n  buffer.append(\"0\\t\");\n  buffer.append(\"0\\t\");\n  buffer.append(alignedQuery.replaceAll(\"-\",\"\")).append(\"\\t\");\n  buffer.append(\"*\\t\");\n  buffer.append(String.format(\"AS:i:%d\\t\",(int)Math.round(bitScore)));\n  buffer.append(String.format(\"NM:i:%d\\t\",Utilities.computeEditDistance(alignedQuery,alignedReference)));\n  buffer.append(String.format(\"ZL:i:%d\\t\",referenceLength));\n  buffer.append(String.format(\"ZR:i:%d\\t\",rawScore));\n  buffer.append(String.format(\"ZE:f:%g\\t\",expect));\n  buffer.append(String.format(\"ZI:i:%d\\t\",(int)Math.round(percentIdentity)));\n  if (frame != 0)   buffer.append(String.format(\"ZF:i:%d\\t\",frame));\n  buffer.append(String.format(\"ZS:i:%s\\t\",queryStart));\n  Utilities.appendMDString(alignedQuery,alignedReference,buffer);\n  return buffer.toString();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getSelectedBlock().clear();\n}\n"}
{"nl": "Reads one packet from given ByteBuffer", "code": "public CsClientPacket handle(ByteBuffer data,ChatServerConnection client){\n  State state=client.getState();\n  int id=data.get() & 0xff;\n  return getPacket(state,id,data,client);\n}\n"}
{"nl": "Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise", "code": "public boolean isSet(_Fields field){\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\nswitch (field) {\ncase MESSAGE_TYPE:\n    return isSetMessageType();\ncase REQUEST_INFO:\n  return isSetRequestInfo();\ncase RESPONSE_INFO:\nreturn isSetResponseInfo();\ncase TRACE_INFO:\nreturn isSetTraceInfo();\ncase GLOBAL_CONTEXT:\nreturn isSetGlobalContext();\ncase LOCAL_CONTEXT:\nreturn isSetLocalContext();\ncase HEARTBEAT_INFO:\nreturn isSetHeartbeatInfo();\n}\nthrow new IllegalStateException();\n}\n"}
{"nl": "Creates a new BafASMBackend with a given enforced java version", "code": "public BafASMBackend(SootClass sc,int javaVersion){\n  super(sc,javaVersion);\n}\n"}
{"nl": "Generates a log tag using the caller reference's class name", "code": "@NonNull private static String tag(@Nullable Class<?> caller){\n  return caller == null ? \"\" : caller.getSimpleName().replaceAll(\"\\\\$\",\"\");\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  double d=1 / 1.75;\n  return new double[]{0,d,d,d,d,d,d,d,d,d,d,0};\n}\n"}
{"nl": "Create an <code>unsigned int</code>", "code": "public static UInteger uint(long value) throws NumberFormatException {\n  return UInteger.valueOf(value);\n}\n"}
{"nl": "Adds extra params", "code": "private void handleFinalLocalParams(ArrayList sootParams,ArrayList sootParamTypes,polyglot.types.ClassType keyType){\n  HashMap<IdentityKey,AnonLocalClassInfo> finalLocalInfo=soot.javaToJimple.InitialResolver.v().finalLocalInfo();\n  if (finalLocalInfo != null) {\n    if (finalLocalInfo.containsKey(new polyglot.util.IdentityKey(keyType))) {\n      AnonLocalClassInfo alci=finalLocalInfo.get(new polyglot.util.IdentityKey(keyType));\n      ArrayList<IdentityKey> finalLocals=alci.finalLocalsUsed();\n      if (finalLocals != null) {\n        Iterator<IdentityKey> it=finalLocals.iterator();\n        while (it.hasNext()) {\n          Object next=it.next();\n          polyglot.types.LocalInstance li=(polyglot.types.LocalInstance)((polyglot.util.IdentityKey)next).object();\n          sootParamTypes.add(Util.getSootType(li.type()));\n          sootParams.add(getLocal(li));\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "replace a block", "code": "public static void replaceBlock(DAAHeader header,BlockType blockType,byte[] bytes,int size) throws IOException {\n  int index=header.getIndexForBlockType(blockType);\n{\n    if (index != -1) {\n      header.setBlockTypeRank(index,BlockType.rank(BlockType.empty));\n      header.setBlockSize(index,0);\n      if (index >= header.getLastDefinedBlockIndex()) {\n        long newSize=header.getLocationOfBlockInFile(index);\n        if (newSize > 0) {\n          RandomAccessFile raf=new RandomAccessFile(header.getFileName(),\"rw\");\n          raf.setLength(newSize);\n        }\n      }\n else       throw new IOException(\"Can't replace block, not last\");\n    }\n  }\n  try (OutputStream outs=new BufferedOutputStream(new FileOutputStream(header.getFileName(),true))){\n    index=header.getFirstAvailableBlockIndex();\n    header.setBlockTypeRank(index,BlockType.rank(blockType));\n    header.setBlockSize(index,size);\n    outs.write(bytes,0,size);\n  }\n   header.save();\n}\n"}
{"nl": "Handles a packet", "code": "@Override public void handle(Packet packet){\n  packet.handle();\n}\n"}
{"nl": "Uses baseUrl as the base URL", "code": "public static DmnRestUrlBuilder usingBaseUrl(String baseUrl){\n  if (baseUrl == null)   throw new ActivitiDmnIllegalArgumentException(\"baseUrl can not be null\");\n  if (baseUrl.endsWith(\"/\"))   baseUrl=baseUrl.substring(0,baseUrl.length() - 1);\n  return new DmnRestUrlBuilder(baseUrl);\n}\n"}
{"nl": "delete file from storage server", "code": "public int delete_file(String group_name,String remote_filename) throws IOException, MyException {\n  boolean bNewConnection=this.newUpdatableStorageConnection(group_name,remote_filename);\n  Socket storageSocket=this.storageServer.getSocket();\n  try {\n    this.send_package(ProtoCommon.STORAGE_PROTO_CMD_DELETE_FILE,group_name,remote_filename);\n    ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(storageSocket.getInputStream(),ProtoCommon.STORAGE_PROTO_CMD_RESP,0);\n    this.errno=pkgInfo.errno;\n    return pkgInfo.errno;\n  }\n catch (  IOException ex) {\n    if (!bNewConnection) {\n      try {\n        this.storageServer.close();\n      }\n catch (      IOException ex1) {\n        ex1.printStackTrace();\n      }\n finally {\n        this.storageServer=null;\n      }\n    }\n    throw ex;\n  }\n finally {\n    if (bNewConnection) {\n      try {\n        this.storageServer.close();\n      }\n catch (      IOException ex1) {\n        ex1.printStackTrace();\n      }\n finally {\n        this.storageServer=null;\n      }\n    }\n  }\n}\n"}
{"nl": "stop current pulling task", "code": "private void stopPulling(){\n  eventDispatcher.unRegister(this);\n  asyncContext.complete();\n  if (pullingTimeoutFuture != null) {\n    pullingTimeoutFuture.cancel(false);\n  }\n}\n"}
{"nl": "draw a rectangle at the given anchor point at the given angle (in radiant)", "code": "public static void fillAndDrawRect(Graphics2D gc,double x,double y,double width,double height,double labelAngle,Color fillColor,Color drawColor){\n  Dimension theSize=new Dimension((int)Math.round(width),(int)Math.round(height));\n  Point2D apt=new Point2D.Float((float)x,(float)y);\n  AffineTransform saveTransform=gc.getTransform();\n  if (labelAngle >= 0.5 * Math.PI && labelAngle <= 1.5 * Math.PI) {\n    apt=Geometry.translateByAngle(apt,labelAngle,theSize.getWidth());\n    gc.rotate(Geometry.moduloTwoPI(labelAngle - Math.PI),apt.getX(),apt.getY());\n  }\n else {\n    gc.rotate(labelAngle,apt.getX(),apt.getY());\n  }\n  gc.setColor(fillColor);\n  gc.fillRect((int)Math.round(apt.getX()),(int)Math.round(apt.getY()) - theSize.height,theSize.width,theSize.height);\n  gc.setColor(drawColor);\n  gc.drawRect((int)Math.round(apt.getX()),(int)Math.round(apt.getY()) - theSize.height,theSize.width,theSize.height);\n  gc.setTransform(saveTransform);\n}\n"}
{"nl": "To write as link header", "code": "public String toString(){\n  StringBuilder builder=new StringBuilder(\"<\");\n  builder.append(href).append(\">; rel=\").append(relationship);\n  if (type != null)   builder.append(\"; type=\").append(type);\n  return builder.toString();\n}\n"}
{"nl": "Id of an item to place current item after it", "code": "public MarketReorderItemsQuery after(Integer value){\n  return unsafeParam(\"after\",value);\n}\n"}
{"nl": "Write a UTF8 encoded string to out", "code": "public static int writeString(DataOutput out,String s) throws IOException {\n  ByteBuffer bytes=encode(s);\n  int length=bytes.limit();\n  WritableUtils.writeVInt(out,length);\n  out.write(bytes.array(),0,length);\n  return length;\n}\n"}
{"nl": "Build interceptors of Method", "code": "public Interceptor[] buildMethodInterceptors(Method method){\n  Interceptors before=method.getAnnotation(Interceptors.class);\n  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;\n}\n"}
{"nl": "shutdown thread used by getLetterCodeIterator", "code": "public void close() throws IOException {\n  if (enable) {\nsynchronized (closed) {\n      closed.set(true);\n      if (!future.isDone()) {\n        done=true;\n        future.cancel(true);\n      }\n      if (isClosable) {\n        ((ICloseableIterator)iterator).close();\n      }\n    }\n  }\n else {\n    if (isClosable) {\n      ((ICloseableIterator)iterator).close();\n    }\n  }\n}\n"}
{"nl": "block until exactly <code>length</code> bytes read into <code>bytes</code>", "code": "public static void readFully(InputStream in,byte[] bytes,int offset,int length) throws IOException {\n  if (length < 0) {\n    throw new IndexOutOfBoundsException();\n  }\n  int n=0;\n  while (n < length) {\n    int count=in.read(bytes,offset + n,length - n);\n    if (count < 0) {\n      throw new EOFException();\n    }\n    n+=count;\n  }\n}\n"}
{"nl": "Call this to start accepting events", "code": "public void open(){\n  open=true;\n}\n"}
{"nl": "zlib compress 2 byte", "code": "public static byte[] compressForZlib(String stringToCompress){\n  byte[] returnValues=null;\n  try {\n    returnValues=compressForZlib(stringToCompress.getBytes(\"UTF-8\"));\n  }\n catch (  UnsupportedEncodingException uee) {\n    uee.printStackTrace();\n  }\n  return returnValues;\n}\n"}
{"nl": "make a SAM line", "code": "private String makeSAM(String queryName,String referenceLine){\n  return queryName + \"\\t0\\t\" + referenceLine+ \"\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:100\\t\\n\";\n}\n"}
{"nl": "Override the default paint method to draw the table controls when selected", "code": "@Override public boolean onPaint(ViewTransform transform,Graphics2D g){\n  boolean needsRepaint=super.onPaint(transform,g);\n  if (isSelected()) {\n    ConstraintTableLayout table=(ConstraintTableLayout)mWidget;\n    WidgetDraw.drawTableControls(transform,g,table);\n  }\n  return needsRepaint;\n}\n"}
{"nl": "os system is windows or other", "code": "public static boolean isWindows(){\n  return SystemInfo.isWindows;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsSearchQuery(VkApiClient client,UserActor actor,int userId){\n  super(client,\"friends.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n}\n"}
{"nl": "Checks whether player have needed skill for gathering and skill level is sufficient", "code": "private boolean checkPlayerSkill(final Player player,final GatherableTemplate template){\n  int harvestSkillId=template.getHarvestSkill();\n  if (!player.getSkillList().isSkillPresent(harvestSkillId)) {\n    if (harvestSkillId == 30001) {\n      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_GATHER_INCORRECT_SKILL);\n    }\n else {\n      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1330054,new DescriptionId(DataManager.SKILL_DATA.getSkillTemplate(harvestSkillId).getNameId())));\n    }\n    return false;\n  }\n  if (player.getSkillList().getSkillLevel(harvestSkillId) < template.getSkillLevel()) {\n    PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1330001,new DescriptionId(DataManager.SKILL_DATA.getSkillTemplate(harvestSkillId).getNameId())));\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Construct Success Response", "code": "public static PageRespJson buildSuccessResponse(Object data,Integer reqId,Integer totalRecords){\n  PageRespJson respJson=new PageRespJson();\n  respJson.setCode(ResponseCode.SUCCESS.getCode());\n  respJson.setData(data);\n  respJson.setMsg(StringConstant.EMPTY_STRING);\n  respJson.setReqId(reqId);\n  respJson.setRecordsTotal(totalRecords);\n  respJson.setRecordsFiltered(totalRecords);\n  return respJson;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetInvitesQuery(VkApiClient client,UserActor actor){\n  super(client,\"groups.getInvites\",GetInvitesResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Validation rules exclusive to relation types", "code": "private void validateRelationType(RelationTypeImpl relationType){\n  if (!ValidateGlobalRules.validateHasMinimumRoles(relationType))   errorsFound.add(ErrorMessage.VALIDATION_RELATION_TYPE.getMessage(relationType.getId()));\n}\n"}
{"nl": "close associated file or database", "code": "public void close(){\n  try {\n    if (textStorageReader != null)     textStorageReader.closeAllFiles();\n    if (dataIndexReader != null)     dataIndexReader.close();\n    if (classDumpReader != null)     classDumpReader.close();\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "Dump the PAG for some method in the program in dot format", "code": "public void dumpPAGForMethod(String fName,String cName,String mName) throws FileNotFoundException {\n  FileOutputStream fos=new FileOutputStream(new File(fName));\n  PrintStream ps=new PrintStream(fos);\n  ps.println(\"digraph G {\");\n  ps.println(\"\\trankdir=LR;\");\n  dumpLocalPAG(cName,mName,ps);\n  ps.print(\"}\");\n  try {\n    fos.close();\n  }\n catch (  IOException e) {\n  }\n  ps.close();\n}\n"}
{"nl": "this function increase the number about win; (+1)", "code": "public void increaseWin(){\n  this.win++;\n}\n"}
{"nl": "Video IDs", "code": "public VideoGetQueryWithExtended videos(List<String> value){\n  return unsafeParam(\"videos\",value);\n}\n"}
{"nl": "Load the values for this step from an XML Node", "code": "@Override public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException {\n  try {\n    databaseName=XMLHandler.getTagValue(stepnode,\"databaseName\");\n    tabelName=XMLHandler.getTagValue(stepnode,\"TableName\");\n    mdkeySize=XMLHandler.getTagValue(stepnode,\"MDKeySize\");\n    measureCount=XMLHandler.getTagValue(stepnode,\"Measurecount\");\n    heirAndKeySize=XMLHandler.getTagValue(stepnode,\"HeirAndKeySize\");\n    tableName=XMLHandler.getTagValue(stepnode,\"tableName\");\n    groupByEnabled=XMLHandler.getTagValue(stepnode,\"isGroupByEnabled\");\n    aggregatorClassString=XMLHandler.getTagValue(stepnode,\"aggregatorClassString\");\n    aggregatorString=XMLHandler.getTagValue(stepnode,\"aggregatorString\");\n    factDimLensString=XMLHandler.getTagValue(stepnode,\"factDimLensString\");\n    levelAnddataTypeString=XMLHandler.getTagValue(stepnode,\"levelAnddataTypeString\");\n    partitionID=XMLHandler.getTagValue(stepnode,\"partitionID\");\n    segmentId=XMLHandler.getTagValue(stepnode,\"segmentId\");\n    taskNo=XMLHandler.getTagValue(stepnode,\"taskNo\");\n  }\n catch (  Exception e) {\n    throw new KettleXMLException(\"Unable to read step info from XML node\",e);\n  }\n}\n"}
{"nl": "Send packet to this player", "code": "public static void sendPacket(Player player,AionServerPacket packet){\n  if (player.getClientConnection() != null) {\n    player.getClientConnection().sendPacket(packet);\n  }\n}\n"}
{"nl": "Tests setting a parent with api that has an associated values folder", "code": "public void testHighExistingApiParent(){\n  doTestForParentApi(\"android:Theme.Holo.NoActionBar.TranslucentDecor\",\"apiParentTestAfter5\");\n}\n"}
{"nl": "Construct a State", "code": "public State(int state){\n  this(JSpaceState.convertToString(Integer.valueOf(state)));\n}\n"}
{"nl": "All modifiers of stones will be removed", "code": "public static void removeStoneStats(Set<? extends ManaStone> itemStones,CreatureGameStats<?> cgs){\n  if (itemStones == null || itemStones.size() == 0) {\n    return;\n  }\n  for (  ManaStone stone : itemStones) {\n    List<StatFunction> modifiers=stone.getModifiers();\n    if (modifiers != null) {\n      cgs.endEffect(stone);\n    }\n  }\n}\n"}
{"nl": "Concat string from array list", "code": "public static String concatStrFromList(List<String> strList,String concatCharacter){\n  if (concatCharacter == null)   concatCharacter=StringConstant.DEFAULT_STRING_SEPARATOR;\n  if (strList != null && !strList.isEmpty()) {\n    StringBuilder sb=new StringBuilder();\n    int size=strList.size();\n    for (int i=0; i < size; ++i) {\n      sb.append(strList.get(i));\n      if (i < size - 1)       sb.append(concatCharacter);\n    }\n    return sb.toString();\n  }\n  return StringConstant.EMPTY_STRING;\n}\n"}
{"nl": "Serve a Single GoogleApiClient", "code": "public static <T>Single<T> single(GoogleApiClientSingle<T> single){\n  return Single.create(single);\n}\n"}
{"nl": "check patch file signature and TINKER_ID", "code": "public static int checkSignatureAndTinkerID(Context context,File patchFile,ShareSecurityCheck securityCheck){\n  if (!securityCheck.verifyPatchMetaSignature(patchFile)) {\n    return ShareConstants.ERROR_PACKAGE_CHECK_SIGNATURE_FAIL;\n  }\n  String oldTinkerId=getManifestTinkerID(context);\n  if (oldTinkerId == null) {\n    return ShareConstants.ERROR_PACKAGE_CHECK_APK_TINKER_ID_NOT_FOUND;\n  }\n  HashMap<String,String> properties=securityCheck.getPackagePropertiesIfPresent();\n  if (properties == null) {\n    return ShareConstants.ERROR_PACKAGE_CHECK_PACKAGE_META_NOT_FOUND;\n  }\n  String patchTinkerId=properties.get(ShareConstants.TINKER_ID);\n  if (patchTinkerId == null) {\n    return ShareConstants.ERROR_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND;\n  }\n  if (!oldTinkerId.equals(patchTinkerId)) {\n    return ShareConstants.ERROR_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL;\n  }\n  return ShareConstants.ERROR_PACKAGE_CHECK_OK;\n}\n"}
{"nl": "Whether or not the RPC completed", "code": "public boolean success(){\n  return this.success;\n}\n"}
{"nl": "Force the DataStore to close immediately", "code": "public synchronized void closeNow(){\n  if (!_closed) {\n    _referenceCount=0;\n    closeDataStore();\n  }\n}\n"}
{"nl": "Resumes audio output", "code": "public synchronized void resume(){\n}\n"}
{"nl": "The result is in the form: (p, q, I, 0, L)", "code": "private SegmentNode generate_many_to_all(SegmentNode mp){\n  long left, right, t;\n  SegmentNode p;\n  left=mp.I1;\n  right=left + mp.L;\n  p=mp.next;\n  while (p != null) {\n    if (p.I1 < left)     left=p.I1;\n    t=p.I1 + p.L;\n    if (t > right)     right=t;\n    p=p.next;\n  }\n  mp.I1=left;\n  mp.I2=0;\n  mp.L=right - left;\n  mp.next=null;\n  return mp;\n}\n"}
{"nl": "goto the last object", "code": "public boolean gotoLast(){\n  current.set1(table.getGrid().getRowCount() - 1);\n  current.set2(table.getGrid().getColumnCount() - 1);\n  return isCurrentSet();\n}\n"}
{"nl": "Used for copying error messages from other ActionResult object, when action is called within other action, as they do not throw exceptions", "code": "public void logError(final ActionResult result){\n  for (  Message msg : result.getMessages()) {\n    if (Message.ERROR.equals(msg.getType())) {\n      logWarning(msg.getText() + \", continuing\");\n    }\n  }\n}\n"}
{"nl": "Delete event", "code": "public static void delete(String event){\n  instance.events.remove(event);\n  log(event + \" deleted\");\n}\n"}
{"nl": "Below method will be used for cleanup", "code": "public void finish(){\n  try {\n    queryExecutor.finish();\n  }\n catch (  QueryExecutionException e) {\n    LOGGER.error(e,\"Problem while finish: \");\n  }\n  clearDictionaryFromQueryModel();\n}\n"}
{"nl": "Reduce the specified columns by taking the sum of values", "code": "public Builder sumColumns(String... columns){\n  return add(ReduceOp.Sum,columns);\n}\n"}
{"nl": "Notifies this delegating repository that the given dependent repository has invalidated resources of the given types (empty means all)", "code": "public void invalidateCache(@NotNull LocalResourceRepository repository,@Nullable ResourceType... types){\n  assert myChildren.contains(repository) : repository;\nsynchronized (this) {\n    if (types == null || types.length == 0) {\n      myCachedTypeMaps.clear();\n      myCachedHasResourcesOfType.clear();\n    }\n else {\n      for (      ResourceType type : types) {\n        myCachedTypeMaps.remove(type);\n        myCachedHasResourcesOfType.remove(type);\n      }\n    }\n  }\n  myItems=null;\n  myGeneration=ourModificationCounter.incrementAndGet();\n  invalidateItemCaches(types);\n}\n"}
{"nl": "Mouse moved handling", "code": "public void mouseMoved(float x,float y){\n  if (mMoveOnlyMode) {\n    return;\n  }\n  mClickListener.mEnableBaseline=false;\n  mHoverListener.mEnableBaseline=false;\n  mBaselineTimer.restart();\n  updateFromHoverListener(mViewTransform.getSwingFX(x),mViewTransform.getSwingFY(y));\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getMateUnmappedFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getMateUnmappedFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  return viewer != null;\n}\n"}
{"nl": "Finds the entry for a sink method with the given signature", "code": "private List<ResultSinkInfo> findSinkByMethodSignature(String sinkSignature){\n  List<ResultSinkInfo> sinkVals=new ArrayList<ResultSinkInfo>();\n  for (  ResultSinkInfo si : this.results.keySet())   if (si.getSink().containsInvokeExpr()) {\n    InvokeExpr expr=si.getSink().getInvokeExpr();\n    if (expr.getMethod().getSignature().equals(sinkSignature))     sinkVals.add(si);\n  }\n  return sinkVals;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LeadsCheckUserQuery(VkApiClient client,UserActor actor,int leadId){\n  super(client,\"leads.checkUser\",Checked.class);\n  accessToken(actor.getAccessToken());\n  leadId(leadId);\n}\n"}
{"nl": "Apply the size behaviour", "code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n"}
{"nl": "This method should be overriden in more specific controllers", "code": "public void onDialogRequest(Player player){\n}\n"}
{"nl": "Removes a listener such that it is no longer notified of changes", "code": "public void removeListener(@NotNull ConfigurationListener listener){\n  if (myListeners != null) {\n    myListeners.remove(listener);\n    if (myListeners.isEmpty()) {\n      myListeners=null;\n    }\n  }\n}\n"}
{"nl": "Helper method to delete CustomerReview", "code": "public Boolean deleteCustomerReview(EntityManager em,String customerReviewId){\n  Boolean status=true;\n  CustomerReview customerReview=null;\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    customerReview=em.find(CustomerReview.class,customerReviewId);\n    if (customerReview != null) {\n      em.remove(customerReview);\n      em.getTransaction().commit();\n    }\n else {\n      logger.info(\"CustomerReview \" + customerReviewId + \" does not exist in the db\");\n      status=false;\n    }\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during deletion of customer review. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "If we haven't seen all the required screens, opens the next required activity, and finishes this activity", "code": "private boolean showRequiredScreensIfNeeded(){\n  if (TutorialActivity.shouldShowTutorial(this)) {\n    Intent intent=new Intent(this,TutorialActivity.class);\n    startActivity(intent);\n    finish();\n    return true;\n  }\n else   if (AgeVerifier.shouldShowUserAge(this)) {\n    Intent intent=new Intent(this,AgeVerifier.class);\n    startActivity(intent);\n    finish();\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Refresh last_mac of account", "code": "public static boolean refreshAccountsLastMac(int accountId,String address){\n  return getAccountDAO().updateLastMac(accountId,address);\n}\n"}
{"nl": "Checks if a dragging operation is currently happening", "code": "public synchronized boolean isDragging(){\n  return isDragging;\n}\n"}
{"nl": "Calculate size of delta size", "code": "public int calculateDeltaSize(int vmfullclonesize,int vmrefreshrate){\n  final int i=(vmfullclonesize * vmrefreshrate) / 100;\n  return i;\n}\n"}
{"nl": "Checks if ban is still active", "code": "public boolean isActive(){\n  return timeEnd == null || timeEnd.getTime() > System.currentTimeMillis();\n}\n"}
{"nl": "release SLHolder for this scan", "code": "public void releaseScan() throws SAException {\n  if (_SAiter != null)   _SAiter.close();\n}\n"}
{"nl": "Convert this to JSON", "code": "public JsonObject toJson(){\n  JsonObject json=new JsonObject();\n  json.put(\"request\",request.toJson());\n  if (template != null) {\n    json.put(\"template\",template);\n  }\n  return json;\n}\n"}
{"nl": "Pass authentication", "code": "@Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,FilterChain chain,Authentication authResult) throws IOException, ServletException {\n  super.successfulAuthentication(request,response,chain,authResult);\n  chain.doFilter(request,response);\n}\n"}
{"nl": "Creates a file repo indexer job which will pull from the file queue and index", "code": "public void startIndexFileRepoJobs(String uniquename){\n  try {\n    Scheduler scheduler=Singleton.getScheduler();\n    JobDetail job=newJob(IndexFileRepoJob.class).withIdentity(\"updateindex-file-\" + uniquename).build();\n    SimpleTrigger trigger=newTrigger().withIdentity(\"updateindex-file-\" + uniquename).withSchedule(simpleSchedule().withIntervalInSeconds(this.INDEXTIME).repeatForever()).build();\n    job.getJobDataMap().put(\"REPOLOCATIONS\",this.REPOLOCATION);\n    job.getJobDataMap().put(\"LOWMEMORY\",this.LOWMEMORY);\n    scheduler.scheduleJob(job,trigger);\n    scheduler.start();\n  }\n catch (  SchedulerException ex) {\n    LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \"+ ex.getMessage());\n  }\n}\n"}
{"nl": "is this a secret attribute (such as color etc)", "code": "public boolean isSecretAttribute(String attribute){\n  return attribute.startsWith(\"@\");\n}\n"}
{"nl": "Sends a complaint to the item", "code": "public MarketReportQuery report(UserActor actor,int ownerId,int itemId,ReportReason reason){\n  return new MarketReportQuery(getClient(),actor,ownerId,itemId,reason);\n}\n"}
{"nl": "Creates a textUnit to be used later to generate a XLIFF", "code": "public TextUnit createTextUnit(Long id,String name,String source,String note,String target,String targetBcp47Tag,XliffState state){\n  TextUnit textUnit=new TextUnit(id.toString(),source);\n  textUnit.setName(name);\n  if (note != null) {\n    textUnit.setSourceProperty(new Property(Property.NOTE,note));\n  }\n  if (target != null && targetBcp47Tag != null) {\n    LocaleId localeId=LocaleId.fromBCP47(targetBcp47Tag);\n    textUnit.setTarget(localeId,new TextContainer(target));\n    if (state != null) {\n      textUnit.setProperty(new Property(\"state\",state.toString()));\n    }\n  }\n  return textUnit;\n}\n"}
{"nl": "Set value", "code": "public AccountSetPushSettingsQuery value(List<String> value){\n  return unsafeParam(\"value\",value);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public StringElemValPair(String name,char kind,String val){\n  super(name,kind);\n  this.val=new AsciiCP(val);\n}\n"}
{"nl": "Update selected item and change it's and non selected item tint", "code": "private void updateSpaceItems(final int selectedIndex){\n  if (currentSelectedItem == selectedIndex) {\n    if (spaceOnClickListener != null)     spaceOnClickListener.onItemReselected(selectedIndex,spaceItems.get(selectedIndex).getItemName());\n    return;\n  }\n  for (int i=0; i < spaceItemList.size(); i++) {\n    if (i == selectedIndex) {\n      RelativeLayout textAndIconContainer=(RelativeLayout)spaceItemList.get(selectedIndex);\n      ImageView spaceItemIcon=(ImageView)textAndIconContainer.findViewById(R.id.space_icon);\n      TextView spaceItemText=(TextView)textAndIconContainer.findViewById(R.id.space_text);\n      spaceItemText.setTextColor(activeSpaceItemColor);\n      Utils.changeImageViewTint(spaceItemIcon,activeSpaceItemColor);\n    }\n else     if (i == currentSelectedItem) {\n      RelativeLayout textAndIconContainer=(RelativeLayout)spaceItemList.get(i);\n      ImageView spaceItemIcon=(ImageView)textAndIconContainer.findViewById(R.id.space_icon);\n      TextView spaceItemText=(TextView)textAndIconContainer.findViewById(R.id.space_text);\n      spaceItemText.setTextColor(inActiveSpaceItemColor);\n      Utils.changeImageViewTint(spaceItemIcon,inActiveSpaceItemColor);\n    }\n  }\n  if (spaceOnClickListener != null)   spaceOnClickListener.onItemClick(selectedIndex,spaceItems.get(selectedIndex).getItemName());\n  currentSelectedItem=selectedIndex;\n}\n"}
{"nl": "Constructs new instance of <tt>CM_CM_REQUEST_DIALOG </tt> packet", "code": "public CM_CASTSPELL(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "This applies a constraint set suggested by the Inference tables", "code": "public void applyConstraints(ScoutWidget[] list){\n  pickColumnWidgets(list);\n  pickCenterOverlap(list);\n  pickBaseLineConnections(list);\n  pickCenteredConnections(list,true);\n  pickMarginConnections(list,10);\n  pickCenteredConnections(list,false);\n  pickMarginConnections(list,100);\n  if (DEBUG) {\n    printBaseTable(list);\n  }\n}\n"}
{"nl": "compresses a string to an array of bytes", "code": "public int deflateString2ByteArray(String inputString,byte[] bytes){\n  byte[] input;\n  try {\n    input=inputString.getBytes(\"UTF-8\");\n  }\n catch (  UnsupportedEncodingException e) {\n    input=new byte[inputString.length()];\n    for (int i=0; i < bytes.length; i++)     input[i]=(byte)inputString.charAt(i);\n  }\n  return deflateString2ByteArray(input,0,input.length,bytes);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetSuggestionsQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getSuggestions\",GetSuggestionsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Set fields", "code": "public PhotosGetCommentsQueryWithExtended fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "matches tag to string (allowing spaces inside tag to be missing in string)", "code": "private static int endOfTagMatch(String string,int fromIndex,String tag){\n  int pos=string.indexOf(tag,fromIndex);\n  if (pos != -1) {\n    while (pos < string.length() && Character.isWhitespace(string.charAt(pos)))     pos++;\n    return pos + tag.length();\n  }\n  if (tag.contains(\" \")) {\n    tag=tag.replaceAll(\" \",\"\");\n    pos=string.indexOf(tag);\n    if (pos != -1) {\n      while (pos < string.length() && Character.isWhitespace(string.charAt(pos)))       pos++;\n      return pos + tag.length();\n    }\n  }\n  return -1;\n}\n"}
{"nl": "Remove listener for space availability", "code": "public synchronized void removeListener(ISpaceModeListener listener){\n  _primarySpaceModeListeners.removeListener(listener);\n}\n"}
{"nl": "Since these operations are security sensitive we must ensure they are executing in the proper sequence", "code": "public synchronized boolean verifyAndAdvanceState(Byte newStep){\n  logger.debug(\"NODE {}: ZWaveSecurityCommandClass in verifyAndAdvanceState with newstep={}, currentstep={}\",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(newStep),ZWaveSecurityCommandClass.commandToString(currentStep));\n  if (!INIT_COMMAND_ORDER_LIST.contains(newStep)) {\n    return true;\n  }\n  if (INIT_COMMAND_ORDER_LIST.indexOf(newStep) > 0) {\n    int currentIndex=INIT_COMMAND_ORDER_LIST.indexOf(currentStep);\n    int newIndex=INIT_COMMAND_ORDER_LIST.indexOf(newStep);\n    if (newIndex != currentIndex && newIndex - currentIndex > 1) {\n      if (HALT_ON_IMPROPER_ORDER) {\n        setErrorState(String.format(\"NODE %d: Commands received out of order, aborting current=%s, new=%s\",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(currentStep),ZWaveSecurityCommandClass.commandToString(newStep)));\n        return false;\n      }\n else {\n        logger.warn(\"NODE {}: Commands received out of order (warning only, continuing) current={}, new={}\",node.getNodeId(),ZWaveSecurityCommandClass.commandToString(currentStep),ZWaveSecurityCommandClass.commandToString(newStep));\n      }\n    }\n  }\n  currentStep=newStep;\n  return true;\n}\n"}
{"nl": "Adds a language limit to the query", "code": "public void addLanguage(Integer languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n"}
{"nl": "Creates a Polygon instance from the specified points", "code": "public static Polygon polygon(Collection<Point> points){\n  return polygon(points.toArray(new Point[points.size()]));\n}\n"}
{"nl": "Set video id", "code": "protected VideoAddToAlbumQuery videoId(int value){\n  return unsafeParam(\"video_id\",value);\n}\n"}
{"nl": "create short tag for writing header line", "code": "public static String createShortTag(String cName){\n  if (cName.equalsIgnoreCase(Taxonomy))   return \"tax|\";\n else   if (cName.equalsIgnoreCase(\"interpro2go\"))   return \"IPR|\";\n else   if (cName.equalsIgnoreCase(\"eggnog\"))   return \"cog|\";\n else   return cName.toLowerCase() + \"|\";\n}\n"}
{"nl": "This method will create the player's store", "code": "private static void createStore(Player activePlayer){\n  if (activePlayer.isInState(CreatureState.RESTING)) {\n    return;\n  }\n  activePlayer.setStore(new PrivateStore(activePlayer));\n  activePlayer.setState(CreatureState.PRIVATE_SHOP);\n  PacketSendUtility.broadcastPacket(activePlayer,new SM_EMOTION(activePlayer,EmotionType.OPEN_PRIVATESHOP,0,0),true);\n}\n"}
{"nl": "print text data", "code": "protected void printXMLChar(int ch) throws IOException {\n  if (ch == '\\r') {\n    printHex(ch);\n  }\n else   if (ch == '<') {\n    _printer.printText(\"&lt;\");\n  }\n else   if (ch == '&') {\n    _printer.printText(\"&amp;\");\n  }\n else   if (ch == '>') {\n    _printer.printText(\"&gt;\");\n  }\n else   if (ch == '\\n' || ch == '\\t' || (ch >= ' ' && _encodingInfo.isPrintable((char)ch))) {\n    _printer.printText((char)ch);\n  }\n else {\n    printHex(ch);\n  }\n}\n"}
{"nl": "Acquires the proper write lock for a given cache key", "code": "public void acquireWriteLockOnKey(K id){\n  if (id == null) {\n    LOGGER.error(\"Trying to acquire write lock with a NULL key - throwing an exception!\");\n    throw new IllegalArgumentException(\"Acquiring write lock with null key!\");\n  }\n  if (LOGGER.isTraceEnabled()) {\n    LOGGER.trace(cache.getName() + \" Acquiring WRITE lock for id=\" + String.valueOf(id));\n  }\n  cache.acquireWriteLockOnKey(id);\n  if (LOGGER.isTraceEnabled()) {\n    LOGGER.trace(cache.getName() + \" Got WRITE lock for id=\" + String.valueOf(id));\n  }\n}\n"}
{"nl": "configure a comparison", "code": "public void configure(int resamplingSize,int repeatitions,int p_left,boolean useSecond,boolean optionWarningOnBoundary,int seed){\n  this.resamplingSize=resamplingSize;\n  this.repeatitions=repeatitions;\n  this.p_left=p_left;\n  this.useSecond=useSecond;\n  this.optionWarningOnBoundary=optionWarningOnBoundary;\n  if (seed != 0)   random.setSeed(seed);\n}\n"}
{"nl": "Activates provided asset", "code": "public void activatePage(String assetPath) throws IOException {\n  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(PATH_PROPERTY,assetPath).put(CMD_PROPERTY,ACTIVATE).put(CHARSET_PROPERTY,UTF_8).build()),REPLICATE_URL,REPLICATION_STARTED_MESSAGE + assetPath);\n}\n"}
{"nl": "Used for testing -- input is a full csv line: <freq,domain,ip,ts,opt:generic>", "code": "public static String extractCSVOutputLineDomain(String csvOut){\n  String tokens[]=csvOut.split(\",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\",-1);\n  return tokens[1];\n}\n"}
{"nl": "Print mean and variance of each state", "code": "public void printLf0Mean(){\n  printVectors(lf0Mean,lf0Variance);\n}\n"}
{"nl": "match header line with query name", "code": "public static boolean matchName(byte[] queryName,int queryNameLength,byte[] line,int lineLength){\n  int start=0;\n  if (line[start] == '>' || line[0] == '@')   start++;\n  while (Character.isWhitespace(line[start]) && start < lineLength)   start++;\n  int end=start;\n  while (!Character.isWhitespace(line[end]) && end < lineLength) {\n    end++;\n  }\n  if (end - start != queryNameLength)   return false;\n  for (int i=0; i < queryNameLength; i++) {\n    if (queryName[i] != line[start + i])     return false;\n  }\n  return true;\n}\n"}
{"nl": "Returns new ResizeImageTransform object", "code": "public ResizeImageTransform(Random random,int newWidth,int newHeight){\n  super(random);\n  this.newWidth=newWidth;\n  this.newHeight=newHeight;\n  converter=new OpenCVFrameConverter.ToMat();\n}\n"}
{"nl": "Type of media files to return", "code": "public MessagesGetHistoryAttachmentsQuery mediaType(MessagesGetHistoryAttachmentsType value){\n  return unsafeParam(\"media_type\",value);\n}\n"}
{"nl": "Returns true if the app is requesting data by the specified sensor from the device with the specified node id", "code": "private boolean isRequestingSensorEventData(String nodeId,String sensorName){\n  if (!isRequestingSensorEventData(nodeId)) {\n    return false;\n  }\n  boolean sensorIsRequested=false;\n  for (  DeviceSensor deviceSensor : selectedSensors.get(nodeId)) {\n    if (!deviceSensor.getName().equals(sensorName)) {\n      continue;\n    }\n    sensorIsRequested=true;\n  }\n  return sensorIsRequested;\n}\n"}
{"nl": "adds modifiers", "code": "private void addModifiers(polyglot.types.Flags flags,polyglot.ast.ClassDecl cDecl){\n  int modifiers=0;\n  if (cDecl.type().isNested()) {\n    if (flags.isPublic() || flags.isProtected() || flags.isPrivate()) {\n      modifiers=soot.Modifier.PUBLIC;\n    }\n    if (flags.isInterface()) {\n      modifiers=modifiers | soot.Modifier.INTERFACE;\n    }\n    if (flags.isAbstract()) {\n      modifiers=modifiers | soot.Modifier.ABSTRACT;\n    }\n    if (cDecl.type().outer().flags().isInterface()) {\n      modifiers=modifiers | soot.Modifier.PUBLIC;\n    }\n  }\n else {\n    modifiers=getModifiers(flags);\n  }\n  sootClass.setModifiers(modifiers);\n}\n"}
{"nl": "force update", "code": "public void forceUpdate(){\n}\n"}
{"nl": "compute the class id for a read from its matches matches", "code": "public static int computeId(String cName,float minScore,float maxExpected,float minPercentIdentity,IReadBlock readBlock){\n  if (readBlock.getNumberOfMatches() == 0)   return IdMapper.NOHITS_ID;\n  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {\n    IMatchBlock match=readBlock.getMatchBlock(i);\n    if (match.getBitScore() >= minScore && match.getExpected() <= maxExpected && match.getPercentIdentity() >= minPercentIdentity) {\n      int id=match.getId(cName);\n      if (id != 0)       return id;\n    }\n  }\n  return IdMapper.UNASSIGNED_ID;\n}\n"}
{"nl": "Check if a ServiceUnit is pre-allocated to this ResourceUnit", "code": "public boolean isServiceUnitPreAllocated(String suName){\n  return this.preAllocatedBundles.contains(suName);\n}\n"}
{"nl": "This method logs the FATAL message", "code": "public final void fatal(final Object o){\n  log(Level.FATAL,o);\n}\n"}
{"nl": "remove the service from pigeon, including unregister this service from registry", "code": "public static <T>void removeService(ProviderConfig<T> providerConfig) throws RpcException {\n  removeService(providerConfig.getUrl());\n}\n"}
{"nl": "Register additional readable cache", "code": "public void registerCache(ICache cache){\n  if (null != cache) {\n    mCaches.add(cache);\n  }\n}\n"}
{"nl": "Spawn all NPC's from templates", "code": "public static void spawnAll(){\n  if (!DeveloperConfig.SPAWN_ENABLE) {\n    log.info(\"Spawns are disabled\");\n    return;\n  }\n  for (  WorldMapTemplate worldMapTemplate : DataManager.WORLD_MAPS_DATA) {\n    if (worldMapTemplate.isInstance()) {\n      continue;\n    }\n    spawnBasedOnTemplate(worldMapTemplate);\n  }\n  DataManager.SPAWNS_DATA2.clearTemplates();\n  printWorldSpawnStats();\n  ConquestSpawnManager.spawnAll();\n}\n"}
{"nl": "true if the entry packet has an array of fixed properties", "code": "@Override public boolean hasFixedPropertiesArray(){\n  return true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"notes.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "add a single annotation to the map is a private method", "code": "public void addAnnotation(Annotation annotation){\n  this.addAnnotations(new Annotation[]{annotation});\n}\n"}
{"nl": "Returns true if this configuration supports the given rendering capability", "code": "public boolean supports(@MagicConstant(flagsFromClass=Features.class) int capability){\n  IAndroidTarget target=getTarget();\n  if (target != null) {\n    return RenderService.supportsCapability(getModule(),target,capability);\n  }\n  return false;\n}\n"}
{"nl": "Returns true if we are in pause mode", "code": "private boolean isPaused(){\n  return paused;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.isAllowAminoAcids() && !viewer.isShowAminoAcids();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetSubscriptionsQuery(VkApiClient client){\n  super(client,\"users.getSubscriptions\",GetSubscriptionsResponse.class);\n}\n"}
{"nl": "attaches the new view and takes care for removing the old view when one is attached", "code": "public void attachView(final V view){\n  detachView();\n  mPresenter.attachView(view);\n}\n"}
{"nl": "Create a sensor info with already existing sensor infos", "code": "public SensorInfo(SensorInfos sensorInfos){\n  this();\n  sensorInfoBuilder.setTimestampSnapshot(sensorInfos.getTimestampSnapshot()).setAccelerometerAxes(sensorInfos.getAccelerometerAxes()).setAccelNormalizedX(sensorInfos.getAccelNormalizedX()).setAccelNormalizedY(sensorInfos.getAccelNormalizedY()).setAccelNormalizedZ(sensorInfos.getAccelNormalizedZ()).setAccelRawX(sensorInfos.getAccelRawX()).setAccelRawY(sensorInfos.getAccelRawY()).setAccelRawZ(sensorInfos.getAccelRawZ()).setAngleNormalizedX(sensorInfos.getAngleNormalizedX()).setAngleNormalizedY(sensorInfos.getAngleNormalizedY()).setAngleNormalizedZ(sensorInfos.getAngleNormalizedZ()).setGyroscopeRawX(sensorInfos.getGyroscopeRawX()).setGyroscopeRawY(sensorInfos.getGyroscopeRawY()).setGyroscopeRawZ(sensorInfos.getGyroscopeRawZ()).build();\n}\n"}
{"nl": "Add player to group", "code": "public static final void addPlayer(PlayerGroup group,Player player){\n  Preconditions.checkNotNull(group,\"Group should not be null\");\n  group.onEvent(new PlayerEnteredEvent(group,player));\n}\n"}
{"nl": "disconnect an entry from xtn", "code": "public void disconnectEntryFromXtn(Context context,IEntryHolder entryHolder,XtnEntry xtnEntry,boolean xtnEnd) throws SAException {\n  IEntryCacheInfo pEntry=getPEntryByUid(entryHolder.getUID());\n  if (pEntry == null)   return;\n  XtnData pXtn=xtnEntry.getXtnData();\n  if (!xtnEnd)   removeLockedEntry(pXtn,pEntry);\n  if ((pEntry.getEntryHolder(this).getWriteLockTransaction() == null) || !pEntry.getEntryHolder(this).getWriteLockTransaction().equals(pXtn.getXtn())) {\n    pEntry.getEntryHolder(this).removeReadLockOwner(pXtn.getXtnEntry());\n  }\n  if ((pEntry.getEntryHolder(this).getWriteLockTransaction() != null) && pEntry.getEntryHolder(this).getWriteLockTransaction().equals(pXtn.getXtn())) {\n    pEntry.getEntryHolder(this).resetWriteLockOwner();\n  }\n  if (xtnEntry == pEntry.getEntryHolder(this).getXidOriginated())   pEntry.getEntryHolder(this).resetXidOriginated();\n  pEntry.getEntryHolder(this).setMaybeUnderXtn(pEntry.getEntryHolder(this).anyReadLockXtn() || pEntry.getEntryHolder(this).getWriteLockTransaction() != null);\n  if (!pEntry.getEntryHolder(this).isMaybeUnderXtn()) {\n    if (!pEntry.getEntryHolder(this).isHasWaitingFor()) {\n      pEntry.getEntryHolder(this).resetEntryXtnInfo();\n      if (pEntry.isPinned() && xtnEnd)       unpinIfNeeded(context,pEntry.getEntryHolder(this),null,pEntry);\n    }\n  }\n}\n"}
{"nl": "is the currently selected panel a service panel?", "code": "public boolean isServiceSelected(){\n  return tabbedPane != null && tabbedPane.getSelectedComponent() != null && tabbedPane.getSelectedComponent() instanceof ServicePanel;\n}\n"}
{"nl": "Service clean-up when restarted after being killed", "code": "private void resurrection(){\n  mNotificationManager.cancel(R.string.uploader_upload_in_progress_ticker);\n}\n"}
{"nl": "calculating a * (b + (c / d))", "code": "static int calcExpr(int a,int b,int c,int d){\n  if (d == 0) {\n    System.out.println(\"Error: Division by zero\");\n    return -1;\n  }\n else {\n    return a * (b + (c / d));\n  }\n}\n"}
{"nl": "Update missing data from the supplied info", "code": "public void updateFromInfo(ISVNInfo info){\n  if (info == null)   return;\n  Object aValue=null;\n  aValue=info.getNodeKind();\n  if (aValue != null)   this.nodeKind=((SVNNodeKind)aValue).toInt();\n  aValue=info.getLastChangedDate();\n  if (aValue == null) {\n    this.lastChangedDate=-1;\n  }\n else {\n    this.lastChangedDate=((Date)aValue).getTime();\n  }\n  aValue=info.getLastChangedRevision();\n  if (aValue == null) {\n    this.lastChangedRevision=SVNRevision.SVN_INVALID_REVNUM;\n  }\n else {\n    this.lastChangedRevision=((SVNRevision.Number)aValue).getNumber();\n  }\n  this.lastCommitAuthor=info.getLastCommitAuthor();\n  aValue=info.getUrl();\n  if (aValue == null) {\n    this.url=null;\n  }\n else {\n    this.url=((SVNUrl)aValue).toString();\n  }\n}\n"}
{"nl": "Item identifier", "code": "protected NewsfeedUnignoreItemQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "writes the classifications", "code": "public void writeClassifications(String[] cNames,Map<Integer,ListOfLongs>[] fName2Location,Map<Integer,Integer>[] fName2weight) throws IOException {\n  getFooterSectionRMA6().setStartClassificationsSection(readerWriter.getPosition());\n  getFooterSectionRMA6().getAvailableClassification2Position().clear();\n  if (cNames != null) {\n    for (int i=0; i < cNames.length; i++) {\n      final String cName=cNames[i];\n      final ClassificationBlockRMA6 classification=new ClassificationBlockRMA6(cName);\n      final Map<Integer,ListOfLongs> id2locations=fName2Location[i];\n      for (      int id : id2locations.keySet()) {\n        final Integer weight=fName2weight[i].get(id);\n        classification.setSum(id,weight != null ? weight : 0);\n      }\n      getFooterSectionRMA6().getAvailableClassification2Position().put(cName,readerWriter.getPosition());\n      classification.write(readerWriter,id2locations);\n      System.err.println(String.format(\"Class. %-13s%,10d\",cName + \":\",id2locations.size()));\n    }\n  }\n  getFooterSectionRMA6().setEndClassificationsSection(readerWriter.getPosition());\n}\n"}
{"nl": "Creates a repo supporting few languages and a TM", "code": "@Transactional public Repository createRepository(TestIdWatcher testIdWatcher) throws RepositoryNameAlreadyUsedException {\n  Repository repository=repositoryService.createRepository(testIdWatcher.getEntityName(\"repository\"));\n  try {\n    repositoryService.addRepositoryLocale(repository,\"fr-FR\");\n    repositoryService.addRepositoryLocale(repository,\"ja-JP\");\n  }\n catch (  RepositoryLocaleCreationException e) {\n    throw new RuntimeException(e);\n  }\n  return repository;\n}\n"}
{"nl": "Load the values for this step from an XML Node", "code": "public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException {\n  try {\n    this.tabelName=XMLHandler.getTagValue(stepnode,\"TableName\");\n    this.outputRowSize=XMLHandler.getTagValue(stepnode,\"outputRowSize\");\n    this.factDimLensString=XMLHandler.getTagValue(stepnode,\"factDimLensString\");\n    this.tableName=XMLHandler.getTagValue(stepnode,\"tableName\");\n    this.databaseName=XMLHandler.getTagValue(stepnode,\"databaseName\");\n    this.dimensionCount=XMLHandler.getTagValue(stepnode,\"dimensionCount\");\n    this.noDictionaryDims=XMLHandler.getTagValue(stepnode,\"noDictionaryDims\");\n    this.noDictionaryDimsMapping=XMLHandler.getTagValue(stepnode,\"noDictionaryDimsMapping\");\n    this.complexDimensionCount=XMLHandler.getTagValue(stepnode,\"complexDimensionCount\");\n    this.measureCount=XMLHandler.getTagValue(stepnode,\"measureCount\");\n    this.updateMemberRequest=XMLHandler.getTagValue(stepnode,\"isUpdateMemberRequest\");\n    this.measureDataType=XMLHandler.getTagValue(stepnode,\"measureDataType\");\n    this.partitionID=XMLHandler.getTagValue(stepnode,\"partitionID\");\n    this.segmentId=XMLHandler.getTagValue(stepnode,\"segmentId\");\n    this.taskNo=XMLHandler.getTagValue(stepnode,\"taskNo\");\n  }\n catch (  Exception e) {\n    throw new KettleXMLException(\"Unable to read step info from XML node\",e);\n  }\n}\n"}
{"nl": "A notation declaration", "code": "@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {\n}\n"}
{"nl": "pings the server until it responds or we give up", "code": "protected void determineServerStatus(boolean parametersSent){\n  long timeToLive=System.currentTimeMillis() + Context.MAX_LIFE_TIME_FROM_FINISHED;\n  if (!parametersSent) {\n    timeToLive=System.currentTimeMillis() + MAX_WAIT_FOR_NETWORK_FAILURE;\n  }\n  boolean noValidResponse=true;\n  while (System.currentTimeMillis() < timeToLive && noValidResponse) {\n    try {\n      int code=this.factory.fastFailPing(this.url);\n      if (code == 401 || code == 403) {\n        throw new PspRuntimeException(\"Authorization required for \" + this.url + \" (HTTP/\"+ code+ \"). Please provide valid credentials to servlet factory!\");\n      }\n      if (code == 404) {\n        throw new PspRuntimeException(\"Could not find \" + this.url + \" (HTTP/404). Looks like the servlet is not properly configured!\");\n      }\n      if (code == 200) {\n        noValidResponse=false;\n      }\n else {\n        LOGGER.warn(\"Ping request to {} resulted in HTTP/{}\",this.url,code);\n      }\n    }\n catch (    IOException e) {\n      LOGGER.warn(\"could not ping server at {}\",this.url,e);\n    }\n    try {\n      if (noValidResponse) {\n        Thread.sleep(PING_INTERVAL);\n      }\n    }\n catch (    InterruptedException e) {\n    }\n  }\n  if (noValidResponse) {\n    throw new PspRuntimeException(\"Could not reach server at \" + this.url);\n  }\n}\n"}
{"nl": "Get the cache distance to the root", "code": "private void cacheRootDistance(Direction d,float value){\n  mDistToRootCache[d.getDirection()]=value;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetCountriesQuery(VkApiClient client){\n  super(client,\"database.getCountries\",GetCountriesResponse.class);\n}\n"}
{"nl": "Convert DP to PX", "code": "public static int dpToPx(Context context,float dpValue){\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(dpValue * scale + 0.5f);\n}\n"}
{"nl": "****************************** ARMOR QUERIES", "code": "public ArmorCursor queryArmorSearch(String search){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=false;\n  qh.Columns=null;\n  qh.Selection=\"i.\" + S.COLUMN_ITEMS_NAME + \" LIKE ?\";\n  qh.SelectionArgs=new String[]{'%' + search + '%'};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new ArmorCursor(wrapJoinHelper(builderArmor(),qh));\n}\n"}
{"nl": "remove reWritten entry indication if exists", "code": "public void removeRewrittenEntryIndication(String uid){\n  if (_reWrittenEntries != null)   _reWrittenEntries.remove(uid);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetFacultiesQuery(VkApiClient client,UserActor actor,int universityId){\n  super(client,\"database.getFaculties\",GetFacultiesResponse.class);\n  accessToken(actor.getAccessToken());\n  universityId(universityId);\n}\n"}
{"nl": "Remove view from previous Activity and add into current Activity", "code": "private boolean addViewFromPreviousActivity(){\n  if (mCurrentContentView.getChildCount() == 0) {\n    mPreviousActivity=null;\n    mPreviousContentView=null;\n    return false;\n  }\n  CustomApplication application=(CustomApplication)mCurrentWindow.getContext().getApplicationContext();\n  mPreviousActivity=application.getActivityLifecycleHelper().getPreActivity();\n  if (mPreviousActivity == null) {\n    mPreviousActivity=null;\n    mPreviousContentView=null;\n    return false;\n  }\n  ViewGroup previousActivityContainer=getContentView(mPreviousActivity.getWindow());\n  if (previousActivityContainer == null || previousActivityContainer.getChildCount() == 0) {\n    mPreviousActivity=null;\n    mPreviousContentView=null;\n    return false;\n  }\n  mPreviousContentView=(ViewGroup)previousActivityContainer.getChildAt(0);\n  previousActivityContainer.removeView(mPreviousContentView);\n  mCurrentContentView.addView(mPreviousContentView,0);\n  return true;\n}\n"}
{"nl": "returns the exception to marshal", "code": "private Object writeReplace(){\n  return wrapped;\n}\n"}
{"nl": "is a value directory", "code": "public static boolean isAValuesDirectory(String directoryName){\n  if (directoryName == null) {\n    throw new NullPointerException(\"directoryName can not be null\");\n  }\n  return directoryName.equals(\"values\") || directoryName.startsWith(\"values-\");\n}\n"}
{"nl": "recursively select all nodes in the same component", "code": "private void selectRec(Node v,Set<String> selected){\n  for (Edge e=v.getFirstAdjacentEdge(); e != null; e=v.getNextAdjacentEdge(e)) {\n    Node w=e.getOpposite(v);\n    String label=((NodeData)w.getData()).getLabel();\n    if (!selected.contains(label)) {\n      selected.add(label);\n      selectRec(w,selected);\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsAreFriendsQuery(VkApiClient client,UserActor actor,int... userIds){\n  super(client,\"friends.areFriends\",Utils.buildParametrizedType(List.class,FriendStatus.class));\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n"}
{"nl": "MELODY QUERIES", "code": "public HornMelodiesCursor queryMelodiesFromNotes(String notes){\n  return mHelper.queryMelodiesFromNotes(notes);\n}\n"}
{"nl": "If cancelable, signals that the user has clicked outside of the outer circle", "code": "public void onTargetCancel(TapTargetView view){\n  view.dismiss(false);\n}\n"}
{"nl": "is the given file a MALT or Diamond -generated SAM file?", "code": "public static boolean IsMaltOrDiamondSAMFile(File file){\n  String suffix=Basic.getFileSuffix(Basic.getFileNameWithoutZipOrGZipSuffix(file.getName()));\n  if (suffix == null)   return false;\n  if (!suffix.toLowerCase().equals(\".sam\"))   return false;\n  try {\n    try (FileInputIterator it=new FileInputIterator(file.getPath())){\n      while (it.hasNext()) {\n        String aLine=it.next();\n        if (aLine.startsWith(\"@\")) {\n          if (aLine.contains(\"PN:MALT\") || (aLine.contains(\"PN:DIAMOND\")))           return true;\n        }\n else {\n          return false;\n        }\n      }\n    }\n   }\n catch (  IOException e) {\n  }\n  return false;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof IViewerWithFindToolBar;\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  FailOverPolicy copy=(FailOverPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(empty,copy));\n}\n"}
{"nl": "Creates a folder inside the given parent folder", "code": "public BoxFolder createFolder(String folderName,String parentId) throws BoxSDKServiceException {\n  try {\n    BoxFolder parentFolder=new BoxFolder(getBoxAPIConnection(),parentId);\n    BoxFolder.Info createFolderInfo=parentFolder.createFolder(folderName);\n    logger.debug(\"created: \" + createFolderInfo.getID() + \", name: \"+ createFolderInfo.getName());\n    return createFolderInfo.getResource();\n  }\n catch (  BoxAPIException e) {\n    throw new BoxSDKServiceException(\"Can't create folder: \" + folderName,e);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetByIdQueryWithExtended(VkApiClient client,String... posts){\n  super(client,\"wall.getById\",GetByIdExtendedResponse.class);\n  posts(posts);\n  extended(true);\n}\n"}
{"nl": "Is the specific date yesterday", "code": "public static boolean isYesterday(Date date){\n  Calendar calendar=Calendar.getInstance();\n  calendar.add(Calendar.DAY_OF_MONTH,-1);\n  int nowYear=calendar.get(Calendar.YEAR);\n  int nowMonth=calendar.get(Calendar.MONTH);\n  int nowMonthDay=calendar.get(Calendar.DAY_OF_MONTH);\n  calendar.setTimeInMillis(date.getTime());\n  int thenYear=calendar.get(Calendar.YEAR);\n  int thenMonth=calendar.get(Calendar.MONTH);\n  int thenMonthDay=calendar.get(Calendar.DAY_OF_MONTH);\n  return (thenYear == nowYear) && (thenMonth == nowMonth) && (thenMonthDay == nowMonthDay);\n}\n"}
{"nl": "DOM Level 3", "code": "@Override public Node adoptNode(Node source) throws DOMException {\n  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,\"Method not supported\");\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.ByStart.toString() + \";zoom axis=both what=fit;\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureSendNotificationQuery(VkApiClient client,ServiceActor actor,String message){\n  super(client,\"secure.sendNotification\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n  message(message);\n}\n"}
{"nl": "check is3G", "code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Loads the samples from the given channel", "code": "public static Sample loadBinary(DataInputStream dis) throws IOException {\n  int frameDataSize=dis.readInt();\n  short[] frameData=new short[frameDataSize];\n  for (int i=0; i < frameData.length; i++) {\n    frameData[i]=dis.readShort();\n  }\n  int residualDataSize=dis.readInt();\n  byte[] residualData=new byte[residualDataSize];\n  for (int i=0; i < residualData.length; i++) {\n    residualData[i]=dis.readByte();\n  }\n  return new Sample(frameData,residualData,residualDataSize);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static boolean equalsChars(CharSequence a,CharSequence b){\n  return (a.length() == b.length()) && (compare(a,b) == 0);\n}\n"}
{"nl": "Serialize a primitive (PbsFormatter primitive types) to the given stream", "code": "public static void writePrimitiveArray(PbsOutputStream output,Object[] array){\n  if (array == null)   output.writeInt(-1);\n else {\n    output.writeInt(array.length);\n    for (int i=0; i < array.length; ++i) {\n      PbsEntryFormatter.writeFieldValue(output,array[i]);\n    }\n  }\n}\n"}
{"nl": "if had init freeline return true", "code": "public static boolean hadInitFreeline(Project project){\n  if (project != null) {\n    String projectPath=project.getBasePath();\n    File freelineDir=new File(projectPath,\"freeline\");\n    File freeline_py=new File(projectPath,\"freeline.py\");\n    if (freelineDir.exists() && freeline_py.exists()) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Instantiate the interface and set the context", "code": "OMTG_ENV_005_JS_Interface(Context c){\n  mContext=c;\n}\n"}
{"nl": "Set a user to the default group", "code": "public boolean giveDefaultIfNeeded(User user,boolean save){\n  boolean hasGroup=false;\n  if (user.getPrimaryGroup() != null && !user.getPrimaryGroup().isEmpty()) {\n    for (    Node node : user.getPermissions(false)) {\n      if (node.isGroupNode()) {\n        hasGroup=true;\n        break;\n      }\n    }\n  }\n  if (hasGroup) {\n    return false;\n  }\n  user.setPrimaryGroup(\"default\");\n  try {\n    user.setPermission(\"group.default\",true);\n  }\n catch (  ObjectAlreadyHasException ignored) {\n  }\n  if (save) {\n    plugin.getDatastore().saveUser(user,Callback.empty());\n  }\n  return true;\n}\n"}
{"nl": "update the view", "code": "public void updateView(){\n  updateGraph();\n  embedGraph();\n}\n"}
{"nl": "polynomial distance computer between two units", "code": "private SourceTargetPair[] vocalizationF0DistanceComputer(VocalizationCandidate[] suitableCandidates,VocalizationCandidate[] suitableF0Candidates,Element domElement){\n  int noPossibleImpositions=suitableCandidates.length * suitableF0Candidates.length;\n  SourceTargetPair[] imposeF0Data=new SourceTargetPair[noPossibleImpositions];\n  int count=0;\n  for (int i=0; i < suitableCandidates.length; i++) {\n    for (int j=0; j < suitableF0Candidates.length; j++) {\n      int sourceIndex=suitableCandidates[i].unitIndex;\n      int targetIndex=suitableF0Candidates[j].unitIndex;\n      double contourCost=getContourCostDistance(sourceIndex,targetIndex);\n      double mergeCost=getMergeCost(sourceIndex,targetIndex,domElement);\n      double cost=(contourCost * contourCostWeight) + (mergeCost * (1 - contourCostWeight));\n      Log.d(Mary.LOG,\"Unit Index \" + sourceIndex + \" & Contour Index \"+ targetIndex+ \" :: Countour cost: \"+ df.format(contourCost)+ \" + Merge Cost: \"+ df.format(mergeCost)+ \" --> TotalCost: \"+ df.format(cost));\n      imposeF0Data[count++]=new SourceTargetPair(sourceIndex,targetIndex,cost);\n    }\n  }\n  Arrays.sort(imposeF0Data);\n  return imposeF0Data;\n}\n"}
{"nl": "Processes single package going from server to client roData is created by allocate and had to have array", "code": "public static ByteBuffer processInboundPackage(ByteBuffer roData,int exchangeId,boolean connectionOk){\n  roData.rewind();\n  if (BuildConfig.DEBUG) {\n    XposedBridge.log(\"Processing inbound package of size \" + Integer.toString(roData.remaining()));\n  }\n  try {\nsynchronized (sync) {\n    }\n  }\n catch (  Throwable e) {\n    XposedBridge.log(e);\n  }\n  return null;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set fontSize=increase;\");\n}\n"}
{"nl": "Init the instance", "code": "public static void initInstance(Properties properties){\n  if (instance == null) {\n    instance=new CloseVoteFinder(properties);\n  }\n}\n"}
{"nl": "This method will add a new legion member to the cache", "code": "private void addCachedLegionMember(LegionMember legionMember){\n  this.allCachedLegionMembers.addMember(legionMember);\n}\n"}
{"nl": "Initialise the realm configuration", "code": "private void initRealmConfiguration(){\n  RealmConfiguration realmConfiguration=new RealmConfiguration.Builder(this).build();\n  Realm.setDefaultConfiguration(realmConfiguration);\n}\n"}
{"nl": "This is a shared Experiment that derived from the python integration test exp_a and exp_b only label is different from the original definition by appending a time to it", "code": "@DataProvider(name=\"ExperimentAAndB\") public static Object[][] experimentAAndB(){\n  return new Object[][]{new Object[]{\"{\\\"applicationName\\\": \\\"qbo\\\", \\\"label\\\": \\\"exp_a_\" + time + \"\\\",\"+ \"\\\"samplingPercent\\\": 1.0, \\\"startTime\\\": \\\"\"+ dateTime.minusDays(1).format(formatter)+ \"\\\", \"+ \"\\\"endTime\\\": \\\"\"+ dateTime.plusDays(1).format(formatter)+ \"\\\", \\\"description\\\": \\\"some description\\\"}\"},new Object[]{\"{\\\"applicationName\\\": \\\"qbo\\\", \\\"label\\\": \\\"exp_b_\" + time + \"\\\",\"+ \"\\\"samplingPercent\\\": 1.0, \\\"startTime\\\": \\\"\"+ dateTime.minusDays(3).format(formatter)+ \"\\\", \"+ \"\\\"endTime\\\": \\\"\"+ dateTime.plusDays(8).format(formatter)+ \"\\\", \\\"description\\\": \\\"some description\\\"}\"}};\n}\n"}
{"nl": "sort by original order", "code": "public static void sortByOriginalOrder(final Alignment alignment){\n  alignment.resetOrder();\n}\n"}
{"nl": "is series selected and  isSelectedBasedOnSeries==true or className selected and isSelectedBasedOnSeries==false? Logic is flipped if transposed is set", "code": "public boolean isSelected(String series,String className){\n  if (isSelectedBasedOnSeries)   return selectedSeries.contains(series);\n else   return selectedClasses.contains(className);\n}\n"}
{"nl": "Create an <code>unsigned long</code>", "code": "private ULong(String value) throws NumberFormatException {\n  if (value == null) {\n    throw new NumberFormatException(\"null\");\n  }\n  int length=value.length();\n  if (length == 0) {\n    throw new NumberFormatException(\"Empty input string\");\n  }\n  if (value.charAt(0) == '-') {\n    throw new NumberFormatException(String.format(\"Illegal leading minus sign on unsigned string %s\",value));\n  }\n  if (length <= 18) {\n    this.value=Long.parseLong(value,10);\n    return;\n  }\n  final long first=Long.parseLong(value.substring(0,length - 1),10);\n  final int second=Character.digit(value.charAt(length - 1),10);\n  if (second < 0) {\n    throw new NumberFormatException(\"Bad digit at end of \" + value);\n  }\n  long result=first * 10 + second;\n  if (compare(result,first) < 0) {\n    throw new NumberFormatException(String.format(\"String value %s exceeds range of unsigned long\",value));\n  }\n  this.value=result;\n}\n"}
{"nl": "Random step to a coordinate object", "code": "public static Point randomStep(Point point){\n  point.setLongitude(point.getLongitude() + randomStep());\n  point.setLatitude(point.getLatitude() + randomStep());\n  return point;\n}\n"}
{"nl": "Every + 100 delta of (MR - MA) = + 10% to resist<br> if the difference is 1000 = 100% resist", "code": "public static AttackStatus calculateMagicalStatus(Creature attacker,Creature attacked,int criticalProb,boolean isSkill){\n  if (!isSkill) {\n    if (Rnd.get(0,1000) < StatFunctions.calculateMagicalResistRate(attacker,attacked,0)) {\n      return AttackStatus.RESIST;\n    }\n  }\n  if (StatFunctions.calculateMagicalCriticalRate(attacker,attacked,criticalProb)) {\n    return AttackStatus.CRITICAL;\n  }\n  return AttackStatus.NORMALHIT;\n}\n"}
{"nl": "Set start from", "code": "public NewsfeedSearchQuery startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n"}
{"nl": "flushes and resets the scheduler", "code": "public void flushAndCancel(){\nsynchronized (this.sourceDataTag) {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"\\tscheduler[\" + this.sourceDataTag.getId() + \"] : flush and reset\");\n    }\n    this.cancel();\n    this.run();\n    this.lastSourceDataTag=null;\n  }\n}\n"}
{"nl": "removes the UID of a file from the set of open files", "code": "public static void removeUIdFromSetOfOpenFiles(String name,long uId){\n  final Pair<String,Long> pair=new Pair<>(name,uId);\n  Integer count=openFiles.get(pair);\n  if (count == null || count < 2) {\n    openFiles.keySet().remove(pair);\n  }\n else   openFiles.put(pair,count - 1);\n}\n"}
{"nl": "Load and parse the R class such that resource references in the layout rendering can refer to local resources properly", "code": "public void loadAndParseRClass(){\n  myClassLoader.loadAndParseRClassSilently();\n}\n"}
{"nl": "Remove a widget from the tree, breaking any connections to it", "code": "public void removeWidget(ConstraintWidget widget){\n  if (widget == null) {\n    return;\n  }\n  if (widget instanceof ConstraintWidgetContainer) {\n    ConstraintWidgetContainer container=(ConstraintWidgetContainer)widget;\n    ArrayList<ConstraintWidget> children=new ArrayList<>(container.getChildren());\n    for (    ConstraintWidget w : children) {\n      removeWidget(w);\n    }\n  }\n  for (  ConstraintWidget w : mWidgets.values()) {\n    w.disconnectWidget(widget);\n  }\n  WidgetContainer parent=(WidgetContainer)widget.getParent();\n  if (parent != null) {\n    parent.remove(widget);\n  }\n  mWidgets.remove(getTag(widget));\n  if (mRoot == widget) {\n    mRoot=null;\n  }\n}\n"}
{"nl": "Creates a new instance of INSECTMemoryDB", "code": "public INSECTMemoryDB(){\n  ObjectMap=new HashMap();\n}\n"}
{"nl": "json --> obj", "code": "public static WxBatchGetMaterialResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxBatchGetMaterialResult.class);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public ExecuteStorageFunctionQuery(VkApiClient client,Actor actor,String storageFunctionName){\n  super(client,\"execute.\" + storageFunctionName,JsonElement.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Photo's owner ID", "code": "protected PhotosCopyQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "Return list of inherit system roles for user defined role", "code": "public static List<String> parseRolesString(String roles){\n  List<String> result=new ArrayList<String>();\n  StringTokenizer st=new StringTokenizer(roles,\",\");\n  for (; st.hasMoreTokens(); ) {\n    String role=st.nextToken().trim();\n    if (!result.contains(role) && (role.equalsIgnoreCase(String.valueOf(SecurityContext.PERMISSION_WRITE)) || role.equalsIgnoreCase(String.valueOf(SecurityContext.PERMISSION_READ)) || role.equalsIgnoreCase(String.valueOf(SecurityContext.PERMISSION_EXECUTE))))     result.add(role.toUpperCase());\n  }\n  return result;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LeadsStartQuery(VkApiClient client,UserActor actor,int leadId,String secret){\n  super(client,\"leads.start\",Start.class);\n  accessToken(actor.getAccessToken());\n  leadId(leadId);\n  secret(secret);\n}\n"}
{"nl": "Sets a custom primary backup listener", "code": "public UrlSpaceConfigurer primaryBackupListener(ISpaceModeListener primaryBackupListener){\n  validate();\n  urlSpaceFactoryBean.setPrimaryBackupListener(primaryBackupListener);\n  return this;\n}\n"}
{"nl": "Parses the NDEF Message from the intent and prints to the TextView", "code": "void processIntent(Intent intent){\n  Parcelable[] rawMsgs=intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);\n  NdefMessage msg=(NdefMessage)rawMsgs[0];\n  Match newMatch=SerializationUtils.deserialize(msg.getRecords()[0].getPayload());\n  Toast.makeText(getApplicationContext(),\"NAME : \" + newMatch.getTarget().getNickname(),Toast.LENGTH_LONG).show();\n}\n"}
{"nl": "Make sure we can use a different maxPassages per field", "code": "public void testPerFieldMaxPassages() throws Exception {\n  deleteAllDocs();\n  long gen=addDocument(\"{fields: {body: 'This sentence has test.  This one does not.  Here is test again.', authors: ['This sentence has test.  This one does not.  Here is test again.']}}\");\n  JSONObject result=send(\"search\",\"{queryText: 'test', retrieveFields: [{field: authors, highlight: snippets, maxPassages: 1}, {field: body, highlight: snippets, maxPassages: 2}], searcher: {indexGen: \" + gen + \"}}\");\n  assertEquals(1,getInt(result,\"totalHits\"));\n  assertEquals(1,getInt(result,\"hits[0].fields.authors.length\"));\n  assertEquals(\"Here is <b>test</b> again.\",renderHighlight(getArray(result,\"hits[0].fields.authors\")));\n  assertEquals(2,getInt(result,\"hits[0].fields.body.length\"));\n  assertEquals(\"This sentence has <b>test</b>.  ...Here is <b>test</b> again.\",renderHighlight(getArray(result,\"hits[0].fields.body\")));\n}\n"}
{"nl": "Computes the global non-flow-sensitive alias information for the given method", "code": "private Map<AccessPath,Set<AccessPath>> computeGlobalAliases(SootMethod method){\n  Map<AccessPath,Set<AccessPath>> res=new HashMap<AccessPath,Set<AccessPath>>();\n  for (  Unit u : method.getActiveBody().getUnits()) {\n    if (!(u instanceof AssignStmt))     continue;\n    final AssignStmt assign=(AssignStmt)u;\n    if (!(assign.getLeftOp() instanceof FieldRef && (assign.getRightOp() instanceof FieldRef || assign.getRightOp() instanceof Local)))     if (!(assign.getRightOp() instanceof FieldRef && (assign.getLeftOp() instanceof FieldRef || assign.getLeftOp() instanceof Local)))     continue;\n    final AccessPath apLeft=new AccessPath(assign.getLeftOp(),true);\n    final AccessPath apRight=new AccessPath(assign.getRightOp(),true);\n    Set<AccessPath> mapLeft=res.get(apLeft);\n    if (mapLeft == null) {\n      mapLeft=new HashSet<AccessPath>();\n      res.put(apLeft,mapLeft);\n    }\n    mapLeft.add(apRight);\n    Set<AccessPath> mapRight=res.get(apRight);\n    if (mapRight == null) {\n      mapRight=new HashSet<AccessPath>();\n      res.put(apRight,mapRight);\n    }\n    mapLeft.add(apLeft);\n  }\n  return res;\n}\n"}
{"nl": "write contour into a lf0 file in MARY PTC format", "code": "public void writeIntoMARYPTCfile(String ptcFileName) throws IOException {\n  PitchReaderWriter.write_pitch_file(ptcFileName,this.contour,(float)this.header.windowSizeInSeconds,(float)this.header.skipSizeInSeconds,this.header.fs);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesSetActivityQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.setActivity\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "add the service to pigeon and publish the service to registry", "code": "public static <T>void addService(String url,Class<T> serviceInterface,T service) throws RpcException {\n  addService(url,serviceInterface,service,ServerConfig.DEFAULT_PORT);\n}\n"}
{"nl": "This method is called directly from Freemarker", "code": "@Override @Nullable public Object findTemplateSource(@NotNull String name) throws IOException {\n  File file=resolveName(name);\n  TemplateSource templateSource=TemplateSource.open(file);\n  pushTemplateFolder(file.getParentFile());\n  return templateSource;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public OrdersGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"orders.get\",Utils.buildParametrizedType(List.class,Order.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "This returns the euclidean distance of two vectors sum(i=1,n)   (q_i - p_i)^2", "code": "public static double euclideanDistance(double[] p,double[] q){\n  double ret=0;\n  for (int i=0; i < p.length; i++) {\n    double diff=(q[i] - p[i]);\n    double sq=Math.pow(diff,2);\n    ret+=sq;\n  }\n  return ret;\n}\n"}
{"nl": "Check if the List of Elements contains any TOKENS that have PHONE descendants", "code": "private boolean containsPhoneDescendants(List<Element> tokensAndBoundaries){\n  for (  Element element : tokensAndBoundaries) {\n    if (element.getTagName().equals(MaryXML.TOKEN) && element.getElementsByTagName(MaryXML.PHONE).getLength() > 0) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  String[] methods=new String[]{ClassificationType.Taxonomy.toString(),\"SEED\",\"KEGG\"};\n  ClusterViewer viewer=getViewer();\n  String data=(String)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set Data\",\"Set Data\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),methods,viewer.getDataType());\n  if (data != null)   execute(\"set networkData=\" + data + \";\");\n}\n"}
{"nl": "get one identity constraint", "code": "public final boolean hasIDConstraints(){\n  return fGlobalIDConstraintDecls.getLength() > 0;\n}\n"}
{"nl": "Creates an AliveTimer for a Process", "code": "public static ControlTagCacheObject createTestProcessAlive(){\n  ControlTagCacheObject cacheObject=new ControlTagCacheObject(new Long(510),\"Test process alive tag\",\"Long\",DataTagConstants.MODE_TEST);\n  cacheObject.setDescription(\"test alive description\");\n  cacheObject.setLogged(false);\n  cacheObject.setUnit(\"seconds since 1970\");\n  cacheObject.setDipAddress(\"testDIPaddress\");\n  cacheObject.setJapcAddress(\"testJAPCaddress\");\n  cacheObject.setValue(new Long(System.currentTimeMillis()));\n  cacheObject.setValueDescription(\"test value description\");\n  cacheObject.setSimulated(false);\n  cacheObject.setMinValue(Long.MIN_VALUE);\n  cacheObject.setMaxValue(Long.MAX_VALUE);\n  cacheObject.setValueDictionary(new DataTagValueDictionary());\n  cacheObject.setAddress(new DataTagAddress());\n  cacheObject.setDataTagQuality(createValidQuality());\n  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));\n  cacheObject.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));\n  cacheObject.setSourceTimestamp(new Timestamp(System.currentTimeMillis()));\n  return cacheObject;\n}\n"}
{"nl": "Disconnects from the telemetry service", "code": "public void disconnect(){\n  socket.disconnect();\n}\n"}
{"nl": "Clear failReferences repository", "code": "private void clearInvestigatedIssues(List<FailReferenceResource> issues){\n  issuesRepository.delete(issues);\n}\n"}
{"nl": "Update versions relevant for Instant Run, and trigger a Gradle sync if successful", "code": "public static boolean updateProjectToInstantRunTools(@NotNull Project project,@Nullable GradleSyncListener listener){\n  String pluginVersion=MINIMUM_GRADLE_PLUGIN_VERSION_STRING;\n  if (GradleVersion.parse(GRADLE_PLUGIN_RECOMMENDED_VERSION).compareTo(MINIMUM_GRADLE_PLUGIN_VERSION) > 0) {\n    pluginVersion=GRADLE_PLUGIN_RECOMMENDED_VERSION;\n  }\n  if (GradleUtil.updateGradlePluginVersion(project,pluginVersion,GRADLE_LATEST_VERSION)) {\n    String buildToolsVersion=\"23.0.2\";\n    AndroidSdkHandler sdk=AndroidSdkUtils.tryToChooseSdkHandler();\n    BuildToolInfo latestBuildTool=sdk.getLatestBuildTool(new StudioLoggerProgressIndicator(InstantRunConfigurable.class),false);\n    if (latestBuildTool != null) {\n      Revision revision=latestBuildTool.getRevision();\n      if (revision.compareTo(Revision.parseRevision(buildToolsVersion)) > 0) {\n        buildToolsVersion=revision.toShortString();\n      }\n    }\n    GradleUtil.setBuildToolsVersion(project,buildToolsVersion);\n    File wrapperPropertiesFile=GradleUtil.findWrapperPropertiesFile(project);\n    if (wrapperPropertiesFile != null) {\n      GradleUtil.updateGradleDistributionUrl(project,wrapperPropertiesFile,GRADLE_LATEST_VERSION);\n    }\n    GradleProjectImporter.getInstance().syncProjectSynchronously(project,true,listener);\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "This method checks all restrictions for appointing rank", "code": "private boolean canAppointRank(Player activePlayer,int targetObjId){\n  Legion legion=activePlayer.getLegion();\n  if (!isBrigadeGeneral(activePlayer)) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MEMBER_RANK_DONT_HAVE_RIGHT);\n    return false;\n  }\n  if (isSelf(activePlayer,targetObjId)) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_MASTER_ERROR_SELF);\n    return false;\n  }\n else   if (!legion.isMember(targetObjId)) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetStreetsByIdQuery(VkApiClient client,UserActor actor,int... streetIds){\n  super(client,\"database.getStreetsById\",Utils.buildParametrizedType(List.class,Street.class));\n  accessToken(actor.getAccessToken());\n  streetIds(streetIds);\n}\n"}
{"nl": "Support for eventually having more than one venue", "code": "@Produces @VenueList @Named(value=\"venueList\") public List<Venue> produceVenues(){\n  final List<Venue> venues=new ArrayList<>();\n  try {\n    venues.add(new VenueJavaOne2016());\n  }\n catch (  final MalformedURLException e) {\n    this.log.log(Level.SEVERE,\"Failed to produce a Venue\",e);\n  }\n  return venues;\n}\n"}
{"nl": "load audio file", "code": "private void loadAudioFile(String file) throws IllegalArgumentException, SecurityException, IllegalStateException, IOException {\n  if (this.isStreaming(file)) {\n    this.player.setDataSource(file);\n    this.player.setAudioStreamType(AudioManager.STREAM_MUSIC);\n    this.setMode(MODE.PLAY);\n    this.setState(STATE.MEDIA_STARTING);\n    this.player.setOnPreparedListener(this);\n    this.player.prepareAsync();\n  }\n else {\n    if (file.startsWith(\"/android_asset/\")) {\n      String f=file.substring(15);\n      android.content.res.AssetFileDescriptor fd=this.handler.cordova.getActivity().getAssets().openFd(f);\n      this.player.setDataSource(fd.getFileDescriptor(),fd.getStartOffset(),fd.getLength());\n    }\n else {\n      File fp=new File(file);\n      if (fp.exists()) {\n        FileInputStream fileInputStream=new FileInputStream(file);\n        this.player.setDataSource(fileInputStream.getFD());\n        fileInputStream.close();\n      }\n else {\n        this.player.setDataSource(Environment.getExternalStorageDirectory().getPath() + \"/\" + file);\n      }\n    }\n    this.setState(STATE.MEDIA_STARTING);\n    this.player.setOnPreparedListener(this);\n    this.player.prepare();\n    this.duration=getDurationInSeconds();\n  }\n}\n"}
{"nl": "An internal method used to copy non-duplicate entries from the temp list into the currentList", "code": "private List<DavaFlowSet<T>> copyDavaFlowSetList(List<DavaFlowSet<T>> currentList,List<DavaFlowSet<T>> temp){\n  Iterator<DavaFlowSet<T>> tempIt=temp.iterator();\n  while (tempIt.hasNext()) {\n    DavaFlowSet<T> check=tempIt.next();\n    Iterator<DavaFlowSet<T>> currentListIt=currentList.iterator();\n    boolean found=false;\n    while (currentListIt.hasNext()) {\n      DavaFlowSet<T> currentSet=currentListIt.next();\n      if (check.equals(currentSet) && check.internalDataMatchesTo(currentSet)) {\n        found=true;\n        break;\n      }\n    }\n    if (!found) {\n      currentList.add(check);\n    }\n  }\n  return currentList;\n}\n"}
{"nl": "Generate the name of a MM entity from the IRI of an OWL individual", "code": "default String individualEntityName(IRI individualIri){\n  return \"e\" + fromIri(individualIri);\n}\n"}
{"nl": "ARMOR SET BUILDER QUERIES", "code": "public ASBSetCursor queryASBSets(){\n  return mHelper.queryASBSets();\n}\n"}
{"nl": "Damages a single entity at the given position", "code": "public void damageEntity(float x,float y,float damage){\n  for (  TexturedEntity entity : entities) {\n    if (entity instanceof LivingEntity && entity.getBounds().overlaps(new Rectangle(x,y,0,0))) {\n      ((LivingEntity)entity).damage(damage);\n      break;\n    }\n  }\n}\n"}
{"nl": "Get the distance to the root for a widget", "code": "private static int rootDistance(ConstraintWidget widget){\n  int rootHeight=widget.getParent().getHeight();\n  int rootWidth=widget.getParent().getWidth();\n  int aX=widget.getX();\n  int aY=widget.getY();\n  int aWidth=widget.getWidth();\n  int aHeight=widget.getHeight();\n  int minx=Math.min(aX,rootWidth - (aX + aWidth));\n  int miny=Math.min(aY,rootHeight - (aY + aHeight));\n  return Math.min(minx,miny);\n}\n"}
{"nl": "Position Tag Adder", "code": "public static void addPosTag(soot.tagkit.Host host,int sc,int ec){\n  host.addTag(new soot.tagkit.SourcePositionTag(sc,ec));\n}\n"}
{"nl": "This method will decrease the current count", "code": "public void decreaseCount(long decreaseCount){\n  if (decreaseCount < count) {\n    this.count=count - decreaseCount;\n  }\n}\n"}
{"nl": "Re-synthesize given vocalization using MLSA (it is same as synthesize())", "code": "@Override public AudioInputStream reSynthesize(int backchannelNumber,AudioFileFormat aft) throws SynthesisException {\n  return synthesize(backchannelNumber,aft);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=none;\");\n}\n"}
{"nl": "Set the text color of the step title", "code": "public Builder stepTitleTextColor(int stepTitleTextColor){\n  this.stepTitleTextColor=stepTitleTextColor;\n  return this;\n}\n"}
{"nl": "Get the output schema for this transformation, given an input schema", "code": "@Override public Schema transform(Schema inputSchema){\n  Schema.Builder newSchema=new Schema.Builder();\n  for (int i=0; i < inputSchema.numColumns(); i++) {\n    if (inputSchema.getType(i) == ColumnType.String) {\n      newSchema.addColumnDouble(inputSchema.getMetaData(i).getName());\n    }\n else     newSchema.addColumn(inputSchema.getMetaData(i));\n  }\n  return newSchema.build();\n}\n"}
{"nl": "Ends the mouse interaction and commit the modifications if any", "code": "@Override public void end(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int modifiers,boolean canceled){\n  super.end(x,y,modifiers,canceled);\n  ConstraintModel model=ConstraintModel.getConstraintModel(myScreenView.getModel());\n  if (canceled) {\n    model.rollbackXml();\n    return;\n  }\n  final int ax=Coordinates.getAndroidX(myScreenView,x);\n  final int ay=Coordinates.getAndroidY(myScreenView,y);\n  DrawConstraintModel drawConstraintModel=ConstraintModel.getDrawConstraintModel(myScreenView);\n  drawConstraintModel.updateModifiers(modifiers);\n  drawConstraintModel.mouseReleased(ax,ay);\n  model.saveToXML(false);\n  myScreenView.getSurface().repaint();\n}\n"}
{"nl": "Process Configuration call", "code": "public void onProcessConfiguration(){\n  LOGGER.info(\"onProcessConfiguration - Configuration\");\n  LOGGER.info(\"{}\",this.processConnectionRequest);\n  String xmlProcessConfigurationResponse=this.supervisionManager.onProcessConfiguration(this.processConfigurationRequest);\n  assertNotNull(xmlProcessConfigurationResponse);\n  LOGGER.info(xmlProcessConfigurationResponse);\n  try {\n    this.processConfigurationResponse=(ProcessConfigurationResponse)this.xmlConverter.fromXml(xmlProcessConfigurationResponse);\n  }\n catch (  Exception e) {\n    LOGGER.error(e.toString());\n  }\n  assertNotNull(this.processConfigurationResponse);\n  LOGGER.info(this.processConfigurationResponse.toString());\n}\n"}
{"nl": "Set the text color of the step subtitle", "code": "public Builder stepSubtitleTextColor(int stepSubtitleTextColor){\n  this.stepSubtitleTextColor=stepSubtitleTextColor;\n  return this;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getLength() > 0;\n}\n"}
{"nl": "Create the next relevant zero-coverage LocusInfo", "code": "private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){\n  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {\n    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {\n      return null;\n    }\n    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);\n    if (nextbit == -1) {\n      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {\n        lastPosition=stopBeforeLocus.getPosition();\n        return null;\n      }\n      lastReferenceSequence++;\n      lastPosition=0;\n    }\n else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {\n      lastPosition=nextbit;\n      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);\n    }\n else     if (nextbit >= stopBeforeLocus.getPosition()) {\n      return null;\n    }\n  }\n  return null;\n}\n"}
{"nl": "Gets whether two values may potentially point to the same runtime object", "code": "public boolean mayAlias(Value val1,Value val2){\n  if (!AccessPath.canContainValue(val1) || !AccessPath.canContainValue(val2))   return false;\n  if (val1 instanceof Constant || val2 instanceof Constant)   return false;\n  if (val1 == val2)   return true;\n  if (aliasingStrategy.isInteractive())   return aliasingStrategy.mayAlias(new AccessPath(val1,false),new AccessPath(val2,false));\n  return false;\n}\n"}
{"nl": "Hide dialog with specific tag", "code": "public static void hideProgressDialog(String tag){\n  if (tag == null)   return;\nsynchronized (sLock) {\n    ProgressDialog dialog=findDialog(tag);\n    if (dialog != null) {\n      if (isAlive(dialog) && dialog.isShowing())       dialog.dismiss();\n      sDialogs.remove(dialog);\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetAlbumByIdQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"video.getAlbumById\",VideoAlbumFull.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n"}
{"nl": "serialize write this object to out length uses zero-compressed encoding", "code": "public void write(DataOutput out) throws IOException {\n  WritableUtils.writeVInt(out,length);\n  out.write(bytes,0,length);\n}\n"}
{"nl": "Returns true if field heartbeatInfo is set (has been assigned a value) and false otherwise", "code": "public boolean isSetHeartbeatInfo(){\n  return this.heartbeatInfo != null;\n}\n"}
{"nl": "Set whether or not to use adaptive ball selection", "code": "public AsyncCatchOptions useSmartSelect(boolean smartSelect){\n  this.smartSelect=smartSelect;\n  return this;\n}\n"}
{"nl": "Cleans the databse from inactive player data", "code": "private void runCleaning(){\n  log.info(\"DatabaseCleaningService: Executing database cleaning\");\n  startTime=System.currentTimeMillis();\n  int periodInDays=CleaningConfig.CLEANING_PERIOD;\n  int SECURITY_MINIMUM_PERIOD=30;\n  if (periodInDays > SECURITY_MINIMUM_PERIOD) {\n    delegateToThreads(CleaningConfig.CLEANING_THREADS,dao.getInactiveAccounts(periodInDays,CleaningConfig.CLEANING_LIMIT));\n    monitoringProcess();\n  }\n else {\n    log.warn(\"The configured days for database cleaning is to low. For security reasons the service will only execute with periods over 30 days!\");\n  }\n}\n"}
{"nl": "Initialise the connector", "code": "@Override public void initialize(ConnectorContext ctx){\n}\n"}
{"nl": "Disonnect from chat server", "code": "public static void onPlayerLogout(Player player){\n  ChatServer.getInstance().sendPlayerLogout(player);\n}\n"}
{"nl": "Shortcut method for drawing a scaled textured rectangle", "code": "private static void drawCustomSizeRect(int xPos,int yPos,int texX,int texY,int width,int height){\n  getGuiHandler().drawModalRectWithCustomSizedTexture(xPos,yPos,texX,texY,width,height,width,height);\n}\n"}
{"nl": "Copies the alarms to shared storage in a separate thread", "code": "public static void installToStorage(Context context){\n  mContext=context;\n  new Thread(runnable).start();\n}\n"}
{"nl": "calculate the values of date[] and the legal range of index of date[]", "code": "private void initial(){\n  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);\n  int monthStart=-1;\n  if (dayOfWeek >= 2 && dayOfWeek <= 7) {\n    monthStart=dayOfWeek - 2;\n  }\n else   if (dayOfWeek == 1) {\n    monthStart=6;\n  }\n  curStartIndex=monthStart;\n  date[monthStart]=1;\n  int daysOfMonth=daysOfCurrentMonth();\n  for (int i=1; i < daysOfMonth; i++) {\n    date[monthStart + i]=i + 1;\n  }\n  curEndIndex=monthStart + daysOfMonth;\n  if (mode == Constant.MODE_SHOW_DATA_OF_THIS_MONTH) {\n    todayIndex=Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + monthStart - 1;\n  }\n else   if (mode == Constant.MODE_CALENDAR) {\n    if (calendar.get(Calendar.YEAR) == Calendar.getInstance().get(Calendar.YEAR) && calendar.get(Calendar.MONTH) == Calendar.getInstance().get(Calendar.MONTH)) {\n      todayIndex=Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + monthStart - 1;\n    }\n else {\n      todayIndex=-1;\n    }\n  }\n}\n"}
{"nl": "ignorm: inverse gain normalization", "code": "public static void ignorm(double c1[],double c2[],int m,double ng){\n  if (ng != 0.0) {\n    double k=Math.pow(c1[0],ng);\n    for (int i=m; i >= 1; i--)     c2[i]=k * c1[i];\n    c2[0]=(k - 1.0) / ng;\n  }\n else {\n    System.arraycopy(c1,1,c2,1,m - 1);\n    c2[0]=Math.log(c1[0]);\n  }\n}\n"}
{"nl": "Function that creates an object proxy and pushes it into the stack", "code": "public static int createProxyObject(int luaState,String implem) throws LuaException {\n  LuaState L=LuaStateFactory.getExistingState(luaState);\nsynchronized (L) {\n    try {\n      if (!(L.isTable(2)))       throw new LuaException(\"Parameter is not a table. Can't create proxy.\");\n      LuaObject luaObj=L.getLuaObject(2);\n      Object proxy=luaObj.createProxy(implem);\n      L.pushJavaObject(proxy);\n    }\n catch (    Exception e) {\n      throw new LuaException(e);\n    }\n    return 1;\n  }\n}\n"}
{"nl": "modify appender file to storage server (by callback)", "code": "public int modify_file1(String appender_file_id,long file_offset,long modify_size,UploadCallback callback) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.modify_file(parts[0],parts[1],file_offset,modify_size,callback);\n}\n"}
{"nl": "auxiliary method that can be used to write auxblocks to RMA3 file", "code": "public void writeAuxBlocks(IOutputWriter writer,Map<String,byte[]> name2AuxData) throws IOException {\n  setCount(name2AuxData.size());\n  for (  String name : name2AuxData.keySet()) {\n    writer.writeString(name);\n    byte[] bytes=name2AuxData.get(name);\n    writer.writeInt(bytes.length);\n    writer.write(bytes,0,bytes.length);\n  }\n}\n"}
{"nl": "Store a fence in the store", "code": "void storeFence(@NonNull StorableFence fence){\n  Set<String> setTmp=mPrefs.getStringSet(mPrefix + FENCE_ID_SET_KEY,null);\n  HashSet<String> fenceIdSet;\n  if (setTmp == null) {\n    fenceIdSet=new HashSet<>();\n  }\n else {\n    fenceIdSet=new HashSet<>(setTmp);\n  }\n  SharedPreferences.Editor editor=mPrefs.edit();\n  editor.putString(mPrefix + fence.getId(),StorableFence.fenceToString(fence));\n  fenceIdSet.add(fence.getId());\n  editor.putStringSet(mPrefix + FENCE_ID_SET_KEY,fenceIdSet);\n  editor.apply();\n}\n"}
{"nl": "sets the file for the historyTableProvider Used when file is changed (updated to a revision)", "code": "private void updateCurrentEdition(){\n  try {\n    getHistoryTableProvider().setRemoteResource((ISVNRemoteFile)SVNWorkspaceRoot.getBaseResourceFor(resource));\n  }\n catch (  TeamException e) {\n    handle(e);\n  }\n}\n"}
{"nl": "Current size of mailbox", "code": "public int size(){\n  return mails.size();\n}\n"}
{"nl": "select the given row", "code": "private void selectRow(int row){\n  spreadsheetView.getSelectionModel().select(row,spreadsheetView.getColumns().get(0));\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"select samples=\");\n  String what=np.getWordMatchesIgnoringCase(\"all none\");\n  np.matchRespectCase(\";\");\n  if (getViewer() instanceof GroupsViewer) {\n    GroupsViewer viewer=(GroupsViewer)getViewer();\n    if (what.equalsIgnoreCase(\"all\"))     viewer.getGroupsPanel().selectAll();\n else     if (what.equals(\"none\"))     viewer.getGroupsPanel().selectNone();\n  }\n}\n"}
{"nl": "Return lists of objects grouped by specified period", "code": "public Map<String,List<ChartObject>> groupByDate(List<ChartObject> input,Period period){\n  HashMap<String,List<ChartObject>> result=new LinkedHashMap<>();\n  Map<String,ChartObject> range=buildRange(input,period);\n  for (  ChartObject anInput : input) {\n    String group=new DateTime(Long.valueOf(anInput.getStartTime())).toString(DATE_PATTERN);\n    ChartObject axisObject=range.get(group);\n    Map<String,String> values=axisObject.getValues();\n    Map<String,String> updated=new HashMap<>();\n    for (    String key : anInput.getValues().keySet()) {\n      updated.put(key,String.valueOf(Double.valueOf(anInput.getValues().get(key)) + Double.valueOf(values.get(key))));\n    }\n    axisObject.setValues(updated);\n    range.put(group,axisObject);\n  }\n  range.keySet().stream().forEach(null);\n  return result;\n}\n"}
{"nl": "Set privacy view", "code": "public PhotosCreateAlbumQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "Stop all scheduled tasks", "code": "public void stopTasks(){\n  if (task != null) {\n    task.cancel(false);\n    task=null;\n  }\n  if (periodicTasks != null) {\n    for (    Future<?> periodicTask : this.periodicTasks) {\n      if (periodicTask != null) {\n        periodicTask.cancel(false);\n        periodicTask=null;\n      }\n    }\n  }\n  stopPeriodicActions();\n}\n"}
{"nl": "Verifies that provided test item issue type is valid, and test item domain object could be processed correctly", "code": "public String verifyTestItemDefinedIssueType(final String type,final Project.Configuration settings){\n  StatisticSubType defined=settings.getByLocator(type);\n  expect(settings.getByLocator(type),notNull()).verify(ISSUE_TYPE_NOT_FOUND,type);\n  return defined.getLocator();\n}\n"}
{"nl": "Hold mouse for certain duration", "code": "public void hold(int mask,int duration) throws InterruptedException {\n  controller.mousePress(mask);\n  if (duration >= 0) {\n    Thread.sleep(duration);\n    controller.mouseRelease(mask);\n  }\n}\n"}
{"nl": "Updates the check / gray state of all parent items", "code": "private void updateParentItems(TreeItem item){\n  if (item != null) {\n    Item[] children=getChildren(item);\n    boolean containsChecked=false;\n    boolean containsUnchecked=false;\n    for (int i=0; i < children.length; i++) {\n      TreeItem curr=(TreeItem)children[i];\n      containsChecked|=curr.getChecked();\n      containsUnchecked|=(!curr.getChecked() || curr.getGrayed());\n    }\n    item.setChecked(containsChecked);\n    item.setGrayed(containsChecked && containsUnchecked);\n    updateParentItems(item.getParentItem());\n  }\n}\n"}
{"nl": "buggy javascript sanitization routine", "code": "private String clean(String name){\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < name.length(); i++) {\n    char ch=name.charAt(i);\nswitch (ch) {\ncase '&':\n      buf.append(\"&amp;\");\n    break;\ndefault :\n  buf.append(ch);\nbreak;\n}\n}\nreturn buf.toString();\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getDataType().equalsIgnoreCase(ClassificationType.Taxonomy.toString());\n}\n"}
{"nl": "Logs a message to the console or logcat", "code": "public static void log(Object message){\n  Gdx.app.log(TAG,String.valueOf(message));\n}\n"}
{"nl": "Checks if the given string is null, empty or contains whitespace only", "code": "public static boolean isEmptyOrBlanks(String string){\n  if (string == null || string.length() == 0) {\n    return true;\n  }\n  for (int i=0; i < string.length(); i++) {\n    char c=string.charAt(i);\n    if (!Character.isWhitespace(c)) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set networkData=\");\n  String dataType=np.getWordMatchesIgnoringCase(ClassificationType.Taxonomy + \" \" + ClassificationType.SEED+ \" \"+ ClassificationType.KEGG+ \" \"+ ClassificationType.COG);\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.setDataType(dataType);\n  viewer.updateDistances();\n}\n"}
{"nl": "to determine which activity we should switch to", "code": "public static void verifyWhichActivityToSwitch(Context mContext,String source,String dest){\n  UserInfoActivity.start(mContext,dest);\n}\n"}
{"nl": "Wrap a real instance into an aliased instance", "code": "public A wrap(T instance){\n  return wrapper.apply(instance);\n}\n"}
{"nl": "End a flight belonging to the logged in pilot", "code": "public static void endFlight(AirMapFlight flight,@Nullable AirMapCallback<AirMapFlight> callback){\n  FlightService.endFlight(flight,callback);\n}\n"}
{"nl": "Shared functions", "code": "private List<List<Sweet>> sortSweets(List<Sweet> messySweets,double colStep){\n  List<List<Sweet>> grid=new ArrayList<>();\n  minHeight=Integer.MAX_VALUE;\n  minWidth=Integer.MAX_VALUE;\n  for (  Sweet sweet : messySweets) {\n    if (sweet.getY() < minHeight) {\n      minHeight=(int)sweet.getY();\n    }\n    if (sweet.getX() < minWidth) {\n      minWidth=(int)sweet.getX();\n    }\n  }\n  fillGrid(messySweets,colStep,grid);\n  return grid;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set networkdata=\" + ClassificationType.SEED + \";\");\n}\n"}
{"nl": "Config handler", "code": "public void configHandler(HandlerLoader handlerLoader){\n}\n"}
{"nl": "Creates a LineString instance from the specified points", "code": "public static LineString lineString(Point first,Point second,Point... morePoints){\n  Point[] points=new Point[2 + morePoints.length];\n  points[0]=Assert.argumentNotNull(first,\"first\");\n  points[1]=Assert.argumentNotNull(second,\"second\");\n  for (int i=0; i < morePoints.length; i++)   points[i + 2]=morePoints[i];\n  return lineString(points);\n}\n"}
{"nl": "Set fields", "code": "public MessagesGetLongPollHistoryQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Decodes certificate", "code": "public static X509Certificate decodeCertificate(String certificate) throws CertificateException {\n  certificate=certificate != null ? certificate.trim() : null;\n  if (certificate != null && (certificate=certificate.trim()).length() > 0) {\n    if (!certificate.startsWith(\"-----BEGIN\")) {\n      String cert_begin=\"-----BEGIN CERTIFICATE-----\\n\";\n      String end_cert=\"\\n-----END CERTIFICATE-----\";\n      certificate=String.format(\"%s%s%s\",cert_begin,certificate,end_cert);\n    }\n    return decodeCertificate(certificate.getBytes());\n  }\n  return null;\n}\n"}
{"nl": "Invoked when a Channel was disconnected from its remote peer", "code": "@Override public void channelDisconnected(ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {\n  log.info(\"Channel disconnected IP: \" + inetAddress.getHostAddress());\n}\n"}
{"nl": "Set the matrix to identity", "code": "public void reset(){\n  MATRIX[MSCALE_X]=1;\n  MATRIX[MSKEW_X]=0;\n  MATRIX[MTRANS_X]=0;\n  MATRIX[MSKEW_Y]=1;\n  MATRIX[MSCALE_Y]=0;\n  MATRIX[MTRANS_Y]=0;\n  MATRIX[MPERSP_0]=0;\n  MATRIX[MPERSP_1]=0;\n  MATRIX[MPERSP_2]=1;\n}\n"}
{"nl": "compute the Shannon-Weaver diversity index in bits", "code": "private static double[] computeShannonWeaver(ClassificationViewer viewer,ProgressListener progressListener) throws IOException, CanceledException {\n  progressListener.setMaximum(2 * viewer.getSelectedNodes().size());\n  progressListener.setProgress(0);\n  int numberOfDatasets=viewer.getDocument().getNumberOfSamples();\n  double[] total=new double[numberOfDatasets];\n  for (  Node v : viewer.getSelectedNodes()) {\n    int[] summarized=viewer.getNodeData(v).getSummarized();\n    for (int i=0; i < summarized.length; i++)     total[i]+=summarized[i];\n    progressListener.incrementProgress();\n  }\n  double[] result=new double[numberOfDatasets];\n  for (int i=0; i < result.length; i++)   result[0]=0d;\n  for (  Node v : viewer.getSelectedNodes()) {\n    int[] summarized=viewer.getNodeData(v).getSummarized();\n    for (int i=0; i < summarized.length; i++) {\n      if (summarized[i] > 0) {\n        double p=summarized[i] / total[i];\n        result[i]+=p * Math.log(p) / LOG2;\n      }\n    }\n    progressListener.incrementProgress();\n  }\n  for (int i=0; i < result.length; i++)   result[i]=-result[i];\n  return result;\n}\n"}
{"nl": "Make a POST call with no params", "code": "public Call post(String url,Callback callback){\n  return post(url,null,callback);\n}\n"}
{"nl": "Creates new form LicensePanel", "code": "public LicensePanel(URL url){\n  this.url=url;\n  initComponents();\n  initAccessibility();\n  try {\n    jEditorPane1.setPage(url);\n  }\n catch (  IOException exc) {\n    LOGGER.throwing(LicensePanel.class.getName(),\"<init>\",exc);\n  }\n}\n"}
{"nl": "Creates an empty macro list", "code": "public MacroList(){\n  this.macrosses=new HashMap<Integer,String>(12);\n}\n"}
{"nl": "perform principal component analysis", "code": "public void principalComponentAnalysis(Vector<Double> data,int rows,int cols,boolean eigen,boolean scale){\n  if (data == null)   throw new NullPointerException(\"Null data\");\n  if (rows < 0 || cols < 0)   throw new IllegalArgumentException(\"Number of rows and cols must be greater than 0\");\n  Matrix dataX=new Matrix(rows,cols);\n  int n=0;\n  for (int i=0; i < rows; i++) {\n    for (int j=0; j < cols; j++)     dataX.set(i,j,data.elementAt(n++));\n  }\n  boolean debug=false;\n  if (eigen)   eigenPCA(dataX,scale,debug);\n else   svdPCA(dataX,scale,debug);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetByIdQuery(VkApiClient client,UserActor actor,List<String> photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  photos(photos);\n}\n"}
{"nl": "Creates a new template for querying the queue", "code": "public OpenSpacesQueueObject newQueueTemplate(String queueName){\n  OpenSpacesQueueObject queueObject=isFifo() ? new OpenSpacesFifoQueueObject() : new OpenSpacesQueueObject();\n  queueObject.setPersistent(isPersistent());\n  queueObject.setEndpointURI(queueName);\n  return queueObject;\n}\n"}
{"nl": "paint the selection rectangle", "code": "public void paintSelection(Graphics g0){\n  Graphics2D g=(Graphics2D)g0;\n  SelectedBlock selectedBlock=getSelectedBlock();\n  if (selectedBlock.isSelected()) {\n    Rectangle2D rect=new Rectangle2D.Double(Math.max(0,getX(selectedBlock.getFirstCol())),0,0,0);\n    rect.add(Math.min(getX(selectedBlock.getLastCol() + 1),getSize().getWidth()),getSize().height);\n    g.setColor(highlightColorSemiTransparent);\n    g.fill(rect);\n    g.setColor(highlightColor);\n    g.draw(rect);\n  }\n}\n"}
{"nl": "End user requests that a well-known 3rd party web application does something useful on its behalf", "code": "public String requestServiceFromThirdPartyWebApp() throws Exception {\n  String url=ConsumerWebAppURL + \"?scope=\" + URLEncoder.encode(EndUserResourceURL,\"UTF-8\");\n  WebTarget target=ClientBuilder.newClient().target(url);\n  Response response=target.request().get();\n  response.close();\n  if (302 != response.getStatus()) {\n    throw new RuntimeException(\"Service request has failed - redirection is expected\");\n  }\n  String authorizationURI=response.getStringHeaders().getFirst(\"Location\");\n  if (authorizationURI == null) {\n    throw new RuntimeException(\"Token authorization URI is missing\");\n  }\n  return authorizationURI;\n}\n"}
{"nl": "Set fields", "code": "public GroupsGetBannedQuery fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Rewrites the given class to a version runnable on the current JDK", "code": "@NotNull public static byte[] rewriteClass(@NotNull byte[] classData,int layoutlibApi){\n  int current=getCurrentClassVersion();\n  return rewriteClass(classData,current,0,layoutlibApi);\n}\n"}
{"nl": "Create an attribute with PSVI information", "code": "@Override public Attr createAttributeNS(String namespaceURI,String qualifiedName) throws DOMException {\n  return new PSVIAttrNSImpl(this,namespaceURI,qualifiedName);\n}\n"}
{"nl": "expands an existing attribute", "code": "public int expandAttribute(String attribute,boolean allowReplaceAttribute){\n  final Set<Object> values=new TreeSet<>();\n  values.addAll(getSamples2Values(attribute).values());\n  final ArrayList<String> newOrder=new ArrayList<>(getAttributeOrder().size() + values.size());\n  newOrder.addAll(getAttributeOrder());\n  int pos=newOrder.indexOf(attribute);\n  int count=0;\n  for (  Object value : values) {\n    final String attributeName=attribute + \":\" + value;\n    if (!getAttributeOrder().contains(attributeName)) {\n      Map<String,Object> samples2values=new HashMap<>();\n      for (      String sample : getSampleOrder()) {\n        samples2values.put(sample,get(sample,attribute).equals(value) ? 1 : 0);\n      }\n      boolean result=addAttribute(attributeName,samples2values,allowReplaceAttribute,false);\n      if (result) {\n        attribute2type.put(attributeName,Type.Integer);\n        count++;\n        newOrder.add(pos + count,attributeName);\n      }\n    }\n  }\n  setAttributeOrder(newOrder);\n  return count;\n}\n"}
{"nl": "Executes a loginServer packet task", "code": "public void executeLsPacket(Runnable pkt){\n  execute(pkt);\n}\n"}
{"nl": "Reads a String version of a Set (should contain only strings) and creates a new Set", "code": "public static Set<String> toSet(String s){\n  Set<String> newSet=new LinkedHashSet<String>();\n  if (s.startsWith(\"[\") && s.endsWith(\"]\")) {\n    s=s.substring(1,s.length() - 1);\n    String[] entries=s.split(\"\\\\,\\\\s\");\n    for (    String entry : entries) {\n      newSet.add(entry);\n    }\n  }\n else {\n    throw new IllegalArgumentException(\"String is not from Set.toString()\");\n  }\n  return newSet;\n}\n"}
{"nl": "Creates the Pathmapping", "code": "public static PathMapping create(Pattern pattern,Path path,Method method){\n  PathMapping e=new PathMapping();\n  e.pattern=pattern;\n  e.path=path;\n  e.method=method;\n  return e;\n}\n"}
{"nl": "string representation of interval, used for TextGrid output", "code": "@Override public String toString(){\n  StringBuilder str=new StringBuilder();\n  str.append(\"xmin = \" + getXmin() + \" \\n\");\n  str.append(\"xmax = \" + getXmax() + \" \\n\");\n  str.append(\"text = \\\"\" + getText() + \"\\\" \\n\");\n  return str.toString();\n}\n"}
{"nl": "ensure element stack capacity", "code": "void ensureStackCapacity(){\n  if (fElementDepth == fElemDeclStack.length) {\n    int newSize=fElementDepth + INC_STACK_SIZE;\n    boolean[] newArrayB=new boolean[newSize];\n    System.arraycopy(fSubElementStack,0,newArrayB,0,fElementDepth);\n    fSubElementStack=newArrayB;\n    XSElementDecl[] newArrayE=new XSElementDecl[newSize];\n    System.arraycopy(fElemDeclStack,0,newArrayE,0,fElementDepth);\n    fElemDeclStack=newArrayE;\n    newArrayB=new boolean[newSize];\n    System.arraycopy(fNilStack,0,newArrayB,0,fElementDepth);\n    fNilStack=newArrayB;\n    XSNotationDecl[] newArrayN=new XSNotationDecl[newSize];\n    System.arraycopy(fNotationStack,0,newArrayN,0,fElementDepth);\n    fNotationStack=newArrayN;\n    XSTypeDefinition[] newArrayT=new XSTypeDefinition[newSize];\n    System.arraycopy(fTypeStack,0,newArrayT,0,fElementDepth);\n    fTypeStack=newArrayT;\n    XSCMValidator[] newArrayC=new XSCMValidator[newSize];\n    System.arraycopy(fCMStack,0,newArrayC,0,fElementDepth);\n    fCMStack=newArrayC;\n    newArrayB=new boolean[newSize];\n    System.arraycopy(fSawTextStack,0,newArrayB,0,fElementDepth);\n    fSawTextStack=newArrayB;\n    newArrayB=new boolean[newSize];\n    System.arraycopy(fStringContent,0,newArrayB,0,fElementDepth);\n    fStringContent=newArrayB;\n    newArrayB=new boolean[newSize];\n    System.arraycopy(fStrictAssessStack,0,newArrayB,0,fElementDepth);\n    fStrictAssessStack=newArrayB;\n    int[][] newArrayIA=new int[newSize][];\n    System.arraycopy(fCMStateStack,0,newArrayIA,0,fElementDepth);\n    fCMStateStack=newArrayIA;\n  }\n}\n"}
{"nl": "constructs a long file putter using the given file and limit", "code": "public LongFilePutter(File file,long limit) throws IOException {\n  this(file,limit,false);\n}\n"}
{"nl": "Right click with certain delay", "code": "public void rightClick(int delay) throws InterruptedException {\n  click(InputEvent.BUTTON3_MASK,delay);\n}\n"}
{"nl": "Marks a node as failed", "code": "public void requestSetFailedNode(int nodeId){\n  enqueue(new ReplaceFailedNodeMessageClass().doRequest(nodeId));\n}\n"}
{"nl": "Exact (caching) recursive implementation to test against", "code": "private long binomialCoefficient(int n,int k) throws MathRuntimeException {\n  if (binomialCache.size() > n) {\n    Long cachedResult=binomialCache.get(n).get(Integer.valueOf(k));\n    if (cachedResult != null) {\n      return cachedResult.longValue();\n    }\n  }\n  long result=-1;\n  if ((n == k) || (k == 0)) {\n    result=1;\n  }\n else   if ((k == 1) || (k == n - 1)) {\n    result=n;\n  }\n else {\n    if (k < n - 100) {\n      binomialCoefficient(n - 100,k);\n    }\n    if (k > 100) {\n      binomialCoefficient(n - 100,k - 100);\n    }\n    result=ArithmeticUtils.addAndCheck(binomialCoefficient(n - 1,k - 1),binomialCoefficient(n - 1,k));\n  }\n  if (result == -1) {\n    throw new MathRuntimeException(LocalizedCoreFormats.ARITHMETIC_EXCEPTION);\n  }\n  for (int i=binomialCache.size(); i < n + 1; i++) {\n    binomialCache.add(new HashMap<Integer,Long>());\n  }\n  binomialCache.get(n).put(Integer.valueOf(k),Long.valueOf(result));\n  return result;\n}\n"}
{"nl": "establishes parent-child (if there is one) relation between this and aq query the relation expresses the relative level of specificity between queries with the parent being more specific", "code": "public void establishRelation(AtomicQuery aq){\n  Atomic aqAtom=aq.getAtom();\n  if (atom.getTypeId().equals(aqAtom.getTypeId())) {\n    if (atom.isRelation() && aqAtom.getRoleVarTypeMap().size() > atom.getRoleVarTypeMap().size())     aq.addChild(this);\n else     this.addChild(aq);\n  }\n}\n"}
{"nl": "currently blinking?", "code": "public boolean isAnimate(){\n  return animate;\n}\n"}
{"nl": "WYPORIUM TRADE DATA QUERIES", "code": "public WyporiumTradeCursor queryWyporiumTrades(){\n  return mHelper.queryWyporiumTrades();\n}\n"}
{"nl": "Handles the Tag Configuration Requests", "code": "Collection<? extends ClientRequestResult> handleTagConfigurationRequest(final ClientRequest tagConfigurationRequest){\n  final Collection<TagConfig> transferTags=new ArrayList<TagConfig>(tagConfigurationRequest.getIds().size());\n  for (  Long tagId : tagConfigurationRequest.getIds()) {\n    if (tagLocationService.isInTagCache(tagId)) {\n      final TagWithAlarms tagWithAlarms=tagFacadeGateway.getTagWithAlarms(tagId);\n      HashSet<Process> tagProcesses=new HashSet<Process>();\n      for (      Long procId : tagWithAlarms.getTag().getProcessIds()) {\n        tagProcesses.add(processCache.get(procId));\n      }\nswitch (tagConfigurationRequest.getResultType()) {\ncase TRANSFER_TAG_CONFIGURATION_LIST:\n        transferTags.add(TransferObjectFactory.createTagConfiguration(tagWithAlarms,tagProcesses));\n      break;\ndefault :\n    LOG.error(\"handleConfigurationRequest() - Could not generate response message. Unknown enum ResultType \" + tagConfigurationRequest.getResultType());\n}\n}\n else {\nLOG.warn(\"handleConfigurationRequest() - Received client request (TagConfigRequest) for unrecognized Tag with id \" + tagId);\n}\n}\nif (LOG.isDebugEnabled()) {\nLOG.debug(\"handleConfigurationRequest() - Finished processing Tag request (with config info): returning \" + transferTags.size() + \" Tags\");\n}\nreturn transferTags;\n}\n"}
{"nl": "Comment id", "code": "protected MarketEditCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n"}
{"nl": "Initializes class data", "code": "private void initData(Context context){\n  gestureDetector=new GestureDetector(context,gestureListener);\n  gestureDetector.setIsLongpressEnabled(false);\n  LABEL_OFFSET=DensityUtil.dip2px(context,LABEL_OFFSET_DIP);\n  scroller=new Scroller(context);\n}\n"}
{"nl": "store the input stream to the repo, and return id", "code": "public static String store(String name,InputStream in) throws IOException {\n  String id=id();\n  store(X.EMPTY,id,name,X.EMPTY,0,in.available(),in,-1,true,-1);\n  return id;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public static boolean isSingleField(String skeleton){\n  char first=skeleton.charAt(0);\n  for (int i=1; i < skeleton.length(); i++) {\n    if (skeleton.charAt(i) != first)     return false;\n  }\n  return true;\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapStatusAdvisoryRule && getId().equals(((AirMapStatusAdvisoryRule)o).getId());\n}\n"}
{"nl": "Return photos in reverse chronological order", "code": "public PhotosGetQueryWithExtended rev(Boolean value){\n  return unsafeParam(\"rev\",value);\n}\n"}
{"nl": "loads the named files and setups up the given classification (if not already present)", "code": "public static Classification load(String name,String treeFile,String mapFile,ProgressListener progress){\nsynchronized (name2classification) {\n    Classification classification=name2classification.get(name);\n    if (classification == null) {\n      classification=new Classification(name);\n      name2classification.put(name,classification);\n    }\n    classification.load(treeFile,mapFile,progress);\n    return classification;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallCreateCommentQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.createComment\",CreateCommentResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n"}
{"nl": "return indication if the template is exclusive read-lock operation", "code": "public boolean isExclusiveReadLockOperation(){\n  return ((_templateOperation == SpaceOperations.READ || _templateOperation == SpaceOperations.READ_IE) && ReadModifiers.isExclusiveReadLock(_operationModifiers) && getXidOriginatedTransaction() != null);\n}\n"}
{"nl": "Automatically saves settings", "code": "public void putSettingsValue(String key,Object value){\n  try {\n    JSONObject settingsObject=readSettings();\n    if (value instanceof Integer) {\n      settingsObject.put(key,(int)value);\n    }\n else     if (value instanceof Boolean) {\n      settingsObject.put(key,(boolean)value);\n    }\n else     if (value instanceof String) {\n      settingsObject.put(key,value);\n    }\n else     if (value instanceof Pair) {\n      String pairKey=(String)((Pair)value).first;\n      String pairValue=(String)((Pair)value).second;\n      JSONObject streamForItem=new JSONObject();\n      JSONArray streamsArray=settingsObject.has(key) ? settingsObject.getJSONArray(key) : new JSONArray();\n      JSONArray newStreamsArray=new JSONArray();\n      streamForItem.put(pairKey,pairValue);\n      for (int i=0; i < streamsArray.length(); i++) {\n        if (!streamsArray.getJSONObject(i).has(pairKey)) {\n          newStreamsArray.put(streamsArray.getJSONObject(i));\n        }\n      }\n      newStreamsArray.put(streamForItem);\n      settingsObject.put(key,newStreamsArray);\n    }\n    saveSettings(settingsObject);\n  }\n catch (  JSONException e) {\n    Logger.printInfo(TAG,\"Can't put value for key: \" + key + \" to json settings\");\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),\"Choose label color\",null);\n  if (color != null)   execute(\"set labelColor=\" + color.getRed() + \" \"+ color.getGreen()+ \" \"+ color.getBlue()+ \";\");\n}\n"}
{"nl": "Fills  matrix with value", "code": "public static void fill(Matrix a,double value){\n  for (int i=0; i < a.rows; i++) {\n    for (int j=0; j < a.cols; j++) {\n      a.set(i,j,value);\n    }\n  }\n}\n"}
{"nl": "Play the animations in our set", "code": "@Override public void onPaint(ViewTransform transform,Graphics2D g){\n  for (  Animation animation : mAnimations) {\n    animation.setProgress(getProgress());\n    animation.onPaint(transform,g);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveGetPhotosQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getPhotos\",GetPhotosResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Npc starts dancing iu 4", "code": "public static final void emoteStartDancing4(Npc owner){\n  owner.unsetState(CreatureState.NPC_IDLE);\n  owner.setState(CreatureState.ACTIVE);\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,19,0));\n}\n"}
{"nl": "Writes the given packet to the buffer", "code": "@Override public void write(PacketBuffer buf,Packet packet){\n  buf.writeInt(getID(packet.spec));\n}\n"}
{"nl": "Convert a record to an ndarray", "code": "public static INDArray toArray(Collection<Writable> record){\n  return toArray(record,record.size());\n}\n"}
{"nl": "Retrieve local file path for an arbitrary Uri", "code": "public static String determineOriginalFile(Context context,Uri uri){\n  String originalFile=null;\n  if (uri != null) {\n    if (uri.getScheme().startsWith(\"content\")) {\n      originalFile=getPathFromUri(context,uri);\n    }\n    if (uri.toString().matches(\"https?://\\\\w+\\\\.googleusercontent\\\\.com/.+\")) {\n      originalFile=uri.toString();\n    }\n    if (uri.getScheme().startsWith(\"file\")) {\n      originalFile=uri.toString().substring(7);\n    }\n    if (isNullOrEmpty(originalFile)) {\n      throw new IllegalArgumentException(\"File path was null\");\n    }\n  }\n else {\n    throw new IllegalArgumentException(\"Image Uri was null!\");\n  }\n  return originalFile;\n}\n"}
{"nl": "resets the circle-colors array and creates a new one", "code": "public void resetCircleColors(){\n  if (mCircleColors == null) {\n    mCircleColors=new ArrayList<>();\n  }\n  mCircleColors.clear();\n}\n"}
{"nl": "/*    ", "code": "@deprecated public final void reset(int start,int count) throws IllegalArgumentException {\n  int len=0;\n  if (this.text != null) {\n    len=this.text.length;\n  }\n  if ((start < 0) || (count < 0) || (start > len - count)) {\n    throw new IllegalArgumentException();\n  }\n  this.textStart=start;\n  this.textLimit=(start + count);\n  reset();\n}\n"}
{"nl": "Will deactivate toggle skill and stop checking task", "code": "private void deactivateToggleSkill(){\n  PacketSendUtility.sendPacket((Player)effector,new SM_SKILL_ACTIVATION(getSkillId(),false));\n}\n"}
{"nl": "Verify that the text message the pilot received was the correct one", "code": "public static void verifyPhoneToken(String token,@Nullable AirMapCallback<Void> callback){\n  PilotService.verifyToken(token,callback);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set colorMismatchesVsReference=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Builds the PanOptions new instance", "code": "public PanOptions build(){\n  PanOptions options=new PanOptions();\n  options.animate=this.animate;\n  options.duration=this.duration;\n  options.easeLinearity=this.easeLinearity;\n  options.noMoveStart=this.noMoveStart;\n  return options;\n}\n"}
{"nl": "An aggregate that combines several aggregates together into a map (where keys are the names of the aggregates)", "code": "public static <S,T>Aggregate<S,Map<String,T>> select(ImmutableSet<NamedAggregate<? super S,? extends T>> aggregates){\n  return new SelectAggregate<>(aggregates);\n}\n"}
{"nl": "measure height", "code": "private int measureHeightSize(int measureSpec){\n  int defSize=dp2px(DEFAULT_HEIGHT);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int result=0;\nswitch (specMode) {\ncase MeasureSpec.UNSPECIFIED:\ncase MeasureSpec.AT_MOST:\n    result=Math.min(defSize,specSize);\n  break;\ncase MeasureSpec.EXACTLY:\nresult=specSize;\nbreak;\n}\nreturn result;\n}\n"}
{"nl": "int convert to buff (big-endian)", "code": "public static byte[] int2buff(int n){\n  byte[] bs;\n  bs=new byte[4];\n  bs[0]=(byte)((n >> 24) & 0xFF);\n  bs[1]=(byte)((n >> 16) & 0xFF);\n  bs[2]=(byte)((n >> 8) & 0xFF);\n  bs[3]=(byte)(n & 0xFF);\n  return bs;\n}\n"}
{"nl": "length of array (file length / 4)", "code": "@Override public long limit(){\n  return fileLength >>> 2;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set dir=\");\n  String result=np.getAbsoluteFileName();\n  np.matchIgnoreCase(\";\");\n  if (!(new File(result)).isDirectory()) {\n    System.err.println(\"No such directory: \" + result);\n  }\n else {\n    System.setProperty(\"user.dir\",result);\n    System.err.println(\"user.dir set to: \" + result);\n  }\n}\n"}
{"nl": "example of request, which load main data for screen", "code": "private void tryLoadData(){\n  if (fullBookModel != null) {\n    onLoadDataSuccess(fullBookModel);\n  }\n else   if (isSubscriptionInactive(loadFullBookSubscription)) {\n    getView().showLoading();\n    loadData();\n  }\n else {\n    getView().showLoading();\n  }\n}\n"}
{"nl": "Set filter", "code": "public AppsGetCatalogQuery filter(AppsGetCatalogFilter value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "Save a facility report for unit", "code": "@RequestMapping(method=RequestMethod.POST,value=\"{clientVersion}/orgUnits/{id}/dataSets\") @ResponseBody public String saveDataSetValues(@PathVariable int id,@RequestBody DataSetValue dataSetValue) throws NotAllowedException {\n  facilityReportingService.saveDataSetValues(getUnit(id),dataSetValue);\n  return DATASET_REPORT_UPLOADED;\n}\n"}
{"nl": "inject some data from target to data", "code": "public static void injectToData(Object target,Bundle data){\n  if (target == null || data == null)   return;\n  ParcelInjector injector;\n  try {\n    injector=getInjectorByClass(target.getClass());\n    injector.injectDataToBundle(target,data);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(String.format(\"inject failed : %s\",e.getMessage()),e);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetAllQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAll\",GetAllExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "Puts date in date field", "code": "public ReplicateLaterWindow fillDay(String date){\n  dateField.sendKeys(date);\n  return this;\n}\n"}
{"nl": "computes the id2data map", "code": "public void computeId2Data(int numberOfDatasets,Map<Integer,Integer[]> id2counts,Map<Integer,NodeData> id2data){\n  id2data.clear();\n  if (id2counts != null) {\n    if (ClassificationManager.isTaxonomy(getName()))     computeTaxonomyId2DataRec(numberOfDatasets,getRoot(),id2counts,id2data);\n else     computeId2DataRec(numberOfDatasets,getRoot(),id2counts,new HashMap<Integer,Set<Integer>>(),id2data);\n  }\n}\n"}
{"nl": "Return a tap target for the specified bounds", "code": "public static TapTarget forBounds(Rect bounds,CharSequence title,@Nullable CharSequence description){\n  return new TapTarget(bounds,title,description);\n}\n"}
{"nl": "long file getter in memory", "code": "public LongFileGetterInMemory(File file) throws IOException {\n  limit=file.length() / 8;\n  data=new long[(int)((limit >>> BITS)) + 1][];\n  final int length0=(1 << BITS);\n  for (int i=0; i < data.length; i++) {\n    int length=(i < data.length - 1 ? length0 : (int)(limit & BIT_MASK) + 1);\n    data[i]=new long[length];\n  }\n  try (BufferedInputStream ins=new BufferedInputStream(new FileInputStream(file));ProgressPercentage progress=new ProgressPercentage(\"Reading file: \" + file,limit)){\n    int whichArray=0;\n    int indexInArray=0;\n    for (long index=0; index < limit; index++) {\n      data[whichArray][indexInArray]=(((long)ins.read()) << 56) | (((long)ins.read()) << 48) | (((long)ins.read()) << 40)| (((long)ins.read()) << 32)| (((long)ins.read()) << 24)| (((long)ins.read() & 0xFF) << 16)| (((long)ins.read() & 0xFF) << 8)| (((long)ins.read() & 0xFF));\n      if (++indexInArray == length0) {\n        whichArray++;\n        indexInArray=0;\n      }\n      progress.setProgress(index);\n    }\n  }\n }\n"}
{"nl": "Allows to write a user in the database", "code": "public Single<Void> writeUserInDatabase(final String _userId,final String _name){\n  User user=new User(_name);\n  DatabaseReference targetChild=this.firebaseDatabase.getReference().child(FIREBASE_CHILD_KEY_USERS).child(_userId);\n  return observeSingleValue(targetChild.setValue(user));\n}\n"}
{"nl": "Allow to copy the object", "code": "public Object clone(){\n  Object newObject=null;\n  try {\n    newObject=super.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    e.printStackTrace();\n  }\n  return newObject;\n}\n"}
{"nl": "Process Connection call", "code": "public void onProcessConnection(){\n  LOGGER.info(\"onProcessConnection - Connection\");\n  LOGGER.info(\"{}\",this.processConnectionRequest);\n  String xmlprocessConnectionResponse=this.supervisionManager.onProcessConnection(this.processConnectionRequest);\n  assertNotNull(xmlprocessConnectionResponse);\n  LOGGER.info(xmlprocessConnectionResponse);\n  try {\n    this.processConnectionResponse=(ProcessConnectionResponse)this.xmlConverter.fromXml(xmlprocessConnectionResponse);\n  }\n catch (  Exception e) {\n    LOGGER.error(e.toString());\n  }\n  assertNotNull(this.processConnectionResponse);\n  LOGGER.info(this.processConnectionResponse.toString());\n}\n"}
{"nl": "Return a new empty iterable", "code": "public static <T>Iterable<T> Iterable(){\n  return null;\n}\n"}
{"nl": "Dismiss this view", "code": "public void dismiss(boolean tappedTarget){\n  pulseAnimation.cancel();\n  expandAnimation.cancel();\n  if (tappedTarget) {\n    dismissConfirmAnimation.start();\n  }\n else {\n    dismissAnimation.start();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsSaveQuery(VkApiClient client,Actor actor,String file){\n  super(client,\"docs.save\",Doc.class);\n  accessToken(actor.getAccessToken());\n  file(file);\n}\n"}
{"nl": "put all values", "code": "public void putAll(Table<R,C,V> table){\n  for (  R rowKey : table.rowKeySet()) {\n    Map<C,V> row=table.row(rowKey);\n    for (    C columnKey : row.keySet()) {\n      put(rowKey,columnKey,row.get(columnKey));\n    }\n  }\n}\n"}
{"nl": "Open the swipe function of the Item?", "code": "public boolean isSwipeEnable(){\n  return swipeEnable;\n}\n"}
{"nl": "Main method demonstrating how to use the pretty-printer", "code": "public static void main(String[] args){\n  byte[] json=\"{\\\"name\\\":\\\"Elvis\\\"}\".getBytes(StandardCharsets.UTF_8);\n  JsonParser parser=new JsonParser();\n  PrettyPrinter prettyPrinter=new PrettyPrinter();\n  int i=0;\n  int event;\n  do {\n    while ((event=parser.nextEvent()) == JsonEvent.NEED_MORE_INPUT) {\n      i+=parser.getFeeder().feed(json,i,json.length - i);\n      if (i == json.length) {\n        parser.getFeeder().done();\n      }\n    }\n    prettyPrinter.onEvent(event,parser);\n  }\n while (event != JsonEvent.EOF);\n  System.out.println(prettyPrinter.getResult());\n}\n"}
{"nl": "Initialize the toolbar in the layout", "code": "@Override protected void initToolbar(Bundle savedInstanceState){\n}\n"}
{"nl": "creates an assignment algorithm", "code": "@Override public IAssignmentAlgorithm createAssignmentAlgorithm(){\n  return new AssignmentUsingLCA(cName);\n}\n"}
{"nl": "Are we receiving XML data?", "code": "protected boolean isXml(HttpServletRequest request){\n  String type=request.getContentType();\n  type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;\n  if (request.getPathInfo().endsWith(\".xml\")) {\n    type=MediaType.APPLICATION_XML_VALUE;\n  }\n  return isCompatibleWith(type,MediaType.APPLICATION_XML);\n}\n"}
{"nl": "This method checks all restrictions for leaving", "code": "private boolean canLeave(Player activePlayer){\n  if (isBrigadeGeneral(activePlayer)) {\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_LEAVE_MASTER_CANT_LEAVE_BEFORE_CHANGE_MASTER);\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Make a POST call with params", "code": "public Call post(String url,Map<String,String> params,Callback callback){\n  Request request=new Builder().url(url).post(bodyFromMap(params)).tag(url).build();\n  Call call=client.newCall(request);\n  call.enqueue(callback);\n  return call;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetByIdQueryWithExtended(VkApiClient client,List<String> posts){\n  super(client,\"wall.getById\",GetByIdExtendedResponse.class);\n  posts(posts);\n  extended(true);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showGroups=\" + (!isSelected()) + \" style=convexHulls;\");\n}\n"}
{"nl": "Player enemies:<br> - different race<br> - duel partner<br> - in pvp zone - in ffa zone", "code": "@Override public boolean isEnemyFrom(Player enemy){\n  if (this.getObjectId() == enemy.getObjectId()) {\n    return false;\n  }\n else   if ((this.getAdminEnmity() > 1 || enemy.getAdminEnmity() > 1)) {\n    return false;\n  }\n else   if (canPvP(enemy) || this.getController().isDueling(enemy)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Returns true if the specified key event maps to one of the 4 keyboard arrows (non-numeric keypad)", "code": "public static boolean isArrowKey(KeyEvent e){\n  int code=e.getKeyCode();\n  return code >= KeyEvent.VK_LEFT && code <= KeyEvent.VK_DOWN;\n}\n"}
{"nl": "run the MDS code", "code": "private void runPCoA(final PCoA pcoa) throws CanceledException {\n  ProgressListener progressListener=clusterViewer.getDir().getDocument().getProgressListener();\n  if (progressListener == null)   progressListener=new ProgressSilent();\n  pcoa.calculateClassicMDS(progressListener);\n}\n"}
{"nl": "Adds a new service to the manifest", "code": "public void addService(AXmlNode node){\n  if (services.isEmpty())   services=new ArrayList<AXmlNode>();\n  services.add(node);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static boolean isCanonical(String id){\n  return canonicalize(id).equals(id);\n}\n"}
{"nl": "Builds an event bus with the given dispatcher that will function on the main loop", "code": "public static FilteringEventBus buildFilteringEventBusOnMainLoop(EventDispatcher eventDispatcher){\n  FilteringEventBus b=new FilteringEventBus(new DelegatingEventDispatcher(eventDispatcher,mainLoopDispatcher));\n  b.start();\n  return b;\n}\n"}
{"nl": "Adds an association node and endpoint", "code": "public void addAssociation(int node,int endpoint){\n  if (isAssociated(node,endpoint)) {\n    return;\n  }\n  ZWaveAssociation newAssociation=new ZWaveAssociation(node,endpoint);\n  associations.add(newAssociation);\n}\n"}
{"nl": "This call the intent to selected the picture", "code": "public boolean selectedFragmentPicture(){\n  Intent intent=new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n  intent.setType(\"image/*\");\n  if (intent.resolveActivity(this.activity.getPackageManager()) != null) {\n    this.intentFragment=intent;\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Creates a reference to an object in the variable globalName", "code": "protected LuaObject(LuaState L,String globalName){\nsynchronized (L) {\n    this.L=L;\n    L.getGlobal(globalName);\n    registerValue(-1);\n    L.pop(1);\n  }\n}\n"}
{"nl": "Makes a new track object", "code": "@Override public Track apply(String name){\n  return new Track(name);\n}\n"}
{"nl": "Makes a call to get the number of clusters, if it is > 0 then we assume the setup has already been done and we skip it", "code": "private boolean isAlreadySetup(RetrieveAndRank service){\n  SolrClusters clusters=service.getSolrClusters().execute();\n  return clusters.getSolrClusters().size() > 0 ? true : false;\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext() throws IOException {\n  return positionInList < list.size();\n}\n"}
{"nl": "arg ::= IDENTIFIER ['=' nontupleexpr]", "code": "private void parseFunctionParameter(){\n  PsiBuilder.Marker marker=builder.mark();\n  if (matches(TokenKind.STAR_STAR)) {\n    expectIdentifier(\"invalid parameter name\");\n    marker.done(BuildElementTypes.PARAM_STAR_STAR);\n    return;\n  }\n  if (matches(TokenKind.STAR)) {\n    if (atToken(TokenKind.IDENTIFIER)) {\n      builder.advanceLexer();\n    }\n    marker.done(BuildElementTypes.PARAM_STAR);\n    return;\n  }\n  expectIdentifier(\"invalid parameter name\");\n  if (matches(TokenKind.EQUALS)) {\n    parseNonTupleExpression();\n    marker.done(BuildElementTypes.PARAM_OPTIONAL);\n    return;\n  }\n  marker.done(BuildElementTypes.PARAM_MANDATORY);\n}\n"}
{"nl": "Decipher the given byte-array with Blowfish cipher", "code": "public void decipher(byte[] data,int offset,int length){\n  int blocks=length >> 3;\n  int p;\n  for (int k=0; k < blocks; k++) {\n    p=offset + (k << 3);\n    int lb=byteArrayToInteger(data,p);\n    int rb=byteArrayToInteger(data,p + 4);\n    int tmp;\n    for (int i=17; i > 1; i--) {\n      lb=lb ^ pArray[i];\n      rb=F(lb) ^ rb;\n      tmp=lb;\n      lb=rb;\n      rb=tmp;\n    }\n    tmp=lb;\n    lb=rb;\n    rb=tmp;\n    rb^=pArray[1];\n    lb^=pArray[0];\n    integerToByteArray(lb,data,p);\n    integerToByteArray(rb,data,p + 4);\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getReference() != null && viewer.getAlignment().getReference().getLength() > 0;\n}\n"}
{"nl": "DEBUG method to check if noise texture is ok", "code": "public void noiseTexture(Framebuffer target){\n  copy(mNoiseTexture,target);\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  LoadBalancingPolicy.LoadBalancingPolicyDescription copy=(LoadBalancingPolicy.LoadBalancingPolicyDescription)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(empty,copy));\n}\n"}
{"nl": "Instantiates the given template file into the given output file (running the freemarker engine over it)", "code": "@Override public void instantiate(@NotNull File from,@NotNull File to) throws TemplateProcessingException {\n  try {\n    boolean isDirectory=from.getName().indexOf('.') == -1;\n    if (isDirectory) {\n      copyTemplateResource(from,to);\n    }\n else {\n      File sourceFile=myContext.getLoader().getSourceFile(from);\n      File targetFile=getTargetFile(to);\n      String content=processFreemarkerTemplate(myContext,sourceFile,null);\n      if (targetFile.exists()) {\n        if (!compareTextFile(targetFile,content)) {\n          addFileAlreadyExistWarning(targetFile);\n        }\n      }\n else {\n        myIO.writeFile(this,content,targetFile);\n        myReferences.addSourceFile(sourceFile);\n        myReferences.addTargetFile(targetFile);\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "Returns true if field sendTime is set (has been assigned a value) and false otherwise", "code": "public boolean isSetSendTime(){\n  return __isset_bit_vector.get(__SENDTIME_ISSET_ID);\n}\n"}
{"nl": "Compute the goodness-of-fit between given unit and given target for a given feature", "code": "public double featureCost(Target target,Unit unit,String featureName){\n  return featureCost(target,unit,featureName,featureDefinition,weightFunction);\n}\n"}
{"nl": "Show specific mark on top of player", "code": "public static void showBrand(Player player,int targetObjId,int brandId){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new ShowBrandEvent<PlayerAlliance>(alliance,targetObjId,brandId));\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetRejectionReasonQuery(VkApiClient client,UserActor actor,int accountId,int adId){\n  super(client,\"ads.getRejectionReason\",RejectReason.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  adId(adId);\n}\n"}
{"nl": "not implemented", "code": "public void remove(){\n}\n"}
{"nl": "Add non-stackable item to inventory", "code": "private static long addNonStackableItem(Player player,ItemTemplate itemTemplate,long count,Item sourceItem,ItemUpdatePredicate predicate){\n  Storage inventory=player.getInventory();\n  while (!inventory.isFull(itemTemplate.getExtraInventoryId()) && count > 0) {\n    Item newItem=ItemFactory.newItem(itemTemplate.getTemplateId());\n    if (newItem.getExpireTime() != 0) {\n      ExpireTimerTask.getInstance().addTask(newItem,player);\n    }\n    if (sourceItem != null) {\n      copyItemInfo(sourceItem,newItem);\n    }\n    predicate.changeItem(newItem);\n    inventory.add(newItem,predicate.getAddType());\n    count--;\n  }\n  return count;\n}\n"}
{"nl": "Notifies the user whenever the list has changed", "code": "@ObjectiveCName(\"subscribe:\") public List subscribe(ListChangedListener listChangedListener){\n  return this.subscribe(listChangedListener,false);\n}\n"}
{"nl": "Return a new AnyVal that matches the given head of a list and any tail of a list", "code": "static <T>AnyVal<Object> headAnyTail(T head,AnyVal<? extends List<? extends T>> tail){\n  return new AnyConsImpl(head,null,null,tail);\n}\n"}
{"nl": "Executes the query", "code": "public List<Contentlet> executeSafe(){\n  try {\n    return APILocator.getContentletAPI().search(query.toString(),this.limit,this.offset,this.sortBy,APILocator.getUserAPI().getSystemUser(),false);\n  }\n catch (  DotDataException|DotSecurityException e) {\n    Logger.warn(this,\"Exception while executing query\",e);\n  }\n  return new ArrayList<Contentlet>();\n}\n"}
{"nl": "close the named service", "code": "public boolean closeRemoteService(String url){\n  url=url.replace(\".*://\",\"\");\n  for (int i=0; i < tabbedPane.getTabCount(); i++) {\n    if (tabbedPane.getComponentAt(i) instanceof ServicePanel) {\n      final ServicePanel panel=(ServicePanel)tabbedPane.getComponentAt(i);\n      if (panel.getService().getServerURL().equalsIgnoreCase(url)) {\n{\n          RemoteServiceManager.removeNode(url);\n          tabbedPane.remove(panel);\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n"}
{"nl": "Rebound the request parameters to response", "code": "final public int rebound(String... names){\n  int count=0;\n  if (names != null && names.length > 0) {\n    for (    String name : names) {\n      set(name,this.getString(name));\n      count++;\n    }\n  }\n else {\n    for (    String name : this.getNames()) {\n      set(name,this.getString(name));\n      count++;\n    }\n  }\n  return count;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public AlphabeticIndex(ULocale locale,RuleBasedCollator collator,UnicodeSet exemplarChars){\n  this.hasPinyin=false;\n  this.collatorOriginal=(collator != null ? collator : (RuleBasedCollator)Collator.getInstance(locale));\n  try {\n    this.collatorPrimaryOnly=((RuleBasedCollator)this.collatorOriginal.clone());\n  }\n catch (  Exception e) {\n    throw new IllegalStateException(\"Collator cannot be cloned\",e);\n  }\n  this.collatorPrimaryOnly.setStrength(0);\n  if (exemplarChars == null) {\n    exemplarChars=getIndexExemplars(locale);\n  }\n  addLabels(exemplarChars);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountGetActiveOffersQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getActiveOffers\",GetActiveOffersResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Extendable Singleton", "code": "protected Udb82DatabaseType(){\n}\n"}
{"nl": "Returns true if the chart is not yet fully zoomed in on the y-axis", "code": "public boolean canZoomInMoreY(){\n  return (mScaleY < mMaxScaleY);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountGetCountersQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.getCounters\",AccountCounters.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Sets an event listener that uses annotations", "code": "public SimpleNotifyContainerConfigurer eventListenerAnnotation(Object eventListener){\n  AnnotationEventListenerAdapter annotationEventListenerAdapter=new AnnotationEventListenerAdapter();\n  annotationEventListenerAdapter.setDelegate(eventListener);\n  annotationEventListenerAdapter.afterPropertiesSet();\n  notifyEventListenerContainer.setEventListener(annotationEventListenerAdapter);\n  return this;\n}\n"}
{"nl": "Creates the default cumulative probability density test expected values", "code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0,0.0282475249,0.1129900996,0.252815347855,0.420605645761,0.584201186219,0.721621440204,0.824686630693,0.895359904171,0.940414116013,0.967446643119,0.982855183569,0.991259841996};\n}\n"}
{"nl": "Return photo sizes in a special format", "code": "public PhotosGetQueryWithExtended photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n"}
{"nl": "Create the given devices", "code": "public void createDevices(@NotNull List<Device> devices){\n  if (!initIfNecessary()) {\n    return;\n  }\n  for (  Device device : devices) {\n    String deviceIdBase=device.getId();\n    String deviceNameBase=device.getDisplayName();\n    int i=2;\n    while (isUserDevice(device)) {\n      String id=String.format(Locale.getDefault(),\"%1$s_%2$d\",deviceIdBase,i);\n      String name=String.format(Locale.getDefault(),\"%1$s_%2$d\",deviceNameBase,i);\n      device=cloneDeviceWithNewIdAndName(device,id,name);\n    }\n    ourDeviceManager.addUserDevice(device);\n  }\n  ourDeviceManager.saveUserDevices();\n}\n"}
{"nl": "Set owner id", "code": "protected VideoAddToAlbumQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "Create an empty SimpleRegression instance", "code": "public SimpleRegression(){\n  this(true);\n}\n"}
{"nl": "receive pack header", "code": "public static PkgHeader recvHeader(InputStream in,byte expect_cmd,long expect_body_len) throws IOException {\n  PkgHeader header;\n  byte[] bs;\n  int bytes;\n  header=new PkgHeader();\n  bs=new byte[FDHT_PROTO_PKG_HEADER_SIZE];\n  if ((bytes=in.read(bs)) != bs.length) {\n    throw new IOException(\"recv package size \" + bytes + \" != \"+ bs.length);\n  }\n  header.cmd=bs[PROTO_HEADER_CMD_INDEX];\n  if (header.cmd != expect_cmd) {\n    throw new IOException(\"recv cmd: \" + bs[PROTO_HEADER_CMD_INDEX] + \" is not correct, expect cmd: \"+ expect_cmd);\n  }\n  header.status=bs[PROTO_HEADER_STATUS_INDEX];\n  header.body_len=ProtoCommon.buff2int(bs,PROTO_HEADER_BODY_LEN_INDEX);\n  if (header.body_len < 0) {\n    throw new IOException(\"recv body length: \" + header.body_len + \" < 0!\");\n  }\n  if (header.status == 0) {\n    if (expect_body_len >= 0 && header.body_len != expect_body_len) {\n      throw new IOException(\"recv body length: \" + header.body_len + \" is not correct, expect length: \"+ expect_body_len);\n    }\n    header.timestamp=ProtoCommon.buff2int(bs,PROTO_HEADER_TIMESTAMP_INDEX);\n    header.expires=ProtoCommon.buff2int(bs,PROTO_HEADER_EXPIRES_INDEX);\n  }\n  return header;\n}\n"}
{"nl": "returns true if this  the txn participants need to join it in contrary to a xtn which the participants are known prior to txn propagation", "code": "@Override public boolean needParticipantsJoin() throws RemoteException {\n  return mgr.needParticipantsJoin();\n}\n"}
{"nl": "checks if the local broker is the owner of the namespace bundle", "code": "private boolean isOwner(NamespaceBundle nsBundle){\n  if (pulsar != null) {\n    return pulsar.getNamespaceService().getOwnershipCache().getOwnedServiceUnit(nsBundle) != null;\n  }\n  return false;\n}\n"}
{"nl": "Scale based on min,max", "code": "public static DataFrame normalize(DataFrame dataFrame,List<String> skipColumns){\n  return normalize(dataFrame,0,1,skipColumns);\n}\n"}
{"nl": "updates deletion status details for load and returns invalidLoadTimestamps", "code": "public List<String> updateDeletionStatus(String loadDate,LoadMetadataDetails[] listOfLoadFolderDetailsArray,List<String> invalidLoadTimestamps,Long loadStartTime){\n  boolean loadFound=false;\n  String loadStartTimeString=\"Load Start Time: \";\n  for (  LoadMetadataDetails loadMetadata : listOfLoadFolderDetailsArray) {\n    Integer result=compareDateValues(loadMetadata.getLoadStartTimeAsLong(),loadStartTime);\n    if (result < 0) {\n      if (CarbonCommonConstants.SEGMENT_COMPACTED.equalsIgnoreCase(loadMetadata.getLoadStatus())) {\n        LOG.info(\"Ignoring the segment : \" + loadMetadata.getLoadName() + \"as the segment has been compacted.\");\n        continue;\n      }\n      if (!CarbonCommonConstants.MARKED_FOR_DELETE.equals(loadMetadata.getLoadStatus())) {\n        loadFound=true;\n        loadMetadata.setLoadStatus(CarbonCommonConstants.MARKED_FOR_DELETE);\n        loadMetadata.setModificationOrdeletionTimesStamp(readCurrentTime());\n        LOG.info(\"Info: \" + loadStartTimeString + loadMetadata.getLoadStartTime()+ \" Marked for Delete\");\n      }\n    }\n  }\n  if (!loadFound) {\n    invalidLoadTimestamps.add(loadDate);\n    LOG.audit(\"Delete segment by date is failed. No matching segment found.\");\n    return invalidLoadTimestamps;\n  }\n  return invalidLoadTimestamps;\n}\n"}
{"nl": "Returns the quadraticMean, aka the root-mean-square, for all values in this column", "code": "public double quadraticMean(){\n  return NumericReduceUtils.quadraticMean.reduce(this);\n}\n"}
{"nl": "Does the current image have a device frame around it? Returns true, false, or null if no image computed yet", "code": "@Nullable public Boolean isFramed(){\n  if (myScaledImage == null) {\n    return null;\n  }\n  return myThumbnailHasFrame;\n}\n"}
{"nl": "Adds a language limit to the query", "code": "public void addLanguage(Long languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n"}
{"nl": "Throw Array Index Out Of Bounds Exception", "code": "private void throwArrayIndexOutOfBoundsException(int itemIndex){\n  throw new ArrayIndexOutOfBoundsException(\"Your item index can't be 0 or greater than space item size,\" + \" your items size is \" + spaceItems.size() + \", your current index is :\"+ itemIndex);\n}\n"}
{"nl": "gets a string representation", "code": "public String toString(){\n  StringBuilder buf=new StringBuilder();\n  buf.append(\"Splits (\").append(nsplits).append(\"):\\n\");\n  for (Iterator it=iterator(); it.hasNext(); ) {\n    Split split=(Split)it.next();\n    buf.append(split).append(\"\\n\");\n  }\n  return buf.toString();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public BoardEditTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId,String title){\n  super(client,\"board.editTopic\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  topicId(topicId);\n  title(title);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Skip lines and use delimiter", "code": "public CSVRecordReader(int skipNumLines,String delimiter){\n  this.skipNumLines=skipNumLines;\n  this.delimiter=delimiter;\n}\n"}
{"nl": "Post the comment from a community name (only if \"owner_id\" less than 0)", "code": "public VideoCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n"}
{"nl": "Creates a simple cluster unit voice", "code": "public CMUTimeVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){\n  super(name,gender,age,description,locale,domain,organization,lexicon,database);\n}\n"}
{"nl": "Right click mouse at a point", "code": "public void rightClick(int x,int y) throws InterruptedException {\n  click(InputEvent.BUTTON3_MASK,x,y);\n}\n"}
{"nl": "Specify the color resource for the description text", "code": "public TapTarget descriptionTextColor(@ColorRes int color){\n  this.descriptionTextColor=color;\n  return this;\n}\n"}
{"nl": "Add the order how the result will returned", "code": "public DocumentQuery addSort(Sort sort){\n  this.sorts.add(Objects.requireNonNull(sort,\"Sort is required\"));\n  return this;\n}\n"}
{"nl": "rotate all currently selected subtrees", "code": "public void rotateSelectedSubTree(){\n  boolean changed=false;\n  if (treeView.getNumberSelectedNodes() > 1) {\n    for (    Node v : treeView.getSelectedNodes()) {\n      if (v.getInDegree() == 0 || !treeView.getSelected(v.getFirstInEdge().getSource())) {\n        Stack<Node> stack=new Stack<>();\n        stack.push(v);\n        while (stack.size() > 0) {\n          Node w=stack.pop();\n          if (w.getOutDegree() > 1) {\n            w.reverseOrderAdjacentEdges();\n            changed=true;\n          }\n          if (w.getOutDegree() > 0) {\n            for (Edge e=w.getFirstOutEdge(); e != null; e=w.getNextOutEdge(e)) {\n              stack.push(e.getTarget());\n            }\n          }\n        }\n      }\n    }\n  }\n  if (changed) {\n    labelOrder.clear();\n    labelOrder.addAll(getLabelOrder(treeView));\n    UPGMA.embedTree(treeView);\n    flipCoordinates(treeView,rootSide);\n    previousRectangle=null;\n  }\n}\n"}
{"nl": "Creates a new instance of CASCDistanceCalculator", "code": "public CASCDistanceCalculator() throws IOException {\n  Process p=Runtime.getRuntime().exec(PathToCasc);\n  try {\n    p.waitFor();\n  }\n catch (  InterruptedException iee) {\n    return;\n  }\n}\n"}
{"nl": "Construct the URLImageParser which will execute AsyncTask and refresh the container", "code": "public URLImageParser(Context context,TextView textView,String cookie,String referer){\n  this.context=context;\n  this.textView=textView;\n  this.cookie=cookie;\n  this.referer=referer;\n}\n"}
{"nl": "increase item count and return left count", "code": "public long increaseEquippedItemCount(Item item,long count){\n  if (item.getItemTemplate().getCategory() != ItemCategory.SHARD) {\n    return count;\n  }\n  long leftCount=item.increaseItemCount(count);\n  ItemPacketService.updateItemAfterInfoChange(owner,item,ItemUpdateType.STATS_CHANGE);\n  setPersistentState(PersistentState.UPDATE_REQUIRED);\n  return leftCount;\n}\n"}
{"nl": "Open and activity", "code": "private void openActivity(Class activityToOpen){\n  Intent intent=new Intent(this,activityToOpen);\n  startActivity(intent);\n}\n"}
{"nl": "upload file to storage server (by file buff)", "code": "public String upload_file1(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String parts[]=this.upload_file(group_name,file_buff,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Find a lease entry, or null", "code": "private static Entry findLeaseFromIterator(Iterator<Entry> iter,Lease lease){\n  while (iter.hasNext()) {\n    Entry e=iter.next();\n    if (e.lease.equals(lease))     return e;\n  }\n  return null;\n}\n"}
{"nl": "Creates a metrics object with the dimensions map immutable", "code": "public static Metrics create(Map<String,String> dimensionMap){\n  Map<String,String> map=Maps.newTreeMap();\n  map.putAll(dimensionMap);\n  return new Metrics(Collections.unmodifiableMap(map));\n}\n"}
{"nl": "Register the client", "code": "@RequestMapping(value=ClientUris.REGISTER,method=RequestMethod.GET) public Boolean register(@RequestParam(\"clientId\") String clientId,@RequestParam(\"appName\") String appName,@RequestParam(\"appKey\") String appKey,@RequestParam(\"clientPid\") Integer clientPid,HttpServletRequest req){\n  Response<Boolean> routeResp=clientService.registerClient(clientId,appName,appKey,req.getRemoteAddr(),clientPid);\n  if (!routeResp.isSuccess()) {\n    return Boolean.FALSE;\n  }\n  return Boolean.TRUE;\n}\n"}
{"nl": "init main DB", "code": "private void initUsingMainDB(String A) throws SQLException {\n  stmt.executeQuery(\"use \" + A);\n}\n"}
{"nl": "Build a new graph with the given node as the root node", "code": "public DirectedGraph(Node rootNode,FeatureDefinition featDef,Properties properties){\n  this.rootNode=rootNode;\n  this.featDef=featDef;\n  this.properties=properties;\n}\n"}
{"nl": "Required for Externalizable", "code": "public GroupByAggregator(){\n}\n"}
{"nl": "cleanup the expired token", "code": "public static void cleanup(){\n  Helper.delete(W.create().and(\"expired\",System.currentTimeMillis(),W.OP_LT),AuthToken.class);\n}\n"}
{"nl": "Returns whether a menu path is enabled", "code": "public boolean isMenuPathEnabled(String... path){\n  boolean isEnabled=findActionMenuItem(path).isEnabled();\n  myRobot.pressAndReleaseKey(KeyEvent.VK_ESCAPE);\n  return isEnabled;\n}\n"}
{"nl": "Verify if the item is enchantble and/or socketble", "code": "public static boolean isUpgradeble(Item item){\n  if (item.getItemTemplate().isNoEnchant()) {\n    return false;\n  }\n  if (item.getItemTemplate().isWeapon()) {\n    return true;\n  }\n  if (item.getItemTemplate().getCategory() == ItemCategory.STIGMA) {\n    return false;\n  }\n  if (item.getEnchantLevel() == 15) {\n    return false;\n  }\n  if (item.getItemTemplate().isArmor()) {\n    int at=item.getItemTemplate().getItemSlot();\n    if (at == 1 || at == 2 || at == 8 || at == 16 || at == 32 || at == 2048 || at == 4096 || at == 131072 || at == 262144) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Adds the given initial seeds to the information flow problem", "code": "public void addInitialSeeds(Unit unit,Set<Abstraction> seeds){\n  if (this.initialSeeds.containsKey(unit))   this.initialSeeds.get(unit).addAll(seeds);\n else   this.initialSeeds.put(unit,new HashSet<Abstraction>(seeds));\n}\n"}
{"nl": "Start new transaction on this session", "code": "void startTransaction(Transaction transaction,boolean resume){\n}\n"}
{"nl": "Create a formatted date", "code": "public static String dateToString(Date date){\n  return dateToString(date,SIMPLE_DATE_FORMAT);\n}\n"}
{"nl": "puts value for given index", "code": "@Override public void put(long index,int value){\n  if (index + 1 >= limit)   limit=index + 1;\n  map.put(index,value);\n  if (!mustWriteOnClose)   mustWriteOnClose=true;\n}\n"}
{"nl": "release SLHolder for this scan", "code": "@Override public void releaseScan() throws SAException {\n}\n"}
{"nl": "Sets the maximum difference percentage (by default, 5%) in image comparisons", "code": "public ImageFixture withMaxDifference(double percent){\n  myMaxPercentDifference=percent;\n  return this;\n}\n"}
{"nl": "Write a JSON content into a file", "code": "public static boolean writeJson(JsonRootNode node,File file){\n  return FileUtility.writeToFile(new StringBuffer(JSONUtility.jsonToString(node)),file,false);\n}\n"}
{"nl": "Creates the CMU Lexicon which is a binary lexicon", "code": "public GermanLexicon(String basename){\n  this(basename,true);\n}\n"}
{"nl": "Check if this is a valid quota definition", "code": "@JsonIgnore public boolean isValid(){\n  if (this.msgRateIn > 0.0 && this.msgRateOut > 0.0 && this.bandwidthIn > 0.0 && this.bandwidthOut > 0.0 && this.memory > 0.0) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  int taxId=((MainViewer)getViewer()).getSelectedIds().iterator().next();\n  String command=\"show histogram taxonId=\" + taxId + \";\";\n  execute(command);\n}\n"}
{"nl": "designation use the MainThread, whatever the 'send' method use", "code": "public Observable<Object> toMainThreadObserverable(LifecycleTransformer lifecycleTransformer){\n  return _bus.observeOn(AndroidSchedulers.mainThread()).compose(lifecycleTransformer);\n}\n"}
{"nl": "init not serializable stub structures Flush to main memory once completed (must be called after _methodMapping is initialized)", "code": "private synchronized void init(){\n  _identityMethodCache=Collections.synchronizedMap(new IdentityHashMap<IMethod,IMethod>());\n}\n"}
{"nl": "open a dialog for the user to choose the root repository url", "code": "private void openChooseRootDialog(){\n  ChooseRootUrlDialog dialog=new ChooseRootUrlDialog(getShell(),location.getUrl());\n  if (dialog.open() == Window.OK) {\n    SVNUrl url=dialog.getRootUrl();\n    if (url == null) {\n      repositoryRootText.setText(\"\");\n    }\n else {\n      repositoryRootText.setText(dialog.getRootUrl().toString());\n    }\n  }\n}\n"}
{"nl": "draws the y-axis labels to the screen", "code": "@Override public void renderAxisLabels(Canvas c){\n  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;\n  float[] positions=new float[mYAxis.mEntryCount * 2];\n  for (int i=0; i < positions.length; i+=2) {\n    positions[i]=mYAxis.mEntries[i / 2];\n  }\n  mTrans.pointValuesToPixel(positions);\n  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());\n  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());\n  mAxisLabelPaint.setColor(mYAxis.getTextColor());\n  mAxisLabelPaint.setTextAlign(Align.CENTER);\n  float baseYOffset=Utils.convertDpToPixel(2.5f);\n  float textHeight=Utils.calcTextHeight(mAxisLabelPaint,\"Q\");\n  AxisDependency dependency=mYAxis.getAxisDependency();\n  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();\n  float yPos;\n  if (dependency == AxisDependency.LEFT) {\n    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {\n      yPos=mViewPortHandler.contentTop() - baseYOffset;\n    }\n else {\n      yPos=mViewPortHandler.contentTop() - baseYOffset;\n    }\n  }\n else {\n    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {\n      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;\n    }\n else {\n      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;\n    }\n  }\n  drawYLabels(c,yPos,positions,mYAxis.getYOffset());\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int write(int offset,int length){\n  int newLength=this.bytesLength + length;\n  ensureCapacity(newLength);\n  this.bytesLength=newLength;\n  int bytesOffset=this.bytes.length - this.bytesLength;\n  while (length > 0) {\n    this.bytes[(bytesOffset++)]=((byte)this.strings.charAt(offset++));\n    length--;\n  }\n  return this.bytesLength;\n}\n"}
{"nl": "Term frequency: 1+ log10(count)", "code": "public static double tf(int count){\n  return count > 0 ? 1 + Math.log10(count) : 0;\n}\n"}
{"nl": "syncs the selection in this list to the viewer", "code": "public void fireSyncToViewer(){\n  syncListener.syncList2Viewer(getEnabledLabels());\n}\n"}
{"nl": "Read Stream content", "code": "public static String readStreamContent(InputStream stream) throws IOException {\n  StringBuilder str=new StringBuilder();\n  BufferedReader reader=new BufferedReader(new InputStreamReader(stream));\n  String line;\n  while ((line=reader.readLine()) != null) {\n    str.append(line + \"\\n\");\n  }\n  String response=str.toString();\n  return response;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n"}
{"nl": "Required for Externalizable", "code": "public SpaceTypeDescriptorHolder(){\n  super();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioAddAlbumQuery(VkApiClient client,UserActor actor,String title){\n  super(client,\"audio.addAlbum\",AddAlbumResponse.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n}\n"}
{"nl": "Update the profile with the given player data", "code": "public void updateProfile(PlayerData playerData){\n  this.playerData=playerData;\n  avatar=new PlayerAvatar(playerData.getAvatar());\n  dailyBonus=new DailyBonus(playerData.getDailyBonus());\n  contactSettings=new ContactSettings(playerData.getContactSettings());\n  for (  CurrencyOuterClass.Currency currency : playerData.getCurrenciesList()) {\n    try {\n      addCurrency(currency.getName(),currency.getAmount());\n    }\n catch (    InvalidCurrencyException e) {\n      Log.w(TAG,\"Error adding currency. You can probably ignore this.\",e);\n    }\n  }\n  tutorialState=new TutorialState(playerData.getTutorialStateList());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PollsGetVotersQuery(VkApiClient client,UserActor actor,int pollId,int... answerIds){\n  super(client,\"polls.getVoters\",Utils.buildParametrizedType(List.class,Voters.class));\n  accessToken(actor.getAccessToken());\n  pollId(pollId);\n  answerIds(answerIds);\n}\n"}
{"nl": "Fragment LifeCycle Methods", "code": "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.expanded_map_activity);\n  permissionCheck();\n  mapView=(MapView)findViewById(R.id.expanded_map);\n  mapView.onCreate(savedInstanceState);\n  mapView.getMapAsync(OpenMapActivity.this);\n  if (savedInstanceState == null) {\n    Bundle extras=getIntent().getExtras();\n    id_filial=extras.getInt(ID_FILIAL);\n    latitude=extras.getFloat(LATITUDE);\n    longitude=extras.getFloat(LONGITUDE);\n    logoPath=extras.getString(LOGO);\n    unidade=extras.getString(UNIDADE);\n    nome_fantasia=extras.getString(NOME_FANTASIA);\n    telefone=extras.getString(TELEFONE);\n    endereco=extras.getString(ENDERECO);\n    cep=extras.getString(CEP);\n  }\n  setTitle(\"Voltar\");\n  init();\n}\n"}
{"nl": "Changes the visibility of the horizontal line in the tab", "code": "public void toggleDividerVisibility(boolean show){\n  mStepDivider.setVisibility(show ? VISIBLE : GONE);\n}\n"}
{"nl": "Currently only scrolls are can be relocated", "code": "public void relocateDoping(Player player,int targetSlot,int destinationSlot){\n  Pet pet=player.getPet();\n  if (pet == null || pet.getCommonData().getDopingBag() == null) {\n    return;\n  }\n  int[] scrollBag=pet.getCommonData().getDopingBag().getScrollsUsed();\n  int targetItem=scrollBag[targetSlot - 2];\n  if (destinationSlot - 2 > scrollBag.length - 1) {\n    pet.getCommonData().getDopingBag().setItem(targetItem,destinationSlot);\n    PacketSendUtility.sendPacket(player,new SM_PET(0,targetItem,destinationSlot));\n    pet.getCommonData().getDopingBag().setItem(0,targetSlot);\n    PacketSendUtility.sendPacket(player,new SM_PET(0,0,targetSlot));\n  }\n else {\n    pet.getCommonData().getDopingBag().setItem(scrollBag[destinationSlot - 2],targetSlot);\n    PacketSendUtility.sendPacket(player,new SM_PET(0,scrollBag[destinationSlot - 2],targetSlot));\n    pet.getCommonData().getDopingBag().setItem(targetItem,destinationSlot);\n    PacketSendUtility.sendPacket(player,new SM_PET(0,targetItem,destinationSlot));\n  }\n}\n"}
{"nl": "close server", "code": "public void closeServer(ServerInfo server){\n  if (server.sock == null || this.keep_alive) {\n    return;\n  }\n  try {\n    server.sock.close();\n    server.sock=null;\n  }\n catch (  IOException ex) {\n    System.err.println(\"close socket error: \" + ex.getMessage());\n  }\n}\n"}
{"nl": "add new blocks", "code": "public static void appendBlocks(DAAHeader header,BlockType[] types,byte[][] blocks,int[] sizes) throws IOException {\n  try (OutputStream outs=new BufferedOutputStream(new FileOutputStream(header.getFileName(),true))){\n    for (int i=0; i < blocks.length; i++) {\n      final byte[] bytes=blocks[i];\n      final int size=sizes[i];\n      final int index=header.getFirstAvailableBlockIndex();\n      header.setBlockTypeRank(index,BlockType.rank(types[i]));\n      header.setBlockSize(index,size);\n      outs.write(bytes,0,size);\n    }\n  }\n   header.save();\n}\n"}
{"nl": "Properly despawn object", "code": "public void onDespawn(){\n}\n"}
{"nl": "calculates the angle between two Entries (points) in the chart", "code": "public double calcAngle(Entry p1,Entry p2){\n  float dx=p2.getXIndex() - p1.getXIndex();\n  float dy=p2.getVal() - p1.getVal();\n  return Math.atan2(dy,dx) * 180.0 / Math.PI;\n}\n"}
{"nl": "Decodes image file into Bitmap, resize it and save it back", "code": "private boolean resizeAndSaveImage(int maxWidth,int maxHeight) throws IOException {\n  boolean saved=false;\n  String encodeURL=DiskCacheUtils.encodeURL(uri,maxWidth,maxHeight);\n  File targetFile=configuration.diskCache.get(uri);\n  if (targetFile != null && targetFile.exists()) {\n    ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);\n    DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();\n    ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,Scheme.FILE.wrap(targetFile.getAbsolutePath()),Scheme.FILE.wrap(targetFile.getAbsolutePath()),targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);\n    Bitmap bmp=decoder.decode(decodingInfo);\n    if (bmp != null && configuration.processorForDiskCache != null) {\n      L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,memoryCacheKey);\n      bmp=configuration.processorForDiskCache.process(bmp);\n      if (bmp == null) {\n        L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,memoryCacheKey);\n      }\n    }\n    if (bmp != null) {\n      saved=configuration.diskCache.save(encodeURL,bmp);\n      bmp.recycle();\n    }\n    if (saved) {\n      targetFile.delete();\n    }\n  }\n  return saved;\n}\n"}
{"nl": "setup and write the header", "code": "public void writeHeader(String creator,BlastMode blastMode,String[] matchClassificationNames,boolean isPairedReads) throws IOException {\n  final HeaderSectionRMA6 headerSection=getHeaderSectionRMA6();\n  headerSection.setCreationDate(System.currentTimeMillis());\n  headerSection.setCreator(creator);\n  headerSection.setBlastMode(blastMode);\n  headerSection.setMatchClassNames(matchClassificationNames);\n  headerSection.setIsPairedReads(isPairedReads);\n  this.isPairedReads=isPairedReads;\n  numberOfClassificationNames=matchClassificationNames.length;\n  File file=new File(fileName);\n  if (file.exists() && !file.delete())   throw new IOException(\"Can't delete existing file: \" + file);\n  readerWriter=new OutputWriter(new File(fileName));\n  readerWriter.setUseCompression(useCompression);\n  getFooterSectionRMA6().setStartHeaderSection(readerWriter.getPosition());\n  getHeaderSectionRMA6().write(readerWriter);\n  getFooterSectionRMA6().setEndHeaderSection(readerWriter.getPosition());\n}\n"}
{"nl": "compute the average k and N values", "code": "public static Pair<Float,Float> computeAverageNandK(LinkedList<Pair<Number,Number>> values){\n  if (values.size() == 0)   return new Pair<>(0f,0f);\n  double n=0;\n  double k=0;\n  for (  Pair<Number,Number> pair : values) {\n    n+=pair.get1().doubleValue();\n    k+=pair.get2().doubleValue();\n  }\n  return new Pair<>((float)(n / values.size()),(float)(k / values.size()));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Store the session with configured expired", "code": "public Session store(){\n  long expired=Global.getLong(\"session.alive\",X.AWEEK);\n  if (expired > 0) {\n    expired=System.currentTimeMillis() + expired;\n  }\n else {\n    expired=-1;\n  }\n  return store(expired);\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (fileName.startsWith(\"!!!\"))   return true;\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"BLASTX\");\n}\n"}
{"nl": "Creates new error", "code": "public AlreadySpawnedException(Throwable cause){\n  super(cause);\n}\n"}
{"nl": "close the array", "code": "@Override public void close(){\n  try {\n    raf.close();\n    System.err.println(\"Closing file: \" + file.getName() + \" (\"+ pages+ \"/\"+ data.length+ \" pages)\");\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "Delete the app", "code": "public void delete(App app){\n  appDao.unIndex(app);\n  appDao.delete(app.getId());\n  configManager.deleteByAppId(app.getId());\n  configDao.unIndexByAppId(app.getId());\n  configDao.deleteBindOfApp(app.getId());\n}\n"}
{"nl": "Is gzipped?", "code": "private boolean gzipped(String contentEncoding){\n  return contentEncoding != null && contentEncoding.toLowerCase().contains(\"gzip\");\n}\n"}
{"nl": "Remove a ViewModel from the specified key", "code": "public void removeViewModel(int key,Context context){\n  getFragment(context).remove(key);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public final void reset(String str,int start,int count){\n  char[] chars=null;\n  if (str != null) {\n    chars=str.toCharArray();\n  }\n  reset(chars,start,count);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AppsGetFriendsListQuery(VkApiClient client,UserActor actor){\n  super(client,\"apps.getFriendsList\",GetFriendsListResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Convert SP to PX", "code": "public static int spToPx(Context context,float spValue){\n  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;\n  return (int)(spValue * fontScale + 0.5f);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setVisible(false);\n}\n"}
{"nl": "Adds a language limit to the query", "code": "public void addLanguage(Integer languageId){\n  if (languageId != null) {\n    addLanguage(languageId.toString());\n  }\n else {\n    Logger.warn(this,\"Tried to add languageId Null!\");\n  }\n}\n"}
{"nl": "Formats the json content and print it", "code": "public static void xml(String xml){\n  Logger.xml(xml);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n"}
{"nl": "Comma-separated tag ids list", "code": "public MarketSearchQueryWithExtended tags(Integer... value){\n  return unsafeParam(\"tags\",value);\n}\n"}
{"nl": "This calculates a constraint tables and applies them to the widgets TODO break up into creation of a constraint table and apply", "code": "public static void computeConstraints(ScoutWidget[] list){\n  ScoutProbabilities table=new ScoutProbabilities();\n  table.computeConstraints(list);\n  table.applyConstraints(list);\n}\n"}
{"nl": "Return the resource for the specified key", "code": "public Object putResource(Object key,Object value){\n  return (objectCache.put(key,value));\n}\n"}
{"nl": "This method binds a player to the store and creates a list of items", "code": "public PrivateStore(Player owner){\n  this.owner=owner;\n  this.items=new LinkedHashMap<Integer,TradePSItem>();\n}\n"}
{"nl": "Schema Component Constraint: Wildcard Subset", "code": "public boolean isSubsetOf(XSWildcardDecl superWildcard){\n  if (superWildcard == null)   return false;\n  if (superWildcard.fType == NSCONSTRAINT_ANY) {\n    return true;\n  }\n  if (fType == NSCONSTRAINT_NOT) {\n    if (superWildcard.fType == NSCONSTRAINT_NOT && fNamespaceList[0] == superWildcard.fNamespaceList[0]) {\n      return true;\n    }\n  }\n  if (fType == NSCONSTRAINT_LIST) {\n    if (superWildcard.fType == NSCONSTRAINT_LIST && subset2sets(fNamespaceList,superWildcard.fNamespaceList)) {\n      return true;\n    }\n    if (superWildcard.fType == NSCONSTRAINT_NOT && !elementInSet(superWildcard.fNamespaceList[0],fNamespaceList) && !elementInSet(ABSENT,fNamespaceList)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Collections ids to add  item to", "code": "protected MarketAddToAlbumQuery albumIds(int... value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "DownSampling given Audio Input Stream", "code": "public static AudioInputStream downSampling(AudioInputStream ais,int targetSamplingRate) throws Exception {\n  float currentSamplingRate=ais.getFormat().getSampleRate();\n  if (targetSamplingRate >= currentSamplingRate) {\n    throw new Exception(\"Requested sampling rate \" + targetSamplingRate + \" is greater than or equal to Audio sampling rate \"+ currentSamplingRate);\n  }\n  int noOfbitsPerSample=ais.getFormat().getSampleSizeInBits();\n  int channels=ais.getFormat().getChannels();\n  int nBytes=ais.available();\n  boolean bigEndian=ais.getFormat().isBigEndian();\n  double[] samples=new AudioDoubleDataSource(ais).getAllData();\n  double filterCutof=0.5 * targetSamplingRate / currentSamplingRate;\n  LowPassFilter filter=new LowPassFilter(filterCutof);\n  samples=filter.apply(samples);\n  double duration=(double)samples.length / currentSamplingRate;\n  int newSampleLen=(int)Math.floor(duration * targetSamplingRate);\n  double fraction=(double)currentSamplingRate / targetSamplingRate;\n  double[] newSignal=new double[newSampleLen];\n  for (int i=0; i < newSignal.length; i++) {\n    double posIdx=fraction * i;\n    int nVal=(int)Math.floor(posIdx);\n    double diffVal=posIdx - nVal;\n    newSignal[i]=(diffVal * samples[nVal + 1]) + ((1 - diffVal) * samples[nVal]);\n  }\n  boolean signed=true;\n  AudioFormat af=new AudioFormat(targetSamplingRate,noOfbitsPerSample,channels,signed,bigEndian);\n  DDSAudioInputStream oais=new DDSAudioInputStream(new BufferedDoubleDataSource(newSignal),af);\n  return oais;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsDeleteClientsQuery(VkApiClient client,UserActor actor,int accountId,String ids){\n  super(client,\"ads.deleteClients\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  ids(ids);\n}\n"}
{"nl": "Parses, validates and computes normalized version of gYearMonth object", "code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  int end=getYearMonth(str,0,len,date);\n  date.day=DAY;\n  parseTimeZone(str,end,len,date);\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  date.position=0;\n  return date;\n}\n"}
{"nl": "Checks if a group features on this track", "code": "public boolean containsGroup(String group){\n  return groups.contains(group);\n}\n"}
{"nl": "New question text", "code": "public PollsEditQuery question(String value){\n  return unsafeParam(\"question\",value);\n}\n"}
{"nl": "Schedule respawn of npc In instances - no npc respawn", "code": "public Future<?> scheduleRespawn(){\n  if (!getOwner().getSpawn().isNoRespawn()) {\n    return RespawnService.scheduleRespawnTask(getOwner());\n  }\n  return null;\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(full);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  FailOverPolicy copy=(FailOverPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(full,copy));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetAlbumsQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"video.getAlbums\",GetAlbumsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "Local Creation", "code": "private soot.Local createLocal(polyglot.types.LocalInstance localInst){\n  soot.Type sootType=Util.getSootType(localInst.type());\n  String name=localInst.name();\n  soot.Local sootLocal=createLocal(name,sootType);\n  localsMap.put(new polyglot.util.IdentityKey(localInst),sootLocal);\n  return sootLocal;\n}\n"}
{"nl": "gets the next fastA record for the given first word", "code": "public Pair<String,String> next(String firstWordInHeader){\n  while (hasNext()) {\n    Pair<String,String> pair=next();\n    if (Basic.getFirstWord(Basic.swallowLeadingGreaterSign(pair.get1())).equals(firstWordInHeader))     return pair;\n  }\n  return null;\n}\n"}
{"nl": "write a string, compressed, if long enough", "code": "@Override public void writeString(byte[] str,int offset,int length) throws IOException {\n  if (str == null)   writeInt(0);\n else {\n    if (useCompression && length >= Compressor.MIN_SIZE_FOR_DEFLATION) {\n      if (byteBuffer.length < length)       byteBuffer=new byte[2 * length];\n      int numberOfBytes=compressor.deflateString2ByteArray(str,offset,length,byteBuffer);\n      writeInt(numberOfBytes);\n      io.write(byteBuffer,0,Math.abs(numberOfBytes));\n    }\n else {\n      writeInt(length);\n      io.write(str,offset,length);\n    }\n  }\n}\n"}
{"nl": "Dispatch the request from a client", "code": "public BaseResponseContext dispatchRequest(JsonPath jsonPath,String requestType,Map<String,Set<String>> parameters,RepositoryMethodParameterProvider parameterProvider,@SuppressWarnings(\"SameParameterValue\") RequestBody requestBody){\n  try {\n    BaseController controller=controllerRegistry.getController(jsonPath,requestType);\n    Class<?> resourceClass=getRequestedResource(jsonPath);\n    QueryAdapter queryAdapter=queryAdapterBuilder.build(resourceClass,parameters);\n    DefaultFilterRequestContext context=new DefaultFilterRequestContext(jsonPath,queryAdapter,parameterProvider,requestBody);\n    DefaultFilterChain chain=new DefaultFilterChain(controller);\n    return chain.doFilter(context);\n  }\n catch (  Exception e) {\n    Optional<JsonApiExceptionMapper> exceptionMapper=exceptionMapperRegistry.findMapperFor(e.getClass());\n    if (exceptionMapper.isPresent()) {\n      return exceptionMapper.get().toErrorResponse(e);\n    }\n else {\n      logger.error(\"failed to process request\",e);\n      throw e;\n    }\n  }\n}\n"}
{"nl": "Stores legion member data into db or saves a new one", "code": "private void storeLegionMember(LegionMember legionMember,boolean newMember){\n  if (newMember) {\n    addCachedLegionMember(legionMember);\n    DAOManager.getDAO(LegionMemberDAO.class).saveNewLegionMember(legionMember);\n  }\n else {\n    DAOManager.getDAO(LegionMemberDAO.class).storeLegionMember(legionMember.getObjectId(),legionMember);\n  }\n}\n"}
{"nl": "Show an Alert Dialog with one button", "code": "public static AlertDialog showOneButtonsDialog(final Activity activity,final String title,final String text,final String buttonText,final DialogInterface.OnClickListener buttonListener){\n  if (activity == null || activity.isFinishing()) {\n    return null;\n  }\n  return new AlertDialog.Builder(activity).setTitle(title).setMessage(text).setPositiveButton(buttonText,buttonListener).show();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"scrollTo node=\");\n  String name=np.getWordRespectCase();\n  np.matchWordIgnoreCase(\";\");\n  if (getViewer() instanceof ViewerBase) {\n    ViewerBase viewerBase=(ViewerBase)getViewer();\n    for (Node v=viewerBase.getGraph().getFirstNode(); v != null; v=v.getNext()) {\n      String label=viewerBase.getLabel(v);\n      if (label != null && label.equals(name)) {\n        viewerBase.scrollToNode(v);\n        break;\n      }\n    }\n  }\n}\n"}
{"nl": "Indicates if the item at position position is selected", "code": "public boolean isSelected(final int position){\n  return getSelectedItems().contains(position);\n}\n"}
{"nl": "Build vmatchEdges and store them in vmatches field", "code": "private void buildVmatchEdges(){\n  for (Iterator iter=pag.loadSourcesIterator(); iter.hasNext(); ) {\n    final FieldRefNode frn1=(FieldRefNode)iter.next();\n    for (Iterator iter2=pag.storeInvSourcesIterator(); iter2.hasNext(); ) {\n      final FieldRefNode frn2=(FieldRefNode)iter2.next();\n      VarNode base1=frn1.getBase();\n      VarNode base2=frn2.getBase();\n      if (frn1.getField().equals(frn2.getField())) {\n        if (base1.getP2Set().hasNonEmptyIntersection(base2.getP2Set())) {\n          Node[] src=pag.loadLookup(frn1);\n          Node[] dst=pag.storeInvLookup(frn2);\n          for (int i=0; i < src.length; i++) {\n            vmatches.put(src[i],dst);\n          }\n          for (int i=0; i < dst.length; i++) {\n            invVmatches.put(dst[i],src);\n          }\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "AI's owner will die from specified attacker", "code": "public static void dieSilently(AbstractAI ai2,Creature attacker){\n  ai2.getOwner().getController().onDie(attacker);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set ignoreUnassigned=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setIgnoreNoHits(value);\n}\n"}
{"nl": "Add a listener to be notified of traffic events", "code": "public void addListener(AirMapTrafficListener listener){\n  if (listeners.isEmpty()) {\n    listeners.add(listener);\n    connect();\n  }\n else {\n    listeners.add(listener);\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  final AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  final Alignment alignment=viewer.getAlignment();\n  final Document doc=((Director)getDir()).getDocument();\n  viewer.getSelectedBlock().clear();\n  String reference=viewer.getSelectedReference();\n  if (reference != null) {\n    final int posDoubleColon=reference.lastIndexOf(\"::\");\n    if (posDoubleColon > 0 && Basic.isInteger(reference.substring(posDoubleColon + 2)))     reference=reference.substring(0,posDoubleColon);\n    if (reference.length() > 0) {\n      doc.getProgressListener().setTasks(\"Alignment viewer\",\"Calculating alignment\");\n      viewer.getBlast2Alignment().makeAlignment(reference,alignment,viewer.isShowInsertions(),doc.getProgressListener());\n      viewer.setShowAminoAcids(alignment.getSequenceType().equals(Alignment.PROTEIN));\n      doc.getProgressListener().setTasks(\"Alignment viewer\",\"Drawing alignment\");\n      doc.getProgressListener().setMaximum(100);\n      doc.getProgressListener().setProgress(-1);\n      viewer.setAlignment(alignment,true);\n    }\n  }\n}\n"}
{"nl": "Disband alliance after minimum of members has been reached", "code": "@GlobalCallback(PlayerAllianceDisbandCallback.class) public static void disband(PlayerAlliance alliance){\n  Preconditions.checkState(alliance.onlineMembers() <= 1,\"Can't disband alliance with more than one online member\");\n  alliances.remove(alliance.getTeamId());\n  alliance.onEvent(new AllianceDisbandEvent(alliance));\n}\n"}
{"nl": "Adds a Job, and starts a Scheduler when none was yet started", "code": "protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){\n  String jobName=clazz.getName();\n  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();\n  JobDetail job=new JobDetail(jobName,jobGroup,clazz);\n  job.setDurability(false);\n  job.setVolatility(true);\n  job.setDescription(jobName);\n  try {\n    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);\n    if (scheduler == null) {\n      if (schedulerProperties == null) {\n        schedulerProperties=getDefaultSchedulerProperties();\n      }\n      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();\n      scheduler.start();\n    }\n    Date date=scheduler.scheduleJob(job,trigger);\n    Logger.info(this,\"Scheduled job \" + jobName + \", next trigger is on \"+ date);\n  }\n catch (  ParseException e) {\n    Logger.error(this,\"Cron expression '\" + cronExpression + \"' has an exception. Throwing IllegalArgumentException\",e);\n    throw new IllegalArgumentException(e);\n  }\ncatch (  SchedulerException e) {\n    Logger.error(this,\"Unable to schedule job \" + jobName,e);\n  }\n}\n"}
{"nl": "Hide content and show the progress bar", "code": "public void showLoading(List<Integer> skipIds){\n  switchState(LOADING,null,null,null,null,skipIds);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"add file=\");\n  final String fileName=np.getAbsoluteFileName();\n  np.matchIgnoreCase(\";\");\n  Basic.checkFileReadableNonEmpty(fileName);\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.addFile(fileName);\n}\n"}
{"nl": "This method will handle the changement of a self intro", "code": "private void changeSelfIntro(Player activePlayer,String newSelfIntro){\n  if (legionRestrictions.canChangeSelfIntro(activePlayer,newSelfIntro)) {\n    LegionMember legionMember=activePlayer.getLegionMember();\n    legionMember.setSelfIntro(newSelfIntro);\n    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_UPDATE_SELF_INTRO(activePlayer.getObjectId(),newSelfIntro));\n    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_WRITE_INTRO_DONE);\n  }\n}\n"}
{"nl": "Angle between the current touch coordinates and the down coordinates", "code": "private float angle(TouchState s){\n  return (float)Math.toDegrees(Math.atan2(s.yDown - s.yCurrent,s.xDown - s.xCurrent));\n}\n"}
{"nl": "Creates the default probability density test expected values", "code": "@Override public double[] makeDensityTestValues(){\n  return new double[]{0.0115379817652,0.0415948507811,0.0665060119842,0.0919455953114,0.121472591024,0.000433630076361,0.00412780610309,0.00999340341045,0.0193246438937,0.0368460089216};\n}\n"}
{"nl": "draw circle, around the middle of the cell decided by the index", "code": "private void drawCircle(Canvas canvas,int index,Paint paint,float radius){\n  if (isIllegalIndex(index)) {\n    return;\n  }\n  int x=getXByIndex(index);\n  int y=getYByIndex(index);\n  float centreY=cellHeight + (y - 1) * cellHeight + cellHeight * 0.5f;\n  float centreX=cellWidth * (x - 1) + cellWidth * 0.5f;\n  canvas.drawCircle(centreX,centreY,radius,paint);\n}\n"}
{"nl": "get multi keys", "code": "public Hashtable batchGet(ObjectInfo objInfo,String[] keys,Map failKeys) throws MyException {\n  return this.batchGet(objInfo,keys,failKeys,ProtoCommon.FDHT_EXPIRES_NONE);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetFollowersQueryWithFields(VkApiClient client,List<UserField> fields){\n  super(client,\"users.getFollowers\",GetFollowersFieldsResponse.class);\n  fields(fields);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetTargetingStatsQuery(VkApiClient client,UserActor actor,int accountId,String linkUrl){\n  super(client,\"ads.getTargetingStats\",TargStats.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  linkUrl(linkUrl);\n}\n"}
{"nl": "Convert the byte buffer to a string an specific character encoding", "code": "public String toString(String charsetName) throws UnsupportedEncodingException {\n  return new String(this.get(),0,this.getCount(),charsetName);\n}\n"}
{"nl": "Create a feature file reader from the given HNM feature file", "code": "public HNMFeatureFileReader(String fileName) throws IOException, MaryConfigurationException {\n  load(fileName);\n}\n"}
{"nl": "Toggle the constraints of the given widget", "code": "public void toggleLockConstraints(ConstraintWidget widget){\n  int constraintsCreator=getMainConstraintsCreator(widget);\n  if (constraintsCreator == ConstraintAnchor.USER_CREATOR) {\n    setConstraintsCreator(widget,ConstraintAnchor.AUTO_CONSTRAINT_CREATOR);\n  }\n else   if (constraintsCreator == ConstraintAnchor.AUTO_CONSTRAINT_CREATOR) {\n    setConstraintsCreator(widget,ConstraintAnchor.USER_CREATOR);\n  }\n  mSelection.selectionHasChanged();\n}\n"}
{"nl": "Constructs a new Lock Handle", "code": "LockHandle(LockManager lockManager,Transaction tx,Object key){\n  this.lockManager=lockManager;\n  this.tx=tx;\n  this.key=key;\n}\n"}
{"nl": "Creates new form NGramCorrelationForm", "code": "public NGramCorrelationForm(){\n  initComponents();\n}\n"}
{"nl": "Used for login", "code": "public Authentication(String email,String password){\n  this.email=email;\n  this.password=password;\n}\n"}
{"nl": "Where should the new columns be inserted? By default, they will be inserted after the source column", "code": "public Builder insertAfter(String columnName){\n  this.insertAfter=columnName;\n  return this;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedSearchQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.search\",SearchExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "A notation declaration", "code": "@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {\n  try {\n    if (fDTDHandler != null) {\n      String publicId=identifier.getPublicId();\n      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();\n      fDTDHandler.notationDecl(name,publicId,systemId);\n    }\n  }\n catch (  SAXException e) {\n    throw new XNIException(e);\n  }\n}\n"}
{"nl": "batch insert data", "code": "public static int insertCollection(String table,Collection<V> values){\n  MongoCollection<Document> c=getCollection(table);\n  if (c != null) {\n    List<Document> list=new ArrayList<Document>(values.size());\n    for (    V v : values) {\n      list.add(new Document(v.m));\n    }\n    try {\n      c.insertMany(list);\n      if (log.isDebugEnabled())       log.debug(\"inserted collection=\" + table + \", list=\"+ list);\n      return 1;\n    }\n catch (    Exception e) {\n      if (log.isErrorEnabled())       log.error(e.getMessage(),e);\n    }\n  }\n  return 0;\n}\n"}
{"nl": "response from target server after cloning character", "code": "public void onError(int taskId,String reason){\n  PlayerTransferRequest request=this.transfers.remove(taskId);\n  PlayerTransferTask task=this.tasks.remove(taskId);\n  task.status=PlayerTransferTask.STATUS_ERROR;\n  task.comment=reason;\n  this.dao.update(task);\n  GameServerInfo targetServer=GameServerTable.getGameServerInfo(request.targetServerId);\n  if (targetServer == null || targetServer.getConnection() == null) {\n    log.error(\"Player transfer requests offline server! #\" + request.targetServerId);\n    return;\n  }\n  request.account.setActivated((byte)1);\n  request.saccount.setActivated((byte)1);\n  DAOManager.getDAO(AccountDAO.class).updateAccount(request.account);\n  DAOManager.getDAO(AccountDAO.class).updateAccount(request.saccount);\n  targetServer.getConnection().sendPacket(new SM_PTRANSFER_RESPONSE(PlayerTransferResultStatus.ERROR,taskId,reason));\n}\n"}
{"nl": "Batch requests", "code": "protected ExecuteBatchQuery requests(AbstractQueryBuilder... value){\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"return [\");\n  int requestIndex=0;\n  for (  AbstractQueryBuilder request : value) {\n    builder.append(\"API.\").append(request.getMethod()).append(\"(\");\n    Map<String,String> params=new HashMap<>(request.build());\n    params.remove(\"access_token\");\n    params.remove(\"v\");\n    if (!params.isEmpty()) {\n      builder.append(\"{\");\n      int paramIndex=0;\n      for (      Map.Entry<String,String> param : params.entrySet()) {\n        builder.append(\"\\\"\").append(param.getKey()).append(\"\\\":\").append(\"\\\"\").append(param.getValue()).append(\"\\\"\");\n        if (paramIndex < (params.size() - 1)) {\n          builder.append(\",\");\n        }\n        paramIndex++;\n      }\n      builder.append(\"}\");\n    }\n    builder.append(\")\");\n    if (requestIndex < (value.length - 1)) {\n      builder.append(\",\");\n    }\n    requestIndex++;\n  }\n  builder.append(\"];\");\n  return unsafeParam(\"code\",builder.toString());\n}\n"}
{"nl": "Display a string (can be long) inside a message dialogue", "code": "public static void showString(String title,String content){\n  JTextArea area=new JTextArea(content);\n  area.setEditable(false);\n  JScrollPane scroll=new JScrollPane(area);\n  scroll.setPreferredSize(new Dimension(500,300));\n  JOptionPane.showMessageDialog(null,scroll,title,JOptionPane.INFORMATION_MESSAGE);\n}\n"}
{"nl": "Number of items to return", "code": "public MarketGetQueryWithExtended count(Integer value){\n  return unsafeParam(\"count\",value);\n}\n"}
{"nl": "Fill an array with the values of a 74-dB 4-sample Blackman-Harris window function", "code": "private void blackmanHarris4s(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.4;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.40217 - 0.49703 * Math.cos(twoPI * i / size) + 0.09392 * Math.cos(2 * twoPI * i / size) - 0.00183 * Math.cos(3 * twoPI * i / size));\n}\n"}
{"nl": "Method need to remove bounce item radius", "code": "public void straightenSelectedItem(Animator.AnimatorListener listener){\n  if (selectedItemPosition == RecyclerView.NO_POSITION || isSelectAnimationInProcess || isDeselectAnimationInProcess || isSelectedItemStraightened || isWaitingToDeselectAnimation || isWaitingToSelectAnimation || isViewCollapsing) {\n    return;\n  }\n  View viewToRotate=null;\n  View view;\n  for (int count=getChildCount(), i=0; i < count; i++) {\n    view=getChildAt(i);\n    if (selectedItemPosition == getPosition(view)) {\n      viewToRotate=view;\n    }\n  }\n  if (viewToRotate != null) {\n    animationHelper.straightenView(viewToRotate,listener);\n    isSelectedItemStraightened=true;\n  }\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(full);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ActiveElectionConfig copy=(ActiveElectionConfig)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(full,copy));\n}\n"}
{"nl": "Returns true if field status is set (has been assigned a value) and false otherwise", "code": "public boolean isSetStatus(){\n  return __isset_bit_vector.get(__STATUS_ISSET_ID);\n}\n"}
{"nl": "Lookup types in the library", "code": "@SuppressWarnings({\"unchecked\",\"cast\"}) public TypeDecl lookupLibType(String packageName,String typeName){\n  java.util.List _parameters=new java.util.ArrayList(2);\n  _parameters.add(packageName);\n  _parameters.add(typeName);\n  if (lookupLibType_String_String_values == null)   lookupLibType_String_String_values=new java.util.HashMap(4);\n  if (lookupLibType_String_String_values.containsKey(_parameters)) {\n    return (TypeDecl)lookupLibType_String_String_values.get(_parameters);\n  }\n  ASTNode$State state=state();\n  int num=state.boundariesCrossed;\n  boolean isFinal=this.is$Final();\n  TypeDecl lookupLibType_String_String_value=lookupLibType_compute(packageName,typeName);\n  if (isFinal && num == state().boundariesCrossed)   lookupLibType_String_String_values.put(_parameters,lookupLibType_String_String_value);\n  return lookupLibType_String_String_value;\n}\n"}
{"nl": "List of requested catalog sections", "code": "public VideoGetCatalogQuery filters(VideoGetCatalogFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "Identifier of an items owner community", "code": "protected MarketGetAlbumsQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "/*     ", "code": "@deprecated public static boolean isSpace(int ch){\n  return (ch <= 32) && ((ch == 32) || (ch == 9) || (ch == 10)|| (ch == 12)|| (ch == 13));\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  if (getViewer() instanceof ClusterViewer) {\n    final ClusterViewer clusterViewer=(ClusterViewer)getViewer();\n    return clusterViewer.isPCoATab() && clusterViewer.getGraphView().getSelectedNodes().size() >= 1;\n  }\n else   return true;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public CompactByteArray(char[] indexArray,byte[] newValues){\n  if (indexArray.length != 512)   throw new IllegalArgumentException(\"Index out of bounds.\");\n  for (int i=0; i < 512; i++) {\n    char index=indexArray[i];\n    if ((index < 0) || (index >= newValues.length + 128))     throw new IllegalArgumentException(\"Index out of bounds.\");\n  }\n  this.indices=indexArray;\n  this.values=newValues;\n  this.isCompact=true;\n}\n"}
{"nl": "Test read and write empty ClusterPolicy object", "code": "public void testWriteReadEmpty() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(empty);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  ClusterPolicy copy=(ClusterPolicy)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(empty,copy));\n}\n"}
{"nl": "Creates a simple voice", "code": "public CMUVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon){\n  super(name,gender,age,description,locale,domain,organization);\n  setLexicon(lexicon);\n}\n"}
{"nl": "Remove a child (or children) from the current json node given the key to remove", "code": "public static JsonNode removeChild(JsonNode original,String key){\n  Map<JsonStringNode,JsonNode> existingFields=original.getFields();\n  Map<JsonStringNode,JsonNode> newMap=new HashMap<>();\n  for (  Entry<JsonStringNode,JsonNode> entry : existingFields.entrySet()) {\n    if (!entry.getKey().toString().equals(key)) {\n      newMap.put(entry.getKey(),entry.getValue());\n    }\n  }\n  return JsonNodeFactories.object(newMap);\n}\n"}
{"nl": "Set fields", "code": "public AccountGetInfoQuery fields(AccountGetInfoField... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Dismiss loading dialog", "code": "public void dismissLoadingDialog(){\n  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);\n  if (frag != null) {\n    LoadingDialog loading=(LoadingDialog)frag;\n    loading.dismissAllowingStateLoss();\n  }\n}\n"}
{"nl": "Calculate the renew time for the lease entry", "code": "public void calcRenew(long now){\n  endTime=lease.getExpiration();\n  if (renewalsDone()) {\n    if (null == desiredExpirationListener()) {\n      renew=Long.MAX_VALUE;\n    }\n else {\n      renew=expiration;\n    }\n    return;\n  }\n  long delta=endTime - now;\n  if (delta <= renewalRTT * 2) {\n    delta=renewalRTT;\n  }\n else   if (delta <= renewalRTT * 8) {\n    delta/=2;\n  }\n else   if (delta <= 1000 * 60 * 60* 24* 7) {\n    delta/=8;\n  }\n else   if (delta <= 1000 * 60 * 60* 24* 14) {\n    delta=1000 * 60 * 60* 24;\n  }\n else {\n    delta=1000 * 60 * 60* 24* 3;\n  }\n  renew=endTime - delta;\n}\n"}
{"nl": "load the state of the plugin, ie the repositories locations", "code": "private void loadState(){\n  try {\n    IPath pluginStateLocation=SVNProviderPlugin.getPlugin().getStateLocation().append(REPOSITORIES_STATE_FILE);\n    File file=pluginStateLocation.toFile();\n    if (file.exists()) {\n      try {\n        DataInputStream dis=new DataInputStream(new FileInputStream(file));\n        readState(dis);\n        dis.close();\n      }\n catch (      IOException e) {\n        throw new TeamException(new Status(Status.ERROR,SVNProviderPlugin.ID,TeamException.UNABLE,Policy.bind(\"SVNProvider.ioException\"),e));\n      }\n    }\n  }\n catch (  TeamException e) {\n    Util.logError(Policy.bind(\"SVNProvider.errorLoading\"),e);\n  }\n}\n"}
{"nl": "Generates a nonce that isn't stored anywhere", "code": "public byte[] generateNonceForEncapsulationMessage(){\n  return generateNonceBytes();\n}\n"}
{"nl": "* Shield Control Room Teleporter  *", "code": "private void spawnShieldControlRoomTeleporter(){\n  sendMsg(1402202);\n  deleteNpc(702010);\n  deleteNpc(702011);\n  deleteNpc(702012);\n  deleteNpc(702013);\n  spawn(730886,255.47392f,293.56177f,321.18497f,(byte)89);\n  spawn(730886,255.55742f,216.03549f,321.21344f,(byte)30);\n  spawn(730886,294.20718f,254.60352f,295.7729f,(byte)60);\n  spawn(730886,216.97739f,254.4616f,295.77353f,(byte)0);\n  GENTask.cancel(true);\n  CNT1Task.cancel(true);\n  CNT2Task.cancel(true);\n  CNT3Task.cancel(true);\n  CNT4Task.cancel(true);\n  CNT5Task.cancel(true);\n  CNT6Task.cancel(true);\n  CNT7Task.cancel(true);\n  SP1Task.cancel(true);\n  SP2Task.cancel(true);\n  SP3Task.cancel(true);\n  SP4Task.cancel(true);\n  isEnd=true;\n}\n"}
{"nl": "Bind a view to a topping on a given object with a specified color adapter", "code": "public Scoop bind(Object obj,int toppingId,View view,@Nullable ColorAdapter colorAdapter){\n  return bind(obj,toppingId,view,colorAdapter,null);\n}\n"}
{"nl": "This method will remove the legion member from cache and the database", "code": "private void deleteLegionMemberFromDB(LegionMemberEx legionMember){\n  this.allCachedLegionMembers.remove(legionMember);\n  DAOManager.getDAO(LegionMemberDAO.class).deleteLegionMember(legionMember.getObjectId());\n  Legion legion=legionMember.getLegion();\n  legion.deleteLegionMember(legionMember.getObjectId());\n  addHistory(legion,legionMember.getName(),LegionHistoryType.KICK);\n}\n"}
{"nl": "Creates a new submap, initializing all fields", "code": "SubMap(FastConcurrentSkipListMap<K,V> map,K fromKey,boolean fromInclusive,K toKey,boolean toInclusive,boolean isDescending){\n  if (fromKey != null && toKey != null && map.compare(fromKey,toKey) > 0)   throw new IllegalArgumentException(\"inconsistent range\");\n  this.m=map;\n  this.lo=fromKey;\n  this.hi=toKey;\n  this.loInclusive=fromInclusive;\n  this.hiInclusive=toInclusive;\n  this.isDescending=isDescending;\n}\n"}
{"nl": "read an object from an InputStream", "code": "public static Object readObject(InputStream in) throws IOException, ClassNotFoundException {\n  ObjectInputStreamExt objIn=new ObjectInputStreamExt(in);\n  Object result=objIn.readObject();\n  return result;\n}\n"}
{"nl": "Derive a secure key based on the passphraseOrPin", "code": "@Deprecated private static SecretKey generatePBEKey(char[] passphraseOrPin,byte[] salt,String algorthm,int iterations,int keyLength) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchProviderException {\n  if (iterations == 0) {\n    iterations=1000;\n  }\n  SecretKeyFactory secretKeyFactory=SecretKeyFactory.getInstance(algorthm,PROVIDER);\n  KeySpec keySpec=new PBEKeySpec(passphraseOrPin,salt,iterations,keyLength);\n  SecretKey secretKey=secretKeyFactory.generateSecret(keySpec);\n  return secretKey;\n}\n"}
{"nl": "write numbers as string", "code": "private static String toString(double[] values){\n  StringBuilder buf=new StringBuilder();\n  boolean first=true;\n  for (  double value : values) {\n    if (first)     first=false;\n else     buf.append(\", \");\n    buf.append(String.format(\"%.3f\",value + 0.00001));\n  }\n  return buf.toString();\n}\n"}
{"nl": "Checks if section in sidekick is expanded based on section WebElement", "code": "public static boolean isSectionExpanded(WebElement section){\n  boolean isExpanded=false;\n  if (!section.getAttribute(HtmlTags.Attributes.CLASS).contains(COLLAPSED_CLASS)) {\n    isExpanded=true;\n  }\n  return isExpanded;\n}\n"}
{"nl": "When creating a WagonCARTReader provide a tree type", "code": "public WagonCARTReader(LeafNode.LeafType leafType){\n  this.leafType=leafType;\n}\n"}
{"nl": "this method is used to update the reference count of the actions", "code": "private void increaseEventCount(Map<String,Integer> eventCounts,Predicate<String> predicate){\n  int impressionCount=eventCounts.getOrDefault(\"impression\",0);\n  int impressionUniqueCount=Math.min(impressionCount,1);\n  int jointCounts=0;\n  if (!predicate.test(\"click\")) {\n    jointCounts+=eventCounts.getOrDefault(\"click\",0);\n  }\n  if (!predicate.test(\"love it\")) {\n    jointCounts+=eventCounts.getOrDefault(\"love it\",0);\n  }\n  int jointUniqueCount=Math.min(jointCounts,1);\n  impressionCounts.put(\"eventCount\",impressionCounts.getOrDefault(\"eventCount\",0) + impressionCount);\n  impressionCounts.put(\"uniqueUserCount\",impressionCounts.getOrDefault(\"uniqueUserCount\",0) + impressionUniqueCount);\n  jointActionCounts.put(\"eventCount\",jointActionCounts.getOrDefault(\"eventCount\",0) + jointCounts);\n  jointActionCounts.put(\"uniqueUserCount\",jointActionCounts.getOrDefault(\"uniqueUserCount\",0) + jointUniqueCount);\n}\n"}
{"nl": "Construct a State", "code": "public State(String state){\n  if (state == null)   throw new NullPointerException(\"state is null\");\n  this.state=state.intern();\n}\n"}
{"nl": "This method will send a packet to every legion member and update them about the disband", "code": "private void updateMembersOfDisbandLegion(Legion legion,int unixTime){\n  for (  Player onlineLegionMember : legion.getOnlineLegionMembers()) {\n    PacketSendUtility.sendPacket(onlineLegionMember,new SM_LEGION_UPDATE_MEMBER(onlineLegionMember,1300303,unixTime + \"\"));\n    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_EDIT(0x06,unixTime));\n  }\n}\n"}
{"nl": "A notation declaration", "code": "@Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {\n  if (fValidation) {\n    DTDGrammar grammar=(fDTDGrammar != null ? fDTDGrammar : fGrammarBucket.getActiveGrammar());\n    if (grammar.getNotationDeclIndex(name) != -1) {\n      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,\"UniqueNotationName\",new Object[]{name},XMLErrorReporter.SEVERITY_ERROR);\n    }\n  }\n  if (fDTDGrammar != null)   fDTDGrammar.notationDecl(name,identifier,augs);\n  if (fDTDHandler != null) {\n    fDTDHandler.notationDecl(name,identifier,augs);\n  }\n}\n"}
{"nl": "Creates a public and private key with access to the API TODO allow creation of permissions for keys", "code": "public ApiResult createKeys(){\n  String publicKey=\"APIK-\" + RandomStringUtils.randomAlphanumeric(27);\n  String privateKey=RandomStringUtils.randomAlphanumeric(32);\n  ApiResult apiResult=new ApiResult(-1,publicKey,privateKey,Values.EMPTYSTRING,Values.EMPTYSTRING);\n  this.api.saveApi(apiResult);\n  return apiResult;\n}\n"}
{"nl": "Create a new Webster", "code": "public Webster(int port,String roots,String bindAddress,int minThreads,int maxThreads) throws BindException {\n  this.port=port;\n  this.minThreads=minThreads;\n  this.maxThreads=maxThreads;\n  initialize(roots,bindAddress);\n}\n"}
{"nl": "Creates a file with the specified contents and file path in the test project", "code": "protected PsiFile createPsiFile(String filePath,String... contentLines){\n  return getPsiFile(createFile(filePath,contentLines));\n}\n"}
{"nl": "Perform an undo action, if possible", "code": "public void doUndo(){\n  if (undo.canUndo()) {\n    undo.undo();\n    parse();\n  }\n}\n"}
{"nl": "Removes a group from this track", "code": "public void removeGroup(String group) throws ObjectLacksException {\n  assertContains(group);\n  groups.remove(group);\n}\n"}
{"nl": "Generate and return blowfish key", "code": "public static SecretKey generateBlowfishKey(){\n  return blowfishKeyGen.generateKey();\n}\n"}
{"nl": "write file", "code": "public static boolean writeFile(String filePath,String content,boolean append){\n  if (StringUtil.isEmpty(content)) {\n    return false;\n  }\n  FileWriter fileWriter=null;\n  try {\n    makeDirs(filePath);\n    fileWriter=new FileWriter(filePath,append);\n    fileWriter.write(content);\n    return true;\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"IOException occurred. \",e);\n  }\n finally {\n    IOUtil.close(fileWriter);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioGetAlbumsQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.getAlbums\",GetAlbumsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Group the text of the play script by roles", "code": "static String printTextPerRole(String[] roles,String[] textLines){\n  StringBuilder[] textByRoles=new StringBuilder[roles.length];\n  for (int i=0; i < roles.length; i++) {\n    textByRoles[i]=new StringBuilder(roles[i] + \":\");\n  }\n  for (int i=0; i < textLines.length; i++) {\n    String[] splitLine=textLines[i].split(\": \",2);\n    String role=splitLine[0];\n    String text=splitLine[1];\n    int j=0;\n    while (!roles[j].equals(role)) {\n      j++;\n    }\n    textByRoles[j].append(\"\\n\" + (i + 1) + \") \"+ text);\n  }\n  String result=\"\";\n  for (  StringBuilder line : textByRoles) {\n    result+=line + \"\\n\\n\";\n  }\n  return result;\n}\n"}
{"nl": "performs all kinds of initialization calculations, such as minIndex-maxIndex and value count and sum", "code": "protected void init(){\n  calcMinMax();\n}\n"}
{"nl": "Entry point for matching lines", "code": "public List<CodeResult> formatResults(List<CodeResult> codeResult,String matchTerms,boolean highlightLine){\n  List<String> lstMatchTerms=splitTerms(matchTerms);\n  List<CodeResult> results=new ArrayList<>();\n  for (  CodeResult code : codeResult) {\n    List<CodeMatchResult> result=matchResults(code.getCode(),lstMatchTerms,highlightLine);\n    if (result != null) {\n      code.setMatchingResults(result);\n      results.add(code);\n    }\n  }\n  return results;\n}\n"}
{"nl": "make a SAM line", "code": "private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {\n  return String.format(\"%s\\t0\\t%s\\t0\\t255\\t*\\t*\\t0\\t0\\t*\\t*\\tAS:i:%d\\t\",queryName,refName,Math.round(bitScore)) + String.format(\"AL:Z:%s\\t\",Basic.replaceSpaces(line,' '));\n}\n"}
{"nl": "TODO: Javadoc", "code": "private static boolean isDigitOrPeriod(char ch){\n  return isDigit(ch) || ch == '.';\n}\n"}
{"nl": "Calculate the day time", "code": "public void calculateDayTime(){\n  int hour=getHour();\n  if (hour > 21 || hour < 4) {\n    dayTime=DayTime.NIGHT;\n  }\n else   if (hour > 16) {\n    dayTime=DayTime.EVENING;\n  }\n else   if (hour > 8) {\n    dayTime=DayTime.AFTERNOON;\n  }\n else {\n    dayTime=DayTime.MORNING;\n  }\n}\n"}
{"nl": "Print debug info", "code": "@Override protected void runImpl(){\n  name=ChatUtil.getRealAdminName(name);\n  String formatname=Util.convertName(name);\n  Player sender=getConnection().getActivePlayer();\n  Player receiver=World.getInstance().findPlayer(formatname);\n  if (LoggingConfig.LOG_CHAT) {\n    log.info(String.format(\"[MESSAGE] [%s] Whisper To: %s, Message: %s\",sender.getName(),formatname,message));\n  }\n  if (receiver == null) {\n    sendPacket(SM_SYSTEM_MESSAGE.STR_NO_SUCH_USER(formatname));\n  }\n else   if (!receiver.isWispable()) {\n    PacketSendUtility.sendMessage(sender,\"You can't talk with this gm.\");\n  }\n else   if (sender.getLevel() < CustomConfig.LEVEL_TO_WHISPER) {\n    sendPacket(SM_SYSTEM_MESSAGE.STR_CANT_WHISPER_LEVEL(String.valueOf(CustomConfig.LEVEL_TO_WHISPER)));\n  }\n else   if (receiver.getBlockList().contains(sender.getObjectId())) {\n    sendPacket(SM_SYSTEM_MESSAGE.STR_YOU_EXCLUDED(receiver.getName()));\n  }\n else   if ((!CustomConfig.SPEAKING_BETWEEN_FACTIONS) && (sender.getRace().getRaceId() != receiver.getRace().getRaceId()) && (sender.getAccessLevel() < AdminConfig.GM_LEVEL)&& (receiver.getAccessLevel() < AdminConfig.GM_LEVEL)) {\n    sendPacket(SM_SYSTEM_MESSAGE.STR_NO_SUCH_USER(formatname));\n  }\n else {\n    if (RestrictionsManager.canChat(sender)) {\n      PacketSendUtility.sendPacket(receiver,new SM_MESSAGE(sender,NameRestrictionService.filterMessage(message),ChatType.WHISPER));\n    }\n  }\n}\n"}
{"nl": "Creates the default cumulative probability density test input values", "code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n"}
{"nl": "Sends the logMessage message back to the client as a notification", "code": "public void logMessage(MessageType type,String msg){\n  NotificationMessage<LogMessageParams> message=new NotificationMessage<>();\n  message.setMethod(LSPMethods.WINDOW_LOGMESSAGE.getMethod());\n  message.setParams(new LogMessageParams().withMessage(msg).withType(type.getType()));\n  send(message);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static boolean isLeapYear(int year){\n  int x=(year * 12 + 17) % 19;\n  return x >= (x < 0 ? -7 : 12);\n}\n"}
{"nl": "Creates a new instance of DocumentWordGraph", "code": "public DocumentWordGraph(){\n  MinSize=1;\n  MaxSize=2;\n  CorrelationWindow=3;\n  InitGraphs();\n}\n"}
{"nl": "Verify if both disconnected and connected layout have been overridden, otherwise throw an error", "code": "private void verifyOverrideRulesForConnectivity(){\n  if ((mConnectedLayout != 0 && mDisconnectedLayout == 0)) {\n    throw new RuntimeException(\"Error inflating custom connectivity layout. \" + \"Have you forgot to override the disconnected layout ?\");\n  }\n  if ((mConnectedLayout == 0 && mDisconnectedLayout != 0)) {\n    throw new RuntimeException(\"Error inflating custom connectivity layout. \" + \"Have you forgot to override the connected layout ?\");\n  }\n}\n"}
{"nl": "Initialise Vignette subfilter", "code": "public VignetteSubfilter(Context context,int alpha){\n  this.context=context;\n  this.alpha=alpha;\n}\n"}
{"nl": "Method opens dialog to enable further configuration by single fields", "code": "public ConfigDialog openDialog(){\n  select().clickOption(ToolbarOptions.CONFIGURE);\n  configDialog.verifyIsDisplayed();\n  return configDialog;\n}\n"}
{"nl": "Returns true if this logical version is greater or equals to the other ( >= )", "code": "public boolean greaterOrEquals(PlatformLogicalVersion otherVersion){\n  return !lessThan(otherVersion);\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  super.destroyView();\n}\n"}
{"nl": "Destroyer Kunax Skill's AI", "code": "private void BUFF_IdeScale(){\n  applyEffect(21744,getOwner());\n}\n"}
{"nl": "update User cach And db", "code": "public void updateContactList(List<User> contactInfoList){\n  for (  User u : contactInfoList) {\n    contactList.put(u.getUsername(),u);\n  }\n  ArrayList<User> mList=new ArrayList<User>();\n  mList.addAll(contactList.values());\n  ((DemoHXSDKModel)getModel()).saveContactList(mList);\n}\n"}
{"nl": "Returns the number of elements in the underlying array", "code": "public int size(){\n  return this.get().length;\n}\n"}
{"nl": "Creates a new instance of WordEvaluatorAdapter", "code": "public WordEvaluatorAdapter(){\n}\n"}
{"nl": "Required for Externalizable", "code": "public GetEntryTypeDescriptorSpaceOperationResult(){\n}\n"}
{"nl": "Limits the given <b>number</b> between the other values", "code": "public static int limit(int number,int between,int and){\n  if (number <= between) {\n    return between;\n  }\n  if (number >= and) {\n    return and;\n  }\n  return number;\n}\n"}
{"nl": "execute a command", "code": "public void execute(String command){\n  dir.execute(command,getCommandManager());\n}\n"}
{"nl": "Returns the string representation of the object", "code": "public String toString(){\n  return path.toString();\n}\n"}
{"nl": "Find the index at which a key should be inserted", "code": "private int findInsertionIndex(final int key){\n  return findInsertionIndex(keys,states,key,mask);\n}\n"}
{"nl": "To verify whether the 'accent' contour shape defined or not", "code": "@Deprecated private boolean isDefinedAccent(String accentAttribute){\n  if (\"H*\".equals(accentAttribute))   return true;\n  if (\"L*\".equals(accentAttribute))   return true;\n  if (\"L*+H\".equals(accentAttribute))   return true;\n  if (\"L*+!H\".equals(accentAttribute))   return true;\n  if (\"L+H*\".equals(accentAttribute))   return true;\n  return \"!H*\".equals(accentAttribute);\n}\n"}
{"nl": "Starts the first sample timer", "code": "public void startFirstSampleTimer(){\n  timer.start(\"firstAudio\");\n  firstSample=true;\n  if (audioMetrics) {\n    timer.start(\"firstPlay\");\n    firstPlay=true;\n  }\n}\n"}
{"nl": "Creates a new instance of SpectralSpellInteroperator", "code": "public SpectralSpellInteroperator(String sExecutable,String sInputFile,String[] sArgs){\n  this(sInputFile,sArgs);\n  SSpellExecutable=sExecutable;\n}\n"}
{"nl": "set select state of all objects", "code": "public void selectAll(boolean select){\n  mainViewer.selectAllNodes(select);\n  mainViewer.repaint();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  if (getViewer() instanceof GroupsViewer) {\n    GroupsViewer viewer=(GroupsViewer)getViewer();\n    viewer.getGroupsPanel().addNewGroup(-1);\n  }\n}\n"}
{"nl": "Multiply with scalar", "code": "public static void multiply(Matrix a,double b,Matrix result){\n  for (int i=0; i < a.rows; i++) {\n    for (int j=0; j < a.cols; j++) {\n      result.set(i,j,a.get(i,j) * b);\n    }\n  }\n}\n"}
{"nl": "Constructs new <tt>SM_MESSAGE </tt> packet", "code": "public SM_MESSAGE(Player player,String message,ChatType chatType){\n  this.player=player;\n  this.senderObjectId=player.getObjectId();\n  this.senderName=player.getName();\n  this.message=message;\n  this.race=player.getRace();\n  this.chatType=chatType;\n  this.x=player.getX();\n  this.y=player.getY();\n  this.z=player.getZ();\n}\n"}
{"nl": "This method expands/collapses specified component group", "code": "public AemSidekick clickComponentGroupToggle(String groupName){\n  final Map<String,WebElement> groupByNames=getGroupsByNames();\n  if (groupByNames.containsKey(groupName)) {\n    groupByNames.get(groupName).findElement(By.cssSelector(SECTION_TOGGLE_CSS)).click();\n  }\n  return this;\n}\n"}
{"nl": "Return photo sizes in a special format", "code": "public MessagesGetHistoryAttachmentsQuery photoSizes(Boolean value){\n  return unsafeParam(\"photo_sizes\",value);\n}\n"}
{"nl": "Checks that the exporter has been initialized", "code": "private void checkIsInitialized(){\n  Preconditions.checkNotNull(fileSystemDropExporterConfig,getClass().getSimpleName() + \" must be initialized first\");\n}\n"}
{"nl": "Sets the blink animation to all tracks that match trackCode", "code": "private void turnOnTracks(int trackCode){\n  for (int i=0; i < this.tracks.length; i++) {\n    if ((1 << i & trackCode) != 0) {\n      this.tracks[i].setLowAnim(TextureAnimationDrawer.trackAnim);\n    }\n  }\n}\n"}
{"nl": "copy file to destination", "code": "private static void copyFile(File file,InputStream is,String mode) throws IOException, InterruptedException {\n  final String abspath=file.getAbsolutePath();\n  final FileOutputStream out=new FileOutputStream(file);\n  byte buf[]=new byte[1024];\n  int len;\n  while ((len=is.read(buf)) > 0) {\n    out.write(buf,0,len);\n  }\n  out.close();\n  is.close();\n  Runtime.getRuntime().exec(\"chmod \" + mode + \" \"+ abspath).waitFor();\n}\n"}
{"nl": "Called by the Plugin Manager when we need to actually request permissions", "code": "public void requestPermissions(int requestCode){\n}\n"}
{"nl": "returns an exact copy of the entry", "code": "public Entry copy(){\n  return new Entry(x,y,data);\n}\n"}
{"nl": "Dismiss loading dialog", "code": "public void dismissLoadingDialog(){\n  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_TAG);\n  if (frag != null) {\n    Log_OC.d(TAG,\"dismiss loading dialog\");\n    LoadingDialog loading=(LoadingDialog)frag;\n    loading.dismissAllowingStateLoss();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveGetVideosQuery(VkApiClient client,UserActor actor){\n  super(client,\"fave.getVideos\",GetVideosResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "verifies that two matrices are close (1-norm)", "code": "protected void assertClose(RealMatrix m,RealMatrix n,double tolerance){\n  Assert.assertTrue(m.subtract(n).getNorm() < tolerance);\n}\n"}
{"nl": "Set privacy view", "code": "public VideoSaveQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "NON-DOM: check if attribute value is well-formed", "code": "public static final void isAttrValueWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,NamedNodeMap attributes,Attr a,String value,boolean xml11Version){\n  if (a instanceof AttrImpl && ((AttrImpl)a).hasStringValue()) {\n    isXMLCharWF(errorHandler,error,locator,value,xml11Version);\n  }\n else {\n    NodeList children=a.getChildNodes();\n    for (int j=0; j < children.getLength(); j++) {\n      Node child=children.item(j);\n      if (child.getNodeType() == Node.ENTITY_REFERENCE_NODE) {\n        Document owner=a.getOwnerDocument();\n        Entity ent=null;\n        if (owner != null) {\n          DocumentType docType=owner.getDoctype();\n          if (docType != null) {\n            NamedNodeMap entities=docType.getEntities();\n            ent=(Entity)entities.getNamedItemNS(\"*\",child.getNodeName());\n          }\n        }\n        if (ent == null) {\n          String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"UndeclaredEntRefInAttrValue\",new Object[]{a.getNodeName()});\n          reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,\"UndeclaredEntRefInAttrValue\");\n        }\n      }\n else {\n        isXMLCharWF(errorHandler,error,locator,child.getNodeValue(),xml11Version);\n      }\n    }\n  }\n}\n"}
{"nl": "Matrix multiplication result = a * b", "code": "public static void multiply(Matrix a,Matrix b,Matrix result){\n  for (int ri=0; ri < result.rows; ri++) {\n    for (int rc=0; rc < result.cols; rc++) {\n      double sum=0;\n      for (int j=0; j < b.rows; j++) {\n        sum+=a.get(ri,j) * b.get(j,rc);\n      }\n      result.set(ri,rc,sum);\n    }\n  }\n}\n"}
{"nl": "delete the file or the path", "code": "public static int delete(File f) throws IOException {\n  int count=0;\n  if (f.isFile()) {\n    f.delete();\n    count++;\n  }\n else   if (f.isDirectory()) {\n    File[] ff=f.listFiles();\n    if (ff != null && ff.length > 0) {\n      for (      File f1 : ff) {\n        count+=delete(f1);\n      }\n    }\n    f.delete();\n    count++;\n  }\n  return count;\n}\n"}
{"nl": "this tab has been deselected", "code": "public void deactivate(){\n}\n"}
{"nl": "Checks if the given name is a valid Android application package (which has additional requirements beyond a normal Java package)", "code": "public static boolean isValidAndroidPackageName(@NotNull String name){\n  return validateAndroidPackageName(name) == null;\n}\n"}
{"nl": "Paint initialization", "code": "private void initPaint(){\n  mProgressTextPaint.setTextAlign(Paint.Align.CENTER);\n  mProgressTextPaint.setTextSize(mProgressTextSize);\n  mProgressPaint.setStyle(mStyle == SOLID ? Paint.Style.FILL : Paint.Style.STROKE);\n  mProgressPaint.setStrokeWidth(mProgressStrokeWidth);\n  mProgressPaint.setColor(mProgressStartColor);\n  mProgressPaint.setStrokeCap(mCap);\n  mProgressBackgroundPaint.setStyle(mStyle == SOLID ? Paint.Style.FILL : Paint.Style.STROKE);\n  mProgressBackgroundPaint.setStrokeWidth(mProgressStrokeWidth);\n  mProgressBackgroundPaint.setColor(mProgressBackgroundColor);\n  mProgressBackgroundPaint.setStrokeCap(mCap);\n  mBackgroundPaint.setStyle(Paint.Style.FILL);\n  mBackgroundPaint.setColor(mBackgroundColor);\n}\n"}
{"nl": "Cancels the dialog", "code": "public void cancel(){\n  cancelButton.click();\n}\n"}
{"nl": "Sort order", "code": "public FriendsGetOnlineQuery order(FriendsGetOnlineOrder value){\n  return unsafeParam(\"order\",value);\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getEcologicalIndex().equalsIgnoreCase(CalculateEcologicalIndices.GOODALL_NORMALIZED);\n}\n"}
{"nl": "Default sorting: using itemUniqueId", "code": "@Override public int compareTo(BrokerItem o){\n  return itemUniqueId > o.getItemUniqueId() ? 1 : -1;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  AlignmentViewer alignmentViewer=(AlignmentViewer)getViewer();\n  int nSequences=alignmentViewer.getAlignment().getNumberOfSequences();\n  int step=1;\n  if (nSequences > 10000 && nSequences <= 20000)   step=2;\n else   if (nSequences > 20000 && nSequences <= 30000)   step=4;\n else   if (nSequences > 30000)   step=6;\n  execute(\"chart wordCount kmer=25 step=\" + step + \" mindepth=10;\");\n}\n"}
{"nl": "Creates new area from given points", "code": "public PolyArea(ZoneName zoneName,int worldId,Collection<Point2D> points,float zMin,float zMax){\n  this(zoneName,worldId,points.toArray(new Point2D[points.size()]),zMin,zMax);\n}\n"}
{"nl": "display the TXT on the textArea in the server", "code": "void displayText(String text){\n  sdf=new SimpleDateFormat(\"yyyy-MM-dd_HH-mm-ss\");\n  dt=new Date();\n  textArea.appendText(sdf.format(dt) + \">>\" + text+ \"\\n\");\n}\n"}
{"nl": "Base Methods", "code": "@Override public String toString(){\n  return \"Flavor{\" + \"mName='\" + mName + '\\''+ \", mStyleResource=\"+ mStyleResource+ \", mDialogStyleResource=\"+ mDialogStyleResource+ \", mIsDayNight=\"+ mIsDayNight+ '}';\n}\n"}
{"nl": "Return to previous point", "code": "public void goToPreviousBackStack() throws NavigatorException {\n  FragmentManager fragmentManager=((FragmentActivity)mContextReference.getContext()).getSupportFragmentManager();\n  if (canGoBack(fragmentManager)) {\n    fragmentManager.popBackStack();\n  }\n else {\n    throw new NavigatorException(\"You don't go back to this point\");\n  }\n}\n"}
{"nl": "Creates a new KernelShutdownHook", "code": "public KernelShutdownHook(){\n  super(\"KernelShutdownHook\");\n}\n"}
{"nl": "Removes legion from player", "code": "public void resetLegionMember(){\n  setLegionMember(null);\n}\n"}
{"nl": "create an RMA6 file from a BLAST file", "code": "public static void createRMA6FileFromBLAST(String creator,String blastFile,BlastFileFormat format,String queryFile,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {\n  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,format,doc.getBlastMode(),new String[]{blastFile},new String[]{queryFile},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);\n  rma6Creator.parseFiles(progressListener);\n}\n"}
{"nl": "Shrink Wraps around containing widgets", "code": "public static void wrap(ConstraintWidgetContainer root){\n  ArrayList<ConstraintWidget> widgets=root.getChildren();\n  Rectangle all=ScoutArrange.getBoundingBox(widgets);\n  all.x-=sMargin;\n  all.y-=sMargin;\n  all.width+=sMargin * 2;\n  all.height+=sMargin * 2;\n  for (  ConstraintWidget widget : widgets) {\n    widget.setX(widget.getX() - all.x);\n    widget.setY(widget.getY() - all.y);\n  }\n  root.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);\n  root.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);\n  root.setWidth(all.width);\n  root.setHeight(all.height);\n}\n"}
{"nl": "revoke one lease and the key bind to this lease will be removed", "code": "@Override public ListenableFuture<LeaseRevokeResponse> revoke(long leaseId){\n  LeaseRevokeRequest leaseRevokeRequest=LeaseRevokeRequest.newBuilder().setID(leaseId).build();\n  return this.leaseFutureStub.leaseRevoke(leaseRevokeRequest);\n}\n"}
{"nl": "****************************** SKILL TREE QUERIES", "code": "public SkillTreeCursor querySkillTrees(){\n  QueryHelper qh=new QueryHelper();\n  qh.Distinct=true;\n  qh.Table=S.TABLE_SKILL_TREES;\n  qh.Columns=null;\n  qh.Selection=null;\n  qh.SelectionArgs=null;\n  qh.GroupBy=S.COLUMN_SKILL_TREES_NAME;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new SkillTreeCursor(wrapHelper(qh));\n}\n"}
{"nl": "Close the reader", "code": "public static void closeReader(){\n  try {\n    if (reader != null) {\n      reader.close();\n      reader=null;\n    }\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "serverinfo file clean", "code": "private void writeFileClean(){\n  PrintWriter pw;\n  try {\n    pw=new PrintWriter(Settings.sServerInfo);\n    pw.println(\" \");\n    pw.close();\n  }\n catch (  FileNotFoundException e) {\n    System.out.println(\"serverinfo.jrc do not exist\");\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Entry point: functions calls", "code": "public void visitPhpFunctionCall(FunctionReference reference){\n  if (!this.isPropelDefined()) {\n    return;\n  }\n  final String strName=reference.getName();\n  final PsiElement[] arrParameters=reference.getParameters();\n  if (arrParameters.length != 1 || StringUtil.isEmpty(strName) || !strName.equals(\"count\")) {\n    return;\n  }\n  PsiElement objParameter=ExpressionSemanticUtil.getExpressionTroughParenthesis(arrParameters[0]);\n  if (null == objParameter) {\n    return;\n  }\n  if (objParameter instanceof MethodReference) {\n    this.inspectSignature(((MethodReference)objParameter).getSignature(),objParameter,\".count\");\n  }\n  if (objParameter instanceof Variable) {\n    this.inspectSignature(((Variable)objParameter).getSignature(),objParameter,\".count\");\n  }\n}\n"}
{"nl": "Create an empty key store", "code": "public static KeyStore createEmptyKeyStore(){\n  try {\n    KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());\n    keyStore.load(null);\n    return keyStore;\n  }\n catch (  KeyStoreException|NoSuchAlgorithmException|CertificateException|IOException e) {\n    throw new RuntimeException(\"Failed to create empty keystore\",e);\n  }\n}\n"}
{"nl": "Npc starts returning to spawn location", "code": "public static final void emoteStartReturning(Npc owner){\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));\n  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));\n}\n"}
{"nl": "Helper method to delete Stock", "code": "public Boolean deleteStock(EntityManager em,String id){\n  Boolean status=true;\n  Stock stock=null;\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    stock=em.find(Stock.class,id);\n    em.remove(stock);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during delete of Stock. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "Removes all items from the cache", "code": "public void removeAll(){\n  DotCacheAdministrator cache=CacheLocator.getCacheAdministrator();\n  cache.flushGroup(groupName);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetMembersQuery(VkApiClient client){\n  super(client,\"groups.getMembers\",GetMembersResponse.class);\n}\n"}
{"nl": "Set user ids", "code": "public SecureSendNotificationQuery userIds(Integer... value){\n  return unsafeParam(\"user_ids\",value);\n}\n"}
{"nl": "data is sparsearray", "code": "public static void showShareDialog(Activity activity,SparseArray<ShareEntity> data,int requestCode){\n  showShareDialog(activity,ShareConstant.SHARE_CHANNEL_ALL,data,requestCode);\n}\n"}
{"nl": "Unsucbsribe from topic", "code": "public void unSubscribeTopic(String topicName){\n  if (PrefsHelper.hasFCMToken(mContext)) {\n    FirebaseMessaging.getInstance().unsubscribeFromTopic(topicName);\n  }\n}\n"}
{"nl": "/*     ", "code": "@deprecated public void dump(){\n  this.fRData.dump();\n}\n"}
{"nl": "Helper method to instantiate events envelope", "code": "protected EventsEnvelope makeEventEnvelope(Assignment assignment,Event event){\n  return new EventsEnvelope(assignment,event,transactionFactory.newTransaction());\n}\n"}
{"nl": "Creates new form MailPreviewForm", "code": "public MailPreviewForm(){\n  initComponents();\n}\n"}
{"nl": "Disconnect producers on given topic", "code": "private void disconnectProducers(PersistentTopic persistentTopic){\n  List<CompletableFuture<Void>> futures=Lists.newArrayList();\n  ConcurrentOpenHashSet<Producer> producers=persistentTopic.getProducers();\n  producers.forEach(null);\n  FutureUtil.waitForAll(futures).thenRun(null).exceptionally(null);\n}\n"}
{"nl": "Removes the outermost property from a nested getter expression", "code": "private static String unwrap(String expression){\n  if (expression.startsWith(\"((\")) {\n    expression=expression.substring(expression.indexOf(\")\") + 1,expression.length() - 1);\n    if (expression.endsWith(\"]\")) {\n      expression=expression.substring(0,expression.lastIndexOf(\"[\"));\n    }\n else {\n      expression=expression.substring(0,expression.lastIndexOf(\".\"));\n    }\n  }\n  return expression;\n}\n"}
{"nl": "Clears the internal state of the Statistic", "code": "public void clear(){\n  n=0;\n  Arrays.fill(sums,0.0);\n  Arrays.fill(productsSums,0.0);\n}\n"}
{"nl": "Creates a new community", "code": "public GroupsCreateQuery create(UserActor actor,String title){\n  return new GroupsCreateQuery(getClient(),actor,title);\n}\n"}
{"nl": "Open SMS activity to send SMS", "code": "public static void openSendSmsActivity(Context context,String phoneNumber,String body){\n  Intent intent=new Intent(Intent.ACTION_VIEW);\n  String phone=phoneNumber != null ? phoneNumber : \"\";\n  intent.setData(Uri.parse(\"sms:\" + phone));\n  if (StringUtils.isNotBlank(body)) {\n    intent.putExtra(\"sms_body\",body);\n  }\n  startIntentIfPossible(context,intent);\n}\n"}
{"nl": "Procedure Declaration Helper Methods creates procedure name", "code": "private String createName(polyglot.ast.ProcedureDecl procedure){\n  return procedure.name();\n}\n"}
{"nl": "Add property and attribute you need", "code": "public Builder add(String property,Attributes attributes){\n  Map<String,String> map=attributes.getAttributes();\n  StringBuilder stringBuilder=new StringBuilder();\n  stringBuilder.append(property);\n  stringBuilder.append('.');\n  stringBuilder.append(Utils.join(map,'.','(',')'));\n  properties.add(stringBuilder.toString());\n  return this;\n}\n"}
{"nl": "Required for Externalizable", "code": "public AddTypeIndexesRequestInfo(){\n}\n"}
{"nl": "This method logs the DEBUG message", "code": "public final void debug(final Object o){\n  log(Level.DEBUG,o);\n}\n"}
{"nl": "Creates a new instance of NGramHistoDocument", "code": "public NGramHistoDocument(){\n  Graph=new DocumentNGramGraph();\n  Histogram=new DocumentNGramHistogram();\n}\n"}
{"nl": "Parameters list", "code": "public ConditionParameterizedTest(String fieldName,Condition condition,String toFind){\n  this.condition=condition;\n  this.toFind=toFind;\n  this.fieldName=fieldName;\n}\n"}
{"nl": "Generic tab complete method to be called from the command executor object of the platform", "code": "@SuppressWarnings(\"unchecked\") public List<String> onTabComplete(Sender sender,List<String> args){\n  final List<MainCommand> mains=mainCommands.stream().filter(null).collect(Collectors.toList());\n  if (args.size() <= 1) {\n    if (args.isEmpty() || args.get(0).equalsIgnoreCase(\"\")) {\n      return mains.stream().map(null).collect(Collectors.toList());\n    }\n    return mains.stream().map(null).filter(null).collect(Collectors.toList());\n  }\n  Optional<MainCommand> o=mains.stream().filter(null).limit(1).findAny();\n  if (!o.isPresent()) {\n    return Collections.emptyList();\n  }\n  return o.get().onTabComplete(sender,args.subList(1,args.size()),plugin);\n}\n"}
{"nl": "****************************** WEAPON TREE QUERIES", "code": "public WeaponTreeCursor queryWeaponTreeParent(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Selection=\"i1.\" + S.COLUMN_ITEMS_ID + \" = ?\";\n  qh.SelectionArgs=new String[]{String.valueOf(id)};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=null;\n  qh.Limit=null;\n  return new WeaponTreeCursor(wrapJoinHelper(builderWeaponTreeParent(),qh));\n}\n"}
{"nl": "Show soft keyboard", "code": "public static void showSoftKeyboard(Activity activity){\n  showSoftKeyboard(activity,null);\n}\n"}
{"nl": "Resolve the Type value of the given raw Class type, filling the type parameters with the provided actual type arguments", "code": "public static <E>Type<E> valueOf(final Class<E> rawType,final java.lang.reflect.Type... actualTypeArguments){\n  if (rawType == null) {\n    return null;\n  }\n else {\n    return (Type<E>)intern((Class<E>)rawType,actualTypeArguments,new HashSet<java.lang.reflect.Type>());\n  }\n}\n"}
{"nl": "long file getter in memory", "code": "public IntFileGetterPagedMemory(File file) throws IOException {\n  this.file=file;\n  limit=file.length() / 4;\n  System.err.println(\"Opening file: \" + file);\n  raf=new RandomAccessFile(file,\"r\");\n  data=new int[(int)((limit >>> PAGE_BITS)) + 1][];\n  length0=(int)(Math.min(limit,1 << PAGE_BITS));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetByIdQuery(VkApiClient client,UserActor actor,List<String> posts){\n  super(client,\"wall.getById\",Utils.buildParametrizedType(List.class,WallpostFull.class));\n  accessToken(actor.getAccessToken());\n  posts(posts);\n}\n"}
{"nl": "Unexport the ServiceAdmin", "code": "public void unexport(boolean force){\n  if (m_thisRemoteRef != null)   try {\n    if (force)     m_exporter.unexport(true);\n else {\n      long endTime=SystemTime.timeMillis() + MAX_UNEXPORT_DELAY;\n      boolean unexported=false;\n      while (!unexported && (SystemTime.timeMillis() < endTime)) {\n        unexported=m_exporter.unexport(false);\n        if (!unexported)         Thread.yield();\n      }\n      if (!unexported)       m_exporter.unexport(true);\n    }\n  }\n catch (  Exception ex) {\n    if (_logger.isLoggable(Level.SEVERE)) {\n      _logger.log(Level.SEVERE,ex.getMessage(),ex);\n    }\n  }\n}\n"}
{"nl": "Return only audio files that have associated lyrics", "code": "public AudioSearchQuery lyrics(Boolean value){\n  return unsafeParam(\"lyrics\",value);\n}\n"}
{"nl": "Constructs Components object", "code": "public Components(Map<String,ComponentDescription> descriptions){\n  this.descriptions=descriptions;\n}\n"}
{"nl": "mglsadf: sub functions for MGLSA filter", "code": "private static double mglsadff(double x,double b[],int m,double a,double d[],int d_offset){\n  double y=d[d_offset + 0] * b[1];\n  for (int i=1; i < m; i++) {\n    d[d_offset + i]+=a * (d[d_offset + i + 1] - d[d_offset + i - 1]);\n    y+=d[d_offset + i] * b[i + 1];\n  }\n  x-=y;\n  for (int i=m; i > 0; i--)   d[d_offset + i]=d[d_offset + i - 1];\n  d[d_offset + 0]=a * d[d_offset + 0] + (1 - a * a) * x;\n  return x;\n}\n"}
{"nl": "validate a value, and return the compiled form", "code": "public ValidatedInfo validateWithInfo(String content,ValidationContext context,ValidatedInfo validatedInfo) throws InvalidDatatypeValueException {\n  if (context == null)   context=fEmptyContext;\n  if (validatedInfo == null)   validatedInfo=new ValidatedInfo();\n else   validatedInfo.memberType=null;\n  boolean needNormalize=context == null || context.needToNormalize();\n  getActualValue(content,context,validatedInfo,needNormalize);\n  validate(context,validatedInfo);\n  return validatedInfo;\n}\n"}
{"nl": "Stops a local Zk instance, deleting its data directory", "code": "public static void stopLocalZkServer(){\n  try {\n    stopLocalZkServer(true);\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Failed to stop ZK: \" + e);\n  }\n}\n"}
{"nl": "true - comment will be published on behalf of a community, false - on behalf of a user (by default)", "code": "public MarketCreateCommentQuery fromGroup(Boolean value){\n  return unsafeParam(\"from_group\",value);\n}\n"}
{"nl": "Set from list", "code": "public UsersSearchQuery fromList(String... value){\n  return unsafeParam(\"from_list\",value);\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (!super.accept(directory,fileName))   return false;\n  try {\n    return DAAParser.isMeganizedDAAFile((new File(directory,fileName)).getPath(),false);\n  }\n catch (  IOException e) {\n    return false;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FaveAddGroupQuery(VkApiClient client,UserActor actor,int groupId){\n  super(client,\"fave.addGroup\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "on main thread", "code": "private void onFriendsSelected(int resultCode,Intent data){\n  if (resultCode == GamesActivityResultCodes.RESULT_RECONNECT_REQUIRED) {\n    activity.getGameServicesHelper().onSignedOutFromOutside();\n    if (future != null) {\n      Gdx.app.postRunnable(future);\n      future=null;\n    }\n    return;\n  }\n  if (resultCode != Activity.RESULT_OK) {\n    if (future != null) {\n      Gdx.app.postRunnable(future);\n      future=null;\n    }\n    return;\n  }\n  if (controller != null) {\n    throw new IllegalStateException(\"tried to create new game, but there was already another!\");\n  }\n  final ArrayList<String> invitees=data.getStringArrayListExtra(Games.EXTRA_PLAYER_IDS);\n  controller=createController();\n  Games.RealTimeMultiplayer.create(client,RoomConfig.builder(controller).addPlayersToInvite(invitees).setRoomStatusUpdateListener(controller).setMessageReceivedListener(controller).setVariant(variant).build());\n}\n"}
{"nl": "Constructs new instance of <tt>CM_RESTORE_CHARACTER </tt> packet", "code": "public CM_RESTORE_CHARACTER(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Enter point of PresenterFactory", "code": "public static void init(PresenterStorage storage){\n  mInstance=new PresenterFactory(storage);\n}\n"}
{"nl": "Does a HTTP GET", "code": "public Response doGet(String url,Object jsonBody){\n  String formJSON=getJsonString(jsonBody);\n  LOGGER.info(curlCallString(\"GET\",url,formJSON));\n  long startTime=System.currentTimeMillis();\n  Response response;\n  if (formJSON != null) {\n    response=given().spec(this.requestSpec).body(formJSON).get(url);\n  }\n else {\n    response=given().spec(this.requestSpec).get(url);\n  }\n  long endTime=System.currentTimeMillis();\n  long duration=(endTime - startTime);\n  LOGGER.info(\"Duration for GET \" + url + \": \"+ duration);\n  return response;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showTriPlot=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();\n  viewer.setVisible(false);\n}\n"}
{"nl": "Adds +deleted to the query", "code": "public void addDeleted(boolean deleted){\n  query.append(\" +deleted:\" + deleted);\n}\n"}
{"nl": "Rotate the bitmap if the image is in landscape camera", "code": "public static Bitmap rotateImage(Bitmap source,float angle){\n  Bitmap retVal;\n  Matrix matrix=new Matrix();\n  matrix.postRotate(angle);\n  retVal=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),matrix,true);\n  return retVal;\n}\n"}
{"nl": "Computes the call flow function for the given call-site abstraction", "code": "protected Set<D> computeCallFlowFunction(FlowFunction<D> callFlowFunction,D d1,D d2){\n  return callFlowFunction.computeTargets(d2);\n}\n"}
{"nl": "Check number of bytes left", "code": "private int checkSpace(boolean writeCheck){\n  int s;\n  if (writeCheck) {\n    if (wp > rp) {\n      s=rp - wp + size - 1;\n    }\n else     if (wp < rp) {\n      s=rp - wp - 1;\n    }\n else     s=size - 1;\n  }\n else {\n    if (wp > rp) {\n      s=wp - rp;\n    }\n else     if (wp < rp) {\n      s=wp - rp + size;\n    }\n else {\n      s=0;\n    }\n  }\n  return s;\n}\n"}
{"nl": "Returns lowest absolute key (ignoring directonality)", "code": "private K lowestKey(){\n  FastConcurrentSkipListMap.Node<K,V> n=loNode();\n  if (isBeforeEnd(n))   return n.key;\n else   throw new NoSuchElementException();\n}\n"}
{"nl": "Required for Externalizable", "code": "public WriteEntrySpaceOperationResult(){\n}\n"}
{"nl": "gets an getLetterCodeIterator over all taxon names", "code": "public Iterator iterator(){\n  return name2index.keySet().iterator();\n}\n"}
{"nl": "Add a new condition in the query", "code": "public ColumnQuery addCondition(ColumnCondition condition) throws NullPointerException {\n  this.conditions.add(Objects.requireNonNull(condition,\"condition is required\"));\n  return this;\n}\n"}
{"nl": "Write the url to fetch the next stage into the shellcode", "code": "private byte[] writePkgUrl(byte[] stage,String url) throws UnsupportedEncodingException {\n  byte[] pattern=new byte[256];\n  Arrays.fill(pattern,(byte)0x78);\n  List a=Arrays.asList(ArrayUtils.toObject(stage));\n  List b=Arrays.asList(ArrayUtils.toObject(pattern));\n  int idx=Collections.indexOfSubList(a,b);\n  byte[] urlArray=url.getBytes(\"UTF-8\");\n  System.arraycopy(urlArray,0,stage,idx,urlArray.length);\n  Arrays.fill(stage,idx + urlArray.length,idx + 256,(byte)0x0);\n  return stage;\n}\n"}
{"nl": "Finds the root source code folder for the given android target, if any", "code": "@Nullable public static File findPlatformSources(@NotNull IAndroidTarget target){\n  String path=target.getPath(IAndroidTarget.SOURCES);\n  if (path != null) {\n    File platformSource=new File(path);\n    if (platformSource.isDirectory()) {\n      return platformSource;\n    }\n  }\n  return null;\n}\n"}
{"nl": "Requires the orientation name to be the given name (typically Portrait or Landscape)", "code": "@NotNull public NlConfigurationToolbarFixture requireOrientation(@NotNull String name){\n  Wait.seconds(30).expecting(\"configuration to be updated\").until(null);\n  return this;\n}\n"}
{"nl": "read byte", "code": "public int read() throws IOException {\n  return ins.read();\n}\n"}
{"nl": "draw the x axis", "code": "protected void drawXAxis(Graphics2D gc){\n  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));\n  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));\n  gc.setColor(Color.BLACK);\n  int x=5;\n  int y=getHeight() - bottomMargin + 25;\n  gc.drawString(getChartData().getClassesLabel(),x,y);\n}\n"}
{"nl": "If Stmts Creation - only add line-number tags to if (the other stmts needing tags are created elsewhere", "code": "private void createIf2(polyglot.ast.If ifExpr){\n  soot.jimple.NopStmt endTgt=soot.jimple.Jimple.v().newNopStmt();\n  soot.jimple.NopStmt brchTgt=soot.jimple.Jimple.v().newNopStmt();\n  polyglot.ast.Expr condition=ifExpr.cond();\n  createBranchingExpr(condition,brchTgt,false);\n  polyglot.ast.Stmt consequence=ifExpr.consequent();\n  createStmt(consequence);\n  soot.jimple.Stmt goto1=soot.jimple.Jimple.v().newGotoStmt(endTgt);\n  body.getUnits().add(goto1);\n  body.getUnits().add(brchTgt);\n  polyglot.ast.Stmt alternative=ifExpr.alternative();\n  if (alternative != null) {\n    createStmt(alternative);\n  }\n  body.getUnits().add(endTgt);\n}\n"}
{"nl": "Create a new result object based on a server response", "code": "public PlayerLevelUpRewards(final LevelUpRewardsResponse response){\n  this.rewards=response.getItemsAwardedList();\n  this.unlockedItems=response.getItemsUnlockedList();\n  this.status=(rewards.isEmpty() ? Status.ALREADY_ACCEPTED : Status.NEW);\n}\n"}
{"nl": "Returns the result of applying the given row permutation to the matrix", "code": "protected RealMatrix permuteRows(RealMatrix matrix,int[] permutation){\n  if (!matrix.isSquare()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());\n  }\n  if (matrix.getRowDimension() != permutation.length) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,matrix.getRowDimension(),permutation.length);\n  }\n  int n=matrix.getRowDimension();\n  int m=matrix.getColumnDimension();\n  double out[][]=new double[m][n];\n  for (int i=0; i < n; i++) {\n    for (int j=0; j < m; j++) {\n      out[i][j]=matrix.getEntry(permutation[i],j);\n    }\n  }\n  return new Array2DRowRealMatrix(out);\n}\n"}
{"nl": "Puts the controller into inclusion mode to add new nodes", "code": "public void requestAddNodesStart(int inclusionMode){\n  if (exclusion == true || inclusion == true) {\n    logger.debug(\"ZWave exclusion already in progress - aborted\");\n    return;\n  }\n  logger.debug(\"ZWave controller start inclusion - mode {}\",inclusionMode);\n  if (inclusionMode == 2 && hasApiCapability(SerialMessageClass.ExploreRequestInclusion) == false) {\n    inclusionMode=1;\n  }\n  boolean highPower;\n  boolean networkWide;\nswitch (inclusionMode) {\ncase 0:\n    highPower=false;\n  networkWide=false;\nbreak;\ncase 1:\nhighPower=true;\nnetworkWide=false;\nbreak;\ndefault :\nhighPower=true;\nnetworkWide=true;\nbreak;\n}\nenqueue(new AddNodeMessageClass().doRequestStart(highPower,networkWide));\ninclusion=true;\nstartInclusionTimer();\n}\n"}
{"nl": "The default build system", "code": "public static BuildSystem defaultBuildSystem(){\n  return BuildSystemProvider.defaultBuildSystem().buildSystem();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n"}
{"nl": "Does a HTTP GET with an empty body", "code": "public Response doGet(String url){\n  return doGet(url,null);\n}\n"}
{"nl": "draws the x-labels on the specified y-position", "code": "protected void drawLabels(Canvas c,float pos,MPPointF anchor){\n  final float labelRotationAngleDegrees=mXAxis.getLabelRotationAngle();\n  final boolean centeringEnabled=mXAxis.isCenterAxisLabelsEnabled();\n  float[] positions=new float[mXAxis.mEntryCount << 1];\n  for (int i=0; i < positions.length; i+=2) {\n    if (centeringEnabled) {\n      positions[i]=mXAxis.mCenteredEntries[i >> 1];\n    }\n else {\n      positions[i]=mXAxis.mEntries[i >> 1];\n    }\n  }\n  mTrans.pointValuesToPixel(positions);\n  AxisValueFormatter formatter=mXAxis.getValueFormatter();\n  for (int i=0; i < mXAxis.mEntries.length; i++) {\n    float x=positions[i << 1];\n    if (!mViewPortHandler.isInBoundsX(x))     return;\n    String label=formatter.getFormattedValue(mXAxis.mEntries[i],mXAxis);\n    if (mXAxis.isAvoidFirstLastClippingEnabled()) {\n      if (i == 0) {\n        x+=mViewPortHandler.offsetLeft();\n      }\n else       if (i == mXAxis.mEntries.length - 1) {\n        x-=mViewPortHandler.offsetRight();\n      }\n    }\n    drawLabel(c,label,x,pos,anchor,labelRotationAngleDegrees);\n  }\n}\n"}
{"nl": "split into single sample tables", "code": "private Map<Integer,Integer[]>[] sortBySample(int numberOfSamples,Map<Integer,Integer[]> taxonMap){\n  Map<Integer,Integer[]>[] sample2TaxonMap=new HashMap[numberOfSamples];\n  for (int i=0; i < numberOfSamples; i++) {\n    sample2TaxonMap[i]=new HashMap<>();\n  }\n  for (  Integer taxId : taxonMap.keySet()) {\n    Integer[] counts=taxonMap.get(taxId);\n    for (int i=0; i < numberOfSamples; i++) {\n      sample2TaxonMap[i].put(taxId,new Integer[]{counts[i]});\n    }\n  }\n  return sample2TaxonMap;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetMutualQuery(VkApiClient client,UserActor actor){\n  super(client,\"friends.getMutual\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Calculate how many bundles could be handle with the specified resources", "code": "private static long calculateBrokerCapacity(ResourceQuota defaultQuota,double usableCPU,double usableMem,double usableBandwidthOut,double usableBandwidthIn){\n  double cpuCapacity=(usableCPU / cpuUsageByMsgRate) / (defaultQuota.getMsgRateIn() + defaultQuota.getMsgRateOut());\n  double memCapacity=usableMem / defaultQuota.getMemory();\n  double bandwidthOutCapacity=usableBandwidthOut / defaultQuota.getBandwidthOut();\n  double bandwidthInCapacity=usableBandwidthIn / defaultQuota.getBandwidthIn();\n  double capacity=Math.min(cpuCapacity,Math.min(memCapacity,Math.min(bandwidthOutCapacity,bandwidthInCapacity)));\n  return (long)Math.max(capacity,0);\n}\n"}
{"nl": "Check connection type for wifi", "code": "public boolean isWifiConnection(){\n  try {\n    ConnectivityManager manager=(ConnectivityManager)app.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo ni=manager.getActiveNetworkInfo();\n    return ni != null && ni.getType() == ConnectivityManager.TYPE_WIFI;\n  }\n catch (  Throwable t) {\n    return false;\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(getSyntax());\n}\n"}
{"nl": "Closes the channel but ensures that packet is send before close", "code": "public void close(BaseServerPacket packet){\n  channel.write(packet).addListener(ChannelFutureListener.CLOSE);\n}\n"}
{"nl": "Add overlapping view and place it into overlapping container", "code": "public void addOverlappingView(View view,int width,int height){\n  mFrameLayoutOverlappingViewContainer.addView(view,width,height);\n  mOverlappingViewsMap.put(view.getId(),view);\n}\n"}
{"nl": "Don't let anyone instantiate this class", "code": "private JProperties(){\n}\n"}
{"nl": "notify all director event listeners to destroy themselves", "code": "public void notifyDestroyViewer() throws CanceledException {\nsynchronized (directorListeners) {\n    while (directorListeners.size() > 0) {\n      IDirectorListener directorListener=directorListeners.get(0);\n      if (directorListener != this)       directorListener.destroyView();\n      if (directorListeners.size() > 0 && directorListeners.get(0) == directorListener)       directorListeners.remove(0);\n    }\n  }\n  while (viewers.size() > 0) {\n    removeViewer(viewers.get(0));\n  }\n  if (projectsChangedListener != null)   ProjectManager.removeProjectsChangedListener(projectsChangedListener);\n  if (future != null && !future.isDone()) {\n    try {\n      future.cancel(true);\n    }\n catch (    Exception ex) {\n    }\n    future=null;\n  }\n}\n"}
{"nl": "A short alias for blockingWait", "code": "public void delay(int duration) throws InterruptedException {\n  blockingWait(duration);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n"}
{"nl": "This method removes the first entry", "code": "public void removeFirstEntry(){\n  this.announcementList.remove(this.announcementList.firstEntry().getKey());\n}\n"}
{"nl": "check is3G", "code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Sets an event listener that uses method name as an adapter", "code": "public SimpleNotifyContainerConfigurer eventListenerMethod(Object eventListener,String methodName){\n  MethodEventListenerAdapter methodEventListenerAdapter=new MethodEventListenerAdapter();\n  methodEventListenerAdapter.setDelegate(eventListener);\n  methodEventListenerAdapter.setMethodName(methodName);\n  methodEventListenerAdapter.afterPropertiesSet();\n  notifyEventListenerContainer.setEventListener(methodEventListenerAdapter);\n  return this;\n}\n"}
{"nl": "Concerts a String color (#ff882465) to an int color", "code": "public static int convertToColorInt(String a,String r,String g,String b,boolean useAlpha){\n  int alpha=useAlpha ? Integer.parseInt(a,16) : 0xff;\n  int red=Integer.parseInt(r,16);\n  int green=Integer.parseInt(g,16);\n  int blue=Integer.parseInt(b,16);\n  return Color.argb(useAlpha ? alpha : -1,red,green,blue);\n}\n"}
{"nl": "Returns true if player is a legion member", "code": "public boolean isLegionMember(){\n  return legionMember != null;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public final String formatOffsetRFC822(int offset){\n  StringBuilder buf=new StringBuilder();\n  char sign='+';\n  if (offset < 0) {\n    sign='-';\n    offset=-offset;\n  }\n  buf.append(sign);\n  int offsetH=offset / 3600000;\n  offset%=3600000;\n  int offsetM=offset / 60000;\n  offset%=60000;\n  int offsetS=offset / 1000;\n  assert ((offsetH >= 0) && (offsetH < 100));\n  assert ((offsetM >= 0) && (offsetM < 60));\n  assert ((offsetS >= 0) && (offsetS < 60));\n  int num=0;\n  int denom=0;\n  if (offsetS == 0) {\n    offset=offsetH * 100 + offsetM;\n    num=offset % 10000;\n    denom=1000;\n  }\n else {\n    offset=offsetH * 10000 + offsetM * 100 + offsetS;\n    num=offset % 1000000;\n    denom=100000;\n  }\n  while (denom >= 1) {\n    char digit=(char)(num / denom + 48);\n    buf.append(digit);\n    num%=denom;\n    denom/=10;\n  }\n  return buf.toString();\n}\n"}
{"nl": "/*    ", "code": "@deprecated public int compareTo(Region other){\n  return this.id.compareTo(other.id);\n}\n"}
{"nl": "This is synchronized in order to avoid concurrent reconnection state", "code": "private boolean moveToAsyncIfNeeded(Throwable error){\nsynchronized (_operatingModeLock) {\n    if (_syncState && !isClosed()) {\n      int sampleTPBefore=getSampleTPBefore(10,TimeUnit.SECONDS);\n      IMarker currentMarker=getGroupBacklog().getCurrentMarker(getMemberName());\n      String msg=\"moving to async state (measured TP before state change \" + sampleTPBefore + \") minimal async completion marked position \"+ currentMarker;\n      logEventInHistory(msg);\n      if (_specificLogger.isLoggable(Level.FINE))       _specificLogger.fine(msg);\n      _throttleController.suggestThroughPut(sampleTPBefore);\n      _asyncMinimalCompletionMarker=currentMarker;\n      _unresolvedError=error;\n      _beginOfSyncStateMarker=null;\n      _syncState=false;\n      if (error != null) {\n        msg=\"channel changed to asynchronous mode until it will resolve the error [\" + error.getMessage() + \"]\";\n        logEventInHistory(msg);\n        if (_specificLogger.isLoggable(Level.INFO))         _specificLogger.info(msg);\n      }\n    }\n    return !_syncState;\n  }\n}\n"}
{"nl": "Check Network availability", "code": "public static boolean isNetworkAvailable(Context mContext){\n  ConnectivityManager connectivityManager=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n  return connectivityManager.getActiveNetworkInfo() != null && connectivityManager.getActiveNetworkInfo().isConnectedOrConnecting();\n}\n"}
{"nl": "Search zone radius type", "code": "public UsersGetNearbyQuery radius(UsersGetNearbyRadius value){\n  return unsafeParam(\"radius\",value);\n}\n"}
{"nl": "send message to recipient directly", "code": "public <T,R>void sendToTarget(T message,R target){\n  sendToTargetOrType(message,target.getClass(),null);\n}\n"}
{"nl": "Create an <code>unsigned byte</code>", "code": "public static UByte ubyte(long value) throws NumberFormatException {\n  return UByte.valueOf(value);\n}\n"}
{"nl": "Returns the name of this audioplayer", "code": "public String toString(){\n  return \"JavaStreamingAudioPlayer\";\n}\n"}
{"nl": "Rename multiple columns", "code": "public Builder renameColumns(List<String> oldNames,List<String> newNames){\n  return transform(new RenameColumnsTransform(oldNames,newNames));\n}\n"}
{"nl": "Set user id", "code": "protected AccountBanUserQuery userId(int value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "write the footer", "code": "public void write(IOutputWriter writer) throws IOException {\n  writer.writeLong(numberOfReads);\n  writer.writeLong(numberOfMatches);\n  writer.writeInt(availableClassification2Position.size());\n  for (  String classificationName : availableClassification2Position.keySet()) {\n    writer.writeString(classificationName);\n    writer.writeLong(availableClassification2Position.get(classificationName));\n  }\n  writer.writeLong(startHeaderSection);\n  writer.writeLong(endHeaderSection);\n  writer.writeLong(startReadsSection);\n  writer.writeLong(endReadsSection);\n  writer.writeLong(startClassificationsSection);\n  writer.writeLong(endClassificationsSection);\n  writer.writeLong(startAuxDataSection);\n  writer.writeLong(endAuxDataSection);\n  writer.writeLong(startFooterSection);\n  endFooterSection=writer.length() + 8;\n  writer.writeLong(endFooterSection);\n}\n"}
{"nl": "Return <code>True</code> if 'PUBLISH' permissions are defined", "code": "boolean hasPublishPermissions(){\n  return mHasPublishPermissions;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ClassificationViewer viewer=(ClassificationViewer)((Director)getDir()).getViewerByClassName(\"SEED\");\n  return viewer != null && viewer.hasComparableData();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoReorderAlbumsQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"video.reorderAlbums\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedGetListsQuery(VkApiClient client,UserActor actor){\n  super(client,\"newsfeed.getLists\",GetListsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Convert the exploit to a shellcode in binary format", "code": "private byte[] preprocessToBin(byte[] exploit) throws Exception {\n  Pair<ArrayList<Integer>,List<Byte>> data=preprocessRop(exploit);\n  int size=4 + data.first.size() * 4 + data.second.size();\n  byte[] out=new byte[size + ((-size) & 3)];\n  ByteBuffer buf=ByteBuffer.wrap(out).order(ByteOrder.LITTLE_ENDIAN);\n  buf.putInt(data.second.size());\n  for (  Integer val : data.first) {\n    buf.putInt(val);\n  }\n  for (  Byte val : data.second) {\n    buf.put(val);\n  }\n  return out;\n}\n"}
{"nl": "guess whether the given file uses tab as the separator", "code": "public static boolean guessTabSeparator(File file){\n  BufferedReader r=null;\n  try {\n    r=new BufferedReader(new FileReader(file));\n    String aLine=r.readLine();\n    while (aLine != null && (aLine.trim().length() == 0 || aLine.trim().startsWith(\"#\")))     aLine=r.readLine().trim();\n    if (aLine != null)     return aLine.contains(\"\\t\");\n  }\n catch (  Exception ex) {\n  }\n finally {\n    if (r != null)     try {\n      r.close();\n    }\n catch (    IOException e) {\n    }\n  }\n  return false;\n}\n"}
{"nl": "load the Bean by the query, and order", "code": "public static <T extends Bean>T load(Bson query,Bson order,Class<T> t){\n  String collection=getCollection(t);\n  if (collection != null) {\n    try {\n      T obj=t.newInstance();\n      return load(query,order,obj);\n    }\n catch (    Exception e) {\n      if (log.isErrorEnabled())       log.error(e.getMessage(),e);\n    }\n  }\n  return null;\n}\n"}
{"nl": "Creates a new instance of INSECTFileDB", "code": "public INSECTFileRawDB(String sPrefix,String sBaseDir){\n  super(sPrefix,sBaseDir);\n}\n"}
{"nl": "Checks if the traffic is older than the validity interval", "code": "private boolean trafficExpired(AirMapTraffic traffic){\n  int timeInterval=30;\n  return new Date(traffic.getIncomingTime().getTime() + timeInterval * 1000).before(new Date());\n}\n"}
{"nl": "Connect without reconnect if connected", "code": "public void connect(List<StompHeader> _headers){\n  connect(_headers,false);\n}\n"}
{"nl": "constructs an instance and sets to the given format", "code": "public MatchBlockRMA2Formatter(String format){\n  this.format=format;\n  decode(format);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public CompactCharArray(String indexArray,String valueArray){\n  this(Utility.RLEStringToCharArray(indexArray),Utility.RLEStringToCharArray(valueArray));\n}\n"}
{"nl": "update the cache using the given statuses", "code": "protected List<IResource> updateCache(IResource parent,final ISVNStatus[] statuses) throws CoreException {\n  final List<IResource> result=new ArrayList<IResource>();\n  if (statuses != null) {\n    for (    ISVNStatus status : statuses) {\n      IResource resource=SVNWorkspaceRoot.getResourceFor(parent,status);\n      result.add(updateCache(resource,status));\n    }\n  }\n  return result;\n}\n"}
{"nl": "json --> obj", "code": "public static WxMenu fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxMenu.class);\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent event){\n  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();\n  File lastOpenFile=ProgramProperties.getFile(MeganProperties.READSFILE);\n  if (lastOpenFile != null) {\n    lastOpenFile=new File(lastOpenFile.getParentFile(),Basic.replaceFileSuffix(lastOpenFile.getName(),\".fna\"));\n  }\n  final FastaFileFilter fastAFileFilter=new FastaFileFilter();\n  fastAFileFilter.add(\"fastq\");\n  fastAFileFilter.add(\"fnq\");\n  fastAFileFilter.add(\"faq\");\n  fastAFileFilter.setAllowGZipped(true);\n  fastAFileFilter.setAllowZipped(true);\n  List<File> files=ChooseFileDialog.chooseFilesToOpen(importBlastDialog,lastOpenFile,fastAFileFilter,fastAFileFilter,event,\"Open reads file(s)\");\n  if (files != null && files.size() > 0) {\n    ProgramProperties.put(MeganProperties.READSFILE,files.get(0).getPath());\n    try {\n      for (      File file : files) {\n        if (!file.exists())         throw new IOException(\"No such file: \" + file);\n        if (!file.canRead())         throw new IOException(\"Cannot read file: \" + file);\n      }\n      importBlastDialog.setReadFileName(Basic.toString(files,\"\\n\"));\n      importBlastDialog.getReadFileNameField().setText(Basic.toString(files,\"\\n\"));\n    }\n catch (    IOException ex) {\n      NotificationsInSwing.showError(getViewer().getFrame(),\"Failed to load file: \" + ex.getMessage());\n    }\n  }\n}\n"}
{"nl": "Create a new result", "code": "public Result(int event,Object value){\n  this.event=event;\n  this.value=value;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public String toRules(boolean escapeUnprintable){\n  return this.data.ruleSet.toRules(escapeUnprintable);\n}\n"}
{"nl": "Convert PX to SP", "code": "public static int pxToSp(Context context,float pxValue){\n  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;\n  return (int)(pxValue / fontScale + 0.5f);\n}\n"}
{"nl": "Creates a new scanner", "code": "public _AidlLexer(java.io.Reader in){\n  this.zzReader=in;\n}\n"}
{"nl": "Pretty-prints the given list fixture", "code": "@NotNull public static String listToString(@NotNull JListFixture list){\n  return listToString(list,0,Integer.MAX_VALUE,40);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"move sample=\");\n  Set<String> samples=new HashSet<>();\n  while (!np.peekMatchIgnoreCase(\"direction\")) {\n    String attribute=np.getWordRespectCase();\n    samples.add(attribute);\n  }\n  np.matchIgnoreCase(\"direction=\");\n  String direction=np.getWordMatchesIgnoringCase(\"up down\");\n  np.matchIgnoreCase(\";\");\n  if (samples.size() > 0) {\n    final SamplesViewer viewer=((SamplesViewer)getViewer());\n    viewer.getSamplesTable().moveSamples(direction.equalsIgnoreCase(\"up\"),samples.toArray(new String[samples.size()]));\n  }\n}\n"}
{"nl": "Helper static method to generate Shield Instances", "code": "public static <T>T make(Class<T> shieldClass,RSHub rsHub){\n  return inst.make(shieldClass,rsHub,RSHub.class);\n}\n"}
{"nl": "Converts name to valid pattern For example : \"atracer\" -> \"Atracer\"", "code": "public static String convertName(String name){\n  if (!name.isEmpty()) {\n    if (NameConfig.ALLOW_CUSTOM_NAMES) {\n      return name;\n    }\n else {\n      return name.substring(0,1).toUpperCase() + name.toLowerCase().substring(1);\n    }\n  }\n else {\n    return \"\";\n  }\n}\n"}
{"nl": "Search user role mappings by params", "code": "@Override public List<UserRole> searchUserRole(UserRole userRole){\n  return sessionTemplate.selectList(NAMESPACE + \".searchUserRole\",userRole);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetCallbackServerSettingsQuery(VkApiClient client,Actor actor,int groupId){\n  super(client,\"groups.getCallbackServerSettings\",GetCallbackServerSettingsResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n}\n"}
{"nl": "constructs a new array of the given size", "code": "public XIntArray(long size){\n  this((byte)(Math.min(30,1 + Math.max(10,(int)(Math.log(size) / Math.log(2))))));\n  int segment=(int)(size >>> SEGMENT_BITS);\n  grow(segment + 1);\n}\n"}
{"nl": "Checks whether this result object contains a sink with the given method signature", "code": "public boolean containsSinkMethod(String sinkSignature){\n  return !findSinkByMethodSignature(sinkSignature).isEmpty();\n}\n"}
{"nl": "Add overlapping view and place it into overlapping container", "code": "public void addOverlappingView(View view,int index,ViewGroup.LayoutParams params){\n  mFrameLayoutOverlappingViewContainer.addView(view,index,params);\n  mOverlappingViewsMap.put(view.getId(),view);\n}\n"}
{"nl": "A method to be called when a character data node is about to be replaced", "code": "void replacingData(NodeImpl node){\n}\n"}
{"nl": "check connectivity and inflate connectivity view accordingly", "code": "private void inflateConnectivity(){\n  if (isConnected) {\n    if (connectivityView.getVisibility() == VISIBLE) {\n      if (!isConnectivityLayoutOverridden()) {\n        showConnected();\n      }\n else {\n        showCustomConnected();\n      }\n    }\n  }\n else {\n    if (!isConnectivityLayoutOverridden()) {\n      showDisconnected();\n    }\n else {\n      showCustomDisonnected();\n    }\n  }\n}\n"}
{"nl": "Set fields", "code": "public AccountGetInfoQuery fields(List<AccountGetInfoField> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Create a new ThresholdValues", "code": "public ThresholdValues(double lowThreshold,double highThreshold){\n  this.lowThreshold=lowThreshold;\n  this.currentLowThreshold=lowThreshold;\n  this.highThreshold=highThreshold;\n  this.currentHighThreshold=highThreshold;\n}\n"}
{"nl": "Adds the equipment id as dependency to this tag", "code": "public boolean addEquipmentId(final Long equipmentId){\n  if (equipmentId != null && equipmentId > 0) {\n    return equipmentIds.add(equipmentId);\n  }\n  return false;\n}\n"}
{"nl": "search for tag named <code>aName</code>", "code": "private int searchForTag(String aName){\n  if (mTagList == null)   return -1;\n  int i=0;\n  Iterator<Tag> it=mTagList.iterator();\n  while (it.hasNext()) {\n    Tag tag=it.next();\n    if (tag.getName().equals(aName))     return i;\n    i++;\n  }\n  return -1;\n}\n"}
{"nl": "Add some patterns where this variable is a relation and the given variable is a roleplayer of that relation", "code": "private Stream<MultiTraversal> addRelatesPattern(String start,String casting,VarAdmin rolePlayer){\n  String other=rolePlayer.getName();\n  return Stream.of(MultiTraversal.create(Fragment.create(null,EDGE_BOUNDED,start,casting),Fragment.create(null,EDGE_UNBOUNDED,casting,start)),MultiTraversal.create(Fragment.create(null,EDGE_UNIQUE,casting,other),Fragment.create(null,EDGE_BOUNDED,other,casting)));\n}\n"}
{"nl": "remove a viewer from this doc", "code": "public void removeViewer(IDirectableViewer viewer){\n  viewers.remove(viewer);\n  directorListeners.remove(viewer);\n  ProjectManager.projectWindowChanged(this,viewer,false);\n  if (viewers.isEmpty())   ProjectManager.removeProject(this);\n}\n"}
{"nl": "Lifecycle Methods", "code": "@Override protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  overridePendingTransition(0,0);\n  Scoop.getInstance().apply(this);\n  setContentView(R.layout.activity_main);\n  ButterKnife.bind(this);\n  Scoop.getInstance().bind(this);\n  setSupportActionBar(mAppBar);\n}\n"}
{"nl": "Progress monitor helpers", "code": "public static void checkCanceled(IProgressMonitor monitor){\n  if (monitor.isCanceled())   throw new OperationCanceledException();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetByIdQuery(VkApiClient client,List<String> photos){\n  super(client,\"photos.getById\",Utils.buildParametrizedType(List.class,Photo.class));\n  photos(photos);\n}\n"}
{"nl": "Restarts player in the soft way (didn't release all resurces and callbacks)", "code": "public void softRestart(){\n  if (mediaPlayer != null) {\n    resetPlayer();\n    prepare();\n  }\n}\n"}
{"nl": "Set preview", "code": "public BoardGetTopicsQuery preview(BoardGetTopicsPreview value){\n  return unsafeParam(\"preview\",value);\n}\n"}
{"nl": "Load Store location", "code": "private void updateStoreLocation(){\n  loadFolderLoc=CarbonDataProcessorUtil.getLocalDataFolderLocation(meta.getDatabaseName(),meta.getTableName(),meta.getTaskNo(),meta.getPartitionID(),meta.getSegmentId() + \"\",false);\n}\n"}
{"nl": "is file acceptable?", "code": "@Override public boolean accept(File directory,String fileName){\n  if (fileName.startsWith(\"!!!\"))   return true;\n  if (!super.accept(directory,fileName))   return false;\n  String firstLine=Basic.getFirstLineFromFile(new File(fileName));\n  return firstLine != null && firstLine.startsWith(\"BLASTP\");\n}\n"}
{"nl": "Adds a host limit to the query (given host AND System HOST", "code": "public void addHostAndIncludeSystemHost(String hostIdentifier){\n  query.append(\" +(conhost:SYSTEM_HOST conhost:\" + hostIdentifier + \")\");\n}\n"}
{"nl": "Edits a collection of items", "code": "public MarketEditAlbumQuery editAlbum(UserActor actor,int ownerId,int albumId,String title){\n  return new MarketEditAlbumQuery(getClient(),actor,ownerId,albumId,title);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AppsGetCatalogQuery(VkApiClient client,UserActor actor,int count){\n  super(client,\"apps.getCatalog\",GetCatalogResponse.class);\n  accessToken(actor.getAccessToken());\n  count(count);\n}\n"}
{"nl": "Construct a DOMStringListImpl from an ArrayList", "code": "public DOMStringListImpl(ArrayList params){\n  fStrings=params;\n}\n"}
{"nl": "Updates the assignment count of an experiment on a per bucket basis", "code": "@Override @Timed public void updateBucketAssignmentCount(Experiment experiment,Assignment assignment,boolean countUp){\n  Bucket.Label bucketLabel=assignment.getBucketLabel();\n  Bucket.Label bucketLabel1=null;\n  String CQL;\n  bucketLabel1=(bucketLabel == null) ? Bucket.Label.valueOf(\"NULL\") : bucketLabel;\n  if (countUp) {\n    CQL=\"UPDATE bucket_assignment_counts SET bucket_assignment_count = bucket_assignment_count + 1 \" + \"WHERE experiment_id =? and bucket_label = ?\";\n  }\n else {\n    CQL=\"UPDATE bucket_assignment_counts SET bucket_assignment_count = bucket_assignment_count - 1 \" + \"WHERE experiment_id =? and bucket_label = ?\";\n  }\n  try {\n    driver.getKeyspace().prepareQuery(keyspace.bucketAssignmentCountsCF()).withCql(CQL).asPreparedStatement().withByteBufferValue(experiment.getID(),ExperimentIDSerializer.get()).withByteBufferValue(bucketLabel1,BucketLabelSerializer.get()).execute();\n  }\n catch (  ConnectionException e) {\n    throw new RepositoryException(\"Could not update the bucket count for experiment \" + experiment.getID() + \" bucket \"+ bucketLabel1.toString(),e);\n  }\n}\n"}
{"nl": "Confirms last step", "code": "public void createSite(){\n  creteSiteButton.click();\n}\n"}
{"nl": "Long Response Retryer", "code": "public static long retryInfinitelyLong(final Callable<Long> callable){\n  return longResponseRetryer.retryInfinitely(callable);\n}\n"}
{"nl": "Disable event (if enabled)", "code": "public static void disable(String event){\n  instance.disabled.add(event);\n  log(event + \" disabled\");\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getNumberOfSequences() > 0;\n}\n"}
{"nl": "Extendable Singleton", "code": "protected MsSqlDatabaseType(){\n}\n"}
{"nl": "Creates a new instance of InventoryException", "code": "public InventoryException(){\n  super();\n}\n"}
{"nl": "calculates the distance between two widgets (assumed to be rectangles)", "code": "static float distance(Rectangle a,Rectangle b){\n  float ax1, ax2, ay1, ay2;\n  float bx1, bx2, by1, by2;\n  ax1=a.x;\n  ax2=a.x + a.width;\n  ay1=a.y;\n  ay2=a.y + a.height;\n  bx1=b.x;\n  bx2=b.x + b.width;\n  by1=b.y;\n  by2=b.y + b.height;\n  float xdiff11=Math.abs(ax1 - bx1);\n  float xdiff12=Math.abs(ax1 - bx2);\n  float xdiff21=Math.abs(ax2 - bx1);\n  float xdiff22=Math.abs(ax2 - bx2);\n  float ydiff11=Math.abs(ay1 - by1);\n  float ydiff12=Math.abs(ay1 - by2);\n  float ydiff21=Math.abs(ay2 - by1);\n  float ydiff22=Math.abs(ay2 - by2);\n  float xmin=Math.min(Math.min(xdiff11,xdiff12),Math.min(xdiff21,xdiff22));\n  float ymin=Math.min(Math.min(ydiff11,ydiff12),Math.min(ydiff21,ydiff22));\n  boolean yOverlap=ay1 <= by2 && by1 <= ay2;\n  boolean xOverlap=ax1 <= bx2 && bx1 <= ax2;\n  float xReturn=(yOverlap) ? xmin : (float)Math.hypot(xmin,ymin);\n  float yReturn=(xOverlap) ? ymin : (float)Math.hypot(xmin,ymin);\n  return Math.min(xReturn,yReturn);\n}\n"}
{"nl": "Set the background color of the left circles", "code": "public Builder stepNumberBackgroundColor(int stepNumberBackgroundColor){\n  this.stepNumberBackgroundColor=stepNumberBackgroundColor;\n  return this;\n}\n"}
{"nl": "read long, little endian", "code": "public long readLong() throws IOException {\n  if (ins.read(bytes,0,8) < 8)   throw new IOException(\"buffer underflow\");\n  return (((long)bytes[0] & 0xFF)) | (((long)bytes[1] & 0xFF) << 8) | (((long)bytes[2] & 0xFF) << 16)| (((long)bytes[3] & 0xFF) << 24)| (((long)bytes[4] & 0xFF) << 32)| (((long)bytes[5] & 0xFF) << 40)| (((long)bytes[6] & 0xFF) << 48)| (((long)bytes[7] & 0xFF) << 56);\n}\n"}
{"nl": "helper method that returns current state of data structure used to track acks for batch messages", "code": "public boolean isBatchingAckTrackerEmpty(){\n  return batchMessageAckTracker.isEmpty();\n}\n"}
{"nl": "upload file to storage server (by file name)", "code": "public String[] upload_file(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_file(group_name,local_filename,file_ext_name,meta_list);\n}\n"}
{"nl": "Check whether player can use warehouse", "code": "public static boolean canUseWarehouse(Player player){\n  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canUseWarehouse.ordinal()]) {\n    if (!restrictions.canUseWarehouse(player)) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Config plugin", "code": "public void configPlugin(PluginLoader pluginLoader){\n}\n"}
{"nl": "Prints out a field summary", "code": "public String toString(){\n  ArrayList fields=new ArrayList(7);\n  fields.add(codebase);\n  fields.add(policy);\n  fields.add(classpath);\n  fields.add(implClassName);\n  fields.add(((serverConfigArgs == null) ? null : Arrays.asList(serverConfigArgs)));\n  fields.add(lifeCycle);\n  fields.add(servicePreparer);\n  return fields.toString();\n}\n"}
{"nl": "compute the bit score from a raw score", "code": "public float computeAlignmentBitScore(int rawScore){\n  return (float)((lambda * rawScore - lnK) / LN_2);\n}\n"}
{"nl": "Appends additional fields to this access path", "code": "public AccessPath appendFields(SootField[] apFields,Type[] apFieldTypes,boolean taintSubFields){\n  int offset=this.fields == null ? 0 : this.fields.length;\n  SootField[] fields=new SootField[offset + (apFields == null ? 0 : apFields.length)];\n  Type[] fieldTypes=new Type[offset + (apFields == null ? 0 : apFields.length)];\n  if (this.fields != null) {\n    System.arraycopy(this.fields,0,fields,0,this.fields.length);\n    System.arraycopy(this.fieldTypes,0,fieldTypes,0,this.fieldTypes.length);\n  }\n  if (apFields != null && apFields.length > 0) {\n    System.arraycopy(apFields,0,fields,offset,apFields.length);\n    System.arraycopy(apFieldTypes,0,fieldTypes,offset,apFieldTypes.length);\n  }\n  return new AccessPath(this.value,fields,baseType,fieldTypes,taintSubFields);\n}\n"}
{"nl": "Add an animation to the AnimationSet", "code": "public void add(Animation animation){\n  mAnimations.add(animation);\n}\n"}
{"nl": "Execute aggregation query", "code": "public static IQueryResultSet<IEntryPacket> aggregate(QueryTemplatePacket template,AggregationSet aggregationSet,IJSpace space,Transaction txn,int modifiers) throws SQLException {\n  AggregationResult aggregateResult=null;\n  try {\n    aggregateResult=((ISpaceProxy)space).aggregate(template,aggregationSet,txn,modifiers);\n    return convertAggregationResult(aggregationSet,aggregateResult);\n  }\n catch (  Exception e) {\n    throw new SQLException(e.getMessage(),e);\n  }\n}\n"}
{"nl": "is the given file a MALT or Diamond -generated SAM file?", "code": "public static boolean IsMaltOrDiamondSAMFile(File file){\n  String suffix=Basic.getFileSuffix(Basic.getFileNameWithoutZipOrGZipSuffix(file.getName()));\n  if (suffix == null)   return false;\n  if (!suffix.toLowerCase().equals(\".sam\"))   return false;\n  try {\n    try (FileInputIterator it=new FileInputIterator(file.getPath())){\n      while (it.hasNext()) {\n        String aLine=it.next();\n        if (aLine.startsWith(\"@\")) {\n          if (aLine.contains(\"PN:MALT\") || (aLine.contains(\"PN:DIAMOND\")))           return true;\n        }\n else {\n          return false;\n        }\n      }\n    }\n   }\n catch (  IOException e) {\n  }\n  return false;\n}\n"}
{"nl": "merges a set of samples and produces a new sample", "code": "public SampleAttributeTable mergeSamples(Collection<String> samples,String newName){\n  SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();\n  Map<String,Object> attribute2value=new HashMap<>();\n  for (  String attribute : getAttributeSet()) {\n    boolean valueMismatch=false;\n    Object previousValue=null;\n    for (    String sample : samples) {\n      Object value=table.get(sample,attribute);\n      if (value != null) {\n        if (previousValue == null)         previousValue=value;\n else         if (!value.equals(previousValue)) {\n          valueMismatch=true;\n          break;\n        }\n      }\n    }\n    if (!valueMismatch && previousValue != null) {\n      attribute2value.put(attribute,previousValue);\n    }\n  }\n  sampleAttributeTable.addSample(newName,attribute2value,true,true);\n  return sampleAttributeTable;\n}\n"}
{"nl": "Initialise the P-array and S-boxes", "code": "private void initArrays(){\n  int keyIndex=0;\n  for (int i=0; i < 18; i++) {\n    int data=0;\n    for (int j=0; j < 4; j++) {\n      data=(data << 8) | (blowfishKey[keyIndex++] & 0xFF);\n      if (keyIndex >= blowfishKey.length) {\n        keyIndex=0;\n      }\n    }\n    pArray[i]=PARRAY_INIT[i] ^ data;\n  }\n  byte[] b=new byte[8];\n  for (int i=0; i < 18; i+=2) {\n    cipher(b);\n    pArray[i]=byteArrayToInteger(b,0);\n    pArray[i + 1]=byteArrayToInteger(b,4);\n  }\n  for (int i=0; i < 4; i++) {\n    initSBox(b,sBoxes[i]);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public FriendsGetRequestsQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"friends.getRequests\",GetRequestsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "Constructs a new cluster info with null values on all the fields", "code": "public ClusterInfo(){\n}\n"}
{"nl": "Will be called from effect controller when effect ends", "code": "@Override public void endEffect(Effect effect){\n  Creature effected=effect.getEffected();\n  effected.getGameStats().endEffect(effect);\n}\n"}
{"nl": "merge RMA files", "code": "public static void main(String[] args){\n  try {\n    ProgramProperties.setProgramName(\"Blast2RMA\");\n    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);\n    PeakMemoryUsageMonitor.start();\n    (new BLAST2RMA6()).run(args);\n    System.err.println(\"Total time:  \" + PeakMemoryUsageMonitor.getSecondsSinceStartString());\n    System.err.println(\"Peak memory: \" + PeakMemoryUsageMonitor.getPeakUsageString());\n    System.exit(0);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n    System.exit(1);\n  }\n}\n"}
{"nl": "Creates and validates Refresh token", "code": "public static Optional<RefreshToken> create(RawAccessJwtToken token,String signingKey){\n  Jws<Claims> claims=token.parseClaims(signingKey);\n  List<String> scopes=claims.getBody().get(\"scopes\",List.class);\n  if (scopes == null || scopes.isEmpty() || !scopes.stream().filter(null).findFirst().isPresent()) {\n    return Optional.empty();\n  }\n  return Optional.of(new RefreshToken(claims));\n}\n"}
{"nl": "ignorm: gain normalization", "code": "public static void gnorm(double c1[],double c2[],int m,double g){\n  if (g != 0.0) {\n    double k=1.0 + g * c1[0];\n    for (; m >= 1; m--)     c2[m]=c1[m] / k;\n    c2[0]=Math.pow(k,1.0 / g);\n  }\n else {\n    System.arraycopy(c1,1,c2,1,m - 1);\n    c2[0]=Math.exp(c1[0]);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PlacesGetCheckinsQuery(VkApiClient client,UserActor actor){\n  super(client,\"places.getCheckins\",GetCheckinsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Brings up the UI to perform crop on passed image URI", "code": "private void performCrop(Uri picUri,int destType,Intent cameraIntent){\n  try {\n    Intent cropIntent=new Intent(\"com.android.camera.action.CROP\");\n    cropIntent.setDataAndType(picUri,\"image/*\");\n    cropIntent.putExtra(\"crop\",\"true\");\n    if (targetWidth > 0) {\n      cropIntent.putExtra(\"outputX\",targetWidth);\n    }\n    if (targetHeight > 0) {\n      cropIntent.putExtra(\"outputY\",targetHeight);\n    }\n    if (targetHeight > 0 && targetWidth > 0 && targetWidth == targetHeight) {\n      cropIntent.putExtra(\"aspectX\",1);\n      cropIntent.putExtra(\"aspectY\",1);\n    }\n    croppedUri=Uri.fromFile(createCaptureFile(this.encodingType,System.currentTimeMillis() + \"\"));\n    cropIntent.putExtra(\"output\",croppedUri);\n    if (this.cordova != null) {\n      this.cordova.startActivityForResult((CordovaPlugin)this,cropIntent,CROP_CAMERA + destType);\n    }\n  }\n catch (  ActivityNotFoundException anfe) {\n    Log.e(LOG_TAG,\"Crop operation not supported on this device\");\n    try {\n      processResultFromCamera(destType,cameraIntent);\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n      Log.e(LOG_TAG,\"Unable to write to file\");\n    }\n  }\n}\n"}
{"nl": "remove an attribute", "code": "public void removeAttribute(String attribute){\n  if (table.columnKeySet().contains(attribute)) {\n    attributeOrder.remove(attribute);\n    attribute2type.keySet().remove(attribute);\n    table.removeColumn(attribute);\n  }\n}\n"}
{"nl": "Remove all listeners", "code": "public void clear(){\n  _listeners.clear();\n}\n"}
{"nl": "Create the Schema", "code": "public Schema build(){\n  return new Schema(this);\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.isUseColors();\n}\n"}
{"nl": "Hide share features sections that are not enabled", "code": "private void hideNotEnabledShareSections(View view){\n  LinearLayout shareWithUsersSection=(LinearLayout)view.findViewById(R.id.shareWithUsersSection);\n  LinearLayout shareViaLinkSection=(LinearLayout)view.findViewById(R.id.shareViaLinkSection);\n  boolean shareViaLinkAllowed=getActivity().getResources().getBoolean(R.bool.share_via_link_feature);\n  boolean shareWithUsersAllowed=getActivity().getResources().getBoolean(R.bool.share_with_users_feature);\n  if (!shareViaLinkAllowed) {\n    shareViaLinkSection.setVisibility(View.GONE);\n  }\n  if (!shareWithUsersAllowed) {\n    shareWithUsersSection.setVisibility(View.GONE);\n  }\n}\n"}
{"nl": "Creates a storable headphone fence which will be valid (during around 5seconds) when headphones unplugged from the device", "code": "public static StorableHeadphoneFence unplugging(){\n  return new StorableHeadphoneFence(UNPLUGGING);\n}\n"}
{"nl": "execute shell command, default return result msg", "code": "public static CommandResult execCommand(String command,boolean isRoot,String path){\n  return execCommand(new String[]{command},isRoot,true,path);\n}\n"}
{"nl": "Remove disappear event", "code": "@Override public void unbindDisappearEvent(WXComponent component){\n  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getInnerView());\n  if (appearMap == null) {\n    return;\n  }\n  AppearData appearData=appearMap.get(component.getRef());\n  if (appearData == null) {\n    return;\n  }\n  appearData.hasDisappear=false;\n  if (!appearData.hasAppear) {\n    appearMap.remove(component.getRef());\n  }\n}\n"}
{"nl": "Create an instance bound to the property context", "code": "public DriverConfiguration(final String propertyContext){\n  super();\n  properties=create(checkNotNull(propertyContext));\n}\n"}
{"nl": "When source server refuse to do transfer with reason", "code": "public void onTaskStop(int taskId,String reason){\n  PlayerTransferTask task=this.tasks.remove(taskId);\n  task.status=PlayerTransferTask.STATUS_ERROR;\n  task.comment=reason;\n  this.dao.update(task);\n}\n"}
{"nl": "add times to underspecified (incomplete) intervals", "code": "public void updateBoundaries(){\n  PraatInterval prevInterval=null;\n  for (int index=0; index < getNumberOfIntervals(); index++) {\n    PraatInterval interval=getInterval(index);\n    if (!interval.isComplete()) {\n      if (prevInterval == null) {\n        interval.setXmin(0);\n      }\n else {\n        interval.setXmin(prevInterval.getXmax());\n      }\n      if (interval.getDuration() == 0.0) {\n        interval.setDuration(1e-15);\n      }\n      interval.setXmax(interval.getXmin() + interval.getDuration());\n    }\n    prevInterval=interval;\n  }\n}\n"}
{"nl": "Starts Movies List Request", "code": "private SearchJSONResults startMovieFromListRequest(String query) throws InternetConnectionException {\n  if (isThereInternetConnection(mContext)) {\n    try {\n      return mWebServicesApiCallsImpl.getMoviesList(query);\n    }\n catch (    RetrofitError e) {\n      throw new InternetConnectionException(e.getMessage());\n    }\n  }\n else {\n    throw new InternetConnectionException(mContext.getString(R.string.internet_connection_error));\n  }\n}\n"}
{"nl": "Writes a 2D 4 byte position information", "code": "@Override public final void writePos(final Point s){\n  writeShort(s.x);\n  writeShort(s.y);\n}\n"}
{"nl": "decompresses an array of bytes to bytes", "code": "public int inflateByteArray(int numberOfBytes,byte[] source,byte[] target) throws DataFormatException {\n  if (numberOfBytes == 0)   return 0;\n  if (numberOfBytes < 0) {\n    System.arraycopy(source,0,target,0,source.length);\n    return Math.abs(numberOfBytes);\n  }\n  inflater.setInput(source,0,numberOfBytes);\n  int resultLength=inflater.inflate(target);\n  inflater.reset();\n  return resultLength;\n}\n"}
{"nl": "reads the named classification block", "code": "public int read(ClassificationsFooterRMA3 classificationsFooter,InputReader reader,int classId) throws IOException {\n  map.clear();\n  long start=classificationsFooter.getStart(classificationType);\n  if (start != 0) {\n    final int numberOfClasses=reader.readInt();\n    for (int i=0; i < numberOfClasses; i++) {\n      int currentId=reader.readInt();\n      int sum=reader.readInt();\n      reader.skipBytes(8 * sum);\n      if (currentId == classId) {\n        map.put(currentId,sum);\n        break;\n      }\n    }\n  }\n  return map.size();\n}\n"}
{"nl": "check NetworkAvailable", "code": "public static boolean isNetworkAvailable(Context context){\n  ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n  if (null == manager)   return false;\n  NetworkInfo info=manager.getActiveNetworkInfo();\n  if (null == info || !info.isAvailable())   return false;\n  return true;\n}\n"}
{"nl": "add named sample to given document", "code": "public void addSample(String sample,int sampleSize,int srcId,BlastMode blastMode,Map<String,Map<Integer,Integer[]>> classification2class2counts){\n  getDataTable().addSample(sample,sampleSize,blastMode,srcId,classification2class2counts);\n}\n"}
{"nl": "Converts this object to a string", "code": "public String toString(){\n  return \"CMUClusterUnitVoice\";\n}\n"}
{"nl": "Creates the channel selection object", "code": "private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){\n  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());\n  FilterFactory ff=CommonFactoryFinder.getFilterFactory();\n  Map<String,Expression> options=contrastEnhancement.getOptions();\n  options.put(\"algorithm\",ff.literal(\"StretchToMinimumMaximum\"));\n  options.put(\"minValue\",ff.literal(\"1\"));\n  options.put(\"maxValue\",ff.literal(\"5\"));\n  SelectedChannelType channelType=styleFactory.createSelectedChannelType(\"channel name\",contrastEnhancement);\n  SelectedChannelType[] channels=new SelectedChannelType[3];\n  channels[0]=channelType;\n  channels[1]=channelType;\n  channels[2]=channelType;\n  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);\n  return channelSelection;\n}\n"}
{"nl": "Blocking wait the current action for an amount of time", "code": "public void blockingWait(int duration) throws InterruptedException {\n  Thread.sleep(duration);\n}\n"}
{"nl": "notify all observers", "code": "public void notifyObservers(ObserverType type,Object... object){\n  List<ActionObserver> tempOnceused=Collections.emptyList();\n  lock.lock();\n  try {\n    if (onceUsedObservers.size() > 0) {\n      tempOnceused=new ArrayList<ActionObserver>();\n      Iterator<ActionObserver> iterator=onceUsedObservers.iterator();\n      while (iterator.hasNext()) {\n        ActionObserver observer=iterator.next();\n        if (observer.getObserverType().matchesObserver(type)) {\n          if (observer.tryUse()) {\n            tempOnceused.add(observer);\n            iterator.remove();\n          }\n        }\n      }\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n  for (  ActionObserver observer : tempOnceused) {\n    notifyAction(type,observer,object);\n  }\n  if (observers.size() > 0) {\n    for (    ActionObserver observer : observers) {\n      if (observer.getObserverType().matchesObserver(type)) {\n        notifyAction(type,observer,object);\n      }\n    }\n  }\n}\n"}
{"nl": "Takes Brightness of the image", "code": "public BrightnessSubfilter(int brightness){\n  this.brightness=brightness;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetLongPollServerQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.getLongPollServer\",LongpollParams.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Adds fieldset entry, equivalent of: | tab_name | fieldset#itemType | multifieldLabel#itemLabel | value |", "code": "public ComponentConfigBuilder addItemInFieldset(String fieldsetLabel,String itemType,String itemLabel,String value){\n  String type=String.format(\"fieldset#%s\",itemType);\n  String label=String.format(\"%s#%s\",fieldsetLabel,itemLabel);\n  config.add(new ConfigurationEntry(currentTab,type,label,value));\n  return this;\n}\n"}
{"nl": "enemy init", "code": "public void MakeEnemy(int kind,int num,int nName){\n  sKind=kind;\n  sNum=num;\n  sUnitName=\"bubble\" + nName;\n  if (this.map_controler.get_Selection(kind,num) == -1) {\n    isDead=true;\n    return;\n  }\n  enemy_Img_Number=this.map_controler.get_Enemy_Num(sKind,num);\n  ResetEnemy();\n}\n"}
{"nl": "Test for bug ACT-10: whitespaces/newlines in expressions lead to exceptions", "code": "@Deployment public void testWhitespaceInExpression(){\n  runtimeService.startProcessInstanceByKey(\"inclusiveWhiteSpaceInExpression\",CollectionUtil.singletonMap(\"input\",1));\n}\n"}
{"nl": "Create a variable by combining a collection of other variables", "code": "VarImpl(Collection<VarAdmin> vars){\n  VarAdmin first=vars.iterator().next();\n  this.name=first.getName();\n  this.userDefinedName=first.isUserDefinedName();\n  for (  VarAdmin var : vars) {\n    if (var.isUserDefinedName()) {\n      this.name=var.getName();\n    }\n    var.getProperties().forEach(null);\n  }\n}\n"}
{"nl": "Remove all failed online servers", "code": "private void removeFailedServers(Set<String> failedServers){\n  if (!failedServers.isEmpty()) {\n    for (    String server : failedServers) {\n      Response<Boolean> leaveResp=clusterService.leaveServer(server);\n      if (leaveResp.isSuccess() && leaveResp.getData()) {\n        Logs.info(\"remove failed server({}) successfully\",server);\n      }\n    }\n  }\n}\n"}
{"nl": "Implements of MBeanRegistration interface", "code": "public ObjectName preRegister(MBeanServer mbs,ObjectName objName) throws Exception {\n  m_mbeanServer=mbs;\n  return objName;\n}\n"}
{"nl": "Check if can powers up this pokemon", "code": "public boolean canPowerUp(){\n  return getCandy() >= getCandyCostsForPowerup() && api.getPlayerProfile().getCurrency(PlayerProfile.Currency.STARDUST) >= getStardustCostsForPowerup();\n}\n"}
{"nl": "Remove player from alliance (normal leave, or kick offline player)", "code": "public static final void removePlayer(Player player){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    if (alliance.getTeamType().isDefence()) {\n      VortexService.getInstance().removeDefenderPlayer(player);\n    }\n    alliance.onEvent(new PlayerAllianceLeavedEvent(alliance,player));\n  }\n}\n"}
{"nl": "Execute JOIN expression that is a join between two tables", "code": "private void executeJoin(ExpNode exp) throws SQLException {\n  ColumnNode left=(ColumnNode)exp.getLeftChild();\n  ColumnNode right=(ColumnNode)exp.getRightChild();\n  int leftEntryIndex=left.getColumnData().getColumnTableData().getTableIndex();\n  int rightEntryIndex=right.getColumnData().getColumnTableData().getTableIndex();\n  Object leftJoinValue=left.getFieldValue(_currentEntry.getEntry(leftEntryIndex));\n  Object rightJoinValue=right.getFieldValue(_currentEntry.getEntry(rightEntryIndex));\n  boolean isInRange=exp.isValidCompare(leftJoinValue,rightJoinValue);\n  setResults(exp,isInRange);\n}\n"}
{"nl": "Return an additional \"thumb_src\" field", "code": "public PhotosGetAlbumsQuery needCovers(Boolean value){\n  return unsafeParam(\"need_covers\",value);\n}\n"}
{"nl": "check is3G", "code": "public static boolean is3G(Context context){\n  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);\n  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();\n  if (activeNetInfo != null && activeNetInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Set item size, column size base on the screen orientation", "code": "private void orientationBasedUI(int orientation){\n  imageColumns=orientation == Configuration.ORIENTATION_PORTRAIT ? 3 : 5;\n  folderColumns=orientation == Configuration.ORIENTATION_PORTRAIT ? 2 : 4;\n  int columns=isDisplayingFolderView() ? folderColumns : imageColumns;\n  layoutManager=new GridLayoutManager(this,columns);\n  recyclerView.setLayoutManager(layoutManager);\n  recyclerView.setHasFixedSize(true);\n  setItemDecoration(columns);\n}\n"}
{"nl": "Apply the size behaviour", "code": "@Override public void applyDimensionBehaviour(){\n  wrapContent();\n}\n"}
{"nl": "add all jars under lib/required", "code": "private void addRequiredLibs(StringBuilder classpath){\n  for (  File f : BootIOUtils.listFiles(new File(gsLibRequired))) {\n    if (f.getName().contains(XapModules.DATA_GRID.getJarFileName()) || f.getName().contains(XapModules.CORE_REFLECTIONS_ASM.getJarFileName())) {\n      continue;\n    }\n    classpath.append(f.getAbsolutePath()).append(File.pathSeparator);\n  }\n}\n"}
{"nl": "Execute the Graql query described in the given JSON request", "code": "void executeQuery(){\n  queryExecutor.submit(null);\n}\n"}
{"nl": "Extracts the base URL from the request", "code": "public static DmnRestUrlBuilder fromRequest(HttpServletRequest request){\n  return usingBaseUrl(ServletUriComponentsBuilder.fromServletMapping(request).build().toUriString());\n}\n"}
{"nl": "remove the node", "code": "public static void removeNode(String url){\n  url2node.remove(url);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosDeleteAlbumQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"photos.deleteAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n"}
{"nl": "Method which writes an index to a RandomAccessFile", "code": "public long dump(RandomAccessFile rafIn) throws IOException {\n  long nBytes=0;\n  int numIdx=getNumIdx();\n  rafIn.writeInt(numIdx);\n  nBytes+=4;\n  rafIn.writeInt(idxInterval);\n  nBytes+=4;\n  for (int i=0; i < numIdx; i++) {\n    rafIn.writeLong(bytePtrs[i]);\n    nBytes+=8;\n    rafIn.writeLong(timePtrs[i]);\n    nBytes+=8;\n  }\n  rafIn.writeLong(0l);\n  rafIn.writeLong(0l);\n  nBytes+=16l;\n  return nBytes;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer().isPCoATab();\n}\n"}
{"nl": "Dumps out the component tree, recursively", "code": "public static String toTree(@NotNull List<NlComponent> roots,boolean includeIdentity){\n  StringBuilder sb=new StringBuilder(200);\n  for (  NlComponent root : roots) {\n    describe(sb,root,0,includeIdentity);\n  }\n  return sb.toString().trim();\n}\n"}
{"nl": "Decode a given drawable resource with the specified dimensions", "code": "public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight){\n  final BitmapFactory.Options options=new BitmapFactory.Options();\n  options.inJustDecodeBounds=true;\n  BitmapFactory.decodeResource(res,resId,options);\n  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);\n  options.inJustDecodeBounds=false;\n  return BitmapFactory.decodeResource(res,resId,options);\n}\n"}
{"nl": "Required for Externalizable", "code": "public WriteEntrySpaceOperationRequest(){\n}\n"}
{"nl": "Constructs a new IntrospectorPropertyResolver that processes transient fields (backward compatibility)", "code": "public IntrospectorPropertyResolver(boolean includePublicFields){\n  super(includePublicFields);\n}\n"}
{"nl": "Properly respawn object", "code": "public void onRespawn(){\n}\n"}
{"nl": "Collection title", "code": "protected MarketEditAlbumQuery title(String value){\n  return unsafeParam(\"title\",value);\n}\n"}
{"nl": "User maiden name (female only)", "code": "public AccountSaveProfileInfoQuery maidenName(String value){\n  return unsafeParam(\"maiden_name\",value);\n}\n"}
{"nl": "save the skin's path", "code": "public static void saveSkinPath(Context context,String path){\n  SkinPreferencesUtils.putString(context,PREF_CUSTOM_SKIN_PATH,path);\n}\n"}
{"nl": "Thread safe sorted map implementation", "code": "public static <K,T,V>MultiDimensionalMap<K,T,V> newThreadSafeTreeBackedMap(){\n  return new MultiDimensionalMap<>(new ConcurrentSkipListMap<Pair<K,T>,V>());\n}\n"}
{"nl": "Read a JSON file and return a JSON object", "code": "public static JsonRootNode readJSON(File file){\n  StringBuffer strings=FileUtility.readFromFile(file);\n  return jsonFromString(strings.toString());\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  action.actionPerformed(ev);\n}\n"}
{"nl": "Creates a storable time fence which will be valid on Sunday in the given daily time frame", "code": "public static StorableTimeFence inSundayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(SUNDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n"}
{"nl": "Construct Failure Response", "code": "public static RespJson buildFailureResponse(String errorMsg){\n  RespJson respJson=new RespJson();\n  respJson.setCode(ResponseCode.FAILURE.getCode());\n  respJson.setMsg(errorMsg);\n  return respJson;\n}\n"}
{"nl": "Use when you don't need any merge conflict data", "code": "public RecordMergeStrategyException(){\n  this(null);\n}\n"}
{"nl": "Check if the given string is empty or null", "code": "public static boolean isEmpty(String string){\n  if (null == string)   return true;\n  return string.equals(EMPTY);\n}\n"}
{"nl": "Test added to validate UUID variable type + querying (ACT-1665)", "code": "@Deployment public void testUUIDVariableAndQuery(){\n  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey(\"oneTaskProcess\");\n  assertNotNull(processInstance);\n  Task task=taskService.createTaskQuery().singleResult();\n  assertNotNull(task);\n  UUID randomUUID=UUID.randomUUID();\n  taskService.setVariableLocal(task.getId(),\"conversationId\",randomUUID);\n  Task resultingTask=taskService.createTaskQuery().taskVariableValueEquals(\"conversationId\",randomUUID).singleResult();\n  assertNotNull(resultingTask);\n  assertEquals(task.getId(),resultingTask.getId());\n  randomUUID=UUID.randomUUID();\n  runtimeService.setVariable(processInstance.getId(),\"uuidVar\",randomUUID);\n  ProcessInstance result=runtimeService.createProcessInstanceQuery().variableValueEquals(\"uuidVar\",randomUUID).singleResult();\n  assertNotNull(result);\n  assertEquals(processInstance.getId(),result.getId());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetFollowersQueryWithFields(VkApiClient client,UserField... fields){\n  super(client,\"users.getFollowers\",GetFollowersFieldsResponse.class);\n  fields(fields);\n}\n"}
{"nl": "Construct a matrix from a one-dimensional packed array", "code": "public Matrix(double[] vals,int m){\n  this.m=m;\n  n=(m != 0 ? vals.length / m : 0);\n  if (m * n != vals.length) {\n    throw new IllegalArgumentException(\"Array length must be a multiple of m.\");\n  }\n  A=new double[m][n];\n  for (int i=0; i < m; i++) {\n    for (int j=0; j < n; j++) {\n      A[i][j]=vals[i + j * m];\n    }\n  }\n}\n"}
{"nl": "is this space a memory space ?", "code": "public boolean isMemorySpace(){\n  return _isMemorySA;\n}\n"}
{"nl": "Delete current points-to set and make a new one", "code": "public void discardP2Set(){\n  p2set=null;\n}\n"}
{"nl": "Shows metrics for this audio player", "code": "public void showMetrics(){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsReorderLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){\n  super(client,\"groups.reorderLink\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  linkId(linkId);\n}\n"}
{"nl": "remove the captcha code for sid", "code": "public static void remove(String sid){\n  String id=\"//captcha/\" + sid;\n  Cache.remove(id);\n}\n"}
{"nl": "Set device year", "code": "public AccountRegisterDeviceQuery deviceYear(Integer value){\n  return unsafeParam(\"device_year\",value);\n}\n"}
{"nl": "Set fields", "code": "public AccountLookupContactsQuery fields(UserField... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "zoom to fit", "code": "public void zoomToFit(){\n  graphView.fitGraphToWindow();\n}\n"}
{"nl": "gather all edits into combined operations", "code": "public CombinedOperation[] gather(){\n  final ArrayList<CombinedOperation> list=new ArrayList<>();\n  for (int i=0; i < size(); i++) {\n    PackedOperation pop=getPackedOperation(i);\n    final CombinedOperation cop=new CombinedOperation();\n    cop.setEditOperation(pop.getEditOperation());\n    if (pop.getEditOperation().equals(EditOperation.op_deletion) || pop.getEditOperation().equals(EditOperation.op_substitution)) {\n      cop.setLetter(pop.getLetter());\n      cop.setCount(1);\n    }\n else {\n      cop.setCount(0);\n      while (true) {\n        cop.incrementCount(pop.getCount());\n        i++;\n        if (i == size())         break;\n        pop=getPackedOperation(i);\n        if (cop.getEditOperation() != pop.getEditOperation())         break;\n      }\n      i--;\n    }\n    list.add(cop);\n  }\n  return list.toArray(new CombinedOperation[list.size()]);\n}\n"}
{"nl": "Set name", "code": "public AccountSetInfoQuery name(String value){\n  return unsafeParam(\"name\",value);\n}\n"}
{"nl": "Creates a new instance of the abstract info flow problem", "code": "public AbstractInfoflow(){\n  this(null);\n}\n"}
{"nl": "Registers a listener for a particular condition with a given priority for the condition listener and the final listener", "code": "public void registerListener(Condition condition,int cPriority,EventListener listener,int lPriority){\n  getListenerForCondition(condition,cPriority).registerListener(listener,lPriority);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesDeleteQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.delete\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public AnnotElemValPair(String name,char kind,AnnotationAttr attr){\n  super(name,kind);\n  this.attr=attr;\n}\n"}
{"nl": "Add the given game time to this game time", "code": "public GameTime plus(GameTime gt){\n  return new GameTime(this.getTime() + gt.getTime());\n}\n"}
{"nl": "Create directory if not exists", "code": "public static boolean createDirectory(String directory){\n  File theDir=new File(directory);\n  if (!theDir.exists()) {\n    boolean result=false;\n    try {\n      theDir.mkdirs();\n      result=true;\n    }\n catch (    SecurityException se) {\n      se.printStackTrace();\n      return false;\n    }\n    return result;\n  }\n else {\n    return true;\n  }\n}\n"}
{"nl": "parse an options string", "code": "public void parseOptionString(String string) throws IOException {\n  NexusStreamParser np=new NexusStreamParser(new StringReader(string));\n  java.util.List tokens=np.getTokensLowerCase(null,null);\n  resamplingMethod.setOptionResamplingSize((int)np.findIgnoreCase(tokens,\"resamplingsize=\",resamplingMethod.getOptionResamplingSize()));\n  resamplingMethod.setOptionRepeatitions((int)np.findIgnoreCase(tokens,\"repeatitions=\",resamplingMethod.getOptionRepeatitions()));\n  resamplingMethod.setOptionLeftPercentile(np.findIgnoreCase(tokens,\"percentile=\",(float)resamplingMethod.getOptionLeftPercentile()));\n  if (np.findIgnoreCase(tokens,\"includeinternal=true\"))   setOptionUseInternal(true);\n else   if (np.findIgnoreCase(tokens,\"includeinternal=false\"))   setOptionUseInternal(false);\n  if (np.findIgnoreCase(tokens,\"includeunassigned=true\"))   setOptionUseUnassigned(true);\n else   if (np.findIgnoreCase(tokens,\"includeunassigned=false\"))   setOptionUseUnassigned(false);\n  np.checkFindDone(tokens);\n}\n"}
{"nl": "merge the given samples to a new sample", "code": "public void mergeSamples(Set<String> samples,String newName) throws IOException {\n  if (getSampleNames().contains(newName))   throw new IOException(\"Can't merge samples, name already used: \" + newName);\n  getDataTable().mergeSamples(samples,newName);\n  getSampleAttributeTable().mergeSamples(samples,newName);\n  setDirty(true);\n  try {\n    processReadHits();\n  }\n catch (  CanceledException e) {\n    Basic.caught(e);\n  }\n  if (getDir() != null)   getDir().getMainViewer().setDoReInduce(true);\n}\n"}
{"nl": "show an information notation", "code": "public static void showInformation(String message,long milliseconds){\n  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,milliseconds);\n}\n"}
{"nl": "Right clicks s in the middle of the view", "code": "public void rightClick(){\n  myRobot.click(mySurface,getMidPoint(),MouseButton.RIGHT_BUTTON,1);\n  myRobot.waitForIdle();\n}\n"}
{"nl": "Adds an item to one or multiple collections", "code": "public MarketAddToAlbumQuery addToAlbum(UserActor actor,int ownerId,int itemId,int... albumIds){\n  return new MarketAddToAlbumQuery(getClient(),actor,ownerId,itemId,albumIds);\n}\n"}
{"nl": "Returns the component at the given (x,y) coordinate in the Swing coordinate system", "code": "@Nullable public static NlComponent findComponent(@NotNull ScreenView view,@SwingCoordinate int swingX,@SwingCoordinate int swingY){\n  return view.getModel().findLeafAt(getAndroidX(view,swingX),getAndroidY(view,swingY),false);\n}\n"}
{"nl": "Selects all occurrences of text in document, subject to options and constraints of document type", "code": "public int findAll(String regularExpression){\n  return findAndUncollapseNext(regularExpression,false,true);\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n"}
{"nl": "Turns the platform into entities and moves them with the rope", "code": "private boolean movePlatform(BlockPos anchor,boolean up){\n  IBlockState state=worldObj.getBlockState(anchor);\n  if (state.getBlock() != BWMBlocks.ANCHOR)   return false;\n  HashSet<BlockPos> platformBlocks=new HashSet<>();\n  platformBlocks.add(anchor);\n  Block b=worldObj.getBlockState(anchor.down()).getBlock();\n  boolean success=worldObj.getBlockState(anchor.down()).getBlock() == PLATFORM ? addToList(platformBlocks,anchor.down(),up) : up || isValidBlock(b,anchor.down());\n  if (!success) {\n    return false;\n  }\n  for (  BlockPos blockPos : platformBlocks) {\n    Arrays.asList(new BlockPos[]{blockPos.north(),blockPos.south()}).forEach(null);\n    Arrays.asList(new BlockPos[]{blockPos.east(),blockPos.west()}).forEach(null);\n  }\n  if (!worldObj.isRemote) {\n    for (    BlockPos blockPos : platformBlocks) {\n      IBlockState blockState=worldObj.getBlockState(blockPos.up());\n      b=blockState.getBlock();\n      blockState=(b == Blocks.REDSTONE_WIRE || b instanceof BlockRailBase ? blockState : null);\n      Vec3i offset=blockPos.subtract(anchor.up());\n      rope.addBlock(offset,worldObj.getBlockState(blockPos));\n      if (blockState != null) {\n        rope.addBlock(new Vec3i(offset.getX(),offset.getY() + 1,offset.getZ()),blockState);\n        worldObj.setBlockToAir(blockPos.up());\n      }\n      worldObj.setBlockToAir(blockPos);\n    }\n  }\n  return true;\n}\n"}
{"nl": "Required for Externalizable", "code": "public ReadTakeEntrySpaceOperationResult(){\n}\n"}
{"nl": "Set test mode", "code": "public AuthConfirmQuery testMode(Boolean value){\n  return unsafeParam(\"test_mode\",value);\n}\n"}
{"nl": "Sends all available sensor data requests to the assigned nodes", "code": "private void sendSensorEventDataRequests(){\n  try {\n    Log.v(TAG,\"Updating sensor event data request\");\n    for (    Map.Entry<String,SensorDataRequest> sensorDataRequestEntry : sensorDataRequests.entrySet()) {\n      sendSensorEventDataRequest(sensorDataRequestEntry.getKey(),sensorDataRequestEntry.getValue());\n    }\n  }\n catch (  Exception ex) {\n    ex.printStackTrace();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountUnregisterDeviceQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.unregisterDevice\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Helper method to create Stock", "code": "public Boolean createStock(EntityManager em,String productId){\n  Boolean status=true;\n  Stock stock=null;\n  try {\n    if (!em.getTransaction().isActive()) {\n      em.getTransaction().begin();\n    }\n    stock=new Stock();\n    stock.setProductId(productId);\n    stock.setQuantity(BigDecimal.valueOf(10));\n    stock.setLotSize(BigDecimal.valueOf(15));\n    stock.setMinStock(BigDecimal.valueOf(5));\n    em.persist(stock);\n    em.getTransaction().commit();\n  }\n catch (  Exception e) {\n    status=false;\n    logger.error(\"Error occured during creation of Stock. Detailed info: \" + e);\n  }\n  return status;\n}\n"}
{"nl": "Normalize the attribute value of a non CDATA default attribute collapsing sequences of space characters (x20)", "code": "private boolean normalizeDefaultAttrValue(XMLString value){\n  boolean skipSpace=true;\n  int current=value.offset;\n  int end=value.offset + value.length;\n  for (int i=value.offset; i < end; i++) {\n    if (value.ch[i] == ' ') {\n      if (!skipSpace) {\n        value.ch[current++]=' ';\n        skipSpace=true;\n      }\n else {\n      }\n    }\n else {\n      if (current != i) {\n        value.ch[current]=value.ch[i];\n      }\n      current++;\n      skipSpace=false;\n    }\n  }\n  if (current != end) {\n    if (skipSpace) {\n      current--;\n    }\n    value.length=current - value.offset;\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "handle by filter ad invoke the before", "code": "public boolean before(Model m){\n  String uri=m.getURI();\n  for (  String name : filters.keySet()) {\n    if (uri.matches(name)) {\n      Object o=filters.get(name);\n      try {\n        IFilter f=null;\n        if (o instanceof IFilter) {\n          f=(IFilter)o;\n        }\n else {\n          f=(IFilter)(Class.forName((String)o).newInstance());\n          filters.put(name,f);\n        }\n        if (!f.before(m)) {\n          return false;\n        }\n      }\n catch (      Exception e) {\n        log.error(e.getMessage(),e);\n        filters.remove(name);\n      }\n    }\n  }\n  Module m1=floor();\n  if (m1 != null) {\n    return m1.before(m);\n  }\n  return true;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetSubscriptionsQueryWithExtended(VkApiClient client){\n  super(client,\"users.getSubscriptions\",GetSubscriptionsExtendedResponse.class);\n  extended(true);\n}\n"}
{"nl": "Get upper end of histogram range", "code": "public double max(){\n  return m_max;\n}\n"}
{"nl": "construct a parser and load all commands found for the given paths", "code": "public CommandManagerFX(IDirector dir,Object viewer,String[] commandsPaths){\n  this(dir,viewer,commandsPaths,false);\n}\n"}
{"nl": "json --> obj", "code": "public static WxMaterialCountResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxMaterialCountResult.class);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  final ClusterViewer viewer=getViewer();\n  viewer.updateGraph();\n}\n"}
{"nl": "multipleLinearRegression providing index numbers for the columns in fileName, index 0 correspond to column 1", "code": "public void multipleLinearRegression(String fileName,int indVariable,int[] c,String[] factors,boolean interceptTerm,int rowIni,int rowEnd){\n  try {\n    BufferedReader reader=new BufferedReader(new FileReader(fileName));\n    Matrix data=Matrix.read(reader);\n    reader.close();\n    int rows=data.getRowDimension() - 1;\n    int cols=data.getColumnDimension() - 1;\n    if (rowIni < 0 || rowIni > rows)     throw new RuntimeException(\"Problem reading file, rowIni=\" + rowIni + \"  and number of rows in file=\"+ rows);\n    if (rowEnd < 0 || rowEnd > rows)     throw new RuntimeException(\"Problem reading file, rowIni=\" + rowIni + \"  and number of rows in file=\"+ rows);\n    if (rowIni > rowEnd)     throw new RuntimeException(\"Problem reading file, rowIni < rowend\" + rowIni + \" < \"+ rowEnd);\n    Matrix indVar=data.getMatrix(rowIni,rowEnd,indVariable,indVariable);\n    data=data.getMatrix(rowIni,rowEnd,c);\n    multipleLinearRegression(indVar,data,interceptTerm);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Problem reading file \" + fileName,e);\n  }\n}\n"}
{"nl": "Ids of additional photos", "code": "public MarketAddQuery photoIds(List<Integer> value){\n  return unsafeParam(\"photo_ids\",value);\n}\n"}
{"nl": "Construct instance with (x, y) values set to passed parameters", "code": "public Vec2d(double x,double y){\n  set(x,y);\n}\n"}
{"nl": "Checks if triggered path is restricted for anonymous users", "code": "private boolean isPathRestricted(HttpServletRequest oCntxt) throws ODataException {\n  boolean status;\n  String path=oCntxt.getRequestURI().toString();\n  if ((path.contains(\"/SalesOrderHeaders\") || path.contains(\"/Customers\") || path.contains(\"/SalesOrderItems\")) && (oCntxt.getMethod().equals(\"GET\") || oCntxt.getMethod().equals(\"DELETE\"))) {\n    status=true;\n  }\n else   if (path.contains(\"/PurchaseOrderHeaders\") || path.contains(\"/PurchaseOrderItems\") || path.contains(\"/Suppliers\")|| path.contains(\"/Stocks\")) {\n    status=true;\n  }\n else   if ((path.contains(\"/Products\") || path.contains(\"/ProductCategories\")) && (oCntxt.getMethod().equals(\"POST\") || oCntxt.getMethod().equals(\"PUT\") || oCntxt.getMethod().equals(\"DELETE\"))) {\n    status=true;\n  }\n else   if ((path.contains(\"/ConfirmSalesOrder\") || path.contains(\"/CancelSalesOrder\"))) {\n    status=true;\n  }\n else {\n    status=false;\n  }\n  return status;\n}\n"}
{"nl": "Creates new form Sample", "code": "public Sample(){\n  initComponents();\n}\n"}
{"nl": "Populate object using bigWig data", "code": "private void bigWigToScores(BBFileReader reader){\n  List<ScreenWiggleLocusInfo> screenWigLocInfoList=new ArrayList<ScreenWiggleLocusInfo>();\n  for (int i=0; i < getGc().getUserWindowSize(); i++) {\n    screenWigLocInfoList.add(new ScreenWiggleLocusInfo());\n  }\n  BigWigIterator iter=reader.getBigWigIterator(getGc().getChrom(),getGc().getFrom(),getGc().getChrom(),getGc().getTo(),false);\n  while (iter.hasNext()) {\n    WigItem bw=iter.next();\n    for (int i=bw.getStartBase(); i <= bw.getEndBase(); i++) {\n      int idx=Utils.getIndexOfclosestValue(i,getGc().getMapping());\n      screenWigLocInfoList.get(idx).increment(bw.getWigValue());\n    }\n  }\n  ArrayList<Double> screenScores=new ArrayList<Double>();\n  for (  ScreenWiggleLocusInfo x : screenWigLocInfoList) {\n    screenScores.add((double)x.getMeanScore());\n  }\n  this.setScreenScores(screenScores);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public LanguageMatcherData addDistance(String desired,String supported,int percent,boolean oneway){\n  return addDistance(desired,supported,percent,oneway,null);\n}\n"}
{"nl": "Required for Externalizable", "code": "public VirtualEntryIntrospector(){\n  throw new IllegalStateException(\"This constructor is required for Externalizable and should not be called directly.\");\n}\n"}
{"nl": "close the array", "code": "@Override public void close(){\n  try {\n    raf.close();\n    System.err.println(\"Closing file: \" + file.getName());\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetFloodStatsQuery(VkApiClient client,UserActor actor,int accountId){\n  super(client,\"ads.getFloodStats\",FloodStats.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n}\n"}
{"nl": "Add a single user", "code": "public String addUser(String user,String password,boolean isAdmin){\n  ResponseEntity<String> response=restTemplate.exchange(url + RMAControllerMappings.ADD_USER_MAPPING + \"userName=\"+ user+ \"&password=\"+ password+ \"&isAdmin=\"+ isAdmin,HttpMethod.GET,request,String.class);\n  return response.getBody();\n}\n"}
{"nl": "Converts an underlined_word into a CamelCase word", "code": "public static String underlinesToCamelCase(String string){\n  StringBuilder sb=new StringBuilder(string.length());\n  int n=string.length();\n  int i=0;\n  boolean upcaseNext=true;\n  for (; i < n; i++) {\n    char c=string.charAt(i);\n    if (c == '_') {\n      upcaseNext=true;\n    }\n else {\n      if (upcaseNext) {\n        c=Character.toUpperCase(c);\n      }\n      upcaseNext=false;\n      sb.append(c);\n    }\n  }\n  return sb.toString();\n}\n"}
{"nl": "Extracts the colorPrimaryDark color attribute of the passing Context's theme", "code": "@ColorInt public int extractPrimaryDarkColorFrom(Context context){\n  return extractIntAttribute(context,PRIMARY_DARK);\n}\n"}
{"nl": "Notifies the user whenever the list has changed", "code": "@ObjectiveCName(\"subscribeWithListEntryChangedListener:\") public List subscribe(ListEntryChangedListener listEntryChangedListener){\n  this.listEntryChangedListeners.add(listEntryChangedListener);\n  if (this.listEntryChangedListeners.size() == 0) {\n    this.record.subscribe(this.recordListeners);\n  }\n  return this;\n}\n"}
{"nl": "Attach the controller to the specified Views", "code": "public ScratchoffController attach(View scratchableLayout,View behindView){\n  safelyStopProcessors();\n  this.scratchableLayout=scratchableLayout;\n  this.behindView=behindView;\n  return reset();\n}\n"}
{"nl": "Returns the name of this audio player", "code": "public String toString(){\n  return \"JavaClipAudioPlayer\";\n}\n"}
{"nl": "Create a flight for the pilot", "code": "public static void createFlight(AirMapFlight flight,@Nullable AirMapCallback<AirMapFlight> callback){\n  FlightService.createFlight(flight,callback);\n}\n"}
{"nl": "Determines if current L&F is Nimbus", "code": "public static boolean isNimbusLookAndFeel(){\n  return UIUtils.isNimbusLookAndFeel();\n}\n"}
{"nl": "This method logs the TRACE message", "code": "public final void trace(final Object o){\n  log(Level.TRACE,o);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();\n  if (samples.size() > 0)   execute(\"set nodeShape=triangle sample='\" + Basic.toString(samples,\"' '\") + \"';\");\n}\n"}
{"nl": "Duplicate a single column", "code": "public Builder duplicateColumn(String column,String newName){\n  return transform(new DuplicateColumnsTransform(Collections.singletonList(column),Collections.singletonList(newName)));\n}\n"}
{"nl": "Draw a snap horizontal margin indicator", "code": "public static void drawSnapHorizontalMargin(ViewTransform transform,Graphics2D g,int x1,int x2,int y1,String text,boolean textOver){\n  Canvas c=new Canvas();\n  FontMetrics fm=c.getFontMetrics(sFont);\n  g.setFont(sFont);\n  int padding=transform.getSwingDimension(4);\n  Rectangle2D bounds=fm.getStringBounds(text,g);\n  int tw=(int)bounds.getWidth();\n  int offset=6 * CONNECTION_ARROW_SIZE;\n  if (x1 > x2) {\n    int temp=x1;\n    x1=x2;\n    x2=temp;\n  }\n  int w=((x2 - x1) - (tw + 2 * padding)) / 2;\n  if (w <= padding) {\n    g.drawLine(x1,y1,x2,y1);\n    if (textOver) {\n      offset=-1 * offset / 2;\n    }\n    g.drawString(text,x1 + w + padding,y1 + offset);\n  }\n else {\n    g.drawLine(x1,y1,x1 + w,y1);\n    g.drawLine(x2 - w,y1,x2,y1);\n    g.drawString(text,x1 + w + padding,(int)(y1 + (bounds.getHeight() / 2)));\n  }\n  g.drawLine(x1,y1 - CONNECTION_ARROW_SIZE,x1,y1 + CONNECTION_ARROW_SIZE);\n  g.drawLine(x2,y1 - CONNECTION_ARROW_SIZE,x2,y1 + CONNECTION_ARROW_SIZE);\n}\n"}
{"nl": "Creates a new shaped material recipe", "code": "public ShapedMaterialRecipe(int width,int height,List<Predicate<ItemStack>> matchers,ItemStack output){\n  this.width=width;\n  this.height=height;\n  this.size=width * height;\n  this.matchers=matchers;\n  this.output=output;\n}\n"}
{"nl": "Creates a new instance of Decision concerning a single document", "code": "public Decision(Object dDocument,Object oFinalDecision,double dDecisionBelief,Map mDecisionEvidence){\n  Document=dDocument;\n  FinalDecision=oFinalDecision;\n  DecisionBelief=dDecisionBelief;\n  DecisionEvidence=mDecisionEvidence;\n}\n"}
{"nl": "assemble all reads provided by the iterator using perfect overlaps of the given minimum length", "code": "public int computeContigs(int minReads,double minCoverage,int minLength,ProgressListener progress) throws IOException, CanceledException {\n  final PathExtractor pathExtractor=new PathExtractor(overlapGraph,readId2ContainedReads);\n  pathExtractor.apply(progress);\n  paths=pathExtractor.getPaths();\n  final ContigBuilder contigBuilder=new ContigBuilder(pathExtractor.getPaths(),readId2ContainedReads);\n  contigBuilder.apply(readId2ReadData,minReads,minCoverage,minLength,progress);\n  contigs=contigBuilder.getContigs();\n  return contigBuilder.getCountContigs();\n}\n"}
{"nl": "Called the first time we need to draw when the zoom level has changed or the screen is resized", "code": "private void computeIntsForThisZoomLevel(){\n  int halfHeight=(getMeasuredHeight() / 2) - 1;\n  mHeightsAtThisZoomLevel=new int[mLenByZoomLevel[mZoomLevel]];\n  for (int i=0; i < mLenByZoomLevel[mZoomLevel]; i++) {\n    mHeightsAtThisZoomLevel[i]=(int)(mValuesByZoomLevel[mZoomLevel][i] * halfHeight);\n  }\n}\n"}
{"nl": "Retrieve framePath from the parameter object and then call inject(Class&lt;T&gt; clazz, FramePath framePath)", "code": "public <T>T inject(Class<T> clazz,Object object){\n  return inject(clazz,frameMap.get(object));\n}\n"}
{"nl": "edit the conflicts using an external merger", "code": "private void editConflictsExternal(IFile resource,IFile conflictOldFile,IFile conflictWorkingFile,IFile conflictNewFile,String mergeProgramLocation,String mergeProgramParameters) throws CoreException, InvocationTargetException, InterruptedException {\n  try {\n    if (mergeProgramLocation.equals(\"\")) {\n      throw new SVNException(Policy.bind(\"EditConflictsAction.noMergeProgramConfigured\"));\n    }\n    File mergeProgramFile=new File(mergeProgramLocation);\n    if (!mergeProgramFile.exists()) {\n      throw new SVNException(Policy.bind(\"EditConflictsAction.mergeProgramDoesNotExist\"));\n    }\n    Command command=new Command(mergeProgramLocation);\n    String[] parameters=mergeProgramParameters.split(\" \");\n    for (int i=0; i < parameters.length; i++) {\n      parameters[i]=replaceParameter(parameters[i],\"${theirs}\",conflictNewFile.getLocation().toFile().getAbsolutePath());\n      parameters[i]=replaceParameter(parameters[i],\"${yours}\",conflictWorkingFile.getLocation().toFile().getAbsolutePath());\n      parameters[i]=replaceParameter(parameters[i],\"${base}\",conflictOldFile.getLocation().toFile().getAbsolutePath());\n      parameters[i]=replaceParameter(parameters[i],\"${merged}\",resource.getLocation().toFile().getAbsolutePath());\n    }\n    command.setParameters(parameters);\n    command.exec();\n    command.waitFor();\n    resource.refreshLocal(IResource.DEPTH_ZERO,null);\n  }\n catch (  IOException e) {\n    throw new SVNException(Policy.bind(\"EditConflictsAction.1\") + e.getMessage(),e);\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n}\n"}
{"nl": "Hides the notification for the specified tabId and notificationId", "code": "public static void hide(int tabId,int notificationId){\n  MediaNotificationManager manager=getManager(notificationId);\n  if (manager == null)   return;\n  manager.hideNotification(tabId);\n}\n"}
{"nl": "Compares lists of objects", "code": "public static boolean cmpList(List<?> l1,List<?> l2){\n  if ((l1 == null) && (l2 == null)) {\n    return true;\n  }\n  if ((l1 == null) || (l2 == null)) {\n    return false;\n  }\n  ArrayList<?> cp=new ArrayList<>(l1);\n  for (  Object o : l2) {\n    if (!cp.remove(o)) {\n      return false;\n    }\n  }\n  return cp.isEmpty();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ChartViewer chartViewer=(ChartViewer)getViewer();\n  LabelsJList list=chartViewer.getActiveLabelsJList();\n  return list != null && !list.isSelectionEmpty();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AttributesWindow viewer=(AttributesWindow)getViewer();\n  return viewer != null && viewer.selectedTaxon != null;\n}\n"}
{"nl": "Verify if <code>ancestor</code> is an ancestor of <code>node</code>", "code": "public static boolean isAncestor(Node ancestor,Node node){\n  Node p=node;\n  while ((p=p.getParentNode()) != null) {\n    if (ancestor == p)     return true;\n  }\n  return false;\n}\n"}
{"nl": "Called when creating an integrated server", "code": "public void init(MissionInit minit){\n  initBusses();\n  this.stateMachine=new ServerStateMachine(ServerState.WAITING_FOR_MOD_READY,minit);\n}\n"}
{"nl": "Converts gMonthDay object representation to String", "code": "@Override protected String dateToString(DateTimeData date){\n  StringBuffer message=new StringBuffer(8);\n  message.append('-');\n  message.append('-');\n  append(message,date.month,2);\n  message.append('-');\n  append(message,date.day,2);\n  append(message,(char)date.utc,0);\n  return message.toString();\n}\n"}
{"nl": "Convert database query result to chart data", "code": "private Map<String,List<ChartObject>> convertResult(Map<String,List<ChartObject>> initial){\n  if (initial.size() == 0)   return new HashMap<>();\n  for (  Map.Entry<String,List<ChartObject>> entry : initial.entrySet()) {\n    entry.getValue().stream().forEach(null);\n  }\n  return initial;\n}\n"}
{"nl": "append file to storage server (by file name)", "code": "public int append_file1(String appender_file_id,String local_filename) throws IOException, MyException {\n  String[] parts=new String[2];\n  this.errno=this.split_file_id(appender_file_id,parts);\n  if (this.errno != 0) {\n    return this.errno;\n  }\n  return this.append_file(parts[0],parts[1],local_filename);\n}\n"}
{"nl": "Handles the tag requests", "code": "Collection<? extends ClientRequestResult> handleTagRequest(final ClientRequest tagRequest){\n  final Collection<TagValueUpdate> transferTags=new ArrayList<>(tagRequest.getIds().size());\n  transferTags.addAll(getTagsById(tagRequest));\n  transferTags.addAll(getTagsByRegex(tagRequest));\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Finished processing Tag request (values only): returning \" + transferTags.size() + \" Tags\");\n  }\n  return transferTags;\n}\n"}
{"nl": "reads the start of the footer section", "code": "public static long readStartFooterSection(IInputReaderOutputWriter reader) throws IOException {\n  reader.seek(reader.length() - 16);\n  return reader.readLong();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetChatQuery(VkApiClient client,UserActor actor){\n  super(client,\"messages.getChat\",Chat.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Get a Md5 string which is similar to OS Md5sum", "code": "public static String md5(File file){\n  if (file == null)   throw new IllegalArgumentException(\"file cannot be null\");\n  try {\n    HashCode hc=Files.hash(file,Hashing.md5());\n    return toHex(hc.asBytes());\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "Validate candidates for unassign from projects, and update default project if it required", "code": "private void processCandidateForUnaassign(Iterable<User> users,String projectName){\n  List<User> updated=StreamSupport.stream(users.spliterator(),false).filter(null).map(null).collect(toList());\n  userRepository.save(updated);\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(full);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  LoadBalancingPolicy.LoadBalancingPolicyDescription copy=(LoadBalancingPolicy.LoadBalancingPolicyDescription)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(full,copy));\n}\n"}
{"nl": "verifies that two matrices are close (1-norm)", "code": "protected void assertClose(String msg,FieldMatrix<Fraction> m,FieldMatrix<Fraction> n,double tolerance){\n  for (int i=0; i < m.getRowDimension(); i++) {\n    for (int j=0; j < m.getColumnDimension(); j++) {\n      Assert.assertEquals(msg,m.getEntry(i,j).doubleValue(),n.getEntry(i,j).doubleValue(),tolerance);\n    }\n  }\n}\n"}
{"nl": "Display a message to the user", "code": "private void message(String type,SAXParseException exception){\n  String filename=exception.getSystemId();\n  if (filename.startsWith(baseURI)) {\n    filename=filename.substring(baseURI.length());\n  }\n  System.out.print(type + \":\" + filename+ \":\"+ exception.getLineNumber());\n  if (exception.getColumnNumber() > 0) {\n    System.out.print(\":\" + exception.getColumnNumber());\n  }\n  System.out.println(\":\" + exception.getMessage());\n}\n"}
{"nl": "write the datatable", "code": "public void write(Writer w) throws IOException {\n  boolean useOriginal=(originalData != null && disabledSamples.size() > 0);\n  write(w,useOriginal);\n}\n"}
{"nl": "Method to parse and validate the options provided", "code": "private boolean parseOptions() throws IOException {\n  boolean valid;\n  if (hasOption(LOCALPROPFILE)) {\n    SystemConfiguration.loadPropsFromFile(new File(getOptionValue(LOCALPROPFILE)));\n  }\n else   if (hasOption(HDFSPROPDIR)) {\n    FileSystem fs=FileSystem.get(new Configuration());\n    SystemConfiguration.loadPropsFromHDFSDir(getOptionValue(HDFSPROPDIR),fs);\n  }\n else   if (hasOption(HDFSPROPFILE)) {\n    FileSystem fs=FileSystem.get(new Configuration());\n    SystemConfiguration.loadPropsFromFile(getOptionValue(HDFSPROPFILE),fs);\n  }\n else {\n    for (    String prop : ResponderProps.PROPSLIST) {\n      if (hasOption(prop)) {\n        SystemConfiguration.setProperty(prop,getOptionValue(prop));\n      }\n    }\n  }\n  valid=ResponderProps.validateResponderProperties();\n  return valid;\n}\n"}
{"nl": "No SM_LOOKATOBJECT broadcast", "code": "public static void onSimpleFinishTalk(NpcAI2 npcAI,Creature creature){\n  Npc owner=npcAI.getOwner();\n  if (owner.isTargeting(creature.getObjectId()) && npcAI.setSubStateIfNot(AISubState.NONE)) {\n    owner.setTarget(null);\n  }\n}\n"}
{"nl": "this is currently selected?", "code": "public boolean isSelected(){\n  ClusterViewer viewer=getViewer();\n  return viewer.getPcoaTab() != null && viewer.getPcoaTab().isShowGroupsAsEllipses();\n}\n"}
{"nl": "Dynamic time warping (DTW) cost signal and reference distanceFunction = {\"Euclidean\" or \"Absolute\"}", "code": "public DTW(double[][] signal,double[][] reference,String distanceFunction){\n  this.signal=signal;\n  this.reference=reference;\n  this.distanceFunction=distanceFunction;\n  setCost(dpDistance());\n}\n"}
{"nl": "Write (or update) an entity in the data-grid", "code": "private static void write(GigaSpace space,Phrase phrase){\n  LeaseContext<Phrase> context=space.write(phrase);\n  if (context.getVersion() == 1) {\n    System.out.println(\"write - \" + phrase);\n  }\n else {\n    System.out.println(\"update - \" + phrase);\n  }\n}\n"}
{"nl": "Check whether a parameter is a valid deadband", "code": "public static final boolean isValidType(final short valueDeadbandType){\n  return valueDeadbandType >= DEADBAND_NONE && valueDeadbandType <= DEADBAND_PROCESS_RELATIVE_VALUE_DESCR_CHANGE;\n}\n"}
{"nl": "Returns the name of this audioplayer", "code": "public String toString(){\n  return \"FileAudioPlayer\";\n}\n"}
{"nl": "write bytes as a null-terminated string", "code": "public void writeNullTerminatedString(byte[] bytes) throws IOException {\n  int pos=0;\n  while (pos < bytes.length) {\n    if (bytes[pos] == 0)     break;\n    pos++;\n  }\n  if (pos > 0)   write(bytes,0,pos);\n  write((byte)0);\n}\n"}
{"nl": "Find a faces within a local image", "code": "@NotNull public Emotion findEmotionSingleFace(@NotNull String image){\n  List<Emotion> emotions=emotionBuilder.emotionRecognition(image).withResult();\n  if (Utils.isEmpty(emotions) || emotions.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(emotions) ? 0 : emotions.size(),\"a single face was not present\");\n  return emotions.get(0);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LeadsMetricHitQuery(VkApiClient client,String data){\n  super(client,\"leads.metricHit\",MetricHitResponse.class);\n  data(data);\n}\n"}
{"nl": "don't allow editing of anything", "code": "public boolean isCellEditable(int row,int column){\n  return false;\n}\n"}
{"nl": "add weight to list of weights", "code": "public void addToWeightList(double weight){\n  weightList.add(weight);\n}\n"}
{"nl": "Convenience method to load tree from an inputstream", "code": "public void loadTree(InputStream treeStream) throws IOException, MaryConfigurationException {\n  MaryCARTReader cartReader=new MaryCARTReader();\n  this.tree=cartReader.loadFromStream(treeStream);\n  this.featureDefinition=tree.getFeatureDefinition();\n  this.indexPredictedFeature=featureDefinition.getFeatureIndex(PREDICTED_STRING_FEATURENAME);\n  this.convertToLowercase=false;\n  Properties props=tree.getProperties();\n  if (props == null)   throw new IllegalArgumentException(\"Prediction tree does not contain properties\");\n  convertToLowercase=Boolean.parseBoolean(props.getProperty(\"lowercase\"));\n  context=Integer.parseInt(props.getProperty(\"context\"));\n}\n"}
{"nl": "Determine the primitive type's converter", "code": "public static Converter<String,?> determinePrimitiveConverter(Type type){\n  if (String.class.equals(type)) {\n    return StringConverter.INSTANCE;\n  }\n else   if (Boolean.class.equals(type) || boolean.class.equals(type)) {\n    return BooleanConverter.INSTANCE;\n  }\n else   if (Integer.class.equals(type) || int.class.equals(type)) {\n    return Ints.stringConverter();\n  }\n else   if (Long.class.equals(type) || long.class.equals(type)) {\n    return Longs.stringConverter();\n  }\n else   if (Short.class.equals(type) || short.class.equals(type)) {\n    return Shorts.stringConverter();\n  }\n else   if (Float.class.equals(type) || float.class.equals(type)) {\n    return Floats.stringConverter();\n  }\n else   if (Double.class.equals(type) || double.class.equals(type)) {\n    return Doubles.stringConverter();\n  }\n  return null;\n}\n"}
{"nl": "is the widet connected in that direction", "code": "public boolean isConnected(Direction direction){\n  return mConstraintWidget.getAnchor(lookupType(direction)).isConnected();\n}\n"}
{"nl": "Returns true if the context points to an Android module, but outside of a specific resource type folder", "code": "static boolean isOutsideResourceTypeFolder(@NotNull DataContext context){\n  VirtualFile file=CommonDataKeys.VIRTUAL_FILE.getData(context);\n  if (file != null) {\n    if (!file.isDirectory()) {\n      file=file.getParent();\n    }\n    if (file != null && ResourceFolderType.getFolderType(file.getName()) != null) {\n      return false;\n    }\n  }\n  Module module=LangDataKeys.MODULE.getData(context);\n  if (module != null) {\n    return AndroidFacet.getInstance(module) != null;\n  }\n  PsiElement element=CommonDataKeys.PSI_ELEMENT.getData(context);\n  return element != null && AndroidFacet.getInstance(element) != null;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetSchoolsQuery(VkApiClient client,UserActor actor,int cityId){\n  super(client,\"database.getSchools\",GetSchoolsResponse.class);\n  accessToken(actor.getAccessToken());\n  cityId(cityId);\n}\n"}
{"nl": "Updates the internal rule buffer with an invalidation message", "code": "public void invalidate(final Long pId,final TagQualityStatus pReason,final String pDescription,final Timestamp pTimestamp){\n  final RuleBufferObject bufferObj;\n  LOG.trace(pId + \" entering invalidate()\");\nsynchronized (BUFFER_LOCK) {\n    if (!RULE_OBJECT_BUF.containsKey(pId)) {\n      bufferObj=new RuleBufferObject(pId,null,pReason,pDescription,null,pTimestamp);\n      RULE_OBJECT_BUF.put(pId,bufferObj);\n    }\n else {\n      bufferObj=(RuleBufferObject)RULE_OBJECT_BUF.get(pId);\n      bufferObj.invalidate(pReason,pDescription,pTimestamp);\n    }\n    scheduleCacheUpdaterTask(pId);\n  }\n  LOG.trace(pId + \" leaving invalidate()\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallUnpinQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.unpin\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n"}
{"nl": "Creates a file with the specified contents and file path in the test project", "code": "protected VirtualFile createFile(String filePath){\n  return testFixture.getTempDirFixture().createFile(filePath);\n}\n"}
{"nl": "basic method to send the message to the clients", "code": "public void sendPacket(String... datas){\n  String packet=new String();\n  packet=packet.concat(Settings.sSenderSplitProtocolToken);\n  for (int i=0; i < datas.length; i++) {\n    packet=packet.concat(datas[i] + Settings.sSenderSplitProtocolToken);\n  }\n  packet=packet.concat(Settings.sSenderSplitMultipleToken);\n  send(packet);\n}\n"}
{"nl": "Checks if node has specified property", "code": "public static ExpectedCondition<Boolean> hasNodeProperty(final Session session,final String nodePath,final String propertyName){\n  LOG.debug(\"Checking if node '{}' has property '{}'\",nodePath,propertyName);\n  return null;\n}\n"}
{"nl": "Checks if WKT shape empty, no type set and no multi shapes/segments set", "code": "public boolean isEmpty(){\n  return (geometryType == null) || segmentList.isEmpty();\n}\n"}
{"nl": "Set fields", "code": "public NewsfeedGetRecommendedQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "setup the list", "code": "private void loadList(JComboBox cbox){\n  java.util.List<IDirector> projects=ProjectManager.getProjects();\n  TreeSet<InputDataItem> items=new TreeSet<>(new InputDataItem());\n  for (  IDirector project : projects) {\n    if (project instanceof Director) {\n      Director dir=(Director)project;\n      if (!dir.getMainViewer().isLocked() && dir.getDocument().getNumberOfReads() > 0 && !dir.getDocument().getMeganFile().isMeganSummaryFile()) {\n        items.add(new InputDataItem(dir));\n      }\n    }\n  }\n  for (  InputDataItem item : items) {\n    cbox.addItem(item);\n  }\n}\n"}
{"nl": "Create new connection from given url and properties", "code": "public GConnection(String url,Properties properties) throws SQLException {\n  try {\n    if (!url.startsWith(JDBC_GIGASPACES_URL))     throw new IllegalArgumentException(\"Invalid Url [\" + url + \"] - does not start with \"+ JDBC_GIGASPACES_URL);\n    this.url=url.substring(JDBC_GIGASPACES_URL.length());\n    this.space=(ISpaceProxy)SpaceFinder.find(this.url);\n    this.properties=properties;\n    initialize(space.getDirectProxy().getRemoteJSpace());\n  }\n catch (  Exception e) {\n    SQLException se=new SQLException(\"Error creating connection; Cause: \" + e,\"GSP\",-137);\n    se.initCause(e);\n    throw se;\n  }\n}\n"}
{"nl": "Creates a new project in the workbench from an existing one", "code": "void createExistingProject(IProgressMonitor monitor) throws CoreException {\n  String projectName=project.getName();\n  IProjectDescription description;\n  try {\n    monitor.beginTask(\"Creating \" + projectName,2 * 1000);\n    description=ResourcesPlugin.getWorkspace().loadProjectDescription(new Path(directory + File.separatorChar + \".project\"));\n    description.setName(projectName);\n    project.create(description,new SubProgressMonitor(monitor,1000));\n    project.open(new SubProgressMonitor(monitor,1000));\n  }\n  finally {\n    monitor.done();\n  }\n}\n"}
{"nl": "Checks if a name is forbidden (contains string sequences from config)", "code": "private static boolean isForbiddenBySequence(String name){\n  if (NameConfig.NAME_SEQUENCE_FORBIDDEN.equals(\"\")) {\n    return false;\n  }\n  if (forbiddenSequences == null || forbiddenSequences.length == 0) {\n    forbiddenSequences=NameConfig.NAME_SEQUENCE_FORBIDDEN.toLowerCase().split(\",\");\n  }\n  for (  String s : forbiddenSequences) {\n    if (name.toLowerCase().contains(s)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Internal method for start the animation", "code": "private void emitParticles(){\nswitch (currentWeather) {\ncase RAIN:\n    ps.emitWithGravity(this,Gravity.BOTTOM,rainParticles);\n  break;\ncase SNOW:\nps.emitWithGravity(this,Gravity.BOTTOM,snowParticles);\nbreak;\ndefault :\nbreak;\n}\nisPlaying=true;\n}\n"}
{"nl": "Checks if a flag is granted by default", "code": "public Optional<Message> can(@NotNull PermissionFlag action){\n  return Optional.ofNullable(mark(generalPermissions.get(action),action));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketDeleteAlbumQuery(VkApiClient client,UserActor actor,int ownerId,int albumId){\n  super(client,\"market.deleteAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  albumId(albumId);\n}\n"}
{"nl": "check whether data is acceptable", "code": "public void check() throws IOException {\n  boolean ok=false;\n  if (type != null) {\n    for (    AcceptableTypes acceptable : AcceptableTypes.values()) {\n      if (acceptable.toString().equalsIgnoreCase(type)) {\n        ok=true;\n        break;\n      }\n    }\n  }\n  if (!ok)   throw new IOException(\"type=\" + type + \", must be one of: \"+ Basic.toString(AcceptableTypes.values(),\", \").replaceAll(\"_\",\" \"));\n  ok=false;\n  if (matrix_type != null) {\n    for (    AcceptableMatrixTypes acceptable : AcceptableMatrixTypes.values()) {\n      if (acceptable.toString().equalsIgnoreCase(matrix_type)) {\n        ok=true;\n        break;\n      }\n    }\n  }\n  if (!ok)   throw new IOException(\"matrix_type=\" + matrix_type + \", must be one of: \"+ Basic.toString(AcceptableMatrixTypes.values(),\", \"));\n  ok=false;\n  if (matrix_element_type != null) {\n    for (    AcceptableMatrixElementTypes acceptable : AcceptableMatrixElementTypes.values()) {\n      if (acceptable.toString().equalsIgnoreCase(matrix_element_type)) {\n        ok=true;\n        break;\n      }\n    }\n  }\n  if (!ok)   throw new IOException(\"matrix_element_type=\" + matrix_element_type + \", must be one of: \"+ Basic.toString(AcceptableMatrixElementTypes.values(),\", \"));\n}\n"}
{"nl": "Returns the state of the \"Don't keep activities - Destroy every activity as soon as the user leaves it\" developer option", "code": "public static boolean isDontKeepActivitiesEnabled(final Context context){\n  int alwaysFinishActivitiesInt;\n  if (Build.VERSION.SDK_INT >= 17) {\n    alwaysFinishActivitiesInt=Settings.System.getInt(context.getContentResolver(),Settings.Global.ALWAYS_FINISH_ACTIVITIES,0);\n  }\n else {\n    alwaysFinishActivitiesInt=Settings.System.getInt(context.getContentResolver(),Settings.System.ALWAYS_FINISH_ACTIVITIES,0);\n  }\n  return alwaysFinishActivitiesInt == 1;\n}\n"}
{"nl": "Check if thr set contains a given key mapped to a given value", "code": "public boolean has(String key,String value){\n  if (key == null) {\n    throw new NullPointerException(\"key\");\n  }\n  if (value == null) {\n    throw new NullPointerException(\"value\");\n  }\nsynchronized (contexts) {\n    for (    Map.Entry<String,String> e : contexts) {\n      if (!e.getKey().equalsIgnoreCase(key)) {\n        continue;\n      }\n      if (!e.getValue().equals(value)) {\n        continue;\n      }\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Just draw arc", "code": "private void drawSolidProgress(Canvas canvas){\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f,false,mProgressBackgroundPaint);\n  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f * getProgress() / getMax(),true,mProgressPaint);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetSchoolClassesQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getSchoolClasses\",Utils.buildParametrizedType(List.class,Utils.buildParametrizedType(List.class,JsonObject.class)));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Set owner id", "code": "protected DocsDeleteQuery ownerId(int value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "Start mentoring in group", "code": "public static void startMentoring(Player player){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new PlayerStartMentoringEvent(group,player));\n  }\n}\n"}
{"nl": "Whether users want to use flags to represent languages when possible", "code": "private static boolean showFlagsForLanguages(){\n  if (ourFlagSettingAvailable) {\n    try {\n      if (ourLanguageFlagField == null) {\n        ourLanguageFlagField=UISettings.class.getDeclaredField(\"LANGUAGE_FLAGS\");\n      }\n      return ourLanguageFlagField.getBoolean(UISettings.getInstance());\n    }\n catch (    Throwable t) {\n      ourFlagSettingAvailable=false;\n      return true;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Creates the default cumulative probability density test input values", "code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  final Set<String> previousSelection=ProjectManager.getPreviouslySelectedNodeLabels();\n  viewer.getSelectedBlock().clear();\n  if (previousSelection.size() > 0) {\n    final Alignment alignment=viewer.getAlignment();\n    for (int row=0; row < alignment.getNumberOfSequences(); row++) {\n      Lane lane=alignment.getLane(row);\n      if (previousSelection.contains(Basic.getFirstWord(lane.getName()))) {\n        int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(lane.getFirstNonGapPosition());\n        int firstCol=lane.getFirstNonGapPosition() - firstJump;\n        int lastCol=lane.getLastNonGapPosition() - firstJump - 1;\n        row=alignment.getRowCompressor().getRow(row);\n        viewer.getSelectedBlock().select(row,firstCol,row,lastCol,alignment.isTranslate());\n        System.err.println(\"Found: \" + lane.getName());\n        executeImmediately(\"zoom axis=both what=selection;\");\n        return;\n      }\n    }\n  }\n}\n"}
{"nl": "It creates a connection to the specified mail server", "code": "private void createConnection(String server){\n  Properties props=System.getProperties();\n  props.put(\"mail.smtp.host\",server);\n  LOG.debug(\"createConnection() - The connection with the mail server has been created\");\n  this.session=Session.getInstance(props,null);\n}\n"}
{"nl": "Validate is specified acl owned by specified user or is shared to specified project", "code": "@SuppressWarnings(\"unchecked\") public static void isPossibleToRead(Acl acl,String userModifier,String projectName){\n  BusinessRule.expect(acl,Predicates.or(Preconditions.isOwner(userModifier),Preconditions.isSharedTo(projectName))).verify(ErrorType.UNABLE_MODIFY_SHARABLE_RESOURCE,Suppliers.formattedSupplier(\"User '{}' isn't owner of resource and resource isn't shared to project '{}'.\",userModifier,projectName));\n}\n"}
{"nl": "upload file to storage server (by file buff)", "code": "public String[] upload_file(byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  final String group_name=null;\n  return this.upload_file(group_name,file_buff,offset,length,file_ext_name,meta_list);\n}\n"}
{"nl": "Construct an XSNamedMap implementation for one namespace", "code": "public XSNamedMapImpl(String namespace,SymbolHash map){\n  fNamespaces=new String[]{namespace};\n  fMaps=new SymbolHash[]{map};\n  fNSNum=1;\n}\n"}
{"nl": "Creates deque (double-side queue) of CharSequence", "code": "private Deque<Character> dequeFrom(CharSequence in){\n  if (in == null) {\n    return null;\n  }\n  final Deque<Character> out=new ArrayDeque<>(in.length());\n  for (int i=in.length() - 1; i >= 0; i--) {\n    out.push(in.charAt(i));\n  }\n  return out;\n}\n"}
{"nl": "Output a DOM node to a specified destination", "code": "public void output(Node input,OutputStream destination) throws TransformerException {\n  output(new DOMSource(input),new StreamResult(destination));\n}\n"}
{"nl": "xml -> pojo", "code": "@SuppressWarnings(\"unchecked\") public static <T>T fromXml(Class<T> clazz,String xml){\n  T object=(T)CLASS_2_XSTREAM_INSTANCE.get(clazz).fromXML(xml);\n  return object;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public OrdersGetAmountQuery(VkApiClient client,UserActor actor,int userId,List<String> votes){\n  super(client,\"orders.getAmount\",Amount.class);\n  accessToken(actor.getAccessToken());\n  userId(userId);\n  votes(votes);\n}\n"}
{"nl": "Send the given JSON to the client", "code": "private void sendJson(Json json){\n  try {\n    session.getRemote().sendString(json.toString());\n  }\n catch (  IOException e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "Due to warm bootstrap feature, we make region offset to be the same for all DCs and will support different offsets later", "code": "@Override public int regionOffset(String dataCenter){\n  return Math.abs(reverse(\"Dynomite\").hashCode());\n}\n"}
{"nl": "This is the methods that writes the RequestPacket into the socket", "code": "public ResponsePacket writeRequestPacket(RequestPacket packet) throws SQLException {\n  long start=System.currentTimeMillis();\n  boolean useRouter=false;\n  while (true) {\n    if (!useRouter) {\n      try {\n        return writeRequestPacketInternal(packet);\n      }\n catch (      RemoteException re) {\n        sleep(1000);\n        if (System.currentTimeMillis() - start > EXECUTE_RETRY_TIMEOUT) {\n          useRouter=true;\n        }\n      }\n    }\n else {\n      reinitialize();\n      start=System.currentTimeMillis();\n      useRouter=false;\n    }\n  }\n}\n"}
{"nl": "Create StartViewModel with preferences", "code": "public StartViewModel(AppPreferences preferences){\n  this.preferences=preferences;\n}\n"}
{"nl": "Factory method to instantiate Fragment", "code": "public static PostsFragment newInstance(){\n  return new PostsFragment();\n}\n"}
{"nl": "Creates a new <code>AsyncScriptingProxyConfigurer</code> on top of the given space", "code": "public EventDrivenScriptingProxyConfigurer(GigaSpace gigaSpace){\n  remotingConfigurer=new EventDrivenRemotingProxyConfigurer<ScriptingExecutor>(gigaSpace,ScriptingExecutor.class).metaArgumentsHandler(new ScriptingMetaArgumentsHandler()).remoteInvocationAspect(new LazyLoadingRemoteInvocationAspect()).remoteRoutingHandler(new ScriptingRemoteRoutingHandler());\n}\n"}
{"nl": "Create a set of LPC coefficients", "code": "public LpCoeffs(double[] oneMinusA,double gain){\n  this.oneMinusA=oneMinusA;\n  this.gain=gain;\n  this.lsf=null;\n  this.lpcc=null;\n  this.lprefc=null;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.setCanceled(false);\n  viewer.setVisible(false);\n}\n"}
{"nl": "Update alliance members to some event of player", "code": "public static final void updateAlliance(Player player,PlayerAllianceEvent allianceEvent){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new PlayerAllianceUpdateEvent(alliance,player,allianceEvent));\n  }\n}\n"}
{"nl": "close this stream", "code": "public void close() throws IOException {\n  outs.close();\n}\n"}
{"nl": "Filters to apply", "code": "public NewsfeedGetCommentsQuery filters(NewsfeedGetCommentsFilter... value){\n  return unsafeParam(\"filters\",value);\n}\n"}
{"nl": "Set group ids", "code": "public NewsfeedDeleteBanQuery groupIds(Integer... value){\n  return unsafeParam(\"group_ids\",value);\n}\n"}
{"nl": "Add the steps for this wizard", "code": "private void addPaths(){\n  addPath(new ConfigureAndroidProjectPath(getDisposable()));\n  for (  NewFormFactorModulePath path : NewFormFactorModulePath.getAvailableFormFactorModulePaths(getDisposable())) {\n    addPath(path);\n  }\n  addPath(new ConfigureCppSupportPath(getDisposable()));\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set mode=\" + (Comparer.COMPARISON_MODE.ABSOLUTE) + \";\");\n  CompareWindow viewer=(CompareWindow)getParent();\n  viewer.getCommandManager().updateEnableState();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PagesGetHistoryQuery(VkApiClient client,UserActor actor,int pageId){\n  super(client,\"pages.getHistory\",Utils.buildParametrizedType(List.class,WikipageVersion.class));\n  accessToken(actor.getAccessToken());\n  pageId(pageId);\n}\n"}
{"nl": "does this file name have the syntax of a remote file?", "code": "public static boolean isRemoteFile(String localFileName){\n  return localFileName.contains(\"::\");\n}\n"}
{"nl": "Do pulling with config items", "code": "public String pulling(ClientSession client,Map<String,String> configItems,HttpServletRequest req,HttpServletResponse resp){\n  boolean longPulling=isLongPulling(req);\n  if (longPulling) {\n    longPulling(client,configItems,req);\n    return \"\";\n  }\n  shortPulling(client,configItems,resp);\n  return \"\";\n}\n"}
{"nl": "Convert object to Base64 String", "code": "public static String convertObjectToString(Object obj) throws IOException {\n  ByteArrayOutputStream baos=null;\n  GZIPOutputStream gos=null;\n  ObjectOutputStream oos=null;\n  try {\n    baos=new ByteArrayOutputStream();\n    gos=new GZIPOutputStream(baos);\n    oos=new ObjectOutputStream(gos);\n    oos.writeObject(obj);\n  }\n  finally {\n    try {\n      if (oos != null) {\n        oos.close();\n      }\n      if (gos != null) {\n        gos.close();\n      }\n      if (baos != null) {\n        baos.close();\n      }\n    }\n catch (    IOException e) {\n      LOG.error(e);\n    }\n  }\n  return new String(Base64.encodeBase64(baos.toByteArray()),CarbonCommonConstants.DEFAULT_CHARSET);\n}\n"}
{"nl": "store an element", "code": "public IObjectInfo<T> add(T subject){\n  return insert(subject);\n}\n"}
{"nl": "all of enemy Attack mode", "code": "private void AttackAll(){\n  for (int i=0; i < 6; i++) {\n    for (int j=0; j < 8; j++) {\n      if (enemys[i][j].get_Statue() == PangPangEnemy.SYNC)       AttackPath(i,j,rnd.nextInt(10) + 1);\n    }\n  }\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapPilot && getPilotId().equals(((AirMapPilot)o).getPilotId());\n}\n"}
{"nl": "Simple test assertion utility method", "code": "protected void testAssertMappedValues(double[] d,Object[][] map,Double tolerance){\n  for (  Object[] o : map) {\n    EstimationType e=(EstimationType)o[0];\n    double expected=(Double)o[1];\n    double result=getTestMedian(e).evaluate(d);\n    assertEquals(\"expected[\" + e + \"] = \"+ expected+ \" but was = \"+ result,expected,result,tolerance);\n  }\n}\n"}
{"nl": "calculate the last processed key, in case of blobstore bulks will return the last flushed entry key", "code": "private long calcLastProcessedkey(){\n  ReplicationInContext replicationInContext=getReplicationInContext();\n  ReplicationBlobstoreBulkContext replicationBlobstoreBulkContext=replicationInContext.getReplicationBlobstoreBulkContext();\n  if (replicationBlobstoreBulkContext != null && replicationBlobstoreBulkContext.getBlobStoreReplicationBulkConsumeHelper() != null) {\n    return replicationBlobstoreBulkContext.getBlobStoreReplicationBulkConsumeHelper().getLastProcessedKey();\n  }\n  return _lastProcessedKey;\n}\n"}
{"nl": "Use the Watson Developer Cloud SDK to send the user's query to the retrive and rank service", "code": "public QueryResponse query(String userQuery) throws Exception {\n  RetrieveAndRank service=new RetrieveAndRank();\n  HttpSolrClient solrClient=HttpSolrClientUtils.getSolrClient(service.getSolrUrl(CLUSTER_ID),USERNAME,PASSWORD);\n  logger.info(Messages.getString(\"Query.PASS_CLUSTER_DETAILS\"));\n  final SolrQuery query=new SolrQuery(userQuery).setFields(Constants.SCHEMA_FIELD_ID,Constants.SCHEMA_FIELD_BODY,Constants.SCHEMA_FIELD_TITLE,Constants.SCHEMA_FIELD_CONFIDENCE,Constants.SCHEMA_FIELD_SOURCE_URL).setHighlight(true).setHighlightFragsize(150).setHighlightSnippets(1).setParam(\"hl.fl\",Constants.SCHEMA_FIELD_BODY).setRows(Constants.RESULTS_TO_FETCH).setRequestHandler(\"/fcselect\").setParam(\"ranker_id\",RANKER_ID);\n  logger.info(Messages.getString(\"Query.QUERY_SOLR_RANKER\"));\n  return solrClient.query(COLLECTION_NAME,query);\n}\n"}
{"nl": "Validates whether a bbox string is valid and on the format: <code>min longitude, min latitude, max longitude, max latitude</code>", "code": "public static boolean bboxIsValid(String bbox){\n  if (bbox == null || bbox.trim().isEmpty()) {\n    return false;\n  }\n  Matcher matcher=BBOX_PATTERN.matcher(bbox);\n  if (!matcher.matches()) {\n    return false;\n  }\n  double minLng=Double.parseDouble(matcher.group(1));\n  double minLat=Double.parseDouble(matcher.group(4));\n  double maxLng=Double.parseDouble(matcher.group(7));\n  double maxLat=Double.parseDouble(matcher.group(10));\n  if (minLng < -180d || minLng > 180d || maxLng < -180d || maxLng > 180d) {\n    return false;\n  }\n  if (minLat < -90d || minLat > 90d || maxLat < -90d || maxLat > 90d) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "Creates a storable headphone fence which will be valid when the headphones are in the specified state", "code": "public static StorableHeadphoneFence during(int state){\n  return new StorableHeadphoneFence(STATE,state);\n}\n"}
{"nl": "Sends message to all players from admin", "code": "private void broadcastFromGm(final Player player){\n  PacketSendUtility.broadcastPacket(player,new SM_MESSAGE(player,message,type),true);\n}\n"}
{"nl": "is this an appropriate file?", "code": "public static boolean isTableFile(String fileName){\n  try {\n    try (RandomAccessFile raf=new RandomAccessFile(fileName,\"r\")){\n      final byte[] magicNumber=new byte[3];\n      raf.read(magicNumber);\n      return Basic.toString(magicNumber).equals(MAGIC_NUMBER) || Basic.toString(magicNumber).equals(MAGIC_NUMBERX);\n    }\n   }\n catch (  Exception ex) {\n    return false;\n  }\n}\n"}
{"nl": "Attempts to infer the implicit roleTypes of vars in a relAtom", "code": "private Map<String,Pair<Type,RoleType>> computeVarTypeRoleMap(){\n  Map<String,Pair<Type,RoleType>> roleVarTypeMap=new HashMap<>();\n  if (getParentQuery() == null)   return roleVarTypeMap;\n  MindmapsGraph graph=getParentQuery().getGraph().orElse(null);\n  Type relType=getType();\n  Set<String> vars=getVarNames();\n  Map<String,Type> varTypeMap=getParentQuery().getVarTypeMap();\n  for (  String var : vars) {\n    Type type=varTypeMap.get(var);\n    String roleTypeId=\"\";\n    for (    VarAdmin.Casting c : castings) {\n      if (c.getRolePlayer().getName().equals(var))       roleTypeId=c.getRoleType().flatMap(null).orElse(\"\");\n    }\n    if (!roleTypeId.isEmpty())     roleVarTypeMap.put(var,new Pair<>(type,graph.getRoleType(roleTypeId)));\n else {\n      if (type != null) {\n        Set<RoleType> cRoles=getCompatibleRoleTypes(type,relType);\n        if (cRoles.size() == 1)         roleVarTypeMap.put(var,new Pair<>(type,cRoles.iterator().next()));\n else         roleVarTypeMap.put(var,new Pair<>(type,null));\n      }\n    }\n  }\n  return roleVarTypeMap;\n}\n"}
{"nl": "computes the correlation coefficient", "code": "private double computeCorrelationCoefficient(int[] x,double[] y,int n){\n  double sumX=0;\n  double sumY=0;\n  double sumXY=0;\n  double sumX2=0;\n  double sumY2=0;\n  for (int i=0; i < n; i++) {\n    sumX+=x[i];\n    sumY+=y[i];\n    sumXY+=x[i] * y[i];\n    sumX2+=x[i] * x[i];\n    sumY2+=y[i] * y[i];\n  }\n  final double bottom=Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));\n  if (bottom == 0)   return 0;\n  final double top=n * sumXY - sumX * sumY;\n  return top / bottom;\n}\n"}
{"nl": "Returns the string form of this object", "code": "public String toString(){\n  return \"MbrolaAudioOutput\";\n}\n"}
{"nl": "Static method to create AndroidMethod from Soot method signature", "code": "public static AndroidMethod createFromSignature(String signature){\n  if (!signature.startsWith(\"<\"))   signature=\"<\" + signature;\n  if (!signature.endsWith(\">\"))   signature=signature + \">\";\n  SootMethodAndClass smac=SootMethodRepresentationParser.v().parseSootMethodString(signature);\n  return new AndroidMethod(smac.getMethodName(),smac.getParameters(),smac.getReturnType(),smac.getClassName());\n}\n"}
{"nl": "Comment id", "code": "protected MarketReportCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n"}
{"nl": "Adds a new provider to the manifest", "code": "public void addProvider(AXmlNode node){\n  if (providers.isEmpty())   providers=new ArrayList<AXmlNode>();\n  providers.add(node);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetNewTagsQuery(VkApiClient client,UserActor actor){\n  super(client,\"video.getNewTags\",GetNewTagsResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Add new order", "code": "@Override public long addOrder(Order order){\n  return sessionTemplate.insert(NAMESPACE + \".addOrder\",order);\n}\n"}
{"nl": "Return extended information about users and communities from the \"Likes\" list", "code": "protected LikesGetListQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Toggles between a list and a grid recyclerview", "code": "private void toggleListGridLayout(){\n  cityWeatherAdapter.setOnCityWeatherClickListener(null);\n  List<CityWeather> cityWeatherList=cityWeatherAdapter.getCityWeatherList();\n  if (isLinearLayoutEnabled) {\n    cityWeatherRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n    cityWeatherAdapter=new CityWeatherAdapter(getContext(),new ArrayList<>(),R.layout.item_city_weather);\n  }\n else {\n    cityWeatherRecyclerView.setLayoutManager(new GridLayoutManager(getContext(),2));\n    cityWeatherAdapter=new CityWeatherAdapter(getContext(),new ArrayList<>(),R.layout.item_city_weather_card);\n  }\n  cityWeatherAdapter.setOnCityWeatherClickListener(onCityWeatherClickListener);\n  cityWeatherAdapter.setOnCityWeatherFavoriteSelectListener(onCityWeatherFavoriteSelectListener);\n  cityWeatherAdapter.setCityWeatherList(cityWeatherList);\n  cityWeatherRecyclerView.setAdapter(cityWeatherAdapter);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoRestoreQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.restore\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n"}
{"nl": "Notifies the design surface that the given screen view (which must be showing in this design surface) has been rendered (possibly with errors)", "code": "public void updateErrorDisplay(@Nullable final RenderResult result){\n  assert ApplicationManager.getApplication().isDispatchThread() || !ApplicationManager.getApplication().isReadAccessAllowed() : \"Do not hold read lock when calling updateErrorDisplay!\";\n  getErrorQueue().cancelAllUpdates();\n  myRenderHasProblems=result != null && result.getLogger().hasProblems();\n  if (myRenderHasProblems) {\n    updateErrors(result);\n  }\n else {\n    UIUtil.invokeLaterIfNeeded(null);\n  }\n}\n"}
{"nl": "load the data in this Bean", "code": "public static boolean load(String where,Object[] args,String orderby,Bean b){\n  Table mapping=(Table)b.getClass().getAnnotation(Table.class);\n  if (mapping == null) {\n    if (log.isErrorEnabled())     log.error(\"mapping missed in [\" + b.getClass() + \"] declaretion\");\n    return false;\n  }\n  return load(mapping.name(),where,args,orderby,b);\n}\n"}
{"nl": "Derives a new abstraction that models the current local being caught as an exception", "code": "public final Abstraction deriveNewAbstractionOnCatch(Value taint){\n  assert this.exceptionThrown;\n  Abstraction abs=deriveNewAbstractionMutable(new AccessPath(taint,true),null);\n  abs.exceptionThrown=false;\n  return abs;\n}\n"}
{"nl": "info log", "code": "public static void i(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.i(tag,buildMsg(msg));\n  }\n}\n"}
{"nl": "Expands the given number string as pairs as in years or IDs", "code": "public static void expandID(String numberString,WordRelation wordRelation,Item tokenItem){\n  int numberDigits=numberString.length();\n  if ((numberDigits == 4) && (numberString.charAt(2) == '0') && (numberString.charAt(3) == '0')) {\n    if (numberString.charAt(1) == '0') {\n      expandNumber(numberString,wordRelation,tokenItem);\n    }\n else {\n      expandNumber(numberString.substring(0,2),wordRelation,tokenItem);\n      wordRelation.addWord(tokenItem,\"hundred\");\n    }\n  }\n else   if ((numberDigits == 2) && (numberString.charAt(0) == '0')) {\n    wordRelation.addWord(tokenItem,\"oh\");\n    expandDigits(numberString.substring(1,2),wordRelation,tokenItem);\n  }\n else   if ((numberDigits == 4 && numberString.charAt(1) == '0') || numberDigits < 3) {\n    expandNumber(numberString,wordRelation,tokenItem);\n  }\n else   if (numberDigits % 2 == 1) {\n    String firstDigit=digit2num[numberString.charAt(0) - '0'];\n    wordRelation.addWord(tokenItem,firstDigit);\n    expandID(numberString.substring(1,numberDigits),wordRelation,tokenItem);\n  }\n else {\n    expandNumber(numberString.substring(0,2),wordRelation,tokenItem);\n    expandID(numberString.substring(2,numberDigits),wordRelation,tokenItem);\n  }\n}\n"}
{"nl": "A check to be used as method reference", "code": "public boolean isDeny(){\n  return message != null;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public byte elementAt(char index){\n  return this.values[((this.indices[(index >> '\\007')] & 0xFFFF) + (index & 0x7F))];\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"notes.deleteComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "Without OpenCV Version", "code": "private List<Sweet> extractSweetsForFeature(Mat img,int feature,int i,int orientation){\n  List<Sweet> featureSweets=new ArrayList<>();\n  int rowLimit=adjustLimitAccordingToOrientation(orientation,img.rows());\n  for (int k=0; k < rowLimit; k+=WALK) {\n    for (int l=0; l < img.cols(); l+=WALK) {\n      lookForFeatureInPixel(img,feature,i,featureSweets,k,l);\n    }\n  }\n  return featureSweets;\n}\n"}
{"nl": "Sign Out no login", "code": "private void signOut(){\n  mFirebaseAuth.signOut();\n  Auth.GoogleSignInApi.signOut(mGoogleApiClient);\n  startActivity(new Intent(this,LoginActivity.class));\n  finish();\n}\n"}
{"nl": "Start the item editor activity", "code": "public void editItem(Configuration.Item item,ItemChangedListener listener){\n  Intent editIntent=new Intent(this,ItemActivity.class);\n  this.itemChangedListener=listener;\n  if (item != null) {\n    editIntent.putExtra(\"ITEM_TITLE\",item.title);\n    editIntent.putExtra(\"ITEM_LOCATION\",item.location);\n    editIntent.putExtra(\"ITEM_STATE\",item.state);\n  }\n  startActivityForResult(editIntent,REQUEST_ITEM_EDIT);\n}\n"}
{"nl": "Set peer id", "code": "public MessagesSearchQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n"}
{"nl": "update scroll pane after zoom to keep centered on mouse position", "code": "private void updateScrollPane(){\n  if (chartDrawer.getScrollBackReferenceRect() != null) {\n    chartDrawer.computeScrollBackReferenceRect();\n    if (chartDrawer.getScrollBackReferencePoint() != null && chartDrawer.getScrollBackWindowPoint() != null) {\n      Point2D apt=chartDrawer.convertReferenceToWindow(chartDrawer.getScrollBackReferencePoint());\n      int scrollX=(int)Math.round(apt.getX() - chartDrawer.getScrollBackWindowPoint().getX());\n      int scrollY=(int)Math.round(apt.getY() - chartDrawer.getScrollBackWindowPoint().getY());\n      chartDrawer.setScrollBackReferencePoint(null);\n      chartDrawer.setScrollBackWindowPoint(null);\n      if (scrollX != 0) {\n        scrollPane.getHorizontalScrollBar().setValue(scrollPane.getHorizontalScrollBar().getValue() + scrollX);\n      }\n      if (scrollY != 0) {\n        scrollPane.getVerticalScrollBar().setValue(scrollPane.getVerticalScrollBar().getValue() + scrollY);\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallRepostQuery(VkApiClient client,UserActor actor,String object){\n  super(client,\"wall.repost\",RepostResponse.class);\n  accessToken(actor.getAccessToken());\n  object(object);\n}\n"}
{"nl": "Returns true if this value store contains the locally scoped value stores", "code": "public boolean contains(){\n  int next=0;\n  final int size=fValues.size();\n  LOOP:   for (int i=0; i < size; i=next) {\n    next=i + fFieldCount;\n    for (int j=0; j < fFieldCount; j++) {\n      Object value1=fLocalValues[j];\n      Object value2=fValues.elementAt(i);\n      short valueType1=fLocalValueTypes[j];\n      short valueType2=getValueTypeAt(i);\n      if (value1 == null || value2 == null || valueType1 != valueType2 || !(value1.equals(value2))) {\n        continue LOOP;\n      }\n else       if (valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {\n        ShortList list1=fLocalItemValueTypes[j];\n        ShortList list2=getItemValueTypeAt(i);\n        if (list1 == null || list2 == null || !list1.equals(list2))         continue LOOP;\n      }\n      i++;\n    }\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise", "code": "public boolean isSet(_Fields field){\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\nswitch (field) {\ncase APPKEY:\n    return isSetAppkey();\ncase SEND_TIME:\n  return isSetSendTime();\ncase LOAD_INFO:\nreturn isSetLoadInfo();\ncase STATUS:\nreturn isSetStatus();\n}\nthrow new IllegalStateException();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsCreateQuery(VkApiClient client,UserActor actor,String title){\n  super(client,\"groups.create\",Group.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n}\n"}
{"nl": "Returns the vector [x y]", "code": "@Deprecated public static double[] combine(double[] x,double[] y){\n  int len=0;\n  if (x != null)   len+=x.length;\n  if (y != null)   len+=y.length;\n  double[] z=null;\n  if (len > 0) {\n    z=new double[len];\n    int currentPos=0;\n    if (x != null) {\n      System.arraycopy(x,0,z,currentPos,x.length);\n      currentPos=x.length;\n    }\n    if (y != null)     System.arraycopy(y,0,z,currentPos,y.length);\n  }\n  return z;\n}\n"}
{"nl": "this function change the First Logo Scene to Main Server Scene and this function is used in the button listener", "code": "public void handleBtnLogin(ActionEvent event){\n  try {\n    Parent login=FXMLLoader.load(getClass().getResource(\"login.fxml\"));\n    StackPane root=(StackPane)btnLogin.getScene().getRoot();\n    root.getChildren().add(login);\n    login.setTranslateX(350);\n    Timeline timeline=new Timeline();\n    KeyValue keyValue=new KeyValue(login.translateXProperty(),0);\n    KeyFrame keyFrame=new KeyFrame(Duration.millis(100),keyValue);\n    timeline.getKeyFrames().add(keyFrame);\n    timeline.play();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Called by Spawn Engine to check missing spawns", "code": "public void onNotifyNpcSpawned(int questId,int npcId){\n  QuestHandler handler=questHandlers.get(questId);\n  if (handler == null || !(handler instanceof ConstantSpawnHandler)) {\n    return;\n  }\n  ConstantSpawnHandler checker=(ConstantSpawnHandler)handler;\n  HashSet<Integer> allNpcs=checker.getNpcIds();\n  if (allNpcs == null) {\n    return;\n  }\n  allNpcs.remove(npcId);\n}\n"}
{"nl": "Constructs a <code>TxnManagerTransaction</code>", "code": "TxnManagerTransaction(TransactionManager mgr,LogManager logmgr,long id,TaskManager threadpool,WakeupManager wm,TxnSettler settler,Uuid uuid,long lease,boolean persistent,Object externalXid,ConcurrentMap<String,IDirectSpaceProxy> proxiesMap){\n  if (logmgr == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"log manager must be non-null\");\n  if (mgr == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"transaction manager must be non-null\");\n  if (threadpool == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"threadpool must be non-null\");\n  if (wm == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"wakeup manager must be non-null\");\n  if (settler == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"settler must be non-null\");\n  if (uuid == null)   throw new IllegalArgumentException(\"TxnManagerTransaction: \" + \"uuid must be non-null\");\n  this.threadpool=threadpool;\n  this.wm=wm;\n  this.logmgr=logmgr;\n  if (externalXid != null) {\n    _externalXid=externalXid;\n    str=new GSServerTransaction(mgr,externalXid,lease);\n    str.id=id;\n  }\n else {\n    _externalXid=null;\n    str=new ServerTransaction(mgr,id,lease);\n  }\n  this.settler=settler;\n  this.uuid=uuid;\n  _persistent=persistent;\n  _proxiesMap=proxiesMap;\n  finer_op_logger=operationsLogger.isLoggable(Level.FINER);\n  finest_tr_logger=transactionsLogger.isLoggable(Level.FINEST);\n}\n"}
{"nl": "Check if matrices are subtraction compatible", "code": "public static void checkSubtractionCompatible(final AnyMatrix left,final AnyMatrix right) throws MathIllegalArgumentException {\n  if ((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension())) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH_2x2,left.getRowDimension(),left.getColumnDimension(),right.getRowDimension(),right.getColumnDimension());\n  }\n}\n"}
{"nl": "Update group members to some event of player", "code": "public static final void updateGroup(Player player,GroupEvent groupEvent){\n  PlayerGroup group=player.getPlayerGroup2();\n  if (group != null) {\n    group.onEvent(new PlayerGroupUpdateEvent(group,player,groupEvent));\n  }\n}\n"}
{"nl": "Set fields", "code": "public WallSearchQuery fields(List<EnumParam> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Returns true only if DB supports MySQL5", "code": "public static boolean supports(String db,int majorVersion,int minorVersion){\n  return MYSQL_DB_NAME.equals(db) && majorVersion == 5;\n}\n"}
{"nl": "Reason for the complaint", "code": "public PhotosReportQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsImportTargetContactsQuery(VkApiClient client,UserActor actor,int accountId,int targetGroupId,String contacts){\n  super(client,\"ads.importTargetContacts\",Integer.class);\n  accessToken(actor.getAccessToken());\n  accountId(accountId);\n  targetGroupId(targetGroupId);\n  contacts(contacts);\n}\n"}
{"nl": "are the two strings identical up until the first tab", "code": "private boolean sameQuery(byte[] a,byte[] b){\n  int top=Math.min(a.length,b.length);\n  for (int i=0; i < top; i++) {\n    if (a[i] != b[i])     return false;\n    if (a[i] == '\\t')     return true;\n  }\n  return a.length == b.length;\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int writeValueAndFinal(int i,boolean isFinal){\n  if ((0 <= i) && (i <= 64)) {\n    return write(16 + i << 1 | (isFinal ? 1 : 0));\n  }\n  int length=1;\n  if ((i < 0) || (i > 16777215)) {\n    this.intBytes[0]=Byte.MAX_VALUE;\n    this.intBytes[1]=((byte)(i >> 24));\n    this.intBytes[2]=((byte)(i >> 16));\n    this.intBytes[3]=((byte)(i >> 8));\n    this.intBytes[4]=((byte)i);\n    length=5;\n  }\n else {\n    if (i <= 6911) {\n      this.intBytes[0]=((byte)(81 + (i >> 8)));\n    }\n else {\n      if (i <= 1179647) {\n        this.intBytes[0]=((byte)(108 + (i >> 16)));\n      }\n else {\n        this.intBytes[0]=126;\n        this.intBytes[1]=((byte)(i >> 16));\n        length=2;\n      }\n      this.intBytes[(length++)]=((byte)(i >> 8));\n    }\n    this.intBytes[(length++)]=((byte)i);\n  }\n  this.intBytes[0]=((byte)(this.intBytes[0] << 1 | (isFinal ? 1 : 0)));\n  return write(this.intBytes,length);\n}\n"}
{"nl": "Change vice captain position of player (promote, demote)", "code": "public static void changeViceCaptain(Player player,AssignType assignType){\n  PlayerAlliance alliance=player.getPlayerAlliance2();\n  if (alliance != null) {\n    alliance.onEvent(new AssignViceCaptainEvent(alliance,player,assignType));\n  }\n}\n"}
{"nl": "reset values", "code": "public void reset(byte[] buf,int offset,int length){\n  this.buf=buf;\n  this.offset=offset;\n  this.length=length;\n}\n"}
{"nl": "given a subset build a rectangle list of the subset of the original rectangle list", "code": "private static Rectangle[] buildRectList(BitSet subset,Rectangle[] rectList){\n  Rectangle[] inside=new Rectangle[subset.cardinality()];\n  int count=0;\n  for (int i=subset.nextSetBit(0); i >= 0; i=subset.nextSetBit(i + 1)) {\n    inside[count++]=new Rectangle(rectList[i]);\n  }\n  return inside;\n}\n"}
{"nl": "function for reading gallery", "code": "public ArrayList<DataHolder> readGallery(final GalleryActivity activity){\n  ArrayList<DataHolder> listOfAllImages=new ArrayList<>();\n  prepareDataForReading();\n  if (activity.getType() == Const.GalleryType.IMAGE || activity.getType() == Const.GalleryType.IMAGE_VIDEO) {\n    listOfAllImages.addAll(getImages());\n  }\n  if (activity.getType() == Const.GalleryType.VIDEO || activity.getType() == Const.GalleryType.IMAGE_VIDEO) {\n    listOfAllImages.addAll(getVideos());\n  }\n  Collections.sort(listOfAllImages,new DataHolderComparator());\n  return listOfAllImages;\n}\n"}
{"nl": "Determines the width of this view", "code": "private int measureLong(int measureSpec){\n  int result;\n  int specMode=MeasureSpec.getMode(measureSpec);\n  int specSize=MeasureSpec.getSize(measureSpec);\n  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {\n    result=specSize;\n  }\n else {\n    final int count=getItemCount();\n    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);\n    if (specMode == MeasureSpec.AT_MOST) {\n      result=Math.min(result,specSize);\n    }\n  }\n  return result;\n}\n"}
{"nl": "cookies to string", "code": "protected String encodeCookie(SerializableOkHttpCookies cookie){\n  if (cookie == null)   return null;\n  ByteArrayOutputStream os=new ByteArrayOutputStream();\n  try {\n    ObjectOutputStream outputStream=new ObjectOutputStream(os);\n    outputStream.writeObject(cookie);\n  }\n catch (  IOException e) {\n    Log.d(LOG_TAG,\"IOException in encodeCookie\",e);\n    return null;\n  }\n  return byteArrayToHexString(os.toByteArray());\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  String fastA=viewer.getAlignmentViewerPanel().getSelectedAlignment();\n  if (fastA != null) {\n    StringWriter w=new StringWriter();\n    BufferedReader r=new BufferedReader(new StringReader(fastA));\n    String aLine;\n    while ((aLine=r.readLine()) != null) {\n      aLine=aLine.trim();\n      if (aLine.startsWith(\">\"))       w.write(aLine + \"\\n\");\n else {\n        for (int i=0; i < aLine.length() - 2; i+=3) {\n          w.write(SequenceUtils.getAminoAcid(aLine.charAt(i),aLine.charAt(i + 1),aLine.charAt(i + 2)));\n        }\n        w.write(\"\\n\");\n      }\n    }\n    System.out.println(w.toString());\n    NotificationsInSwing.showInformation(viewer.getFrame(),w.toString());\n  }\n}\n"}
{"nl": "Market delivery cities (if only one country is specified)", "code": "public GroupsEditQuery marketCity(Integer... value){\n  return unsafeParam(\"market_city\",value);\n}\n"}
{"nl": "Launches the ping, launches InetAddress to retrieve url if there is one, store trace", "code": "@Override protected String doInBackground(Void... params){\n  try {\n    String res=launchPing(urlToPing);\n    mTraceRouteResult.append(res);\n    publishProgress(res);\n    TraceRouteContainer trace;\n    if (res.contains(UNREACHABLE_PING) && !res.contains(EXCEED_PING)) {\n      trace=new TraceRouteContainer(\"\",parseIpFromPing(res),elapsedTime,false);\n    }\n else {\n      trace=new TraceRouteContainer(\"\",parseIpFromPing(res),ttl == maxTtl ? Float.parseFloat(parseTimeFromPing(res)) : elapsedTime,true);\n      InetAddress inetAddr=InetAddress.getByName(trace.getIp());\n      Log.e(\"TAG\",\"getIP is \" + trace.getIp());\n      String hostname=inetAddr.getHostName();\n      String canonicalHostname=inetAddr.getCanonicalHostName();\n      trace.setHostname(hostname);\n      traces.add(trace);\n    }\n    return res;\n  }\n catch (  final Exception e) {\n    e.printStackTrace();\n  }\n  return \"\";\n}\n"}
{"nl": "Transform android Dp into android pixels", "code": "public int dpToPx(@AndroidDpCoordinate int dp){\n  return (int)(0.5f + dp * myDpiFactor);\n}\n"}
{"nl": "Create a new ThresholdValues", "code": "public ThresholdValues(double[] range){\n  if (range.length != 2)   throw new IllegalArgumentException(\"range must be 2 elements\");\n  if (range[0] >= range[1])   throw new IllegalArgumentException(\"range is not valid\");\n  this.lowThreshold=range[0];\n  this.currentLowThreshold=lowThreshold;\n  this.highThreshold=range[1];\n  this.currentHighThreshold=highThreshold;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public final TimeZone parse(String text) throws ParseException {\n  ParsePosition pos=new ParsePosition(0);\n  TimeZone tz=parse(text,pos);\n  if (pos.getErrorIndex() >= 0) {\n    throw new ParseException(\"Unparseable time zone: \\\"\" + text + \"\\\"\",0);\n  }\n  assert (tz != null);\n  return tz;\n}\n"}
{"nl": "In the center of the drawing area as a reference point , rotate the canvas", "code": "private void drawLineProgress(Canvas canvas){\n  float unitDegrees=(float)(2.0f * Math.PI / mLineCount);\n  float outerCircleRadius=mRadius;\n  float interCircleRadius=mRadius - mLineWidth;\n  int progressLineCount=(int)((float)getProgress() / (float)getMax() * mLineCount);\n  for (int i=0; i < mLineCount; i++) {\n    float rotateDegrees=i * unitDegrees;\n    float startX=mCenterX + (float)Math.sin(rotateDegrees) * interCircleRadius;\n    float startY=mCenterX - (float)Math.cos(rotateDegrees) * interCircleRadius;\n    float stopX=mCenterX + (float)Math.sin(rotateDegrees) * outerCircleRadius;\n    float stopY=mCenterX - (float)Math.cos(rotateDegrees) * outerCircleRadius;\n    if (i < progressLineCount) {\n      canvas.drawLine(startX,startY,stopX,stopY,mProgressPaint);\n    }\n else {\n      canvas.drawLine(startX,startY,stopX,stopY,mProgressBackgroundPaint);\n    }\n  }\n}\n"}
{"nl": "Reads from configuration file tree and pdf data for duration and f0 this method is used by HMMModel", "code": "public void initHMMDataForHMMModel(String voiceName) throws IOException, MaryConfigurationException {\n  PropertiesAccessor p=MaryConfig.getVoiceConfig(voiceName).getPropertiesAccessor(true);\n  String prefix=\"voice.\" + voiceName;\n  treeDurStream=p.getStream(prefix + \".Ftd\");\n  pdfDurStream=p.getStream(prefix + \".Fmd\");\n  treeLf0Stream=p.getStream(prefix + \".Ftf\");\n  pdfLf0Stream=p.getStream(prefix + \".Fmf\");\n  useGV=p.getBoolean(prefix + \".useGV\");\n  if (useGV) {\n    useContextDependentGV=p.getBoolean(prefix + \".useContextDependentGV\",useContextDependentGV);\n    if (p.getProperty(prefix + \".gvMethod\") != null) {\n      String sval=p.getProperty(prefix + \".gvMethod\");\n      setGvMethod(sval);\n    }\n    maxLf0GvIter=p.getInteger(prefix + \".maxLf0GvIter\",maxLf0GvIter);\n    gvWeightLf0=p.getDouble(prefix + \".gvWeightLf0\",gvWeightLf0);\n    pdfLf0GVStream=p.getStream(prefix + \".Fgvf\");\n    maxLf0GvIter=p.getInteger(prefix + \".maxLf0GvIter\",maxLf0GvIter);\n  }\n  InputStream feaStream=p.getStream(prefix + \".FeaFile\");\n  feaDef=FeatureUtils.readFeatureDefinition(feaStream);\n  InputStream trickyPhonesStream=p.getStream(prefix + \".trickyPhonesFile\");\n  trickyPhones=new PhoneTranslator(trickyPhonesStream);\n  Log.i(Mary.LOG,\"Loading Tree Set in CARTs:\");\n  cart.loadTreeSet(this,feaDef,trickyPhones);\n  Log.i(Mary.LOG,\"Loading GV Model Set:\");\n  gv.loadGVModelSet(this,feaDef);\n}\n"}
{"nl": "Hide soft keyboard", "code": "public static void hideSoftKeyboard(Context context,View view){\n  view.clearFocus();\n  InputMethodManager inputmanger=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\n  inputmanger.hideSoftInputFromWindow(view.getWindowToken(),0);\n}\n"}
{"nl": "write the MD string", "code": "private static void writeMD(DAAMatchRecord match,ByteOutputBuffer buffer,byte[] queryAlphabet){\n{\n    int matches=0, del=0;\n    for (    CombinedOperation cop : match.getTranscript().gather()) {\nswitch (cop.getEditOperation()) {\ncase op_match:\n        del=0;\n      matches+=cop.getCount();\n    break;\ncase op_insertion:\n  break;\ncase op_substitution:\nif (matches > 0) {\n  buffer.writeString(String.format(\"%d\",matches));\n  matches=0;\n}\n else if (del > 0) {\n  buffer.write((byte)'0');\n  del=0;\n}\nbuffer.write(queryAlphabet[cop.getLetter()]);\nbreak;\ncase op_deletion:\nif (matches > 0) {\nbuffer.writeString(String.format(\"%d\",matches));\nmatches=0;\n}\nif (del == 0) buffer.write((byte)'^');\nbuffer.write(queryAlphabet[cop.getLetter()]);\n++del;\n}\n}\nif (matches > 0) buffer.writeString(String.format(\"%d\",matches));\n}\n}\n"}
{"nl": "Picks brief names in order to make the test execute faster (less slow typing in name text fields)", "code": "NewProjectDescriptor withBriefNames(){\n  withActivity(\"A\").withCompanyDomain(\"C\").withName(\"P\").withPackageName(\"a.b\");\n  return this;\n}\n"}
{"nl": "Configure the data migrator with a JDBC connection", "code": "public SQLDataMigrator configure(Connection connection){\n  this.connection=connection;\n  this.metadata=new SQLModel(connection);\n  return this;\n}\n"}
{"nl": "use current dark theme", "code": "public static void useDarkTheme(boolean flag){\n  isDarkThemeEnable=flag;\n}\n"}
{"nl": "Playing Time: %0", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_PLAYING_TIME(String value0){\n  return new SM_SYSTEM_MESSAGE(1390213,value0);\n}\n"}
{"nl": "establish a scan position- select a segment", "code": "private SegmentedListIterator<T> establishPos(SegmentedListIterator<T> res,boolean randomScan){\n  int startSegment=drawSegmentNumber(false);\n  res.setStartSegment((short)startSegment);\n  res._scanLimit=size() * 5;\n  res._randomScan=(randomScan && getNumSegments() == 1);\n  for (int seg=startSegment, i=0; i < getNumSegments(); i++, seg++) {\n    if (seg == getNumSegments())     seg=0;\n    res.setCurrentSegment((short)seg);\n    StoredListChainSegment<T> segment=_segments[seg];\n    if (segment.establishIterScanPos(res))     return res;\n  }\n  return null;\n}\n"}
{"nl": "Add an entry to the end of the list", "code": "@ObjectiveCName(\"addEntry:\") public List addEntry(String entry){\n  java.util.List<String> entries=this.getEntries();\n  entries.add(entry);\n  this.updateList(entries);\n  return this;\n}\n"}
{"nl": "Add the order how the result will returned", "code": "public ColumnQuery addSort(Sort sort) throws NullPointerException {\n  this.sorts.add(Objects.requireNonNull(sort,\"Sort is required\"));\n  return this;\n}\n"}
{"nl": "Convert space attributes according to custom properties", "code": "public static void convertCustomSpacePropsToJProperties(String spaceName,Properties customProps,JSpaceAttributes spaceAttrib){\n  if (customProps != null) {\n    for (Enumeration e=customProps.propertyNames(); e.hasMoreElements(); ) {\n      String propName=(String)e.nextElement();\n      String propValue=customProps.getProperty(propName);\n      String spacePropKey=spaceName == null ? propName : spaceName + \".\" + propName;\n      if (propName.startsWith(Constants.SPACE_CONFIG_PREFIX))       spaceAttrib.setProperty(spacePropKey,propValue);\n    }\n  }\n}\n"}
{"nl": "Right click mouse at a point with specified delay", "code": "public void rightClick(int x,int y,int delay) throws InterruptedException {\n  move(x,y);\n  click(InputEvent.BUTTON3_MASK,delay);\n}\n"}
{"nl": "reset enemy state", "code": "public void ResetEnemy(){\n  velocity.set(new Math_Vector(0,0));\n  pNum=this.map_controler.get_Selection(sKind,sNum);\n  delay=this.map_controler.get_Delay(sKind,sNum);\n  shield=this.map_controler.get_Enemy_Life(sKind,sNum);\n  posX=this.map_controler.get_Pos_X(sKind,sNum);\n  posY=this.map_controler.get_Pos_Y(sKind,sNum);\n  GetPath(pNum);\n  status=ENTER;\n  isDead=false;\n}\n"}
{"nl": "Make an update for the daily/weekly/last kill & ap counts & gp counts", "code": "public void doUpdate(){\n  boolean needUpdate=false;\n  Calendar lastCal=Calendar.getInstance();\n  lastCal.setTimeInMillis(lastUpdate);\n  Calendar curCal=Calendar.getInstance();\n  curCal.setTimeInMillis(System.currentTimeMillis());\n  if (lastCal.get(Calendar.DAY_OF_MONTH) != curCal.get(Calendar.DAY_OF_MONTH) || lastCal.get(Calendar.MONTH) != curCal.get(Calendar.MONTH) || lastCal.get(Calendar.YEAR) != curCal.get(Calendar.YEAR)) {\n    this.dailyAP=0;\n    this.dailyGP=0;\n    this.dailyKill=0;\n    needUpdate=true;\n  }\n  if (lastCal.get(Calendar.WEEK_OF_YEAR) != curCal.get(Calendar.WEEK_OF_YEAR) || lastCal.get(Calendar.YEAR) != curCal.get(Calendar.YEAR)) {\n    this.lastKill=this.weeklyKill;\n    this.lastAP=this.weeklyAP;\n    this.lastGP=this.weeklyGP;\n    this.weeklyKill=0;\n    this.weeklyAP=0;\n    this.weeklyGP=0;\n    needUpdate=true;\n  }\n  if (rank.getId() > maxRank) {\n    maxRank=rank.getId();\n    needUpdate=true;\n  }\n  this.lastUpdate=System.currentTimeMillis();\n  if (needUpdate) {\n    setPersistentState(PersistentState.UPDATE_REQUIRED);\n  }\n}\n"}
{"nl": "Resumes audio output", "code": "public synchronized void resume(){\n}\n"}
{"nl": "prints out the contents of this list", "code": "static void dump(String title,FloatList list){\n  System.out.println(title);\n  FloatList cur=list;\n  do {\n    System.out.println(\"Item: \" + cur.value);\n    cur=cur.next;\n  }\n while (cur != list);\n}\n"}
{"nl": "Write packet opcodec and two additional bytes", "code": "private final void writeOP(int value){\n  int op=Crypt.encodeOpcodec(value);\n  buf.putShort((short)(op));\n  buf.put(Crypt.staticServerPacketCode);\n  buf.putShort((short)(~op));\n}\n"}
{"nl": "Make sure we can set commit data even when there are not docs", "code": "public void testEmpty() throws Exception {\n  send(\"setCommitUserData\",\"{userData: {a: c, b: d}}\");\n  send(\"getCommitUserData\");\n  assertEquals(\"c\",getString(\"a\"));\n  assertEquals(\"d\",getString(\"b\"));\n  bounceServer();\n  send(\"startIndex\");\n  send(\"getCommitUserData\");\n  assertEquals(\"c\",getString(\"a\"));\n  assertEquals(\"d\",getString(\"b\"));\n}\n"}
{"nl": "upload file to storage server (by file buff)", "code": "public String upload_file1(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String parts[]=this.upload_file(file_buff,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Method to convert a URI wildcard query into a java regex", "code": "public static String wildcardToRegex(String wildcard){\n  StringBuilder s=new StringBuilder(wildcard.length());\n  for (int i=0, is=wildcard.length(); i < is; i++) {\n    char c=wildcard.charAt(i);\nswitch (c) {\ncase '*':\n      s.append(\".*\");\n    break;\ncase '?':\n  s.append(\".\");\nbreak;\ncase '(':\ncase ')':\ncase '[':\ncase ']':\ncase '$':\ncase '^':\ncase '.':\ncase '{':\ncase '}':\ncase '|':\ncase '\\\\':\ns.append(\"\\\\\");\ns.append(c);\nbreak;\ndefault :\ns.append(c);\nbreak;\n}\n}\nlogger.debug(\"regex = \" + s.toString());\nreturn (s.toString());\n}\n"}
{"nl": "equality matching preserves fifo order", "code": "@Override public boolean supportsFifoOrder(){\n  return true;\n}\n"}
{"nl": "clear selection", "code": "public void clearSelection(String target){\nswitch (target.toLowerCase()) {\ncase \"series\":\n    clearSelectionSeries();\n  break;\ncase \"classes\":\nclearSelectionClasses();\nbreak;\ncase \"attributes\":\nclearSelectionAttributes();\nbreak;\n}\n}\n"}
{"nl": "Set privacy view", "code": "public NotesEditQuery privacyView(String... value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "Stop wav play back", "code": "public static void stopWavFile(){\n  m_clip.stop();\n  m_clip.flush();\n  m_clip.close();\n}\n"}
{"nl": "MIn for a column", "code": "public static Column min(DataFrame dataFrame,String columnName){\n  return dataFrame.groupBy(columnName).agg(functions.min(columnName)).col(columnName);\n}\n"}
{"nl": "Build a new graph with the given node as the root node", "code": "public DirectedGraph(Node rootNode,FeatureDefinition featDef){\n  this(rootNode,featDef,null);\n}\n"}
{"nl": "dump the crash log", "code": "private void dump(final Thread thread,final Throwable exception){\n  if (isWriting) {\n    return;\n  }\n  isWriting=true;\n  SharePref.saveLastCrashLog(mContext,mWriter.write(thread,exception));\n  isWriting=false;\n}\n"}
{"nl": "flush the current stream", "code": "public void flush() throws IOException {\n  outs.flush();\n}\n"}
{"nl": "Write a content to a file", "code": "public static boolean writeToFile(StringBuffer content,File file,boolean append){\n  OutputStreamWriter fw=null;\n  try {\n    fw=new OutputStreamWriter(new FileOutputStream(file,append),\"UTF-8\");\n    Writer bw=new BufferedWriter(fw);\n    bw.write(content.toString());\n    bw.flush();\n    bw.close();\n  }\n catch (  IOException ex) {\n    Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,ex);\n    return false;\n  }\n finally {\n    try {\n      fw.close();\n    }\n catch (    IOException ex) {\n      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,ex);\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Comment id", "code": "protected MarketDeleteCommentQuery commentId(int value){\n  return unsafeParam(\"comment_id\",value);\n}\n"}
{"nl": "Check manastones without initialization", "code": "public boolean hasManaStones(){\n  return manaStones != null && manaStones.size() > 0;\n}\n"}
{"nl": "Gets whether the space is unhealthy", "code": "public boolean isHealthy(){\n  return (healthIssueErrors == null || healthIssueErrors.length == 0);\n}\n"}
{"nl": "verifies that two vectors are close (sup norm)", "code": "protected void assertClose(String msg,double[] m,double[] n,double tolerance){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors not same length\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i],n[i],tolerance);\n  }\n}\n"}
{"nl": "Selects chapters on Chapters view", "code": "public CreateSiteWindow selectChapters(List<String> chapters){\n  List<WebElement> items=currentWindow.findElements(By.cssSelector(\".cq-msm_58chapterPages .x-form-check-wrap\"));\n  for (  WebElement item : items) {\n    WebElement label=item.findElement(By.tagName(\"label\"));\n    if (!chapters.contains(label.getText())) {\n      item.findElement(By.tagName(\"input\")).click();\n    }\n  }\n  return this;\n}\n"}
{"nl": "Responds to the given message ID with the given response Returns success", "code": "public synchronized boolean respond(int messageId,int response){\n  RequestResponseHandler handler=map.get(messageId);\n  if (handler != null) {\n    map.remove(messageId);\n    log.debug(\"RequestResponseHandler triggered for response code \" + messageId + \" from \"+ player.getName());\n    handler.handle(player,response);\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "Helper for unit tests", "code": "AssignmentsImpl(AssignmentsRepository assignmentRepository,MutexRepository mutRepository){\n  repository=null;\n  mutexRepository=mutRepository;\n  assignmentsRepository=assignmentRepository;\n  random=null;\n}\n"}
{"nl": "Close the input stream opened for the counter file", "code": "private void closeCounterDataInputStream() throws DataFallbackException {\n  if (LOG.isDebugEnabled())   LOG.debug(\"Closing the counter file reader for the file \" + counterFile.getName());\n  if (dInput != null) {\n    try {\n      dInput.close();\n    }\n catch (    IOException e) {\n      throw new DataFallbackException(e.getMessage());\n    }\n finally {\n      dInput=null;\n    }\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);\n}\n"}
{"nl": "Copy some item values like item stones and enchant level", "code": "private static void copyItemInfo(Item sourceItem,Item newItem){\n  newItem.setOptionalSocket(sourceItem.getOptionalSocket());\n  newItem.setItemCreator(sourceItem.getItemCreator());\n  if (sourceItem.hasManaStones()) {\n    for (    ManaStone manaStone : sourceItem.getItemStones()) {\n      ItemSocketService.addManaStone(newItem,manaStone.getItemId());\n    }\n  }\n  if (sourceItem.getGodStone() != null) {\n    newItem.addGodStone(sourceItem.getGodStone().getItemId());\n  }\n  if (sourceItem.getEnchantLevel() > 0) {\n    newItem.setEnchantLevel(sourceItem.getEnchantLevel());\n  }\n  if (sourceItem.isSoulBound()) {\n    newItem.setSoulBound(true);\n  }\n  newItem.setBonusNumber(sourceItem.getBonusNumber());\n  newItem.setRandomStats(sourceItem.getRandomStats());\n  newItem.setRandomCount(sourceItem.getRandomCount());\n  newItem.setIdianStone(sourceItem.getIdianStone());\n  newItem.setItemColor(sourceItem.getItemColor());\n  newItem.setItemSkinTemplate(sourceItem.getItemSkinTemplate());\n}\n"}
{"nl": "Parameters list", "code": "public ConditionNegativeTest(String fieldName,Condition condition,String toFind){\n  this.condition=condition;\n  this.toFind=toFind;\n  this.fieldName=fieldName;\n}\n"}
{"nl": "Post feedback from user", "code": "@POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value=\"Submit feedback\") @Timed public Response postFeedback(@ApiParam(name=\"userFeedback\",value=\"Please see model example\",required=true) final UserFeedback userFeedback,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){\n  userFeedback.setUsername(authorization.getUser(authorizationHeader));\n  feedback.createUserFeedback(userFeedback);\n  return httpHeader.headers(CREATED).build();\n}\n"}
{"nl": "MONSTER TO QUEST QUERIES", "code": "public MonsterToQuestCursor queryMonsterToQuestMonster(long id){\n  return mHelper.queryMonsterToQuestMonster(id);\n}\n"}
{"nl": "delegate the introduce type event to the corresponding interceptor", "code": "@Override public void onIntroduceType(IntroduceTypeData introduceTypeData){\n  SpaceSynchronizationEndpoint endpointInterceptor=getEndpoint(introduceTypeData.getTypeDescriptor().getTypeName());\n  if (endpointInterceptor != null)   endpointInterceptor.onIntroduceType(introduceTypeData);\n}\n"}
{"nl": "when object is null return blank,when the object is not null it return object;", "code": "public static Object nullToBlank(Object object){\n  if (object == null) {\n    return StringUtil.BLANK;\n  }\n  return object;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=none;\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetCitiesByIdQuery(VkApiClient client){\n  super(client,\"database.getCitiesById\",Utils.buildParametrizedType(List.class,BaseObject.class));\n}\n"}
{"nl": "Make sure the positions of the interaction targets are correctly updated", "code": "public void updatePositions(ViewTransform viewTransform){\n  for (  ConstraintWidget widget : mWidgets.values()) {\n    widget.updateDrawPosition();\n    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();\n    WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();\n    widgetInteraction.updatePosition(viewTransform);\n  }\n}\n"}
{"nl": "Empty LogEntries", "code": "public LogEntries(LogProcessType processType,long pid,String hostName,String hostAddress){\n  this(processType,new ArrayList<LogEntry>(0),0,pid,0,hostName,hostAddress);\n}\n"}
{"nl": "load datasource file", "code": "public static List<MySQLRepBean> loadMySQLRepBean(String datasourceuri){\n  List<MySQLRepBean> list=new LinkedList<MySQLRepBean>();\n  try {\n    NodeList nodeList=loadXmlDoc(datasourceuri).getElementsByTagName(\"mysql-replica\");\n    for (int i=0; i < nodeList.getLength(); i++) {\n      Node curRepNode=nodeList.item(i);\n      NamedNodeMap map=curRepNode.getAttributes();\n      String name=getAttribute(map,\"name\",null);\n      int type=getIntAttribute(map,\"type\",0);\n      int switchType=getIntAttribute(map,\"switch-type\",0);\n      MySQLRepBean repBean=new MySQLRepBean(name,type);\n      repBean.setSwitchType(switchType);\n      List<Node> mysqlNodes=getChildNodes(curRepNode,\"mysql\");\n      List<MySQLBean> allMysqls=mysqlNodes.stream().map(null).collect(Collectors.toList());\n      repBean.setMysqls(allMysqls);\n      list.add(repBean);\n    }\n  }\n catch (  Exception e) {\n    LOGGER.warn(\"loadMySQLRepBean err \" + e);\n  }\n  return list;\n}\n"}
{"nl": "Returns whether the contact with the particular contactID has at least one phone number", "code": "public static boolean hasPhoneNumber(ContentResolver resolver,long contactID){\n  Cursor phoneCursor;\n  String[] selectionArgs={String.valueOf(contactID)};\n  Uri contentUri=CommonDataKinds.Phone.CONTENT_URI;\n  phoneCursor=resolver.query(contentUri,DataTypeQuery.PROJECTION,DataTypeQuery.SELECTION,selectionArgs,DataTypeQuery.SORTORDER + \" LIMIT 1\");\n  if (phoneCursor == null) {\n    return false;\n  }\n  try {\n    return phoneCursor.getCount() > 0;\n  }\n catch (  Exception e) {\n    ErrorTracker.track(e);\n  }\n finally {\n    if (!phoneCursor.isClosed()) {\n      phoneCursor.close();\n    }\n  }\n  return false;\n}\n"}
{"nl": "Start camera intent Create a temporary file and pass file Uri to camera intent", "code": "private void captureImage(){\n  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  if (intent.resolveActivity(getPackageManager()) != null) {\n    File imageFile=ImageUtils.createImageFile(imageDirectory);\n    if (imageFile != null) {\n      Uri uri=FileProvider.getUriForFile(this,getString(R.string.shared_file_provider),imageFile);\n      currentImagePath=\"file:\" + imageFile.getAbsolutePath();\n      intent.putExtra(MediaStore.EXTRA_OUTPUT,uri);\n      startActivityForResult(intent,Constants.REQUEST_CODE_CAPTURE);\n    }\n else {\n      Toast.makeText(this,getString(R.string.error_create_image_file),Toast.LENGTH_LONG).show();\n    }\n  }\n else {\n    Toast.makeText(this,getString(R.string.error_no_camera),Toast.LENGTH_LONG).show();\n  }\n}\n"}
{"nl": "Encrypt RSA modulus N", "code": "private byte[] encryptModulus(BigInteger modulus){\n  byte[] encryptedModulus=modulus.toByteArray();\n  if ((encryptedModulus.length == 0x81) && (encryptedModulus[0] == 0x00)) {\n    byte[] temp=new byte[0x80];\n    System.arraycopy(encryptedModulus,1,temp,0,0x80);\n    encryptedModulus=temp;\n  }\n  for (int i=0; i < 4; i++) {\n    byte temp=encryptedModulus[i];\n    encryptedModulus[i]=encryptedModulus[0x4d + i];\n    encryptedModulus[0x4d + i]=temp;\n  }\n  for (int i=0; i < 0x40; i++) {\n    encryptedModulus[i]=(byte)(encryptedModulus[i] ^ encryptedModulus[0x40 + i]);\n  }\n  for (int i=0; i < 4; i++) {\n    encryptedModulus[0x0d + i]=(byte)(encryptedModulus[0x0d + i] ^ encryptedModulus[0x34 + i]);\n  }\n  for (int i=0; i < 0x40; i++) {\n    encryptedModulus[0x40 + i]=(byte)(encryptedModulus[0x40 + i] ^ encryptedModulus[i]);\n  }\n  return encryptedModulus;\n}\n"}
{"nl": "Determines if a chatlog should be created or not", "code": "public static String shouldCreateChatlog(String message,String user,String serverIp){\n  if (!SERVER_ADDRESS.matcher(serverIp).matches()) {\n    return null;\n  }\n  Matcher chatMatcher=CHAT_FORMAT.matcher(message);\n  if (!chatMatcher.matches()) {\n    return null;\n  }\n  String sender=chatMatcher.group(1);\n  if (sender.equals(user)) {\n    return null;\n  }\n  String chatMessage=chatMatcher.group(2);\n  for (  String badWord : RewiMod.getInstance().getBlacklistedWords()) {\n    if (chatMessage.contains(badWord)) {\n      return sender;\n    }\n  }\n  return null;\n}\n"}
{"nl": "Update done button by select image data", "code": "private void updateDoneText(ArrayList<String> resultList){\n  int size=0;\n  if (resultList == null || resultList.size() <= 0) {\n    mSubmitButton.setText(R.string.action_done);\n    mSubmitButton.setEnabled(false);\n  }\n else {\n    size=resultList.size();\n    mSubmitButton.setEnabled(true);\n  }\n  mSubmitButton.setText(getString(R.string.action_button_string,getString(R.string.action_done),size,mDefaultCount));\n}\n"}
{"nl": "Print all Slot IN_USE or EMPTY, for debugging", "code": "public void runAllSlot(){\n  moveToId(0);\n  System.out.println(\"== runAllSlot start at \" + currentSlot + \" ==\");\n  while (isValidSlot()) {\n    if (currentSlot % 10 == 0)     System.out.print(currentSlot + \": \");\n    int flag=(Integer)getVal(currentPos(),INTEGER).asJavaVal();\n    System.out.print(flag + \" \");\n    if ((currentSlot + 1) % 10 == 0)     System.out.println();\n    currentSlot++;\n  }\n  System.out.println(\"== runAllSlot end at \" + currentSlot + \" ==\");\n}\n"}
{"nl": "Initialize an AirMapStatus with default values", "code": "public AirMapStatus(){\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  if (done)   return false;\n  if (nextMatches == null)   nextMatches=getNext();\n  if (nextMatches == sentinel) {\n    done=true;\n    nextMatches=null;\n  }\n  return !done;\n}\n"}
{"nl": "Called when creating a dedicated server", "code": "public void init(FMLInitializationEvent event){\n  initBusses();\n  this.stateMachine=new ServerStateMachine(ServerState.WAITING_FOR_MOD_READY);\n}\n"}
{"nl": "Clean reached markers if markers repository is activated", "code": "private final void reapReachedMarkers(){\n  if (!_cacheManager.requiresEvictionReplicationProtection())   return;\n  int reapCount=0;\n  try {\n    long currentTime=SystemTime.timeMillis();\n    long expirationTime=currentTime - LM_CHECK_TIME_MARKERS_REPOSITORY_DEFAULT;\n    if (_force || _lastReapedMarkersRepository < expirationTime)     _lastReapedMarkersRepository=currentTime;\n else     return;\n    reapCount=_cacheManager.getEvictionReplicationsMarkersRepository().reapUnused();\n  }\n catch (  Exception ex) {\n    if (_logger.isLoggable(Level.SEVERE)) {\n      _logger.log(Level.SEVERE,this.getName() + \" - caught exception while reaping reached markers \",ex);\n    }\n  }\n  if (reapCount > 0 && _logger.isLoggable(Level.FINE)) {\n    _logger.fine(this.getName() + \" - Reaped reached markers. [Reaped: \" + reapCount+ \", Remaining:\"+ _cacheManager.getEvictionReplicationsMarkersRepository().size()+ \"]\");\n  }\n}\n"}
{"nl": "creates an assignment algorithm", "code": "@Override public IAssignmentAlgorithm createAssignmentAlgorithm(){\n  return assignmentUsingBestHit;\n}\n"}
{"nl": "Creates a new compare action that will compare against the BASE revision", "code": "public CompareWithBaseRevisionAction(){\n  super(SVNRevision.BASE);\n}\n"}
{"nl": "Search role by params", "code": "@Override public List<Role> searchRole(Role role){\n  return sessionTemplate.selectList(NAMESPACE + \".searchRole\",role);\n}\n"}
{"nl": "Export to SLD", "code": "private void exportToSLD(){\n  SLDWriterInterface sldWriter=SLDWriterFactory.createWriter(SLDOutputFormatEnum.SLD);\n  for (  SLDDataInterface sldData : sldDataList) {\n    StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);\n    String layerName=sldData.getLayerNameWithOutSuffix();\n    if (sld != null) {\n      String sldString=sldWriter.encodeSLD(sldData.getResourceLocator(),sld);\n      String sldFilename=layerName + ExternalFilenames.addFileExtensionSeparator(SLDEditorFile.getSLDFileExtension());\n      String destinationFolder=sldData.getSLDFile().getParent();\n      File fileToSave=new File(destinationFolder,sldFilename);\n      if (fileToSave.exists()) {\n        ConsoleManager.getInstance().error(this,Localisation.getField(YSLDTool.class,\"YSLDTool.destinationAlreadyExists\") + \" \" + sldFilename);\n      }\n else {\n        ConsoleManager.getInstance().information(this,Localisation.getField(YSLDTool.class,\"YSLDTool.exportToSLDMsg\") + \" \" + sldFilename);\n        BufferedWriter out;\n        try {\n          out=new BufferedWriter(new FileWriter(fileToSave));\n          out.write(sldString);\n          out.close();\n        }\n catch (        IOException e) {\n          ConsoleManager.getInstance().exception(this,e);\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public SecureAddAppEventQuery(VkApiClient client,ServiceActor actor,int userId,int activityId){\n  super(client,\"secure.addAppEvent\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  clientSecret(actor.getClientSecret());\n  userId(userId);\n  activityId(activityId);\n}\n"}
{"nl": "load global variables", "code": "public static void init(String conf_filename) throws FileNotFoundException, IOException, MyException {\n  IniFileReader iniReader;\n  iniReader=new IniFileReader(conf_filename);\n  g_network_timeout=iniReader.getIntValue(\"network_timeout\",DEFAULT_NETWORK_TIMEOUT);\n  if (g_network_timeout < 0) {\n    g_network_timeout=DEFAULT_NETWORK_TIMEOUT;\n  }\n  g_network_timeout*=1000;\n  g_charset=iniReader.getStrValue(\"charset\");\n  if (g_charset == null || g_charset.length() == 0) {\n    g_charset=\"ISO8859-1\";\n  }\n  g_server_group=ServerGroup.loadFromFile(iniReader);\n}\n"}
{"nl": "Populate myProperties and myChildren from the token stream", "code": "@VisibleForTesting static SkinLayoutDefinition loadFromTokens(Iterator<String> tokens){\n  String key;\n  String value;\n  SkinLayoutDefinition definition=new SkinLayoutDefinition();\n  while (tokens.hasNext()) {\n    key=tokens.next();\n    if (key.equals(\"}\")) {\n      break;\n    }\n else {\n      value=tokens.next();\n      if (value.equals(\"{\")) {\n        definition.myChildren.put(key,loadFromTokens(tokens));\n      }\n else {\n        definition.myProperties.put(key,value);\n      }\n    }\n  }\n  return definition;\n}\n"}
{"nl": "Sends all through timedeadband delayed values immediately", "code": "public void sendDelayedTimeDeadbandValues(){\n  equipmentLogger.debug(\"Sending all time deadband delayed values to the server\");\n  this.equipmentTimeDeadband.sendDelayedTimeDeadbandValues();\n}\n"}
{"nl": "Parse the query and escape it as per Lucene but without affecting search operators such as AND OR and NOT", "code": "public String formatQueryString(String query){\n  if (this.ANDMATCH) {\n    return this.formatQueryStringAndDefault(query);\n  }\n  return this.formatQueryStringOrDefault(query);\n}\n"}
{"nl": "Utility method to create a full width separator preceeded by a blank space", "code": "protected void createSeparator(Composite parent,int verticalSpace){\n  Label label=new Label(parent,SWT.NONE);\n  GridData data=new GridData();\n  data.heightHint=verticalSpace;\n  label.setLayoutData(data);\n  label=new Label(parent,SWT.SEPARATOR | SWT.HORIZONTAL);\n  data=new GridData(GridData.FILL_HORIZONTAL);\n  label.setLayoutData(data);\n}\n"}
{"nl": "Construct a complex from a real and imaginary value", "code": "public Complex(double real,double imaginary){\n  this.real=real;\n  this.imaginary=imaginary;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=previous;\");\n}\n"}
{"nl": "Check if the export has started", "code": "protected boolean hasDropExportStart(Drop drop){\n  return drop.getDropExporterConfig() != null;\n}\n"}
{"nl": "Read and show log file info", "code": "private String readLogFile(){\n  String[] logFileName=Log_OC.getLogFileNames();\n  StringBuilder text=new StringBuilder();\n  BufferedReader br=null;\n  try {\n    String line;\n    for (int i=logFileName.length - 1; i >= 0; i--) {\n      File file=new File(mLogPath,logFileName[i]);\n      if (file.exists()) {\n        if (new FileReader(file).ready()) {\n          br=new BufferedReader(new FileReader(file));\n          while ((line=br.readLine()) != null) {\n            text.append(line);\n            text.append('\\n');\n          }\n        }\n      }\n    }\n  }\n catch (  IOException e) {\n    Log_OC.d(TAG,e.getMessage().toString());\n  }\n finally {\n    if (br != null) {\n      try {\n        br.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n  return text.toString();\n}\n"}
{"nl": "Calculate XenDesktop storage requirements for deployment", "code": "public static int calculateXenStorage(int deliveryControllerCount,int vCenterServerCount){\n  final int dc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.controller.storage.default\")) * deliveryControllerCount;\n  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString(\"xen.vcenter.storage.default\")) * vCenterServerCount;\n  return dc + vc;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesCreateChatQuery(VkApiClient client,UserActor actor,List<Integer> userIds){\n  super(client,\"messages.createChat\",Integer.class);\n  accessToken(actor.getAccessToken());\n  userIds(userIds);\n}\n"}
{"nl": "Creates a new instance of Dictionary", "code": "public Dictionary(String sName,int iMaxWordSize){\n  WordDefs=new HashSet();\n  Name=sName;\n  MaxWordSize=iMaxWordSize;\n}\n"}
{"nl": "apply the calculation", "code": "public void apply(ProgressListener progressListener) throws CanceledException {\n  resamplingMethod.apply(progressListener);\n}\n"}
{"nl": "signals all listener that a remote resource has been created", "code": "public void remoteResourceDeleted(ISVNRemoteResource resource){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.remoteResourceDeleted(resource);\n  }\n}\n"}
{"nl": "Hash the given string", "code": "private static long hash(String string){\n  long upper=((long)string.hashCode()) << 32;\n  int len=string.length();\n  StringBuilder dest=new StringBuilder(len);\n  for (int index=(len - 1); index >= 0; index--) {\n    dest.append(string.charAt(index));\n  }\n  long lower=((long)dest.toString().hashCode()) - ((long)Integer.MIN_VALUE);\n  return upper + lower;\n}\n"}
{"nl": "Return true when the catchable pokemon is a lured pokemon", "code": "public boolean isLured(){\n  return encounterKind == EncounterKind.DISK;\n}\n"}
{"nl": "Utility function returning a new color with an updated brightness", "code": "public static Color updateBrightness(Color color,float factor){\n  float[] hsb=new float[3];\n  Color.RGBtoHSB(color.getRed(),color.getGreen(),color.getBlue(),hsb);\n  return new Color(Color.HSBtoRGB(hsb[0],hsb[1],Math.min(1.0f,hsb[2] * factor)));\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n}\n"}
{"nl": "Tests setting a parent with api that has no associated values folder", "code": "public void testHighNewApiParent(){\n  doTestForParentApi(\"android:Theme.Holo.NoActionBar.Overscan\",\"apiParentTestAfter4\");\n  myFixture.checkResultByFile(\"res/values-v18/styles.xml\",\"themeEditor/apiParentTestAfter4/stylesApi-v18.xml\",true);\n}\n"}
{"nl": "Method for dynamic zone template creation for geometries; could be saved later in XML", "code": "public void createMaterialZoneTemplate(Spatial geometry,int regionId,int worldId,int materialId){\n  geometry.setName(geometry.getName() + \"_\" + regionId);\n  createMaterialZoneTemplate(geometry,worldId,materialId,false);\n}\n"}
{"nl": "Updates the given list of DTOs with their associated comments", "code": "private void processTextUnitDTOsBatch(List<TextUnitDTOWithComments> textUnitDTOsWithComments,List<TextUnitDTO> textUnitDTOsForBatch,List<Long> tmTextUnitVariantIdsForBatch){\n  Multimap<Long,TMTextUnitVariantComment> textUnitVariantCommentsMap=ArrayListMultimap.create();\n  List<TMTextUnitVariantComment> textUnitVariantComments=new ArrayList<>();\n  if (!tmTextUnitVariantIdsForBatch.isEmpty()) {\n    textUnitVariantComments=tmTextUnitVariantCommentRepository.findByTmTextUnitVariantIdIn(tmTextUnitVariantIdsForBatch);\n  }\n  for (  TMTextUnitVariantComment tmTextUnitVariantComment : textUnitVariantComments) {\n    Long tmTextUnitVariantId=tmTextUnitVariantComment.getTmTextUnitVariant().getId();\n    textUnitVariantCommentsMap.put(tmTextUnitVariantId,tmTextUnitVariantComment);\n  }\n  mergeCommentsIntoTextUnitDTOs(textUnitDTOsWithComments,textUnitDTOsForBatch,textUnitVariantCommentsMap);\n}\n"}
{"nl": "[%SkillTarget] is no longer bound", "code": "public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_A_TO_B(String skilltarget){\n  return new SM_SYSTEM_MESSAGE(1200928,skilltarget);\n}\n"}
{"nl": "method returns true if xtn1 is sequentially GT xtn2", "code": "public static boolean isSeqTransactionGT(long xtn1,long xtn2){\n  if (xtn1 != UNKNOWN_FIFO_XTN && xtn2 != UNKNOWN_FIFO_XTN && (xtn1 > xtn2 || (xtn1 < xtn2 && xtn2 - xtn1 > 1000000)))   return true;\n else   return false;\n}\n"}
{"nl": "Returns all values from all scalar sections in the project views, in order", "code": "public <T>List<T> listScalarItems(SectionKey<T,ScalarSection<T>> key){\n  List<T> result=Lists.newArrayList();\n  for (  ScalarSection<T> section : getSections(key)) {\n    result.add(section.getValue());\n  }\n  return result;\n}\n"}
{"nl": "Add header before all items and after TYPE_ABSOLUTE_HEADER", "code": "public void addHeader(@LayoutRes int layoutId){\n  addHeader(layoutId,null);\n}\n"}
{"nl": "calculate the total height of the widget", "code": "private int measureHeight(){\n  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);\n  int daysOfMonth=daysOfCurrentMonth();\n  int n=-1;\n  if (dayOfWeek >= 2 && dayOfWeek <= 7) {\n    n=daysOfMonth - (8 - dayOfWeek + 1);\n  }\n else   if (dayOfWeek == 1) {\n    n=daysOfMonth - 1;\n  }\n  int lines=2 + n / 7 + (n % 7 == 0 ? 0 : 1);\n  return (int)(cellHeight * lines);\n}\n"}
{"nl": "Collections identifiers to obtain data from", "code": "protected MarketGetAlbumByIdQuery albumIds(List<Integer> value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "Create config item from config", "code": "public static ConfigItem create(Config config){\n  ConfigItem configItem=new ConfigItem();\n  configItem.setName(config.getName());\n  configItem.setValue(config.getValue());\n  configItem.setMd5(config.getMd5());\n  return configItem;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set magnifier=\");\n  boolean state=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  if (getViewer() instanceof ViewerBase) {\n    ViewerBase viewer=(ViewerBase)getViewer();\n    viewer.trans.getMagnifier().setInRectilinearMode(true);\n    viewer.trans.getMagnifier().setActive(state);\n    viewer.repaint();\n  }\n}\n"}
{"nl": "load from file", "code": "public void loadFromFile(String fileName) throws IOException {\n  System.err.print(\"Loading \" + Basic.getFileNameWithoutPath(fileName) + \": \");\n  try (BufferedReader r=new BufferedReader(new InputStreamReader(ResourceManager.getFileAsStream(fileName)))){\n    String aLine;\n    while ((aLine=r.readLine()) != null) {\n      if (aLine.length() > 0 && !aLine.startsWith(\"#\")) {\n        String[] tokens=Basic.split(aLine,'\\t');\n        if (tokens.length >= 2) {\n          if (tokens[0].trim().length() == 0)           continue;\n          int id=Integer.parseInt(tokens[0]);\n          String name=tokens[1];\n          name2id.put(name,id);\n          id2name.put(id,name);\n          boolean hasToolTip=tokens.length > 2 && tokens[tokens.length - 1].startsWith(\"\\\"\");\n          int tokensLengthWithoutToolTip=(hasToolTip ? tokens.length - 1 : tokens.length);\n          Integer rank=null;\n          if (tokensLengthWithoutToolTip == 3 && Basic.isInteger(tokens[2])) {\n            rank=Integer.parseInt(tokens[2]);\n          }\n else           if (tokensLengthWithoutToolTip == 4) {\n            rank=Integer.parseInt(tokens[3]);\n          }\n          if (hasToolTip) {\n            String quotedToolTip=tokens[tokens.length - 1];\n            id2toolTip.put(id,quotedToolTip.substring(1,quotedToolTip.length() - 1));\n          }\n          if (rank != null)           id2rank.put(id,rank);\n        }\n      }\n    }\n  }\n   System.err.println(String.format(\"%,9d\",id2name.size()));\n}\n"}
{"nl": "Set whether or not to use adaptive ball selection", "code": "public CatchOptions useSmartSelect(boolean smartSelect){\n  this.smartSelect=smartSelect;\n  return this;\n}\n"}
{"nl": "recursively write the tree", "code": "private static int writeAsTreeRec(ViewerBase viewer,NodeSet toUse,Node v,Writer writer,boolean showInternalLabels,boolean showUnassignedNodes,boolean simplify,int count) throws IOException {\n  if (v.getOutDegree() == 0) {\n    writer.write(Basic.toCleanName(viewer.getLabel(v)));\n    count++;\n  }\n else {\n    LinkedList<Edge> toVisit=new LinkedList<>();\n    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n      Node w=e.getTarget();\n      if ((toUse != null && toUse.contains(w)) || (toUse == null && (showUnassignedNodes || !(w.getInfo() instanceof Integer && (Integer)w.getInfo() <= 0)))) {\n        toVisit.add(e);\n      }\n    }\n    if (!simplify || toVisit.size() > 1)     writer.write(\"(\");\n    boolean first=true;\n    for (    Edge e : toVisit) {\n      Node w=e.getTarget();\n      if (first)       first=false;\n else       writer.write(\",\");\n      count=writeAsTreeRec(viewer,toUse,w,writer,showInternalLabels,showUnassignedNodes,simplify,count);\n    }\n    if (!simplify || toVisit.size() > 1)     writer.write(\")\");\n    if (showInternalLabels && viewer.getLabel(v) != null && (!simplify || count != 1)) {\n      writer.write(Basic.toCleanName(viewer.getLabel(v)));\n      count++;\n    }\n  }\n  return count;\n}\n"}
{"nl": "get the char by the absolute position", "code": "public char charAt(int position){\n  if (s != null && position >= 0 && position < s.length()) {\n    return s.charAt(position);\n  }\n  return 0;\n}\n"}
{"nl": "* This methods save the photo in memory device with diferents params *", "code": "public String savePhotoInMemoryDevice(Bitmap bitmap,String photoName,boolean autoIncrementNameByDate){\n  return writePhotoFile(bitmap,photoName,\"MAGICAL CAMERA\",PNG,autoIncrementNameByDate);\n}\n"}
{"nl": "Returns true if the widget is a direct child of a ConstraintLayout", "code": "private static boolean isWidgetInsideConstraintLayout(@NotNull ConstraintWidget widget){\n  ConstraintWidget parent=widget.getParent();\n  if (parent == null) {\n    return false;\n  }\n  return parent instanceof ConstraintWidgetContainer;\n}\n"}
{"nl": "Perform tasks on Creature starting to move", "code": "public void onStartMove(){\n  getOwner().getObserveController().notifyMoveObservers();\n  notifyAIOnMove();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n"}
{"nl": "Checking for a draw: whole field is filled?", "code": "static boolean isFieldFull(){\n  for (int y=0; y < field_size; y++) {\n    for (int x=0; x < field_size; x++) {\n      if (field[x][y] == dotEmpty)       return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Calculate the standard deviation skipping Nan floats", "code": "private static float standardDeviation(float[] pos){\n  float sum=0.f;\n  float sumSqr=0.f;\n  int count=0;\n  for (  float po : pos) {\n    if (Float.isNaN(po)) {\n      continue;\n    }\n    count++;\n    sum+=po;\n    sumSqr+=po * po;\n  }\n  return (float)Math.sqrt(sumSqr / count - (sum / count) * (sum / count));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetInvitesQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"groups.getInvites\",GetInvitesExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "Builds the MarkerOptions new instace", "code": "public MarkerOptions build(){\n  MarkerOptions options=new MarkerOptions();\n  options.icon=this.icon;\n  options.clickable=this.clickable;\n  options.draggable=this.draggable;\n  options.keyboard=this.keyboard;\n  options.title=this.title;\n  options.alt=this.alt;\n  options.zIndexOffset=this.zIndexOffset;\n  options.opacity=this.opacity;\n  options.riseOnHover=this.riseOnHover;\n  options.riseOffset=this.riseOffset;\n  return options;\n}\n"}
{"nl": "Create new ClientKey instance based on data provided in the stream together with the password", "code": "public ClientKey(final InputStream inputStream,final String password) throws InvalidKeystoreException {\n  this.password=password;\n  final KeyStore keystore=getKeyStore(inputStream,password);\n  final Enumeration<String> aliases=getAliases(keystore);\n  if (aliases.hasMoreElements()) {\n    this.alias=aliases.nextElement();\n    logger.info(\"Client certificate serial number: \" + getCertificateInfo(keystore,alias));\n  }\n else {\n    throw new InvalidKeystoreException(\"Keystore doesn't contain any keys!\");\n  }\n  this.keyStore=keystore;\n  this.clientPasswordCallback=new ClientPasswordCallback(alias,password);\n}\n"}
{"nl": "TODO: CHECK", "code": "public Object clone(){\n  System.err.println(this.getClass().getName() + \": The clone() method should be checked...\");\n  DocumentNGramDistroGraph gRes=new DocumentNGramDistroGraph(MinSize,MaxSize,CorrelationWindow);\n  gRes.DataString=DataString;\n  gRes.DegradedEdges.putAll(this.DegradedEdges);\n  gRes.NGramGraphArray=this.NGramGraphArray.clone();\n  gRes.Normalizer=this.Normalizer;\n  gRes.TextPreprocessor=this.TextPreprocessor;\n  gRes.WordEvaluator=this.WordEvaluator;\n  gRes.EdgeDistros=(HashMap)this.EdgeDistros.clone();\n  return gRes;\n}\n"}
{"nl": "creates a Text control", "code": "private Text createText(Composite parent,int widthHint){\n  Text textControl=new Text(parent,SWT.SINGLE | SWT.BORDER);\n  GridData gridData=new GridData();\n  gridData.horizontalAlignment=GridData.FILL;\n  gridData.widthHint=widthHint;\n  gridData.grabExcessHorizontalSpace=true;\n  textControl.setLayoutData(gridData);\n  return textControl;\n}\n"}
{"nl": "Player should be in team to broadcast this event", "code": "@Override public boolean checkCondition(){\n  return team.hasMember(leavedPlayer.getObjectId());\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set aminoAcidColors=\");\n  String value=np.getWordMatchesIgnoringCase(Basic.toString(ColorSchemeAminoAcids.getNames(),\" \"));\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.setAminoAcidColoringScheme(value);\n  viewer.setShowAminoAcids(viewer.isShowAminoAcids());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetFacultiesQuery(VkApiClient client,int universityId){\n  super(client,\"database.getFaculties\",GetFacultiesResponse.class);\n  universityId(universityId);\n}\n"}
{"nl": "Subtracts the given color from this color", "code": "public Color sub(Color color){\n  this.r-=color.r;\n  this.g-=color.g;\n  this.b-=color.b;\n  this.a-=color.a;\n  clamp();\n  return this;\n}\n"}
{"nl": "Find fixed node and tell root dom", "code": "void findFixed(WXDomObject obj){\n  WXDomObject rootDom=mRegistry.get(WXDomObject.ROOT);\n  if (rootDom == null) {\n    return;\n  }\n  if (obj.isFixed()) {\n    rootDom.add2FixedDomList(obj.ref);\n  }\n  int childrenCount=obj.childCount();\n  if (childrenCount > 0) {\n    for (int i=0; i < childrenCount; i++) {\n      findFixed(obj.getChild(i));\n    }\n  }\n}\n"}
{"nl": "* convert an uncompressed array of bytes to a string", "code": "static public String convertUncompressedByteArray2String(int size,byte[] bytes){\n  StringBuilder buf=new StringBuilder(size);\n  for (  byte b : bytes)   buf.append((char)b);\n  return buf.toString();\n}\n"}
{"nl": "byte to hex string", "code": "public static String byteToHexString(byte[] byteArray){\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < byteArray.length; i++) {\n    int byteCode=byteArray[i] & 0xFF;\n    if (byteCode < 0x10) {\n      builder.append(0);\n    }\n    builder.append(Integer.toHexString(byteCode));\n  }\n  return builder.toString();\n}\n"}
{"nl": "construct a parser and load all commands found for the given path", "code": "public CommandManagerFX(IDirector dir,IDirectableViewer viewer,String commandsPath,boolean returnOnCommandNotFound){\n  this(dir,viewer,new String[]{commandsPath},returnOnCommandNotFound);\n}\n"}
{"nl": "Invoked after bulk execution in EDS to update mirror statistics", "code": "private void afterFailedBulkExecution(IReplicationInBatchContext context){\n  if (_operationStatisticsHandler != null) {\n    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());\n    List<BulkItem> bulk=context.getPendingContext();\n    sourceChannelStatistics.addFailedOperationCount(bulk);\n  }\n}\n"}
{"nl": "Return a simple case expression", "code": "public Value simpleCaseExpression(Value caseOperand,Expression[] exp,Value val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n"}
{"nl": "Create a leaf node", "code": "public BlockBTreeLeafNode(BTreeBuilderInfo builderInfos,int metadataIndex,long nodeNumber){\n  DataFileFooter footer=builderInfos.getFooterList().get(metadataIndex);\n  BlockletMinMaxIndex minMaxIndex=footer.getBlockletIndex().getMinMaxIndex();\n  maxKeyOfColumns=minMaxIndex.getMaxValues();\n  minKeyOfColumns=minMaxIndex.getMinValues();\n  numberOfKeys=1;\n  this.nodeNumber=nodeNumber;\n  this.blockInfo=footer.getBlockInfo();\n}\n"}
{"nl": "do not affect existing engine", "code": "@Override public void close(){\n  SimulationRunContext.getEventCalendar().clear();\n  SimulationRunContext.removeEventCalendar();\n  SimulationRunContext.removeProcessEngine();\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final ClusterViewer viewer=getViewer();\n  final String method=(String)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set Ecological Index\",\"Set Ecological Index\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),METHODS,viewer.getEcologicalIndex());\n  if (method != null)   executeImmediately(\"set index=\" + method + \";\");\n}\n"}
{"nl": "whether debug", "code": "public static void debug(){\n  DEBUG=true;\n}\n"}
{"nl": "Update the buttons on the host wizard to reflect the state of the guest wizard", "code": "private void updateButtons(){\n  myHostWizard.updateButtons(myGuestWizard.onLastStep().get(),myGuestWizard.canGoForward().get(),!myGuestWizard.canGoBack().get());\n}\n"}
{"nl": "Returns a key identifying dep for a dependency rule -> dep", "code": "public static RuleKey forDependency(RuleIdeInfo rule,Label dep){\n  return new RuleKey(dep);\n}\n"}
{"nl": "goto the first object", "code": "public boolean gotoFirst(){\n  current.set1(0);\n  current.set2(0);\n  return isCurrentSet();\n}\n"}
{"nl": "Can custom MediaPlayer here", "code": "public MediaPlayerWrapperImpl(Context context){\n  super(new MediaPlayer(),context);\n}\n"}
{"nl": "Integer Response Retryer", "code": "public static long retryInfinitelyInt(final Callable<Integer> callable){\n  return intResponseRetryer.retryInfinitely(callable);\n}\n"}
{"nl": "Declares the wizard banner iamge descriptor", "code": "protected void initializeDefaultPageImageDescriptor(){\n  String iconPath;\n  iconPath=\"icons/full/\";\n  try {\n    URL installURL=SVNUIPlugin.getPlugin().getBundle().getEntry(\"/\");\n    URL url=new URL(installURL,iconPath + \"wizards/newconnect_wiz.gif\");\n    ImageDescriptor desc=ImageDescriptor.createFromURL(url);\n    setDefaultPageImageDescriptor(desc);\n  }\n catch (  MalformedURLException e) {\n  }\n}\n"}
{"nl": "Read an input stream into a string", "code": "static public String streamToString(InputStream in) throws IOException {\n  StringBuffer out=new StringBuffer();\n  byte[] b=new byte[4096];\n  for (int n; (n=in.read(b)) != -1; ) {\n    out.append(new String(b,0,n));\n  }\n  return out.toString();\n}\n"}
{"nl": "export all matches for given set of classids in the given classification", "code": "public static long export(String classification,Collection<Integer> classIds,BlastMode blastMode,IConnector connector,String fileName,ProgressListener progressListener) throws IOException {\n  long countMatches=0;\n  try {\n    progressListener.setTasks(\"Export\",\"Writing selected matches\");\n    try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){\n      w.write(blastMode.toString().toUpperCase() + \" file generated by MEGAN6\\n\\n\");\n      int maxProgress=100000 * classIds.size();\n      int currentProgress=0;\n      progressListener.setMaximum(maxProgress);\n      progressListener.setProgress(currentProgress);\n      int count=0;\n      for (      Integer classId : classIds) {\n        count++;\n        currentProgress=100000 * count;\n        IReadBlockIterator it=connector.getReadsIterator(classification,classId,0,10000,true,true);\n        long progressIncrement=100000 / (it.getMaximumProgress() + 1);\n        while (it.hasNext()) {\n          countMatches+=writeMatches(it.next(),w);\n          progressListener.setProgress(currentProgress);\n          currentProgress+=progressIncrement;\n        }\n      }\n    }\n   }\n catch (  CanceledException ex) {\n    System.err.println(\"USER CANCELED\");\n  }\n  return countMatches;\n}\n"}
{"nl": "Repeats str", "code": "private static String stringRepeat(String str,int times){\n  StringBuilder builder=new StringBuilder();\n  for (int i=0; i < times; ++i) {\n    builder.append(str);\n  }\n  return builder.toString();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountChangePasswordQuery(VkApiClient client,UserActor actor,String newPassword){\n  super(client,\"account.changePassword\",ChangePasswordResponse.class);\n  accessToken(actor.getAccessToken());\n  newPassword(newPassword);\n}\n"}
{"nl": "Parses, validates and computes normalized version of time object", "code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  date.year=YEAR;\n  date.month=MONTH;\n  date.day=15;\n  getTime(str,0,len,date);\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n    date.day=15;\n  }\n  date.position=2;\n  return date;\n}\n"}
{"nl": "Deletes the concept as a Relation", "code": "@Override public void innerDelete(){\n  scopes().forEach(null);\n  Set<CastingImpl> castings=getMappingCasting();\n  for (  CastingImpl casting : castings) {\n    InstanceImpl<?,?> instance=casting.getRolePlayer();\n    if (instance != null) {\n      for (      EdgeImpl edge : instance.getEdgesOfType(Direction.BOTH,Schema.EdgeLabel.SHORTCUT)) {\n        if (edge.getProperty(Schema.EdgeProperty.RELATION_ID).equals(getId())) {\n          edge.delete();\n        }\n      }\n    }\n  }\n  super.innerDelete();\n}\n"}
{"nl": "remove all data added by MEGAN", "code": "public static void removeAllMEGANData(String fileName) throws IOException {\n  final DAAHeader header=new DAAHeader(fileName);\n  header.load();\n  long newFileSize=-1l;\n  for (int i=0; i < header.getBlockTypeRankArrayLength(); i++) {\n    BlockType type=header.getBlockType(i);\n    if (type != BlockType.empty) {\n      if (type.toString().startsWith(\"megan\")) {\n        if (newFileSize == -1l)         newFileSize=header.getLocationOfBlockInFile(i);\n        header.setBlockTypeRank(i,BlockType.rank(BlockType.empty));\n        header.setBlockSize(i,0l);\n      }\n    }\n    if (newFileSize != -1) {\n      try (RandomAccessFile raf=new RandomAccessFile(fileName,\"rw\")){\n        raf.setLength(newFileSize);\n      }\n     }\n    if (newFileSize != -1 || header.getReserved3() > 0) {\n      header.setReserved3(0);\n      header.save();\n    }\n  }\n}\n"}
{"nl": "Once we finish editing the device, we set it to its final configuration", "code": "@NotNull private Device buildDevice(){\n  String deviceName=myDeviceData.name().get();\n  myBuilder.setName(deviceName);\n  myBuilder.setId(deviceName);\n  myBuilder.addSoftware(myDeviceData.software().getValue());\n  myBuilder.setManufacturer(myDeviceData.manufacturer().get());\n  IdDisplay tag=myDeviceData.deviceType().getValueOrNull();\n  myBuilder.setTagId((SystemImage.DEFAULT_TAG.equals(tag) || tag == null) ? null : tag.getId());\n  List<State> states=generateStates(new AvdHardwareData(myDeviceData).buildHardware());\n  myBuilder.addAllState(states);\n  return myBuilder.build();\n}\n"}
{"nl": "Add resource as included resource and attach the document to this resource", "code": "public void addToIncluded(Document document){\n  document.addInclude(this);\n}\n"}
{"nl": "Set fields", "code": "public NewsfeedGetQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Given a collection of widgets evaluates probability of a connection and makes connections", "code": "public static ConstraintWidget[] inferTableList(WidgetsScene list){\n  for (  ConstraintWidget widget : list.getWidgets()) {\n    widget.resetAnchors();\n  }\n  return inferTableList(list.getRoot());\n}\n"}
{"nl": "Sample the N most frequently occurring values in the specified column", "code": "public static Map<Writable,Long> sampleMostFrequentFromColumn(int nMostFrequent,String columnName,Schema schema,JavaRDD<List<Writable>> data){\n  int columnIdx=schema.getIndexOfColumn(columnName);\n  JavaPairRDD<Writable,Long> keyedByWritable=data.mapToPair(new ColumnToKeyPairTransform(columnIdx));\n  JavaPairRDD<Writable,Long> reducedByWritable=keyedByWritable.reduceByKey(new SumLongsFunction2());\n  List<Tuple2<Writable,Long>> list=reducedByWritable.takeOrdered(nMostFrequent,new Tuple2Comparator<Writable>(false));\n  List<Tuple2<Writable,Long>> sorted=new ArrayList<>(list);\n  Collections.sort(sorted,new Tuple2Comparator<Writable>(false));\n  Map<Writable,Long> map=new LinkedHashMap<>();\n  for (  Tuple2<Writable,Long> t2 : sorted) {\n    map.put(t2._1(),t2._2());\n  }\n  return map;\n}\n"}
{"nl": "This method is used for timer's termination", "code": "public void terminateTimer(){\n  timer.cancel();\n  running=false;\n}\n"}
{"nl": "Get the domain of the destination (whether it's queue or topic)", "code": "protected String domain(){\n  if (uri.getPath().startsWith(\"queues/\")) {\n    return \"queue\";\n  }\n else   if (uri.getPath().startsWith(\"topics/\")) {\n    return \"topic\";\n  }\n else   if (uri.getPath().startsWith(\"persistent/\")) {\n    return \"persistent\";\n  }\n else {\n    throw new RestException(Status.INTERNAL_SERVER_ERROR,\"domain() invoked from wrong resource\");\n  }\n}\n"}
{"nl": "Send an before text change event to child listeners", "code": "private void sendBeforeTextChanged(CharSequence s,int start,int count,int after){\n  if (mListeners != null) {\n    for (int i=0; i < mListeners.size(); i++) {\n      mListeners.get(i).beforeTextChanged(s,start,count,after);\n    }\n  }\n}\n"}
{"nl": "zlib compress 2 byte", "code": "public static byte[] compressForZlib(byte[] bytesToCompress){\n  Deflater deflater=new Deflater();\n  deflater.setInput(bytesToCompress);\n  deflater.finish();\n  byte[] bytesCompressed=new byte[Short.MAX_VALUE];\n  int numberOfBytesAfterCompression=deflater.deflate(bytesCompressed);\n  byte[] returnValues=new byte[numberOfBytesAfterCompression];\n  System.arraycopy(bytesCompressed,0,returnValues,0,numberOfBytesAfterCompression);\n  return returnValues;\n}\n"}
{"nl": "Determine whether this target is a silence target", "code": "@Override public boolean isSilence(){\n  throw new IllegalStateException(\"This method should not be called for DiphoneTargets.\");\n}\n"}
{"nl": "Set mark as ads", "code": "public WallRepostQuery markAsAds(Boolean value){\n  return unsafeParam(\"mark_as_ads\",value);\n}\n"}
{"nl": "Creates a new complete interaction for this view", "code": "@Nullable public Interaction createInteraction(@NotNull ScreenView screenView,@NotNull NlComponent layout){\n  return null;\n}\n"}
{"nl": "Creates a new instance of DOTInteroperator", "code": "public DOTInteroperator() throws IOException {\n  Process p=Runtime.getRuntime().exec(\"dot -V\");\n  try {\n    p.waitFor();\n  }\n catch (  InterruptedException iee) {\n    return;\n  }\n}\n"}
{"nl": "calculate chi-square and p value for two proprotions", "code": "static public double[] runProportionTest(double x1,double n1,double x2,double n2){\n  SignificanceTestForTwoDatasets test=new SignificanceTestForTwoDatasets(x1,n1,x2,n2);\n  double[] res=new double[2];\n  res[0]=test.getChi_SquareValueWithContinuityCorrectionTwoTailed();\n  res[1]=test.getPValueForProportionTest();\n  return res;\n}\n"}
{"nl": "Create a bubble, passing in width & height of view", "code": "public Bubble(int width,int height,int topMargin,int bubbleColour){\n  popped=false;\n  paint=new Paint();\n  paint.setColor(bubbleColour);\n  paint.setStyle(Paint.Style.FILL);\n  paint.setAntiAlias(true);\n  recycle(true,width,height,topMargin);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){\n  super(client,\"wall.deleteComment\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  commentId(commentId);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static int[] codePoints(CharSequence s){\n  int[] result=new int[s.length()];\n  int j=0;\n  for (int i=0; i < s.length(); i++) {\n    char cp=s.charAt(i);\n    if ((cp >= 56320) && (cp <= 57343) && (i != 0)) {\n      char last=(char)result[(j - 1)];\n      if ((last >= 55296) && (last <= 56319)) {\n        result[(j - 1)]=Character.toCodePoint(last,cp);\n        continue;\n      }\n    }\n    result[(j++)]=cp;\n  }\n  if (j == result.length) {\n    return result;\n  }\n  int[] shortResult=new int[j];\n  System.arraycopy(result,0,shortResult,0,j);\n  return shortResult;\n}\n"}
{"nl": "export all matches in file", "code": "public static int exportAll(IConnector connector,String fileName,ProgressListener progressListener) throws IOException {\n  int total=0;\n  try {\n    progressListener.setTasks(\"Export\",\"Writing all reads\");\n    try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){\n      IReadBlockIterator it=connector.getAllReadsIterator(0,10000,true,false);\n      progressListener.setMaximum(it.getMaximumProgress());\n      progressListener.setProgress(0);\n      while (it.hasNext()) {\n        total++;\n        write(it.next(),w);\n        progressListener.setProgress(it.getProgress());\n      }\n    }\n   }\n catch (  CanceledException ex) {\n    System.err.println(\"USER CANCELED\");\n  }\n  return total;\n}\n"}
{"nl": "Return a combined list of users and communities", "code": "protected UsersGetSubscriptionsQueryWithExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Randomly sample a set of examples", "code": "public static List<List<Writable>> sample(int count,JavaRDD<List<Writable>> data){\n  return data.takeSample(false,count);\n}\n"}
{"nl": "Decodes the JWT Auth Token and parses it to get the user ID", "code": "private void decodeToken(String jwt){\n  JwtConsumer consumer=new JwtConsumerBuilder().setSkipAllValidators().setDisableRequireSignature().setSkipSignatureVerification().build();\n  try {\n    JwtClaims claims=consumer.processToClaims(jwt);\n    userId=claims.getSubject();\n  }\n catch (  InvalidJwtException|MalformedClaimException e) {\n    Log.e(\"AirMap\",\"Invalid auth token\");\n  }\n}\n"}
{"nl": "Adds (tag) name or a regular search expression", "code": "public boolean addRegex(final String regex){\n  if (regex != null && !regex.isEmpty()) {\n    return regexList.add(regex);\n  }\n  return false;\n}\n"}
{"nl": "Initialize and queue the data needed for the Train Rush map", "code": "private void initializeConductor(){\n  activeDelays=new LinkedList<Float>();\n  float randomDelay=MathUtils.random(2f,4.5f);\n  currentDelay=randomDelay;\n  totalDelay+=randomDelay;\n  activeDelays.add(randomDelay);\n  do {\n    float delayPercentage=totalDelay / timeTilVictory;\n    randomDelay=this.max_delay - delayPercentage * (this.max_delay - this.min_delay);\n    activeDelays.add(randomDelay);\n    totalDelay+=randomDelay;\n  }\n while (totalDelay < timeTilVictory);\n  turnOffAllTracks();\n}\n"}
{"nl": "Constructs a MultiFileAudioPlayer", "code": "public MultiFileAudioPlayer(String baseName,AudioFileFormat.Type type){\n  this.baseName=baseName;\n  this.outputType=type;\n  debug=Utilities.getBoolean(\"com.sun.speech.freetts.audio.AudioPlayer.debug\");\n}\n"}
{"nl": "Helper to recursively flatten out a metric from a nested collection", "code": "private void parseObjectMetrics(String namePrefix,JSONObject obj){\n  for (  Object key : obj.keySet()) {\n    Object val=obj.get(key);\n    if (val instanceof JSONObject) {\n      parseObjectMetrics(namePrefix + \"__\" + key,(JSONObject)val);\n    }\n else {\n      if (gaugeFilter.get().contains((String)key)) {\n        processGaugeMetric(namePrefix + \"__\" + (String)key,(Long)val);\n      }\n else {\n        processCounterMetric(namePrefix + \"__\" + (String)key,(Long)val);\n      }\n    }\n  }\n}\n"}
{"nl": "debug display array", "code": "public static void display(byte[] b){\n  for (int i=0; i < b.length; i++) {\n    System.out.print((char)b[i]);\n  }\n  System.out.println();\n}\n"}
{"nl": "Process currently stored points and detect any gesture", "code": "private MouseGesture processCurrentData() throws IOException {\n  int size=coordinates.size();\n  return mouseGestureRecognizer.classifyGesture(coordinates,size);\n}\n"}
{"nl": "Creates a TrafficLogPredicate instance containing single HarEntry predicate", "code": "public TrafficLogPredicate(Predicate<HarEntry> entry){\n  this.predicates.add(entry);\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(full);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  MirrorServiceConfig copy=(MirrorServiceConfig)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(full,copy));\n}\n"}
{"nl": "TYPE_FORWARD_ONLY mode only", "code": "public boolean absolute(int row) throws SQLException {\n  throw new SQLException(\"Command not Supported!\",\"GSP\",-132);\n}\n"}
{"nl": "redirect the web to right site", "code": "@Path(path=\"go\",login=true) public boolean go(){\n  Session s=this.getSession();\n  if (s.has(\"uri\")) {\n    String uri=(String)s.get(\"uri\");\n    log.debug(\"redirecting:\" + uri);\n    if (uri.endsWith(\"/index\")) {\n      uri=uri.substring(0,uri.length() - 6);\n    }\n    if (X.isEmpty(uri)) {\n      this.redirect(\"/\");\n    }\n else {\n      this.redirect(uri);\n    }\n    s.remove(\"uri\").store();\n    return true;\n  }\n  this.redirect(\"/\");\n  return false;\n}\n"}
{"nl": "Construct a ChiSquareTest", "code": "public ChiSquareTest(){\n  super();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  if (getViewer() instanceof ViewerBase)   return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n else   return getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getGraphView() != null && ((ClusterViewer)getViewer()).getGraphView().getGraph().getNumberOfNodes() > 0;\n}\n"}
{"nl": "Removes all results from the data structure", "code": "public void clear(){\n  this.results.clear();\n}\n"}
{"nl": "Pushes CopyState on the wire", "code": "private static void writeCopyState(CopyState state,DataOutput out) throws IOException {\n  out.writeVInt(state.infosBytes.length);\n  out.writeBytes(state.infosBytes,0,state.infosBytes.length);\n  out.writeVLong(state.gen);\n  out.writeVLong(state.version);\n  CopyFilesHandler.writeFilesMetaData(out,state.files);\n  out.writeVInt(state.completedMergeFiles.size());\n  for (  String fileName : state.completedMergeFiles) {\n    out.writeString(fileName);\n  }\n  out.writeVLong(state.primaryGen);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n}\n"}
{"nl": "Returns true if this policy allows resizing in at least one direction", "code": "public boolean isResizable(){\n  return (myFlags & ANY) != 0;\n}\n"}
{"nl": "Method to take an input json string and output a MapWritable with arrays as JSON formatted String objects", "code": "public static MapWritable jsonStringToMapWritable(String jsonString){\n  MapWritable value=new MapWritable();\n  JSONParser jsonParser=new JSONParser();\n  try {\n    JSONObject jsonObj=(JSONObject)jsonParser.parse(jsonString);\n    for (    Object key : jsonObj.keySet()) {\n      Text mapKey=new Text(key.toString());\n      Text mapValue=new Text();\n      if (jsonObj.get(key) != null) {\n        mapValue.set(jsonObj.get(key).toString());\n      }\n      value.put(mapKey,mapValue);\n    }\n  }\n catch (  ParseException e) {\n    logger.warn(\"Could not json-decode string: \" + jsonString,e);\n  }\ncatch (  NumberFormatException e) {\n    logger.warn(\"Could not parse field into number: \" + jsonString,e);\n  }\n  return value;\n}\n"}
{"nl": "Stream that get Github info for each member of list of user", "code": "public Observable<String> streamGetGithubInfoForEachMember(List<String> listOfUserName){\n  return Observable.just(listOfUserName).flatMap(githubMemberFunctions.observeEachItem()).flatMap(githubMemberFunctions.getGithubMember()).map(githubMemberFunctions.getNumberOfFollowers()).reduce(githubMemberFunctions.aggregateString()).subscribeOn(schedulerSubscribeOn).observeOn(schedulerObserveOn);\n}\n"}
{"nl": "upload file to storage server (by file name)", "code": "protected String[] upload_file(byte cmd,String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  File f=new File(local_filename);\n  FileInputStream fis=new FileInputStream(f);\n  if (file_ext_name == null) {\n    int nPos=local_filename.lastIndexOf('.');\n    if (nPos > 0 && local_filename.length() - nPos <= ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + 1) {\n      file_ext_name=local_filename.substring(nPos + 1);\n    }\n  }\n  try {\n    return this.do_upload_file(cmd,group_name,null,null,file_ext_name,f.length(),new UploadStream(fis,f.length()),meta_list);\n  }\n  finally {\n    fis.close();\n  }\n}\n"}
{"nl": "if relevant-unpin the entry method is called after each operation or xtn termination entry should be locked when method is called", "code": "public boolean unpinIfNeeded(Context context,IEntryHolder entry,ITemplateHolder template,IEntryCacheInfo pEntry){\n  if (!isEvictableCachePolicy() && !entry.isOffHeapEntry())   return false;\n  if (template != null) {\n    if (template.isTakeOperation() && entry.isDeleted())     return false;\n  }\n  if (useRecentUpdatesForPinning() && isEntryInRecentUpdates(entry))   return false;\n  if (pEntry == null)   pEntry=entry.isOffHeapEntry() ? ((IOffHeapEntryHolder)entry).getOffHeapResidentPart() : getEntryCacheInfo(entry);\n  if (pEntry == null || !pEntry.isPinned())   return false;\n  if (useRecentDeletes() && pEntry.isRecentDelete())   return false;\n  if (entry.isOffHeapEntry() && ((IOffHeapRefCacheInfo)pEntry).isInBulk())   return false;\n  if (pEntry.getEntryHolder(this).isMaybeUnderXtn() || pEntry.getEntryHolder(this).isHasWaitingFor())   return false;\n  if (isEvictableCachePolicy())   pEntry.setPinned(false);\n else   ((IOffHeapRefCacheInfo)pEntry).unLoadFullEntryIfPossible(this,context);\n  return true;\n}\n"}
{"nl": "Set up and initialize the form", "code": "@Deprecated public void initialiseVerticalStepperForm(String[] stepsTitles,int buttonBackgroundColor,int buttonTextColor,int buttonPressedBackgroundColor,int buttonPressedTextColor,int stepNumberBackgroundColor,int stepNumberTextColor,VerticalStepperForm verticalStepperForm,Activity activity){\n  this.alphaOfDisabledElements=0.25f;\n  this.buttonBackgroundColor=buttonBackgroundColor;\n  this.buttonTextColor=buttonTextColor;\n  this.buttonPressedBackgroundColor=buttonPressedBackgroundColor;\n  this.buttonPressedTextColor=buttonPressedTextColor;\n  this.stepNumberBackgroundColor=stepNumberBackgroundColor;\n  this.stepTitleTextColor=Color.rgb(33,33,33);\n  this.stepSubtitleTextColor=Color.rgb(162,162,162);\n  this.stepNumberTextColor=stepNumberTextColor;\n  this.errorMessageTextColor=Color.rgb(175,18,18);\n  this.displayBottomNavigation=true;\n  this.materialDesignInDisabledSteps=false;\n  this.hideKeyboard=true;\n  this.showVerticalLineWhenStepsAreCollapsed=false;\n  this.verticalStepperFormImplementation=verticalStepperForm;\n  this.activity=activity;\n  initStepperForm(stepsTitles,null);\n}\n"}
{"nl": "Verify token", "code": "@GET @Path(\"/verifyToken\") @Produces(APPLICATION_JSON) @ApiOperation(value=\"Verify user's authorization\") @Timed public Response verifyToken(@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String tokenHeader){\n  return httpHeader.headers().entity(authentication.verifyToken(tokenHeader)).build();\n}\n"}
{"nl": "inflate the current SAM line by replacing all & by the corresponding field in the previous SAM line", "code": "public static int inflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){\n  if (previous == null) {\n    System.arraycopy(current,0,result,0,currentLength);\n    return currentLength;\n  }\n  int length=0;\n  int start1=0;\n  int start2=0;\n  while (start1 < previousLength && start2 < currentLength) {\n    int end1=start1;\n    while (end1 < previousLength && previous[end1] != '\\t') {\n      end1++;\n    }\n    int end2=start2;\n    while (end2 < currentLength && current[end2] != '\\t') {\n      end2++;\n    }\n    if (current[start2] == '&' && end2 == start2 + 1) {\n      for (int i=start1; i < end1; i++)       result[length++]=previous[i];\n    }\n else {\n      for (int i=start2; i < end2; i++)       result[length++]=current[i];\n    }\n    if (end2 < currentLength)     result[length++]='\\t';\n    start1=end1 + 1;\n    start2=end2 + 1;\n  }\n  return length;\n}\n"}
{"nl": "TODO: iterator for array access expression", "code": "private boolean hasConcatenationAsIndex(ArrayAccessExpression objExpression){\n  PsiElement objExpressionToInspect=objExpression;\n  while (objExpressionToInspect instanceof ArrayAccessExpression) {\n    ArrayIndex objIndex=((ArrayAccessExpression)objExpressionToInspect).getIndex();\n    if (null != objIndex && objIndex.getValue() instanceof BinaryExpression) {\n      PsiElement objOperation=((BinaryExpression)objIndex.getValue()).getOperation();\n      if (null != objOperation && objOperation.getNode().getElementType() == PhpTokenTypes.opCONCAT) {\n        return true;\n      }\n    }\n    objExpressionToInspect=objExpressionToInspect.getParent();\n  }\n  return false;\n}\n"}
{"nl": "Verify that the text message the user received was the correct one", "code": "public static void verifyToken(String token,AirMapCallback<Void> listener){\n  String url=String.format(pilotVerifyUrl,AirMap.getUserId());\n  JSONObject params=new JSONObject();\n  try {\n    params.put(\"token\",Integer.valueOf(token));\n  }\n catch (  JSONException e) {\n    e.printStackTrace();\n  }\n  AirMap.getClient().postWithJsonBody(url,params,new VoidCallback(listener));\n}\n"}
{"nl": "Remove excess", "code": "private void removeExcess(){\n  int outing=size - maxSize;\n  Link<E> previous=voidLink.next;\n  for (int i=0; i < outing; i++) {\n    previous=previous.next;\n  }\n  voidLink.next=previous;\n  previous.previous=voidLink;\n  size=maxSize;\n  modCount++;\n}\n"}
{"nl": "check storage socket, if null create a new connection", "code": "protected boolean newWritableStorageConnection(String group_name) throws IOException, MyException {\n  if (this.storageServer != null) {\n    return false;\n  }\n else {\n    TrackerClient tracker=new TrackerClient();\n    this.storageServer=tracker.getStoreStorage(this.trackerServer,group_name);\n    if (this.storageServer == null) {\n      throw new MyException(\"getStoreStorage fail, errno code: \" + tracker.getErrorCode());\n    }\n    return true;\n  }\n}\n"}
{"nl": "Set start from", "code": "public NewsfeedGetRecommendedQuery startFrom(String value){\n  return unsafeParam(\"start_from\",value);\n}\n"}
{"nl": "Used to help build the body from an input stream", "code": "public void readBody(DataInput dataIn) throws IOException {\n  try {\n    Body=SerializationHelper.readObject((InputStream)dataIn);\n  }\n catch (  ClassNotFoundException ex) {\n    throw new IOException(ex.toString());\n  }\n}\n"}
{"nl": "Update the mouse interaction", "code": "@Override public void update(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int modifiers){\n  super.update(x,y,modifiers);\n  DrawConstraintModel drawModel=ConstraintModel.getDrawConstraintModel(myScreenView);\n  drawModel.updateModifiers(modifiers);\n  int androidX=Coordinates.getAndroidX(myScreenView,x);\n  int androidY=Coordinates.getAndroidY(myScreenView,y);\n  drawModel.mouseDragged(androidX,androidY);\n  ConstraintModel.getConstraintModel(myScreenView.getModel()).updateXml();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set show-consensus=\");\n  boolean value=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  viewer.getAlignmentViewerPanel().setShowConsensus(value);\n}\n"}
{"nl": "is the named parsing method loaded", "code": "public static boolean isLoaded(String name,IdMapper.MapType mapType){\n  return name2classification.get(name) != null && get(name,true).getIdMapper().isLoaded(mapType);\n}\n"}
{"nl": "expand the given node", "code": "public void expand(DefaultMutableTreeNode v){\n  if (v == null)   v=this.root;\n  for (Enumeration descendants=v.breadthFirstEnumeration(); descendants.hasMoreElements(); ) {\n    v=(DefaultMutableTreeNode)descendants.nextElement();\n    this.tree.expandPath(new TreePath(v.getPath()));\n  }\n}\n"}
{"nl": "set values of multi keys", "code": "public int batchSet(ObjectInfo objInfo,Map keyValues,Map failKeys) throws MyException {\n  return this.batchSet(objInfo,keyValues,failKeys,ProtoCommon.FDHT_EXPIRES_NEVER);\n}\n"}
{"nl": "Displays current legion announcement", "code": "private void displayLegionMessage(Player targetPlayer,Entry<Timestamp,String> currentAnnouncement){\n  if (currentAnnouncement != null) {\n    PacketSendUtility.sendPacket(targetPlayer,SM_SYSTEM_MESSAGE.STR_GUILD_NOTICE(currentAnnouncement.getValue(),(int)(currentAnnouncement.getKey().getTime() / 1000)));\n  }\n}\n"}
{"nl": "Write an object array of pbs entries to the stream", "code": "public static void writePbsEntryPacketObjectArray(PbsOutputStream output,Object[] objects){\n  if (objects != null) {\n    output.writeInt(objects.length);\n    for (    Object entry : objects)     writePbsEntryPacket(output,(PbsEntryPacket)entry);\n  }\n else   output.writeInt(-1);\n}\n"}
{"nl": "MONSTER STATUS QUERIES", "code": "public ArrayList<MonsterStatus> queryMonsterStatus(long id){\n  ArrayList<MonsterStatus> monsterStatuses=new ArrayList<MonsterStatus>();\n  MonsterStatusCursor cursor=mHelper.queryMonsterStatus(id);\n  cursor.moveToFirst();\n  while (!cursor.isAfterLast()) {\n    monsterStatuses.add(cursor.getStatus());\n    cursor.moveToNext();\n  }\n  cursor.close();\n  return monsterStatuses;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AccountSetOfflineQuery(VkApiClient client,UserActor actor){\n  super(client,\"account.setOffline\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Set fields", "code": "public PhotosGetCommentsQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Starts an empty local Zk instance on the default port", "code": "public static void startLocalZkServer(){\n  try {\n    startLocalZkServer(DEFAULT_ZK_TEST_PORT);\n  }\n catch (  Exception e) {\n    LOGGER.error(\"Failed to start ZK: \" + e);\n  }\n}\n"}
{"nl": "Collections ids to remove item from", "code": "protected MarketRemoveFromAlbumQuery albumIds(int... value){\n  return unsafeParam(\"album_ids\",value);\n}\n"}
{"nl": "Write a String to a file (on HDFS or local) in UTF-8 format", "code": "public static void writeStringToFile(String path,String toWrite,JavaSparkContext sc) throws IOException {\n  writeStringToFile(path,toWrite,sc.sc());\n}\n"}
{"nl": "This method writes only one byte, even though it says int (non-Javadoc)", "code": "@Override public final synchronized void write(int ib) throws IOException {\n  dis.write(ib);\n}\n"}
{"nl": "Convenience method for logging statuses to the plugin log", "code": "public static void log(IStatus status){\n  SVNUIPlugin.getPlugin().getLog().log(status);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  final Document doc=((MainViewer)getDir().getMainViewer()).getDocument();\n  return doc.getNumberOfReads() > 0 && doc.getMeganFile().hasDataConnector();\n}\n"}
{"nl": "Re-sets the executor and indicates the system is no longer checking the status of the transactions", "code": "private void stopCheckingStatus(){\n  executor.shutdownNow();\n  executor=Executors.newSingleThreadExecutor();\n  future=null;\n}\n"}
{"nl": "reads the named classification block", "code": "public int read(long position,IInputReader reader) throws IOException {\n  map2Weight.clear();\n  reader.seek(position);\n  final int numberOfClasses=reader.readInt();\n  for (int i=0; i < numberOfClasses; i++) {\n    final int classId=reader.readInt();\n    final int weight=reader.readInt();\n    final int count=reader.readInt();\n    reader.skipBytes(count * 8);\n    map2Weight.put(classId,weight);\n  }\n  return map2Weight.size();\n}\n"}
{"nl": "Update activity title If we're displaying folder, set folder title If we're displaying images, show number of selected images", "code": "private void updateTitle(){\n  if (menuDone != null && menuCamera != null) {\n    if (isDisplayingFolderView()) {\n      actionBar.setTitle(folderTitle);\n      menuDone.setVisible(false);\n    }\n else {\n      if (selectedImages.size() == 0) {\n        actionBar.setTitle(imageTitle);\n        if (menuDone != null)         menuDone.setVisible(false);\n      }\n else {\n        if (mode == ImagePickerActivity.MODE_MULTIPLE) {\n          if (limit == Constants.MAX_LIMIT)           actionBar.setTitle(String.format(getString(R.string.selected),selectedImages.size()));\n else           actionBar.setTitle(String.format(getString(R.string.selected_with_limit),selectedImages.size(),limit));\n        }\n        if (menuDone != null)         menuDone.setVisible(true);\n      }\n    }\n  }\n}\n"}
{"nl": "update the mongo data", "code": "final public static long updateCollection(Object id,V v,Class<? extends Bean> t,boolean adding){\n  String collection=getCollection(t);\n  if (collection != null && !\"none\".equals(collection)) {\n    return updateCollection(collection,id,v,adding);\n  }\n  return -1;\n}\n"}
{"nl": "Set owner id", "code": "public NewsfeedGetMentionsQuery ownerId(Integer value){\n  return unsafeParam(\"owner_id\",value);\n}\n"}
{"nl": "Creates a new node", "code": "FloatList(){\n  value=0.0F;\n  next=null;\n  prev=null;\n}\n"}
{"nl": "Creates the wizard pages", "code": "public void addPages(){\n  mainPage=new NewRemoteFolderWizardMainPage(\"newRemoteFolderPage1\",Policy.bind(\"NewRemoteFolderWizard.heading\"),SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER));\n  mainPage.setParentFolder(selection);\n  addPage(mainPage);\n  String pageTitle=Policy.bind(\"CommentCommitWizardPage.pageTitle\");\n  String pageDescription=Policy.bind(\"CommentCommitWizardPage.pageDescription\");\n  ImageDescriptor image=SVNUIPlugin.getPlugin().getImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER);\n  commitCommentPage=new CommentCommitWizardPage(parentDialog,pageTitle,pageTitle,image,pageDescription);\n  addPage(commitCommentPage);\n}\n"}
{"nl": "Go to the selected step", "code": "public void goToStep(int stepNumber,boolean restoration){\n  if (activeStep != stepNumber || restoration) {\n    if (hideKeyboard) {\n      hideSoftKeyboard();\n    }\n    boolean previousStepsAreCompleted=arePreviousStepsCompleted(stepNumber);\n    if (stepNumber == 0 || previousStepsAreCompleted) {\n      openStep(stepNumber,restoration);\n    }\n  }\n}\n"}
{"nl": "Creates a textUnit to be used later to generate a XLIFF", "code": "public TextUnit createTextUnit(Long id,String name,String source,String note){\n  return createTextUnit(id,name,source,note,null,null,null);\n}\n"}
{"nl": "Download percentage calculation", "code": "public static float calculatePercent(int downloadSize,int fileSize){\n  float num=(float)downloadSize / fileSize;\n  float percent=((float)(int)(num * 1000)) / 10;\n  return percent;\n}\n"}
{"nl": "Contact of a current user on a specified service", "code": "public AccountLookupContactsQuery mycontact(String value){\n  return unsafeParam(\"mycontact\",value);\n}\n"}
{"nl": "Returns true if the target is overridden", "code": "public final boolean isOverridingTarget(){\n  return (myOverride & CFG_TARGET) != 0;\n}\n"}
{"nl": "Write the given String to the given data output (Replacement for writeUTF)", "code": "private static void writeStringToOutput(String str,DataOutput out) throws IOException {\n  out.writeInt(str.length());\n  out.writeChars(str);\n}\n"}
{"nl": "Modify the disk speed adding an acceleration vector", "code": "public Disk accelerate(Vector acceleration){\n  return new Disk(position,speed.add(acceleration),radius);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  for (  IDirector dir : ProjectManager.getProjects()) {\n    if (dir.getDirty())     return false;\n  }\n  return true;\n}\n"}
{"nl": "Initializes the element scheme processor", "code": "protected void init(){\n  fSchemeName=null;\n  fSchemeData=null;\n  fShortHandPointerName=null;\n  fIsResolveElement=false;\n  fIsElementFound=false;\n  fWasOnlyEmptyElementFound=false;\n  fFoundDepth=0;\n  fCurrentChildPosition=1;\n  fCurrentChildDepth=0;\n  fIsFragmentResolved=false;\n  fShortHandPointer=null;\n  initErrorReporter();\n}\n"}
{"nl": "Creates new 3d point with given coords", "code": "public Point3D(float x,float y,float z){\n  this.x=x;\n  this.y=y;\n  this.z=z;\n}\n"}
{"nl": "Rescale coords to extend them as in zooming-in/-out", "code": "public void zoomOut() throws IOException {\n  int zoom=1;\n  int range=this.to - this.from + 1;\n  if (range % 2 == 1) {\n    range--;\n  }\n  int midpoint=this.getMidpoint();\n  long zoomTo=midpoint + ((long)range * (long)zoom);\n  if (zoomTo >= Integer.MAX_VALUE) {\n    System.err.println(\"Invalid 'to' coordinate to fetch \" + zoomTo + \" (integer overflow?)\");\n    zoomTo=Integer.MAX_VALUE;\n  }\n  this.to=(int)zoomTo;\n  this.from=midpoint - (range * zoom);\n  this.from=(this.from <= 0) ? 1 : this.from;\n  if (this.samSeqDict != null && this.samSeqDict.size() > 0) {\n    if (this.samSeqDict.getSequence(this.chrom).getSequenceLength() > 0) {\n      this.to=(this.to > this.samSeqDict.getSequence(this.chrom).getSequenceLength()) ? this.samSeqDict.getSequence(this.chrom).getSequenceLength() : this.to;\n    }\n  }\n  this.setRefSeq();\n}\n"}
{"nl": "Creates a new compare action that will compare against the HEAD revision", "code": "public CompareWithHeadRevisionAction(){\n  super(SVNRevision.HEAD);\n}\n"}
{"nl": "return date string from milliseconds", "code": "public static String millisecondsToString(long milliseconds){\n  return millisecondsToString(milliseconds,SIMPLE_DATE_FORMAT);\n}\n"}
{"nl": "Type a key multiple times", "code": "public void typeRepeat(int key,int count) throws InterruptedException {\n  if (count <= 0) {\n    return;\n  }\n  for (int i=0; i < count; i++) {\n    type(key);\n  }\n}\n"}
{"nl": "Creates the experiment with provided startTime , endTime and experiment Label", "code": "private Experiment createExperiment(String startTime,String endTime,String expSuffix){\n  return ExperimentFactory.createExperiment().setStartTime(startTime).setEndTime(endTime).setLabel(PREFIX_EXPERIMENT + TIMESTAMP_STR + expSuffix).setSamplingPercent(SAMPLING_PERCENT).setApplication(ApplicationFactory.createApplication().setName(PREFIX_APPLICATION + TIMESTAMP_STR));\n}\n"}
{"nl": "Returns is the supplied key is set in the map", "code": "public boolean hasKey(String key){\n  return internalMap.containsKey(key);\n}\n"}
{"nl": "Add some patterns where this variable is a relation relating the given roleplayer as the given roletype", "code": "private Stream<MultiTraversal> addRelatesPattern(String start,String casting,VarAdmin roleType,VarAdmin rolePlayer){\n  String roletypeName=roleType.getName();\n  String roleplayerName=rolePlayer.getName();\n  return Stream.of(MultiTraversal.create(Fragment.create(null,EDGE_BOUNDED,start,casting),Fragment.create(null,EDGE_UNBOUNDED,casting,start)),MultiTraversal.create(Fragment.create(null,EDGE_UNIQUE,casting,roleplayerName),Fragment.create(null,EDGE_BOUNDED,roleplayerName,casting)),MultiTraversal.create(Fragment.create(null,EDGE_UNIQUE,casting,roletypeName),Fragment.create(null,EDGE_UNBOUNDED,roletypeName,casting)));\n}\n"}
{"nl": "Trains the clustering algorithm", "code": "@RequestMapping(value=\"/train\",method=RequestMethod.GET) public String trainAndSave(){\n  String model=ClusteringService.train();\n  redis.opsForValue().set(key,model);\n  return model;\n}\n"}
{"nl": "Types of communities to return", "code": "public GroupsGetQuery filter(List<GroupsGetFilter> value){\n  return unsafeParam(\"filter\",value);\n}\n"}
{"nl": "Helper to check if result exists in the collection based on line number", "code": "private boolean resultExists(List<CodeMatchResult> lst,int value){\n  for (  CodeMatchResult s : lst) {\n    if (s.getLineNumber() == value) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "read the header of a DAA file and all reference names", "code": "public void save() throws IOException {\n  try (OutputWriterLittleEndian outs=new OutputWriterLittleEndian(new FileRandomAccessReadWriteAdapter(fileName,\"rw\"))){\n    outs.writeLong(magicNumber);\n    outs.writeLong(version);\n    outs.writeLong(diamondBuild);\n    outs.writeLong(dbSeqs);\n    outs.writeLong(dbSeqsUsed);\n    outs.writeLong(dbLetters);\n    outs.writeLong(flags);\n    outs.writeLong(queryRecords);\n    outs.writeInt(modeRank);\n    outs.writeInt(gapOpen);\n    outs.writeInt(gapExtend);\n    outs.writeInt(reward);\n    outs.writeInt(penalty);\n    outs.writeInt(reserved1);\n    outs.writeInt(reserved2);\n    outs.writeInt(reserved3);\n    outs.writeDouble(k);\n    outs.writeDouble(lambda);\n    outs.writeDouble(reserved4);\n    outs.writeDouble(reserved5);\n    for (    byte a : scoreMatrix) {\n      outs.write(a);\n    }\n    scoreMatrixName=Basic.toString(scoreMatrix);\n    for (    long a : blockSize) {\n      outs.writeLong(a);\n    }\n    for (    byte a : blockTypeRank) {\n      outs.write(a);\n    }\n  }\n }\n"}
{"nl": "Just for backwards compatibility with workspaces stored with previous version", "code": "private void readFromVersion1Stream(StatusFromBytesStream dis) throws IOException {\n  String urlCopiedFromString=dis.readUTF();\n  if (urlCopiedFromString.equals(\"\")) {\n    urlCopiedFrom=null;\n  }\n else {\n    urlCopiedFrom=url;\n  }\n  file=new File(dis.readUTF());\n  pathConflictOld=dis.readUTF();\n  if (pathConflictOld.equals(\"\"))   pathConflictOld=null;\n  pathConflictNew=dis.readUTF();\n  if (pathConflictNew.equals(\"\"))   pathConflictNew=null;\n  pathConflictWorking=dis.readUTF();\n  if (pathConflictWorking.equals(\"\"))   pathConflictWorking=null;\n  lockOwner=null;\n  lockCreationDate=0L;\n  lockComment=null;\n  readOnly=false;\n}\n"}
{"nl": "Starts fade in animation and shows text view", "code": "public void show(){\n  if (!isVisible) {\n    textView.setVisibility(VISIBLE);\n    textView.startAnimation(fadeIn);\n    isVisible=true;\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"detach remoteServer=\");\n  final String url=np.getWordFileNamePunctuation();\n  np.matchIgnoreCase(\";\");\n  if (((megan.remote.RemoteServiceBrowser)getViewer()).closeRemoteService(url))   System.err.println(\"Service closed: \" + url);\n else   NotificationsInSwing.showError(getViewer().getFrame(),\"Failed to close service: \" + url);\n}\n"}
{"nl": "compute the Shannon-Weaver diversity index in bits", "code": "private static double[] computeSimpsonReciprocal(ClassificationViewer viewer,ProgressListener progressListener) throws IOException, CanceledException {\n  progressListener.setMaximum(2 * viewer.getSelectedNodes().size());\n  progressListener.setProgress(0);\n  int numberOfDatasets=viewer.getDocument().getNumberOfSamples();\n  double[] total=new double[numberOfDatasets];\n  for (  Node v : viewer.getSelectedNodes()) {\n    int[] summarized=viewer.getNodeData(v).getSummarized();\n    for (int i=0; i < summarized.length; i++)     total[i]+=summarized[i];\n    progressListener.incrementProgress();\n  }\n  double[] result=new double[numberOfDatasets];\n  for (  Node v : viewer.getSelectedNodes()) {\n    int[] summarized=viewer.getNodeData(v).getSummarized();\n    for (int i=0; i < summarized.length; i++) {\n      double p=summarized[i] / total[i];\n      result[i]+=p * p;\n    }\n    progressListener.incrementProgress();\n  }\n  for (int i=0; i < result.length; i++)   result[i]=result[i] > 0 ? 1.0 / result[i] : 0;\n  return result;\n}\n"}
{"nl": "SAX2 API", "code": "@Override public void warning(SAXParseException exception){\n  warningCount++;\n  if (showWarnings && (errorCount + warningCount < maxMessages)) {\n    message(\"Warning\",exception);\n  }\n}\n"}
{"nl": "Constructs new instance of <tt>CM_MAY_LOGIN_INTO_GAME </tt> packet", "code": "public CM_MAY_LOGIN_INTO_GAME(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosSaveMarketAlbumPhotoQuery(VkApiClient client,UserActor actor,int groupId,String photo,int server,String hash){\n  super(client,\"photos.saveMarketAlbumPhoto\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  photo(photo);\n  server(server);\n  hash(hash);\n}\n"}
{"nl": "Reads the version header for the given serializable form and returned a SpaceTypeDescriptor matching that version", "code": "public static SpaceTypeDescriptor fromSerializableForm(Serializable versionedSerializableForm){\n  if (!(versionedSerializableForm instanceof TypeDescVersionedSerializable))   throw new IllegalArgumentException(\"wrapper must be an instance of \" + TypeDescVersionedSerializable.class.getName());\n  return ((TypeDescVersionedSerializable)versionedSerializableForm).getTypeDesc();\n}\n"}
{"nl": "<p> Method: check the string match the regex or not and return the match field value like {xxxx} can find xxxx </p>", "code": "public static List<String> parseStringGroup(final String string,final String regex,final String firstRegex,final String firstRegexReplace,final int lastRegexStringLength){\n  List<String> list=null;\n  if (string != null) {\n    list=new ArrayList<String>();\n    int lastRegexLength=lastRegexStringLength < 0 ? 0 : lastRegexStringLength;\n    Pattern pattern=Pattern.compile(regex);\n    Matcher matcher=pattern.matcher(string);\n    String group=null;\n    int start=0;\n    while (matcher.find(start)) {\n      start=matcher.end();\n      group=matcher.group();\n      group=group.replaceFirst(firstRegex,firstRegexReplace);\n      group=group.substring(0,group.length() - lastRegexLength);\n      list.add(group);\n    }\n  }\n  return list;\n}\n"}
{"nl": "Import target text units into the TM", "code": "protected void handleTargetTextUnit(ITextUnit textUnit){\n  if (!textUnit.isTranslatable()) {\n    return;\n  }\n  Locale targetLocale=localeService.findByBcp47Tag(targetLocaleId.toBCP47());\n  String name=textUnit.getName();\n  String sourceContent=textUnit.getSource().toString();\n  String translation=textUnit.getTarget(targetLocaleId).toString();\n  ImportExportNote importExportNote=textUnitUtils.getImportExportNote(textUnit);\n  if (!Strings.isNullOrEmpty(translation)) {\n    Long tmTextUnitId=tmTextUnitIdsByMd5ForAsset.get(tmService.computeTMTextUnitMD5(name,sourceContent,importExportNote.getSourceComment()));\n    if (tmTextUnitId == null) {\n      String msg=\"Trying to add a translation to an non existing text unit, name: \" + name + \", comment: \"+ importExportNote.getSourceComment()+ \", source: \"+ sourceContent;\n      logger.error(msg);\n      throw new RuntimeException(msg);\n    }\n    TMTextUnitVariant addTMTextUnitVariant=null;\n    if (updateTM) {\n      logger.debug(\"Import assuming there is already some translations in the TM\");\n      addTMTextUnitVariant=tmService.addCurrentTMTextUnitVariant(tmTextUnitId,targetLocale.getId(),translation,importExportNote.getStatus(),importExportNote.isIncludedInLocalizedFile(),importExportNote.getCreatedDate());\n    }\n else {\n      logger.debug(\"Import assuming there is no translation in the TM yet (optimized, don't check for update)\");\n      addTMTextUnitVariant=tmService.addTMTextUnitVariant(tmTextUnitId,targetLocale.getId(),translation,importExportNote.getTargetComment(),importExportNote.getStatus(),importExportNote.isIncludedInLocalizedFile(),importExportNote.getCreatedDate());\n      tmService.makeTMTextUnitVariantCurrent(asset.getRepository().getTm().getId(),tmTextUnitId,targetLocale.getId(),addTMTextUnitVariant.getId());\n    }\n    for (    TMTextUnitVariantComment variantComment : importExportNote.getVariantComments()) {\n      tmTextUnitVariantCommentService.addComment(addTMTextUnitVariant.getId(),variantComment.getType(),variantComment.getSeverity(),variantComment.getContent());\n    }\n  }\n else {\n    logger.debug(\"Empty translation for name: {}, skip it\",name);\n  }\n}\n"}
{"nl": "does  node for this URL exist", "code": "public static boolean hasNode(String url){\n  return url2node.containsKey(url);\n}\n"}
{"nl": "Makes an enum name human readable (fixes spaces, capitalization, etc)", "code": "public static String makeEnumHumanReadable(final String enumName){\n  StringBuilder builder=new StringBuilder(enumName.length() + 1);\n  for (  String word : enumName.split(\"_\")) {\n    if (word.length() <= 2) {\n      builder.append(word);\n    }\n else {\n      builder.append(word.charAt(0));\n      builder.append(word.substring(1).toLowerCase());\n    }\n    builder.append(' ');\n  }\n  return builder.substring(0,enumName.length());\n}\n"}
{"nl": "Iterate over Widget's Set find widget with specified id and remove it if required", "code": "private boolean processWidgets(List<WidgetObject> widgets,String searchingId,boolean isRemove){\n  Iterator<WidgetObject> iterator=widgets.iterator();\n  boolean isFound=false;\n  while (iterator.hasNext()) {\n    WidgetObject widget=iterator.next();\n    if (widget.getWidgetId().equalsIgnoreCase(searchingId)) {\n      if (isRemove) {\n        iterator.remove();\n      }\n      isFound=true;\n      break;\n    }\n  }\n  return isFound;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"compute diversityRatio kmer=25 step=25 mindepth=10;\");\n}\n"}
{"nl": "Convert the specified view to a drawable, if possible", "code": "@Nullable public static Bitmap toBitmap(@Nullable final View view){\n  if (view == null) {\n    return null;\n  }\n  final int width=view.getWidth();\n  final int height=view.getHeight();\n  final Bitmap bitmapToExport=Bitmap.createBitmap(width > 0 ? width : DEFAULT_BITMAP_WIDTH,height > 0 ? height : DEFAULT_BITMAP_HEIGHT,Bitmap.Config.ARGB_8888);\n  final Canvas canvas=new Canvas(bitmapToExport);\n  view.draw(canvas);\n  return bitmapToExport;\n}\n"}
{"nl": "Below method will be used to initialize the reader", "code": "private void initializeReader() throws IOException {\n  close();\n  String path=this.csvParserVo.getBlockDetailsList().get(blockCounter).getFilePath();\n  FileType fileType=FileFactory.getFileType(path);\n  if (path.endsWith(\".gz\") || path.endsWith(\".bz2\")) {\n    DataInputStream dataInputStream=FileFactory.getDataInputStream(path,fileType,bufferSize);\n    inputStreamReader=new BufferedReader(new InputStreamReader(dataInputStream));\n  }\n else {\n    long startOffset=this.csvParserVo.getBlockDetailsList().get(blockCounter).getBlockOffset();\n    long blockLength=this.csvParserVo.getBlockDetailsList().get(blockCounter).getBlockLength();\n    long endOffset=blockLength + startOffset;\n    DataInputStream dataInputStream=FileFactory.getDataInputStream(path,fileType,bufferSize,startOffset);\n    if (startOffset != 0) {\n      LineReader lineReader=new LineReader(dataInputStream,1);\n      startOffset+=lineReader.readLine(new Text(),0);\n    }\n    inputStreamReader=new BufferedReader(new InputStreamReader(new BoundedDataStream(dataInputStream,endOffset - startOffset)));\n  }\n}\n"}
{"nl": "release SLHolder for this scan", "code": "@Override public void releaseScan() throws SAException {\n  try {\n    if (iterator != null)     iterator.close();\n  }\n catch (  Exception ex) {\n    throw new SAException(ex);\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"show gapBetweenBars=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set nodeShape=circle;\");\n}\n"}
{"nl": "Generates a random integer between the specified numbers", "code": "public static int randomNumberBetween(double begin,double end,RandomGenerator rng){\n  if (begin > end)   throw new IllegalArgumentException(\"Begin must not be less than end\");\n  return (int)begin + (int)(rng.nextDouble() * ((end - begin) + 1));\n}\n"}
{"nl": "This call the intent to selected the picture", "code": "public boolean selectedPicture(String headerName){\n  Intent intent=new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n  intent.setType(\"image/*\");\n  this.activity.startActivityForResult(Intent.createChooser(intent,(!headerName.equals(\"\") ? headerName : \"Magical Camera\")),SELECT_PHOTO);\n  return true;\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  final ChartViewer viewer=(ChartViewer)getViewer();\n  final LabelsJList list=viewer.getActiveLabelsJList();\n  previousValue=Math.min(list.getAllLabels().size(),previousValue);\n  final String result=JOptionPane.showInputDialog(viewer.getFrame(),\"Set number of top items to select\",previousValue);\n  if (result != null && Basic.isInteger(result)) {\n    execute(\"select top='\" + result + \"';\");\n    previousValue=Basic.parseInt(result);\n  }\n}\n"}
{"nl": "Release 3 primary mouse masks: 1, 2, and 3", "code": "public void releaseAll(){\n  controller.mouseRelease(InputEvent.BUTTON1_MASK);\n  controller.mouseRelease(InputEvent.BUTTON2_MASK);\n  controller.mouseRelease(InputEvent.BUTTON3_MASK);\n}\n"}
{"nl": "Make this observer usable exactly one time", "code": "public void makeOneTimeUse(){\n  used=new AtomicBoolean(false);\n}\n"}
{"nl": "Joins all the elements of the list together with the given sequence", "code": "@ObjectiveCName(\"join:\") private static String join(String[] list){\n  StringBuilder sb=new StringBuilder();\n  for (int i=0; i < list.length; i++) {\n    if (i == list.length - 1) {\n      sb.append(list[i]);\n    }\n else {\n      sb.append(list[i]);\n      sb.append(MessageBuilder.MPS);\n    }\n  }\n  return sb.toString();\n}\n"}
{"nl": "Mary header writer", "code": "public long writeTo(DataOutput output) throws IOException {\n  long nBytes=0;\n  assert this.hasLegalType() : \"Unknown Mary file type [\" + type + \"].\";\n  output.writeInt(magic);\n  nBytes+=4;\n  output.writeInt(version);\n  nBytes+=4;\n  output.writeInt(type);\n  nBytes+=4;\n  return (nBytes);\n}\n"}
{"nl": "Returns class of task", "code": "@Override public Class<? extends Task> taskClass(){\n  return PostgreSQLSinkTask.class;\n}\n"}
{"nl": "Create a fullscreen image and punch a hole inside", "code": "public static Bitmap punchARoundedHoleInABitmap(Context context,int screenWidth,int screenHeight,int x,int y,int holeDiameter,int backgroundColor){\n  Bitmap bitmap=Bitmap.createBitmap(screenWidth,screenHeight,Bitmap.Config.ARGB_8888);\n  Canvas canvas=new Canvas(bitmap);\n  Paint paint=new Paint();\n  paint.setAntiAlias(true);\n  canvas.drawColor(context.getResources().getColor(backgroundColor));\n  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));\n  canvas.drawCircle(x + holeDiameter / 2,y + holeDiameter / 2,holeDiameter / 2,paint);\n  return bitmap;\n}\n"}
{"nl": "Changes this to given alternative if the value does not exist, just returns itself if the value exists", "code": "@NonNull public Optional<T> or(@NonNull Optional<T> alternative){\n  return isDefined() ? this : alternative;\n}\n"}
{"nl": "Creates a new SDTTimeDeadbandscheduler", "code": "public SDTTimeDeadbandScheduler(final SourceDataTag sourceDataTag,final IProcessMessageSender processMessageSender,final EquipmentSenderFilterModule equipmentSenderFilterModule,final Timer timeDeadbandTimer,final DataTagValueFilter dataTagValueFilter,final IDynamicTimeDeadbandFilterer dynamicTimeDeadbandFilterer){\n  this.dataTagValueFilter=dataTagValueFilter;\n  this.processMessageSender=processMessageSender;\n  this.equipmentSenderFilterModule=equipmentSenderFilterModule;\n  this.dynamicTimeDeadbandFilterer=dynamicTimeDeadbandFilterer;\n  this.timeDeadbandTimer=timeDeadbandTimer;\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(\"creating time-deadband scheduler for tag : \" + sourceDataTag.getId());\n  }\n  this.sourceDataTag=sourceDataTag;\n}\n"}
{"nl": "Toggle the selection status of the item at a given position", "code": "public void toggleSelection(final int position){\n  if (mSelectedItems.get(position,false)) {\n    mSelectedItems.delete(position);\n  }\n else {\n    mSelectedItems.put(position,true);\n  }\n  notifyItemChanged(position);\n}\n"}
{"nl": "Recursive decent of widget tree inferring constraints on ConstraintWidgetContainer", "code": "private static void inferConstraints(WidgetContainer base){\n  if (base == null) {\n    return;\n  }\n  if (base instanceof ConstraintWidgetContainer && ((ConstraintWidgetContainer)base).handlesInternalConstraints()) {\n    return;\n  }\n  int preX=base.getX();\n  int preY=base.getY();\n  base.setX(0);\n  base.setY(0);\n  for (  ConstraintWidget constraintWidget : base.getChildren()) {\n    if (constraintWidget instanceof ConstraintWidgetContainer) {\n      ConstraintWidgetContainer container=(ConstraintWidgetContainer)constraintWidget;\n      if (!container.getChildren().isEmpty()) {\n        inferConstraints(container);\n      }\n    }\n  }\n  ArrayList<ConstraintWidget> list=new ArrayList<>(base.getChildren());\n  list.add(0,base);\n  ConstraintWidget[] widgets=list.toArray(new ConstraintWidget[list.size()]);\n  ScoutWidget.computeConstraints(ScoutWidget.create(widgets));\n  base.setX(preX);\n  base.setY(preY);\n}\n"}
{"nl": "remove fifo xtn info for entry MUST be called  when entry is locked", "code": "public void removeFifoXtnInfoForEntry(IEntryHolder eh){\n  FifoXtnEntryInfo Xe=new FifoXtnEntryInfo(eh.getUID(),eh.getSCN(),eh.getOrder());\n  _terminatingXtnsEntries.remove(Xe);\n}\n"}
{"nl": "/*     ", "code": "@deprecated public final TimeZone parse(String text,ParsePosition pos){\n  return parse(Style.GENERIC_LOCATION,text,pos,true,null);\n}\n"}
{"nl": "attempts to parse an edit string", "code": "public static Edit fromString(String string) throws IOException {\n  return parse(new NexusStreamParser(new StringReader(string)));\n}\n"}
{"nl": "Add thumbnail to cache", "code": "private Bitmap addThumbnailToCache(String imageKey,Bitmap bitmap,String path,int px){\n  Bitmap thumbnail=ThumbnailUtils.extractThumbnail(bitmap,px,px);\n  thumbnail=BitmapUtils.rotateImage(thumbnail,path);\n  addBitmapToCache(imageKey,thumbnail);\n  return thumbnail;\n}\n"}
{"nl": "Create a new Calculable", "code": "public Calculable(String id,double value,long when){\n  this(id,value);\n  setWhen(when);\n}\n"}
{"nl": "Set guid", "code": "public VideoCreateCommentQuery guid(String value){\n  return unsafeParam(\"guid\",value);\n}\n"}
{"nl": "Set user id", "code": "public StorageSetQuery userId(Integer value){\n  return unsafeParam(\"user_id\",value);\n}\n"}
{"nl": "Set extended", "code": "public AdsGetTargetGroupsQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Creates the default inverse cumulative probability test input values", "code": "@Override public double[] makeInverseCumulativeTestPoints(){\n  return new double[]{0d,0.001d,0.010d,0.025d,0.050d,0.3413d,0.3415d,0.999d,0.990d,0.975d,0.950d,0.900d,1d};\n}\n"}
{"nl": "Exact direct multiplication implementation to test against", "code": "private long factorial(int n){\n  long result=1;\n  for (int i=2; i <= n; i++) {\n    result*=i;\n  }\n  return result;\n}\n"}
{"nl": "Search user by params", "code": "@Override public List<User> searchUser(User user){\n  return sessionTemplate.selectList(NAMESPACE + \".searchUser\",user);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AdsGetAccountsQuery(VkApiClient client,UserActor actor){\n  super(client,\"ads.getAccounts\",Utils.buildParametrizedType(List.class,Account.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Show the dialog", "code": "private void showDialog(JTextComponent target){\n  if (dlg == null) {\n    dlg=new ReplaceDialog(target,FindReplaceActions.this);\n  }\n  dlg.setVisible(true);\n}\n"}
{"nl": "modify an array according to the given order", "code": "private static Integer[] modify(Integer[] order,Integer[] array){\n  Integer[] tmp=new Integer[order.length];\n  int pos=0;\n  for (  Integer id : order) {\n    if (id < array.length)     tmp[pos++]=array[id];\n  }\n  return tmp;\n}\n"}
{"nl": "create body and make it be active", "code": "private void createBody(soot.SootMethod sootMethod){\n  body=soot.jimple.Jimple.v().newBody(sootMethod);\n  sootMethod.setActiveBody(body);\n}\n"}
{"nl": "Creates a particle system with the given parameters", "code": "public ParticleSystem(Activity a,int maxParticles,int drawableResId,long timeToLive,ViewGroup parentView){\n  this(parentView,maxParticles,ContextCompat.getDrawable(a,drawableResId),timeToLive);\n}\n"}
{"nl": "Chages item comment's text", "code": "public MarketEditCommentQuery editComment(UserActor actor,int ownerId,int commentId){\n  return new MarketEditCommentQuery(getClient(),actor,ownerId,commentId);\n}\n"}
{"nl": "Checks whether the given method or one of its transitive callees has side-effects or calls a sink method", "code": "private boolean hasSideEffectsOrCallsSink(SootMethod method){\n  return hasSideEffectsOrCallsSink(method,new HashSet<SootMethod>());\n}\n"}
{"nl": "Apply some predicate on all group members<br> Should be used only to change state of the group or its members", "code": "public void apply(Predicate<TM> predicate){\n  lock();\n  try {\n    for (    TM member : members.values()) {\n      if (!predicate.apply(member)) {\n        return;\n      }\n    }\n  }\n  finally {\n    unlock();\n  }\n}\n"}
{"nl": "/*     ", "code": "@deprecated public StringBuffer format(Object obj,StringBuffer toAppendTo,FieldPosition pos){\n  TimeZone tz=null;\n  long date=System.currentTimeMillis();\n  if ((obj instanceof TimeZone)) {\n    tz=(TimeZone)obj;\n  }\n else   if ((obj instanceof Calendar)) {\n    tz=((Calendar)obj).getTimeZone();\n    date=((Calendar)obj).getTimeInMillis();\n  }\n else {\n    throw new IllegalArgumentException(\"Cannot format given Object (\" + obj.getClass().getName() + \") as a time zone\");\n  }\n  assert (tz != null);\n  String result=formatOffsetLocalizedGMT(tz.getOffset(date));\n  toAppendTo.append(result);\n  if ((pos.getFieldAttribute() == DateFormat.Field.TIME_ZONE) || (pos.getField() == 17)) {\n    pos.setBeginIndex(0);\n    pos.setEndIndex(result.length());\n  }\n  return toAppendTo;\n}\n"}
{"nl": "Constructs an <code>AbortJob</code>", "code": "public AbortJob(Transaction tr,TaskManager pool,WakeupManager wm,ClientLog log,ParticipantHandle[] handles,boolean directCall,Object xid){\n  super(pool,wm,directCall);\n  if (log == null)   throw new IllegalArgumentException(\"AbortJob: AbortJob: \" + \"log is null\");\n  this.log=log;\n  if (!(tr instanceof ServerTransaction))   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"must be a ServerTransaction\");\n  this.tr=(ServerTransaction)tr;\n  if (handles == null)   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"must have participants\");\n  if (handles.length == 0)   throw new IllegalArgumentException(\"PrepareJob: PrepareJob: \" + \"must have participants\");\n  this.handles=handles;\n  if (_directCall)   this.results=new Integer[1];\n  _xid=xid;\n}\n"}
{"nl": "Creates the CMU Lexicon which is a binary lexicon", "code": "public CMULexicon(String basename){\n  this(basename,true);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set groupNodes=none;\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetAlbumsCountQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.getAlbumsCount\",Integer.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Set fields", "code": "public WallSearchQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "zlib compress 2 byte", "code": "public static byte[] compressForZlib(String stringToCompress){\n  byte[] returnValues=null;\n  try {\n    returnValues=compressForZlib(stringToCompress.getBytes(\"UTF-8\"));\n  }\n catch (  UnsupportedEncodingException uee) {\n    uee.printStackTrace();\n  }\n  return returnValues;\n}\n"}
{"nl": "read the header", "code": "public void read(IInputReader reader) throws IOException {\n  final int magicNumber=reader.readInt();\n  if (magicNumber != RMA6File.MAGIC_NUMBER) {\n    throw new IOException(\"Not an RMA file\");\n  }\n  final int version=reader.readInt();\n  if (version != RMA6File.VERSION) {\n    throw new IOException(\"Not an RMA \" + RMA6File.VERSION + \" file\");\n  }\n  int minorVersion=reader.readInt();\n  creator=reader.readString();\n  creationDate=reader.readLong();\n  blastMode=BlastMode.valueOf(reader.readString());\n  pairedReads=(reader.read() == 1);\n  matchClassNames=new String[reader.readInt()];\n  for (int i=0; i < matchClassNames.length; i++) {\n    matchClassNames[i]=reader.readString();\n  }\n}\n"}
{"nl": "Validates the configuration of the hardwareAddress", "code": "@Override public final void validate() throws ConfigurationException {\n  if (opcItemName == null) {\n    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,\"Parameter \\\"opcItemName\\\" must not be null\");\n  }\n}\n"}
{"nl": "Post an event", "code": "public void post(Object event){\n  eventBus.post(event);\n  Logs.info(\"published an event({})\",event);\n}\n"}
{"nl": "Quest complete: %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_COMPLETE_QUEST(String value0){\n  return new SM_SYSTEM_MESSAGE(1300616,value0);\n}\n"}
{"nl": "Does nothing, because compensation log record is redo-Only", "code": "@Override public void undo(Transaction tx){\n}\n"}
{"nl": "applies the min-support algorithm to the given taxonomic analysis", "code": "public static void apply(Map<Integer,Integer> tax2count,int minSupport,final ProgressListener progressListener){\n  MinSupportAlgorithm algorithm=new MinSupportAlgorithm(tax2count,minSupport,progressListener);\n  try {\n    Map<Integer,Integer> lowSupportTaxa2HighSupportTaxa=algorithm.apply();\n    for (    Integer lowTaxon : lowSupportTaxa2HighSupportTaxa.keySet()) {\n      Integer highTaxon=lowSupportTaxa2HighSupportTaxa.get(lowTaxon);\n      Integer count=tax2count.get(highTaxon);\n      if (count == null)       tax2count.put(highTaxon,tax2count.get(lowTaxon));\n else       tax2count.put(highTaxon,count + tax2count.get(lowTaxon));\n    }\n    tax2count.keySet().removeAll(lowSupportTaxa2HighSupportTaxa.keySet());\n  }\n catch (  CanceledException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "Check if the session is closed", "code": "protected final boolean isClosed(){\n  return m_closed;\n}\n"}
{"nl": "return true if space is part of a partitioned cluster", "code": "public boolean isPartitionedSpace(){\n  return _clusterInfo.isPartitioned();\n}\n"}
{"nl": "add an attribute with same value to all samples", "code": "public boolean addAttribute(String attribute,Object value,boolean allowReplaceAttribute){\n  boolean change=false;\n  if (allowReplaceAttribute || !table.columnKeySet().contains(attribute)) {\n    for (    String sample : getSampleOrder()) {\n      put(sample,attribute,value);\n    }\n    change=true;\n  }\n  return change;\n}\n"}
{"nl": "150         startPoint(300,150)                                         endPoint(900,150) <p/> <p/> <p/> 450                   assistPoint1(500,450)   assistPoint2(700,450)", "code": "private void init(){\n  mPaint=new Paint();\n  mPath=new Path();\n  startPoint=new Point(300,150);\n  endPoint=new Point(900,150);\n  assistPoint1=new Point(500,450);\n  assistPoint2=new Point(700,450);\n  mPaint.setAntiAlias(true);\n  mPaint.setDither(true);\n}\n"}
{"nl": "print a string that is a fixed width of size used in debugging", "code": "static void fwPrint(String s,int size){\n  s+=\"                                             \";\n  s=s.substring(0,size);\n  System.out.print(s);\n}\n"}
{"nl": "get a copy", "code": "public SampleAttributeTable copy(){\n  final SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();\n  try (StringWriter w=new StringWriter()){\n    write(w,false,true);\n    sampleAttributeTable.read(new StringReader(w.toString()),getSampleOrder(),false);\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n  return sampleAttributeTable;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(getSyntax());\n  megan.remote.ServicePanel servicePanel=((megan.remote.RemoteServiceBrowser)getViewer()).getServicePanel();\n  if (servicePanel != null) {\n    TreePath[] paths=servicePanel.getFileTree().getSelectionPaths();\n    if (paths != null)     servicePanel.collapse(paths);\n else     servicePanel.collapse((DefaultMutableTreeNode)servicePanel.getFileTree().getModel().getRoot());\n  }\n}\n"}
{"nl": "add exceptions to a list that gets added at end of method", "code": "private void addToExceptionList(soot.jimple.Stmt from,soot.jimple.Stmt to,soot.jimple.Stmt with,soot.SootClass exceptionClass){\n  if (exceptionTable == null) {\n    exceptionTable=new ArrayList<Trap>();\n  }\n  soot.Trap trap=soot.jimple.Jimple.v().newTrap(exceptionClass,from,to,with);\n  exceptionTable.add(trap);\n}\n"}
{"nl": "onBind Methinds overwrite each one to bind during execution", "code": "@Override public void onBindViewHolder(T holder,int position){\n  ItemIndex index=getItemIndex(position);\n  onBindViewHolderItemType(holder,index,index.getType());\n}\n"}
{"nl": "kernel: 0 1 2 3 4 5 6 7 8", "code": "public void apply(PGraphicsOpenGL src,PGraphicsOpenGL dst,float[] kernel){\n  if (src == dst) {\n    System.out.println(\"Convolution error: read-write race\");\n    return;\n  }\n  if (kernel.length < 9)   return;\n  Texture tex_src=src.getTexture();\n  if (!tex_src.available())   return;\n  dst.beginDraw();\n  context.begin();\n  apply(tex_src.glName,dst.width,dst.height,kernel);\n  context.end(\"Convolution.apply\");\n  dst.endDraw();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"set layout=\" + AlignmentViewer.AlignmentLayout.ByName.toString() + \";zoom axis=both what=fit;\");\n}\n"}
{"nl": "%0: %1(%2)", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_CHECK_INSTANCE_COOL_TIME(){\n  return new SM_SYSTEM_MESSAGE(1400032);\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getMateNegativeStrandFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getMateNegativeStrandFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Creates the default cumulative probability density test expected values", "code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.0,0.0,0.0001,0.25 / 1.75,0.4999 / 1.75,0.5 / 1.75,0.5001 / 1.75,0.75 / 1.75,1.5 / 1.75,1.7499 / 1.75,1.0,1.0};\n}\n"}
{"nl": "rotate the bitmap", "code": "public static Bitmap rotateBitmap(Bitmap bitmap,int degrees){\n  if (bitmap != null) {\n    Matrix m=new Matrix();\n    m.postRotate(degrees);\n    bitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),m,true);\n    return bitmap;\n  }\n  return null;\n}\n"}
{"nl": "set select state of all objects", "code": "public void selectAll(boolean select){\n  dir.getMainViewer().selectAllNodes(select);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public StorageSetQuery(VkApiClient client,UserActor actor,String key){\n  super(client,\"storage.set\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  key(key);\n}\n"}
{"nl": "Returns index of palette color closest to c", "code": "protected int findClosest(int c){\n  if (colorTab == null)   return -1;\n  int r=(c >> 16) & 0xff;\n  int g=(c >> 8) & 0xff;\n  int b=(c >> 0) & 0xff;\n  int minpos=0;\n  int dmin=256 * 256 * 256;\n  int len=colorTab.length;\n  for (int i=0; i < len; ) {\n    int dr=r - (colorTab[i++] & 0xff);\n    int dg=g - (colorTab[i++] & 0xff);\n    int db=b - (colorTab[i] & 0xff);\n    int d=dr * dr + dg * dg + db * db;\n    int index=i / 3;\n    if (usedEntry[index] && (d < dmin)) {\n      dmin=d;\n      minpos=index;\n    }\n    i++;\n  }\n  return minpos;\n}\n"}
{"nl": "Create an SSLContext for the given TrustManager and KeyManager", "code": "public static SSLContext createSSLContext(TrustManager trustManager,KeyManager keyManager){\n  try {\n    SSLContext ctx=SSLContext.getInstance(\"TLS\");\n    ctx.init(new KeyManager[]{keyManager},new TrustManager[]{trustManager},null);\n    return ctx;\n  }\n catch (  NoSuchAlgorithmException|KeyManagementException e) {\n    throw new RuntimeException(\"Failed to create SSLContext\",e);\n  }\n}\n"}
{"nl": "Initializes client/server encryption keys based on baseKey", "code": "public EncryptionKeyPair(int baseKey){\n  this.baseKey=baseKey;\n  this.keys=new byte[2][];\n  this.keys[SERVER]=new byte[]{(byte)(baseKey & 0xff),(byte)((baseKey >> 8) & 0xff),(byte)((baseKey >> 16) & 0xff),(byte)((baseKey >> 24) & 0xff),(byte)0xa1,(byte)0x6c,(byte)0x54,(byte)0x87};\n  this.keys[CLIENT]=new byte[this.keys[SERVER].length];\n  System.arraycopy(this.keys[SERVER],0,this.keys[CLIENT],0,this.keys[SERVER].length);\n  this.lastUpdate=System.currentTimeMillis();\n}\n"}
{"nl": "Used by Event Service to add additional spawns", "code": "public void addNewSpawnMap(SpawnMap spawnMap){\n  if (templates == null) {\n    templates=new ArrayList<SpawnMap>();\n  }\n  templates.add(spawnMap);\n}\n"}
{"nl": "Registers a listener for a particular condition with a given priority for the condition listener", "code": "public void registerListener(Condition condition,int cPriority,EventListener listener){\n  getListenerForCondition(condition,cPriority).registerListener(listener);\n}\n"}
{"nl": "Convert this Ciptext to a ByteBuffer", "code": "public ByteBuffer toByteBuffer(){\n  ByteBuffer buff=ByteBuffer.allocate(totalsize).put(prefix);\n  for (int i=0; i < content.size(); ++i)   buff.put(content.get(i));\n  return buff;\n}\n"}
{"nl": "Stop using GPS listener Calling this function will stop using GPS in your app", "code": "public void stopUsingGPS(){\n  if (locationManager != null) {\n    locationManager.removeUpdates(LocationTracker.this);\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set useColors=\");\n  boolean useColors=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  ClusterViewer viewer=getViewer();\n  viewer.setUseColors(useColors);\n}\n"}
{"nl": "Return an extended response with additional fields", "code": "protected GroupsIsMemberQueryWithUserIdsExtended extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Set the subtitles of the steps", "code": "public Builder stepsSubtitles(String[] stepsSubtitles){\n  this.stepsSubtitles=stepsSubtitles;\n  return this;\n}\n"}
{"nl": "Paint method for the animation", "code": "@Override public void onPaint(ViewTransform transform,Graphics2D g){\n  int alpha=getPulsatingAlpha(getProgress());\n  Color color=new Color(mTextColor.getRed(),mTextColor.getGreen(),mTextColor.getBlue(),alpha);\n  g.setColor(color);\n  g.drawString(mText,mCanvasWidth - mTextWidth,mTextHeight);\n}\n"}
{"nl": "Calculate the gap rectangle between two rectangles", "code": "private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){\n  if (a.intersects(b)) {\n    gap.width=0;\n    return false;\n  }\n  int ax1=a.x;\n  int ax2=a.x + a.width;\n  int ay1=a.y;\n  int ay2=a.y + a.height;\n  int bx1=b.x;\n  int bx2=b.x + b.width;\n  int by1=b.y;\n  int by2=b.y + b.height;\n  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);\n  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);\n  if (xOverlap <= 0 && yOverlap <= 0) {\n    gap.width=0;\n    return false;\n  }\n  if (xOverlap > 0) {\n    gap.x=Math.max(ax1,bx1);\n    gap.y=(ay1 > by1) ? by2 : ay2;\n    gap.width=xOverlap;\n    gap.height=-yOverlap;\n  }\n  if (yOverlap > 0) {\n    gap.x=(ax1 > bx1) ? bx2 : ax2;\n    gap.y=Math.max(ay1,by1);\n    gap.width=-xOverlap;\n    gap.height=yOverlap;\n  }\n  return true;\n}\n"}
{"nl": "Build bezier view with given width and height", "code": "void build(int bezierWidth,int bezierHeight){\n  this.bezierWidth=bezierWidth;\n  this.bezierHeight=bezierHeight;\n}\n"}
{"nl": "When connected, subscribe to the necessary channels to get properly notified", "code": "private void onConnect(){\n  connectionState=ConnectionState.Connected;\n  checkForUpdatedFlight=true;\n  subscribe(String.format(trafficAlertChannel,flightId));\n  subscribe(String.format(situationalAwarenessChannel,flightId));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public OrdersGetByIdQuery(VkApiClient client,UserActor actor){\n  super(client,\"orders.getById\",Utils.buildParametrizedType(List.class,Order.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Returns true if the given analysis scope is adequate for single-file analysis", "code": "private static boolean isSingleFileScope(EnumSet<Scope> scopes){\n  if (scopes.size() != 1) {\n    return false;\n  }\n  final Scope scope=scopes.iterator().next();\n  return scope == Scope.JAVA_FILE || scope == Scope.RESOURCE_FILE || scope == Scope.MANIFEST || scope == Scope.PROGUARD_FILE || scope == Scope.OTHER;\n}\n"}
{"nl": "Set ad platform", "code": "public AdsGetTargetingStatsQuery adPlatform(String value){\n  return unsafeParam(\"ad_platform\",value);\n}\n"}
{"nl": "Convert a CreateVMPanel to specific hypervizor model", "code": "void createVMPanel_Convert_To(JTabbedPane jTabbedPane_name,final String name){\n  JTabbedPane j=new JTabbedPane(SwingConstants.TOP);\n  j=jTabbedPane_name;\n  if (name.equalsIgnoreCase(\"view\")) {\n    VDICalculator.functionsobj.jPanelComponentPropertyChange(j,JComboBox.class,\"vmvramcombo\",true,null,0);\n    final String[] s={\"Linked\",\"Full\"};\n    VDICalculator.functionsobj.jPanelComponentPropertyChange(j,JComboBox.class,\"desktoppooltypecombo\",true,s,0);\n  }\n else   if (name.equalsIgnoreCase(\"xen\")) {\n    VDICalculator.functionsobj.jPanelComponentPropertyChange(j,JComboBox.class,\"vmvramcombo\",false,null,0);\n    final String[] s={\"Pooled\",\"Assigned\"};\n    VDICalculator.functionsobj.jPanelComponentPropertyChange(j,JComboBox.class,\"desktoppooltypecombo\",true,s,0);\n  }\n}\n"}
{"nl": "Adds or renews a cache item pair", "code": "@Override public void put(K key,V value){\n  Item cur=map.get(key);\n  if (cur != null) {\n    cur.value=value;\n    moveToHead(cur);\n    return;\n  }\n  if (map.size() >= maxSize && maxSize != 0) {\n    cur=endItem.previous;\n    map.remove(cur.key);\n    removeItem(cur);\n  }\n  Item item=new Item(key,value);\n  insertHead(item);\n  map.put(key,item);\n}\n"}
{"nl": "create an RMA6 file from a pair of BLAST files", "code": "public static void createRMA6FileFromBLASTPair(String creator,String blastFile1,String blastFile2,BlastFileFormat format,String queryFile1,String queryFile2,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {\n  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,format,doc.getBlastMode(),new String[]{blastFile1,blastFile2},new String[]{queryFile1,queryFile2},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);\n  rma6Creator.parseFiles(progressListener);\n}\n"}
{"nl": "Removes all illegal file characters <tt>/\\:*?\"<>|</tt>", "code": "private String removeIllegalFileCharacters(String string){\n  return string.replaceAll(\"/|\\\\\\\\|:|\\\\*|\\\\?|\\\"|<|>|\\\\||\\\\s\",\"\");\n}\n"}
{"nl": "Creates the channel selection object", "code": "private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){\n  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());\n  FilterFactory ff=CommonFactoryFinder.getFilterFactory();\n  Map<String,Expression> options=contrastEnhancement.getOptions();\n  options.put(\"algorithm\",ff.literal(\"StretchToMinimumMaximum\"));\n  options.put(\"minValue\",ff.literal(\"1\"));\n  options.put(\"maxValue\",ff.literal(\"5\"));\n  SelectedChannelType channelType=styleFactory.createSelectedChannelType(\"channel name\",contrastEnhancement);\n  SelectedChannelType[] channels=new SelectedChannelType[3];\n  channels[0]=channelType;\n  channels[1]=channelType;\n  channels[2]=channelType;\n  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);\n  return channelSelection;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsEditManagerQuery(VkApiClient client,UserActor actor,int groupId,int userId){\n  super(client,\"groups.editManager\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public boolean equals(Object obj){\n  if (obj == null)   return false;\n  if (this == obj)   return true;\n  if (getClass() != obj.getClass())   return false;\n  CompactByteArray other=(CompactByteArray)obj;\n  for (int i=0; i < 65536; i++) {\n    if (elementAt((char)i) != other.elementAt((char)i))     return false;\n  }\n  return true;\n}\n"}
{"nl": "is the set file ok to read?", "code": "public void checkFileOkToRead() throws IOException {\n  if (fileType == Type.MEGAN_SERVER_FILE)   return;\n  File file=new File(fileName);\n  if (!file.canRead())   throw new IOException(\"File not readable: \" + fileName);\nswitch (fileType) {\ncase RMA1_FILE:\n{\n      throw new IOException(\"RMA version 1 not supported: \" + fileName);\n    }\ncase RMA2_FILE:\n{\n    int version=RMA2File.getRMAVersion(file);\n    if (version != 2)     throw new IOException(\"RMA version (\" + version + \") not supported: \"+ fileName);\n    if (!file.canWrite())     setReadOnly(true);\n    return;\n  }\ncase RMA3_FILE:\ncase RMA6_FILE:\ncase DAA_FILE:\ncase MEGAN_SUMMARY_FILE:\nif (!file.canWrite()) setReadOnly(true);\nreturn;\ndefault :\nthrow new IOException(\"File has unknown type: \" + fileName);\n}\n}\n"}
{"nl": "Save activity report for unit", "code": "@RequestMapping(method=RequestMethod.POST,value=\"{clientVersion}/orgUnits/{id}/activities\") @ResponseBody public String saveActivityReport(@PathVariable int id,@RequestBody ActivityValue activityValue) throws NotAllowedException {\n  activityReportingService.saveActivityReport(getUnit(id),activityValue,0);\n  return ACTIVITY_REPORT_UPLOADED;\n}\n"}
{"nl": "Called when CM_EQUIP_ITEM packet arrives with action 1", "code": "public Item unEquipItem(int itemUniqueId,long slot){\n  if (owner.getInventory().isFull()) {\n    return null;\n  }\nsynchronized (equipment) {\n    Item itemToUnequip=null;\n    for (    Item item : equipment.values()) {\n      if (item.getObjectId() == itemUniqueId) {\n        itemToUnequip=item;\n        break;\n      }\n    }\n    if (itemToUnequip == null || !itemToUnequip.isEquipped()) {\n      return null;\n    }\n    if (itemToUnequip.getEquipmentSlot() == ItemSlot.MAIN_HAND.getSlotIdMask()) {\n      Item ohWeapon=equipment.get(ItemSlot.SUB_HAND.getSlotIdMask());\n      if (ohWeapon != null && ohWeapon.getItemTemplate().isWeapon()) {\n        if (owner.getInventory().getFreeSlots() < 2) {\n          return null;\n        }\n        unEquip(ItemSlot.SUB_HAND.getSlotIdMask());\n      }\n    }\n    if (itemToUnequip.getItemTemplate().isArmor() && itemToUnequip.getItemTemplate().getCategory() == ItemCategory.SHARD) {\n      owner.unsetState(CreatureState.POWERSHARD);\n      PacketSendUtility.sendPacket(owner,new SM_EMOTION(owner,EmotionType.POWERSHARD_OFF,0,0));\n    }\n    if (!StigmaService.notifyUnequipAction(owner,itemToUnequip)) {\n      return null;\n    }\n    unEquip(itemToUnequip.getEquipmentSlot());\n    return itemToUnequip;\n  }\n}\n"}
{"nl": "Remove a previously added delegate", "code": "public X509KeyManager removeDelegate(String alias){\n  return delegates.remove(alias);\n}\n"}
{"nl": "A resource has been deleted", "code": "public void resourceCreated(ISVNRemoteFolder parent,String resourceName){\n  Iterator it=listeners.iterator();\n  while (it.hasNext()) {\n    IRepositoryListener listener=(IRepositoryListener)it.next();\n    listener.remoteResourceCreated(parent,resourceName);\n  }\n}\n"}
{"nl": "Load the platformJARs and initialize any configured system properties", "code": "public static void loadPlatform() throws ConfigurationException, IOException {\n  SystemConfig sysConfig=SystemConfig.getInstance();\n  Properties addSysProps=sysConfig.getSystemProperties();\n  URL[] platformJARs=sysConfig.getPlatformJars();\n  if (platformJARs.length == 0)   throw new RuntimeException(\"No platformJARs have been defined\");\n  CommonClassLoader commonCL=CommonClassLoader.getInstance();\n  commonCL.addCommonJARs(platformJARs);\n  addSysProps=sysConfig.getSystemProperties();\n  if (logger.isLoggable(Level.FINE)) {\n    StringBuilder buff=new StringBuilder();\n    for (Enumeration<?> en=addSysProps.propertyNames(); en.hasMoreElements(); ) {\n      String name=(String)en.nextElement();\n      String value=addSysProps.getProperty(name);\n      buff.append(\"    \").append(name).append(\"=\").append(value);\n      buff.append(\"\\n\");\n    }\n    logger.fine(\"Configured System Properties {\\n\" + buff.toString() + \"}\");\n  }\n  Properties sysProps=System.getProperties();\n  sysProps.putAll(addSysProps);\n  System.setProperties(sysProps);\n  logger.finest(\"Full list of System Properties {\\n\" + System.getProperties() + \"}\");\n}\n"}
{"nl": "Utility method that check for valid resource", "code": "private static boolean ensureCurrent(LeasedResource resource){\n  return resource.getExpiration() > SystemTime.timeMillis();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetQueryWithExtended(VkApiClient client,UserActor actor){\n  super(client,\"photos.get\",GetExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  extended(true);\n}\n"}
{"nl": "upload file to storage server (by file name)", "code": "public String upload_file1(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  String parts[]=this.upload_file(local_filename,file_ext_name,meta_list);\n  if (parts != null) {\n    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];\n  }\n else {\n    return null;\n  }\n}\n"}
{"nl": "Connect without reconnect if connected", "code": "public void connect(){\n  connect(null);\n}\n"}
{"nl": "Example on how to login with Google by asking a token from the user", "code": "public static void main(String[] args){\n  OkHttpClient http=new OkHttpClient();\n  try {\n    GoogleUserCredentialProvider provider=new GoogleUserCredentialProvider(http);\n    System.out.println(\"Please go to \" + provider.LOGIN_URL);\n    System.out.println(\"Enter authorisation code:\");\n    Scanner sc=new Scanner(System.in);\n    String access=sc.nextLine();\n    provider.login(access);\n    System.out.println(\"Refresh token:\" + provider.getRefreshToken());\n  }\n catch (  LoginFailedException|RemoteServerException e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "verifies that two vectors are equals", "code": "protected void checkArray(String msg,Fraction[] m,Fraction[] n){\n  if (m.length != n.length) {\n    Assert.fail(\"vectors have different lengths\");\n  }\n  for (int i=0; i < m.length; i++) {\n    Assert.assertEquals(msg + \" \" + i+ \" elements differ\",m[i],n[i]);\n  }\n}\n"}
{"nl": "Initializes this event", "code": "private void init(String scope,String category,String name){\n  if (scope == null) {\n    throw new IllegalArgumentException(\"Scope cannot be null\");\n  }\n  if (category == null) {\n    throw new IllegalArgumentException(\"Cagegory cannot be null\");\n  }\n  if (name == null) {\n    throw new IllegalArgumentException(\"Name cannot be null\");\n  }\n  this.scope=scope;\n  this.category=category;\n  this.name=name;\n  this.ts=System.currentTimeMillis();\n}\n"}
{"nl": "Convert a size in dp to a size in pixels", "code": "public static int convertDPItoPixels(Context context,int dpi){\n  final float scale=context.getResources().getDisplayMetrics().density;\n  return (int)(dpi * scale + 0.5f);\n}\n"}
{"nl": "Creates a storable headphone fence which will be valid (during around 5seconds) when headphones are plugged in to the device", "code": "public static StorableHeadphoneFence pluggingIn(){\n  return new StorableHeadphoneFence(PLUGGING_IN);\n}\n"}
{"nl": "Set extended", "code": "public VideoSearchQuery extended(Boolean value){\n  return unsafeParam(\"extended\",value);\n}\n"}
{"nl": "Are there any logged errors during the render? (warnings are ignored)", "code": "public boolean hasErrors(){\n  return myHaveExceptions || myMessages != null || myClassesWithIncorrectFormat != null || myBrokenClasses != null || myMissingClasses != null || myMissingSize || myMissingFragments != null;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ClassificationManager.get(getViewer().getClassName(),false).getId2Rank().size() > 0;\n}\n"}
{"nl": "Short for assertEquals", "code": "public void ae(String str1,String str2){\n  assertEquals(str1,str2);\n}\n"}
{"nl": "Put a ViewModel into the cache", "code": "public void putViewModel(int key,MvvmViewModel cacheViewModel,Context context){\n  getFragment(context).put(key,cacheViewModel);\n}\n"}
{"nl": "Checks whether the given access path matches the given definition", "code": "private boolean accessPathMatches(AccessPath sourceAccessPath,AccessPathTuple apt){\n  if (apt.getFields() == null || apt.getFields().length == 0 || sourceAccessPath == null)   return true;\n  for (int i=0; i < apt.getFields().length; i++) {\n    if (i >= sourceAccessPath.getFieldCount())     return sourceAccessPath.getTaintSubFields();\n    if (!sourceAccessPath.getFields()[i].getName().equals(apt.getFields()[i]))     return false;\n  }\n  return true;\n}\n"}
{"nl": "Fill an array with the values of a minimum 4-sample Blackman-Harris window function", "code": "private void blackmanHarris4sMin(int size){\n  int start=(windowFunction.length - size) / 2;\n  int stop=(windowFunction.length + size) / 2;\n  double scale=1.0 / (double)size / 0.36;\n  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));\n}\n"}
{"nl": "Returns <code>true</code> if there were errors while reading tokens", "code": "public boolean hasErrors(){\n  return errorDescription != null;\n}\n"}
{"nl": "construct icon", "code": "MyImageIcon(String label){\n  final BufferedImage image=new BufferedImage(16,16,BufferedImage.TYPE_INT_ARGB);\n  Graphics2D g=image.createGraphics();\n  g.setColor((new JButton()).getBackground());\n  g.fillRect(0,0,16,16);\n  g.setFont(new Font(\"Arial\",Font.PLAIN,15));\n  g.setColor(Color.BLACK);\n  g.drawString(label.substring(0,1).toUpperCase(),1,13);\n  g.dispose();\n  setImage(image);\n}\n"}
{"nl": "Check if token is null", "code": "public static void sendFCMTokenToServer(Context context,boolean sent){\n  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());\n  pref.edit().putBoolean(SENT_TOKEN_TO_SERVER,sent).apply();\n}\n"}
{"nl": "Below method will be used to show statistic log as table", "code": "public void logStatisticsAsTableExecutor(){\n}\n"}
{"nl": "Initialize an AirMapSpecialUseProperties from JSON", "code": "public AirMapSpecialUseProperties(JSONObject propertiesJson){\n  constructFromJson(propertiesJson);\n}\n"}
{"nl": "Save the config", "code": "public void add(PushLog log){\n  configPushLogDao.save(log);\n  if (!configPushLogDao.bindApp(log)) {\n    Logs.error(\"failed to bind app of log({})\",log);\n  }\n}\n"}
{"nl": "show deny page to end-user <br> if the request is AJAX, then response json back to front", "code": "final public void deny(){\n  deny(null,null);\n}\n"}
{"nl": "A method to download json data from url", "code": "private String downloadUrl(String strUrl) throws IOException {\n  String data=\"\";\n  InputStream iStream=null;\n  HttpURLConnection urlConnection=null;\n  try {\n    URL url=new URL(strUrl);\n    urlConnection=(HttpURLConnection)url.openConnection();\n    urlConnection.connect();\n    iStream=urlConnection.getInputStream();\n    BufferedReader br=new BufferedReader(new InputStreamReader(iStream));\n    StringBuffer sb=new StringBuffer();\n    String line=\"\";\n    while ((line=br.readLine()) != null) {\n      sb.append(line);\n    }\n    data=sb.toString();\n    br.close();\n  }\n catch (  Exception e) {\n    Log.d(\"Exc. while down url\",e.toString());\n  }\n finally {\n    iStream.close();\n    urlConnection.disconnect();\n  }\n  return data;\n}\n"}
{"nl": "Checks whether the given method or one of its transitive callees has side-effects or calls a sink method", "code": "private boolean hasSideEffectsOrReadsThis(SootMethod method){\n  return hasSideEffectsOrReadsThis(method,new HashSet<SootMethod>());\n}\n"}
{"nl": "function  for adding bitmap to cache", "code": "public void addBitmapToCache(final String data,final BitmapDrawable value,final boolean addBitmapToDisk){\n  if ((data == null) || (value == null)) {\n    return;\n  }\n  if (getBitmapFromMemCache(data) == null) {\n    mMemCache.put(data,value);\n  }\n  if (!addBitmapToDisk) {\n    return;\n  }\nsynchronized (mDiskCacheLock) {\n    if (mDiskLruCache != null && mDiskLruCache.get(data) == null) {\n      mDiskLruCache.put(data,value.getBitmap());\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public LikesGetListQuery(VkApiClient client,UserActor actor,LikesType type){\n  super(client,\"likes.getList\",GetListResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n}\n"}
{"nl": "Return a NullProgressMonitor if monitor is null or monitor itself otherwise", "code": "public static IProgressMonitor monitorFor(IProgressMonitor monitor){\n  if (monitor == null)   return new NullProgressMonitor();\n  return monitor;\n}\n"}
{"nl": "not implemented", "code": "public void remove(){\n}\n"}
{"nl": "performs all kinds of initialization calculations, such as min-max and value count and sum", "code": "protected void init(){\n  checkLegal();\n  calcYValueCount();\n  calcMinMax(0,mYValCount);\n  calcXValMaximumLength();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesIsMessagesFromGroupAllowedQuery(VkApiClient client,Actor actor,int groupId,int userId){\n  super(client,\"messages.isMessagesFromGroupAllowed\",IsMessagesFromGroupAllowedResponse.class);\n  accessToken(actor.getAccessToken());\n  groupId(groupId);\n  userId(userId);\n}\n"}
{"nl": "limits the maximum scale and X translation of the given matrix", "code": "public void limitTransAndScale(Matrix matrix,RectF content){\n  matrix.getValues(matrixBuffer);\n  float curTransX=matrixBuffer[Matrix.MTRANS_X];\n  float curScaleX=matrixBuffer[Matrix.MSCALE_X];\n  float curTransY=matrixBuffer[Matrix.MTRANS_Y];\n  float curScaleY=matrixBuffer[Matrix.MSCALE_Y];\n  mScaleX=Math.min(Math.max(mMinScaleX,curScaleX),mMaxScaleX);\n  mScaleY=Math.min(Math.max(mMinScaleY,curScaleY),mMaxScaleY);\n  float width=0f;\n  float height=0f;\n  if (content != null) {\n    width=content.width();\n    height=content.height();\n  }\n  float maxTransX=-width * (mScaleX - 1f);\n  mTransX=Math.min(Math.max(curTransX,maxTransX - mTransOffsetX),mTransOffsetX);\n  float maxTransY=height * (mScaleY - 1f);\n  mTransY=Math.max(Math.min(curTransY,maxTransY + mTransOffsetY),-mTransOffsetY);\n  matrixBuffer[Matrix.MTRANS_X]=mTransX;\n  matrixBuffer[Matrix.MSCALE_X]=mScaleX;\n  matrixBuffer[Matrix.MTRANS_Y]=mTransY;\n  matrixBuffer[Matrix.MSCALE_Y]=mScaleY;\n  matrix.setValues(matrixBuffer);\n}\n"}
{"nl": "Set privacy comment", "code": "public NotesEditQuery privacyComment(List<String> value){\n  return unsafeParam(\"privacy_comment\",value);\n}\n"}
{"nl": "Returns true if field rootMessageId is set (has been assigned a value) and false otherwise", "code": "public boolean isSetRootMessageId(){\n  return this.rootMessageId != null;\n}\n"}
{"nl": "Returns if this is a facade", "code": "public boolean isFacade(){\n  return _facade;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetAlbumsByVideoQuery(VkApiClient client,UserActor actor,int ownerId,int videoId){\n  super(client,\"video.getAlbumsByVideo\",Utils.buildParametrizedType(List.class,Integer.class));\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  videoId(videoId);\n}\n"}
{"nl": "Check if displaying folders view", "code": "private boolean isDisplayingFolderView(){\n  return (folderMode && (recyclerView.getAdapter() == null || recyclerView.getAdapter() instanceof FolderPickerAdapter));\n}\n"}
{"nl": "Set the text color of the left circles", "code": "public Builder stepNumberTextColor(int stepNumberTextColor){\n  this.stepNumberTextColor=stepNumberTextColor;\n  return this;\n}\n"}
{"nl": "Service initialization", "code": "@Override public void onCreate(){\n  super.onCreate();\n  Log_OC.d(TAG,\"Creating service\");\n  mNotificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);\n  HandlerThread thread=new HandlerThread(\"FileUploaderThread\",Process.THREAD_PRIORITY_BACKGROUND);\n  thread.start();\n  mServiceLooper=thread.getLooper();\n  mServiceHandler=new ServiceHandler(mServiceLooper,this);\n  mBinder=new FileUploaderBinder();\n  mUploadsStorageManager=new UploadsStorageManager(getContentResolver());\n  int failedCounter=mUploadsStorageManager.failInProgressUploads(UploadResult.SERVICE_INTERRUPTED);\n  if (failedCounter > 0) {\n    resurrection();\n  }\n  AccountManager am=AccountManager.get(getApplicationContext());\n  am.addOnAccountsUpdatedListener(this,null,false);\n}\n"}
{"nl": "Reads one packet from given ByteBuffer", "code": "public AionClientPacket handle(ByteBuffer data,AionConnection client){\n  State state=client.getState();\n  int id=data.getShort() & 0xffff;\n  data.position(data.position() + 3);\n  return getPacket(state,id,data,client);\n}\n"}
{"nl": "Installs a proxy selector for the given protocoll on the ProtocolDispatchSelector", "code": "private void installSelectorForProtocol(Dict proxySettings,ProtocolDispatchSelector ps,String protocol){\n  String prefix=protocol.trim();\n  if (isActive(proxySettings.get(prefix + \"Enable\"))) {\n    String proxyHost=(String)proxySettings.get(prefix + \"Proxy\");\n    int proxyPort=(Integer)proxySettings.get(prefix + \"Port\");\n    FixedProxySelector fp=new FixedProxySelector(proxyHost,proxyPort);\n    ps.setSelector(protocol.toLowerCase(),fp);\n    Logger.log(getClass(),LogLevel.TRACE,\"OSX uses for {0} the proxy {1}:{2}\",protocol,proxyHost,proxyPort);\n  }\n}\n"}
{"nl": "Store the highest TxID encountered so far so that we can enforce the monotonically non-decreasing property This is best effort as this enforcement is only done", "code": "synchronized void store(long maxTxId) throws IOException {\n  if (enabled && currentMax < maxTxId) {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"Setting maxTxId to \" + maxTxId);\n    }\n    String txidStr=Long.toString(maxTxId);\n    try {\n      zkc.get().setData(path,txidStr.getBytes(\"UTF-8\"),-1);\n      currentMax=maxTxId;\n    }\n catch (    Exception e) {\n      LOG.error(\"Error writing new MaxTxId value {}\",maxTxId,e);\n    }\n  }\n}\n"}
{"nl": "How much of the variance is NOT explained by the regression", "code": "public static double ssError(double[] predictedValues,double[] targetAttribute){\n  double ret=0;\n  for (int i=0; i < predictedValues.length; i++) {\n    ret+=Math.pow(targetAttribute[i] - predictedValues[i],2);\n  }\n  return ret;\n}\n"}
{"nl": "Initialize Color Overlay Subfilter", "code": "public ColorOverlaySubfilter(int depth,float red,float green,float blue){\n  this.colorOverlayDepth=depth;\n  this.colorOverlayRed=red;\n  this.colorOverlayBlue=blue;\n  this.colorOverlayGreen=green;\n}\n"}
{"nl": "Gets if this mapping has specific groups or it is representing all groups", "code": "public boolean hasSpecificGroups(){\n  return _specificGroups != null;\n}\n"}
{"nl": "Allows server to reinitialize Weathers for all regions TODO: not thread safe if run by admin", "code": "public synchronized void resetWeather(){\n  Set<WeatherKey> loadedWeathers=new HashSet<WeatherKey>(worldZoneWeathers.keySet());\n  for (  WeatherKey key : loadedWeathers) {\n    WeatherEntry[] oldEntries=worldZoneWeathers.get(key);\n    for (int i=0; i < oldEntries.length; i++) {\n      oldEntries[i]=new WeatherEntry(oldEntries[i].getZoneId(),0);\n    }\n    onWeatherChange(key.getMapId(),null);\n  }\n}\n"}
{"nl": "add service cache", "code": "public static boolean isInTinkerPatchServiceProcess(Context context){\n  String process=getProcessName(context);\n  String service=TinkerServiceInternals.getTinkerPatchServiceName(context);\n  if (service == null || service.length() == 0) {\n    return false;\n  }\n  return process.equals(service);\n}\n"}
{"nl": "constructs a new array using the given number of bits as segmentation key (in the range 10 to 30)", "code": "public XIntArray(byte bits){\n  segments=new int[0][];\n  SEGMENT_BITS=bits;\n  SEGMENT_SIZE=(1 << (SEGMENT_BITS));\n  SEGMENT_MASK=SEGMENT_SIZE - 1;\n}\n"}
{"nl": "Contructor to use the default Locale", "code": "public PlayerLocale(){\n  GetPlayerMessageOuterClass.GetPlayerMessage.PlayerLocale.Builder builder=GetPlayerMessageOuterClass.GetPlayerMessage.PlayerLocale.newBuilder();\n  builder.setCountry(Locale.getDefault().getCountry()).setLanguage(Locale.getDefault().getLanguage());\n  playerLocale=builder.build();\n}\n"}
{"nl": "updates fonts used in tree", "code": "public void updateFonts(){\n  final Set<String> openFiles=getCurrentlyOpenRemoteFiles();\n  for (int i=0; i < fileTree.getRowCount(); i++) {\n    DefaultMutableTreeNode v=(DefaultMutableTreeNode)fileTree.getPathForRow(i).getLastPathComponent();\n    String file=leaf2file.get(v);\n    if (file != null) {\n      if (openFiles.contains(service.getServerAndFileName(file))) {\n        int pos=file.lastIndexOf(File.separator);\n        if (pos == -1)         v.setUserObject(file);\n else         v.setUserObject(file.substring(pos + 1));\n      }\n else {\n        String user=v.getUserObject().toString();\n        if (!user.startsWith(\"<html>\"))         v.setUserObject(\"<html><b>\" + user + \"</b></html>\");\n      }\n    }\n  }\n}\n"}
{"nl": "Stop the thread's execution by interrupting it without marking the flag as not alive", "code": "public void stopExecution(){\n  interrupt();\n}\n"}
{"nl": "Utility function to draw a component's background", "code": "private void drawComponentBackground(@NotNull Graphics2D gc,@NotNull NlComponent component){\n  if (component.viewInfo != null) {\n    int x=getSwingX(myScreenView,component.x);\n    int y=getSwingY(myScreenView,component.y);\n    int w=getSwingDimension(myScreenView,component.w);\n    int h=getSwingDimension(myScreenView,component.h);\n    Graphics2D g=(Graphics2D)gc.create();\n    if (!component.isRoot()) {\n      g.setPaint(new LinearGradientPaint((float)x,(float)y,(float)(x + BACKGROUND_LINE_SPACE_PX),(float)(y + BACKGROUND_LINE_SPACE_PX),COMPONENT_BACKGROUND_GRADIENT_FRACTIONS,COMPONENT_BACKGROUND_GRADIENT_COLORS,MultipleGradientPaint.CycleMethod.REFLECT));\n      g.fillRect(x,y,w,h);\n    }\n    g.setColor(BLUEPRINT_FG_COLOR);\n    Stroke prevStroke=g.getStroke();\n    g.setStroke(BLUEPRINT_COMPONENT_STROKE);\n    g.drawRect(x,y,w,h);\n    g.setStroke(prevStroke);\n    g.dispose();\n  }\n}\n"}
{"nl": "Reset record reader iterator", "code": "@Override public void reset(){\n  dataIter=delimitedData.iterator();\n}\n"}
{"nl": "apply the UPGMA algorithm", "code": "public static void apply(Taxa taxa,Distances distances,PhyloTreeView treeView){\n  if (instance == null)   instance=new UPGMA();\n  instance.computeUPMATree(taxa,distances,treeView.getPhyloTree());\n  instance.embedTree(treeView);\n}\n"}
{"nl": "write sudo user information to serverinfo file", "code": "private void writeSudoUserinformationToFile(){\n  PrintWriter pw;\n  try {\n    pw=new PrintWriter(Settings.sServerInfo);\n    pw.println(EncryptionManager.encrypt64bits(sSudoID));\n    pw.println(EncryptionManager.encrypt64bits(sSudoPassword));\n    pw.println(EncryptionManager.encrypt64bits(sEmailAddress));\n    pw.println(EncryptionManager.encrypt64bits(Boolean.toString(isMakeSudoId)));\n    pw.close();\n  }\n catch (  FileNotFoundException e) {\n    System.out.println(\"serverinfo.jrc do not exist\");\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Set access key", "code": "public PhotosGetCommentsQueryWithExtended accessKey(String value){\n  return unsafeParam(\"access_key\",value);\n}\n"}
{"nl": "Set fields", "code": "public WidgetsGetCommentsQuery fields(EnumParam... value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"set showAxes=\" + (!isSelected()) + \";\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsIsMemberQueryWithUserIds(VkApiClient client,String groupId,List<Integer> userIds){\n  super(client,\"groups.isMember\",Utils.buildParametrizedType(List.class,MemberStatus.class));\n  groupId(groupId);\n  userIds(userIds);\n}\n"}
{"nl": "load an existing file", "code": "public void load(String fileName,String mode) throws IOException {\n  this.fileName=fileName;\n  this.readerWriter=new InputOutputReaderWriter(fileName,mode);\n  headerSectionRMA6.read(readerWriter);\n  readerWriter.seek(FooterSectionRMA6.readStartFooterSection(readerWriter));\n  footerSectionRMA6.read(readerWriter);\n}\n"}
{"nl": "Convert a string to a Date object", "code": "public static Long parseDate(Object value){\n  if (value == null) {\n    return null;\n  }\n  String str=(String)value;\n  try {\n    return Instant.parse(str).toEpochMilli();\n  }\n catch (  DateTimeParseException e) {\n    if (str.length() == 0) {\n      return null;\n    }\n    SimpleDateFormat sdf=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss Z\");\n    try {\n      return sdf.parse(str).getTime();\n    }\n catch (    ParseException e1) {\n      throw new IllegalArgumentException(\"Invalid datetime '\" + str + \"'; \"+ e1.getMessage());\n    }\n  }\n}\n"}
{"nl": "This method will add a new announcement to the list", "code": "public void addAnnouncementToList(Timestamp unixTime,String announcement){\n  this.announcementList.put(unixTime,announcement);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesGetByIdQuery(VkApiClient client,Actor actor,int... messageIds){\n  super(client,\"messages.getById\",GetByIdResponse.class);\n  accessToken(actor.getAccessToken());\n  messageIds(messageIds);\n}\n"}
{"nl": "signals all listener that we have removed a repository", "code": "public void repositoryRemoved(ISVNRepositoryLocation repository){\n  for (  ISVNListener listener : repositoryListeners) {\n    listener.repositoryRemoved(repository);\n  }\n}\n"}
{"nl": "Override default test, verifying that inverse cum is constant", "code": "@Override @Test public void testInverseCumulativeProbabilities(){\n  RealDistribution dist=getDistribution();\n  for (  double x : getCumulativeTestValues()) {\n    assertEquals(1,dist.inverseCumulativeProbability(x),0);\n  }\n}\n"}
{"nl": "Dumps this sample set to the given stream", "code": "public void dumpBinary(DataOutputStream os) throws IOException {\n  sampleInfo.dumpBinary(os);\n  os.writeInt(samples.length);\n  for (int i=0; i < samples.length; i++) {\n    samples[i].dumpBinary(os);\n  }\n}\n"}
{"nl": "Normalize a bitmap to specific size", "code": "public static Bitmap normalize(Context context,Uri selectedImage,int maxWidth,int maxHeight){\n  Bitmap bm;\n  bm=getImageResized(context,selectedImage,maxWidth,maxHeight);\n  bm=getImageRotatedByMetadata(context,bm,selectedImage);\n  return bm;\n}\n"}
{"nl": "Hide soft keyboard", "code": "public static void hideSoftKeyboard(Activity activity){\n  View view=activity.getWindow().peekDecorView();\n  if (view != null) {\n    InputMethodManager inputmanger=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);\n    inputmanger.hideSoftInputFromWindow(view.getWindowToken(),0);\n  }\n}\n"}
{"nl": "Converts a CSV-serialized representation of buffer to a new Buffer", "code": "static Buffer fromCSVBuffer(String s) throws IOException {\n  if (s.charAt(0) != '#') {\n    throw new IOException(\"Error deserializing buffer.\");\n  }\n  if (s.length() == 1) {\n    return new Buffer();\n  }\n  int blen=(s.length() - 1) / 2;\n  byte[] barr=new byte[blen];\n  for (int idx=0; idx < blen; idx++) {\n    char c1=s.charAt(2 * idx + 1);\n    char c2=s.charAt(2 * idx + 2);\n    barr[idx]=(byte)Integer.parseInt(\"\" + c1 + c2,16);\n  }\n  return new Buffer(barr);\n}\n"}
{"nl": "stop indicate", "code": "private boolean stopIndicate(){\n  return bleManager.stopIndicate(UUID_SERVICE,UUID_INDICATE);\n}\n"}
{"nl": "Add a Categorical column, with the specified state names", "code": "public Builder addColumnCategorical(String name,List<String> stateNames){\n  return addColumn(new CategoricalMetaData(name,stateNames));\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set useLCA=\" + (!isSelected()) + \" cName=\"+ cName+ \";\");\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosEditAlbumQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"photos.editAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n"}
{"nl": "Determines if current L&F is WindowsLookAndFeel", "code": "public static boolean isWindowsLookAndFeel(){\n  return UIUtils.isWindowsLookAndFeel();\n}\n"}
{"nl": "Show error view with a button when something goes wrong and prompting the user to try again", "code": "public void showError(Drawable errorImageDrawable,String errorTextContent,String errorButtonText,OnClickListener onClickListener){\n  switchState(ERROR,errorImageDrawable,errorTextContent,errorButtonText,onClickListener,Collections.<Integer>emptyList());\n}\n"}
{"nl": "Returns the unsigned value of a byte", "code": "public static int byteToUInt(byte b){\n  return b & 0xFF;\n}\n"}
{"nl": "Sends a dummy one way request to the server - to check if it's alive", "code": "public boolean sendKeepAlive(){\n  try {\n    if (!isConnected())     return false;\n    _requestPacket.set(LRMIRuntime.DUMMY_OBJECT_ID,0,new Object[]{},true,false,_dummyMethod,-1,OperationPriority.REGULAR,_serviceVersion);\n    _writer.writeRequest(_requestPacket);\n    return true;\n  }\n catch (  Throwable t) {\n    if (_logger.isLoggable(Level.FINE)) {\n      String exMessage=\"LRMI over NIO broken connection with ServerEndPoint: \" + getConnectionURL();\n      _logger.log(Level.FINE,exMessage,t);\n    }\n    return false;\n  }\n}\n"}
{"nl": "Returns the vector [x y]", "code": "@Deprecated public static float[] combine(float[] x,float[] y){\n  int len=0;\n  if (x != null)   len+=x.length;\n  if (y != null)   len+=y.length;\n  float[] z=null;\n  if (len > 0) {\n    z=new float[len];\n    int currentPos=0;\n    if (x != null) {\n      System.arraycopy(x,0,z,currentPos,x.length);\n      currentPos=x.length;\n    }\n    if (y != null)     System.arraycopy(y,0,z,currentPos,y.length);\n  }\n  return z;\n}\n"}
{"nl": "Appends a Logical Abort Record to indicate the logical operation has be aborted", "code": "@Override public void undo(Transaction tx){\n  LogSeqNum lsn=tx.recoveryMgr().logLogicalAbort(this.txNum,this.lsn);\n  VanillaDb.logMgr().flush(lsn);\n}\n"}
{"nl": "Hold a key for a certain duration", "code": "public void hold(int key,int duration) throws InterruptedException {\n  press(key);\n  if (duration >= 0) {\n    Thread.sleep(duration);\n  }\n  release(key);\n}\n"}
{"nl": "Gets dialog type (Light/Dark) from current theme", "code": "public static boolean isDarkTheme(Context context,boolean current){\n  return resolveBoolean(context,R.attr.themeDark,current);\n}\n"}
{"nl": "Traverse the expression root(preorder) and create a join index for given table if possible", "code": "public void createJoinIndex(ExpNode root){\n  if (root == null)   return;\n  Stack<ExpNode> stack=new Stack<ExpNode>();\n  stack.push(root);\n  while (!stack.isEmpty()) {\n    ExpNode curr=stack.pop();\n    boolean processChildren=curr.createJoinIndex(this);\n    if (!processChildren)     continue;\n    if (curr.getLeftChild() != null)     stack.push(curr.getLeftChild());\n    if (curr.getRightChild() != null)     stack.push(curr.getRightChild());\n  }\n}\n"}
{"nl": "Creates a <code>TransferTagValueImpl</code> object for the given parameters", "code": "public static TransferTagValueImpl createTransferTagValue(final TagWithAlarms tagWithAlarms){\n  Tag tag=tagWithAlarms.getTag();\n  TransferTagValueImpl tagValue=null;\n  if (tag != null) {\n    tagValue=new TransferTagValueImpl(tag.getId(),tag.getValue(),tag.getValueDescription(),(DataTagQualityImpl)tag.getDataTagQuality(),getTagMode(tag),tag.getTimestamp(),tag instanceof DataTag ? ((DataTag)tag).getDaqTimestamp() : null,tag.getCacheTimestamp(),tag.getDescription());\n    String dataType=isKnownClass(tag.getDataType()) ? getType(tag.getDataType()).getName() : tag.getDataType();\n    tagValue.setValueClassName(dataType);\n    addAlarmValues(tagValue,tagWithAlarms.getAlarms());\n    tagValue.setSimulated(tag.isSimulated());\n  }\n  return tagValue;\n}\n"}
{"nl": "close the array", "code": "@Override public void close(){\n  try {\n    raf.close();\n    System.err.println(\"Closing file: \" + file.getName());\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "Set sex", "code": "public UsersSearchQuery sex(UsersSearchSex value){\n  return unsafeParam(\"sex\",value);\n}\n"}
{"nl": "process package and fileName", "code": "private static void processPackage(String tbName,Packages pkg){\n  String classNamePrefix=StringUtil.parseHumpName(tbName,true,isHumpModelClass);\n  pkg.setDao(packagePrefix + (StringUtil.isEmpty(packagePrefix) || StringUtil.isEmpty(packageDao) ? \"\" : \".\") + packageDao);\n  pkg.setDaoName(classNamePrefix + daoSuffix);\n  pkg.setModel(packagePrefix + (StringUtil.isEmpty(packagePrefix) || StringUtil.isEmpty(packageModel) ? \"\" : \".\") + packageModel);\n  pkg.setModelName(classNamePrefix + modelSuffix);\n  pkg.setMapperXml(packagePrefix + (StringUtil.isEmpty(packagePrefix) || StringUtil.isEmpty(packageMapperXml) ? \"\" : \".\") + packageMapperXml);\n  pkg.setMapperXmlName(classNamePrefix + mapperXmlSuffix);\n  pkg.setModelNameLowerFirst(StringUtil.lowerFirst(pkg.getModelName()));\n}\n"}
{"nl": "Creates a new executor object for spawning worker threads", "code": "private CountingThreadPoolExecutor createExecutor(int numThreads){\n  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());\n}\n"}
{"nl": "Change space mode to primary", "code": "protected void moveToPrimary(){\n  beforeSpaceModeChange(SpaceMode.PRIMARY);\n  setSpaceMode(SpaceMode.PRIMARY);\n  afterSpaceModeChange(SpaceMode.PRIMARY);\n}\n"}
{"nl": "returns true, if split separates the given set of taxa", "code": "public boolean separates(BitSet H){\n  return A.intersects(H) && B.intersects(H);\n}\n"}
{"nl": "Test that \"add activity\" quick intention does show up and works", "code": "public void testAddActivity() throws Exception {\n  final VirtualFile file=myFixture.copyFileToProject(\"intentions/DummyActivity.java\",\"src/com/example/DummyActivity.java\");\n  myFixture.configureFromExistingVirtualFile(file);\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,ADD_ACTIVITY_TO_MANIFEST);\n  assertNotNull(action);\n  action.invoke(getProject(),myFixture.getEditor(),myFixture.getFile());\n  myFixture.checkResultByFile(\"AndroidManifest.xml\",\"intentions/DummyActivity_manifest_after.xml\",true);\n}\n"}
{"nl": "Get data from ring buffer Encode it to mp3 frames using lame encoder", "code": "private int processData(){\n  int bytes=ringBuffer.read(buffer,bufferSize);\n  Log.d(TAG,\"Read size: \" + bytes);\n  if (bytes > 0) {\n    short[] innerBuf=new short[bytes / 2];\n    ByteBuffer.wrap(buffer).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(innerBuf);\n    int encodedSize=SimpleLame.encode(innerBuf,innerBuf,bytes / 2,mp3Buffer);\n    if (encodedSize < 0) {\n      Log.e(TAG,\"Lame encoded size: \" + encodedSize);\n    }\n    try {\n      os.write(mp3Buffer,0,encodedSize);\n    }\n catch (    IOException e) {\n      Log.e(TAG,\"Unable to write to file\");\n    }\n    return bytes;\n  }\n  return 0;\n}\n"}
{"nl": "setup and display the import csv window", "code": "public ImportCSVWindow(JFrame parent){\n  super();\n  if (parent != null)   setLocationRelativeTo(parent);\n else   setLocation(300,300);\n  setSize(330,450);\n  setModal(true);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NotesAddQuery(VkApiClient client,UserActor actor,String title,String text){\n  super(client,\"notes.add\",Integer.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n  text(text);\n}\n"}
{"nl": "Set the connectivity background color when phone is connected", "code": "private void inflateConnectedBackground(){\n  if (mConnectedBackground != R.color.connected_color) {\n    connectivityView.setBackgroundColor(ColorUtil.getColorWrapper(mContext,mConnectedBackground));\n  }\n}\n"}
{"nl": "author  hhj TODO", "code": "public static void warnInfo(String msg){\n  warnInfo(\"zhibo\",msg);\n}\n"}
{"nl": "Accept the query executor", "code": "public void accept(IQueryExecutor executor,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {\n  executor.execute(this,space,txn,readModifier,max);\n}\n"}
{"nl": "Constructs a fixed size swap redo log file", "code": "public FixedSizeSwapRedoLogFile(FixedSizeSwapRedoLogFileConfig config){\n  this._memoryMaxPackets=config.getMemoryMaxPackets();\n  this._externalStorage=config.getRedoLogFileStorage();\n  this._fetchBatchSize=config.getFetchBatchSize();\n  if (_logger.isLoggable(Level.CONFIG)) {\n    _logger.config(\"FixedSizeSwapRedoLogFile created:\" + \"\\n\\tmemoryMaxPackets = \" + _memoryMaxPackets + \"\\n\\tfetchBatchSize = \"+ _fetchBatchSize);\n  }\n}\n"}
{"nl": "Clicks on button in dropdown on Siteadmin action bar", "code": "public void clickDropDownOption(SiteAdminButtons button){\n  webDriver.findElement(button.getLocator()).click();\n}\n"}
{"nl": "Resolves a git reference to the SHA-1 reference", "code": "public String revParse(String ref) throws RepoException {\n  return simpleCommand(\"rev-parse\",ref).getStdout().trim();\n}\n"}
{"nl": "Called by Spring after having created the service", "code": "@PostConstruct private void init(){\nsynchronized (timerSync) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"init() : Initialising heartbeat mechanism\");\n    }\n    this.lastHeartbeatReceived=System.currentTimeMillis();\n    this.lastHeartbeatEvent=new Heartbeat();\n    this.heartbeatTimer=new Timer();\n    this.heartbeatTimer.scheduleAtFixedRate(this,Heartbeat.getHeartbeatInterval(),Heartbeat.getHeartbeatInterval());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"init() : Heartbeat mechanism started.\");\n    }\n    jmsProxy.registerHeartbeatListener(this);\n  }\n}\n"}
{"nl": "Removed cached image file from disc cache (if image was cached in disc cache before)", "code": "public static boolean removeFromCache(String imageUri,DiscCacheAware discCache){\n  File image=discCache.get(imageUri);\n  return image.delete();\n}\n"}
{"nl": "Items ID", "code": "protected MarketGetByIdQueryWithExtended itemIds(String... value){\n  return unsafeParam(\"item_ids\",value);\n}\n"}
{"nl": "Is the test targeting a mock docker server or a real one?", "code": "protected boolean isMockTarget(){\n  return mockDockerHost != null;\n}\n"}
{"nl": "Filters chatmessages", "code": "public static String filterMessage(String message){\n  for (  String word : message.split(\" \")) {\n    if (isForbiddenWord(word)) {\n      message=message.replace(word,ENCODED_BAD_WORD);\n    }\n  }\n  return message;\n}\n"}
{"nl": "Return whether the list data has been loaded from the server", "code": "public boolean isReady(){\n  return this.record.isReady();\n}\n"}
{"nl": "Creates a circular list of nodes of the given size", "code": "static FloatList createList(int size){\n  FloatList prev=null;\n  FloatList first=null;\n  for (int i=0; i < size; i++) {\n    FloatList cur=new FloatList();\n    cur.prev=prev;\n    if (prev == null) {\n      first=cur;\n    }\n else {\n      prev.next=cur;\n    }\n    prev=cur;\n  }\n  first.prev=prev;\n  prev.next=first;\n  return first;\n}\n"}
{"nl": "Creates a new instance of SenseComparator", "code": "public SenseComparator(){\n}\n"}
{"nl": "/*    ", "code": "@deprecated public int codePointLength(CharSequence s){\n  return Character.codePointCount(s,0,s.length());\n}\n"}
{"nl": "call it when you want to reset all;", "code": "public void reset(){\n  resetStatus();\n}\n"}
{"nl": "Serve an Observable GoogleApiClient", "code": "public static Observable<GoogleApiClient> observable(Context context,Api api,Api.ApiOptions.HasOptions options){\n  return GoogleApiClientObservable.create(context.getApplicationContext(),new ApiWithOptions(api,options));\n}\n"}
{"nl": "seek is not supported", "code": "public boolean supportsSeek(){\n  return false;\n}\n"}
{"nl": "Remove macro with specified index from specified player", "code": "public static void removeMacro(Player player,int macroOrder){\n  if (player.getMacroList().removeMacro(macroOrder)) {\n    DAOManager.getDAO(PlayerMacrossesDAO.class).deleteMacro(player.getObjectId(),macroOrder);\n  }\n}\n"}
{"nl": "write data to writer", "code": "private void write(Writer w,boolean useOriginal) throws IOException {\n  if (useOriginal) {\n    originalData.disabledSamples.addAll(disabledSamples);\n    originalData.write(w,false);\n    originalData.disabledSamples.clear();\n  }\n else {\n    writeHeader(w);\n    for (    String classification : classification2class2counts.keySet()) {\n      Map<Integer,Integer[]> class2counts=classification2class2counts.get(classification);\n      classification=ClassificationType.getShortName(classification);\n      for (      Integer classId : class2counts.keySet()) {\n        Integer[] counts=class2counts.get(classId);\n        if (counts != null) {\n          w.write(classification + \"\\t\" + classId);\n          int last=Math.min(counts.length,getNumberOfSamples()) - 1;\n          while (last > 0 && (counts[last] == null || counts[last] == 0))           last--;\n          for (int i=0; i <= last; i++) {\n            if (i < counts.length)             w.write(\"\\t\" + (counts[i] != null ? counts[i] : 0));\n          }\n          w.write(\"\\n\");\n        }\n      }\n    }\n    w.write(\"END_OF_DATA_TABLE\\n\");\n  }\n}\n"}
{"nl": "This method checks all restrictions for changing announcements", "code": "private boolean canChangeAnnouncement(LegionMember legionMember,String announcement){\n  return legionMember.hasRights(LegionPermissionsMask.EDIT) && (announcement.isEmpty() || isValidAnnouncement(announcement));\n}\n"}
{"nl": "Hide progressbar when data loaded", "code": "private void hideLoading(){\n  progressBar.setVisibility(View.GONE);\n  recyclerView.setVisibility(View.VISIBLE);\n  emptyTextView.setVisibility(View.GONE);\n}\n"}
{"nl": "Matches: /items/[_id]/", "code": "public static Uri buildItemUri(long _id){\n  return BASE_URI.buildUpon().appendPath(\"items\").appendPath(Long.toString(_id)).build();\n}\n"}
{"nl": "draw texts in rows", "code": "private void drawTexts(String[] strings,Canvas canvas,float x,float y){\n  Paint.FontMetrics fontMetrics=textPaint.getFontMetrics();\n  float top=fontMetrics.top;\n  float bottom=fontMetrics.bottom;\n  int length=strings.length;\n  float total=(length - 1) * (-top + bottom) + (-fontMetrics.ascent + fontMetrics.descent);\n  float offset=total / 2 - bottom;\n  for (int i=0; i < length; i++) {\n    float yAxis=-(length - i - 1) * (-top + bottom) + offset;\n    canvas.drawText(strings[i],x,y + yAxis,textPaint);\n  }\n}\n"}
{"nl": "Create an object for the given class and initialize it from conf", "code": "@SuppressWarnings(\"unchecked\") public static <T>T newInstance(Class<T> theClass,Configuration conf){\n  T result;\n  try {\n    Constructor<T> meth=(Constructor<T>)CONSTRUCTOR_CACHE.get(theClass);\n    if (meth == null) {\n      meth=theClass.getDeclaredConstructor(EMPTY_ARRAY);\n      meth.setAccessible(true);\n      CONSTRUCTOR_CACHE.put(theClass,meth);\n    }\n    result=meth.newInstance();\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n  setConf(result,conf);\n  return result;\n}\n"}
{"nl": "Convert database query result to chart data", "code": "private Map<String,List<ChartObject>> convertResult(StatisticsDocumentHandler handler){\n  DecimalFormat formatter=new DecimalFormat(\"###.##\");\n  List<ChartObject> objects=handler.getResult();\n  if (objects.isEmpty()) {\n    return new HashMap<>();\n  }\n  Map<String,List<ChartObject>> result=new HashMap<>();\n  for (  ChartObject object : objects) {\n    Map<String,String> values=new HashMap<>();\n    double failed=Integer.parseInt(object.getValues().get(getFailedFieldName()));\n    double skipped=Integer.parseInt(object.getValues().get(getSkippedFieldName()));\n    double total=Integer.parseInt(object.getValues().get(getTotalFieldName()));\n    if (total > 0) {\n      double percent=(failed + skipped) / total * 100;\n      values.put(NOT_PASSED_PERCENT,formatter.format(percent));\n    }\n else {\n      values.put(NOT_PASSED_PERCENT,\"0\");\n    }\n    object.setValues(values);\n  }\n  result.put(\"result\",objects);\n  return result;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketGetQuery(VkApiClient client,UserActor actor,int ownerId){\n  super(client,\"market.get\",GetResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n}\n"}
{"nl": "draws the blinking rectangle", "code": "private void draw(){\n  if (animate && rectangle != null) {\n    Rectangle2D visibleRect=panel.getVisibleRect();\n    double xMin=Math.max(rectangle.getX(),visibleRect.getX());\n    double xMax=Math.min(rectangle.getX() + rectangle.getWidth(),visibleRect.getX() + visibleRect.getWidth() - 2);\n    double width=xMax - xMin;\n    double yMin=Math.max(rectangle.getY(),visibleRect.getY());\n    double yMax=Math.min(rectangle.getY() + rectangle.getHeight(),visibleRect.getY() + visibleRect.getHeight() - 2);\n    double height=yMax - yMin;\n    drawRectangle.setRect(xMin,yMin,width,height);\n    Graphics2D gc=(Graphics2D)panel.getGraphics();\n    if (gc != null) {\n      gc.setStroke(backgroundStroke);\n      gc.setColor(Color.WHITE);\n      gc.draw(drawRectangle);\n      gc.setColor(highlightColor);\n      if (even) {\n        gc.setStroke(evenStroke);\n        even=false;\n      }\n else {\n        gc.setStroke(oddStroke);\n        even=true;\n      }\n      gc.draw(drawRectangle);\n      gc.setStroke(basicStroke);\n    }\n  }\n}\n"}
{"nl": "Creates a simple version checker", "code": "public VersionChecker(Context ctx,String versionUrl,int iconResId,int uniqueNotificationId,String notificationUrl){\n  handler=new LeakGuardHandlerWrapper<Context>(ctx);\n  this.userAgent=new OkHttpClient();\n  this.versionUrl=versionUrl;\n  this.iconResId=iconResId;\n  this.notificationUrl=notificationUrl;\n  this.uniqueNotificationId=uniqueNotificationId;\n  try {\n    this.currentVersion=ctx.getPackageManager().getPackageInfo(ctx.getPackageName(),0).versionCode;\n  }\n catch (  NameNotFoundException e) {\n  }\n}\n"}
{"nl": "Skip <i>len</i> number of bytes in input stream<i>in</i>", "code": "public static void skipFully(DataInput in,int len) throws IOException {\n  int total=0;\n  int cur=0;\n  while ((total < len) && ((cur=in.skipBytes(len - total)) > 0)) {\n    total+=cur;\n  }\n  if (total < len) {\n    throw new IOException(\"Not able to skip \" + len + \" bytes, possibly \"+ \"due to end of input.\");\n  }\n}\n"}
{"nl": "Invokes polyglot and gets the AST for the source given in fullPath", "code": "public void formAst(String fullPath,List<String> locations,String className){\n  JavaToJimple jtj=new JavaToJimple();\n  polyglot.frontend.ExtensionInfo extInfo=jtj.initExtInfo(fullPath,locations);\n  if (compiler == null) {\n    compiler=new polyglot.frontend.Compiler(extInfo);\n  }\n  astNode=jtj.compile(compiler,fullPath,extInfo);\n  resolveAST();\n}\n"}
{"nl": "Stream an array of bytes to the browser This method will close the ServletOutputStream when finished", "code": "public static void streamContentToBrowser(HttpServletResponse response,byte[] bytes,String contentType,String fileName) throws IOException {\n  setResponseBrowserProxyNoCache(response);\n  response.setContentLength(bytes.length);\n  if (contentType != null) {\n    response.setContentType(contentType);\n  }\n  if (fileName != null) {\n    response.setHeader(\"Content-Disposition\",\"attachment;filename=\\\"\" + fileName + \"\\\"\");\n  }\n  OutputStream out=response.getOutputStream();\n  InputStream in=new ByteArrayInputStream(bytes);\n  try {\n    streamContent(out,in,bytes.length);\n  }\n catch (  IOException e) {\n    in.close();\n    out.close();\n    throw e;\n  }\n  in.close();\n  out.flush();\n  out.close();\n}\n"}
{"nl": "Remove a service unit from the loaded bundle list", "code": "public void removeLoadedServiceUnit(String suName,ResourceQuota quota){\n  if (this.loadedBundles.remove(suName)) {\n    this.allocatedQuota.substract(quota);\n    estimateLoadPercentage();\n  }\n}\n"}
{"nl": "build an accessToken from a previously retrieved value", "code": "public synchronized static AccessToken buildAccessToken(String accessToken){\n  if (accessToken == null || \"\".equals(accessToken)) {\n    return null;\n  }\n  try {\n    JSONObject jsonObject=new JSONObject(accessToken);\n    return new AccessToken(jsonObject);\n  }\n catch (  JSONException e) {\n    Log.d(TAG,e.getMessage());\n    return null;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketReorderItemsQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.reorderItems\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  File lastOpenFile=ProgramProperties.getFile(MeganProperties.MEGANFILE);\n  MeganAndRMAFileFilter meganAndRMAFileFilter=new MeganAndRMAFileFilter();\n  meganAndRMAFileFilter.setAllowGZipped(true);\n  meganAndRMAFileFilter.setAllowZipped(true);\n  meganAndRMAFileFilter.add(MeganizedDAAFileFilter.getInstance());\n  getDir().notifyLockInput();\n  Collection<File> files;\n  try {\n    files=ChooseFileDialog.chooseFilesToOpen(getViewer().getFrame(),lastOpenFile,meganAndRMAFileFilter,meganAndRMAFileFilter,ev,\"Open MEGAN file\");\n  }\n  finally {\n    getDir().notifyUnlockInput();\n  }\n  if (files != null && files.size() > 0) {\n    final StringBuilder buf=new StringBuilder();\n    for (    File file : files) {\n      if (file != null && file.exists() && file.canRead()) {\n        ProgramProperties.put(MeganProperties.MEGANFILE,file.getAbsolutePath());\n        buf.append(\"open file='\").append(file.getPath()).append(\"';\");\n      }\n    }\n    execute(buf.toString());\n  }\n}\n"}
{"nl": "close associated file or database", "code": "public void close() throws IOException {\n  if (classDumpReader != null)   classDumpReader.close();\n}\n"}
{"nl": "Set longitude", "code": "public PhotosEditQuery longitude(Float value){\n  return unsafeParam(\"longitude\",value);\n}\n"}
{"nl": "compute the Shannon-Weaver diversity index in bits", "code": "private static double[] computeShannonWeaver(MainViewer mainViewer,ProgressListener progressListener) throws IOException, CanceledException {\n  progressListener.setMaximum(2 * mainViewer.getSelectedNodes().size());\n  progressListener.setProgress(0);\n  int numberOfDatasets=mainViewer.getDir().getDocument().getNumberOfSamples();\n  double[] total=new double[numberOfDatasets];\n  for (  Node v : mainViewer.getSelectedNodes()) {\n    int[] summarized=mainViewer.getNodeData(v).getSummarized();\n    for (int i=0; i < summarized.length; i++)     total[i]+=summarized[i];\n    progressListener.incrementProgress();\n  }\n  double[] result=new double[numberOfDatasets];\n  for (int i=0; i < result.length; i++)   result[0]=0d;\n  for (  Node v : mainViewer.getSelectedNodes()) {\n    int[] summarized=mainViewer.getNodeData(v).getSummarized();\n    for (int i=0; i < summarized.length; i++) {\n      if (summarized[i] > 0) {\n        double p=summarized[i] / total[i];\n        result[i]+=p * Math.log(p) / LOG2;\n      }\n    }\n    progressListener.incrementProgress();\n  }\n  for (int i=0; i < result.length; i++)   result[i]=-result[i];\n  return result;\n}\n"}
{"nl": "Test read and write full ClusterPolicy object", "code": "public void testWriteReadFull() throws Exception {\n  ByteArrayOutputStream out=new ByteArrayOutputStream(0);\n  ObjectOutputStream os=new ObjectOutputStream(out);\n  os.writeObject(full);\n  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n  NIOConfiguration copy=(NIOConfiguration)is.readObject();\n  is.close();\n  os.close();\n  assertTrue(helper.areEquals(full,copy));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoEditQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.edit\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PollsCreateQuery(VkApiClient client,UserActor actor){\n  super(client,\"polls.create\",Poll.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Clears the cached value, if any, and returns true if the value was cleared", "code": "public boolean recomputeValue(){\n  if (mResourceValue != null) {\n    mResourceValue=null;\n    return true;\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Send notification to the client", "code": "public void notifyListener() throws RemoteException, UnknownEventException {\n  NotifyTemplateHolder template=(NotifyTemplateHolder)getEntryHolder();\n  RemoteEventListener listener=template.getREListener();\n  if (listener != null) {\n    if (LRMIUtilities.isRemoteProxy(listener))     LRMIInvocationContext.enableCustomPriorityForNextInvocation();\n    listener.notify(getRemoteEvent());\n  }\n}\n"}
{"nl": "Constructs a new ClassAnnotator for the specified codebase URLs", "code": "public ClassAnnotator(URL[] codebase,Properties props){\n  if (props != null)   properties.putAll(props);\n  setAnnotationURLs(codebase);\n}\n"}
{"nl": "grab the next  token after the one in key", "code": "public static String grabNext(String text,String key,String key2){\n  int pos=text.indexOf(key);\n  int length=key.length();\n  if (pos == -1 && key2 != null) {\n    pos=text.indexOf(key2);\n    length=key2.length();\n  }\n  if (pos == -1)   return null;\n else   return new StringTokenizer(text.substring(pos + length).trim()).nextToken();\n}\n"}
{"nl": "put a value in the table", "code": "public void put(String sample,String attribute,Object value){\n  if (!sampleOrder.contains(sample))   sampleOrder.add(sample);\n  if (!attributeOrder.contains(attribute))   attributeOrder.add(attribute);\n  table.put(sample,attribute,value);\n}\n"}
{"nl": "/*    ", "code": "@deprecated protected int handleGetLimit(int field,int limitType){\n  if ((isAmeteAlemEra()) && (field == 0)) {\n    return 0;\n  }\n  return super.handleGetLimit(field,limitType);\n}\n"}
{"nl": "Normalize the sequence by zero mean unit variance", "code": "public static JavaRDD<List<List<Writable>>> zeroMeanUnitVarianceSequence(Schema schema,JavaRDD<List<List<Writable>>> sequence,List<String> excludeColumns){\n  DataFrame frame=DataFrames.toDataFrameSequence(schema,sequence);\n  if (excludeColumns == null)   excludeColumns=Arrays.asList(DataFrames.SEQUENCE_UUID_COLUMN,DataFrames.SEQUENCE_INDEX_COLUMN);\n else {\n    excludeColumns=new ArrayList<>(excludeColumns);\n    excludeColumns.add(DataFrames.SEQUENCE_UUID_COLUMN);\n    excludeColumns.add(DataFrames.SEQUENCE_INDEX_COLUMN);\n  }\n  frame=zeromeanUnitVariance(frame,excludeColumns);\n  return DataFrames.toRecordsSequence(frame).getSecond();\n}\n"}
{"nl": "is there next?", "code": "@Override public boolean hasNext(){\n  return lengthOfFirstOfNext > 0 || samIterator.hasNext();\n}\n"}
{"nl": "Format the download percent", "code": "public static String formatPercent(int downloadSize,int fileSize){\n  float num=(float)downloadSize / fileSize;\n  float percent=((float)(int)(num * 1000)) / 10;\n  return String.valueOf(percent + \"%\");\n}\n"}
{"nl": "warning log", "code": "public static void w(String msg){\n  if (LOG_ENABLE) {\n    Log.w(TAG,buildMsg(msg));\n  }\n}\n"}
{"nl": "Item category id", "code": "protected MarketEditQuery categoryId(int value){\n  return unsafeParam(\"category_id\",value);\n}\n"}
{"nl": "The main program", "code": "public static void main(String[] args){\n  byte[] json_chunk1=\"{\\\"name\\\":\\\"El\".getBytes(StandardCharsets.UTF_8);\n  byte[] json_chunk2=\"vis\\\"}\".getBytes(StandardCharsets.UTF_8);\n  Observable.just(json_chunk1,json_chunk2).lift(new JsonParserOperator()).toBlocking().forEach(null);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getViewer() instanceof ViewerBase && ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n}\n"}
{"nl": "We iteratively update the call graph and the constraints list until our demand is satisfied", "code": "private void solveConstraints(){\n  IWorklist ptaList=worklist;\n  while (ptaList.has_job()) {\n    IVarAbstraction pn=ptaList.next();\n    pn.do_before_propagation();\n    pn.propagate(this,ptaList);\n    pn.do_after_propagation();\n  }\n}\n"}
{"nl": "this method change the message String to encrypt String using 64bits AES", "code": "public static String encrypt64bits(String Data){\n  Key key;\n  Cipher c;\n  byte[] encVal=null;\n  try {\n    key=generateKey64bits();\n    c=Cipher.getInstance(Settings.ALGO);\n    c.init(Cipher.ENCRYPT_MODE,key);\n    encVal=c.doFinal(Data.getBytes());\n    String encryptedValue=DatatypeConverter.printBase64Binary(encVal);\n    return encryptedValue;\n  }\n catch (  Exception e) {\n    System.out.println(e);\n  }\n  return null;\n}\n"}
{"nl": "main onBind method controls all other methods do not overwrite unless necessary", "code": "public void onBindViewHolderItemType(T holder,ItemIndex index,ItemType itemType){\nswitch (itemType) {\ncase LVL3_ITEM:\n    onBindLvl3Item(holder,index);\n  break;\ncase LVL2_ITEM:\nonBindLvl2Item(holder,index);\nbreak;\ncase LVL1_ITEM:\nonBindLvl1Item(holder,index);\nbreak;\ncase LVL0_ITEM:\nonBindLvl0Item(holder,index);\nbreak;\ncase LVL3_SECTION:\nonBindLvl3Section(holder,index);\nbreak;\ncase LVL2_SECTION:\nonBindLvl2Section(holder,index);\ncase LVL1_SECTION:\nonBindLvl1Section(holder,index);\n}\n}\n"}
{"nl": "Called by the shared iterators, this method blocks until a next element is available", "code": "boolean waitForNext(int iteration){\n  try {\n    _sharedObjectListLock.readLock().lock();\n    if (_accumulatedItems.size() > iteration) {\n      if (_logger.isLoggable(Level.FINEST))       _logger.finest(\"getting next item from the shared iterator source buffer [\" + _identifier + \"]\");\n      return true;\n    }\n  }\n  finally {\n    _sharedObjectListLock.readLock().unlock();\n  }\n  try {\n    _sharedObjectListLock.writeLock().lock();\n    if (_accumulatedItems.size() > iteration) {\n      if (_logger.isLoggable(Level.FINEST))       _logger.finest(\"getting next item from the shared iterator source buffer [\" + _identifier + \"]\");\n      return true;\n    }\n    if (_closed)     return false;\n    if (_sourceDataIterator == null || !_sourceDataIterator.hasNext()) {\n      sourceIteratorExhaushted();\n      return false;\n    }\n    if (_logger.isLoggable(Level.FINEST))     _logger.finest(\"getting next item from the shared iterator source wrapped iterator [\" + _identifier + \"]\");\n    T next=_sourceDataIterator.next();\n    _accumulatedItems.add(next);\n    return true;\n  }\n  finally {\n    _sharedObjectListLock.writeLock().unlock();\n  }\n}\n"}
{"nl": "Check permissions;", "code": "public static boolean checkPermission(Fragment fragment,String... permissions){\n  return PermissionUtils.getDeniedPermissions(fragment,permissions).length <= 0;\n}\n"}
{"nl": "Send the listen request to the server", "code": "void start(){\n  this.scheduleAckTimeout();\n  this.sendListen();\n}\n"}
{"nl": "get the player Token", "code": "public boolean isPlayToken(){\n  return playToken;\n}\n"}
{"nl": "Logs with debug level", "code": "public static void debug(@NonNull String tag,String message,Object... args){\n  android.util.Log.d(tag,String.format(Locale.ENGLISH,message,args));\n}\n"}
{"nl": "Check can be overriden if new object has different known range and that value should be used", "code": "protected boolean checkReversedObjectInRange(VisibleObject newObject){\n  return false;\n}\n"}
{"nl": "does the given readBlock match the given pattern", "code": "static public boolean doesMatch(FindSelection findSelection,IReadBlock readBlock,Pattern pattern){\n  try {\n    if (findSelection.useReadName && matches(pattern,readBlock.getReadName()))     return true;\n    if (findSelection.useReadHeader && matches(pattern,readBlock.getReadHeader()))     return true;\n    if (findSelection.useReadSequence && matches(pattern,readBlock.getReadSequence()))     return true;\n    if (findSelection.useMatchText) {\n      for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {\n        if (matches(pattern,readBlock.getMatchBlock(i).getText()))         return true;\n      }\n    }\n  }\n catch (  Exception e) {\n  }\n  return false;\n}\n"}
{"nl": "upload file to storage server (by file buff, slave file mode)", "code": "public String[] upload_file(String group_name,String master_filename,String prefix_name,byte[] file_buff,int offset,int length,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {\n  if ((group_name == null || group_name.length() == 0) || (master_filename == null || master_filename.length() == 0) || (prefix_name == null)) {\n    throw new MyException(\"invalid arguement\");\n  }\n  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_SLAVE_FILE,group_name,master_filename,prefix_name,file_ext_name,length,new UploadBuff(file_buff,offset,length),meta_list);\n}\n"}
{"nl": "After NPC respawns - drop should be unregistered //TODO more correct - on despawn", "code": "public void unregisterDrop(Npc npc){\n  Integer npcObjId=npc.getObjectId();\n  Map<Integer,DropNpc> dropRegmap=DropRegistrationService.getInstance().getDropRegistrationMap();\n  DropRegistrationService.getInstance().getCurrentDropMap().remove(npcObjId);\n  if (dropRegmap.containsKey(npcObjId)) {\n    dropRegmap.remove(npcObjId);\n  }\n}\n"}
{"nl": "zoom to selection", "code": "public void zoomToSelection(){\n  graphView.zoomToSelection();\n}\n"}
{"nl": "Adds a language limit to the query", "code": "public void addLanguage(String languageId){\n  query.append(\" +languageId:\" + languageId);\n}\n"}
{"nl": "copy selected alignment to clip-board", "code": "public boolean copyAlignment(){\n  final SelectedBlock selectedBlock=getSelectedBlock();\n  if (selectedBlock.isSelected()) {\n    StringSelection ss=new StringSelection(getSelectedAlignment());\n    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,null);\n    return true;\n  }\n  return false;\n}\n"}
{"nl": "store the file in repo", "code": "public static String store(String name,File file) throws IOException {\n  FileInputStream in=null;\n  try {\n    in=new FileInputStream(file);\n    String id=id();\n    store(X.EMPTY,id,name,X.EMPTY,0,in.available(),in,-1,true,-1);\n    return id;\n  }\n  finally {\n    if (in != null) {\n      in.close();\n    }\n  }\n}\n"}
{"nl": "Return a coalesce expression", "code": "public Value coalesceExpression(Value[] val){\n  throw new RuntimeException(\"Unsupported operation.\");\n}\n"}
{"nl": "Initialize the toolbar in the layout", "code": "@Override protected void initToolbar(Bundle savedInstanceState){\n}\n"}
{"nl": "construct instance to perform proportion test", "code": "private SignificanceTestForTwoDatasets(double x1,double n1,double x2,double n2){\n  this.x1=x1;\n  this.n1=n1;\n  this.x2=x2;\n  this.n2=n2;\n}\n"}
{"nl": "check the limit of a range condition in extended matching Note- currently we support only inclusive range at the \"TO\" endpoint", "code": "private static boolean fieldExtendedMatchLimitValue(Object entryValue,Object rangeValue,short matchCode,boolean includeRange){\n  int compareResult=((Comparable)entryValue).compareTo(rangeValue);\nswitch (matchCode) {\ncase TemplateMatchCodes.LE:\ncase TemplateMatchCodes.LT:\n    return (includeRange ? compareResult >= 0 : compareResult > 0);\ncase TemplateMatchCodes.GE:\ncase TemplateMatchCodes.GT:\n  return (includeRange ? compareResult <= 0 : compareResult < 0);\n}\nreturn false;\n}\n"}
{"nl": "Creates an AssetExtraction associated to the given asset", "code": "@Transactional public AssetExtraction createAssetExtraction(Asset asset,PollableTask pollableTask){\n  AssetExtraction assetExtraction=new AssetExtraction();\n  assetExtraction.setAsset(asset);\n  assetExtraction.setContentMd5(asset.getContentMd5());\n  assetExtraction.setPollableTask(pollableTask);\n  assetExtractionRepository.save(assetExtraction);\n  return assetExtraction;\n}\n"}
{"nl": "creates a LogEntry", "code": "private LogEntry(ISVNLogMessage logMessage,ISVNResource resource,ISVNRemoteResource remoteResource,Alias[] tags){\n  this.logMessage=logMessage;\n  this.remoteResource=remoteResource;\n  this.resource=resource;\n  this.tags=tags;\n}\n"}
{"nl": "write a string, compressed, if long enough", "code": "public void writeString(String str) throws IOException {\n  if (str == null)   writeInt(0);\n else {\n    if (useCompression && str.length() >= Compressor.MIN_SIZE_FOR_DEFLATION) {\n      byte[] bytes=compressor.deflateString2ByteArray(str);\n      writeInt(-bytes.length);\n      outs.write(bytes,0,bytes.length);\n      position+=bytes.length;\n    }\n else {\n      byte[] bytes=str.getBytes(\"UTF-8\");\n      writeInt(bytes.length);\n      outs.write(bytes,0,bytes.length);\n      position+=bytes.length;\n    }\n  }\n}\n"}
{"nl": "Should the player burn fat (saturation) instead of hunger (level) ?", "code": "private boolean shouldBurnFat(){\n  return this.getSaturationLevel() > (float)((this.getFoodLevel() + 5) / 6) * 2.0F;\n}\n"}
{"nl": "Dumps the wave out to the given stream", "code": "public void dumpASCII(Writer writer){\n  Wave wave=getWave();\n  wave.dump(writer);\n}\n"}
{"nl": "Set peer id", "code": "public MessagesSendQuery peerId(Integer value){\n  return unsafeParam(\"peer_id\",value);\n}\n"}
{"nl": "removes trailing whitespace", "code": "@Override public void load(InputStream fis) throws IOException {\n  Scanner in=new Scanner(fis);\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  while (in.hasNext()) {\n    out.write(in.nextLine().trim().getBytes());\n    out.write(\"\\n\".getBytes());\n  }\n  in.close();\n  InputStream is=new ByteArrayInputStream(out.toByteArray());\n  super.load(is);\n}\n"}
{"nl": "Check whether object is in world", "code": "public boolean isInWorld(VisibleObject object){\n  return allObjects.containsKey(object.getObjectId());\n}\n"}
{"nl": "save to file", "code": "public void saveToFile(String fileName) throws IOException {\n  System.err.println(\"Saving tree to file: \" + fileName);\n  try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){\n    write(w,false);\n    w.write(\";\\n\");\n  }\n   System.err.println(\"done (\" + getNumberOfNodes() + \" nodes)\");\n}\n"}
{"nl": "Additional fields list to return", "code": "public GroupsGetInvitedUsersQuery fields(List<UserField> value){\n  return unsafeParam(\"fields\",value);\n}\n"}
{"nl": "Required so that the enemy race can attack the Kisk!", "code": "@Override public boolean isEnemyFrom(Player player){\n  int worldId=getPosition().getMapId();\n  return player.getRace() != this.ownerRace;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return getDoc().getNumberOfReads() > 0;\n}\n"}
{"nl": "resolve an entity", "code": "@Override public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {\n  return new InputSource(new StringReader(\"\"));\n}\n"}
{"nl": "init: load task -> sort task", "code": "@Override public void onTaskLoadSuccess(final List<Task> list){\n  mTaskAdapter.setColorId(ThemeUtils.getResourceId(this,R.attr.colorAccent));\n  mTaskAdapter.setLast(mPresenter.getComic().getLast());\n  mTaskAdapter.addAll(list);\n  mPresenter.sortTask(list);\n}\n"}
{"nl": "remove the service from pigeon, including unregister this service from registry", "code": "public static void removeService(String url) throws RpcException {\n  try {\n    ServicePublisher.removeService(url);\n  }\n catch (  RegistryException e) {\n    throw new RpcException(\"error while removing service:\" + url,e);\n  }\n}\n"}
{"nl": "Constructs new <tt>SM_CHARACTER_LIST </tt> packet", "code": "public SM_CHARACTER_LIST(int playOk2){\n  this.playOk2=playOk2;\n}\n"}
{"nl": "Streams content from InputStream to the ServletOutputStream This method will close the ServletOutputStream when finished This method does not close the InputSteam passed", "code": "public static void streamContentToBrowser(HttpServletResponse response,InputStream in,int length,String contentType,String fileName) throws IOException {\n  setResponseBrowserProxyNoCache(response);\n  response.setContentLength(length);\n  if (contentType != null) {\n    response.setContentType(contentType);\n  }\n  if (fileName != null) {\n    response.setHeader(\"Content-Disposition\",\"attachment;filename=\\\"\" + fileName + \"\\\"\");\n  }\n  OutputStream out=response.getOutputStream();\n  try {\n    streamContent(out,in,length);\n  }\n catch (  IOException e) {\n    out.close();\n    throw e;\n  }\n  out.flush();\n  out.close();\n}\n"}
{"nl": "Appends two elements to build a classpath", "code": "private String appendClasspath(String appPath,String libPath){\n  String s=(appPath != null && !appPath.isEmpty()) ? appPath : \"\";\n  if (libPath != null && !libPath.isEmpty()) {\n    if (!s.isEmpty())     s+=File.pathSeparator;\n    s+=libPath;\n  }\n  return s;\n}\n"}
{"nl": "Computes the 1-norm of a Z", "code": "public static double abs1(Z z){\n  return Math.abs(z.re) + Math.abs(z.im);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketGetByIdQuery(VkApiClient client,UserActor actor,String... itemIds){\n  super(client,\"market.getById\",GetByIdResponse.class);\n  accessToken(actor.getAccessToken());\n  itemIds(itemIds);\n}\n"}
{"nl": "Convenience method for creating an ActionEntry", "code": "public static ActionEntry from(Matcher matcher,Action action){\n  return new ActionEntry(matcher,action);\n}\n"}
{"nl": "Allows to create/write a task in the database", "code": "public Single<Void> writeTaskInDatabase(final Task _task){\n  final String key=this.getChildReference().push().getKey();\n  _task.setId(key);\n  return observeSingleValue(getChildReference().child(key).setValue(_task));\n}\n"}
{"nl": "Generated Methods", "code": "public android.os.IBinder onBind(android.content.Intent intent){\n  if (ScriptLoader.isCalledFromJRuby())   return null;\n  preOnBind(intent);\n  if (JRubyAdapter.isInitialized() && scriptInfo.isReadyToLoad()) {\n    ScriptLoader.loadScript(this);\n  }\n else {\n    return null;\n  }\n  String rubyClassName=scriptInfo.getRubyClassName();\n  if (rubyClassName == null)   return null;\n  if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + \".instance_methods(false).any?{|m| m.to_sym == :onBind}\")) {\n    return (android.os.IBinder)JRubyAdapter.runRubyMethod(android.os.IBinder.class,scriptInfo.getRubyInstance(),\"onBind\",intent);\n  }\n else {\n    if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + \".instance_methods(false).any?{|m| m.to_sym == :on_bind}\")) {\n      return (android.os.IBinder)JRubyAdapter.runRubyMethod(android.os.IBinder.class,scriptInfo.getRubyInstance(),\"on_bind\",intent);\n    }\n else {\n      if ((Boolean)JRubyAdapter.runScriptlet(rubyClassName + \".instance_methods(true).any?{|m| m.to_sym == :on_bind}\")) {\n        return (android.os.IBinder)JRubyAdapter.runRubyMethod(android.os.IBinder.class,scriptInfo.getRubyInstance(),\"on_bind\",intent);\n      }\n else {\n        return (android.os.IBinder)JRubyAdapter.runRubyMethod(android.os.IBinder.class,scriptInfo.getRubyInstance(),\"onBind\",intent);\n      }\n    }\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set flipV=\");\n  boolean flip=np.getBoolean();\n  np.matchIgnoreCase(\";\");\n  getViewer().getPcoaTab().setFlipV(flip);\n  try {\n    getViewer().updateDistances();\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n  }\n}\n"}
{"nl": "notify listeners that list of values for the given name has changed", "code": "public static void notifyListChange(String name){\n  java.util.List<String> list=new LinkedList<>();\n  StringTokenizer st=new StringTokenizer(ProgramProperties.get(name,\"\"),\";\");\n  while (st.hasMoreTokens()) {\n    list.add(st.nextToken());\n  }\nsynchronized (propertieslistListeners) {\n    for (    PropertiesListListener listener : propertieslistListeners) {\n      if (listener.isInterested(name))       listener.hasChanged(list);\n    }\n  }\n}\n"}
{"nl": "Method to convert the given BigInteger raw data element partitions to a QueryResponseJSON object based upon the given queryType", "code": "public static QueryResponseJSON extractQueryResponseJSON(QueryInfo queryInfo,QuerySchema qSchema,List<BigInteger> parts) throws PIRException {\n  QueryResponseJSON qrJSON=new QueryResponseJSON(queryInfo);\n  DataSchema dSchema=DataSchemaRegistry.get(qSchema.getDataSchemaName());\n  int numArrayElementsToReturn=SystemConfiguration.getIntProperty(\"pir.numReturnArrayElements\",1);\n  logger.debug(\"parts.size() = \" + parts.size());\n  int partsIndex=0;\n  if (queryInfo.getEmbedSelector()) {\n    String selectorFieldName=qSchema.getSelectorName();\n    String type=dSchema.getElementType(selectorFieldName);\n    String embeddedSelector=getEmbeddedSelectorFromPartitions(parts,partsIndex,type,dSchema.getPartitionerForElement(selectorFieldName));\n    qrJSON.setSelector(embeddedSelector);\n    partsIndex+=4;\n    logger.debug(\"Extracted embedded selector = \" + embeddedSelector + \" parts.size() = \"+ parts.size());\n  }\n  List<String> dataFieldsToExtract=qSchema.getElementNames();\n  for (  String fieldName : dataFieldsToExtract) {\n    int numElements=1;\n    if (dSchema.isArrayElement(fieldName)) {\n      numElements=numArrayElementsToReturn;\n    }\n    for (int i=0; i < numElements; ++i) {\n      String type=dSchema.getElementType(fieldName);\n      logger.debug(\"Extracting value for fieldName = \" + fieldName + \" type = \"+ type+ \" partsIndex = \"+ partsIndex);\n      Object element=dSchema.getPartitionerForElement(fieldName).fromPartitions(parts,partsIndex,type);\n      qrJSON.setMapping(fieldName,element);\n      partsIndex+=dSchema.getPartitionerForElement(fieldName).getNumPartitions(type);\n      logger.debug(\"Adding qrJSON element = \" + element + \" element.getClass() = \"+ element.getClass());\n    }\n  }\n  return qrJSON;\n}\n"}
{"nl": "Click in the middle of the view (typically selects it)", "code": "public void click(){\n  new ComponentDriver(myRobot).click(mySurface,getMidPoint());\n  myRobot.waitForIdle();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((MainViewer)getViewer()).getSelectedIds().size() == 1;\n}\n"}
{"nl": "Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise", "code": "public boolean isSet(_Fields field){\n  if (field == null) {\n    throw new IllegalArgumentException();\n  }\nswitch (field) {\ncase SEQUENCE_ID:\n    return isSetSequenceId();\ncase STATUS:\n  return isSetStatus();\ncase MESSAGE:\nreturn isSetMessage();\n}\nthrow new IllegalStateException();\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  MainViewer mainViewer=(MainViewer)getDir().getViewerByClass(MainViewer.class);\n  return mainViewer != null && mainViewer.hasComparableData();\n}\n"}
{"nl": "Utility function returning a new color faded to a target color", "code": "public static Color fadeToColor(Color source,Color target,float ratio){\n  int r=(int)((1 - ratio) * source.getRed() + ratio * target.getRed());\n  int g=(int)((1 - ratio) * source.getGreen() + ratio * target.getGreen());\n  int b=(int)((1 - ratio) * source.getBlue() + ratio * target.getBlue());\n  int a=(int)((1 - ratio) * source.getAlpha() + ratio * target.getAlpha());\n  return new Color(r,g,b,a);\n}\n"}
{"nl": "Weekly cron jobs", "code": "public CronTimer(DayOfWeek dayofweek,int hour,int minute,int sec){\n  cronExpression=sec + \" \" + minute+ \" \"+ hour+ \" * * \"+ dayofweek;\n}\n"}
{"nl": "Execute by code", "code": "public ExecuteCodeQuery code(Actor actor,String code){\n  return new ExecuteCodeQuery(getClient(),actor,code);\n}\n"}
{"nl": "Skip to the start of the next line", "code": "private void skipPastNewline(){\n  while (!builder.eof()) {\n    if (matches(ProjectViewTokenType.NEWLINE)) {\n      return;\n    }\n    builder.advanceLexer();\n  }\n}\n"}
{"nl": "notify listeners to allow user input", "code": "public void notifyUnlockInput(){\n  if (locked) {\nsynchronized (directorListeners) {\n      IDirectorListener[] listeners=directorListeners.toArray(new IDirectorListener[directorListeners.size()]);\n      for (      IDirectorListener directorListener : listeners) {\n        if (directorListener != this)         directorListener.unlockUserInput();\n      }\n    }\n  }\n  locked=false;\n}\n"}
{"nl": "Creates a file with the specified contents and file path in the test project", "code": "protected PsiFile createPsiFile(String filePath){\n  return getPsiFile(testFixture.getTempDirFixture().createFile(filePath));\n}\n"}
{"nl": "Sort by decreasing renew time, secondary sort by decreasing id", "code": "public int compareTo(Entry e){\n  if (this == e)   return 0;\n  if (renew < e.renew || (renew == e.renew && id < e.id))   return 1;\n  return -1;\n}\n"}
{"nl": "write to file", "code": "public void write(IOutputWriter writer,Map<Integer,ListOfLongs> classId2locations) throws IOException {\n  writer.writeInt(map2Weight.size());\n  for (  Object key : map2Weight.keySet()) {\n    writer.writeInt((Integer)key);\n    final Integer sum=map2Weight.get(key);\n    writer.writeInt(sum);\n    if (classId2locations != null) {\n      final ListOfLongs list=classId2locations.get(key);\n      writer.writeInt(list.size());\n      for (int i=0; i < list.size(); i++)       writer.writeLong(list.get(i));\n    }\n else     writer.writeInt(0);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallPostQuery(VkApiClient client,UserActor actor){\n  super(client,\"wall.post\",PostResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Only folding top-level statements", "code": "private void addDescriptors(List<FoldingDescriptor> descriptors,ASTNode node){\n  IElementType type=node.getElementType();\n  if (type == BuildElementTypes.FUNCTION_STATEMENT) {\n    ASTNode colon=node.findChildByType(BuildToken.fromKind(TokenKind.COLON));\n    if (colon == null) {\n      return;\n    }\n    ASTNode stmtList=node.findChildByType(BuildElementTypes.STATEMENT_LIST);\n    if (stmtList == null) {\n      return;\n    }\n    int start=colon.getStartOffset() + 1;\n    int end=endOfList(stmtList);\n    descriptors.add(new FoldingDescriptor(node,range(start,end)));\n  }\n else   if (type == BuildElementTypes.FUNCALL_EXPRESSION || type == BuildElementTypes.LOAD_STATEMENT) {\n    ASTNode listNode=type == BuildElementTypes.FUNCALL_EXPRESSION ? node.findChildByType(BuildElementTypes.ARGUMENT_LIST) : node;\n    if (listNode == null) {\n      return;\n    }\n    ASTNode lParen=listNode.findChildByType(BuildToken.fromKind(TokenKind.LPAREN));\n    ASTNode rParen=listNode.findChildByType(BuildToken.fromKind(TokenKind.RPAREN));\n    if (lParen == null || rParen == null) {\n      return;\n    }\n    int start=lParen.getStartOffset() + 1;\n    int end=rParen.getTextRange().getEndOffset() - 1;\n    descriptors.add(new FoldingDescriptor(node,range(start,end)));\n  }\n}\n"}
{"nl": "Construct a new plural", "code": "public Plural(Quantity quantity,String value){\n  this.value=value;\n  this.quantity=quantity;\n}\n"}
{"nl": "setup the green gradient", "code": "public GreenGradient(int maxCount){\n  this.maxCount=maxCount;\n  factor=maxCount / Math.log(maxCount);\n}\n"}
{"nl": "has the table been loaded", "code": "public boolean isLoaded(){\n  return size() > 0;\n}\n"}
{"nl": "Convert DP units to pixels", "code": "public static int dpToPixel(Context c,int dp){\n  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,c.getResources().getDisplayMetrics());\n}\n"}
{"nl": "create the LogEntry for the logMessages", "code": "public static ILogEntry[] createLogEntriesFrom(ISVNRemoteFolder remoteFolder,ISVNLogMessage[] logMessages,Tags[] tags){\n  ILogEntry[] result=new ILogEntry[logMessages.length];\n  for (int i=0; i < logMessages.length; i++) {\n    result[i]=new LogEntry(logMessages[i],remoteFolder,null,(tags[i] != null) ? tags[i].getTags() : null);\n  }\n  return result;\n}\n"}
{"nl": "Starts the async executor", "code": "public void start(){\n  if (isActive) {\n    return;\n  }\n  log.info(\"Starting up the default async job executor [{}].\",getClass().getName());\n  if (timerJobRunnable == null) {\n    timerJobRunnable=new AcquireTimerJobsRunnable(this,processEngineConfiguration.getJobManager());\n  }\n  if (resetExpiredJobsRunnable == null) {\n    resetExpiredJobsRunnable=new ResetExpiredJobsRunnable(this);\n  }\n  if (!isMessageQueueMode && asyncJobsDueRunnable == null) {\n    asyncJobsDueRunnable=new AcquireAsyncJobsDueRunnable(this);\n  }\n  if (!isMessageQueueMode) {\n    initAsyncJobExecutionThreadPool();\n    startJobAcquisitionThread();\n  }\n  startTimerAcquisitionThread();\n  startResetExpiredJobsThread();\n  isActive=true;\n  executeTemporaryJobs();\n}\n"}
{"nl": "append the MD string", "code": "public static void appendMDString(final String alignedQuery,final String alignedReference,final StringBuilder buffer){\n  buffer.append(\"MD:Z:\");\n  int countMatches=0;\n  boolean inDeletion=false;\n  for (int i=0; i < alignedQuery.length(); i++) {\n    final char qChar=alignedQuery.charAt(i);\n    final char rChar=alignedReference.charAt(i);\n    if (qChar == '-') {\n      if (countMatches > 0) {\n        buffer.append(countMatches);\n        countMatches=0;\n      }\n      if (!inDeletion) {\n        buffer.append(\"^\");\n        inDeletion=true;\n      }\n      buffer.append(rChar);\n    }\n else     if (rChar != '-') {\n      if (qChar == rChar) {\n        countMatches++;\n      }\n else {\n        if (inDeletion)         buffer.append(\"0\");\n        if (countMatches > 0) {\n          buffer.append(countMatches);\n          countMatches=0;\n        }\n        buffer.append(rChar);\n      }\n      if (inDeletion)       inDeletion=false;\n    }\n  }\n  if (countMatches > 0)   buffer.append(countMatches);\n else   if (inDeletion)   buffer.append(0);\n}\n"}
{"nl": "Save the app", "code": "@RequestMapping(value=\"/apps\",method=RequestMethod.POST) public JsonResponse saveApp(@RequestParam(\"appName\") String appName,@RequestParam(\"appKey\") String appKey,@RequestParam(\"appDesc\") String appDesc,@RequestParam(value=\"inheritAppId\",defaultValue=\"\") Long inheritAppId){\n  App app=new App();\n  app.setAppName(appName);\n  app.setAppKey(appKey);\n  app.setAppDesc(appDesc);\n  Response<Long> saveResp=appService.save(app);\n  if (!saveResp.isSuccess()) {\n    Logs.error(\"failed to save app({}), cause: {}\",app,saveResp.getErr());\n    return JsonResponse.notOk(saveResp.getErr());\n  }\n  appService.inheritConfigs(inheritAppId,saveResp.getData());\n  return JsonResponse.ok(saveResp.getData());\n}\n"}
{"nl": "Selects nth template from the list in CreatePageWindow", "code": "public CreateSiteWindow selectNthTemplate(int i){\n  templatesList.get(i).click();\n  return this;\n}\n"}
{"nl": "Function Import implementation for getting customer reviews created", "code": "@SuppressWarnings(\"unchecked\") @EdmFunctionImport(name=\"CreateCustomerReview\",entitySet=\"CustomerReviews\",returnType=@ReturnType(type=Type.ENTITY,isCollection=false)) public CustomerReview createCustomerReview(@EdmFunctionImportParameter(name=\"ProductId\") String productId,@EdmFunctionImportParameter(name=\"FirstName\") String firstName,@EdmFunctionImportParameter(name=\"LastName\") String lastName,@EdmFunctionImportParameter(name=\"Rating\") String rating,@EdmFunctionImportParameter(name=\"CreationDate\") String creationDate,@EdmFunctionImportParameter(name=\"Comment\") String comment) throws ODataException, ParseException {\n  EntityManagerFactory emf=Utility.getEntityManagerFactory();\n  EntityManager em=emf.createEntityManager();\n  Product prod=null;\n  CustomerReview customerReview=null;\n  try {\n    em.getTransaction().begin();\n    prod=em.find(Product.class,productId);\n    try {\n      customerReview=new CustomerReview();\n      customerReview.setComment(comment);\n      Calendar cal=Calendar.getInstance();\n      cal.setTime(new Date(Long.parseLong(creationDate)));\n      customerReview.setCreationDate(cal);\n      customerReview.setFirstName(firstName);\n      customerReview.setLastName(lastName);\n      customerReview.setRating(Integer.parseInt(rating));\n      customerReview.setProductId(productId);\n      customerReview.setProduct(prod);\n      em.persist(customerReview);\n      prod.addReview(customerReview);\n      em.getTransaction().commit();\n      return customerReview;\n    }\n catch (    NoResultException e) {\n      throw new ODataApplicationException(\"Error creating customer review:\",Locale.ENGLISH,HttpStatusCodes.BAD_REQUEST);\n    }\n  }\n  finally {\n    em.close();\n  }\n}\n"}
{"nl": "get the next element in scan order", "code": "private void next(SegmentedListIterator<T> iter){\n  iter._curElement=null;\n  if (iter._currSegmentScanCount < 0)   return;\n  if (iter._headToTail)   next_down(iter);\n else   next_up(iter);\n}\n"}
{"nl": "When the overflow list overflows, the maximum number of elements that may remain in the overflow list (the rest are moved into the base bit vector)", "code": "public boolean contains(Node n){\n  if (bitVector != null && bitVector.contains(n))   return true;\n  if (overflow.contains(n))   return true;\n  return false;\n}\n"}
{"nl": "Sets the options associated with the order for a given ship group", "code": "public Map<String,Object> finalizeOrderEntryOptions(int shipGroupIndex,String shippingMethod,String shippingInstructions,String maySplit,String giftMessage,String isGift,String internalCode,String shipBeforeDate,String shipAfterDate,String orderAdditionalEmails){\n  List<String> errorMessages=new ArrayList<String>();\n  orderAdditionalEmails=cleanVerifyEmailListToString(orderAdditionalEmails,errorMessages);\n  if (errorMessages.size() > 0) {\n    return ServiceUtil.returnError(errorMessages);\n  }\n  this.cart.setOrderAdditionalEmails(orderAdditionalEmails);\n  return finalizeOrderEntryOptions(shipGroupIndex,shippingMethod,shippingInstructions,maySplit,giftMessage,isGift,internalCode,shipBeforeDate,shipAfterDate,null,null);\n}\n"}
{"nl": "Creates a new instance of Distribution", "code": "public Distribution(){\n  hDistro=new TreeMap();\n}\n"}
{"nl": "* Overrided Method Letakkan Overrided Method di bawah line ini *", "code": "@Override protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.activity_main);\n  toolbar=(Toolbar)findViewById(R.id.toolbar);\n  setSupportActionBar(toolbar);\n  getSupportActionBar().setDisplayShowHomeEnabled(true);\n  setupNavigationDrawer();\n  setFragmentContent(currentFragment);\n  showIntro();\n}\n"}
{"nl": "Called to handle the button clicks in the view", "code": "public void onClick(int id){\nswitch (id) {\ncase 1:\n    startLocationUpdates();\n  break;\ncase 0:\nstopLocationUpdates();\nbreak;\n}\n}\n"}
{"nl": "release SLHolder for this scan", "code": "public void releaseScan() throws SAException {\n}\n"}
{"nl": "Returns the string representation of the object", "code": "public String toString(){\n  return \"PostLexicalAnalyzer\";\n}\n"}
{"nl": "Builds the options", "code": "public MapOptions build(){\n  MapOptions options=new MapOptions();\n  options.center=this.center;\n  options.zoom=this.zoom;\n  options.minZoom=this.minZoom;\n  options.layers=this.layers;\n  options.maxZoom=this.maxZoom;\n  options.maxBounds=this.maxBounds;\n  options.dragging=this.dragging;\n  options.touchZoom=this.touchZoom;\n  options.scrollWheelZoom=this.scrollWheelZoom;\n  options.doubleClickZoom=this.doubleClickZoom;\n  options.boxZoom=this.boxZoom;\n  options.tap=this.tap;\n  options.tapTolerance=this.tapTolerance;\n  options.trackResize=this.trackResize;\n  options.worldCopyJump=this.worldCopyJump;\n  options.closePopupOnClick=this.closePopupOnClick;\n  options.bounceAtZoomLimits=this.bounceAtZoomLimits;\n  options.keyboard=this.keyboard;\n  options.keyboardPanOffset=this.keyboardPanOffset;\n  options.keyboardZoomOffset=this.keyboardPanOffset;\n  options.inertia=this.inertia;\n  options.inertiaDeceleration=this.inertiaDeceleration;\n  options.inertiaMaxSpeed=this.inertiaMaxSpeed;\n  options.inertiaThreshold=this.inertiaThreshold;\n  options.zoomControl=this.zoomControl;\n  options.attributionControl=this.attributionControl;\n  options.fadeAnimation=this.fadeAnimation;\n  options.zoomAnimation=this.zoomAnimation;\n  options.zoomAnimationThreshold=this.zoomAnimationThreshold;\n  options.markerZoomAnimation=this.markerZoomAnimation;\n  return options;\n}\n"}
{"nl": "is template relevant for fifo blocking in initial search ?", "code": "public boolean isFifoSearch(){\n  return _fifoTemplate && (_uidToOperateBy == null && (_multipleUids == null || _multipleUids.length == 0));\n}\n"}
{"nl": "Check if an EntityReference node has Text Only child nodes", "code": "private boolean hasTextOnlyChildren(Node node){\n  Node child=node;\n  if (child == null) {\n    return false;\n  }\n  child=child.getFirstChild();\n  while (child != null) {\n    int type=child.getNodeType();\n    if (type == Node.ENTITY_REFERENCE_NODE) {\n      return hasTextOnlyChildren(child);\n    }\n else     if (type != Node.TEXT_NODE && type != Node.CDATA_SECTION_NODE && type != Node.ENTITY_REFERENCE_NODE) {\n      return false;\n    }\n    child=child.getNextSibling();\n  }\n  return true;\n}\n"}
{"nl": "Just for backwards compatibility with workspaces stored with previous versions", "code": "private void readFromVersion2Stream(StatusFromBytesStream dis) throws IOException {\n  file=new File(dis.readUTF());\n}\n"}
{"nl": "Set up and initialize the form", "code": "@Deprecated public void initialiseVerticalStepperForm(String[] stepsTitles,int colorPrimary,int colorPrimaryDark,VerticalStepperForm verticalStepperForm,Activity activity){\n  this.alphaOfDisabledElements=0.25f;\n  this.buttonTextColor=Color.rgb(255,255,255);\n  this.buttonPressedTextColor=Color.rgb(255,255,255);\n  this.stepNumberTextColor=Color.rgb(255,255,255);\n  this.stepTitleTextColor=Color.rgb(33,33,33);\n  this.stepSubtitleTextColor=Color.rgb(162,162,162);\n  this.stepNumberBackgroundColor=colorPrimary;\n  this.buttonBackgroundColor=colorPrimary;\n  this.buttonPressedBackgroundColor=colorPrimaryDark;\n  this.errorMessageTextColor=Color.rgb(175,18,18);\n  this.displayBottomNavigation=true;\n  this.materialDesignInDisabledSteps=false;\n  this.hideKeyboard=true;\n  this.showVerticalLineWhenStepsAreCollapsed=false;\n  this.verticalStepperFormImplementation=verticalStepperForm;\n  this.activity=activity;\n  initStepperForm(stepsTitles,null);\n}\n"}
{"nl": "look at the top of the stack", "code": "private final boolean peekReportEntity(){\n  return fPEReport[fPEDepth - 1];\n}\n"}
{"nl": "get the char by offset refer the current position", "code": "public char charOf(int offset){\n  return charAt(pos + offset);\n}\n"}
{"nl": "this method is used to update the reference count of the actions", "code": "private void increaseActionCount(Map<String,Integer> eventCounts,Predicate<String> predicate){\n  eventCounts.forEach(null);\n}\n"}
{"nl": "Returns current platform", "code": "public static int currentPlatform(){\n  String os=System.getProperty(\"os.name\");\n  if (os.startsWith(\"Mac OS\")) {\n    return PLATFORM_DARWIN;\n  }\n else   if (os.startsWith(\"Windows\")) {\n    return PLATFORM_WINDOWS;\n  }\n else   if (os.startsWith(\"Linux\")) {\n    return PLATFORM_LINUX;\n  }\n  return PLATFORM_UNKNOWN;\n}\n"}
{"nl": "get enemy count information", "code": "public int GetEnemyCount(){\n  return this.enemy_ToTal_Cnt;\n}\n"}
{"nl": "Will be called from the Message API if a connected Google API node sent a message to this device", "code": "@Override public void onMessageReceived(MessageEvent messageEvent){\n  Bundle data=new Bundle();\n  data.putString(MessageHandler.KEY_PATH,messageEvent.getPath());\n  data.putString(MessageHandler.KEY_SOURCE_NODE_ID,messageEvent.getSourceNodeId());\n  data.putByteArray(MessageHandler.KEY_DATA,messageEvent.getData());\n  Message message=new Message();\n  message.setData(data);\n  notifyMessageHandlers(message);\n}\n"}
{"nl": "scroll only once", "code": "public void scrollOnce(){\n  if (null != mAdapter && mAdapter.getCount() > 1) {\n    int totalCount=mAdapter.getCount();\n    int currentItem=getCurrentItem();\n    int nextItem=currentItem % totalCount + 1;\n    setCurrentItem(nextItem,true);\n  }\n else {\n    stopAutoScroll();\n  }\n}\n"}
{"nl": "collapse all  nodes at subsystem level", "code": "public void collapseToTop(){\n  getCollapsedIds().clear();\n  if (getTree().getRoot() != null) {\n    for (Edge e=getTree().getRoot().getFirstOutEdge(); e != null; e=getTree().getRoot().getNextOutEdge(e)) {\n      getCollapsedIds().add((Integer)e.getTarget().getInfo());\n    }\n    updateTree();\n  }\n}\n"}
{"nl": "warning log", "code": "public static void w(String tag,String msg){\n  if (LOG_ENABLE) {\n    Log.w(tag,buildMsg(msg));\n  }\n}\n"}
{"nl": "gets the index of the split, if present, otherwise -1", "code": "public int indexOf(Split split){\n  Integer index=(Integer)split2index.get(split);\n  if (index == null)   return -1;\n else   return index;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  if (getViewer() instanceof ViewerBase)   return ((ViewerBase)getViewer()).getGraph().getNumberOfNodes() > 0;\n else   return getViewer() instanceof ClusterViewer && ((ClusterViewer)getViewer()).getGraphView() != null && ((ClusterViewer)getViewer()).getGraphView().getGraph().getNumberOfNodes() > 0;\n}\n"}
{"nl": "Adds a host limit to the query", "code": "public ContentletQuery addHost(String hostIdentifier){\n  query.append(\" +conhost:\" + hostIdentifier);\n  return this;\n}\n"}
{"nl": "Function that creates a java proxy to the object represented by <code>this</code>", "code": "public Object createProxy(String implem) throws ClassNotFoundException, LuaException {\nsynchronized (L) {\n    if (!isTable())     throw new LuaException(\"Invalid Object. Must be Table.\");\n    StringTokenizer st=new StringTokenizer(implem,\",\");\n    Class[] interfaces=new Class[st.countTokens()];\n    ClassLoader loader=ModuleContext.getInstance().getBaseClassLoader();\n    for (int i=0; st.hasMoreTokens(); i++) {\n      if (loader != null) {\n        interfaces[i]=loader.loadClass(st.nextToken());\n      }\n else {\n        interfaces[i]=Class.forName(st.nextToken());\n      }\n    }\n    InvocationHandler handler=new LuaInvocationHandler(this);\n    return Proxy.newProxyInstance(this.getClass().getClassLoader(),interfaces,handler);\n  }\n}\n"}
{"nl": "Return the <code>Selector</code> to the cache", "code": "public static void returnSelector(Selector s){\nsynchronized (selectors) {\n    selectors.push(s);\n    if (selectors.size() == 1)     selectors.notify();\n  }\n}\n"}
{"nl": "extracts the l  and u matrices from compact lu representation", "code": "protected void splitLU(FieldMatrix<Fraction> lu,Fraction[][] lowerData,Fraction[][] upperData){\n  if (!lu.isSquare()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,lu.getRowDimension(),lu.getColumnDimension());\n  }\n  if (lowerData.length != lowerData[0].length) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,lowerData[0].length);\n  }\n  if (upperData.length != upperData[0].length) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,upperData.length,upperData[0].length);\n  }\n  if (lowerData.length != upperData.length) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,upperData.length);\n  }\n  if (lowerData.length != lu.getRowDimension()) {\n    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,lowerData.length,lu.getRowDimension());\n  }\n  int n=lu.getRowDimension();\n  for (int i=0; i < n; i++) {\n    for (int j=0; j < n; j++) {\n      if (j < i) {\n        lowerData[i][j]=lu.getEntry(i,j);\n        upperData[i][j]=Fraction.ZERO;\n      }\n else       if (i == j) {\n        lowerData[i][j]=Fraction.ONE;\n        upperData[i][j]=lu.getEntry(i,j);\n      }\n else {\n        lowerData[i][j]=Fraction.ZERO;\n        upperData[i][j]=lu.getEntry(i,j);\n      }\n    }\n  }\n}\n"}
{"nl": "append file to storage server (by callback)", "code": "public int append_file(String group_name,String appender_filename,long file_size,UploadCallback callback) throws IOException, MyException {\n  return this.do_append_file(group_name,appender_filename,file_size,callback);\n}\n"}
{"nl": "v1 -> has start message event v2 -> has no start message event v3 -> has start message event", "code": "public void testDeployIntermediateVersionWithoutMessageStartEvent(){\n  String deploymentId1=deployStartMessageTestProcess();\n  assertEquals(1,getAllEventSubscriptions().size());\n  assertEquals(0,runtimeService.createProcessInstanceQuery().count());\n  runtimeService.startProcessInstanceByMessageAndTenantId(\"myStartMessage\",TENANT_ID);\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  assertEventSubscriptionsCount(1);\n  String deploymentId2=deployProcessWithoutEvents();\n  assertEquals(0,getAllEventSubscriptions().size());\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  try {\n    runtimeService.startProcessInstanceByMessageAndTenantId(\"myStartMessage\",TENANT_ID);\n    fail();\n  }\n catch (  Exception e) {\n  }\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  assertEventSubscriptionsCount(0);\n  String deploymentId3=deployStartMessageTestProcess();\n  assertEquals(1,getAllEventSubscriptions().size());\n  assertEquals(1,runtimeService.createProcessInstanceQuery().count());\n  runtimeService.startProcessInstanceByMessageAndTenantId(\"myStartMessage\",TENANT_ID);\n  assertEquals(2,runtimeService.createProcessInstanceQuery().count());\n  assertEventSubscriptionsCount(1);\n  List<EventSubscriptionEntity> eventSubscriptions=getAllEventSubscriptions();\n  assertEquals(repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId3).singleResult().getId(),eventSubscriptions.get(0).getProcessDefinitionId());\n  cleanup(deploymentId1,deploymentId2,deploymentId3);\n}\n"}
{"nl": "Creates a new image fixture with the default thumbnail sizes and default image delta percentage", "code": "public ImageFixture(){\n}\n"}
{"nl": "Export to YSLD", "code": "private void exportToYSLD(){\n  SLDWriterInterface ysldWriter=SLDWriterFactory.createWriter(SLDOutputFormatEnum.YSLD);\n  for (  SLDDataInterface sldData : sldDataList) {\n    StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);\n    String layerName=sldData.getLayerNameWithOutSuffix();\n    if (sld != null) {\n      String sldString=ysldWriter.encodeSLD(sldData.getResourceLocator(),sld);\n      String ysldFilename=layerName + \".\" + YSLDTool.YSLD_FILE_EXTENSION;\n      String destinationFolder=sldData.getSLDFile().getParent();\n      File fileToSave=new File(destinationFolder,ysldFilename);\n      if (fileToSave.exists()) {\n        ConsoleManager.getInstance().error(this,Localisation.getField(YSLDTool.class,\"YSLDTool.destinationAlreadyExists\") + \" \" + ysldFilename);\n      }\n else {\n        ConsoleManager.getInstance().information(this,Localisation.getField(YSLDTool.class,\"YSLDTool.exportToYSLDMsg\") + \" \" + ysldFilename);\n        BufferedWriter out;\n        try {\n          out=new BufferedWriter(new FileWriter(fileToSave));\n          out.write(sldString);\n          out.close();\n        }\n catch (        IOException e) {\n          ConsoleManager.getInstance().exception(this,e);\n        }\n      }\n    }\n  }\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n"}
{"nl": "gets the next line", "code": "protected String nextLine(){\n  if (pushedBackLine != null) {\n    String result=pushedBackLine;\n    pushedBackLine=null;\n    return result;\n  }\n else   return iterator.next();\n}\n"}
{"nl": "Creates the channel selection object", "code": "private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){\n  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());\n  FilterFactory ff=CommonFactoryFinder.getFilterFactory();\n  Map<String,Expression> options=contrastEnhancement.getOptions();\n  options.put(\"algorithm\",ff.literal(\"StretchToMinimumMaximum\"));\n  options.put(\"minValue\",ff.literal(\"1\"));\n  options.put(\"maxValue\",ff.literal(\"5\"));\n  SelectedChannelType channelType=styleFactory.createSelectedChannelType(\"channel name\",contrastEnhancement);\n  SelectedChannelType[] channels=new SelectedChannelType[3];\n  channels[0]=channelType;\n  channels[1]=channelType;\n  channels[2]=channelType;\n  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);\n  return channelSelection;\n}\n"}
{"nl": "Service set's key", "code": "private static String keyForSet(String name){\n  return \"service_set_\" + name;\n}\n"}
{"nl": "Utility function returning a new unique name for a container", "code": "public String createContainerName(String name){\n  boolean valid=false;\n  int counter=1;\n  while (!valid) {\n    String candidate=name + counter;\n    boolean exists=false;\n    for (    ConstraintWidget widget : mWidgets.values()) {\n      if (widget.getDebugName().equalsIgnoreCase(candidate)) {\n        exists=true;\n        break;\n      }\n    }\n    if (!exists) {\n      valid=true;\n      name=candidate;\n    }\n else {\n      counter++;\n    }\n  }\n  return name;\n}\n"}
{"nl": "If of a comment to start a list from (details below)", "code": "public MarketGetCommentsQuery startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n"}
{"nl": "First line vowel coefficients plus factors, second line consonant coefficients plus factors", "code": "public void saveSelectedFeatures(PrintWriter toSopFile){\n  for (int j=0; j < coeffs.length; j++)   toSopFile.print(coeffs[j] + \" \" + factors[j]+ \" \");\n  toSopFile.println();\n}\n"}
{"nl": "Perform shallow merge of ServiceDocuments using reflection", "code": "public static void mergeServiceDocuments(ServiceDocument copyTo,ServiceDocument copyFrom){\n  mergeServiceDocuments(copyTo,copyFrom,SHALLOW_MERGE_STRATEGY);\n}\n"}
{"nl": "to string", "code": "public String toString(){\n  SimpleDateFormat df=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n  return \"source_ip_addr = \" + this.source_ip_addr + \", \"+ \"file_size = \"+ this.file_size+ \", \"+ \"create_timestamp = \"+ df.format(this.create_timestamp)+ \", \"+ \"crc32 = \"+ this.crc32;\n}\n"}
{"nl": "Discard all context sensitive tuples which are covered by insensitive ones", "code": "@Override public void drop_duplicates(){\n  for (Iterator<AllocNode> it=pt_objs.keySet().iterator(); it.hasNext(); ) {\n    PtInsIntervalManager im=pt_objs.get(it.next());\n    im.removeUselessSegments();\n  }\n}\n"}
{"nl": "Return a tap target for the navigation button (back, up, etc) from the given toolbar", "code": "public static ToolbarTapTarget forToolbarNavigationIcon(Toolbar toolbar,CharSequence title,@Nullable CharSequence description){\n  return new ToolbarTapTarget(toolbar,true,title,description);\n}\n"}
{"nl": "parse a line of SAM format", "code": "@Override public void parse(String aLine) throws IOException {\n  String[] tokens=aLine.trim().split(\"\\t\");\n  parse(tokens,tokens.length);\n}\n"}
{"nl": "Length of the split", "code": "@Override public long length(){\n  return data.size();\n}\n"}
{"nl": "Returns true iff other is a subset of this bitvector", "code": "public boolean isSubsetOf(PointsToBitVector other){\n  BitVector andResult=BitVector.and(this,other);\n  return andResult.equals(this);\n}\n"}
{"nl": "/*    ", "code": "@deprecated public String toString(){\n  return this.id;\n}\n"}
{"nl": "Return a string of a single line of (typically de-stacked) reads", "code": "private String printToScreenOneLine(List<IntervalFeature> listToPrint){\n  List<String> printable=new ArrayList<String>();\n  for (int i=0; i < this.getGc().getMapping().size(); i++) {\n    printable.add(\" \");\n  }\n  for (  IntervalFeature intervalFeature : listToPrint) {\n    if (intervalFeature.getScreenFrom() == -1) {\n      continue;\n    }\n    intervalFeature.setGtfAttributeForName(this.getGtfAttributeForName());\n    String nameOnFeature=intervalFeature.getName().trim() + \"_\";\n    int relPos=0;\n    for (int j=intervalFeature.getScreenFrom(); j <= intervalFeature.getScreenTo(); j++) {\n      String text=intervalFeature.assignTextToFeature(this.isNoFormat());\n      if ((intervalFeature.getScreenTo() - intervalFeature.getScreenFrom() + 1) > 4 && j < intervalFeature.getScreenTo() && relPos < nameOnFeature.length() && !nameOnFeature.equals(\"._\")) {\n        Character x=nameOnFeature.charAt(relPos);\n        if (this.isNoFormat()) {\n          text=Character.toString(x);\n        }\n else {\n          text=FormatGTF.format(x,intervalFeature.getStrand());\n        }\n        relPos+=1;\n      }\n      printable.set(j,text);\n    }\n  }\n  return StringUtils.join(printable,\"\");\n}\n"}
{"nl": "Gets a SerialMessage with the SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE command", "code": "public SerialMessage stopLevelChangeMessage(final String type){\n  logger.debug(\"NODE {}: Creating new message for application command SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE\",this.getNode().getNodeId());\n  SerialMessage result=new SerialMessage(this.getNode().getNodeId(),SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessageType.Request,SerialMessage.SerialMessageClass.SendData,SerialMessage.SerialMessagePriority.Set);\n  byte[] newPayload={(byte)this.getNode().getNodeId(),2,(byte)CommandClass.SWITCH_MULTILEVEL.getKey(),(byte)0x05};\n  result.setMessagePayload(newPayload);\n  return result;\n}\n"}
{"nl": "Handle the last accepted step", "code": "public void handleStep(final ODEStateInterpolator interpolator,final boolean isLast) throws MathIllegalStateException {\n  if (last == null) {\n    first=interpolator.getPreviousState();\n    last=first;\n    forward=interpolator.isForward();\n    if (!forward) {\n      h=-h;\n    }\n  }\n  double nextTime=(mode == StepNormalizerMode.INCREMENT) ? last.getTime() + h : (FastMath.floor(last.getTime() / h) + 1) * h;\n  if (mode == StepNormalizerMode.MULTIPLES && Precision.equals(nextTime,last.getTime(),1)) {\n    nextTime+=h;\n  }\n  boolean nextInStep=isNextInStep(nextTime,interpolator);\n  while (nextInStep) {\n    doNormalizedStep(false);\n    last=interpolator.getInterpolatedState(nextTime);\n    nextTime+=h;\n    nextInStep=isNextInStep(nextTime,interpolator);\n  }\n  if (isLast) {\n    boolean addLast=bounds.lastIncluded() && last.getTime() != interpolator.getCurrentState().getTime();\n    doNormalizedStep(!addLast);\n    if (addLast) {\n      last=interpolator.getCurrentState();\n      doNormalizedStep(true);\n    }\n  }\n}\n"}
{"nl": "Will close this event for modification, except for header data", "code": "public void close(){\n  closed=true;\n}\n"}
{"nl": "Allows to clear a given ImageView Note: Usefull if used in RecyclerViews/ListViews and so on", "code": "public static void clearImageView(final ImageView _imageView){\n  Glide.clear(_imageView);\n}\n"}
{"nl": "removes an existing member from the cluster", "code": "@Override public ListenableFuture<MemberRemoveResponse> removeMember(long memberID){\n  MemberRemoveRequest memberRemoveRequest=MemberRemoveRequest.newBuilder().setID(memberID).build();\n  return clusterStub.memberRemove(memberRemoveRequest);\n}\n"}
{"nl": "apply the parser", "code": "public void apply() throws CanceledException, IOException, ParserConfigurationException, SAXException {\n  if (saxParserFactory == null)   saxParserFactory=SAXParserFactory.newInstance();\n  SAXParser saxParser=saxParserFactory.newSAXParser();\n  saxParser.parse(Basic.getInputStreamPossiblyZIPorGZIP(blastFile.getPath()),this);\n}\n"}
{"nl": "Returns the mode of the file (ascii or binary)", "code": "public boolean isBinary(){\n  return isBinary;\n}\n"}
{"nl": "Required for Externalizable", "code": "public GSXAConnectionFactoryImpl(){\n}\n"}
{"nl": "Find a single face with emotion within a given url", "code": "@NotNull public Emotion findEmotionFromSingleFace(@NotNull String imageUrl){\n  List<Emotion> emotions=emotionBuilder.emotionRecognition(imageUrl).withResult();\n  if (Utils.isEmpty(emotions) || emotions.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(emotions) ? 0 : emotions.size(),\"a single face was not present\");\n  return emotions.get(0);\n}\n"}
{"nl": "Set a boolean value in the preferences editor, to be written back", "code": "public static void putBoolean(String key,boolean value){\n  prefs.edit().putBoolean(key,value).commit();\n}\n"}
{"nl": "when we receive a patch, what would we do? you can overwrite it", "code": "@Override public int onPatchReceived(String path,boolean isUpgrade){\n  int returnCode=patchCheck(path,isUpgrade);\n  if (returnCode == ShareConstants.ERROR_PATCH_OK) {\n    TinkerPatchService.runPatchService(context,path,isUpgrade);\n  }\n else {\n    Tinker.with(context).getLoadReporter().onLoadPatchListenerReceiveFail(new File(path),returnCode,isUpgrade);\n  }\n  return returnCode;\n}\n"}
{"nl": "Parses a string and returns either a LazyObject or LazyArray", "code": "public static LazyElement parse(String str) throws LazyException {\n  if (str.startsWith(\"[\")) {\n    return new LazyArray(str);\n  }\n else {\n    return new LazyObject(str);\n  }\n}\n"}
{"nl": "Delete page from provided location", "code": "public void deletePage(String path) throws IOException {\n  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(CMD_PROPERTY,DELETE_PAGE_COMMAND).put(CHARSET_PROPERTY,UTF_8).put(PATH_PROPERTY,path.toLowerCase()).build()),WCM_COMMAND_URL,String.format(PAGE_DELETED_SUCCESS_MESSAGE_FORMAT,path.toLowerCase()));\n}\n"}
{"nl": "Creates the Paint object for drawing the corners of the border", "code": "public static Paint newCornerPaint(@NonNull Resources resources){\n  final Paint paint=new Paint();\n  paint.setStyle(Paint.Style.STROKE);\n  paint.setStrokeWidth(resources.getDimension(R.dimen.corner_thickness));\n  paint.setColor(resources.getColor(R.color.corner));\n  return paint;\n}\n"}
{"nl": "Adds a new activity to the manifest", "code": "public void addActivity(AXmlNode node){\n  if (activities.isEmpty())   activities=new ArrayList<AXmlNode>();\n  activities.add(node);\n}\n"}
{"nl": "Checks if the TEST mode is on", "code": "private boolean isTestMode(){\n  return ((System.getProperty(\"c2mon.server.testMode\")) != null && (System.getProperty(\"c2mon.server.testMode\").equals(\"true\")));\n}\n"}
{"nl": "this method change the message String to encrypt String using 32bits AES", "code": "public static String encrypt16bits(String message) throws Exception {\n  SecretKeySpec skeySpec=new SecretKeySpec(Settings.sEncryptKey.getBytes(),\"AES\");\n  Cipher cipher=Cipher.getInstance(\"AES\");\n  cipher.init(Cipher.ENCRYPT_MODE,skeySpec);\n  byte[] encrypted=cipher.doFinal(message.getBytes());\n  return Hex.encodeHexString(encrypted);\n}\n"}
{"nl": "load all assignment files", "code": "private Map<String,Integer> loadAssignmentFiles(String cName,String fileName){\n  final File file=new File(Basic.replaceFileSuffix(fileName,\".\" + cName.toLowerCase()));\n  if (file.exists() && file.canRead()) {\n    System.err.println(\"External assignment file for \" + cName + \" detected: \"+ fileName);\n    final Map<String,Integer> map=new HashMap<>();\n    try (final FileInputIterator it=new FileInputIterator(file,true)){\n      while (it.hasNext()) {\n        final String[] tokens=Basic.split(it.next(),'\\t');\n        if (tokens.length == 2 && Basic.isInteger(tokens[1])) {\n          map.put(tokens[0],Basic.parseInt(tokens[1]));\n        }\n      }\n    }\n catch (    IOException ex) {\n      System.err.println(ex.getMessage());\n    }\n    System.err.println(\"Count: \" + map.size());\n    if (map.size() > 0)     return map;\n  }\n  return null;\n}\n"}
{"nl": "duplicate an existing attribute", "code": "public boolean duplicateAttribute(String attribute,String newName,boolean allowReplaceSample){\n  if (allowReplaceSample || !table.columnKeySet().contains(newName)) {\n    Map<String,Object> samples2values=table.column(attribute);\n    boolean result=addAttribute(newName,samples2values,true,false);\n    if (result)     attribute2type.put(newName,attribute2type.get(attribute));\n    return result;\n  }\n  return false;\n}\n"}
{"nl": "Quest complete: %0", "code": "public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_COMPLETE(String value0){\n  return new SM_SYSTEM_MESSAGE(1300620,value0);\n}\n"}
{"nl": "Sends renew event to all transaction participants", "code": "public void renew(long extension) throws LeaseDeniedException, UnknownLeaseException {\n  _leaseRenewed=true;\n  _leaseRenewedExtension=extension;\n  str.setLease(extension);\n  ParticipantHandle[] phs=parthandles();\n  if (phs == null)   return;\n  for (  ParticipantHandle ph : phs) {\n    renewParticipantLease(ph,extension);\n  }\n}\n"}
{"nl": "Walk the widget connections to get the distance to the container in a direction", "code": "private float recursiveConnectedDistanceToRoot(ScoutWidget[] list,Direction direction){\n  if (isDistanceToRootCache(direction)) {\n    return mDistToRootCache[direction.getDirection()];\n  }\n  ConstraintAnchor.Type anchorType=lookupType(direction);\n  ConstraintAnchor anchor=mConstraintWidget.getAnchor(anchorType);\n  if (anchor == null || !anchor.isConnected()) {\n    return Float.NaN;\n  }\n  float margin=anchor.getMargin();\n  ConstraintAnchor toAnchor=anchor.getTarget();\n  ConstraintWidget toWidget=toAnchor.getOwner();\n  if (list[0].mConstraintWidget == toWidget) {\n    return margin;\n  }\n  if (toAnchor.getType() == anchorType) {\n    for (    ScoutWidget scoutWidget : list) {\n      if (scoutWidget.mConstraintWidget == toWidget) {\n        float dist=scoutWidget.recursiveConnectedDistanceToRoot(list,direction);\n        scoutWidget.cacheRootDistance(direction,dist);\n        return margin + dist;\n      }\n    }\n  }\n  if (toAnchor.getType() == lookupType(direction.getOpposite())) {\n    for (    ScoutWidget scoutWidget : list) {\n      if (scoutWidget.mConstraintWidget == toWidget) {\n        margin+=scoutWidget.getLength(direction);\n        float dist=scoutWidget.recursiveConnectedDistanceToRoot(list,direction);\n        scoutWidget.cacheRootDistance(direction,dist);\n        return margin + dist;\n      }\n    }\n  }\n  return Float.NaN;\n}\n"}
{"nl": "Change view visibility", "code": "static void changeViewVisibilityGone(View view){\n  if (view != null && view.getVisibility() == View.VISIBLE)   view.setVisibility(View.GONE);\n}\n"}
{"nl": "Traverse local complexType declarations", "code": "XSComplexTypeDecl traverseLocal(Element complexTypeNode,XSDocumentInfo schemaDoc,SchemaGrammar grammar){\n  Object[] attrValues=fAttrChecker.checkAttributes(complexTypeNode,false,schemaDoc);\n  String complexTypeName=genAnonTypeName(complexTypeNode);\n  contentBackup();\n  XSComplexTypeDecl type=traverseComplexTypeDecl(complexTypeNode,complexTypeName,attrValues,schemaDoc,grammar);\n  contentRestore();\n  grammar.addComplexTypeDecl(type,fSchemaHandler.element2Locator(complexTypeNode));\n  type.setIsAnonymous();\n  fAttrChecker.returnAttrArray(attrValues,schemaDoc);\n  return type;\n}\n"}
{"nl": "Creates a reader from an input split", "code": "@Override public RecordReader createReader(InputSplit split) throws IOException, InterruptedException {\n  RecordReader reader=new ListStringRecordReader();\n  reader.initialize(split);\n  return reader;\n}\n"}
{"nl": "multiple by given matrix", "code": "public void transform(MatrixN mat){\n  final VectorN tmp=new VectorN(size());\n  for (int i=0; i < size(); i++) {\n    double f=0d;\n    for (int j=0; j < size(); j++)     f+=mat.get(i,j) * get(j);\n    tmp.set(i,f);\n  }\n  set(tmp);\n}\n"}
{"nl": "Check if the point coordinate falls within the polygon/MultiPolygon Shape", "code": "public static boolean checkPointWithMultiPolygon(double longitude,double latitude,String multiPolygonJson,FeatureType featureType){\n  try {\n    boolean contains=false;\n    GeometryJSON gtjson=new GeometryJSON();\n    Point point=getGeoJsonPoint(longitude,latitude);\n    if (point != null && point.isValid()) {\n      if (featureType == FeatureType.POLYGON) {\n        Polygon polygon=gtjson.readPolygon(new StringReader(\"{\\\"type\\\":\\\"Polygon\\\", \\\"coordinates\\\":\" + multiPolygonJson + \"}\"));\n        contains=polygon.contains(point);\n      }\n else       if (featureType == FeatureType.MULTI_POLYGON) {\n        MultiPolygon multiPolygon=gtjson.readMultiPolygon(new StringReader(\"{\\\"type\\\":\\\"MultiPolygon\\\", \\\"coordinates\\\":\" + multiPolygonJson + \"}\"));\n        contains=multiPolygon.contains(point);\n      }\n    }\n    return contains;\n  }\n catch (  Exception ex) {\n    return false;\n  }\n}\n"}
{"nl": "Computes the path of tainted data between the source and the sink", "code": "private void computeTaintPaths(final Set<AbstractionAtSink> res){\n  IAbstractionPathBuilder builder=this.pathBuilderFactory.createPathBuilder(maxThreadNum,iCfg);\n  builder.computeTaintPaths(res);\n  this.results=builder.getResults();\n  builder.shutdown();\n}\n"}
{"nl": "Sends all through timedeadband delayed values immediately", "code": "public void sendDelayedTimeDeadbandValues(){\n  this.equipmentLogger.debug(\"sendDelayedTimeDeadbandValues - Sending all time deadband delayed values to the server\");\n  this.equipmentSenderValid.sendDelayedTimeDeadbandValues();\n}\n"}
{"nl": "get the state about game end Boolean", "code": "public boolean isGameEnd(){\n  return isGameEnd;\n}\n"}
{"nl": "Opens the browser to the Official RewiMod Website", "code": "public static void clickButtonRewiModWebsite(){\n  RewiMod.getInstance().openUrl(\"https://rewinside.tv/Thread/57412-Offiziell-RewiMod/\");\n}\n"}
{"nl": "does A part intersect set H?", "code": "public boolean isAintersects(BitSet H){\n  return A.intersects(H);\n}\n"}
{"nl": "read sudo user information - encrypted by using AES 64bits", "code": "private void readSudoUserinformationFromFile(){\n  BufferedReader br;\n  try {\n    br=new BufferedReader(new FileReader(Settings.sServerInfo));\n    sSudoID=EncryptionManager.decrypt64bits(br.readLine());\n    sSudoPassword=EncryptionManager.decrypt64bits(br.readLine());\n    sEmailAddress=EncryptionManager.decrypt64bits(br.readLine());\n    isMakeSudoId=Boolean.parseBoolean(EncryptionManager.decrypt64bits(br.readLine()));\n    br.close();\n  }\n catch (  FileNotFoundException e) {\n    System.out.println(\"serverinfo.jrc do not exist\");\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"file reading complete\");\n}\n"}
{"nl": "Resetting the stack frame means clearing it and putting there the default frame", "code": "public void reset(){\n  localDeque.clear();\n  localDeque.push(new FramePath());\n}\n"}
{"nl": "only supposed to be called at startup time", "code": "public static void registerClass(Class<?> clazz){\n  registrations.add(clazz);\n}\n"}
{"nl": "*************** put", "code": "public static void put(Context context,String fileName,String key,Object ser){\n  put(context,fileName,key,ser,null);\n}\n"}
{"nl": "get directory if this file is currently open", "code": "private Director findOpenDirector(String daaFile){\n  final File file=new File(daaFile);\n  if (file.isFile()) {\n    for (    IDirector dir : ProjectManager.getProjects()) {\n      File aFile=new File(((Director)dir).getDocument().getMeganFile().getFileName());\n      if (aFile.isFile() && aFile.equals(file))       return (Director)dir;\n    }\n  }\n  return null;\n}\n"}
{"nl": "Reason for the complaint", "code": "public VideoReportQuery reason(ReportReason value){\n  return unsafeParam(\"reason\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetCitiesByIdQuery(VkApiClient client,UserActor actor){\n  super(client,\"database.getCitiesById\",Utils.buildParametrizedType(List.class,BaseObject.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "remove an element described by ObjectInfo", "code": "protected void remove_impl(Segment<T> segment,ObjectInfo<T> oi){\n  if (oi.isDeleted())   throw new RuntimeException(\" Stored list- called remove but element already deleted !\");\n  if (segment.getSize() == 0)   throw new RuntimeException(\" Stored list- called remove but list is empty !\");\n  oi.setSubject(null);\n  if (oi.getForwardRef() != null)   oi.getForwardRef().setBackwardRef(oi.getBackwardRef());\n  if (oi.getBackwardRef() != null)   oi.getBackwardRef().setForwardRef(oi.getForwardRef());\n  if (segment.getTail() == oi)   segment.setTail(oi.getBackwardRef());\n  segment.decrementSize();\n  _size.decrementAndGet();\n  oi.setDeleted();\n}\n"}
{"nl": "Called after target member is added", "code": "public void afterMemberAdded(MemberAddedEvent memberAddedEvent){\n}\n"}
{"nl": "Initiate the existing camera apps", "code": "public void takePicture() throws NullPointerException {\n  Intent takePictureIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n  if (takePictureIntent.resolveActivity(activity.getPackageManager()) != null) {\n    File photoFile=Utils.createImageFile(context,dirName,imageName,imageType);\n    if (photoFile != null) {\n      cameraBitmapPath=photoFile.getAbsolutePath();\n      takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(photoFile));\n      activity.startActivityForResult(takePictureIntent,REQUEST_TAKE_PHOTO);\n    }\n else {\n      throw new NullPointerException(\"Bitmap received from camera is null\");\n    }\n  }\n else {\n    throw new NullPointerException(\"Unable to open camera\");\n  }\n}\n"}
{"nl": "This function returns true when the iNum is between the limits [iMin,iMax]", "code": "public final boolean between(int iNum,int iMin,int iMax){\n  return (iNum >= iMin) && (iNum <= iMax);\n}\n"}
{"nl": "ask view to allow user input", "code": "public void unlockUserInput(){\n  commandManager.setEnableCritical(true);\n  locked=false;\n}\n"}
{"nl": "Change to attackMode", "code": "public static final void attackMode(final Summon summon){\n  summon.setMode(SummonMode.ATTACK);\n  Player master=summon.getMaster();\n  PacketSendUtility.sendPacket(master,SM_SYSTEM_MESSAGE.STR_SKILL_SUMMON_ATTACK_MODE(summon.getNameId()));\n  PacketSendUtility.sendPacket(master,new SM_SUMMON_UPDATE(summon));\n  summon.getLifeStats().cancelRestoreTask();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetQueryWithExtended(VkApiClient client){\n  super(client,\"wall.get\",GetExtendedResponse.class);\n  extended(true);\n}\n"}
{"nl": "creat the output files", "code": "static public void createOutputFiles(Result[] result,String fileDst,boolean bAppend) throws IOException {\n  BufferedWriter output=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileDst,bAppend)));\n  for (  Result res : result) {\n    output.write(\"Gen\" + res.getGenNum() + \":  scale of \"+ res.getScale()+ \"  \"+ res.getRemark()+ \"\\n\");\n  }\n  output.close();\n  System.err.println();\n  System.err.println(\"Results saved to file: \" + fileDst);\n}\n"}
{"nl": "Creates a new subEquipment entity in the database", "code": "@Override public void create(final SubEquipmentCacheObject subEquipment) throws SubEquipmentException {\n  if (LOGGER.isDebugEnabled()) {\n    LOGGER.debug(\"create() - Create a subEquipment with the id: \" + subEquipment.getId());\n  }\n  try {\n    subEquipmentMapper.insertSubEquipment(subEquipment);\n  }\n catch (  DataAccessException e) {\n    throw new SubEquipmentException(e.getMessage());\n  }\n}\n"}
{"nl": "Parses, validates and computes normalized version of dateTime object", "code": "protected DateTimeData parse(String str) throws SchemaDateTimeException {\n  DateTimeData date=new DateTimeData(str,this);\n  int len=str.length();\n  int end=indexOf(str,0,len,'T');\n  int dateEnd=getDate(str,0,end,date);\n  getTime(str,end + 1,len,date);\n  if (dateEnd != end) {\n    throw new RuntimeException(str + \" is an invalid dateTime dataype value. \" + \"Invalid character(s) seprating date and time values.\");\n  }\n  validateDateTime(date);\n  saveUnnormalized(date);\n  if (date.utc != 0 && date.utc != 'Z') {\n    normalize(date);\n  }\n  return date;\n}\n"}
{"nl": "compute expected value", "code": "public float computeAlignmentExpected(int queryLength,int rawScore){\n  double bitScore=(float)((lambda * rawScore - lnK) / LN_2);\n  return (float)(((double)getDbLetters() * queryLength * Math.pow(2,-bitScore)));\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoGetTagsQuery(VkApiClient client,UserActor actor,int videoId){\n  super(client,\"video.getTags\",Utils.buildParametrizedType(List.class,VideoTag.class));\n  accessToken(actor.getAccessToken());\n  videoId(videoId);\n}\n"}
{"nl": "Removes all pairs with the given key", "code": "public void removeAll(String key){\n  if (key == null) {\n    throw new NullPointerException(\"key\");\n  }\nsynchronized (contexts) {\n    contexts.removeIf(null);\n  }\n}\n"}
{"nl": "storeEvent Activity destory call", "code": "public static void storeEvent(){\n  if (event == null) {\n    return;\n  }\n  StaticsAgent.storeObject(event);\n}\n"}
{"nl": "Run runnable inside Main Thread UI", "code": "public EventBuilder onUi(Activity activity){\n  this.event.setActivity(activity);\n  this.event.setOnUi(true);\n  return this;\n}\n"}
{"nl": "Extracts the base URL from current request", "code": "public static DmnRestUrlBuilder fromCurrentRequest(){\n  return usingBaseUrl(ServletUriComponentsBuilder.fromCurrentServletMapping().build().toUriString());\n}\n"}
{"nl": "Adding  FORMAT TabSeparatedWithNamesAndTypes if not added adds format only to select queries", "code": "private static String addFormatIfAbsent(String sql,String format){\n  sql=sql.trim();\n  String woSemicolon=Patterns.SEMICOLON.matcher(sql).replaceAll(\"\").trim();\n  if (isSelect(sql) && !woSemicolon.endsWith(\" TabSeparatedWithNamesAndTypes\") && !woSemicolon.endsWith(\" TabSeparated\")&& !woSemicolon.endsWith(\" JSONCompact\")) {\n    if (sql.endsWith(\";\")) {\n      sql=sql.substring(0,sql.length() - 1);\n    }\n    sql+=\" FORMAT \" + format + ';';\n  }\n  return sql;\n}\n"}
{"nl": "/*     ", "code": "@deprecated public Object parseObject(String source,ParsePosition parse_pos){\n  throw new UnsupportedOperationException(\"parsing is not supported\");\n}\n"}
{"nl": "returns a copy", "code": "public Table<R,C,V> copy(){\n  final Table<R,C,V> copy=new Table<>();\n  for (  R row : rowKeySet())   for (  C col : columnKeySet())   copy.put(row,col,get(row,col));\n  return copy;\n}\n"}
{"nl": "Creates a status notification to show the upload progress", "code": "private void notifyUploadStart(UploadFileOperation upload){\n  mLastPercent=0;\n  mNotificationBuilder=NotificationUtils.newNotificationBuilder(this);\n  mNotificationBuilder.setOngoing(true).setSmallIcon(R.drawable.notification_icon).setTicker(getString(R.string.uploader_upload_in_progress_ticker)).setContentTitle(getString(R.string.uploader_upload_in_progress_ticker)).setProgress(100,0,false).setContentText(String.format(getString(R.string.uploader_upload_in_progress_content),0,upload.getFileName()));\n  Intent showUploadListIntent=new Intent(this,UploadListActivity.class);\n  showUploadListIntent.putExtra(FileActivity.EXTRA_FILE,upload.getFile());\n  showUploadListIntent.putExtra(FileActivity.EXTRA_ACCOUNT,upload.getAccount());\n  showUploadListIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n  mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showUploadListIntent,0));\n  if (!upload.isInstantPicture() && !upload.isInstantVideo()) {\n    mNotificationManager.notify(R.string.uploader_upload_in_progress_ticker,mNotificationBuilder.build());\n  }\n}\n"}
{"nl": "funcall_suffix ::= '(' arg_list? ')' arg_list ::= ((arg ',')* arg ','? )?", "code": "private void parseFuncallSuffix(){\n  PsiBuilder.Marker mark=builder.mark();\n  expect(TokenKind.LPAREN,true);\n  if (matches(TokenKind.RPAREN)) {\n    mark.done(BuildElementTypes.ARGUMENT_LIST);\n    return;\n  }\n  parseFuncallArgument();\n  while (!atAnyOfTokens(FUNCALL_TERMINATOR_SET)) {\n    expect(TokenKind.COMMA);\n    if (atAnyOfTokens(FUNCALL_TERMINATOR_SET)) {\n      break;\n    }\n    parseFuncallArgument();\n  }\n  expect(TokenKind.RPAREN,true);\n  mark.done(BuildElementTypes.ARGUMENT_LIST);\n}\n"}
{"nl": "Move request properties to the Config object before storing the state", "code": "private void processRequest(Map<String,Object> request){\n  Map<String,Object> config=new HashMap<>();\n  request.put(\"Config\",config);\n  config.put(\"Hostname\",request.remove(\"Hostname\"));\n  config.put(\"Cmd\",request.remove(\"Cmd\"));\n  config.put(\"Env\",request.remove(\"Env\"));\n  @SuppressWarnings(\"unchecked\") Map<String,Object> hostConfig=(Map<String,Object>)request.get(\"HostConfig\");\n  if (hostConfig == null) {\n    hostConfig=new HashMap<>();\n    request.put(\"HostConfig\",hostConfig);\n  }\n  Map<String,String> portMapping=new HashMap<>();\n  portMapping.put(\"HostIp\",\"0.0.0.0\");\n  portMapping.put(\"HostPort\",\"9999\");\n  List<Map<String,String>> portMappings=Collections.singletonList(portMapping);\n  Map<String,List<Map<String,String>>> allPortMappings=new HashMap<>();\n  allPortMappings.put(\"8080/tcp\",portMappings);\n  hostConfig.put(\"PortBindings\",allPortMappings);\n  Map<String,Object> networkSettings=new HashMap<>();\n  request.put(\"NetworkSettings\",networkSettings);\n  networkSettings.put(\"Ports\",allPortMappings);\n}\n"}
{"nl": "Completely removes player from database", "code": "public static void deletePlayerFromDB(int playerId){\n  DAOManager.getDAO(InventoryDAO.class).deletePlayerItems(playerId);\n  DAOManager.getDAO(PlayerDAO.class).deletePlayer(playerId);\n  DAOManager.getDAO(PlayerGameStatsDAO.class).deletePlayerGameStat(playerId);\n}\n"}
{"nl": "remove rows by id & return the position", "code": "private int removeRowsById(String msgId){\n  int position=-1;\n  if (StringUtil.isNotBlank(msgId)) {\n    boolean find=false;\n    Iterator<Row> iterator=rows.iterator();\n    while (iterator.hasNext()) {\n      Row row=iterator.next();\n      if (msgId.equals(row.getMessage().get_id())) {\n        find=true;\n        position=rows.indexOf(row);\n        iterator.remove();\n      }\n      if (find && !msgId.equals(row.getMessage().get_id())) {\n        break;\n      }\n    }\n  }\n  return position;\n}\n"}
{"nl": "Creates new point with coords 0, 0, 0", "code": "public Point3D(){\n}\n"}
{"nl": "This method will update all players about the level/class change", "code": "public void updateMemberInfo(Player player){\n  PacketSendUtility.broadcastPacketToLegion(player.getLegion(),new SM_LEGION_UPDATE_MEMBER(player,0,\"\"));\n}\n"}
{"nl": "Constructs a new Property instance", "code": "protected Property(final String name,final String getter,final String setter,final Type<?> type,final Type<?> elementType){\n  super();\n  this.name=name;\n  this.getter=getter;\n  this.setter=setter;\n  this.type=type;\n  this.elementType=defaultElementType(type,elementType);\n}\n"}
{"nl": "Add listener for space availability and notify the listener with the current space mode", "code": "public synchronized void addListenerAndNotify(ISpaceModeListener listener) throws RemoteException {\n  SpaceMode currentSpaceMode=_spaceMode;\n  listener.beforeSpaceModeChange(currentSpaceMode);\n  listener.afterSpaceModeChange(currentSpaceMode);\n  _primarySpaceModeListeners.addListener(listener);\n}\n"}
{"nl": "Constructs a SemiVariance with the specified <code>Direction</code> property and default (true) <code>biasCorrected</code> property", "code": "public SemiVariance(final Direction direction){\n  this(true,direction);\n}\n"}
{"nl": "Creates a git repo indexer job which will pull from the list of git repositories and start indexing them", "code": "public void startIndexGitRepoJobs(String uniquename){\n  try {\n    Scheduler scheduler=Singleton.getScheduler();\n    JobDetail job=newJob(IndexGitRepoJob.class).withIdentity(\"updateindex-git-\" + uniquename).build();\n    SimpleTrigger trigger=newTrigger().withIdentity(\"updateindex-git-\" + uniquename).withSchedule(simpleSchedule().withIntervalInSeconds(this.INDEXTIME).repeatForever()).build();\n    job.getJobDataMap().put(\"REPOLOCATIONS\",this.REPOLOCATION);\n    job.getJobDataMap().put(\"LOWMEMORY\",this.LOWMEMORY);\n    scheduler.scheduleJob(job,trigger);\n    scheduler.start();\n  }\n catch (  SchedulerException ex) {\n    LOGGER.severe(\" caught a \" + ex.getClass() + \"\\n with message: \"+ ex.getMessage());\n  }\n}\n"}
{"nl": "Outputs a debug message if debugging is turned on", "code": "private void debugPrint(String msg){\n  if (debug) {\n    System.out.println(toString() + \": \" + msg);\n  }\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  executeImmediately(\"zoom axis=horizontal what=in;\");\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set index=\" + CalculateEcologicalIndices.EUCLIDEAN + \";\");\n}\n"}
{"nl": "is there more data?", "code": "@Override public boolean hasNext(){\n  return hasNextLine();\n}\n"}
{"nl": "Merges another image onto the base image (to the right)", "code": "@NotNull public ImageOverlayBuilder mergeImage(@NotNull BufferedImage mergeImage,@NotNull MergeImagesFilter.Position position){\n  MergeImagesFilter mergeImagesFilter=new MergeImagesFilter(mergeImage,SMALL_PADDING,position);\n  bufferedImage=mergeImagesFilter.applyFilter(bufferedImage);\n  return this;\n}\n"}
{"nl": "Creates a new shapeless material recipe", "code": "public ShapelessMaterialRecipe(ItemStack output,List<Predicate<ItemStack>> matchers){\n  this.output=output;\n  this.matchers=matchers;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosMoveQuery(VkApiClient client,UserActor actor,int targetAlbumId,int photoId){\n  super(client,\"photos.move\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  targetAlbumId(targetAlbumId);\n  photoId(photoId);\n}\n"}
{"nl": "Executed from I/O thread when sending receipt back to client", "code": "@Override public void run(){\n  if (log.isDebugEnabled()) {\n    log.debug(\"[{}] [{}] [{}] Persisted message. cnx {}, sequenceId {}\",producer.topic,producer.producerName,producer.producerId,producer.cnx,sequenceId);\n  }\n  rateIn.recordMultipleEvents(batchSize,msgSize);\n  producer.cnx.ctx().writeAndFlush(Commands.newSendReceipt(producer.producerId,sequenceId,ledgerId,entryId),producer.cnx.ctx().voidPromise());\n  producer.cnx.completedSendOperation();\n  producer.publishOperationCompleted();\n  recycle();\n}\n"}
{"nl": "draw the ring", "code": "private void drawRing(Canvas canvas,Rect bounds){\n  final RectF arcBounds=mTempBounds;\n  final Ring ring=mRing;\n  arcBounds.set(bounds);\n  arcBounds.inset(ring.strokeInset,ring.strokeInset);\n  canvas.drawArc(arcBounds,ring.start,ring.sweep,false,mPaint);\n}\n"}
{"nl": "Adds a handler that is called when information flow results are available", "code": "public void addResultsAvailableHandler(ResultsAvailableHandler handler){\n  this.onResultsAvailable.add(handler);\n}\n"}
{"nl": "Constructs new <tt>SM_DELETE_CHARACTER </tt> packet", "code": "public SM_DELETE_CHARACTER(int playerObjId,int deletionTime){\n  this.playerObjId=playerObjId;\n  this.deletionTime=deletionTime;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosRemoveTagQuery(VkApiClient client,UserActor actor,int photoId,int tagId){\n  super(client,\"photos.removeTag\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n  tagId(tagId);\n}\n"}
{"nl": "Performs prepare to transaction- write to SA all new entries under the xtn, mark taken entries under the xtn", "code": "public void prepare(Context context,ServerTransaction xtn,ArrayList<IEntryHolder> locked_entries,boolean singleParticipant,Map<String,Object> partialUpdatesAndInPlaceUpdatesInfo,boolean shouldReplicate) throws SAException {\n}\n"}
{"nl": "label all nodes in tree that we must keep in induced tree", "code": "private boolean labelToKeepRec(Node v,Set<Integer> ids,NodeSet keep){\n  boolean hasBelow=false;\n  int id=(Integer)v.getInfo();\n  if (ids.size() == 0 || ids.contains(id))   hasBelow=true;\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    Node w=e.getTarget();\n    if (labelToKeepRec(w,ids,keep))     hasBelow=true;\n  }\n  if (hasBelow)   keep.add(v);\n  return hasBelow;\n}\n"}
{"nl": "Prints all results stored in this object to the given writer", "code": "public void printResults(Writer wr) throws IOException {\n  for (  ResultSinkInfo sink : this.results.keySet()) {\n    wr.write(\"Found a flow to sink \" + sink + \", from the following sources:\\n\");\n    for (    ResultSourceInfo source : this.results.get(sink)) {\n      wr.write(\"\\t- \" + source.getSource() + \"\\n\");\n      if (source.getPath() != null && !source.getPath().isEmpty())       wr.write(\"\\t\\ton Path \" + source.getPath() + \"\\n\");\n    }\n  }\n}\n"}
{"nl": "register one global simple type", "code": "public void addGlobalSimpleTypeDecl(XSSimpleType decl){\n  fGlobalTypeDecls.put(decl.getName(),decl);\n  if (decl instanceof XSSimpleTypeDecl) {\n    ((XSSimpleTypeDecl)decl).setNamespaceItem(this);\n  }\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"set magnifier=\" + !isSelected() + \";\");\n}\n"}
{"nl": "Facade related methods", "code": "@Override public void createFacade(String table,FacadeOptions facadeOptions,Audit audit){\n  checkLegalTableName(table);\n  checkNotNull(facadeOptions,\"facadeDefinition\");\n  checkNotNull(audit,\"audit\");\n  _tableDao.createFacade(table,facadeOptions,audit);\n}\n"}
{"nl": "All errors are going to be redirected to the following page", "code": "@RequestMapping(value={\"/error\",\"/accessdenied\"},method=RequestMethod.GET) public String returnErrorView(HttpSession session){\n  Exception ex=(Exception)session.getAttribute(\"SPRING_SECURITY_LAST_EXCEPTION\");\n  ex.printStackTrace();\n  return \"error\";\n}\n"}
{"nl": "/*    ", "code": "@deprecated public static String canonicalize(String id){\n  initRegionData();\n  String result=(String)territoryAliasMap.get(id);\n  if ((result != null) && (regionIndexMap.containsKey(result))) {\n    return result;\n  }\n  if (regionIndexMap.containsKey(id)) {\n    return id;\n  }\n  return \"ZZ\";\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.getComments\",GetCommentsExtendedResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n  extended(true);\n}\n"}
{"nl": "Load all info from the JSONs and display content", "code": "public static void loadContent(Activity context){\n  FragmentPlaces.loadPlacesList(context);\n  FragmentDisasters.loadDisastersList(context);\n  FragmentGoodActs.loadGoodActsList(context);\n}\n"}
{"nl": "Request action to be taken when the RecorderController is connected", "code": "public void withRecorderController(String tag,Consumer<RecorderController> c){\n  c.take(getRecorderController());\n}\n"}
{"nl": "Creates a circular list of nodes of the given size", "code": "public static FloatList createList(int size){\n  FloatList prev=null;\n  FloatList first=null;\n  for (int i=0; i < size; i++) {\n    FloatList cur=new FloatList();\n    cur.prev=prev;\n    if (prev == null) {\n      first=cur;\n    }\n else {\n      prev.next=cur;\n    }\n    prev=cur;\n  }\n  first.prev=prev;\n  prev.next=first;\n  return first;\n}\n"}
{"nl": "Adds the given items to a collection property", "code": "public ChangeSet addAllToCollection(String path,Serializable... newItems){\n  return addAllToCollection(path,Arrays.asList(newItems));\n}\n"}
{"nl": "Below method will used to get the result", "code": "protected void updateData(List<Object[]> listBasedResult){\n  if (tableBlockExecutionInfos.isFixedKeyUpdateRequired()) {\n    updateKeyWithLatestBlockKeygenerator(listBasedResult);\n  }\n}\n"}
{"nl": "Construct an XSObjectList implementation", "code": "public StringListImpl(String[] array,int length){\n  fArray=array;\n  fLength=length;\n  fVector=null;\n}\n"}
{"nl": "Normalize each column of a sequence, based on min/max", "code": "public static JavaRDD<List<List<Writable>>> normalizeSequence(Schema schema,JavaRDD<List<List<Writable>>> data,double min,double max,List<String> excludeColumns){\n  if (excludeColumns == null)   excludeColumns=Arrays.asList(DataFrames.SEQUENCE_UUID_COLUMN,DataFrames.SEQUENCE_INDEX_COLUMN);\n else {\n    excludeColumns=new ArrayList<>(excludeColumns);\n    excludeColumns.add(DataFrames.SEQUENCE_UUID_COLUMN);\n    excludeColumns.add(DataFrames.SEQUENCE_INDEX_COLUMN);\n  }\n  DataFrame frame=DataFrames.toDataFrameSequence(schema,data);\n  return DataFrames.toRecordsSequence(normalize(frame,min,max,excludeColumns)).getSecond();\n}\n"}
{"nl": "read file", "code": "public static StringBuilder readFile(String filePath,String charsetName){\n  File file=new File(filePath);\n  StringBuilder fileContent=new StringBuilder(\"\");\n  if (file == null || !file.isFile()) {\n    return null;\n  }\n  BufferedReader reader=null;\n  try {\n    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);\n    reader=new BufferedReader(is);\n    String line=null;\n    while ((line=reader.readLine()) != null) {\n      if (!fileContent.toString().equals(\"\")) {\n        fileContent.append(\"\\r\\n\");\n      }\n      fileContent.append(line);\n    }\n    return fileContent;\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"IOException occurred. \",e);\n  }\n finally {\n    IOUtil.close(reader);\n  }\n}\n"}
{"nl": "Removes a group from this track", "code": "public void removeGroup(Group group) throws ObjectLacksException {\n  removeGroup(group.getName());\n}\n"}
{"nl": "Check if all the required configuration fields already exists in the Host structure", "code": "public boolean fieldsExistsInHost(){\n  Structure hostStructure=StructureFactory.getStructureByVelocityVarName(\"Host\");\n  List<Field> fieldsInStructure=FieldFactory.getFieldsByStructure(hostStructure.getInode());\n  for (  Field f : fieldsInStructure) {\n    if (Configuration.HOSTFIELDNAME_TWITTERCONSUMERKEY.equalsIgnoreCase(f.getFieldName())) {\n      fieldTwitterConsumerKeyExists=true;\n    }\n else     if (Configuration.HOSTFIELDNAME_TWITTERSECRETCONSUMERKEY.equalsIgnoreCase(f.getFieldName())) {\n      fieldTwitterSecretConsumerKeyExists=true;\n    }\n else     if (Configuration.HOSTFIELDNAME_TWITTERACCESSTOKEN.equalsIgnoreCase(f.getFieldName())) {\n      fieldTwitterAccessTokenExists=true;\n    }\n else     if (Configuration.HOSTFIELDNAME_TWITTERSECRETACCESSTOKEN.equalsIgnoreCase(f.getFieldName())) {\n      fieldTwitterSecretAccessTokenExists=true;\n    }\n else     if (Configuration.HOSTFIELDNAME_TWITTERLINEDIVIDER.equalsIgnoreCase(f.getFieldName())) {\n      fieldLinedividerTwitterConfigurationExists=true;\n    }\n  }\n  if (!fieldTwitterConsumerKeyExists || !fieldTwitterSecretConsumerKeyExists || !fieldTwitterAccessTokenExists|| !fieldTwitterSecretAccessTokenExists|| !fieldLinedividerTwitterConfigurationExists) {\n    return false;\n  }\n  return true;\n}\n"}
{"nl": "add all jars under lib/optional/security", "code": "private void addOptionalSecurityLibs(StringBuilder classpath){\n  addLibs(classpath,Locator.getLibOptionalSecurity());\n}\n"}
{"nl": "Blocked users: %num0 users", "code": "public static SM_SYSTEM_MESSAGE STR_CURRENT_EXCLUDES(int num0){\n  return new SM_SYSTEM_MESSAGE(1300634,num0);\n}\n"}
{"nl": "Your Note: %0", "code": "public static SM_SYSTEM_MESSAGE STR_MSG_READ_TODAY_WORDS(String value0){\n  return new SM_SYSTEM_MESSAGE(1390124,value0);\n}\n"}
{"nl": "Item id", "code": "protected MarketDeleteQuery itemId(int value){\n  return unsafeParam(\"item_id\",value);\n}\n"}
{"nl": "Test if an object is a valid Mindmaps value", "code": "private boolean validValue(Object value){\n  return value != null && !value.toString().isEmpty();\n}\n"}
{"nl": "Sets an attribute store", "code": "public UrlSpaceConfigurer attributeStore(AttributeStore attributeStore){\n  validate();\n  urlSpaceFactoryBean.attributeStore(attributeStore);\n  return this;\n}\n"}
{"nl": "Add new role", "code": "@Override public long addRole(Role role){\n  return sessionTemplate.insert(NAMESPACE + \".addRole\",role);\n}\n"}
{"nl": "call this when tab containing list is deactivated", "code": "public void deactivate(){\n  if (!inSelection) {\n    inSelection=true;\n    try {\n      chartSelection.clearSelectionSeries();\n      this.repaint();\n    }\n  finally {\n      inSelection=false;\n    }\n  }\n}\n"}
{"nl": "Clustering with user-defined target cluster size", "code": "private void clustering(int tagetClusterSize,String linkageType){\n  assert clusterList != null;\n  int minClusterOne=0;\n  int minClusterTwo=0;\n  double minDistance;\n  for (int i=clusterList.size(); i > tagetClusterSize; i--) {\n    minDistance=this.MINDISTANCE;\n    for (int j=0; j < clusterList.size(); j++) {\n      Cluster clusterOne=clusterList.get(j);\n      for (int k=(j + 1); k < clusterList.size(); k++) {\n        Cluster clusterTwo=clusterList.get(k);\n        double distance=getClusterDistance(clusterOne,clusterTwo,linkageType);\n        if (hasSimilarityMeasure()) {\n          if (distance < minDistance) {\n            minDistance=distance;\n            minClusterOne=j;\n            minClusterTwo=k;\n          }\n        }\n else {\n          if (distance > minDistance) {\n            minDistance=distance;\n            minClusterOne=j;\n            minClusterTwo=k;\n          }\n        }\n      }\n    }\n    Cluster clusterOne=clusterList.get(minClusterOne);\n    Cluster clusterTwo=clusterList.get(minClusterTwo);\n    clusterOne.mergeCluster(clusterTwo);\n    clusterList.remove(clusterTwo);\n  }\n  printClusterData();\n}\n"}
{"nl": "Initialize this WebView and set default values", "code": "private void initializeWebView(){\n  mWebViewClient=new FacebookWebViewClient();\n  setWebViewClient(mWebViewClient);\n  mWebChromeClient=new FacebookWebChromeClient(mContext);\n  setWebChromeClient(mWebChromeClient);\n  mWebSettings=getSettings();\n  mInitialized=true;\n  setDefaults();\n}\n"}
{"nl": "Does a HTTP DELETE", "code": "public Response doDelete(String url,Object jsonBody){\n  String formJSON=getJsonString(jsonBody);\n  LOGGER.info(curlCallString(\"DELETE\",url,formJSON));\n  long startTime=System.currentTimeMillis();\n  Response response;\n  if (formJSON != null) {\n    response=given().spec(this.requestSpec).body(formJSON).delete(url);\n  }\n else {\n    response=given().spec(this.requestSpec).delete(url);\n  }\n  long endTime=System.currentTimeMillis();\n  long duration=(endTime - startTime);\n  LOGGER.info(\"Duration for DELETE \" + url + \": \"+ duration);\n  return response;\n}\n"}
{"nl": "how many objects are there?", "code": "public int numberOfObjects(){\n  return table.getGrid().getRowCount() * table.getGrid().getColumnCount();\n}\n"}
{"nl": "close all files used for fetching text", "code": "public void closeAllFiles(){\n  for (  InputReader r : fileId2raf) {\n    try {\n      if (r != null)       r.close();\n    }\n catch (    Exception ex) {\n    }\n  }\n}\n"}
{"nl": "Stores newly created announcement", "code": "private boolean storeNewAnnouncement(int legionId,Timestamp currentTime,String message){\n  return DAOManager.getDAO(LegionDAO.class).saveNewAnnouncement(legionId,currentTime,message);\n}\n"}
{"nl": "Set is board", "code": "public PollsAddVoteQuery isBoard(Boolean value){\n  return unsafeParam(\"is_board\",value);\n}\n"}
{"nl": "Set start comment id", "code": "public BoardGetCommentsQueryWithExtended startCommentId(Integer value){\n  return unsafeParam(\"start_comment_id\",value);\n}\n"}
{"nl": "Create a RegieStat object", "code": "ReggieStat(int type,long t,ServiceRegistrar reggie,String[] groups) throws RemoteException {\n  if (type < DISCOVERED || type > DISCARDED)   throw new IllegalArgumentException(\"bad type\");\n  if (reggie == null)   throw new NullPointerException(\"reggie is null\");\n  this.type=type;\n  eventTime=t;\n  this.groups=groups;\n  LookupLocator locator=reggie.getLocator();\n  machine=locator.getHost();\n  port=locator.getPort();\n  serviceID=reggie.getServiceID();\n}\n"}
{"nl": "Execute findAllChromRegexInGenome() and return the extreme coordinates of the matched features", "code": "protected GenomicCoords genomicCoordsAllChromMatchInGenome(String query,GenomicCoords currentGc) throws IOException, InvalidGenomicCoordsException {\n  List<IntervalFeature> matchedFeatures=findAllChromMatchInGenome(query,currentGc);\n  if (matchedFeatures.size() == 0) {\n    return currentGc;\n  }\n  String chrom=matchedFeatures.get(0).getChrom();\n  int startFrom=matchedFeatures.get(0).getFrom();\n  int endTo=matchedFeatures.get(matchedFeatures.size() - 1).getTo();\n  GenomicCoords allMatchesGc=new GenomicCoords(chrom,startFrom,endTo,currentGc.getSamSeqDict(),currentGc.getUserWindowSize(),currentGc.getFastaFile());\n  return allMatchesGc;\n}\n"}
{"nl": "Adds a host limit to the query (given host AND System HOST", "code": "public void addHostAndIncludeSystemHost(String hostIdentifier){\n  query.append(\" +(conhost:SYSTEM_HOST conhost:\" + hostIdentifier + \")\");\n}\n"}
{"nl": "Initialize an AirMapStatusAdvisory from JSON", "code": "public AirMapStatusAdvisory(JSONObject advisoryJson){\n  constructFromJson(advisoryJson);\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getSecondOfPairFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getSecondOfPairFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Construct a DOMStringListImpl from a Vector", "code": "public DOMStringListImpl(Vector params){\n  fStrings=new ArrayList(params);\n}\n"}
{"nl": "Build sub menus", "code": "private void buildSubMenu(SysMenu fatherMenu,List<Module> modules){\n  fatherMenu.setSubMenus(new ArrayList<SysMenu>());\n  for (  Module module : modules) {\n    if (module.getParent() != null && fatherMenu.getId() == module.getParent().longValue())     fatherMenu.getSubMenus().add(buildMenuFromModule(module));\n  }\n}\n"}
{"nl": "Add an id to the config", "code": "public ResourcesPoet addId(String id){\n  Element bool=document.createElement(\"item\");\n  bool.setAttribute(\"name\",id);\n  bool.setAttribute(\"type\",\"id\");\n  resourceElement.appendChild(bool);\n  return this;\n}\n"}
{"nl": "split into single sample tables", "code": "private Map<Integer,Integer[]>[] sortBySample(int numberOfSamples,Map<Integer,Integer[]> taxonMap){\n  Map<Integer,Integer[]>[] sample2TaxonMap=new HashMap[numberOfSamples];\n  for (int i=0; i < numberOfSamples; i++) {\n    sample2TaxonMap[i]=new HashMap<>();\n  }\n  for (  Integer taxId : taxonMap.keySet()) {\n    Integer[] counts=taxonMap.get(taxId);\n    for (int i=0; i < numberOfSamples; i++) {\n      sample2TaxonMap[i].put(taxId,new Integer[]{counts[i]});\n    }\n  }\n  return sample2TaxonMap;\n}\n"}
{"nl": "Check fusionstones without initialization", "code": "public boolean hasFusionStones(){\n  return fusionStones != null && fusionStones.size() > 0;\n}\n"}
{"nl": "Writes the given bytes to the audio stream", "code": "public boolean write(byte[] audioData){\n  return write(audioData,0,audioData.length);\n}\n"}
{"nl": "Get the command as a single string", "code": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder();\n  List<String> fullCommand=new ArrayList<>();\n  fullCommand.add(command);\n  fullCommand.addAll(switches);\n  fullCommand.addAll(arguments);\n  sb.append(String.join(\" \",fullCommand));\n  return sb.toString();\n}\n"}
{"nl": "Sets the package patterns to scan", "code": "public static Patterns packages(String[] includes,String[] excludes){\n  return new Patterns(includes,excludes);\n}\n"}
{"nl": "get the character at the given position", "code": "public char charAt(int pos){\n  if (pos < getLeadingGaps() || pos >= getLength() - getTrailingGaps())   return 0;\n else   if (alignment == null || !alignment.isTranslate())   return block.charAt(pos - getLeadingGaps());\n else {\n    int which=pos - getLeadingGaps();\n    if ((which % 3) == 0) {\n      if (which + 2 < block.length()) {\n        return (char)SequenceUtils.getAminoAcid(block.charAt(which),block.charAt(which + 1),block.charAt(which + 2));\n      }\n else       return block.charAt(which);\n    }\n else     return ' ';\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "@Override public boolean isApplicable(){\n  return true;\n}\n"}
{"nl": "Constructs the JSON parser", "code": "public JsonParser(JsonFeeder feeder){\n  stack=new byte[16];\n  top=-1;\n  state=GO;\n  push(MODE_DONE);\n  this.feeder=feeder;\n}\n"}
{"nl": "Constructs new instance of <tt>CM_CM_REQUEST_DIALOG </tt> packet", "code": "public CM_START_LOOT(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Get the index of an object", "code": "public static int indexOf(Object[] array,Object objectToFind){\n  if (array == null || array.length == 0 || objectToFind == null) {\n    return -1;\n  }\n  for (int i=0; i < array.length; i++) {\n    Object obj=array[i];\n    if (obj.equals(objectToFind)) {\n      return i;\n    }\n  }\n  return -1;\n}\n"}
{"nl": "Perform merge of ServiceDocuments using the given strategy", "code": "public static void mergeServiceDocuments(ServiceDocument copyTo,ServiceDocument copyFrom,BinaryOperator<Object> fieldMergeStrategy){\n  for (  Field field : copyFrom.getClass().getFields()) {\n    if (ServiceDocument.isBuiltInDocumentField(field.getName()) || Modifier.isStatic(field.getModifiers())) {\n      continue;\n    }\n    try {\n      Object value=field.get(copyFrom);\n      Object oldValue=field.get(copyTo);\n      field.set(copyTo,fieldMergeStrategy.apply(oldValue,value));\n    }\n catch (    IllegalArgumentException|IllegalAccessException e) {\n      throw new RuntimeException(e);\n    }\n  }\n  long exp=copyFrom.documentExpirationTimeMicros;\n  if (exp != 0) {\n    copyTo.documentExpirationTimeMicros=exp < 0 ? 0 : exp;\n  }\n}\n"}
{"nl": "calculate the probability of this being a table", "code": "public float calculateTableConfidence(Rectangle[] widgets){\n  int[][] bounds;\n  mValidTable=true;\n  bounds=new int[4][widgets.length];\n  for (int i=0; i < widgets.length; i++) {\n    Rectangle widget=widgets[i];\n    bounds[0][i]=widget.y;\n    bounds[1][i]=bounds[0][i] + widget.height;\n    bounds[2][i]=widget.x;\n    bounds[3][i]=bounds[2][i] + widget.width;\n  }\n  mRows=Utils.gaps(bounds[0],bounds[1]);\n  mCols=Utils.gaps(bounds[2],bounds[3]);\n  int[] r=Utils.cells(bounds[0],bounds[1]);\n  int[] c=Utils.cells(bounds[2],bounds[3]);\n  Rectangle[][] table=new Rectangle[mCols][mRows];\n  for (  Rectangle widget : widgets) {\n    int row=Utils.getPosition(r,widget.y,widget.y + widget.height);\n    int col=Utils.getPosition(c,widget.x,widget.x + widget.width);\n    if (row == -1 || col == -1) {\n      mValidTable=false;\n      return 0;\n    }\n    table[col][row]=widget;\n  }\n  float sumprob=0;\n  for (  Rectangle[] rec : table) {\n    float prob=alignmentProbability(rec);\n    sumprob=prob + sumprob - (sumprob * prob);\n  }\n  return sumprob;\n}\n"}
{"nl": "init the client information", "code": "public void init(){\n  this.sEnteredRoom=\" \";\n  this.gameStartSet=false;\n  this.playToken=false;\n}\n"}
{"nl": "Renews the legion's rank and SM_ABYSS_RANKING_LEGIONS", "code": "private void renewLegionRanking(){\n  Map<Integer,Integer> newLegionRankingCache=new HashMap<Integer,Integer>();\n  ArrayList<AbyssRankingResult> elyosRanking=getDAO().getAbyssRankingLegions(Race.ELYOS), asmoRanking=getDAO().getAbyssRankingLegions(Race.ASMODIANS);\n  legions.clear();\n  legions.put(Race.ASMODIANS,new SM_ABYSS_RANKING_LEGIONS(lastUpdate,asmoRanking,Race.ASMODIANS));\n  legions.put(Race.ELYOS,new SM_ABYSS_RANKING_LEGIONS(lastUpdate,elyosRanking,Race.ELYOS));\n  for (  AbyssRankingResult result : elyosRanking) {\n    newLegionRankingCache.put(result.getLegionId(),result.getRankPos());\n  }\n  for (  AbyssRankingResult result : asmoRanking) {\n    newLegionRankingCache.put(result.getLegionId(),result.getRankPos());\n  }\n  LegionService.getInstance().performRankingUpdate(newLegionRankingCache);\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public MessagesGetChatUsersQueryWithFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Normalize each column of a sequence, based on min/max", "code": "public static JavaRDD<List<List<Writable>>> normalizeSequence(Schema schema,JavaRDD<List<List<Writable>>> data,double min,double max){\n  return normalizeSequence(schema,data,min,max,null);\n}\n"}
{"nl": "Removes all jump functions", "code": "public synchronized void clear(){\n  this.nonEmptyReverseLookup=new MyConcurrentHashMap<PathEdge<N,D>,D>();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioDeleteAlbumQuery(VkApiClient client,UserActor actor,int albumId){\n  super(client,\"audio.deleteAlbum\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  albumId(albumId);\n}\n"}
{"nl": "What is the current verbosity?", "code": "@Deprecated public int verbosity(){\n  return getVerbosity();\n}\n"}
{"nl": "Creates a new scanner", "code": "public jflex(java.io.Reader in){\n  this.zzReader=in;\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"select what=\");\n  final List<String> labels=new LinkedList<>();\n  if (np.peekMatchAnyTokenIgnoreCase(\"all none previous\")) {\n    labels.add(np.getWordMatchesIgnoringCase(\"all none previous\"));\n    np.matchIgnoreCase(\";\");\n  }\n else   labels.addAll(np.getTokensRespectCase(null,\";\"));\n  final ChartViewer viewer=(ChartViewer)getViewer();\n  final LabelsJList list=viewer.getActiveLabelsJList();\n  for (  String name : labels) {\n    if (name.equalsIgnoreCase(\"all\"))     viewer.getChartSelection().setSelected(list.getName(),list.getAllLabels(),true);\n else     if (name.equalsIgnoreCase(\"none\"))     viewer.getChartSelection().clearSelection(list.getName());\n else     if (name.equals(\"previous\"))     viewer.getChartSelection().setSelected(list.getName(),ProjectManager.getPreviouslySelectedNodeLabels(),true);\n else     viewer.getChartSelection().setSelected(list.getName(),Collections.singletonList(name),true);\n  }\n  viewer.repaint();\n}\n"}
{"nl": "receive pack header", "code": "public static RecvHeaderInfo recvHeader(InputStream in,byte expect_cmd,long expect_body_len) throws IOException {\n  byte[] header;\n  int bytes;\n  long pkg_len;\n  header=new byte[FDFS_PROTO_PKG_LEN_SIZE + 2];\n  if ((bytes=in.read(header)) != header.length) {\n    throw new IOException(\"recv package size \" + bytes + \" != \"+ header.length);\n  }\n  if (header[PROTO_HEADER_CMD_INDEX] != expect_cmd) {\n    throw new IOException(\"recv cmd: \" + header[PROTO_HEADER_CMD_INDEX] + \" is not correct, expect cmd: \"+ expect_cmd);\n  }\n  if (header[PROTO_HEADER_STATUS_INDEX] != 0) {\n    return new RecvHeaderInfo(header[PROTO_HEADER_STATUS_INDEX],0);\n  }\n  pkg_len=ProtoCommon.buff2long(header,0);\n  if (pkg_len < 0) {\n    throw new IOException(\"recv body length: \" + pkg_len + \" < 0!\");\n  }\n  if (expect_body_len >= 0 && pkg_len != expect_body_len) {\n    throw new IOException(\"recv body length: \" + pkg_len + \" is not correct, expect length: \"+ expect_body_len);\n  }\n  return new RecvHeaderInfo((byte)0,pkg_len);\n}\n"}
{"nl": "returns true if name matches one of the patterns", "code": "public boolean match(String name){\n  return getMatch(name) != null;\n}\n"}
{"nl": "Removes all disk cache entries from this instance cache dir", "code": "public void clearCache(){\n  DiskLruCache.clearCache(mCacheDir);\n}\n"}
{"nl": "write size-prefixed bytes", "code": "public void writeSizedPrefixedBytes(byte[] bytes,int offset,int length) throws IOException {\n  writeInt(length);\n  write(bytes,offset,length);\n}\n"}
{"nl": "TypeNotFoundException Handler, returns an error response to the client", "code": "@ExceptionHandler(TypeNotFoundException.class) @ResponseStatus(value=HttpStatus.NOT_FOUND) public @ResponseBody ErrorResponse resolveTypeDescriptorNotFoundException(TypeNotFoundException e) throws IOException {\n  if (logger.isLoggable(Level.FINE))   logger.fine(\"type descriptor for typeName: \" + e.getTypeName() + \" not found, returning error response\");\n  return new ErrorResponse(new ErrorMessage(\"Type: \" + e.getTypeName() + \" is not registered in space\"));\n}\n"}
{"nl": "move the selected interval of sequences down one", "code": "public static boolean moveDown(Alignment alignment,int firstRow,int lastRow){\n  firstRow=Math.max(0,firstRow);\n  if (lastRow >= alignment.getNumberOfSequences() - 1)   return false;\n else {\n    Integer[] array=new Integer[alignment.getNumberOfSequences()];\n    for (int i=0; i < alignment.getNumberOfSequences(); i++)     array[i]=alignment.getOrder(i);\n    int replaced=array[lastRow + 1];\n    System.arraycopy(array,firstRow,array,firstRow + 1,lastRow + 1 - firstRow);\n    array[firstRow]=replaced;\n    alignment.setOrder(Arrays.asList(array));\n    return true;\n  }\n}\n"}
{"nl": "Find a faces within a local image", "code": "@NotNull public List<Face> findFaces(@NotNull InputStream image){\n  return faceTaskBuilder.detectFace(true,true,FaceAttributes.ALL,image).withResult();\n}\n"}
{"nl": "Convert a record to an ndarray", "code": "public static INDArray toArray(Collection<Writable> record,int size){\n  Iterator<Writable> writables=record.iterator();\n  Writable firstWritable=writables.next();\n  if (firstWritable instanceof NDArrayWritable) {\n    NDArrayWritable ret=(NDArrayWritable)firstWritable;\n    return ret.get();\n  }\n else {\n    INDArray vector=Nd4j.create(size);\n    vector.putScalar(0,firstWritable.toDouble());\n    int count=1;\n    while (writables.hasNext()) {\n      Writable w=writables.next();\n      vector.putScalar(count++,w.toDouble());\n    }\n    return vector;\n  }\n}\n"}
{"nl": "Creates a configuration suitable for the given file", "code": "@NotNull public static Configuration create(@NotNull Configuration base,@NotNull VirtualFile file){\n  Configuration configuration=base.clone();\n  LocalResourceRepository resources=AppResourceRepository.getAppResources(base.getModule(),true);\n  ConfigurationMatcher matcher=new ConfigurationMatcher(configuration,resources,file);\n  configuration.getEditedConfig().set(FolderConfiguration.getConfigForFolder(file.getParent().getName()));\n  matcher.adaptConfigSelection(true);\n  return configuration;\n}\n"}
{"nl": "apply the named computation to the taxonomy", "code": "public static int apply(final ViewerBase viewer,String method,final Distances distances) throws IOException {\n  System.err.println(\"Computing \" + method + \" distances\");\n  double[][] profiles=computeProfiles(viewer.getDocument(),viewer);\n  System.err.println(\"Samples: \" + profiles.length + \" classes: \"+ profiles[0].length);\n  for (int x=0; x < profiles.length; x++) {\n    distances.set(x + 1,x + 1,0);\n    for (int y=x + 1; y < profiles.length; y++) {\n      distances.set(x + 1,y + 1,Math.sqrt(computeJSD(profiles[x],profiles[y])));\n      distances.set(y + 1,x + 1,distances.get(x + 1,y + 1));\n    }\n  }\n  return profiles[0].length;\n}\n"}
{"nl": "write the state of the plugin ie the repositories locations", "code": "private void writeState(DataOutputStream dos) throws IOException {\n  dos.writeInt(REPOSITORIES_STATE_FILE_VERSION_3);\n  Collection<ISVNRepositoryLocation> repos=repositories.values();\n  dos.writeInt(repos.size());\n  for (  ISVNRepositoryLocation reposLocation : repos) {\n    SVNRepositoryLocation root=(SVNRepositoryLocation)reposLocation;\n    dos.writeUTF(root.getLocation());\n    if (root.getLabel() == null) {\n      dos.writeUTF(\"\");\n    }\n else {\n      dos.writeUTF(root.getLabel());\n    }\n    if (root.getRepositoryRoot() == null) {\n      dos.writeUTF(\"\");\n    }\n else {\n      dos.writeUTF(root.getRepositoryRoot().toString());\n    }\n  }\n  dos.flush();\n  dos.close();\n}\n"}
{"nl": "Load the posts", "code": "private void loadPosts(){\n  PostsFragment.this.showProgress(true);\n  RxFirebaseDatabase.getInstance().observeValueEvent(firebaseRef).subscribe(new GetPostsSubscriber());\n}\n"}
{"nl": "Below method will be used to add the statistics", "code": "public synchronized void recordStatistics(QueryStatistic statistic){\n}\n"}
{"nl": "Random integer betweeb a-b", "code": "public static int Integer(int min,int max){\n  return random.nextInt(max - min + 1) + min;\n}\n"}
{"nl": "Create a copy of this mapping with the given host port", "code": "public DockerPortMapping withHostPort(int hostPort){\n  DockerPortMapping newMapping=new DockerPortMapping();\n  newMapping.protocol=protocol;\n  newMapping.containerPort=containerPort;\n  newMapping.hostIp=hostIp;\n  newMapping.hostPort=String.valueOf(hostPort);\n  return newMapping;\n}\n"}
{"nl": "warning log", "code": "public static void w(String msg,Exception e){\n  if (LOG_ENABLE) {\n    Log.w(TAG,buildMsg(msg),e);\n  }\n}\n"}
{"nl": "Creates a new Conductor object", "code": "public Conductor(Body[] trainAnchorList,Track[] tracksList,Array<Player> players){\n  super(null,null,null,EntityType.DEFAULT,null);\n  this.players=players;\n  trainAnchors=trainAnchorList;\n  tracks=tracksList;\n  this.setDifficultyMods();\n  initializeConductor();\n}\n"}
{"nl": "Convert comma-separated String to array of Strings", "code": "private static String[] convert(String arg){\n  StringTokenizer tok=new StringTokenizer(arg,\" ,\");\n  String[] array=new String[tok.countTokens()];\n  int i=0;\n  while (tok.hasMoreTokens()) {\n    array[i]=tok.nextToken();\n    i++;\n  }\n  return (array);\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  execute(\"zoom selected;\");\n}\n"}
{"nl": "Close database", "code": "@Override public synchronized void close(){\n  if (myDataBase != null)   myDataBase.close();\n  super.close();\n}\n"}
{"nl": "Can the object be used only by the owner or visitors too", "code": "public boolean isOwnerOnly(){\n  return owner;\n}\n"}
{"nl": "delete a storage server from the global FastDFS cluster", "code": "public boolean deleteStorage(String groupName,String storageIpAddr) throws IOException {\n  return this.deleteStorage(ClientGlobal.g_tracker_group,groupName,storageIpAddr);\n}\n"}
{"nl": "Sets an attribute store", "code": "public EmbeddedSpaceConfigurer leaderSelector(LeaderSelectorConfig leaderSelectorConfig){\n  validate();\n  factoryBean.leaderSelectorConfig(leaderSelectorConfig);\n  return this;\n}\n"}
{"nl": "Deserialize the map to an object", "code": "public static <T>T fromMap(Map<?,?> fromMap,Class<T> targetType){\n  return mapper.convertValue(fromMap,targetType);\n}\n"}
{"nl": "Creates a new storage service on the given HDFS file system using the given serializer", "code": "public HadoopFileSystemStore(FileSystem fs,SerializationService serial){\n  super(serial);\n  hadoopFileSystem=fs;\n}\n"}
{"nl": "Creates the default cumulative probability density test expected values", "code": "@Override public double[] makeCumulativeTestValues(){\n  return new double[]{0.001d,0.01d,0.025d,0.05d,0.1d,0.999d,0.990d,0.975d,0.950d,0.900d};\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());\n  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();\n  if (samples.size() > 0)   execute(\"set nodeShape=circle sample='\" + Basic.toString(samples,\"' '\") + \"';\");\n}\n"}
{"nl": "Asserts that there is a current variant associated to the given tmTextUnit and locales", "code": "protected void assertNoCurrentVariantSet(String errorMessage,List<Long> localeIds,Long tmTextUnitId){\n  for (  Long localeId : localeIds) {\n    TMTextUnitCurrentVariant currentVariant=tmTextUnitCurrentVariantRepository.findByLocale_IdAndTmTextUnit_Id(localeId,tmTextUnitId);\n    assertNull(errorMessage,currentVariant);\n  }\n}\n"}
{"nl": "create an RMA6 file from a pair of DAA files", "code": "public static void createRMA6FileFromDAAPair(String creator,String daaFile1,String daaFile2,String rma6FileName,boolean useCompression,Document doc,int maxMatchesPerRead,boolean hasMagnitudes,ProgressListener progressListener) throws IOException, CanceledException {\n  final RMA6FromBlastCreator rma6Creator=new RMA6FromBlastCreator(creator,BlastFileFormat.DAA,doc.getBlastMode(),new String[]{daaFile1,daaFile2},new String[]{},rma6FileName,useCompression,doc,maxMatchesPerRead,hasMagnitudes);\n  rma6Creator.parseFiles(progressListener);\n}\n"}
{"nl": "****************************** HUNTING REWARD QUERIES", "code": "public HuntingRewardCursor queryHuntingRewardItem(long id){\n  QueryHelper qh=new QueryHelper();\n  qh.Columns=null;\n  qh.Table=S.TABLE_HUNTING_REWARDS;\n  qh.Selection=\"h.\" + S.COLUMN_HUNTING_REWARDS_ITEM_ID + \" = ? \";\n  qh.SelectionArgs=new String[]{\"\" + id};\n  qh.GroupBy=null;\n  qh.Having=null;\n  qh.OrderBy=\"m.\" + S.COLUMN_MONSTERS_ID + \" ASC, \"+ \"h.\"+ S.COLUMN_HUNTING_REWARDS_RANK+ \" DESC, \"+ \"h.\"+ S.COLUMN_HUNTING_REWARDS_ID+ \" ASC\";\n  qh.Limit=null;\n  return new HuntingRewardCursor(wrapJoinHelper(builderHuntingReward(),qh));\n}\n"}
{"nl": "generator file", "code": "private static void generator(String vmFile,Packages pkg) throws Exception {\n  Template template=ve.getTemplate(vmFile);\n  VelocityContext vctx=new VelocityContext();\n  vctx.put(\"package\",pkg);\n  StringWriter sw=new StringWriter();\n  template.merge(vctx,sw);\n  String filePath=getFilePath(vmFile,pkg);\n  createFile(filePath,sw.toString());\n}\n"}
{"nl": "Constructs new instance of <tt>CM_ENTER_WORLD </tt> packet", "code": "public CM_ENTER_WORLD(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Method to parse and validate the options provided", "code": "private boolean parseOptions(){\n  boolean valid=true;\n  if (hasOption(LOCALPROPFILE)) {\n    SystemConfiguration.loadPropsFromFile(new File(getOptionValue(LOCALPROPFILE)));\n  }\n else {\n    for (    String prop : QuerierProps.PROPSLIST) {\n      if (hasOption(prop)) {\n        SystemConfiguration.setProperty(prop,getOptionValue(prop));\n      }\n    }\n  }\n  valid=QuerierProps.validateQuerierProperties();\n  if (valid) {\n    logger.info(\"loading schemas: dataSchemas = \" + SystemConfiguration.getProperty(\"data.schemas\") + \" querySchemas = \"+ SystemConfiguration.getProperty(\"query.schemas\"));\n    try {\n      DataSchemaLoader.initialize();\n      QuerySchemaLoader.initialize();\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n  return valid;\n}\n"}
{"nl": "performs remote invocation method", "code": "protected Object invokeRemote(Object proxy,final IMethod method,Object[] args) throws Throwable {\n  ProxyInvocationHandler remoteInvocationHandler=getInvocationHandler();\n  return remoteInvocationHandler.invoke(proxy,method,args);\n}\n"}
{"nl": "Add an n-tuple to the data", "code": "public void addValue(double[] value) throws MathIllegalArgumentException {\n  MathUtils.checkNotNull(value,LocalizedCoreFormats.INPUT_ARRAY);\n  MathUtils.checkDimension(value.length,k);\n  sumImpl.increment(value);\n  sumSqImpl.increment(value);\n  minImpl.increment(value);\n  maxImpl.increment(value);\n  sumLogImpl.increment(value);\n  geoMeanImpl.increment(value);\n  meanImpl.increment(value);\n  covarianceImpl.increment(value);\n  n++;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetChairsQuery(VkApiClient client,UserActor actor,int facultyId){\n  super(client,\"database.getChairs\",GetChairsResponse.class);\n  accessToken(actor.getAccessToken());\n  facultyId(facultyId);\n}\n"}
{"nl": "Set the element type", "code": "public Builder elementType(final Type<?> elementType){\n  this.elementType=elementType;\n  return this;\n}\n"}
{"nl": "TODO: checkReferenceReturnedByCallable - ternary operator, argument usages ?", "code": "public void visitPhpMethod(Method method){\n  final PhpLanguageLevel phpVersion=PhpProjectConfigurationFacade.getInstance(holder.getProject()).getLanguageLevel();\n  if (phpVersion.hasFeature(PhpLanguageFeature.SCALAR_TYPE_HINTS)) {\n    return;\n  }\n  this.checkParameters(method.getParameters(),method);\n}\n"}
{"nl": "Gets whether the given unit is a merge point in the ICFG", "code": "private boolean isMergePoint(N target){\n  if (icfg.isStartPoint(target))   return true;\n  List<N> preds=icfg.getPredsOf(target);\n  int size=preds.size();\n  if (size > 1)   return true;\n  if (size > 0)   for (  N pred : preds)   if (icfg.isCallStmt(pred))   return true;\n  return false;\n}\n"}
{"nl": "Add a Categorical column, with the specified state names", "code": "public Builder addColumnCategorical(String name,String... stateNames){\n  return addColumn(new CategoricalMetaData(name,stateNames));\n}\n"}
{"nl": "Creates a new scanner", "code": "public smaliFlexLexer(java.io.Reader in){\n  this.zzReader=in;\n}\n"}
{"nl": "store an element", "code": "public IObjectInfo<T> add(T subject){\n  lock.lock();\n  try {\n    IObjectInfo<T> oi=store_impl(subject);\n    updateHashAfterInsertion(oi);\n    return oi;\n  }\n  finally {\n    lock.unlock();\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosCreateAlbumQuery(VkApiClient client,UserActor actor,String title){\n  super(client,\"photos.createAlbum\",PhotoAlbumFull.class);\n  accessToken(actor.getAccessToken());\n  title(title);\n}\n"}
{"nl": "terminate the split brain controller", "code": "synchronized public void terminate(){\n  if (isTerminated())   return;\n  _namingCache.terminate();\n  _isTerminated=true;\n  if (threadPool != null)   threadPool.shutdown();\n  if (_logger.isLoggable(Level.FINE))   _logger.fine(toString() + \" terminated.\");\n}\n"}
{"nl": "returns whether the legend will draw inside the chart or outside", "code": "public boolean isDrawInsideEnabled(){\n  return mDrawInside;\n}\n"}
{"nl": "Fills the title field,", "code": "public void createPage(String title,String exactTemplateName){\n  typeTitle(title);\n  selectTemplate(exactTemplateName);\n  confirm();\n}\n"}
{"nl": "Add a String column (for example, human readable format), derived from the time", "code": "public Builder addStringDerivedColumn(String columnName,String format,DateTimeZone timeZone){\n  derivedColumns.add(new DerivedColumn(columnName,ColumnType.String,format,timeZone,null));\n  return this;\n}\n"}
{"nl": "Verifies 2 different faces to see if they are the same person", "code": "@NotNull public VerificationSet verifyFaces(@NotNull String face1Url,@NotNull String face2Url){\n  Face firstFace=findSingleFace(face1Url);\n  Face secondFace=findSingleFace(face2Url);\n  Verification verification=faceTaskBuilder.verifyFace(firstFace.faceId,secondFace.faceId).withResult();\n  return new VerificationSet(firstFace,secondFace,verification);\n}\n"}
{"nl": "IMPORTANT OpenGL is initialized already", "code": "public void onCreate(){\n}\n"}
{"nl": "Creates a new instance of SpectralSpellInteroperator", "code": "public SpectralSpellInteroperator(String sExecutable,String sInputFile,String[] sArgs){\n  this(sInputFile,sArgs);\n  SSpellExecutable=sExecutable;\n}\n"}
{"nl": "If task already exist - it will be canceled", "code": "public void addTask(TaskId taskId,Future<?> task){\n  cancelTask(taskId);\n  tasks.put(taskId.ordinal(),task);\n}\n"}
{"nl": "Set genre id", "code": "public AppsGetCatalogQuery genreId(Integer value){\n  return unsafeParam(\"genre_id\",value);\n}\n"}
{"nl": "Count occurrence of a character in a String", "code": "public static int countOccurrence(String input,char c){\n  if (input == null) {\n    return 0;\n  }\n  int count=0;\n  for (int i=0; i < input.length(); i++) {\n    count=(input.charAt(i) == c) ? (count + 1) : count;\n  }\n  return count;\n}\n"}
{"nl": "Starts the output of a set of data", "code": "public void begin(int size){\n}\n"}
{"nl": "UncaughtException occurs when the function will be transferred to handle", "code": "@Override public void uncaughtException(Thread thread,Throwable ex){\n  if (handleException(ex)) {\n    System.out.println(ex.toString());\n    deletefile(ExternalPath);\n    String fileName=saveCatchInfo2File(ex);\n    sendCrashLog2PM(ExternalPath + fileName);\n  }\n  if (mDefaultHandler != null) {\n    mDefaultHandler.uncaughtException(thread,ex);\n  }\n  android.os.Process.killProcess(android.os.Process.myPid());\n  System.exit(1);\n}\n"}
{"nl": "input stream to byte", "code": "public static byte[] inputStreamToByte(InputStream in) throws IOException {\n  ByteArrayOutputStream outStream=new ByteArrayOutputStream();\n  byte[] data=new byte[BUFFER_SIZE];\n  int count=-1;\n  while ((count=in.read(data,0,BUFFER_SIZE)) != -1) {\n    outStream.write(data,0,count);\n  }\n  data=null;\n  return outStream.toByteArray();\n}\n"}
{"nl": "Returns a resize policy with the specified resizability along the edges and the given aspect ratio behavior", "code": "@NotNull public static ResizePolicy create(boolean top,boolean right,boolean bottom,boolean left,boolean preserve){\n  int mask=NONE;\n  if (top)   mask|=TOP_EDGE;\n  if (right)   mask|=RIGHT_EDGE;\n  if (bottom)   mask|=BOTTOM_EDGE;\n  if (left)   mask|=LEFT_EDGE;\n  if (preserve)   mask|=PRESERVE_RATIO;\n  return new ResizePolicy(mask);\n}\n"}
{"nl": "Join labels into string", "code": "public static String join(String glue,String[] items){\n  if (glue == null || items == null) {\n    throw new NullPointerException(\"Null args\");\n  }\n  if (items.length == 0) {\n    return \"\";\n  }\n  StringBuilder sb=new StringBuilder();\n  sb.append(items[0]);\n  for (int i=1; i < items.length; i++) {\n    sb.append(glue).append(items[i]);\n  }\n  return sb.toString();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public NewsfeedUnignoreItemQuery(VkApiClient client,UserActor actor,NewsfeedItemType type,int ownerId,int itemId){\n  super(client,\"newsfeed.unignoreItem\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  type(type);\n  ownerId(ownerId);\n  itemId(itemId);\n}\n"}
{"nl": "Parse a list of selected units into the corresponding phone segments", "code": "private List<Phone> parseIntoPhones() throws Exception {\n  phones=new ArrayList<Phone>(units.size() / 2);\n  int u=0;\n  while (u < units.size()) {\n    SelectedUnit unit=units.get(u);\n    HalfPhoneTarget target=(HalfPhoneTarget)unit.getTarget();\n    if (target.isLeftHalf()) {\n      if (u < units.size() - 1) {\n        SelectedUnit nextUnit=units.get(u + 1);\n        HalfPhoneTarget nextTarget=(HalfPhoneTarget)nextUnit.getTarget();\n        if (nextTarget.isRightHalf()) {\n          phones.add(new Phone(unit,nextUnit,sampleRate));\n          u++;\n        }\n else {\n          phones.add(new Phone(unit,null,sampleRate));\n        }\n      }\n else {\n        phones.add(new Phone(unit,null,sampleRate));\n      }\n    }\n else {\n      phones.add(new Phone(null,unit,sampleRate));\n    }\n    u++;\n  }\n  assert u == units.size();\n  insertTargetF0Values();\n  return phones;\n}\n"}
{"nl": "An example output is as follows: {\"name\":\"DynamoDB-export\", \"version\":3, \"entries\":[", "code": "private void writeHeader() throws IOException {\n  String headerJson=new ExportFileHeader(FORMAT_VERSION).writeStream();\n  String headerString=headerJson.substring(0,headerJson.lastIndexOf(RIGHT_BRACE.charAt(0)));\n  out.write(headerString.getBytes(UTF_8));\n  out.write(SEPARATOR_NEWLINE);\n  out.write(ENTRIES_START.getBytes(UTF_8));\n}\n"}
{"nl": "Checks if the given Coordinates are inbetween the other given Coordinates", "code": "public static boolean inbetween(int x1,int y1,int x2,int y2,int width,int height){\n  return x2 >= x1 && y2 >= y1 && x2 < x1 + width && y2 < y1 + height;\n}\n"}
{"nl": "Inner method which handles a request to retrieve configuration reports", "code": "Collection<? extends ClientRequestResult> handleRetrieveConfigurationsRequest(final ClientRequest configurationRequest,final Session session,final Destination replyDestination){\n  if (configurationRequest.getRequestParameter() != null) {\n    return configurationLoader.getConfigurationReports(configurationRequest.getRequestParameter());\n  }\n else {\n    return configurationLoader.getConfigurationReports();\n  }\n}\n"}
{"nl": "force update", "code": "@Override public void forceUpdate(){\n  dataMatrix.clear();\n}\n"}
{"nl": "Note: An annotation attr is associated with a <em>class</em>, method or field so you need to create a new VisibilityAnnotationAttr for", "code": "public FloatElemValPair(String name,char kind,float val){\n  super(name,kind);\n  this.val=new FloatCP(val);\n}\n"}
{"nl": "Handle special cases of version, by default return null to mark a non special case", "code": "private Boolean specialLessThan(PlatformLogicalVersion otherVersion){\n  return null;\n}\n"}
{"nl": "Delete the managed ledger associated with this topic", "code": "private CompletableFuture<Void> delete(boolean failIfHasSubscriptions){\n  CompletableFuture<Void> deleteFuture=new CompletableFuture<>();\n  lock.writeLock().lock();\n  try {\n    if (isFenced) {\n      log.warn(\"[{}] Topic is already being closed or deleted\",topic);\n      deleteFuture.completeExceptionally(new TopicFencedException(\"Topic is already fenced\"));\n      return deleteFuture;\n    }\n    if (usageCount.get() == 0) {\n      isFenced=true;\n      List<CompletableFuture<Void>> futures=Lists.newArrayList();\n      if (failIfHasSubscriptions) {\n        if (!subscriptions.isEmpty()) {\n          isFenced=false;\n          deleteFuture.completeExceptionally(new TopicBusyException(\"Topic has subscriptions\"));\n          return deleteFuture;\n        }\n      }\n else {\n        subscriptions.forEach(null);\n      }\n      FutureUtil.waitForAll(futures).whenComplete(null);\n    }\n else {\n      deleteFuture.completeExceptionally(new TopicBusyException(\"Topic has \" + usageCount.get() + \" connected producers/consumers\"));\n    }\n  }\n  finally {\n    lock.writeLock().unlock();\n  }\n  return deleteFuture;\n}\n"}
{"nl": "Use this method to know whether user is a first time user or not", "code": "public boolean isFirstTimeUser(){\n  return getPreference(\"firstTimeUser\",true);\n}\n"}
{"nl": "insert into the collection according to the Mapping(collection) declaration", "code": "final public static int insertCollection(V v,Class<? extends Bean> t){\n  Table mapping=(Table)t.getAnnotation(Table.class);\n  if (mapping == null) {\n    if (log.isErrorEnabled())     log.error(\"mapping missed in [\" + t + \"] declaretion\");\n    return -1;\n  }\n  if (!X.isEmpty(mapping.name())) {\n    return insertCollection(mapping.name(),v);\n  }\n  return -1;\n}\n"}
{"nl": "Comparison based on ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapPilotPermitCustomProperty && getId().equals(((AirMapPilotPermitCustomProperty)o).getId());\n}\n"}
{"nl": "This method will stop the prison task", "code": "public static void stopPrisonTask(Player player,boolean save){\n  Future<?> prisonTask=player.getController().getTask(TaskId.PRISON);\n  if (prisonTask != null) {\n    if (save) {\n      long delay=player.getPrisonTimer();\n      if (delay < 0) {\n        delay=0;\n      }\n      player.setPrisonTimer(delay);\n    }\n    player.getController().cancelTask(TaskId.PRISON);\n  }\n}\n"}
{"nl": "Start a sync", "code": "private long trySync(String oldLibrary,String newLibrary){\n  JSONObject request=new JSONObject();\n  try {\n    request.put(\"old_library\",oldLibrary);\n    request.put(\"new_library\",newLibrary);\n    request.put(\"favorites_only\",favoritesOnly);\n    JSONObject results=new JSONObject(httpClient.postRequest(syncEndpoint,Collections.<String,String>emptyMap(),request.toString()));\n    if (!results.getBoolean(\"success\")) {\n      throw new RuntimeException(\"Sync failed!\");\n    }\n    return results.getLong(\"task_id\");\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n    throw new RuntimeException(\"Exception making HTTP request!\");\n  }\ncatch (  JSONException e) {\n    throw new RuntimeException(e);\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MarketGetCommentsQuery(VkApiClient client,UserActor actor,int ownerId,int itemId){\n  super(client,\"market.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  ownerId(ownerId);\n  itemId(itemId);\n}\n"}
{"nl": "Executes a loginServer packet task", "code": "public void executeLsPacket(Runnable pkt){\n  execute(pkt);\n}\n"}
{"nl": "will be never invoke", "code": "@Override public void onUserCancel(){\n  if (checkCB != null) {\n    checkCB.onUserCancel();\n  }\n  Recycler.release(this);\n}\n"}
{"nl": "Cancel all tasks associated with this controller (when deleting object)", "code": "public void cancelAllTasks(){\n  for (  int i : tasks.keySet()) {\n    Future<?> task=tasks.get(i);\n    if (task != null && i != TaskId.RESPAWN.ordinal()) {\n      task.cancel(false);\n    }\n  }\n  tasks.clear();\n}\n"}
{"nl": "Set privacy view", "code": "public NotesEditQuery privacyView(List<String> value){\n  return unsafeParam(\"privacy_view\",value);\n}\n"}
{"nl": "Load the record reader with the given height and width", "code": "public VideoRecordReader(int height,int width,List<String> labels){\n  this(height,width,false);\n  this.labels=labels;\n}\n"}
{"nl": "This method will add a new legion member to a legion with VOLUNTEER rank", "code": "private void addLegionMember(Legion legion,Player player){\n  addLegionMember(legion,player,LegionRank.VOLUNTEER);\n}\n"}
{"nl": "Determines whether a SAMRecord matches this filter", "code": "public boolean filterOut(final SAMRecord record){\n  if (include) {\n    if (record.getReadNegativeStrandFlag()) {\n      return false;\n    }\n  }\n else {\n    if (!record.getReadNegativeStrandFlag()) {\n      return false;\n    }\n  }\n  return true;\n}\n"}
{"nl": "Merge a variable with any other variables referred to with the same variable name or id", "code": "private VarAdmin mergeVar(VarAdmin var){\n  boolean changed=true;\n  Set<VarAdmin> varsToMerge=new HashSet<>();\n  while (changed) {\n    List<VarAdmin> vars=varsByName.getOrDefault(var.getName(),Lists.newArrayList());\n    vars.add(var);\n    boolean byNameChange=varsToMerge.addAll(vars);\n    var=Patterns.mergeVars(varsToMerge);\n    boolean byIdChange=var.getId().map(null).orElse(false);\n    var=Patterns.mergeVars(varsToMerge);\n    changed=byNameChange | byIdChange;\n  }\n  return var;\n}\n"}
{"nl": "Set main album", "code": "public MarketEditAlbumQuery mainAlbum(Boolean value){\n  return unsafeParam(\"main_album\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosGetCommentsQuery(VkApiClient client,UserActor actor,int photoId){\n  super(client,\"photos.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  photoId(photoId);\n}\n"}
{"nl": "Have the boss fire - Override", "code": "public void fire(){\n}\n"}
{"nl": "Skip to the end of the current line", "code": "private void skipToNewlineToken(){\n  while (!builder.eof()) {\n    if (currentToken() == ProjectViewTokenType.NEWLINE) {\n      return;\n    }\n    builder.advanceLexer();\n  }\n}\n"}
{"nl": "Cache for a stream", "code": "public OutputStream put(String key) throws FileNotFoundException {\n  return new xFileOutputStream(mCacheManager.newFile(key));\n}\n"}
{"nl": "is viewer uptodate?", "code": "public boolean isUptoDate(){\n  return isUptoDate;\n}\n"}
{"nl": "Creates a new instance of DocumentNGramDistroGraph", "code": "public DocumentNGramDistroGraph(){\n  InitGraphs();\n}\n"}
{"nl": "action to be performed", "code": "@Override public void actionPerformed(ActionEvent ev){\n  execute(\"select what=all;\");\n}\n"}
{"nl": "release SLHolder for this scan", "code": "public void releaseScan(){\n  if (!_singleObjectResult && _pos != null)   _list.freeSLHolder(_pos);\n}\n"}
{"nl": "converts a point from reference coordinates to window coordinates", "code": "public Point2D convertReferenceToWindow(Point2D refPoint){\n  if (scrollBackReferenceRect == null)   return null;\n else   return new Point2D.Double(Math.round(refPoint.getX() * scrollBackReferenceRect.getWidth() + scrollBackReferenceRect.getX()),Math.round(refPoint.getY() * scrollBackReferenceRect.getHeight() + scrollBackReferenceRect.getY()));\n}\n"}
{"nl": "get length of file", "code": "public long length() throws IOException {\n  return position;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public char next(){\n  if (this.nextChar == -1) {\n    findNextChar();\n  }\n  this.curChar=this.nextChar;\n  this.nextChar=-1;\n  return (char)this.curChar;\n}\n"}
{"nl": "Parses the Language File", "code": "private void parse(BufferedReader reader){\n  this.messages.clear();\n  reader.lines().map(null).filter(null).forEach(null);\n}\n"}
{"nl": "Initialize and start space without primary election", "code": "private void initAndStartRegularSpace() throws Exception, RemoteException {\n  changeSpaceState(ISpaceState.STARTING,true,false);\n  for (int retries=1; retries <= RecoveryManager.RECOVERY_RETRIES; retries++) {\n    try {\n      SpaceRecoverStrategy strategy=_recoveryManager.getRecoveryStrategy(SpaceMode.NONE);\n      ISpaceSynchronizeReplicaState recoveryState=strategy.recover();\n      postRecoveryActions(recoveryState);\n      _componentManager.initComponents();\n      changeSpaceState(ISpaceState.STARTED,true,true);\n      _componentManager.startComponents();\n      break;\n    }\n catch (    Exception e) {\n      handleRecoveryFailure(e,retries);\n    }\n  }\n}\n"}
{"nl": "same as above but returns internal type and this one is not overridden by CoreDocumentImpl to return null", "code": "@Override CoreDocumentImpl ownerDocument(){\n  return ownerDocument;\n}\n"}
{"nl": "stop indicate", "code": "public boolean disableCharacteristicIndicate(BluetoothGattCharacteristic characteristic){\n  if (characteristic != null && (characteristic.getProperties() | BluetoothGattCharacteristic.PROPERTY_NOTIFY) > 0) {\n    BleLog.w(TAG,\"characteristic.getProperties():\" + characteristic.getProperties());\n    return setCharacteristicIndication(getBluetoothGatt(),characteristic,false);\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AuthRestoreQuery(VkApiClient client,UserActor actor,String phone){\n  super(client,\"auth.restore\",RestoreResponse.class);\n  accessToken(actor.getAccessToken());\n  phone(phone);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetStreetsByIdQuery(VkApiClient client,UserActor actor,List<Integer> streetIds){\n  super(client,\"database.getStreetsById\",Utils.buildParametrizedType(List.class,Street.class));\n  accessToken(actor.getAccessToken());\n  streetIds(streetIds);\n}\n"}
{"nl": "Constructs new instance of <tt>CM_DELETE_CHARACTER </tt> packet", "code": "public CM_DELETE_CHARACTER(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Quick fix is available on singleLine=\"true\" and does the right thing", "code": "public void testSingleLine() throws Exception {\n  deleteManifest();\n  myFixture.copyFileToProject(BASE_PATH_GLOBAL + \"deprecation/AndroidManifest.xml\",\"AndroidManifest.xml\");\n  myFixture.enableInspections(new AndroidLintInspectionToolProvider.AndroidLintDeprecatedInspection());\n  myFixture.configureFromExistingVirtualFile(myFixture.copyFileToProject(BASE_PATH + \"singleLine.xml\",\"res/layout/singleLine.xml\"));\n  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,\"Replace singleLine=\\\"true\\\" with maxLines=\\\"1\\\"\");\n  assertNotNull(action);\n  doTestWithAction(\"xml\",action);\n}\n"}
{"nl": "Are the two pointers an alias with context insensitive points-to information?", "code": "public boolean isAliasCI(Local l1,Local l2){\n  PointsToSet pts1=geomPts.reachingObjects(l1);\n  PointsToSet pts2=geomPts.reachingObjects(l2);\n  return pts1.hasNonEmptyIntersection(pts2);\n}\n"}
{"nl": "clear all memory", "code": "public static void clearAllMemory(){\n  ImageLoader.getInstance().getConfig().cache.clearMemory();\n  ImageLoader.getInstance().getConfig().cache.clearDiskMemory();\n}\n"}
{"nl": "compute the area of the gaps between rectangles in the list", "code": "public void computeGapAreas(){\n  Rectangle gap=new Rectangle();\n  int area=0;\n  for (int i=0; i < mRectList.length; i++) {\n    Rectangle rectangleA=mRectList[i];\n    for (int j=i + 1; j < mRectList.length; j++) {\n      Rectangle rectangleB=mRectList[j];\n      boolean viable=calculateGap(rectangleA,rectangleB,gap);\n      if (viable) {\n        for (int k=0; k < mRectList.length; k++) {\n          if (k != j && k != i) {\n            if (gap.intersects(mRectList[k])) {\n              viable=false;\n              break;\n            }\n          }\n        }\n      }\n      if (viable) {\n        area+=gap.width * gap.height;\n      }\n    }\n  }\n  mGapArea=area;\n}\n"}
{"nl": "Returns true if given transaction is a  timed transaction", "code": "private boolean isTransactionWithLease(ServerTransaction txn){\n  return txn.getLease() != Long.MAX_VALUE && txn.getLease() != 0;\n}\n"}
{"nl": "Use skill or add intention to use (will be implemented later)", "code": "public static void useSkill(AbstractAI ai2,int skillId){\n  ai2.getOwner().getController().useSkill(skillId);\n}\n"}
{"nl": "Transition to check status", "code": "public void check(){\n  check(ANIMATION_DURATION_MS);\n}\n"}
{"nl": "Required for Externalizable", "code": "public RegisterTypeDescriptorResponseInfo(){\n}\n"}
{"nl": "Sets the owning type", "code": "protected Builder owningType(final Type<?> owningType){\n  this.owningType=owningType;\n  return this;\n}\n"}
{"nl": "Creates a new instance of CASCDistanceCalculator", "code": "public CASCDistanceCalculator(String sPathToCasc) throws IOException {\n  PathToCasc=sPathToCasc;\n  Process p=Runtime.getRuntime().exec(PathToCasc);\n  try {\n    p.waitFor();\n  }\n catch (  InterruptedException iee) {\n    return;\n  }\n}\n"}
{"nl": "Send DEACTIVATE event to all objects with AI2", "code": "private void deactivateObjects(){\n  for (  VisibleObject visObject : objects.values()) {\n    if (visObject instanceof Creature && !(SiegeConfig.BALAUR_AUTO_ASSAULT && visObject instanceof SiegeNpc) && !((Creature)visObject).isFlag()&& !((Creature)visObject).isRaidMonster()) {\n      Creature creature=(Creature)visObject;\n      creature.getAi2().onGeneralEvent(AIEventType.DEACTIVATE);\n    }\n  }\n}\n"}
{"nl": "parses the given command and executes it", "code": "public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"set nodeColor=\");\n  final Color color=np.getColor();\n  final java.util.List<String> samples=new LinkedList<>();\n  if (np.peekMatchIgnoreCase(\"sample=\")) {\n    np.matchIgnoreCase(\"sample=\");\n    while (!np.peekMatchIgnoreCase(\";\")) {\n      samples.add(np.getWordRespectCase());\n    }\n  }\n  np.matchIgnoreCase(\";\");\n  final Document doc=((Director)getDir()).getDocument();\n  if (samples.size() == 0)   samples.addAll(doc.getSampleSelection().getAll());\n  if (samples.size() > 0) {\n    for (    String sample : samples) {\n      doc.getSampleAttributeTable().putSampleColor(sample,color);\n    }\n    doc.setDirty(true);\n  }\n}\n"}
{"nl": "Create the shader with default waves which repeat horizontally, and clamp vertically", "code": "private void createShader(){\n  mDefaultAngularFrequency=2.0f * Math.PI / DEFAULT_WAVE_LENGTH_RATIO / getWidth();\n  mDefaultAmplitude=getHeight() * DEFAULT_AMPLITUDE_RATIO;\n  mDefaultWaterLevel=getHeight() * DEFAULT_WATER_LEVEL_RATIO;\n  mDefaultWaveLength=getWidth();\n  Bitmap bitmap=Bitmap.createBitmap(getWidth(),getHeight(),Bitmap.Config.ARGB_8888);\n  Canvas canvas=new Canvas(bitmap);\n  Paint wavePaint=new Paint();\n  wavePaint.setStrokeWidth(2);\n  wavePaint.setAntiAlias(true);\n  wavePaint.setColor(mFrontWaveColor);\n  final int endX=getWidth() + 1;\n  final int endY=getHeight() + 1;\n  float[] waveY=new float[endX];\n  wavePaint.setColor(mBehindWaveColor);\n  for (int beginX=0; beginX < endX; beginX++) {\n    double wx=beginX * mDefaultAngularFrequency;\n    float beginY=(float)(mDefaultWaterLevel + mDefaultAmplitude * Math.sin(wx));\n    canvas.drawLine(beginX,beginY,beginX,-1,wavePaint);\n    waveY[beginX]=beginY;\n  }\n  wavePaint.setColor(mFrontWaveColor);\n  final int wave2Shift=(int)(mDefaultWaveLength / 4);\n  for (int beginX=0; beginX < endX; beginX++) {\n    canvas.drawLine(beginX,waveY[(beginX + wave2Shift) % endX],beginX,-1,wavePaint);\n  }\n  mWaveShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);\n  mViewPaint.setShader(mWaveShader);\n}\n"}
{"nl": "Creates a new <code>ExecutorScriptingProxyConfigurer</code> on top of the given space", "code": "public ExecutorScriptingProxyConfigurer(GigaSpace gigaSpace){\n  remotingConfigurer=new ExecutorRemotingProxyConfigurer<ScriptingExecutor>(gigaSpace,ScriptingExecutor.class).metaArgumentsHandler(new ScriptingMetaArgumentsHandler()).remoteInvocationAspect(new LazyLoadingRemoteInvocationAspect()).remoteRoutingHandler(new ScriptingRemoteRoutingHandler());\n}\n"}
{"nl": "Prepare to play", "code": "public boolean prepare(){\n  if (songs.isEmpty())   return false;\n  if (playingIndex == NO_POSITION) {\n    playingIndex=0;\n  }\n  return true;\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  Integer[] choices=new Integer[]{0,1,2,3,4,5,6,7,8,9,10,20,40};\n  Integer result=(Integer)JOptionPane.showInputDialog(getViewer().getFrame(),\"Set node size\",\"Set node size\",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),choices,choices[1]);\n  if (result != null)   execute(\"set nodeSize=\" + result + \";\");\n}\n"}
{"nl": "Filter a collection according to some predicate, placing the result in a List", "code": "public static <T>void filter(Collection<T> src_,Predicate<T> pred_,List<T> result_){\n  for (  T t : src_) {\n    if (pred_.test(t)) {\n      result_.add(t);\n    }\n  }\n}\n"}
{"nl": "convert a SPTK file into contour[]", "code": "private double[] readSPTKF0Data(String lf0SPTKFile) throws IOException {\n  if (!FileUtils.exists(lf0SPTKFile)) {\n    System.out.println(\"SPTK Pitch file not found: \" + lf0SPTKFile);\n    return null;\n  }\n  int numberOfFrames=getNumberOfFrames(lf0SPTKFile);\n  LEDataInputStream lf0Data=new LEDataInputStream(new BufferedInputStream(new FileInputStream(lf0SPTKFile)));\n  double[] f0Data=new double[numberOfFrames];\n  for (int i=0; i < numberOfFrames; i++) {\n    float f0Value=lf0Data.readFloat();\n    if (f0Value < 0) {\n      f0Data[i]=0.0f;\n    }\n else {\n      f0Data[i]=new Double(Math.exp(f0Value));\n    }\n  }\n  return f0Data;\n}\n"}
{"nl": "close associated file or database", "code": "public void close(){\n  try {\n    if (textStorageReader != null)     textStorageReader.closeAllFiles();\n    if (dataIndexReader != null)     dataIndexReader.close();\n  }\n catch (  IOException e) {\n    Basic.caught(e);\n  }\n}\n"}
{"nl": "Gets the punctuation associated with the word", "code": "public static String wordPunc(Item item) throws ProcessException {\n  Item ww=item.getItemAs(Relation.TOKEN);\n  if (ww != null && ww.getNext() != null) {\n    return \"\";\n  }\n else {\n    if (ww != null && ww.getParent() != null) {\n      return ww.getParent().getFeatures().getString(\"punc\");\n    }\n else {\n      return \"\";\n    }\n  }\n}\n"}
{"nl": "Clears all accounts on this gameServer", "code": "public void clearAccountsOnGameServer(){\n  accountsOnGameServer.clear();\n}\n"}
{"nl": "Generates the lifecycle for an Android content provider class", "code": "private void generateContentProviderLifecycle(Set<String> entryPoints,SootClass currentClass,JNopStmt endClassStmt,Local classLocal){\n  createIfStmt(endClassStmt);\n  JNopStmt startWhileStmt=new JNopStmt();\n  JNopStmt endWhileStmt=new JNopStmt();\n  body.getUnits().add(startWhileStmt);\n  createIfStmt(endWhileStmt);\n  boolean hasAdditionalMethods=false;\n  if (modelAdditionalMethods) {\n    for (    SootMethod currentMethod : currentClass.getMethods())     if (entryPoints.contains(currentMethod.toString()))     hasAdditionalMethods|=createPlainMethodCall(classLocal,currentMethod);\n  }\n  addCallbackMethods(currentClass);\n  body.getUnits().add(endWhileStmt);\n  if (hasAdditionalMethods)   createIfStmt(startWhileStmt);\n}\n"}
{"nl": "returns true, if currently locked", "code": "public boolean isLocked(){\n  return locked;\n}\n"}
{"nl": "Extendable Singleton", "code": "protected SybaseDatabaseType(){\n  String bulkType=System.getProperty(BULK_INSERT_TYPE_KEY,\"jtds\");\n  if (bulkType.equalsIgnoreCase(\"file\")) {\n    forceFile=true;\n  }\n  try {\n    Class<?> aClass=Class.forName(\"com.gs.fw.common.mithra.bulkloader.JtdsBcpBulkLoader\");\n    this.bulkConstructor=aClass.getDeclaredConstructor(String.class,String.class,String.class,Integer.TYPE,SybaseDatabaseType.class,Boolean.TYPE);\n  }\n catch (  Exception e) {\n    getLogger().info(\"Sybase bulk loader not found. Bulk loading disabled.\");\n  }\n}\n"}
{"nl": "Checks whether the given method is a library stub method", "code": "private boolean methodIsAndroidStub(SootMethod method){\n  if (!(Options.v().src_prec() == Options.src_prec_apk && method.getDeclaringClass().isLibraryClass() && SystemClassHandler.isClassInSystemPackage(method.getDeclaringClass().getName())))   return false;\n  for (  Unit u : method.getActiveBody().getUnits()) {\n    if (u instanceof DefinitionStmt) {\n      DefinitionStmt defStmt=(DefinitionStmt)u;\n      if (!(defStmt.getRightOp() instanceof ThisRef) && !(defStmt.getRightOp() instanceof ParameterRef) && !(defStmt.getRightOp() instanceof NewExpr))       return false;\n    }\n else     if (u instanceof InvokeStmt) {\n      InvokeStmt stmt=(InvokeStmt)u;\n      SootMethod callee=stmt.getInvokeExpr().getMethod();\n      if (!callee.getSubSignature().equals(\"void <init>(java.lang.String)\"))       if (!(method.getDeclaringClass().hasSuperclass() && callee.getDeclaringClass() == method.getDeclaringClass().getSuperclass() && callee.getName().equals(\"<init>\")))       return false;\n    }\n else     if (!(u instanceof ThrowStmt))     return false;\n  }\n  return true;\n}\n"}
{"nl": "Below method will be used to update the fixed length key with the latest block key generator", "code": "private void updateKeyWithLatestBlockKeygenerator(List<Object[]> listBasedResult){\n  try {\n    long[] data=null;\n    ByteArrayWrapper key=null;\n    for (int i=0; i < listBasedResult.size(); i++) {\n      key=(ByteArrayWrapper)listBasedResult.get(i)[0];\n      data=tableBlockExecutionInfos.getBlockKeyGenerator().getKeyArray(key.getDictionaryKey(),tableBlockExecutionInfos.getMaskedByteForBlock());\n      key.setDictionaryKey(QueryUtil.getMaskedKey(restructureInfos.getKeyGenerator().generateKey(data),restructureInfos.getMaxKey(),restructureInfos.getMaskByteRanges(),restructureInfos.getMaskByteRanges().length));\n    }\n  }\n catch (  KeyGenException e) {\n    LOGGER.error(e);\n  }\n}\n"}
{"nl": "Populate the api variables in the given state store", "code": "public void populateApiLevels(int apiLevel,@Nullable IAndroidTarget apiTarget,@NotNull ScopedStateStore state){\n  if (apiLevel >= 1) {\n    if (apiTarget == null) {\n      state.put(myBuildApiKey,Integer.toString(apiLevel));\n    }\n else     if (!apiTarget.isPlatform()) {\n      state.put(myBuildApiKey,AndroidTargetHash.getTargetHashString(apiTarget));\n    }\n else {\n      state.put(myBuildApiKey,TemplateMetadata.getBuildApiString(apiTarget.getVersion()));\n    }\n    state.put(myBuildApiLevelKey,apiLevel);\n    if (apiLevel >= SdkVersionInfo.HIGHEST_KNOWN_API || (apiTarget != null && apiTarget.getVersion().isPreview())) {\n      state.put(myTargetApiLevelKey,apiLevel);\n      if (apiTarget != null) {\n        state.put(myTargetApiStringKey,apiTarget.getVersion().getApiString());\n      }\n else {\n        state.put(myTargetApiStringKey,Integer.toString(apiLevel));\n      }\n    }\n else     if (ourHighestInstalledApiTarget != null) {\n      state.put(myTargetApiLevelKey,ourHighestInstalledApiTarget.getVersion().getApiLevel());\n      state.put(myTargetApiStringKey,ourHighestInstalledApiTarget.getVersion().getApiString());\n    }\n  }\n}\n"}
{"nl": "Convert an image in to a row vector", "code": "public INDArray asRowVector(BufferedImage image){\n  if (centerCropIfNeeded) {\n    image=centerCropIfNeeded(image);\n  }\n  image=scalingIfNeed(image,true);\n  if (channels == 3) {\n    return toINDArrayBGR(image).ravel();\n  }\n  int[][] ret=toIntArrayArray(image);\n  return NDArrayUtil.toNDArray(ArrayUtil.flatten(ret));\n}\n"}
{"nl": "update view", "code": "public void updateView(String what){\n  if (getClassification().getName().equals(\"null\")) {\n    classification=ClassificationManager.get(Classification.Taxonomy,true);\n    getViewerJTree().update();\n  }\n  super.updateView(what);\n  updateStatusBar();\n}\n"}
{"nl": "add a file to the recent files list", "code": "public static void addRecentFile(String pathName){\n  int maxRecentFiles=ProgramProperties.get(MAXRECENTFILES,20);\n  StringTokenizer st=new StringTokenizer(ProgramProperties.get(RECENTFILES,\"\"),\";\");\n  int count=1;\n  java.util.List<String> recentFiles=new LinkedList<>();\n  recentFiles.add(pathName);\n  while (st.hasMoreTokens()) {\n    String next=st.nextToken();\n    if (!pathName.equals(next)) {\n      recentFiles.add(next);\n      if (++count == maxRecentFiles)       break;\n    }\n  }\n  StringBuilder buf=new StringBuilder();\n  for (  String recentFile : recentFiles)   buf.append(recentFile).append(\";\");\n  ProgramProperties.put(RECENTFILES,buf.toString());\n  notifyListChange(RECENTFILES);\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;\n}\n"}
{"nl": "Asserts if the provided text is part of some text, ignoring any uppercase characters", "code": "public void assertTextPresentIgnoreCase(String expected,String actual){\n  assertTextPresent(expected.toLowerCase(),actual.toLowerCase());\n}\n"}
{"nl": "Execute a join on the specified data", "code": "public static JavaRDD<List<Writable>> executeJoin(Join join,JavaRDD<List<Writable>> left,JavaRDD<List<Writable>> right){\n  JavaPairRDD<List<Writable>,JoinValue> leftJV=left.mapToPair(new MapToJoinValuesFunction(true,join));\n  JavaPairRDD<List<Writable>,JoinValue> rightJV=right.mapToPair(new MapToJoinValuesFunction(false,join));\n  JavaPairRDD<List<Writable>,JoinValue> both=leftJV.union(rightJV);\n  JavaPairRDD<List<Writable>,Iterable<JoinValue>> grouped=both.groupByKey();\n  return grouped.flatMap(new ExecuteJoinFlatMapFunction(join));\n}\n"}
{"nl": "check copy database process after copying to database in device", "code": "private boolean checkDatabase(){\n  SQLiteDatabase checkDB=null;\n  try {\n    String path=DB_PATH + DB_NAME;\n    checkDB=SQLiteDatabase.openDatabase(path,null,SQLiteDatabase.OPEN_READONLY);\n  }\n catch (  SQLException e) {\n    e.printStackTrace();\n    Log.e(\"DB_ERROR\",\"checkDatabase(): Could not open DB\");\n  }\n  if (checkDB != null)   checkDB.close();\n  return checkDB != null ? true : false;\n}\n"}
{"nl": "for RecyclerView", "code": "public static RecyclerView.ViewHolder createViewHolder(ViewGroup parent){\n  View view=LayoutInflater.from(parent.getContext()).inflate(R.layout.item_message,null);\n  return new MessageHolder(view);\n}\n"}
{"nl": "Increment the progress by 1 (of 360)", "code": "public void incrementProgress(){\n  isSpinning=false;\n  progress++;\n  setText(Math.round(((float)progress / 360) * 100) + \"%\");\n  spinHandler.sendEmptyMessage(0);\n}\n"}
{"nl": "returns whether the legend will draw inside the chart or outside", "code": "public boolean isDrawInsideEnabled(){\n  return mDrawInside;\n}\n"}
{"nl": "Return true if already contains the described PagePart", "code": "public boolean containsThumbnail(int userPage,int page,float width,float height,RectF pageRelativeBounds){\n  PagePart fakePart=new PagePart(userPage,page,null,width,height,pageRelativeBounds,true,0);\nsynchronized (thumbnails) {\n    for (    PagePart part : thumbnails) {\n      if (part.equals(fakePart)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n"}
{"nl": "force update", "code": "@Override public void forceUpdate(){\n  dataMatrix.clear();\n}\n"}
{"nl": "Matches: /items/", "code": "public static Uri buildDirUri(){\n  return BASE_URI.buildUpon().appendPath(\"items\").build();\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DatabaseGetStreetsByIdQuery(VkApiClient client,List<Integer> streetIds){\n  super(client,\"database.getStreetsById\",Utils.buildParametrizedType(List.class,Street.class));\n  streetIds(streetIds);\n}\n"}
{"nl": "goto the next object", "code": "public boolean gotoNext(){\n  if (currentTaxonIterator == null) {\n    gotoFirst();\n  }\n else   if (currentTaxonIterator.hasNext())   currentTaxonId=currentTaxonIterator.next();\n else {\n    currentTaxonIterator=null;\n    currentTaxonId=null;\n  }\n  return isCurrentSet();\n}\n"}
{"nl": "if layout manager do not have this method , will return 0", "code": "public int findFirstVisibleItemPosition(){\n  LayoutManager manager=getLayoutManager();\n  int firstVisibleItems=0;\n  if (manager instanceof LinearLayoutManager) {\n    firstVisibleItems=((LinearLayoutManager)manager).findFirstVisibleItemPosition();\n  }\n else   if (manager instanceof GridLayoutManager) {\n    firstVisibleItems=((GridLayoutManager)manager).findFirstVisibleItemPosition();\n  }\n else   if (manager instanceof StaggeredGridLayoutManager) {\n    StaggeredGridLayoutManager sg=((StaggeredGridLayoutManager)manager);\n    int[] items=new int[sg.getSpanCount()];\n    items=((StaggeredGridLayoutManager)manager).findFirstVisibleItemPositions(items);\n    firstVisibleItems=items[0];\n  }\n  return firstVisibleItems;\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public DocsGetUploadServerQuery(VkApiClient client,UserActor actor){\n  super(client,\"docs.getUploadServer\",GetUploadServerResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "notify that creature used a skill", "code": "public void notifySkilluseObservers(Skill skill){\n  notifyObservers(ObserverType.SKILLUSE,skill);\n}\n"}
{"nl": "Returns true if any coordinate of this vector is infinite and none are NaN; false otherwise", "code": "public boolean isInfinite(){\n  return !isNaN() && (Double.isInfinite(x.getReal()) || Double.isInfinite(y.getReal()) || Double.isInfinite(z.getReal()));\n}\n"}
{"nl": "Return contrast normalized object", "code": "public EqualizeHistTransform(Random random,int conversionCode){\n  super(random);\n  this.conversionCode=conversionCode;\n  converter=new OpenCVFrameConverter.ToMat();\n}\n"}
{"nl": "Cleans up open resources", "code": "public void close() throws SAException {\n}\n"}
{"nl": "Clear the selection status for all items", "code": "public void clearSelection(){\n  List<Integer> selection=getSelectedItems();\n  mSelectedItems.clear();\n  for (  Integer i : selection) {\n    notifyItemChanged(i);\n  }\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void w(String tag,String msg){\n  if (isDebug) {\n    Log.w(tag,msg);\n  }\n}\n"}
{"nl": "Calculate physical attack status and damage of the MAIN hand", "code": "private static final AttackStatus calculateMainHandResult(Creature attacker,Creature attacked,AttackStatus attackerStatus,int damage,List<AttackResult> attackList){\n  AttackStatus mainHandStatus=attackerStatus;\n  if (mainHandStatus == null) {\n    mainHandStatus=calculatePhysicalStatus(attacker,attacked,true);\n  }\n  int mainHandHits=1;\n  if (attacker instanceof Player) {\n    Item mainHandWeapon=((Player)attacker).getEquipment().getMainHandWeapon();\n    if (mainHandWeapon != null) {\n      mainHandHits=Rnd.get(1,mainHandWeapon.getItemTemplate().getWeaponStats().getHitCount());\n    }\n  }\n else {\n    mainHandHits=Rnd.get(1,3);\n  }\n  splitPhysicalDamage(attacker,attacked,mainHandHits,damage,mainHandStatus,attackList);\n  return mainHandStatus;\n}\n"}
{"nl": "When Game Server shutdown, have to close all pending client connection", "code": "public void gameServerDisconnected(){\nsynchronized (this) {\n    serverShutdown=true;\n    for (    AionConnection client : loginRequests.values()) {\n      client.close(true);\n    }\n    loginRequests.clear();\n    if (loginServer != null) {\n      loginServer.close(false);\n    }\n  }\n  log.info(\"GameServer disconnected from the Login Server...\");\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  execute(\"load taxonomyFile=ncbi.tre mapfile=ncbi.map;collapse level=2;\");\n}\n"}
{"nl": "Stream that handle Github features", "code": "public StreamGithubMember githubMember(){\n  return this.streamGithubMember;\n}\n"}
{"nl": "Handle exceeded backlog by using policies set in the zookeeper for given topic", "code": "public void handleExceededBacklogQuota(PersistentTopic persistentTopic){\n  DestinationName destination=DestinationName.get(persistentTopic.getName());\n  String namespace=destination.getNamespace();\n  String policyPath=AdminResource.path(\"policies\",namespace);\n  BacklogQuota quota=getBacklogQuota(namespace,policyPath);\n  log.info(\"Backlog quota exceeded for topic [{}]. Applying [{}] policy\",persistentTopic.getName(),quota.getPolicy());\nswitch (quota.getPolicy()) {\ncase consumer_backlog_eviction:\n    dropBacklog(persistentTopic,quota);\n  break;\ncase producer_exception:\ncase producer_request_hold:\ndisconnectProducers(persistentTopic);\nbreak;\ndefault :\nbreak;\n}\n}\n"}
{"nl": "Resolves the Type value of the specified raw Class type", "code": "public static <E>Type<E> valueOf(final Class<E> rawType){\n  if (rawType == null) {\n    return null;\n  }\n else   if (rawType.isAnonymousClass() && rawType.getGenericSuperclass() instanceof ParameterizedType) {\n    ParameterizedType genericSuper=(ParameterizedType)rawType.getGenericSuperclass();\n    return valueOf(genericSuper);\n  }\n else {\n    return intern(rawType,new java.lang.reflect.Type[0],new HashSet<java.lang.reflect.Type>());\n  }\n}\n"}
{"nl": "Notify everyone in knownlist about move event", "code": "protected void notifyAIOnMove(){\n  MovementNotifyTask.getInstance().add(getOwner());\n}\n"}
{"nl": "Checks if given table (class name) exists in space", "code": "public static ITypeDesc checkTableExistence(String tableName,IJSpace space) throws SQLException {\n  try {\n    return ((ISpaceProxy)space).getDirectProxy().getTypeManager().getTypeDescByName(tableName);\n  }\n catch (  SpaceMetadataException ex) {\n    if (ex.getCause() instanceof UnknownTypeException)     throw new SQLException(\"Table [\" + tableName + \"] does not exist\",\"GSP\",-105);\n else     throw ex;\n  }\n}\n"}
{"nl": "Try to return the absolute file path from the given Uri", "code": "public static String uri2FilePath(final Context context,final Uri uri){\n  if (null == uri)   return null;\n  final String scheme=uri.getScheme();\n  String data=null;\n  if (scheme == null)   data=uri.getPath();\n else   if (ContentResolver.SCHEME_FILE.equals(scheme)) {\n    data=uri.getPath();\n  }\n else   if (ContentResolver.SCHEME_CONTENT.equals(scheme)) {\n    Cursor cursor=context.getContentResolver().query(uri,new String[]{MediaStore.Images.ImageColumns.DATA},null,null,null);\n    if (null != cursor) {\n      if (cursor.moveToFirst()) {\n        int index=cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);\n        if (index > -1) {\n          data=cursor.getString(index);\n        }\n      }\n      cursor.close();\n    }\n  }\n  return data;\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  ExtractReadsViewer extractReadsViewer=(ExtractReadsViewer)getParent();\n  Document doc=((Director)getDir()).getDocument();\n  return extractReadsViewer != null && doc.getNumberOfReads() > 0;\n}\n"}
{"nl": "generate viewtype by component", "code": "private int generateViewType(WXComponent component){\n  long id;\n  try {\n    id=Integer.parseInt(component.getDomObject().ref);\n    String type=component.getDomObject().attr.getScope();\n    if (!TextUtils.isEmpty(type)) {\n      if (mRefToViewType == null) {\n        mRefToViewType=new ArrayMap<>();\n      }\n      if (!mRefToViewType.containsKey(type)) {\n        mRefToViewType.put(type,id);\n      }\n      id=mRefToViewType.get(type);\n    }\n  }\n catch (  RuntimeException e) {\n    WXLogUtils.eTag(TAG,e);\n    id=RecyclerView.NO_ID;\n    WXLogUtils.e(TAG,\"getItemViewType: NO ID, this will crash the whole render system of WXListRecyclerView\");\n  }\n  return (int)id;\n}\n"}
{"nl": "rotate the vector using angle", "code": "public Math_Vector rotate(double angle){\n  double rad=angle * TO_RADIANS;\n  double cos=Math.cos(rad);\n  double sin=Math.sin(rad);\n  double newX=this.x * cos - this.y * sin;\n  double newY=this.x * sin + this.y * cos;\n  this.x=newX;\n  this.y=newY;\n  return this;\n}\n"}
{"nl": "Converts to column dictionary integer value", "code": "@Override public int fillConvertedChunkData(int rowId,int columnIndex,int[] row,KeyStructureInfo restructuringInfo){\n  return columnIndex + 1;\n}\n"}
{"nl": "Stops the acquisition thread", "code": "protected void stopJobAcquisitionThread(){\n  if (asyncJobAcquisitionThread != null) {\n    try {\n      asyncJobAcquisitionThread.join();\n    }\n catch (    InterruptedException e) {\n      log.warn(\"Interrupted while waiting for the async job acquisition thread to terminate\",e);\n    }\n    asyncJobAcquisitionThread=null;\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public WallGetCommentsQuery(VkApiClient client,UserActor actor,int postId){\n  super(client,\"wall.getComments\",GetCommentsResponse.class);\n  accessToken(actor.getAccessToken());\n  postId(postId);\n}\n"}
{"nl": "Starts root item and related to the specific launch", "code": "@Override public EntryCreatedRS startRootItem(String projectName,StartTestItemRQ rq){\n  Launch launch=launchRepository.loadStatusProjectRefAndStartTime(rq.getLaunchId());\n  validate(projectName,rq,launch);\n  TestItem item=testItemBuilder.get().addStartItemRequest(rq).addStatus(Status.IN_PROGRESS).addLaunch(launch).build();\n  testItemRepository.save(item);\n  return new EntryCreatedRS(item.getId());\n}\n"}
{"nl": "Add this coord instance to another one to return the sum of the coords", "code": "public Coord add(Coord coord){\n  return new Coord(x + coord.x,y + coord.y);\n}\n"}
{"nl": "Create and schedule an auto-add job", "code": "private static synchronized void createAutoAddJob(IProject project){\n  Job j=new AutoAddJob(project);\n  j.setSystem(true);\n  j.setPriority(Job.SHORT);\n  j.setRule(ResourcesPlugin.getWorkspace().getRoot());\n  j.schedule();\n}\n"}
{"nl": "Creates the default cumulative probability density test input values", "code": "@Override public int[] makeCumulativeTestPoints(){\n  return makeDensityTestPoints();\n}\n"}
{"nl": "Returns the hash code of this grammar", "code": "@Override public int hashCode(){\n  return (fNamespace == null) ? 0 : fNamespace.hashCode();\n}\n"}
{"nl": "Comparison based on Aircraft ID", "code": "@Override public boolean equals(Object o){\n  return o instanceof AirMapTrafficProperties && getAircraftId().equals(((AirMapTrafficProperties)o).getAircraftId());\n}\n"}
{"nl": "Case for declension of user name and surname", "code": "public UsersGetFollowersQueryWithFields nameCase(UsersNameCase value){\n  return unsafeParam(\"name_case\",value);\n}\n"}
{"nl": "Runnable to run on event", "code": "public void execute(EventCallback callback){\n  this.event.setCallback(callback);\n  instance.register(event);\n}\n"}
{"nl": "check exists of the name", "code": "public static boolean exists(String name){\n  if (cache.contains(name)) {\n    return true;\n  }\n  try {\n    if (Helper.exists(name,Access.class)) {\n      cache.add(name);\n      return true;\n    }\n  }\n catch (  Exception e1) {\n    log.error(e1.getMessage(),e1);\n  }\n  return false;\n}\n"}
{"nl": "Reads one packet from given ByteBuffer", "code": "public LsClientPacket handle(ByteBuffer data,LoginServerConnection client){\n  State state=client.getState();\n  int id=data.get() & 0xff;\n  return getPacket(state,id,data,client);\n}\n"}
{"nl": "update the mongo data", "code": "final public static long updateCollection(String collection,Object id,V v,boolean adding){\n  BasicDBObject q=new BasicDBObject().append(X.ID,id);\n  return updateCollection(collection,q,v);\n}\n"}
{"nl": "To initialize each sample as a single cluster", "code": "private void initializeClustering(){\n  assert dataPointSet != null;\n  assert clusterList != null;\n  Iterator<String> it=dataPointSet.iterator();\n  while (it.hasNext()) {\n    ArrayList<String> dataSet=new ArrayList<String>();\n    dataSet.add(it.next());\n    Cluster aCluster=new Cluster(dataSet);\n    clusterList.add(aCluster);\n  }\n}\n"}
{"nl": "Checks whether the given method or one of its transitive callees has side-effects or calls a sink method", "code": "private boolean hasSideEffectsOrCallsSink(SootMethod method,Set<SootMethod> runList){\n  if (!method.hasActiveBody())   return false;\n  Boolean hasSideEffects=methodSideEffects.get(method);\n  if (hasSideEffects != null)   return hasSideEffects;\n  Boolean hasSink=methodSinks.get(method);\n  if (hasSink != null)   return hasSink;\n  if (!runList.add(method))   return false;\n  if (methodIsAndroidStub(method)) {\n    methodSideEffects.put(method,false);\n    return false;\n  }\n  for (  Unit u : method.getActiveBody().getUnits()) {\n    if (u instanceof AssignStmt) {\n      AssignStmt assign=(AssignStmt)u;\n      if (assign.getLeftOp() instanceof FieldRef || assign.getLeftOp() instanceof ArrayRef) {\n        methodSideEffects.put(method,true);\n        return true;\n      }\n    }\n    Stmt s=(Stmt)u;\n    if (taintWrapper != null && taintWrapper.supportsCallee(s)) {\n      methodSideEffects.put(method,true);\n      return true;\n    }\n    if (s.containsInvokeExpr()) {\n      if (sourceSinkManager != null && sourceSinkManager.isSink((Stmt)u,icfg,null)) {\n        methodSinks.put(method,true);\n        return true;\n      }\n      for (Iterator<Edge> edgeIt=Scene.v().getCallGraph().edgesOutOf(u); edgeIt.hasNext(); ) {\n        Edge e=edgeIt.next();\n        if (hasSideEffectsOrCallsSink(e.getTgt().method(),runList))         return true;\n      }\n    }\n  }\n  methodSideEffects.put(method,false);\n  return false;\n}\n"}
{"nl": "Creates a MutableContextSet from an existing map", "code": "public static MutableContextSet fromMap(Map<String,String> map){\n  MutableContextSet set=new MutableContextSet();\n  set.addAll(map);\n  return set;\n}\n"}
{"nl": "Release a held write lock for the passed in key", "code": "public void releaseWriteLockOnKey(K id){\n  if (id != null) {\n    cache.releaseWriteLockOnKey(id);\n    if (LOGGER.isTraceEnabled()) {\n      LOGGER.trace(cache.getName() + \" Released WRITE lock for id=\" + String.valueOf(id));\n    }\n  }\n else {\n    LOGGER.error(\"Trying to release write lock with a NULL key - throwing an exception!\");\n    throw new IllegalArgumentException(\"Trying to release write lock with null key!\");\n  }\n}\n"}
{"nl": "dp to px", "code": "private int dp2px(float dpValue){\n  final float scale=getContext().getResources().getDisplayMetrics().density;\n  return (int)(dpValue * scale + 0.5f);\n}\n"}
{"nl": "Convert milliseconds to specific time unit", "code": "private static long millisecondsToTimeUnit(long milliseconds,int timeUnit){\nswitch (timeUnit) {\ncase TU_MILLISECONDS:\ncase TU_SECONDS:\ncase TU_MINUTES:\ncase TU_HOURS:\ncase TU_DAYS:\n    return Math.abs(milliseconds) / timeUnit;\n}\nreturn -1;\n}\n"}
{"nl": "Interprets the input and converts it to SuggestionValue which can be used to build the suggestion list", "code": "public void handle(Context context,String input,String lastToken,SuggestionValue suggestionValue){\n  if (nextHandler != null) {\n    nextHandler.handle(context,input,lastToken,suggestionValue);\n  }\n}\n"}
{"nl": "draw a Radial Chart", "code": "public void drawChart(Graphics2D gc){\n  colorByClasses=true;\n  colorBySeries=false;\n  doDraw(gc);\n}\n"}
{"nl": "Get the URLs, ensuring when an Object is marshalled the annotation is correct", "code": "private URL[] doGetURLs(ClassLoader cl){\n  if (disableSmartGetUrl) {\n    return super.getURLs();\n  }\n  URL[] urls=null;\n  if (cl.equals(this)) {\n    urls=super.getURLs();\n  }\n else {\n    if (cl instanceof ServiceClassLoader) {\n      ServiceClassLoader scl=(ServiceClassLoader)cl;\n      urls=scl.getURLs();\n    }\n else {\n      urls=super.getURLs();\n    }\n  }\n  return (urls);\n}\n"}
{"nl": "Writes out the given node", "code": "private void writeNode(NodeVisitor parentNodeVisitor,AXmlNode node){\n  NodeVisitor childNodeVisitor=parentNodeVisitor.child(node.getNamespace(),node.getTag());\n  if (!node.isIncluded()) {\n    return;\n  }\n  for (  AXmlAttribute<?> attr : node.getAttributes().values()) {\n    String namespace=attr.getNamespace();\n    if (namespace != null && namespace.isEmpty())     namespace=null;\n    int resourceId=attr.getResourceId();\n    if (resourceId < 0 && !node.getTag().equals(\"manifest\"))     resourceId=getAttributeResourceId(attr.getName());\n    int attrType=attr.getAttributeType();\n    if (attrType < 0)     attrType=attr.getType();\n    childNodeVisitor.attr(namespace,attr.getName(),resourceId,attrType,attr.getValue());\n  }\n  for (  AXmlNode child : node.getChildren())   writeNode(childNodeVisitor,child);\n  childNodeVisitor.end();\n}\n"}
{"nl": "Sign provided text with SHA256withRSA initialized by the private key", "code": "public byte[] sign(final String text) throws DataSigningException {\n  try {\n    final Signature signature=Signature.getInstance(\"SHA256withRSA\");\n    signature.initSign(getPrivateKey());\n    signature.update(text.getBytes(\"UTF-8\"));\n    return signature.sign();\n  }\n catch (  final NoSuchAlgorithmException e) {\n    throw new DataSigningException(e);\n  }\ncatch (  final UnrecoverableKeyException e) {\n    throw new DataSigningException(e);\n  }\ncatch (  final InvalidKeyException e) {\n    throw new DataSigningException(e);\n  }\ncatch (  final SignatureException e) {\n    throw new DataSigningException(e);\n  }\ncatch (  final UnsupportedEncodingException e) {\n    throw new DataSigningException(e);\n  }\ncatch (  final KeyStoreException e) {\n    throw new DataSigningException(e);\n  }\n}\n"}
{"nl": "Invokes the given callback for each key / value pair in the map", "code": "public void forEach(StringMap.ForEachFn<T> forEachFn){\n  for (  String key : internalMap.keySet()) {\n    forEachFn.forEach(internalMap.get(key),key,this);\n  }\n}\n"}
{"nl": "Handles mouse drag in the user interaction with our model", "code": "public void mouseDragged(@AndroidCoordinate int x,@AndroidCoordinate int y){\n  if (myMouseInteraction != null) {\n    myMouseInteraction.mouseDragged(pxToDp(x),pxToDp(y));\n  }\n}\n"}
{"nl": "Create a checked in change set from the given syncinfos", "code": "public SVNCheckedInChangeSet(SyncInfo[] infos){\n  super();\n  add(infos);\n  initData();\n  String formattedDate;\n  if (date == null)   formattedDate=\"n/a\";\n else   formattedDate=DateFormat.getInstance().format(date);\n  setName(revision + \"  [\" + author+ \"]  (\"+ formattedDate+ \")  \"+ comment);\n}\n"}
{"nl": "Utility function to render the current model to layoutlib", "code": "static void renderModel(@NotNull ConstraintModel model){\n  model.getNlModel().requestRender();\n}\n"}
{"nl": "force update", "code": "@Override public void forceUpdate(){\n  zScores.clear();\n}\n"}
{"nl": "Checks whether the value exists", "code": "public boolean isDefined(){\n  return value != null && this instanceof Some;\n}\n"}
{"nl": "post multiple this x mat", "code": "public void postMultiply(MatrixN mat){\n  final MatrixN tmp=new MatrixN(size());\n  for (int j=0; j < size(); j++)   for (int i=0; i < size(); i++) {\n    double f=0.;\n    for (int k=0; k < size(); k++)     f+=get(i,k) * mat.get(k,j);\n    tmp.set(i,j,f);\n  }\n  set(tmp);\n}\n"}
{"nl": "For boundaries, this does nothing;", "code": "@Override protected float evaluate(Target target){\n  return Float.NaN;\n}\n"}
{"nl": "Check if element has attribute with provided value", "code": "public static ExpectedCondition<Boolean> elementHasAttributeWithValue(final WebElement element,final String attributeName,final String attributeValue){\n  return null;\n}\n"}
{"nl": "the print thread information <br> 2015-4-29", "code": "public static void printThread(String tag,String msg){\n  if (IS_DEBUG_OF_THREAD) {\n    Log.w(tag,\"### \" + msg + \" -> \"+ \"{name: \"+ Thread.currentThread().getName()+ \" , \"+ \"id:\"+ Thread.currentThread().getId()+ \"}\");\n  }\n}\n"}
{"nl": "opens a view which shows the profile of the given member", "code": "public void openOtherProfile(@NonNull Activity activity,String memberId,DeepLinkListener callback){\n  this.deepLinkListener=callback;\n  LISession session=LISessionManager.getInstance(activity.getApplicationContext()).getSession();\n  if (!session.isValid()) {\n    callback.onDeepLinkError(new LIDeepLinkError(LIAppErrorCode.NOT_AUTHENTICATED,\"there is no access token\"));\n    return;\n  }\n  try {\n    if (!LIAppVersion.isLIAppCurrent(activity)) {\n      AppStore.goAppStore(activity,true);\n      return;\n    }\n    deepLinkToProfile(activity,memberId,session.getAccessToken());\n  }\n catch (  ActivityNotFoundException e) {\n    callback.onDeepLinkError(new LIDeepLinkError(LIAppErrorCode.LINKEDIN_APP_NOT_FOUND,\"LinkedIn app needs to be either installed or` updated\"));\n    deepLinkListener=null;\n  }\n}\n"}
{"nl": "Configure the files to add to the index", "code": "@CheckReturnValue public AddCmd files(String... files){\n  return files(ImmutableList.copyOf(files));\n}\n"}
{"nl": "test for task inclusion/exclusion (no other filters, no sort)", "code": "public void testQueryWithPagination() throws Exception {\n  TaskQuery query=taskService.createTaskQuery();\n  assertEquals(10,query.count());\n  assertEquals(2,query.listPage(0,2).size());\n  query=taskService.createTaskQuery().excludeSubtasks();\n  assertEquals(3,query.count());\n  assertEquals(1,query.listPage(0,1).size());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AuthConfirmQuery(VkApiClient client,UserActor actor,int clientId,String clientSecret,String phone,String code){\n  super(client,\"auth.confirm\",ConfirmResponse.class);\n  accessToken(actor.getAccessToken());\n  clientId(clientId);\n  clientSecret(clientSecret);\n  phone(phone);\n  code(code);\n}\n"}
{"nl": "Instantiates ButtonFactory", "code": "public ButtonFactory(String buttonTexture,int width,int height,Point disabledStart,Point enabledStart,Point hoveredStart){\n  this.buttonTexture=buttonTexture;\n  this.width=width;\n  this.height=height;\n  this.disabledStart=disabledStart;\n  this.enabledStart=enabledStart;\n  this.hoveredStart=hoveredStart;\n}\n"}
{"nl": "Default modifier for removing text change listener", "code": "static void removeTextChangedListener(TextView textView,TextWatcher watcher){\n  textView.removeTextChangedListener(watcher);\n}\n"}
{"nl": "Check, whether the item can be removed", "code": "public static boolean canRemoveItem(Player player,Item item){\n  ItemTemplate it=item.getItemTemplate();\n  if (it.getCategory() == ItemCategory.QUEST) {\n    return true;\n  }\n  return true;\n}\n"}
{"nl": "write readname and matches to taxa", "code": "private static int writeMatches(char separator,String readName,IReadBlock readBlock,Writer w) throws IOException {\n  int countMatches=0;\n  if (readBlock.getNumberOfAvailableMatchBlocks() == 0)   w.write(String.format(\"%s%c\\n\",readName,separator));\n else {\n    w.write(readName);\n    for (    IMatchBlock matchBlock : readBlock.getMatchBlocks()) {\n      w.write(String.format(\"%c%d%c%.2f\",separator,matchBlock.getTaxonId(),separator,matchBlock.getBitScore()));\n      countMatches++;\n    }\n    w.write(\"\\n\");\n  }\n  return countMatches;\n}\n"}
{"nl": "Replace the Resource class in Host Activity", "code": "private void initResource(){\n  Resources resources=getContext().getResources();\n  try {\n    AssetManager newManager=AssetManager.class.newInstance();\n    Method addAssetPath=newManager.getClass().getMethod(\"addAssetPath\",String.class);\n    addAssetPath.invoke(newManager,DynamicViewManager.getInstance().getUpdateFileFullPath());\n    Resources newResources=new Resources(newManager,resources.getDisplayMetrics(),resources.getConfiguration());\n    Reflect.onObject(getContext()).set(\"mResources\",newResources);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n"}
{"nl": "Required for Externalizable", "code": "public ChangeEntriesSpaceOperationRequest(){\n}\n"}
{"nl": "get current length of file", "code": "public long length() throws IOException {\n  return position;\n}\n"}
{"nl": "get user list by \"access\" token", "code": "@Path(path=\"popup2\",login=true,access=\"access.user.query\") public void popup2(){\n  String access=this.getString(\"access\");\n  List<User> list=null;\n  if (!X.isEmpty(access)) {\n    list=User.loadByAccess(access);\n  }\n else {\n    Beans<User> bs=User.load(W.create().and(X.ID,0,W.OP_GT),0,1000);\n    if (bs != null) {\n      list=bs.getList();\n    }\n  }\n  JSON jo=new JSON();\n  if (list != null && list.size() > 0) {\n    List<JSON> arr=new ArrayList<JSON>();\n    for (    User e : list) {\n      JSON j=new JSON();\n      j.put(\"value\",e.getId());\n      j.put(\"name\",e.get(\"nickname\") + \"(\" + e.get(\"name\")+ \")\");\n      arr.add(j);\n    }\n    jo.put(\"list\",arr);\n    jo.put(X.STATE,200);\n  }\n else {\n    jo.put(X.STATE,201);\n  }\n  this.response(jo);\n}\n"}
{"nl": "each node is numbered by the count of reads that come before it", "code": "private static int computeCountRec(int pid,Node v,ClassificationViewer viewer,int top,NodeIntegerArray numbering){\n  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {\n    top=computeCountRec(pid,e.getTarget(),viewer,top,numbering);\n  }\n  if (v.getOutDegree() == 0) {\n    NodeData data=viewer.getNodeData(v);\n    if (data != null && data.getSummarized() != null)     top+=data.getSummarized()[pid];\n  }\n  numbering.set(v,top);\n  return top;\n}\n"}
{"nl": "supports seek?", "code": "public boolean supportsSeek() throws IOException {\n  return false;\n}\n"}
{"nl": "Wait for the last space to start", "code": "public synchronized void waitForLastSpace() throws InterruptedException {\n  if (!_activeSpaces.isEmpty())   return;\n  _currentSpaceState=StartupState.WAITING;\n  wait();\n  changeState(StartupState.NOT_LAST);\n}\n"}
{"nl": "remove all classification data added by MEGAN (leaves ref annotations)", "code": "public static void removeMEGANClassificationData(DAAHeader header) throws IOException {\n  boolean hasMeganBlock=false;\n  long meganStart=header.getHeaderSize();\n  for (int i=0; i < header.getBlockTypeRankArrayLength(); i++) {\n    BlockType type=header.getBlockType(i);\n    if (type != BlockType.empty) {\n      if (type.toString().startsWith(\"megan\") && !type.equals(BlockType.megan_ref_annotations)) {\n        hasMeganBlock=true;\n        header.setBlockTypeRank(i,BlockType.rank(BlockType.empty));\n        header.setBlockSize(i,0l);\n      }\n else       meganStart+=header.getBlockSize(i);\n    }\n  }\n  if (hasMeganBlock) {\n    header.save();\n    try (RandomAccessFile raf=new RandomAccessFile(header.getFileName(),\"rw\")){\n      raf.setLength(meganStart);\n    }\n   }\n}\n"}
{"nl": "Increment the references", "code": "void incrementRefCounter(){\nsynchronized (mutex) {\n    refCounter++;\n  }\n}\n"}
{"nl": "Converts a spanned text to HTML", "code": "public RTHtml<RTImage,RTAudio,RTVideo> convert(final Spanned text,RTFormat.Html rtFormat){\n  mText=text;\n  mRTFormat=rtFormat;\n  mOut=new StringBuilder();\n  mImages=new ArrayList<>();\n  mParagraphStyles.clear();\n  convertParagraphs();\n  return new RTHtml<>(rtFormat,mOut.toString(),mImages);\n}\n"}
{"nl": "avoid construction", "code": "private ExecutorUtils(){\n}\n"}
{"nl": "Add a Long column, with no restrictions on the min/max values", "code": "public Builder addColumnLong(String name){\n  return addColumn(new LongMetaData(name));\n}\n"}
{"nl": "Checks if npc can expand level", "code": "private static boolean npcCanExpandLevel(WarehouseExpandTemplate clist,int level){\n  return clist.contains(level);\n}\n"}
{"nl": "Returns true if node key is less than upper bound of range", "code": "private boolean isBeforeEnd(FastConcurrentSkipListMap.Node<K,V> n){\n  if (n == null)   return false;\n  if (hi == null)   return true;\n  K k=n.key;\n  if (k == null)   return true;\n  int c=m.compare(k,hi);\n  if (c > 0 || (c == 0 && !hiInclusive))   return false;\n  return true;\n}\n"}
{"nl": "Create the streaming result", "code": "@Override public JavaDStream<INDArray> createStream(){\n  JavaPairInputDStream<String,String> messages=KafkaUtils.createStream(jssc,zkHost,\"canova\",Collections.singletonMap(kafkaTopic,kafkaPartitions));\n  JavaDStream<INDArray> dataset=messages.flatMap(new NDArrayFlatMap(recordToDataSetFunction)).cache();\n  return dataset;\n}\n"}
{"nl": "Utility class - no instances allowed", "code": "private SqlReservedWords(){\n}\n"}
{"nl": "action to be performed", "code": "public void actionPerformed(ActionEvent ev){\n  final File lastOpenFile=ProgramProperties.getFile(ClassificationManager.getMapFileKey(cName,mapType));\n  getDir().notifyLockInput();\n  ImportBlastDialog dialog=(ImportBlastDialog)getParent();\n  final String[] suffixes=(mapType == IdMapper.MapType.Accession ? new String[]{\"map\",\"abin\"} : new String[]{\"map\",\"bin\"});\n  final File file=ChooseFileDialog.chooseFileToOpen(dialog,lastOpenFile,new TextFileFilter(suffixes,true),new TextFileFilter(suffixes,true),ev,\"Open \" + mapType + \" File\");\n  getDir().notifyUnlockInput();\n  if (file != null) {\n    if (file.exists() && file.canRead()) {\n      ProgramProperties.put(ClassificationManager.getMapFileKey(cName,mapType),file);\n      execute(\"load mapFile='\" + file.getPath() + \"' mapType=\"+ mapType+ \" cName=\"+ cName+ \";\");\n    }\n else     NotificationsInSwing.showError(getViewer().getFrame(),\"Failed to open file: \" + file.getPath());\n  }\n}\n"}
{"nl": "uncollapse all selected nodes", "code": "public void uncollapseSelectedNodes(boolean wholeSubtree){\n  final Set<Integer> ids=new HashSet<>();\n  for (Node v=getSelectedNodes().getFirstElement(); v != null; v=getSelectedNodes().getNextElement(v)) {\n    if (v.getOutDegree() == 0) {\n      Integer vid=(Integer)v.getInfo();\n      ids.add(vid);\n      if (!wholeSubtree)       setSelected(v,false);\n    }\n  }\n  final Set<Integer> seen=new HashSet<>();\n  for (  int id : ids) {\n    getCollapsedIds().remove(id);\n    Node vFull=classification.getFullTree().getANode(id);\n    if (!wholeSubtree) {\n      for (Iterator outEdgesFull=vFull.getOutEdges(); outEdgesFull.hasNext(); ) {\n        Edge eFull=(Edge)outEdgesFull.next();\n        Node wFull=eFull.getOpposite(vFull);\n        Integer wid=(Integer)wFull.getInfo();\n        getCollapsedIds().add(wid);\n      }\n    }\n else     uncollapseSelectedNodesRec(vFull,ids,seen);\n  }\n  updateTree();\n}\n"}
{"nl": "Construct an immutable feedback", "code": "public Feedback(CharSequence id,Activity activity,App appInfo,CharSequence userComment,boolean includeScreenshot,Uri screenshotFileUri,File screenshotFile,boolean includeLogs,Uri logsFileUri,File logsFile){\n  this.id=id;\n  this.deviceInfo=new DeviceInfo(activity);\n  this.appInfo=appInfo;\n  this.userComment=userComment;\n  this.includeLogs=includeLogs;\n  if (this.includeLogs) {\n    this.logsFile=logsFile;\n    this.logsFileUri=logsFileUri;\n  }\n else {\n    this.logsFile=null;\n    this.logsFileUri=null;\n  }\n  this.includeScreenshot=includeScreenshot;\n  if (this.includeScreenshot) {\n    this.screenshotFile=screenshotFile;\n    this.screenshotFileUri=screenshotFileUri;\n  }\n else {\n    this.screenshotFileUri=null;\n    this.screenshotFile=null;\n  }\n}\n"}
{"nl": "Create a new ConfigurationParser", "code": "public ConfigurationParser(boolean verify,ClassLoader loader) throws ParserConfigurationException {\n  factory=DocumentBuilderFactory.newInstance();\n  factory.setValidating(verify);\n  factory.setNamespaceAware(true);\n  factory.setExpandEntityReferences(true);\n  factory.setCoalescing(true);\n  builder=factory.newDocumentBuilder();\n  if (verify)   builder.setErrorHandler(new XMLErrorHandler());\n  if (loader == null)   throw new NullPointerException(\"loader is null\");\n}\n"}
{"nl": "Block with wait/notifyAll semantics", "code": "public static PhasedBackoffWaitStrategy withLiteLock(long spinTimeout,long yieldTimeout,TimeUnit units){\n  return new PhasedBackoffWaitStrategy(spinTimeout,yieldTimeout,units,new LiteBlockingWaitStrategy());\n}\n"}
{"nl": "Creates new form JMXDetailsPanel", "code": "public JMXDetailsPanel(){\n  initComponents();\n  postInit();\n}\n"}
{"nl": "Tell the client about an error in their query", "code": "private void sendQueryError(String errorMessage){\n  Iterable<String> splitError=Splitter.fixedLength(QUERY_CHUNK_SIZE).split(errorMessage + \"\\n\");\n  for (  String errorChunk : splitError) {\n    sendJson(Json.object(ACTION,ACTION_ERROR,ERROR,errorChunk));\n  }\n  sendJson(Json.object(ACTION,ACTION_QUERY_END));\n}\n"}
{"nl": "Validate matching of finished launch tags and project settings for emailing", "code": "@VisibleForTesting static boolean isTagsMatched(Launch launch,EmailSenderCase oneCase){\n  return !(null != oneCase.getTags() && !oneCase.getTags().isEmpty()) || null != launch.getTags() && oneCase.getTags().containsAll(launch.getTags());\n}\n"}
{"nl": "Save a facility report for unit", "code": "@RequestMapping(method=RequestMethod.POST,value=\"orgUnits/{id}/dataSets\") @ResponseBody public String saveDataSetValues2_8(@PathVariable int id,@RequestBody DataSetValue dataSetValue) throws NotAllowedException {\n  facilityReportingService.saveDataSetValues(getUnit(id),dataSetValue);\n  return DATASET_REPORT_UPLOADED;\n}\n"}
{"nl": "calculate the values of date[] and the legal range of index of date[]", "code": "private void initial(){\n  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);\n  int monthStart=-1;\n  if (dayOfWeek >= 2 && dayOfWeek <= 7) {\n    monthStart=dayOfWeek - 2;\n  }\n else   if (dayOfWeek == 1) {\n    monthStart=6;\n  }\n  curStartIndex=monthStart;\n  date[monthStart]=1;\n  int daysOfMonth=daysOfCurrentMonth();\n  for (int i=1; i < daysOfMonth; i++) {\n    date[monthStart + i]=i + 1;\n  }\n  curEndIndex=monthStart + daysOfMonth;\n  if (calendar.get(Calendar.YEAR) == Calendar.getInstance().get(Calendar.YEAR) && calendar.get(Calendar.MONTH) == Calendar.getInstance().get(Calendar.MONTH)) {\n    todayIndex=Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + monthStart - 1;\n  }\n else {\n    todayIndex=-1;\n  }\n}\n"}
{"nl": "Set target uids", "code": "public FriendsGetMutualQuery targetUids(List<Integer> value){\n  return unsafeParam(\"target_uids\",value);\n}\n"}
{"nl": "Constructs new instance of <tt>CM_CM_REQUEST_DIALOG </tt> packet", "code": "public CM_DIALOG_SELECT(int opcode,State state,State... restStates){\n  super(opcode,state,restStates);\n}\n"}
{"nl": "Initiate the static fields, retrieving it from the <code>context</code>", "code": "private static void initiateGatewayFields(final ApplicationContext context){\n  tagManager=context.getBean(TagManager.class);\n  supervisionManager=context.getBean(SupervisionManager.class);\n  commandManager=context.getBean(CommandManager.class);\n  alarmService=context.getBean(AlarmService.class);\n  configurationService=context.getBean(ConfigurationService.class);\n  statisticsService=context.getBean(StatisticsService.class);\n  tagService=context.getBean(TagService.class);\n}\n"}
{"nl": "Append a String to a specified column", "code": "public Builder appendStringColumnTransform(String column,String toAppend){\n  return transform(new AppendStringColumnTransform(column,toAppend));\n}\n"}
{"nl": "creates an assignment algorithm", "code": "@Override public IAssignmentAlgorithm createAssignmentAlgorithm(){\n  return new AssignmentUsingLCAForTaxonomy(cName,usePercentIdentityFilter);\n}\n"}
{"nl": "Sort order", "code": "public PhotosGetUserPhotosQuery sort(PhotosGetUserPhotosSort value){\n  return unsafeParam(\"sort\",value);\n}\n"}
{"nl": "Handle Dialog_Select", "code": "public void onDialogSelect(int dialogId,Player player,int questId,int extendedRewardIndex){\n}\n"}
{"nl": "Add arguments", "code": "public CommandBuilder withArguments(String... arguments){\n  this.arguments.addAll(Arrays.asList(arguments));\n  return this;\n}\n"}
{"nl": "Create and parse allowable options", "code": "public DistributedTestCLI(String[] args){\n  cliOptions=createOptions();\n  try {\n    CommandLineParser parser=new GnuParser();\n    commandLine=parser.parse(cliOptions,args,true);\n    if (hasOption(\"h\")) {\n      printHelp();\n      System.exit(1);\n    }\n    if (!hasOption(\"j\")) {\n      logger.info(\"The full path of the jar file must be set with -j\");\n      System.exit(1);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    System.exit(1);\n  }\n}\n"}
{"nl": "Checks if any of conditions is boolean", "code": "private void inspectConditionsWithBooleans(LinkedList<PsiElement> objBranchConditions){\n  for (  PsiElement objExpression : objBranchConditions) {\n    if (!(objExpression instanceof ConstantReference)) {\n      continue;\n    }\n    if (ExpressionSemanticUtil.isBoolean((ConstantReference)objExpression)) {\n      holder.registerProblem(objExpression,strProblemDescriptionBooleans,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);\n    }\n  }\n}\n"}
{"nl": "Print mean and variance vectors", "code": "public void printVectors(double m[][],double v[][]){\n  for (int i=0; i < v.length; i++) {\n    System.out.print(\"  mean[\" + i + \"]: \");\n    for (int j=0; j < m[i].length; j++)     System.out.format(\"%.6f \",m[i][j]);\n    System.out.print(\"\\n  vari[\" + i + \"]: \");\n    for (int j=0; j < v[i].length; j++)     System.out.format(\"%.6f \",v[i][j]);\n    System.out.println();\n  }\n}\n"}
{"nl": "Creates a column family instance", "code": "public static DefaultColumnEntity of(String name,List<Column> columns){\n  DefaultColumnEntity columnEntity=new DefaultColumnEntity(name);\n  columnEntity.addAll(columns);\n  return columnEntity;\n}\n"}
{"nl": "Converts a name to a case-insensitive with simple chars id", "code": "public static String identity(String str){\n  return Normalizer.normalize(str.trim().toLowerCase(),Normalizer.Form.NFD).replaceAll(\"[^a-z0-9]\",\"\");\n}\n"}
{"nl": "export the tree", "code": "public static int apply(ViewerBase viewer,Writer writer,boolean showInternalLabels,boolean showUnassignedLabels,boolean simplify) throws IOException {\n  PhyloTree tree=viewer.getTree();\n  Node root=tree.getRoot();\n  if (root == null)   return 0;\n  NodeSet toUse=null;\n  if (viewer.getSelectedNodes().size() > 0) {\n    toUse=new NodeSet(tree);\n    visitNodesToUseRec(viewer,root,toUse);\n    while (!viewer.getSelected(root)) {\n      Node w=null;\n      for (Edge e=root.getFirstOutEdge(); e != null; e=root.getNextOutEdge(e)) {\n        if (toUse.contains(e.getTarget())) {\n          if (w == null)           w=e.getTarget();\n else {\n            w=null;\n            break;\n          }\n        }\n      }\n      if (w != null)       root=w;\n else       break;\n    }\n  }\n  int countNodes=writeAsTreeRec(viewer,toUse,root,writer,showInternalLabels,showUnassignedLabels,simplify,0);\n  writer.write(\";\\n\");\n  return countNodes;\n}\n"}
{"nl": "gets the position of the next newline character", "code": "public static int nextNewLine(byte[] text,int offset){\n  while (offset < text.length) {\n    if (text[offset] == '\\n')     return offset;\n else     offset++;\n  }\n  return offset;\n}\n"}
{"nl": "Checks whether attribute is deprecated by looking up \"deprecated\" in its documenting comment", "code": "public boolean isAttributeDeprecated(){\n  final String doc=getDocValue(null);\n  return doc != null && StringUtil.containsIgnoreCase(doc,\"deprecated\");\n}\n"}
{"nl": "Construct the initial view", "code": "public PDFView(Context context,AttributeSet set){\n  super(context,set);\n  if (isInEditMode()) {\n    return;\n  }\n  cacheManager=new CacheManager();\n  animationManager=new AnimationManager(this);\n  dragPinchManager=new DragPinchManager(this,animationManager);\n  paint=new Paint();\n  debugPaint=new Paint();\n  debugPaint.setStyle(Style.STROKE);\n  pdfiumCore=new PdfiumCore(context);\n  setWillNotDraw(false);\n}\n"}
{"nl": "Convert an BufferedImage to an bgr spectrum image", "code": "public INDArray toBgr(BufferedImage image){\n  if (image == null)   throw new IllegalStateException(\"Unable to load image\");\n  image=scalingIfNeed(image,false);\n  return toINDArrayBGR(image);\n}\n"}
{"nl": "Send the given autocomplete results to the client", "code": "private void sendAutocomplete(Autocomplete autocomplete){\n  sendJson(Json.object(ACTION,ACTION_AUTOCOMPLETE,AUTOCOMPLETE_CANDIDATES,autocomplete.getCandidates(),AUTOCOMPLETE_CURSOR,autocomplete.getCursorPosition()));\n}\n"}
{"nl": "c2ir: The minimum phase impulse response is evaluated from the minimum phase cepstrum", "code": "public static void c2ir(double c[],int nc,double hh[],int leng){\n  hh[0]=Math.exp(c[0]);\n  for (int n=1; n < leng; n++) {\n    double d=0;\n    int upl=(n >= nc) ? nc - 1 : n;\n    for (int k=1; k <= upl; k++)     d+=k * c[k] * hh[n - k];\n    hh[n]=d / n;\n  }\n}\n"}
{"nl": "pass a class name to check if is a filter name", "code": "public static boolean isFilterClass(String clzName){\n  if (clzName == null || clzName.length() == 0)   return false;\n  for (  String prefix : Constants.FILTER_PREFIX) {\n    if (clzName.startsWith(prefix)) {\n      return true;\n    }\n  }\n  return false;\n}\n"}
{"nl": "Offset required to get a certain subset of chairs", "code": "public DatabaseGetChairsQuery offset(Integer value){\n  return unsafeParam(\"offset\",value);\n}\n"}
{"nl": "Save space state", "code": "protected void saveState(StartupState state) throws IOException {\n  createStateFileIfNotExists();\n  BufferedWriter writer=new BufferedWriter(new FileWriter(_stateFile));\n  writer.write(state.toString());\n  writer.flush();\n}\n"}
{"nl": "parses the given command and executes it", "code": "@Override public void apply(NexusStreamParser np) throws Exception {\n  np.matchIgnoreCase(\"load mapFile=\");\n  final String fileName=np.getWordFileNamePunctuation();\n  np.matchIgnoreCase(\"mapType=\");\n  final IdMapper.MapType mapType=IdMapper.MapType.valueOf(np.getWordMatchesRespectingCase(Basic.toString(IdMapper.MapType.values(),\" \")));\n  np.matchIgnoreCase(\"cName=\");\n  final String cName=np.getWordMatchesRespectingCase(Basic.toString(ClassificationManager.getAllSupportedClassifications(),\" \"));\n  np.matchIgnoreCase(\";\");\n  try {\n    Classification classification=ClassificationManager.get(cName,true);\n    ProgressListener progressListener;\n    if (ProgramProperties.isUseGUI())     progressListener=new ProgressDialog(\"Loading file\",\"\",(Component)getParent());\n else     progressListener=new ProgressPercentage();\n    try {\n      final IdMapper mapper=classification.getIdMapper();\n      mapper.loadMappingFile(fileName,mapType,true,progressListener);\n    }\n  finally {\n      progressListener.close();\n    }\n    if (getParent() instanceof ImportBlastDialog) {\n      ((ImportBlastDialog)getParent()).getCommandManager().execute(\"use cViewer=\" + cName + \" state=true;\");\n    }\n    ProgramProperties.put(ClassificationManager.getMapFileKey(cName,mapType),fileName);\n  }\n catch (  Exception ex) {\n    Basic.caught(ex);\n  }\n}\n"}
{"nl": "Simple test assertion utility method", "code": "protected void testAssertMappedValues(double[] data,Object[][] map,Double p,Double tolerance,NaNStrategy nanStrategy){\n  for (  Object[] o : map) {\n    Percentile.EstimationType e=(Percentile.EstimationType)o[0];\n    double expected=(Double)o[1];\n    try {\n      double result=new Percentile(p).withEstimationType(e).withNaNStrategy(nanStrategy).evaluate(data);\n      assertEquals(\"expected[\" + e + \"] = \"+ expected+ \" but was = \"+ result,expected,result,tolerance);\n    }\n catch (    Exception ex) {\n      fail(\"Exception occured for estimation type \" + e + \":\"+ ex.getLocalizedMessage());\n    }\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  AlignmentViewer viewer=(AlignmentViewer)getViewer();\n  return viewer.getAlignment().getLength() > 0;\n}\n"}
{"nl": "Change bezier view background color", "code": "void changeBackgroundColor(int backgroundColor){\n  this.backgroundColor=backgroundColor;\n  invalidate();\n}\n"}
{"nl": "Add stackable item to inventory", "code": "private static long addStackableItem(Player player,ItemTemplate itemTemplate,long count,ItemUpdatePredicate predicate){\n  Storage inventory=player.getInventory();\n  Collection<Item> items=inventory.getItemsByItemId(itemTemplate.getTemplateId());\n  for (  Item item : items) {\n    if (count == 0) {\n      break;\n    }\n    count=inventory.increaseItemCount(item,count,predicate.getUpdateType(item,true));\n  }\n  if (itemTemplate.getCategory() == ItemCategory.SHARD) {\n    Equipment equipment=player.getEquipment();\n    items=equipment.getEquippedItemsByItemId(itemTemplate.getTemplateId());\n    for (    Item item : items) {\n      if (count == 0) {\n        break;\n      }\n      count=equipment.increaseEquippedItemCount(item,count);\n    }\n  }\n  while (!inventory.isFull(itemTemplate.getExtraInventoryId()) && count > 0) {\n    Item newItem=ItemFactory.newItem(itemTemplate.getTemplateId(),count);\n    count-=newItem.getItemCount();\n    inventory.add(newItem,predicate.getAddType());\n  }\n  return count;\n}\n"}
{"nl": "Basic data initialization", "code": "@SuppressWarnings(\"ResourceType\") private void initFromAttributes(Context context,AttributeSet attrs){\n  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CircleProgressBar);\n  mBackgroundColor=a.getColor(R.styleable.CircleProgressBar_background_color,Color.TRANSPARENT);\n  mDrawProgressText=a.getBoolean(R.styleable.CircleProgressBar_draw_progress_text,true);\n  mLineCount=a.getInt(R.styleable.CircleProgressBar_line_count,DEFAULT_LINE_COUNT);\n  mProgressTextFormatPattern=a.hasValue(R.styleable.CircleProgressBar_progress_text_format_pattern) ? a.getString(R.styleable.CircleProgressBar_progress_text_format_pattern) : DEFAULT_PATTERN;\n  mStyle=a.getInt(R.styleable.CircleProgressBar_style,LINE);\n  mShader=a.getInt(R.styleable.CircleProgressBar_progress_shader,LINEAR);\n  mCap=a.hasValue(R.styleable.CircleProgressBar_progress_stroke_cap) ? Paint.Cap.values()[a.getInt(R.styleable.CircleProgressBar_progress_stroke_cap,0)] : Paint.Cap.BUTT;\n  mLineWidth=a.getDimensionPixelSize(R.styleable.CircleProgressBar_line_width,UnitUtils.dip2px(getContext(),DEFAULT_LINE_WIDTH));\n  mProgressTextSize=a.getDimensionPixelSize(R.styleable.CircleProgressBar_progress_text_size,UnitUtils.dip2px(getContext(),DEFAULT_PROGRESS_TEXT_SIZE));\n  mProgressStrokeWidth=a.getDimensionPixelSize(R.styleable.CircleProgressBar_progress_stroke_width,UnitUtils.dip2px(getContext(),DEFAULT_PROGRESS_STROKE_WIDTH));\n  mProgressStartColor=a.getColor(R.styleable.CircleProgressBar_progress_start_color,Color.parseColor(COLOR_FFF2A670));\n  mProgressEndColor=a.getColor(R.styleable.CircleProgressBar_progress_end_color,Color.parseColor(COLOR_FFF2A670));\n  mProgressTextColor=a.getColor(R.styleable.CircleProgressBar_progress_text_color,Color.parseColor(COLOR_FFF2A670));\n  mProgressBackgroundColor=a.getColor(R.styleable.CircleProgressBar_progress_background_color,Color.parseColor(COLOR_FFD3D3D5));\n  a.recycle();\n}\n"}
{"nl": "Execute non-select queries", "code": "public int executeUpdate(String sql) throws SQLException {\n  init();\n  if (sql.trim().toUpperCase().startsWith(\"SELECT\"))   throw new SQLException(\"Cannot call SELECT with executeUpdate. Use executeQuery instead\",\"GSP\",-143);\n  ResponsePacket response=connection.sendStatement(sql);\n  updateCount=response.getIntResult();\n  return updateCount;\n}\n"}
{"nl": "Returns true if field traceInfo is set (has been assigned a value) and false otherwise", "code": "public boolean isSetTraceInfo(){\n  return this.traceInfo != null;\n}\n"}
{"nl": "call this method to refresh the graph with a given matrix", "code": "public Matrix refresh(Matrix newMatrix,View chart,boolean invalidate){\n  mMatrixTouch.set(newMatrix);\n  limitTransAndScale(mMatrixTouch,mContentRect);\n  if (invalidate) {\n    chart.invalidate();\n  }\n  newMatrix.set(mMatrixTouch);\n  return newMatrix;\n}\n"}
{"nl": "ask view to destroy itself", "code": "public void destroyView() throws CanceledException {\n  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());\n  super.destroyView();\n}\n"}
{"nl": "Player entered world - search for non expired group", "code": "public static final void onPlayerLogin(Player player){\n  for (  PlayerGroup group : groups.values()) {\n    PlayerGroupMember member=group.getMember(player.getObjectId());\n    if (member != null) {\n      group.onEvent(new PlayerConnectedEvent(group,player));\n    }\n  }\n}\n"}
{"nl": "Create MockZookeeper instance", "code": "protected MockZooKeeper createMockZooKeeper() throws Exception {\n  MockZooKeeper zk=MockZooKeeper.newInstance(MoreExecutors.sameThreadExecutor());\n  ZkUtils.createFullPathOptimistic(zk,LOADBALANCE_BROKERS_ROOT,\"\".getBytes(ZookeeperClientFactoryImpl.ENCODING_SCHEME),ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  return zk;\n}\n"}
{"nl": "It checks the number of lines that the fallback log file has", "code": "private int calcNumberOfLines() throws DataFallbackException {\n  int lines=0;\n  openFallbackInputStream();\n  try {\n    while (getInput().readLine() != null) {\n      lines++;\n    }\n  }\n catch (  IOException e) {\n    throw new DataFallbackException();\n  }\n finally {\n    closeFallbackInputStream();\n  }\n  return lines;\n}\n"}
{"nl": "Construct a new source", "code": "public SharedDataIteratorSource(Object identifier,ISourceDataIteratorProvider<T> sourceDataIteratorProvider,long timeToLive){\n  if (sourceDataIteratorProvider == null)   throw new IllegalArgumentException(\"sourceDataIteratorProvider cannot be null\");\n  _identifier=identifier;\n  _sourceDataIteratorProvider=sourceDataIteratorProvider;\n  _timeToLive=timeToLive;\n  _createdTime=SystemTime.timeMillis();\n}\n"}
{"nl": "Current users: %0", "code": "public static SM_SYSTEM_MESSAGE STR_LIST_USER(String value0){\n  return new SM_SYSTEM_MESSAGE(1300641,value0);\n}\n"}
{"nl": "NON-DOM: release DTD loader", "code": "synchronized final void releaseDTDLoader(String xmlVersion,XMLDTDLoader loader){\n  if (\"1.1\".equals(xmlVersion)) {\n    ++freeXML11DTDLoaderIndex;\n    if (xml11DTDLoaders.length == freeXML11DTDLoaderIndex) {\n      xml11DTDLoaderCurrentSize+=SIZE;\n      SoftReference[] newarray=new SoftReference[xml11DTDLoaderCurrentSize];\n      System.arraycopy(xml11DTDLoaders,0,newarray,0,xml11DTDLoaders.length);\n      xml11DTDLoaders=newarray;\n    }\n    SoftReference ref=xml11DTDLoaders[freeXML11DTDLoaderIndex];\n    if (ref != null) {\n      XMLDTDLoaderHolder holder=(XMLDTDLoaderHolder)ref.get();\n      if (holder != null) {\n        holder.loader=loader;\n        return;\n      }\n    }\n    xml11DTDLoaders[freeXML11DTDLoaderIndex]=new SoftReference(new XMLDTDLoaderHolder(loader));\n  }\n else {\n    ++freeXML10DTDLoaderIndex;\n    if (xml10DTDLoaders.length == freeXML10DTDLoaderIndex) {\n      xml10DTDLoaderCurrentSize+=SIZE;\n      SoftReference[] newarray=new SoftReference[xml10DTDLoaderCurrentSize];\n      System.arraycopy(xml10DTDLoaders,0,newarray,0,xml10DTDLoaders.length);\n      xml10DTDLoaders=newarray;\n    }\n    SoftReference ref=xml10DTDLoaders[freeXML10DTDLoaderIndex];\n    if (ref != null) {\n      XMLDTDLoaderHolder holder=(XMLDTDLoaderHolder)ref.get();\n      if (holder != null) {\n        holder.loader=loader;\n        return;\n      }\n    }\n    xml10DTDLoaders[freeXML10DTDLoaderIndex]=new SoftReference(new XMLDTDLoaderHolder(loader));\n  }\n}\n"}
{"nl": "Record the property according to the given style", "code": "private void updateStyleImp(Map<String,Object> style){\n  if (style != null) {\n    if (style.containsKey(WXDomPropConstant.WX_LINES)) {\n      int lines=WXStyle.getLines(style);\n      if (lines > 0) {\n        mNumberOfLines=lines;\n      }\n    }\n    if (style.containsKey(WXDomPropConstant.WX_FONTSIZE)) {\n      mFontSize=WXStyle.getFontSize(style);\n    }\n    if (style.containsKey(WXDomPropConstant.WX_FONTWEIGHT)) {\n      mFontWeight=WXStyle.getFontWeight(style);\n    }\n    if (style.containsKey(WXDomPropConstant.WX_FONTSTYLE)) {\n      mFontStyle=WXStyle.getFontStyle(style);\n    }\n    if (style.containsKey(WXDomPropConstant.WX_COLOR)) {\n      mColor=WXResourceUtils.getColor(WXStyle.getTextColor(style));\n      mIsColorSet=mColor != Integer.MIN_VALUE;\n    }\n    if (style.containsKey(WXDomPropConstant.WX_TEXTDECORATION)) {\n      mTextDecoration=WXStyle.getTextDecoration(style);\n    }\n    if (style.containsKey(WXDomPropConstant.WX_FONTFAMILY)) {\n      mFontFamily=WXStyle.getFontFamily(style);\n    }\n    mAlignment=WXStyle.getTextAlignment(style);\n    textOverflow=WXStyle.getTextOverflow(style);\n    int lineHeight=WXStyle.getLineHeight(style);\n    if (lineHeight != UNSET) {\n      mLineHeight=lineHeight;\n    }\n  }\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public UsersGetQuery(VkApiClient client,UserActor actor){\n  super(client,\"users.get\",Utils.buildParametrizedType(List.class,UserXtrCounters.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public MessagesSearchQuery(VkApiClient client,Actor actor){\n  super(client,\"messages.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Set a custom company domain to enter in the new project wizard", "code": "NewProjectDescriptor withCompanyDomain(@NotNull String domain){\n  myDomain=domain;\n  return this;\n}\n"}
{"nl": "Below method will be used to finish the execution", "code": "@Override public void finish() throws QueryExecutionException {\n  if (null != queryProperties.executorService) {\n    queryProperties.executorService.shutdownNow();\n  }\n}\n"}
{"nl": "close connector, if there is one", "code": "public void closeConnector(){\n  if (getMeganFile().hasDataConnector()) {\n    try {\n      if (isDirty()) {\n        if (getMeganFile().isReadOnly())         System.err.println(\"File is read-only, discarding changes\");\n else {\n          saveAuxiliaryData();\n        }\n      }\n      MeganFile.removeUIdFromSetOfOpenFiles(getMeganFile().getName(),getMeganFile().getDataConnector().getUId());\n      getMeganFile().setFileName(\"\");\n    }\n catch (    IOException e) {\n      Basic.caught(e);\n    }\n  }\n}\n"}
{"nl": "Creates a storable time fence which will be valid on Tuesday in the given daily time frame", "code": "public static StorableTimeFence inTuesdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){\n  return new StorableTimeFence(TUESDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosSaveQuery(VkApiClient client,UserActor actor){\n  super(client,\"photos.save\",Utils.buildParametrizedType(List.class,Photo.class));\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "NON-DOM:  increment document/doctype counter", "code": "protected synchronized int assignDocTypeNumber(){\n  return ++docAndDoctypeCounter;\n}\n"}
{"nl": "find the action", "code": "static protected Action findAction(String name){\n  if (kit == null)   kit=new DefaultEditorKit();\n  Action[] actions=kit.getActions();\n  for (int i=0; i < kit.getActions().length; i++) {\n    Action action=actions[i];\n    if (action.getValue(AbstractAction.NAME).equals(name))     return action;\n  }\n  return null;\n}\n"}
{"nl": "Adds the given friend to the list<br /> To add a friend in the database, see <tt>PlayerService</tt>", "code": "public void addFriend(Friend friend){\n  friends.add(friend);\n}\n"}
{"nl": "Calls target#act(delta)", "code": "public static ActAction act(float delta){\n  ActAction action=action(ActAction.class);\n  action.setDelta(delta);\n  return action;\n}\n"}
{"nl": "Returns true only if DB supports MySQL5", "code": "public static boolean supports(String db,int majorVersion,int minorVersion){\n  return MYSQL_DB_NAME.equals(db) && majorVersion == 5;\n}\n"}
{"nl": "Execute a command in the runtime environment", "code": "public static String execute(String command){\n  return execute(command,null);\n}\n"}
{"nl": "This method logs the WARNING message", "code": "public final void warn(final Object o){\n  log(Level.WARN,o);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public PhotosSearchQuery(VkApiClient client){\n  super(client,\"photos.search\",SearchResponse.class);\n}\n"}
{"nl": "Initializes context values based on sources, periods and rules", "code": "private void initialize(Collection<OrganisationUnit> sources,Collection<Period> periods,Collection<ValidationRule> rules){\n  addPeriodsToContext(periods);\n  boolean surveillanceRulesPresent=addRulesToContext(rules);\n  removeAnyUnneededPeriodTypes();\n  addSourcesToContext(sources,true);\n  countOfSourcesToValidate=sources.size();\n  if (surveillanceRulesPresent) {\n    Set<OrganisationUnit> otherDescendants=getAllOtherDescendants(sources);\n    addSourcesToContext(otherDescendants,false);\n  }\n}\n"}
{"nl": "Returns true if the app is requesting sensor data from the device with the specified node id", "code": "private boolean isRequestingSensorEventData(String nodeId){\n  SensorDataRequest request=sensorDataRequests.get(nodeId);\n  if (request == null) {\n    return false;\n  }\n  return request.getEndTimestamp() == DataRequest.TIMESTAMP_NOT_SET;\n}\n"}
{"nl": "/*    ", "code": "@deprecated public Object clone(){\n  try {\n    CompactByteArray other=(CompactByteArray)super.clone();\n    other.values=((byte[])this.values.clone());\n    other.indices=((char[])this.indices.clone());\n    if (this.hashes != null)     other.hashes=((int[])this.hashes.clone());\n    return other;\n  }\n catch (  CloneNotSupportedException e) {\n    throw new IllegalStateException();\n  }\n}\n"}
{"nl": "is the command currently applicable? Used to set enable state of command", "code": "public boolean isApplicable(){\n  return ((AlignmentViewer)getViewer()).getSelectedBlock().isSelected();\n}\n"}
{"nl": "Validate launch reference to specified project ID", "code": "private Launch validate(String launchId,String projectName){\n  Launch launch=launchRepository.findOne(launchId);\n  expect(launch,notNull()).verify(LAUNCH_NOT_FOUND,launchId);\n  expect(launch.getProjectRef(),equalTo(projectName)).verify(ErrorType.FORBIDDEN_OPERATION,formattedSupplier(\"Specified launch with id '{}' not referenced to specified project '{}'\",launchId,projectName));\n  return launch;\n}\n"}
{"nl": "Shift two int's together to form a compound key", "code": "private static long toLong(int x,int z){\n  return ((long)x << 32) + z - Integer.MIN_VALUE;\n}\n"}
{"nl": "Add CPeer to the watched objects (idle group)", "code": "public WatchedObject addIdleWatch(ConnectionResource client){\n  return addWatch(new ClientWatchedObject(this,client));\n}\n"}
{"nl": "Tried to registers a namespace to this instance", "code": "private boolean registerNamespace(String namespace,boolean ensureOwned) throws PulsarServerException {\n  String myUrl=pulsar.getBrokerServiceUrl();\n  try {\n    NamespaceName nsname=new NamespaceName(namespace);\n    String otherUrl=null;\n    NamespaceBundle nsFullBundle=null;\n    nsFullBundle=bundleFactory.getFullBundle(nsname);\n    otherUrl=ownershipCache.getOrSetOwner(nsFullBundle).getNativeUrl();\n    if (myUrl.equals(otherUrl)) {\n      if (nsFullBundle != null) {\n        pulsar.loadNamespaceDestinations(nsFullBundle);\n      }\n      return true;\n    }\n    String msg=String.format(\"namespace already owned by other broker : ns=%s expected=%s actual=%s\",namespace,myUrl,otherUrl);\n    if (!ensureOwned) {\n      LOG.info(msg);\n      return false;\n    }\n    throw new IllegalStateException(msg);\n  }\n catch (  Exception e) {\n    LOG.error(e.getMessage(),e);\n    throw new PulsarServerException(e);\n  }\n}\n"}
{"nl": "json --> obj", "code": "public static WxUserGroupResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {\n  ObjectMapper mapper=new ObjectMapper();\n  return mapper.readValue(json,WxUserGroupResult.class);\n}\n"}
{"nl": "Transform handler output in widget content format", "code": "private Map<String,List<ChartObject>> assembleData(Map<String,Integer> data){\n  Map<String,String> values=new HashMap<>();\n  data.keySet().stream().forEach(null);\n  ChartObject chartObject=new ChartObject();\n  chartObject.setValues(values);\n  Map<String,List<ChartObject>> result=new HashMap<>();\n  result.put(RESULT,Collections.singletonList(chartObject));\n  return result;\n}\n"}
{"nl": "This method checks all restrictions for changing self intro", "code": "private boolean canChangeSelfIntro(Player activePlayer,String newSelfIntro){\n  return isValidSelfIntro(newSelfIntro);\n}\n"}
{"nl": "ask view to prevent user input", "code": "public void lockUserInput(){\n  locked=true;\n  statusbar.setText1(\"\");\n  statusbar.setText2(\"Busy...\");\n  searchManager.getFindDialogAsToolBar().setEnableCritical(false);\n  if (bottomToolBar != null)   bottomToolBar.setEnabled(false);\n  getCommandManager().setEnableCritical(false);\n  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n  getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n}\n"}
{"nl": "Makes the resource name validator require that names already exist", "code": "public ResourceNameValidator exist(){\n  myExist=true;\n  myUnique=false;\n  return this;\n}\n"}
{"nl": "Creates new form FindDialog", "code": "public ReplaceDialog(JTextComponent text,FindReplaceActions finderActions){\n  super(ActionUtils.getFrameFor(text),false);\n  initComponents();\n  registerKeyAction(this);\n  textComponent=text;\n  finder=finderActions;\n  textComponent.addCaretListener(this);\n  setLocationRelativeTo(text.getRootPane());\n}\n"}
{"nl": "write the overlap graph", "code": "public Pair<Integer,Integer> writeOverlapGraph(Writer writer) throws IOException, CanceledException {\n  final NodeArray<String> names=new NodeArray<>(overlapGraph);\n  final NodeArray<String> sequences=new NodeArray<>(overlapGraph);\n  for (Node v=overlapGraph.getFirstNode(); v != null; v=v.getNext()) {\n    int i=(Integer)v.getInfo();\n    sequences.set(v,alignment.getLane(i).getBlock());\n    names.set(v,Basic.getFirstWord(alignment.getLane(i).getName()));\n  }\n  final Map<String,NodeArray<?>> label2nodes=new TreeMap<>();\n  label2nodes.put(\"label\",names);\n  label2nodes.put(\"sequence\",sequences);\n  final EdgeArray<Integer> overlap=new EdgeArray<>(overlapGraph);\n  for (Edge e=overlapGraph.getFirstEdge(); e != null; e=e.getNext()) {\n    overlap.set(e,(Integer)e.getInfo());\n  }\n  final Map<String,EdgeArray<?>> label2edges=new TreeMap<>();\n  label2edges.put(\"label\",null);\n  label2edges.put(\"overlap\",overlap);\n  overlapGraph.writeGML(writer,\"Overlap graph generated by MEGAN6\",true,alignment.getName(),1,label2nodes,label2edges);\n  return new Pair<>(overlapGraph.getNumberOfNodes(),overlapGraph.getNumberOfEdges());\n}\n"}
{"nl": "Given a new key code coming in, consider start executing an action based on its hotkey", "code": "private boolean considerTaskExecution(int keyCode){\n  if (keyCode == Config.HALT_TASK && config.isEnabledHaltingKeyPressed()) {\n    currentKeyChain.getKeys().clear();\n    haltAllTasks();\n    return true;\n  }\n  if (disablingFunction.apply(null)) {\n    return true;\n  }\n  UserDefinedAction action=actionMap.get(currentKeyChain);\n  if (action != null) {\n    action.setInvoker(TaskActivation.newBuilder().withHotKey(currentKeyChain.clone()).build());\n    action.setInvokingKeyChain(currentKeyChain.clone());\n  }\n  return startExecutingAction(action);\n}\n"}
{"nl": "Removes the node, and restarts the initialisation sequence", "code": "public void reinitialiseNode(int nodeId){\n  this.zwaveNodes.remove(nodeId);\n  addNode(nodeId);\n}\n"}
{"nl": "This method logs the FATAL message", "code": "public final void fatal(final Object o,final Throwable t){\n  log(Level.FATAL,o,t);\n}\n"}
{"nl": "only compare ids so far", "code": "@Override public boolean equals(Object dataTag){\n  if (dataTag instanceof AbstractTagCacheObject) {\n    return this.id.equals(((AbstractTagCacheObject)dataTag).getId());\n  }\n else {\n    return false;\n  }\n}\n"}
{"nl": "Create full space name based on container nadm and space name", "code": "public static String createFullSpaceName(String containerName,String spaceName){\n  return containerName + \":\" + spaceName;\n}\n"}
{"nl": "draws the hole in the center of the chart and the transparent circle / hole", "code": "protected void drawHole(Canvas c){\n  if (mChart.isDrawHoleEnabled()) {\n    float radius=mChart.getRadius();\n    float holeRadius=radius * (mChart.getHoleRadius() / 100);\n    PointF center=mChart.getCenterCircleBox();\n    if (Color.alpha(mHolePaint.getColor()) > 0) {\n      mBitmapCanvas.drawCircle(center.x,center.y,holeRadius,mHolePaint);\n    }\n    if (Color.alpha(mTransparentCirclePaint.getColor()) > 0 && mChart.getTransparentCircleRadius() > mChart.getHoleRadius()) {\n      int alpha=mTransparentCirclePaint.getAlpha();\n      float secondHoleRadius=radius * (mChart.getTransparentCircleRadius() / 100);\n      mTransparentCirclePaint.setAlpha((int)((float)alpha * mAnimator.getPhaseX() * mAnimator.getPhaseY()));\n      mHoleCirclePath.reset();\n      mHoleCirclePath.addCircle(center.x,center.y,secondHoleRadius,Path.Direction.CW);\n      mHoleCirclePath.addCircle(center.x,center.y,holeRadius,Path.Direction.CCW);\n      mBitmapCanvas.drawPath(mHoleCirclePath,mTransparentCirclePaint);\n      mTransparentCirclePaint.setAlpha(alpha);\n    }\n  }\n}\n"}
{"nl": "<br> 2015-4-29", "code": "public static void d(String tag,String msg){\n  if (isDebug) {\n    Log.d(tag,msg);\n  }\n}\n"}
{"nl": "builds a fork process exception", "code": "protected ForkProcessException newForkProcessException(Throwable t){\n  return new ForkProcessException(\"Failed to start process [\" + getProcessArgs() + \"]\",t);\n}\n"}
{"nl": "Remove container and move its children to the same level", "code": "public void removeContainer(ConstraintWidgetContainer container){\n  ConstraintWidgetContainer parent=(ConstraintWidgetContainer)container.getParent();\n  if (parent == null) {\n    return;\n  }\n  for (  ConstraintWidget widget : mWidgets.values()) {\n    widget.disconnectWidget(container);\n  }\n  ArrayList<ConstraintWidget> children=new ArrayList<>(container.getChildren());\n  for (  ConstraintWidget child : children) {\n    parent.add(child);\n    child.resetAnchors();\n    child.setX(child.getX() + container.getX());\n    child.setY(child.getY() + container.getY());\n  }\n  parent.remove(container);\n  mWidgets.remove(getTag(container));\n}\n"}
{"nl": "built-in derived types by restriction", "code": "void applyFacets1(XSFacets facets,short presentFacet,short fixedFacet){\n  try {\n    applyFacets(facets,presentFacet,fixedFacet,SPECIAL_PATTERN_NONE,fDummyContext);\n  }\n catch (  InvalidDatatypeFacetException e) {\n    throw new RuntimeException(\"internal error\");\n  }\n  fIsImmutable=true;\n}\n"}
{"nl": "Player should be in alliance before disconnection", "code": "@Override public boolean checkCondition(){\n  return alliance.hasMember(disconnected.getObjectId());\n}\n"}
{"nl": "Add custom view insertion to adapter", "code": "public void addInsertion(int position,Insertion insert){\n  setHasNewItems(true);\n  int insertPosition=calcInsertPosition(position);\n  if (insertPosition == getItemCount()) {\n    mInserts.add(insert);\n    getItems().add(null);\n  }\n else {\n    mInserts.add(insertPosition,insert);\n    getItems().add(insertPosition,null);\n  }\n  updateCounter(insert);\n  notifyIfNeed();\n}\n"}
{"nl": "Writes an NBT list to the buffer", "code": "public static void writeNBTList(PacketBuffer buf,NBTTagList value){\n  buf.writeInt(value.tagCount());\n  for (int i=0; i < value.tagCount(); i++) {\n    buf.writeNBTTagCompoundToBuffer(value.getCompoundTagAt(i));\n  }\n}\n"}
{"nl": "parse columnTypeName to corresponding java class", "code": "public static String parseColumnType(String typeName,int colSize,int scale){\n  typeName=typeName.toUpperCase();\n  if ((typeName.startsWith(\"INT\") || typeName.startsWith(\"SMALLINT\") || typeName.startsWith(\"TINYINT\")|| typeName.startsWith(\"INTEGER\")|| (typeName.startsWith(\"NUMBER\") && scale <= 0)) && colSize < 10) {\n    return iswrapper ? INT_WRAPPER : INT;\n  }\n else   if ((typeName.startsWith(\"BIGINT\") || typeName.startsWith(\"LONG\") || (typeName.startsWith(\"NUMBER\") && scale <= 0)|| typeName.startsWith(\"INT\")) && colSize >= 10) {\n    return iswrapper ? LONG_WRAPPER : LONG;\n  }\n else   if (typeName.startsWith(\"VARCHAR\")) {\n    return STRING;\n  }\n else   if ((typeName.startsWith(\"NUMBER\") || typeName.startsWith(\"DECIMAL\") || typeName.startsWith(\"NUMERIC\")|| typeName.startsWith(\"DOUBLE\")|| typeName.startsWith(\"FLOAT\")) && scale > 0) {\n    return DECIMAL;\n  }\n else   if (typeName.startsWith(\"TIMESTAMP\") || typeName.startsWith(\"DATETIME\")) {\n    return TIMESTAMP;\n  }\n else   if (typeName.startsWith(\"DATE\")) {\n    return DATE;\n  }\n else {\n    return STRING;\n  }\n}\n"}
{"nl": "Required for Externalizable", "code": "public CountClearEntriesSpaceOperationResult(){\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public GroupsGetByIdQuery(VkApiClient client){\n  super(client,\"groups.getById\",Utils.buildParametrizedType(List.class,GroupFull.class));\n}\n"}
{"nl": "get string of n gaps", "code": "private String gaps(int n){\n  StringBuilder buf=new StringBuilder();\n  for (; n > 0; n--) {\n    buf.append('-');\n  }\n  return buf.toString();\n}\n"}
{"nl": "Write a schema to a HDFS (or, local) file in a human-readable format", "code": "public static void writeSchema(String outputPath,Schema schema,JavaSparkContext sc) throws IOException {\n  writeStringToFile(outputPath,schema.toString(),sc);\n}\n"}
{"nl": "Create an aircraft for the authenticated pilot", "code": "public static void createAircraft(AirMapAircraft aircraft,@Nullable AirMapCallback<AirMapAircraft> callback){\n  PilotService.createAircraft(aircraft,callback);\n}\n"}
{"nl": "Checks if a group features on this track", "code": "public boolean containsGroup(Group group){\n  return containsGroup(group.getName());\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public VideoRemoveTagQuery(VkApiClient client,UserActor actor,int tagId,int videoId){\n  super(client,\"video.removeTag\",OkResponse.class);\n  accessToken(actor.getAccessToken());\n  tagId(tagId);\n  videoId(videoId);\n}\n"}
{"nl": "does next element exist?", "code": "public boolean hasNext(){\n  return iterator.hasNext() || pos < top;\n}\n"}
{"nl": "debug log", "code": "public static void d(String tag,String msg){\n  if (LOG_ENABLE && Log.isLoggable(tag,Log.DEBUG)) {\n    Log.d(tag,buildMsg(msg));\n  }\n}\n"}
{"nl": "Show empty view when there are not data to show", "code": "public void showEmpty(Drawable emptyImageDrawable,String emptyTextContent){\n  switchState(EMPTY,emptyImageDrawable,emptyTextContent,null,null,Collections.<Integer>emptyList());\n}\n"}
{"nl": "Converts a linked options list to a byte array", "code": "public byte[] externalize(){\n  byte[] options=new byte[312];\n  options[0]=(byte)99;\n  options[1]=(byte)130;\n  options[2]=(byte)83;\n  options[3]=(byte)99;\n  int position=4;\n  Enumeration<DHCPOptionsEntry> e=this.optionsTable.elements();\n  while (e.hasMoreElements()) {\n    DHCPOptionsEntry entry=e.nextElement();\n    options[position++]=entry.code;\n    options[position++]=entry.length;\n    for (int i=0; i < entry.length; ++i) {\n      options[position++]=entry.content[i];\n    }\n  }\n  options[position]=(byte)255;\n  return options;\n}\n"}
{"nl": "Set target id", "code": "public VideoDeleteQuery targetId(Integer value){\n  return unsafeParam(\"target_id\",value);\n}\n"}
{"nl": "Creates a AbstractQueryBuilder instance that can be used to build api request with various parameters", "code": "public AudioSearchQuery(VkApiClient client,UserActor actor){\n  super(client,\"audio.search\",SearchResponse.class);\n  accessToken(actor.getAccessToken());\n}\n"}
{"nl": "Pauses the audio output", "code": "public void pause(){\n}\n"}
